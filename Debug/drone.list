
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012bc4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08012dc8  08012dc8  00022dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013388  08013388  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  08013388  08013388  00023388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013390  08013390  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013390  08013390  00023390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013394  08013394  00023394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08013398  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005dfc  20000224  080135bc  00030224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006020  080135bc  00036020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ec9e  00000000  00000000  00030252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007531  00000000  00000000  0007eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038b0  00000000  00000000  00086428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000035b8  00000000  00000000  00089cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6e4  00000000  00000000  0008d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035910  00000000  00000000  000bb974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b7f0  00000000  00000000  000f1284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020ca74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f718  00000000  00000000  0020cac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000224 	.word	0x20000224
 800021c:	00000000 	.word	0x00000000
 8000220:	08012dac 	.word	0x08012dac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000228 	.word	0x20000228
 800023c:	08012dac 	.word	0x08012dac

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <applyAccelerationTrims+0x70>)
 800054e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000558:	ee07 3a90 	vmov	s15, r3
 800055c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <applyAccelerationTrims+0x70>)
 8000566:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <applyAccelerationTrims+0x70>)
 800056c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000576:	ee07 3a90 	vmov	s15, r3
 800057a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800057e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <applyAccelerationTrims+0x70>)
 8000584:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <applyAccelerationTrims+0x70>)
 800058a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000594:	ee07 3a90 	vmov	s15, r3
 8000598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800059c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <applyAccelerationTrims+0x70>)
 80005a2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000240 	.word	0x20000240

080005b8 <accInitFilters>:


static void accInitFilters(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 80005be:	4b2e      	ldr	r3, [pc, #184]	; (8000678 <accInitFilters+0xc0>)
 80005c0:	2232      	movs	r2, #50	; 0x32
 80005c2:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <accInitFilters+0xc4>)
 80005c6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d002      	beq.n	80005d4 <accInitFilters+0x1c>
 80005ce:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <accInitFilters+0xc0>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	e000      	b.n	80005d6 <accInitFilters+0x1e>
 80005d4:	2300      	movs	r3, #0
 80005d6:	4a2a      	ldr	r2, [pc, #168]	; (8000680 <accInitFilters+0xc8>)
 80005d8:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 80005da:	4b29      	ldr	r3, [pc, #164]	; (8000680 <accInitFilters+0xc8>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d02c      	beq.n	800063c <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <accInitFilters+0xc4>)
 80005e4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80005e8:	ee07 3a90 	vmov	s15, r3
 80005ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005f0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000670 <accInitFilters+0xb8>
 80005f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80005f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005fc:	ee17 3a90 	vmov	r3, s15
 8000600:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	e016      	b.n	8000636 <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <accInitFilters+0xc8>)
 8000614:	4413      	add	r3, r2
 8000616:	3304      	adds	r3, #4
 8000618:	4a19      	ldr	r2, [pc, #100]	; (8000680 <accInitFilters+0xc8>)
 800061a:	8812      	ldrh	r2, [r2, #0]
 800061c:	ee07 2a90 	vmov	s15, r2
 8000620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000624:	6839      	ldr	r1, [r7, #0]
 8000626:	eeb0 0a67 	vmov.f32	s0, s15
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fbe2 	bl	8000df4 <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b02      	cmp	r3, #2
 800063a:	dde5      	ble.n	8000608 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <accInitFilters+0xc8>)
 800063e:	2200      	movs	r2, #0
 8000640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <accInitFilters+0xc8>)
 8000646:	f04f 0200 	mov.w	r2, #0
 800064a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <accInitFilters+0xc8>)
 8000650:	f04f 0200 	mov.w	r2, #0
 8000654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <accInitFilters+0xc8>)
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	f3af 8000 	nop.w
 8000670:	00000000 	.word	0x00000000
 8000674:	412e8480 	.word	0x412e8480
 8000678:	20000334 	.word	0x20000334
 800067c:	20000240 	.word	0x20000240
 8000680:	200002a0 	.word	0x200002a0

08000684 <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <setAccelerationTrims+0x1c>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200002a0 	.word	0x200002a0

080006a4 <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 80006ae:	2260      	movs	r2, #96	; 0x60
 80006b0:	2100      	movs	r1, #0
 80006b2:	4824      	ldr	r0, [pc, #144]	; (8000744 <accInit+0xa0>)
 80006b4:	f012 f88c 	bl	80127d0 <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <accInit+0xa0>)
 80006ba:	4a23      	ldr	r2, [pc, #140]	; (8000748 <accInit+0xa4>)
 80006bc:	621a      	str	r2, [r3, #32]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <accInit+0xa8>)
 80006c0:	78da      	ldrb	r2, [r3, #3]
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <accInit+0xa0>)
 80006c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <accInit+0xac>)
 80006ca:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80006ce:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 80006d0:	7bfa      	ldrb	r2, [r7, #15]
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 ffb3 	bl	8005644 <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 80006de:	4a19      	ldr	r2, [pc, #100]	; (8000744 <accInit+0xa0>)
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	7793      	strb	r3, [r2, #30]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	491a      	ldr	r1, [pc, #104]	; (8000754 <accInit+0xb0>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 ff66 	bl	80055bc <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <accInit+0xa0>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 80006f6:	4a13      	ldr	r2, [pc, #76]	; (8000744 <accInit+0xa0>)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <accInit+0xa0>)
 80006fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000702:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <accInit+0xa0>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	480e      	ldr	r0, [pc, #56]	; (8000744 <accInit+0xa0>)
 800070a:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <accInit+0xa0>)
 800070e:	899b      	ldrh	r3, [r3, #12]
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800071c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <accInit+0xa0>)
 8000722:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <accInit+0xa0>)
 8000728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	setAccelerationTrims(&accelerometerConfig.accZero);
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <accInit+0xb4>)
 8000732:	f7ff ffa7 	bl	8000684 <setAccelerationTrims>

	accInitFilters();
 8000736:	f7ff ff3f 	bl	80005b8 <accInitFilters>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000240 	.word	0x20000240
 8000748:	200004e0 	.word	0x200004e0
 800074c:	20000334 	.word	0x20000334
 8000750:	200004a4 	.word	0x200004a4
 8000754:	20000268 	.word	0x20000268
 8000758:	20000338 	.word	0x20000338

0800075c <accUpdate>:

void accUpdate(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000762:	4b41      	ldr	r3, [pc, #260]	; (8000868 <accUpdate+0x10c>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	4840      	ldr	r0, [pc, #256]	; (8000868 <accUpdate+0x10c>)
 8000768:	4798      	blx	r3
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d077      	beq.n	8000860 <accUpdate+0x104>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000770:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <accUpdate+0x10c>)
 8000772:	2201      	movs	r2, #1
 8000774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e00e      	b.n	800079c <accUpdate+0x40>
        acc.accADC[axis] = acc.dev.accADC[axis];
 800077e:	4a3a      	ldr	r2, [pc, #232]	; (8000868 <accUpdate+0x10c>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3304      	adds	r3, #4
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	4937      	ldr	r1, [pc, #220]	; (8000868 <accUpdate+0x10c>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3314      	adds	r3, #20
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	dded      	ble.n	800077e <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <accUpdate+0x110>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d025      	beq.n	80007f6 <accUpdate+0x9a>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	e01f      	b.n	80007f0 <accUpdate+0x94>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <accUpdate+0x110>)
 80007bc:	4413      	add	r3, r2
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	4929      	ldr	r1, [pc, #164]	; (8000868 <accUpdate+0x10c>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3314      	adds	r3, #20
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	eeb0 0a67 	vmov.f32	s0, s15
 80007d2:	4610      	mov	r0, r2
 80007d4:	f000 fb26 	bl	8000e24 <biquadFilterApply>
 80007d8:	eef0 7a40 	vmov.f32	s15, s0
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <accUpdate+0x10c>)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3314      	adds	r3, #20
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	dddc      	ble.n	80007b0 <accUpdate+0x54>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <accUpdate+0x10c>)
 80007f8:	7f9b      	ldrb	r3, [r3, #30]
 80007fa:	4619      	mov	r1, r3
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <accUpdate+0x114>)
 80007fe:	f004 ff6f 	bl	80056e0 <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <accUpdate+0x110>)
 8000804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe9c 	bl	8000544 <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <accUpdate+0x110>)
 800080e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000812:	3301      	adds	r3, #1
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <accUpdate+0x110>)
 8000816:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	e01b      	b.n	8000858 <accUpdate+0xfc>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <accUpdate+0x110>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3320      	adds	r3, #32
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	3304      	adds	r3, #4
 800082c:	ed93 7a00 	vldr	s14, [r3]
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <accUpdate+0x10c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <accUpdate+0x110>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3320      	adds	r3, #32
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	3304      	adds	r3, #4
 800084e:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	dde0      	ble.n	8000820 <accUpdate+0xc4>
 800085e:	e000      	b.n	8000862 <accUpdate+0x106>
        return;
 8000860:	bf00      	nop
    }
}
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000240 	.word	0x20000240
 800086c:	200002a0 	.word	0x200002a0
 8000870:	20000290 	.word	0x20000290

08000874 <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <accGetAccumulationAverage+0xa0>)
 800087e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000882:	2b00      	cmp	r3, #0
 8000884:	dd2e      	ble.n	80008e4 <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e022      	b.n	80008d2 <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <accGetAccumulationAverage+0xa0>)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3320      	adds	r3, #32
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	3304      	adds	r3, #4
 8000898:	edd3 6a00 	vldr	s13, [r3]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <accGetAccumulationAverage+0xa0>)
 800089e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008b6:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <accGetAccumulationAverage+0xa0>)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3320      	adds	r3, #32
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	3304      	adds	r3, #4
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	ddd9      	ble.n	800088c <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <accGetAccumulationAverage+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e010      	b.n	8000906 <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	e009      	b.n	80008fe <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	f04f 0200 	mov.w	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b02      	cmp	r3, #2
 8000902:	ddf2      	ble.n	80008ea <accGetAccumulationAverage+0x76>
        }
        return false;
 8000904:	2300      	movs	r3, #0
    }
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	200002a0 	.word	0x200002a0

08000918 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	imuInit();
 800091c:	f001 fefe 	bl	800271c <imuInit>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <attitudeUpdate>:

void attitudeUpdate(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 8000928:	f002 fc08 	bl	800313c <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 800092c:	f002 fce8 	bl	8003300 <imuCalculateThrottleAngleCorrection>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <barometerConfig>:
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

barometerConfig_t barometerConfig_System;

static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; }
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <barometerConfig+0x10>)
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	200003fc 	.word	0x200003fc

08000948 <pgResetFn_barometerConfig>:

static void pgResetFn_barometerConfig(barometerConfig_t *barometerConfig)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    barometerConfig->baro_hardware = BARO_LPS;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2205      	movs	r2, #5
 8000954:	715a      	strb	r2, [r3, #5]
    barometerConfig->baro_busType = BUS_TYPE_I2C;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
    barometerConfig->baro_i2c_device = I2C_DEV_TO_CFG(BARO_I2C_INSTANCE);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	70da      	strb	r2, [r3, #3]
    barometerConfig->baro_i2c_address = DEFAULT_BARO_I2C_ADDRESS;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2200      	movs	r2, #0
 8000966:	711a      	strb	r2, [r3, #4]
    barometerConfig->baro_spi_device = SPI_DEV_TO_CFG(SPIINVALID);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2200      	movs	r2, #0
 800096c:	705a      	strb	r2, [r3, #1]
    barometerConfig->baro_spi_csn = IO_TAG_NONE;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2200      	movs	r2, #0
 8000972:	709a      	strb	r2, [r3, #2]
    barometerConfig->baro_eoc_tag = IO_TAG(BARO_EOC_PIN);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	719a      	strb	r2, [r3, #6]
    barometerConfig->baro_xclr_tag = IO_TAG(BARO_XCLR_PIN);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	71da      	strb	r2, [r3, #7]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <lpsNothing>:

static void lpsNothing(baroDev_t *baro)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
    (void)(baro);
    return;
 8000994:	bf00      	nop
}
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <lpsNothingBool>:

static bool lpsNothingBool(baroDev_t *baro)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	(void)(baro);
    return true;
 80009a8:	2301      	movs	r3, #1
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <lpsNothingCalculate>:

static void lpsNothingCalculate(int32_t *pressure, int32_t *temperature)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
	(void)(*pressure);
	(void)(*temperature);
    return;
 80009c0:	bf00      	nop
}
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <lpsDetect>:

static bool lpsDetect(baroDev_t *baro)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
    baro->combined_read = true;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    baro->ut_delay = 1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    baro->up_delay = 1000000 / 24;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f24a 22c2 	movw	r2, #41666	; 0xa2c2
 80009ea:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    baro->start_ut = lpsNothing;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <lpsDetect+0x68>)
 80009f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    baro->get_ut = lpsNothingBool;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <lpsDetect+0x6c>)
 80009fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    baro->read_ut = lpsNothingBool;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <lpsDetect+0x6c>)
 8000a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    baro->start_up = lpsNothing;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <lpsDetect+0x68>)
 8000a0a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    baro->get_up = lpsNothingBool;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <lpsDetect+0x6c>)
 8000a12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    baro->read_up = lpsNothingBool;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <lpsDetect+0x6c>)
 8000a1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    baro->calculate = lpsNothingCalculate;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <lpsDetect+0x70>)
 8000a22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return true;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	0800098d 	.word	0x0800098d
 8000a38:	080009a1 	.word	0x080009a1
 8000a3c:	080009b7 	.word	0x080009b7

08000a40 <baroDetect>:

static bool baroDetect(baroDev_t *baroDev, baroSensor_e baroHardwareToUse)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
    extDevice_t *dev = &baroDev->dev;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	60bb      	str	r3, [r7, #8]

    // Detect what pressure sensors are available. baro->update() is set to sensor-specific update function

    baroSensor_e baroHardware = baroHardwareToUse;
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	73fb      	strb	r3, [r7, #15]

    switch (barometerConfig()->baro_busType) {
 8000a54:	f7ff ff6e 	bl	8000934 <barometerConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d12b      	bne.n	8000ab8 <baroDetect+0x78>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, barometerConfig()->baro_i2c_device);
 8000a60:	f7ff ff68 	bl	8000934 <barometerConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	78db      	ldrb	r3, [r3, #3]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	68b8      	ldr	r0, [r7, #8]
 8000a6c:	f000 f8c6 	bl	8000bfc <i2cBusSetInstance>
        dev->busType_u.i2c.address = barometerConfig()->baro_i2c_address;
 8000a70:	f7ff ff60 	bl	8000934 <barometerConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	791a      	ldrb	r2, [r3, #4]
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	711a      	strb	r2, [r3, #4]
        break;
 8000a7c:	bf00      	nop
    default:
        return false;
    }

    switch (baroHardware) {
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b0a      	cmp	r3, #10
 8000a82:	d827      	bhi.n	8000ad4 <baroDetect+0x94>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <baroDetect+0x4c>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000abd 	.word	0x08000abd
 8000a90:	08000acf 	.word	0x08000acf
 8000a94:	08000abd 	.word	0x08000abd
 8000a98:	08000abd 	.word	0x08000abd
 8000a9c:	08000acf 	.word	0x08000acf
 8000aa0:	08000abd 	.word	0x08000abd
 8000aa4:	08000acf 	.word	0x08000acf
 8000aa8:	08000acf 	.word	0x08000acf
 8000aac:	08000acf 	.word	0x08000acf
 8000ab0:	08000acf 	.word	0x08000acf
 8000ab4:	08000acf 	.word	0x08000acf
        return false;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e011      	b.n	8000ae0 <baroDetect+0xa0>
    case BARO_DEFAULT:
    case BARO_BMP085:
    case BARO_MS5611:
    case BARO_LPS:
        if (lpsDetect(baroDev)) {
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff85 	bl	80009cc <lpsDetect>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <baroDetect+0x8e>
            baroHardware = BARO_LPS;
 8000ac8:	2305      	movs	r3, #5
 8000aca:	73fb      	strb	r3, [r7, #15]
            break;
 8000acc:	e002      	b.n	8000ad4 <baroDetect+0x94>
    case BARO_BMP280:
    case BARO_QMP6988:
    case BARO_2SMPB_02B:
    case BARO_VIRTUAL:
    case BARO_NONE:
        baroHardware = BARO_NONE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8000ad2:	bf00      	nop
    }

    if (baroHardware == BARO_NONE) {
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d101      	bne.n	8000ade <baroDetect+0x9e>
        return false;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <baroDetect+0xa0>
    }

    return true;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 8000af2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000af6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000b28 <pressureToAltitude+0x40>
 8000afa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000afe:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000b2c <pressureToAltitude+0x44>
 8000b02:	eeb0 0a47 	vmov.f32	s0, s14
 8000b06:	f011 ff87 	bl	8012a18 <powf>
 8000b0a:	eef0 7a40 	vmov.f32	s15, s0
 8000b0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b16:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000b30 <pressureToAltitude+0x48>
 8000b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	47c5e680 	.word	0x47c5e680
 8000b2c:	3e42dcb1 	.word	0x3e42dcb1
 8000b30:	4a8748d0 	.word	0x4a8748d0

08000b34 <baroInit>:

void baroInit(sensorBaroInitFuncPtr initFn, sensorBaroReadFuncPtr readFn)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	pgResetFn_barometerConfig(&barometerConfig_System);
 8000b3e:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <baroInit+0x6c>)
 8000b40:	f7ff ff02 	bl	8000948 <pgResetFn_barometerConfig>
    baroDetect(&baro.dev, barometerConfig()->baro_hardware);
 8000b44:	f7ff fef6 	bl	8000934 <barometerConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	795b      	ldrb	r3, [r3, #5]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <baroInit+0x70>)
 8000b50:	f7ff ff76 	bl	8000a40 <baroDetect>
    baro.dev.read_ut = readFn;
 8000b54:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <baroInit+0x70>)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    initFn(&baro.dev);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <baroInit+0x70>)
 8000b60:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <baroInit+0x70>)
 8000b64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	dd10      	ble.n	8000b8e <baroInit+0x5a>
    	baro.ground_altitude = pressureToAltitude(baro.dev.baroADC);
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <baroInit+0x70>)
 8000b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000b72:	ee07 3a90 	vmov	s15, r3
 8000b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7e:	f7ff ffb3 	bl	8000ae8 <pressureToAltitude>
 8000b82:	eef0 7a40 	vmov.f32	s15, s0
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <baroInit+0x70>)
 8000b88:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    } else {
    	baro.ground_altitude = 0;
    }
}
 8000b8c:	e004      	b.n	8000b98 <baroInit+0x64>
    	baro.ground_altitude = 0;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <baroInit+0x70>)
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200003fc 	.word	0x200003fc
 8000ba4:	20000344 	.word	0x20000344

08000ba8 <baroUpdate>:

void baroUpdate(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
    baro.dev.read_ut(&baro.dev);
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <baroUpdate+0x50>)
 8000bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <baroUpdate+0x50>)
 8000bb6:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <baroUpdate+0x50>)
 8000bba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	dd16      	ble.n	8000bf0 <baroUpdate+0x48>
        const float altitude = pressureToAltitude(baro.dev.baroADC);
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <baroUpdate+0x50>)
 8000bc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd4:	f7ff ff88 	bl	8000ae8 <pressureToAltitude>
 8000bd8:	ed87 0a01 	vstr	s0, [r7, #4]
        baro.altitude = altitude - baro.ground_altitude;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <baroUpdate+0x50>)
 8000bde:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8000be2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bea:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <baroUpdate+0x50>)
 8000bec:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000344 	.word	0x20000344

08000bfc <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <i2cBusSetInstance+0x16>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d901      	bls.n	8000c16 <i2cBusSetInstance+0x1a>
        return false;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e016      	b.n	8000c44 <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <i2cBusSetInstance+0x54>)
 8000c24:	441a      	add	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	3b01      	subs	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b252      	sxtb	r2, r2
 8000c40:	711a      	strb	r2, [r3, #4]

    return true;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20000404 	.word	0x20000404

08000c54 <controlMotorInit>:

#include "control_motor.h"

#include "pid.h"

void controlMotorInit(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	pidInit();
 8000c58:	f003 fd92 	bl	8004780 <pidInit>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 8000c64:	f004 fbce 	bl	8005404 <pidIncUpdateCounter>
    processRcCommand();
 8000c68:	f004 fbec 	bl	8005444 <processRcCommand>
    pidController();
 8000c6c:	f003 fef2 	bl	8004a54 <pidController>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c7e:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 8000c82:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c86:	edd7 7a00 	vldr	s15, [r7]
 8000c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c92:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000c96:	edd7 7a00 	vldr	s15, [r7]
 8000c9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ca2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ca6:	eef0 7a66 	vmov.f32	s15, s13
}
 8000caa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	ed87 0a00 	vstr	s0, [r7]
    return input;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	ee07 3a90 	vmov	s15, r3
}
 8000cca:	eeb0 0a67 	vmov.f32	s0, s15
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ce2:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8000ce6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000d24 <pt1FilterGain+0x4c>
 8000cee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cfa:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8000cfe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d02:	edd7 7a00 	vldr	s15, [r7]
 8000d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0a:	ed97 7a00 	vldr	s14, [r7]
 8000d0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d12:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d16:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40c90fdb 	.word	0x40c90fdb

08000d28 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
    filter->k = k;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	605a      	str	r2, [r3, #4]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	ed93 7a00 	vldr	s14, [r3]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	edd3 7a00 	vldr	s15, [r3]
 8000d6c:	ed97 6a00 	vldr	s12, [r7]
 8000d70:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	ee07 3a90 	vmov	s15, r3
}
 8000d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6178      	str	r0, [r7, #20]
 8000da0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000da4:	60f9      	str	r1, [r7, #12]
 8000da6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000daa:	4613      	mov	r3, r2
 8000dac:	ed87 1a00 	vstr	s2, [r7]
 8000db0:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	ed97 1a00 	vldr	s2, [r7]
 8000db8:	461a      	mov	r2, r3
 8000dba:	edd7 0a02 	vldr	s1, [r7, #8]
 8000dbe:	68f9      	ldr	r1, [r7, #12]
 8000dc0:	ed97 0a04 	vldr	s0, [r7, #16]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f000 f877 	bl	8000eb8 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	61da      	str	r2, [r3, #28]
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e00:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 8000e02:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000e06:	2200      	movs	r2, #0
 8000e08:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000e20 <biquadFilterInitLPF+0x2c>
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e12:	68f8      	ldr	r0, [r7, #12]
 8000e14:	f7ff ffc0 	bl	8000d98 <biquadFilterInit>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	3f3504f3 	.word	0x3f3504f3

08000e24 <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	edd7 7a00 	vldr	s15, [r7]
 8000e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e48:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e52:	edd7 7a00 	vldr	s15, [r7]
 8000e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000e60:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e82:	edd7 7a00 	vldr	s15, [r7]
 8000e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	ee07 3a90 	vmov	s15, r3
}
 8000ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6178      	str	r0, [r7, #20]
 8000ec0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ec4:	60f9      	str	r1, [r7, #12]
 8000ec6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	ed87 1a00 	vstr	s2, [r7]
 8000ed0:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 8000ed2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ed6:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001090 <biquadFilterUpdate+0x1d8>
 8000eda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eec:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001094 <biquadFilterUpdate+0x1dc>
 8000ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8000ef8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000efc:	f000 fa24 	bl	8001348 <sin_approx>
 8000f00:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8000f04:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000f08:	f000 fac8 	bl	800149c <cos_approx>
 8000f0c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8000f10:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f14:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f20:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d04f      	beq.n	8000fca <biquadFilterUpdate+0x112>
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	dc6e      	bgt.n	800100c <biquadFilterUpdate+0x154>
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <biquadFilterUpdate+0x80>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d02a      	beq.n	8000f8c <biquadFilterUpdate+0xd4>
 8000f36:	e069      	b.n	800100c <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 8000f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 8000f66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f6a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8000f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8000f8a:	e03f      	b.n	800100c <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f92:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 8000f94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f98:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fac:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 8000fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fba:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8000fc8:	e020      	b.n	800100c <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	6a3a      	ldr	r2, [r7, #32]
 8000fce:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8000fd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fdc:	eef1 7a67 	vneg.f32	s15, s15
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 8000fe6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fea:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8000ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ffc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800100a:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 800100c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001018:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	edd3 6a00 	vldr	s13, [r3]
 8001022:	ed97 7a07 	vldr	s14, [r7, #28]
 8001026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	edd3 6a01 	vldr	s13, [r3, #4]
 8001036:	ed97 7a07 	vldr	s14, [r7, #28]
 800103a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	edd3 6a02 	vldr	s13, [r3, #8]
 800104a:	ed97 7a07 	vldr	s14, [r7, #28]
 800104e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	edd3 6a03 	vldr	s13, [r3, #12]
 800105e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001072:	ed97 7a07 	vldr	s14, [r7, #28]
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001086:	bf00      	nop
 8001088:	3730      	adds	r7, #48	; 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40c90fdb 	.word	0x40c90fdb
 8001094:	358637bd 	.word	0x358637bd

08001098 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a2:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 80010a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010aa:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 80010ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010b8:	eef0 0a47 	vmov.f32	s1, s14
 80010bc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80010c0:	f011 fcaa 	bl	8012a18 <powf>
 80010c4:	eef0 7a40 	vmov.f32	s15, s0
 80010c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	f011 fe00 	bl	8012cd8 <sqrtf>
 80010d8:	eeb0 7a40 	vmov.f32	s14, s0
 80010dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 80010e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001130 <pt2FilterGain+0x98>
 80010f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001108:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 800110c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ed97 7a00 	vldr	s14, [r7]
 800111c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001120:	eef0 7a66 	vmov.f32	s15, s13
}
 8001124:	eeb0 0a67 	vmov.f32	s0, s15
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40490fdb 	.word	0x40490fdb

08001134 <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
    filter->k = k;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	609a      	str	r2, [r3, #8]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a01 	vldr	s14, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edd3 6a02 	vldr	s13, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001180:	ed97 6a00 	vldr	s12, [r7]
 8001184:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	ed93 7a00 	vldr	s14, [r3]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 6a02 	vldr	s13, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	ed93 6a01 	vldr	s12, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	ee07 3a90 	vmov	s15, r3
}
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e2:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <pt3FilterGain+0x94>)
 80011e8:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 80011ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011f6:	eef0 0a47 	vmov.f32	s1, s14
 80011fa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80011fe:	f011 fc0b 	bl	8012a18 <powf>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800120a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	f011 fd61 	bl	8012cd8 <sqrtf>
 8001216:	eeb0 7a40 	vmov.f32	s14, s0
 800121a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8001226:	edd7 7a04 	vldr	s15, [r7, #16]
 800122a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800122e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001270 <pt3FilterGain+0x98>
 8001232:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001236:	edd7 7a01 	vldr	s15, [r7, #4]
 800123a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001246:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 800124a:	ed97 7a03 	vldr	s14, [r7, #12]
 800124e:	edd7 7a00 	vldr	s15, [r7]
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	ed97 7a00 	vldr	s14, [r7]
 800125a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800125e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001262:	eeb0 0a67 	vmov.f32	s0, s15
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40400000 	.word	0x40400000
 8001270:	40490fdb 	.word	0x40490fdb

08001274 <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	60da      	str	r2, [r3, #12]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 6a03 	vldr	s13, [r3, #12]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c8:	ed97 6a00 	vldr	s12, [r7]
 80012cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ed93 6a01 	vldr	s12, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80012fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	ed93 7a00 	vldr	s14, [r3]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 6a03 	vldr	s13, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	ed93 6a02 	vldr	s12, [r3, #8]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 8001352:	edd7 7a01 	vldr	s15, [r7, #4]
 8001356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135a:	ee17 3a90 	vmov	r3, s15
 800135e:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f113 0f20 	cmn.w	r3, #32
 8001366:	db02      	blt.n	800136e <sin_approx+0x26>
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b20      	cmp	r3, #32
 800136c:	dd0a      	ble.n	8001384 <sin_approx+0x3c>
 800136e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001478 <sin_approx+0x130>
 8001372:	e079      	b.n	8001468 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800147c <sin_approx+0x134>
 800137c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001380:	edc7 7a01 	vstr	s15, [r7, #4]
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001480 <sin_approx+0x138>
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	dcee      	bgt.n	8001374 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8001396:	e007      	b.n	80013a8 <sin_approx+0x60>
 8001398:	edd7 7a01 	vldr	s15, [r7, #4]
 800139c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800147c <sin_approx+0x134>
 80013a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ac:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001484 <sin_approx+0x13c>
 80013b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d4ee      	bmi.n	8001398 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 80013ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80013be:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001488 <sin_approx+0x140>
 80013c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	dd0c      	ble.n	80013e6 <sin_approx+0x9e>
 80013cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001488 <sin_approx+0x140>
 80013d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013d8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001488 <sin_approx+0x140>
 80013dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80013e4:	e014      	b.n	8001410 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800148c <sin_approx+0x144>
 80013ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d50b      	bpl.n	8001410 <sin_approx+0xc8>
 80013f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001488 <sin_approx+0x140>
 8001400:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001404:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800148c <sin_approx+0x144>
 8001408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140c:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 8001410:	edd7 7a01 	vldr	s15, [r7, #4]
 8001414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001418:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 800141c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001420:	edd7 7a02 	vldr	s15, [r7, #8]
 8001424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001428:	edd7 7a02 	vldr	s15, [r7, #8]
 800142c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001478 <sin_approx+0x130>
 8001430:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001434:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001490 <sin_approx+0x148>
 8001438:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800143c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001494 <sin_approx+0x14c>
 8001448:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800144c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001454:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001498 <sin_approx+0x150>
 8001458:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800145c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001460:	edd7 7a01 	vldr	s15, [r7, #4]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	00000000 	.word	0x00000000
 800147c:	40c90fdb 	.word	0x40c90fdb
 8001480:	40490fdb 	.word	0x40490fdb
 8001484:	c0490fdb 	.word	0xc0490fdb
 8001488:	3fc90fdb 	.word	0x3fc90fdb
 800148c:	bfc90fdb 	.word	0xbfc90fdb
 8001490:	3941e792 	.word	0x3941e792
 8001494:	3c083097 	.word	0x3c083097
 8001498:	3e2aa815 	.word	0x3e2aa815

0800149c <cos_approx>:

float cos_approx(float x)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80014c8 <cos_approx+0x2c>
 80014ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b2:	eeb0 0a67 	vmov.f32	s0, s15
 80014b6:	f7ff ff47 	bl	8001348 <sin_approx>
 80014ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	3fc90fdb 	.word	0x3fc90fdb

080014cc <acos_approx>:

float acos_approx(float x)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 80014d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014da:	eef0 7ae7 	vabs.f32	s15, s15
 80014de:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 80014e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	f011 fbf1 	bl	8012cd8 <sqrtf>
 80014f6:	eef0 6a40 	vmov.f32	s13, s0
 80014fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001560 <acos_approx+0x94>
 8001502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001506:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001564 <acos_approx+0x98>
 800150a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800150e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001568 <acos_approx+0x9c>
 800151a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800151e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001526:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800156c <acos_approx+0xa0>
 800152a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 8001536:	edd7 7a01 	vldr	s15, [r7, #4]
 800153a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d506      	bpl.n	8001552 <acos_approx+0x86>
        return M_PIf - result;
 8001544:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001570 <acos_approx+0xa4>
 8001548:	edd7 7a02 	vldr	s15, [r7, #8]
 800154c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001550:	e001      	b.n	8001556 <acos_approx+0x8a>
    else
        return result;
 8001552:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	bc996e30 	.word	0xbc996e30
 8001564:	3d981627 	.word	0x3d981627
 8001568:	3e593484 	.word	0x3e593484
 800156c:	3fc90da4 	.word	0x3fc90da4
 8001570:	40490fdb 	.word	0x40490fdb

08001574 <atan2_approx>:

float atan2_approx(float y, float x)
{
 8001574:	b480      	push	{r7}
 8001576:	b08b      	sub	sp, #44	; 0x2c
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a01 	vstr	s0, [r7, #4]
 800157e:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001582:	edd7 7a00 	vldr	s15, [r7]
 8001586:	eef0 7ae7 	vabs.f32	s15, s15
 800158a:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 800158e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001592:	eef0 7ae7 	vabs.f32	s15, s15
 8001596:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80015a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd01      	ble.n	80015b8 <atan2_approx+0x44>
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	e000      	b.n	80015ba <atan2_approx+0x46>
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 80015bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d018      	beq.n	80015fc <atan2_approx+0x88>
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80015d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	d502      	bpl.n	80015ea <atan2_approx+0x76>
 80015e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80015e8:	e001      	b.n	80015ee <atan2_approx+0x7a>
 80015ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015f6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80015fa:	e002      	b.n	8001602 <atan2_approx+0x8e>
    else res = 0.0f;
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8001602:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001606:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80016e4 <atan2_approx+0x170>
 800160a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80016e8 <atan2_approx+0x174>
 8001612:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001616:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80016ec <atan2_approx+0x178>
 8001622:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001626:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800162a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80016f0 <atan2_approx+0x17c>
 8001632:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001636:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80016f4 <atan2_approx+0x180>
 8001642:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001646:	eef1 6a67 	vneg.f32	s13, s15
 800164a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800164e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80016f8 <atan2_approx+0x184>
 8001652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001656:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80016fc <atan2_approx+0x188>
 800165a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800165e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800166a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800166e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001672:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001676:	ed97 7a07 	vldr	s14, [r7, #28]
 800167a:	edd7 7a08 	vldr	s15, [r7, #32]
 800167e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	dd07      	ble.n	8001698 <atan2_approx+0x124>
 8001688:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001700 <atan2_approx+0x18c>
 800168c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001694:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001698:	edd7 7a00 	vldr	s15, [r7]
 800169c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	d507      	bpl.n	80016b6 <atan2_approx+0x142>
 80016a6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001704 <atan2_approx+0x190>
 80016aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 80016b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d505      	bpl.n	80016d0 <atan2_approx+0x15c>
 80016c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016c8:	eef1 7a67 	vneg.f32	s15, s15
 80016cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	372c      	adds	r7, #44	; 0x2c
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	3d4e0939 	.word	0x3d4e0939
 80016e8:	3e9eb5e3 	.word	0x3e9eb5e3
 80016ec:	3e16fa88 	.word	0x3e16fa88
 80016f0:	3f7ffe45 	.word	0x3f7ffe45
 80016f4:	34a8dfa7 	.word	0x34a8dfa7
 80016f8:	3f24fb99 	.word	0x3f24fb99
 80016fc:	3e16a269 	.word	0x3e16a269
 8001700:	3fc90fdb 	.word	0x3fc90fdb
 8001704:	40490fdb 	.word	0x40490fdb

08001708 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e054      	b.n	80017c2 <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <rotateVector+0xd0>)
 800171e:	fb83 3102 	smull	r3, r1, r3, r2
 8001722:	17d3      	asrs	r3, r2, #31
 8001724:	1ac9      	subs	r1, r1, r3
 8001726:	460b      	mov	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	440b      	add	r3, r1
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1c9a      	adds	r2, r3, #2
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <rotateVector+0xd0>)
 8001736:	fb83 3102 	smull	r3, r1, r3, r2
 800173a:	17d3      	asrs	r3, r2, #31
 800173c:	1ac9      	subs	r1, r1, r3
 800173e:	460b      	mov	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	440b      	add	r3, r1
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	edd3 6a00 	vldr	s13, [r3]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	4413      	add	r3, r2
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001774:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	ed93 7a00 	vldr	s14, [r3]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4413      	add	r3, r2
 800178c:	edd3 6a00 	vldr	s13, [r3]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ac:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	dda7      	ble.n	8001718 <rotateVector+0x10>
    }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	55555556 	.word	0x55555556

080017dc <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	f7ff fe54 	bl	800149c <cos_approx>
 80017f4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	f7ff fda1 	bl	8001348 <sin_approx>
 8001806:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f7ff fe42 	bl	800149c <cos_approx>
 8001818:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	f7ff fd8f 	bl	8001348 <sin_approx>
 800182a:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edd3 7a02 	vldr	s15, [r3, #8]
 8001834:	eeb0 0a67 	vmov.f32	s0, s15
 8001838:	f7ff fe30 	bl	800149c <cos_approx>
 800183c:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	edd3 7a02 	vldr	s15, [r3, #8]
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	f7ff fd7d 	bl	8001348 <sin_approx>
 800184e:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 8001852:	ed97 7a07 	vldr	s14, [r7, #28]
 8001856:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 8001862:	ed97 7a06 	vldr	s14, [r7, #24]
 8001866:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 8001872:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001876:	edd7 7a07 	vldr	s15, [r7, #28]
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 8001882:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001886:	edd7 7a06 	vldr	s15, [r7, #24]
 800188a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188e:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 8001892:	ed97 7a07 	vldr	s14, [r7, #28]
 8001896:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800189a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 80018a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018a8:	eeb1 7a67 	vneg.f32	s14, s15
 80018ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6a3a      	ldr	r2, [r7, #32]
 80018be:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 80018c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80018c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80018d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 80018da:	ed97 7a02 	vldr	s14, [r7, #8]
 80018de:	edd7 7a08 	vldr	s15, [r7, #32]
 80018e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 80018f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018f8:	eeb1 7a67 	vneg.f32	s14, s15
 80018fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 800190a:	ed97 7a05 	vldr	s14, [r7, #20]
 800190e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	ed97 7a02 	vldr	s14, [r7, #8]
 800191a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 8001924:	ed97 7a04 	vldr	s14, [r7, #16]
 8001928:	edd7 7a08 	vldr	s15, [r7, #32]
 800192c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 800193e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001942:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001950:	bf00      	nop
 8001952:	3730      	adds	r7, #48	; 0x30
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001984 <degreesToRadians+0x2c>
 8001972:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	3c8efa35 	.word	0x3c8efa35

08001988 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 8001992:	4a21      	ldr	r2, [pc, #132]	; (8001a18 <gyroSetTargetLooptime+0x90>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d028      	beq.n	80019f2 <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019ac:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001a10 <gyroSetTargetLooptime+0x88>
 80019b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019b8:	ee17 2a90 	vmov	r2, s15
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 80019be:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <gyroSetTargetLooptime+0x90>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019cc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001a10 <gyroSetTargetLooptime+0x88>
 80019d0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80019e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80019e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80019e8:	ee17 2a90 	vmov	r2, s15
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 80019ee:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 80019f0:	e005      	b.n	80019fe <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <gyroSetTargetLooptime+0x94>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	f3af 8000 	nop.w
 8001a10:	00000000 	.word	0x00000000
 8001a14:	412e8480 	.word	0x412e8480
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	200004a4 	.word	0x200004a4

08001a20 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 8001a30:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001a34:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 8001a36:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001a3a:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	89ba      	ldrh	r2, [r7, #12]
 8001a48:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e009      	b.n	8001a7c <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	332a      	adds	r3, #42	; 0x2a
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	ddf2      	ble.n	8001a68 <gyroInitSlewLimiter+0xe>
    }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffde 	bl	8001a5a <gyroInitSlewLimiter>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fdba 	bl	8005644 <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f003 fd6d 	bl	80055bc <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff93 	bl	8001a20 <gyroSetSampleRate>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffba 	bl	8001a90 <gyroInitSensorFilters>
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	80fb      	strh	r3, [r7, #6]
 8001b30:	4613      	mov	r3, r2
 8001b32:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <calculateNyquistAdjustedNotchHz+0x44>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <calculateNyquistAdjustedNotchHz+0x48>)
 8001b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d208      	bcs.n	8001b5a <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d902      	bls.n	8001b56 <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	80fb      	strh	r3, [r7, #6]
 8001b54:	e001      	b.n	8001b5a <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200004a4 	.word	0x200004a4
 8001b6c:	0007a120 	.word	0x0007a120

08001b70 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08e      	sub	sp, #56	; 0x38
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <gyroInitLowpassFilterLpf+0x22>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d005      	beq.n	8001b9c <gyroInitLowpassFilterLpf+0x2c>
 8001b90:	e009      	b.n	8001ba6 <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <gyroInitLowpassFilterLpf+0x1b8>)
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <gyroInitLowpassFilterLpf+0x1bc>)
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8001b9a:	e006      	b.n	8001baa <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8001b9c:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <gyroInitLowpassFilterLpf+0x1c0>)
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8001ba0:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <gyroInitLowpassFilterLpf+0x1c4>)
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8001ba4:	e001      	b.n	8001baa <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e0b9      	b.n	8001d1e <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8001bb0:	4a61      	ldr	r2, [pc, #388]	; (8001d38 <gyroInitLowpassFilterLpf+0x1c8>)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	ee07 3a90 	vmov	s15, r3
 8001bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001d3c <gyroInitLowpassFilterLpf+0x1cc>
 8001bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bcc:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bda:	edd7 0a05 	vldr	s1, [r7, #20]
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	f7ff f879 	bl	8000cd8 <pt1FilterGain>
 8001be6:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8001bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bec:	4a54      	ldr	r2, [pc, #336]	; (8001d40 <gyroInitLowpassFilterLpf+0x1d0>)
 8001bee:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 808e 	beq.w	8001d14 <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	f200 808d 	bhi.w	8001d1a <gyroInitLowpassFilterLpf+0x1aa>
 8001c00:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <gyroInitLowpassFilterLpf+0x98>)
 8001c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c06:	bf00      	nop
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c53 	.word	0x08001c53
 8001c10:	08001ca1 	.word	0x08001ca1
 8001c14:	08001cdb 	.word	0x08001cdb
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 8001c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1a:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <gyroInitLowpassFilterLpf+0x1d4>)
 8001c1c:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c22:	e00f      	b.n	8001c44 <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 8001c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c32:	4413      	add	r3, r2
 8001c34:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff f875 	bl	8000d28 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	3301      	adds	r3, #1
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	ddec      	ble.n	8001c24 <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001c50:	e063      	b.n	8001d1a <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d35e      	bcc.n	8001d18 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	4a3a      	ldr	r2, [pc, #232]	; (8001d48 <gyroInitLowpassFilterLpf+0x1d8>)
 8001c5e:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
 8001c64:	e015      	b.n	8001c92 <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	461a      	mov	r2, r3
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	4413      	add	r3, r2
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	ee07 2a90 	vmov	s15, r2
 8001c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	eeb0 0a67 	vmov.f32	s0, s15
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f8b4 	bl	8000df4 <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	3301      	adds	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	dde6      	ble.n	8001c66 <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8001c9e:	e03b      	b.n	8001d18 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <gyroInitLowpassFilterLpf+0x1dc>)
 8001ca4:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	e00f      	b.n	8001ccc <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	4413      	add	r3, r2
 8001cbc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fa37 	bl	8001134 <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	ddec      	ble.n	8001cac <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001cd8:	e01f      	b.n	8001d1a <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	4a1c      	ldr	r2, [pc, #112]	; (8001d50 <gyroInitLowpassFilterLpf+0x1e0>)
 8001cde:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	e00f      	b.n	8001d06 <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	4413      	add	r3, r2
 8001cf6:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff faba 	bl	8001274 <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	ddec      	ble.n	8001ce6 <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001d12:	e002      	b.n	8001d1a <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 8001d14:	bf00      	nop
 8001d16:	e000      	b.n	8001d1a <gyroInitLowpassFilterLpf+0x1aa>
            break;
 8001d18:	bf00      	nop
    return ret;
 8001d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3738      	adds	r7, #56	; 0x38
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000062c 	.word	0x2000062c
 8001d2c:	20000630 	.word	0x20000630
 8001d30:	200006a8 	.word	0x200006a8
 8001d34:	200006ac 	.word	0x200006ac
 8001d38:	0007a120 	.word	0x0007a120
 8001d3c:	358637bd 	.word	0x358637bd
 8001d40:	08000cb9 	.word	0x08000cb9
 8001d44:	08000d4f 	.word	0x08000d4f
 8001d48:	08000e25 	.word	0x08000e25
 8001d4c:	08001163 	.word	0x08001163
 8001d50:	080012ab 	.word	0x080012ab

08001d54 <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	80fb      	strh	r3, [r7, #6]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <gyroInitFilterNotch1+0xb0>)
 8001d66:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <gyroInitFilterNotch1+0xb4>)
 8001d68:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001d6c:	88ba      	ldrh	r2, [r7, #4]
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fed6 	bl	8001b24 <calculateNyquistAdjustedNotchHz>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03c      	beq.n	8001dfc <gyroInitFilterNotch1+0xa8>
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d039      	beq.n	8001dfc <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <gyroInitFilterNotch1+0xb0>)
 8001d8a:	4a20      	ldr	r2, [pc, #128]	; (8001e0c <gyroInitFilterNotch1+0xb8>)
 8001d8c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	88bb      	ldrh	r3, [r7, #4]
 8001d9c:	ee07 3a10 	vmov	s14, r3
 8001da0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001da4:	eef0 0a47 	vmov.f32	s1, s14
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	f7fe ff62 	bl	8000c74 <filterGetNotchQ>
 8001db0:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e01d      	b.n	8001df6 <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dc8:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <gyroInitFilterNotch1+0xb0>)
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	ee07 2a90 	vmov	s15, r2
 8001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <gyroInitFilterNotch1+0xb0>)
 8001dda:	6851      	ldr	r1, [r2, #4]
 8001ddc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001de0:	2201      	movs	r2, #1
 8001de2:	edd7 0a02 	vldr	s1, [r7, #8]
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ffd4 	bl	8000d98 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3301      	adds	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	ddde      	ble.n	8001dba <gyroInitFilterNotch1+0x66>
        }
    }
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200004a4 	.word	0x200004a4
 8001e08:	08000cb9 	.word	0x08000cb9
 8001e0c:	08000e25 	.word	0x08000e25

08001e10 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	80fb      	strh	r3, [r7, #6]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <gyroInitFilterNotch2+0xb0>)
 8001e22:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <gyroInitFilterNotch2+0xb4>)
 8001e24:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001e28:	88ba      	ldrh	r2, [r7, #4]
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fe78 	bl	8001b24 <calculateNyquistAdjustedNotchHz>
 8001e34:	4603      	mov	r3, r0
 8001e36:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03b      	beq.n	8001eb6 <gyroInitFilterNotch2+0xa6>
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d038      	beq.n	8001eb6 <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <gyroInitFilterNotch2+0xb0>)
 8001e46:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <gyroInitFilterNotch2+0xb8>)
 8001e48:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e56:	88bb      	ldrh	r3, [r7, #4]
 8001e58:	ee07 3a10 	vmov	s14, r3
 8001e5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e60:	eef0 0a47 	vmov.f32	s1, s14
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	f7fe ff04 	bl	8000c74 <filterGetNotchQ>
 8001e6c:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e01c      	b.n	8001eb0 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <gyroInitFilterNotch2+0xb0>)
 8001e86:	4413      	add	r3, r2
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	ee07 2a90 	vmov	s15, r2
 8001e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <gyroInitFilterNotch2+0xb0>)
 8001e94:	6851      	ldr	r1, [r2, #4]
 8001e96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff77 	bl	8000d98 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3301      	adds	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	dddf      	ble.n	8001e76 <gyroInitFilterNotch2+0x66>
        }
    }
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200004a4 	.word	0x200004a4
 8001ec4:	08000cb9 	.word	0x08000cb9
 8001ec8:	08000e25 	.word	0x08000e25

08001ecc <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <gyroInitFilters+0x44>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fe48 	bl	8001b70 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <gyroInitFilters+0x44>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff fe40 	bl	8001b70 <gyroInitLowpassFilterLpf>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <gyroInitFilters+0x44>)
 8001ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8001efa:	2100      	movs	r1, #0
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff ff29 	bl	8001d54 <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 8001f02:	2100      	movs	r1, #0
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff ff83 	bl	8001e10 <gyroInitFilterNotch2>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200004a4 	.word	0x200004a4

08001f14 <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <gyroInit+0xb0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <gyroInit+0xb0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 8001f2e:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <gyroInit+0xb0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <gyroInit+0xb0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <gyroInit+0xb0>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <gyroInit+0xb0>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <gyroInit+0xb0>)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <gyroInit+0xb0>)
 8001f54:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <gyroInit+0xb4>)
 8001f56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <gyroInit+0xb0>)
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <gyroInit+0xb8>)
 8001f5e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 8001f62:	481b      	ldr	r0, [pc, #108]	; (8001fd0 <gyroInit+0xbc>)
 8001f64:	f7ff fd9f 	bl	8001aa6 <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <gyroInit+0xb0>)
 8001f6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <gyroInit+0xb0>)
 8001f70:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <gyroInit+0xb0>)
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <gyroInit+0xbc>)
 8001f76:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <gyroInit+0xb0>)
 8001f7c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00f      	beq.n	8001fa4 <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <gyroInit+0xb0>)
 8001f86:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001f8a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <gyroInit+0xb0>)
 8001f90:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <gyroInit+0xb0>)
 8001f94:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001f98:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <gyroInit+0xb0>)
 8001f9e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 8001fa2:	e006      	b.n	8001fb2 <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <gyroInit+0xb0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <gyroInit+0xb0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff fce8 	bl	8001988 <gyroSetTargetLooptime>
	gyroInitFilters();
 8001fb8:	f7ff ff88 	bl	8001ecc <gyroInitFilters>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200004a4 	.word	0x200004a4
 8001fc8:	20000840 	.word	0x20000840
 8001fcc:	20000850 	.word	0x20000850
 8001fd0:	200004e0 	.word	0x200004e0

08001fd4 <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4798      	blx	r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d02f      	beq.n	800204c <gyroUpdateSensor+0x78>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADC[X] - gyroSensor->gyroDev.gyroZero[X];
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADC[Y] - gyroSensor->gyroDev.gyroZero[Y];
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8002016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADC[Z] - gyroSensor->gyroDev.gyroZero[Z];
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800202c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f003 fb4b 	bl	80056e0 <alignSensorViaRotation>
 800204a:	e000      	b.n	800204e <gyroUpdateSensor+0x7a>
        return;
 800204c:	bf00      	nop
}
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <gyroFilter>:


static void gyroFilter(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	e074      	b.n	800214a <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <gyroFilter+0x10c>)
 8002068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 8002070:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <gyroFilter+0x10c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	330a      	adds	r3, #10
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	3304      	adds	r3, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	e020      	b.n	80020c4 <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <gyroFilter+0x10c>)
 8002084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 800208c:	4a34      	ldr	r2, [pc, #208]	; (8002160 <gyroFilter+0x10c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	330a      	adds	r3, #10
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3304      	adds	r3, #4
 8002098:	edd3 6a00 	vldr	s13, [r3]
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <gyroFilter+0x10c>)
 800209e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ae:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <gyroFilter+0x10c>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	330a      	adds	r3, #10
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3304      	adds	r3, #4
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <gyroFilter+0x10c>)
 80020c6:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <gyroFilter+0x10c>)
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	ed97 0a00 	vldr	s0, [r7]
 80020e2:	4618      	mov	r0, r3
 80020e4:	4788      	blx	r1
 80020e6:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <gyroFilter+0x10c>)
 80020ec:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <gyroFilter+0x10c>)
 8002100:	4413      	add	r3, r2
 8002102:	ed97 0a00 	vldr	s0, [r7]
 8002106:	4618      	mov	r0, r3
 8002108:	4788      	blx	r1
 800210a:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <gyroFilter+0x10c>)
 8002110:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002122:	4a0f      	ldr	r2, [pc, #60]	; (8002160 <gyroFilter+0x10c>)
 8002124:	4413      	add	r3, r2
 8002126:	3304      	adds	r3, #4
 8002128:	ed97 0a00 	vldr	s0, [r7]
 800212c:	4618      	mov	r0, r3
 800212e:	4788      	blx	r1
 8002130:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <gyroFilter+0x10c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3306      	adds	r3, #6
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	dd87      	ble.n	8002060 <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <gyroFilter+0x10c>)
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200004a4 	.word	0x200004a4

08002164 <gyroAccumulateMeasurements>:

static void gyroAccumulateMeasurements(void) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	e038      	b.n	80021e2 <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 8002170:	4a23      	ldr	r2, [pc, #140]	; (8002200 <gyroAccumulateMeasurements+0x9c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <gyroAccumulateMeasurements+0xa0>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <gyroAccumulateMeasurements+0xa4>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3306      	adds	r3, #6
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80021a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <gyroAccumulateMeasurements+0xa4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	4a11      	ldr	r2, [pc, #68]	; (8002200 <gyroAccumulateMeasurements+0x9c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 80021c4:	4a10      	ldr	r2, [pc, #64]	; (8002208 <gyroAccumulateMeasurements+0xa4>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3306      	adds	r3, #6
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3304      	adds	r3, #4
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	490c      	ldr	r1, [pc, #48]	; (8002204 <gyroAccumulateMeasurements+0xa0>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	ddc3      	ble.n	8002170 <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <gyroAccumulateMeasurements+0xa8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <gyroAccumulateMeasurements+0xa8>)
 80021f0:	6013      	str	r3, [r2, #0]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000824 	.word	0x20000824
 8002204:	20000830 	.word	0x20000830
 8002208:	200004a4 	.word	0x200004a4
 800220c:	2000083c 	.word	0x2000083c

08002210 <gyroUpdate>:

void gyroUpdate(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 8002214:	4842      	ldr	r0, [pc, #264]	; (8002320 <gyroUpdate+0x110>)
 8002216:	f7ff fedd 	bl	8001fd4 <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <gyroUpdate+0x114>)
 800221c:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <gyroUpdate+0x114>)
 8002222:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	4b3e      	ldr	r3, [pc, #248]	; (8002324 <gyroUpdate+0x114>)
 800222c:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <gyroUpdate+0x114>)
 8002232:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8002236:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <gyroUpdate+0x114>)
 8002238:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	4b38      	ldr	r3, [pc, #224]	; (8002324 <gyroUpdate+0x114>)
 8002242:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 8002246:	4b37      	ldr	r3, [pc, #220]	; (8002324 <gyroUpdate+0x114>)
 8002248:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <gyroUpdate+0x114>)
 800224e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <gyroUpdate+0x114>)
 8002258:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <gyroUpdate+0x114>)
 800225e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d02d      	beq.n	80022c2 <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <gyroUpdate+0x114>)
 8002268:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <gyroUpdate+0x114>)
 800226e:	edd2 7a04 	vldr	s15, [r2, #16]
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	482c      	ldr	r0, [pc, #176]	; (8002328 <gyroUpdate+0x118>)
 8002278:	4798      	blx	r3
 800227a:	eef0 7a40 	vmov.f32	s15, s0
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <gyroUpdate+0x114>)
 8002280:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <gyroUpdate+0x114>)
 8002286:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <gyroUpdate+0x114>)
 800228c:	edd2 7a05 	vldr	s15, [r2, #20]
 8002290:	eeb0 0a67 	vmov.f32	s0, s15
 8002294:	4825      	ldr	r0, [pc, #148]	; (800232c <gyroUpdate+0x11c>)
 8002296:	4798      	blx	r3
 8002298:	eef0 7a40 	vmov.f32	s15, s0
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <gyroUpdate+0x114>)
 800229e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <gyroUpdate+0x114>)
 80022a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022a8:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <gyroUpdate+0x114>)
 80022aa:	edd2 7a06 	vldr	s15, [r2, #24]
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	481f      	ldr	r0, [pc, #124]	; (8002330 <gyroUpdate+0x120>)
 80022b4:	4798      	blx	r3
 80022b6:	eef0 7a40 	vmov.f32	s15, s0
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <gyroUpdate+0x114>)
 80022bc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 80022c0:	e028      	b.n	8002314 <gyroUpdate+0x104>
    } else {
        // using simple averaging for downsampling
        gyro.sampleSum[X] += gyro.gyroADC[X];
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <gyroUpdate+0x114>)
 80022c4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <gyroUpdate+0x114>)
 80022ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <gyroUpdate+0x114>)
 80022d4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <gyroUpdate+0x114>)
 80022da:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <gyroUpdate+0x114>)
 80022e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80022e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <gyroUpdate+0x114>)
 80022ea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <gyroUpdate+0x114>)
 80022f0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <gyroUpdate+0x114>)
 80022f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <gyroUpdate+0x114>)
 8002300:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <gyroUpdate+0x114>)
 8002306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800230a:	3301      	adds	r3, #1
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <gyroUpdate+0x114>)
 8002310:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    gyroFilter();
 8002314:	f7ff fe9e 	bl	8002054 <gyroFilter>
	gyroAccumulateMeasurements();
 8002318:	f7ff ff24 	bl	8002164 <gyroAccumulateMeasurements>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004e0 	.word	0x200004e0
 8002324:	200004a4 	.word	0x200004a4
 8002328:	200006ac 	.word	0x200006ac
 800232c:	200006d4 	.word	0x200006d4
 8002330:	200006fc 	.word	0x200006fc

08002334 <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <gyroGetAccumulationAverage+0x9c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d02e      	beq.n	80023a2 <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <gyroGetAccumulationAverage+0xa0>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <gyroGetAccumulationAverage+0x9c>)
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e01c      	b.n	8002392 <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 8002358:	4a1f      	ldr	r2, [pc, #124]	; (80023d8 <gyroGetAccumulationAverage+0xa4>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	edd3 6a00 	vldr	s13, [r3]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <gyroGetAccumulationAverage+0xa4>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b02      	cmp	r3, #2
 8002396:	dddf      	ble.n	8002358 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <gyroGetAccumulationAverage+0x9c>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
        return true;
 800239e:	2301      	movs	r3, #1
 80023a0:	e010      	b.n	80023c4 <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e009      	b.n	80023bc <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	3301      	adds	r3, #1
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	ddf2      	ble.n	80023a8 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 80023c2:	2300      	movs	r3, #0
    }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	2000083c 	.word	0x2000083c
 80023d4:	200004a4 	.word	0x200004a4
 80023d8:	20000824 	.word	0x20000824

080023dc <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
    return false;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
    return rMat[2][2];
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <getCosTiltAngle+0x18>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	ee07 3a90 	vmov	s15, r3
}
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	20000870 	.word	0x20000870

08002408 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	edd3 7a01 	vldr	s15, [r3, #4]
 8002434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	ed93 7a00 	vldr	s14, [r3]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	edd3 7a02 	vldr	s15, [r3, #8]
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	ed93 7a00 	vldr	s14, [r3]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	edd3 7a01 	vldr	s15, [r3, #4]
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	ed93 7a01 	vldr	s14, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	edd3 7a02 	vldr	s15, [r3, #8]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	ed93 7a01 	vldr	s14, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edd3 7a03 	vldr	s15, [r3, #12]
 80024a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	ed93 7a03 	vldr	s14, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 8002500:	4946      	ldr	r1, [pc, #280]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002502:	4847      	ldr	r0, [pc, #284]	; (8002620 <imuComputeRotationMatrix+0x124>)
 8002504:	f7ff ff80 	bl	8002408 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 8002508:	4b44      	ldr	r3, [pc, #272]	; (800261c <imuComputeRotationMatrix+0x120>)
 800250a:	edd3 7a07 	vldr	s15, [r3, #28]
 800250e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002516:	ee37 7a67 	vsub.f32	s14, s14, s15
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <imuComputeRotationMatrix+0x120>)
 800251c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002520:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002528:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <imuComputeRotationMatrix+0x128>)
 800252a:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002530:	ed93 7a05 	vldr	s14, [r3, #20]
 8002534:	4b39      	ldr	r3, [pc, #228]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002536:	edd3 7a03 	vldr	s15, [r3, #12]
 800253a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002542:	4b38      	ldr	r3, [pc, #224]	; (8002624 <imuComputeRotationMatrix+0x128>)
 8002544:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <imuComputeRotationMatrix+0x120>)
 800254a:	ed93 7a06 	vldr	s14, [r3, #24]
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002550:	edd3 7a02 	vldr	s15, [r3, #8]
 8002554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800255c:	4b31      	ldr	r3, [pc, #196]	; (8002624 <imuComputeRotationMatrix+0x128>)
 800255e:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002564:	ed93 7a05 	vldr	s14, [r3, #20]
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <imuComputeRotationMatrix+0x120>)
 800256a:	edd3 7a03 	vldr	s15, [r3, #12]
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <imuComputeRotationMatrix+0x128>)
 8002578:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <imuComputeRotationMatrix+0x120>)
 800257e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002582:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800258a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002590:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002594:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <imuComputeRotationMatrix+0x128>)
 800259e:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80025ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <imuComputeRotationMatrix+0x128>)
 80025b8:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025be:	ed93 7a06 	vldr	s14, [r3, #24]
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80025c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <imuComputeRotationMatrix+0x128>)
 80025d2:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025de:	edd3 7a01 	vldr	s15, [r3, #4]
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <imuComputeRotationMatrix+0x128>)
 80025ec:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <imuComputeRotationMatrix+0x120>)
 80025f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <imuComputeRotationMatrix+0x120>)
 8002604:	edd3 7a07 	vldr	s15, [r3, #28]
 8002608:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800260c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <imuComputeRotationMatrix+0x128>)
 8002612:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000014 	.word	0x20000014
 8002620:	20000004 	.word	0x20000004
 8002624:	20000870 	.word	0x20000870

08002628 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 8002632:	edd7 7a01 	vldr	s15, [r7, #4]
 8002636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002658 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 800263a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002642:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002646:	eef0 7a66 	vmov.f32	s15, s13
}
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40490fdb 	.word	0x40490fdb

0800265c <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002670:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002690 <calculateThrottleAngleScale+0x34>
 8002674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002678:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002694 <calculateThrottleAngleScale+0x38>
 800267c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002680:	eeb0 0a67 	vmov.f32	s0, s15
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	44610000 	.word	0x44610000
 8002694:	440f3d4c 	.word	0x440f3d4c

08002698 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	80fb      	strh	r3, [r7, #6]
 80026a4:	4613      	mov	r3, r2
 80026a6:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <imuConfigure+0x70>)
 80026aa:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80026ae:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <imuConfigure+0x70>)
 80026b2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80026b6:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 80026b8:	2019      	movs	r0, #25
 80026ba:	f7ff f94d 	bl	8001958 <degreesToRadians>
 80026be:	eef0 7a40 	vmov.f32	s15, s0
 80026c2:	eeb0 0a67 	vmov.f32	s0, s15
 80026c6:	f7fe fee9 	bl	800149c <cos_approx>
 80026ca:	eef0 7a40 	vmov.f32	s15, s0
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <imuConfigure+0x74>)
 80026d0:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 80026d4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80026d8:	f7ff ffa6 	bl	8002628 <calculateAccZLowPassFilterRCTimeConstant>
 80026dc:	eef0 7a40 	vmov.f32	s15, s0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <imuConfigure+0x78>)
 80026e2:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ffb7 	bl	800265c <calculateThrottleAngleScale>
 80026ee:	eef0 7a40 	vmov.f32	s15, s0
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <imuConfigure+0x7c>)
 80026f4:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 80026f8:	797b      	ldrb	r3, [r7, #5]
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <imuConfigure+0x80>)
 80026fc:	6013      	str	r3, [r2, #0]
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000868 	.word	0x20000868
 800270c:	200008ac 	.word	0x200008ac
 8002710:	200008a8 	.word	0x200008a8
 8002714:	200008a0 	.word	0x200008a0
 8002718:	200008a4 	.word	0x200008a4

0800271c <imuInit>:

void imuInit(void) {
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 8002720:	210a      	movs	r1, #10
 8002722:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002726:	f7ff ffb7 	bl	8002698 <imuConfigure>
    canUseGPSHeading = false;
 800272a:	4b03      	ldr	r3, [pc, #12]	; (8002738 <imuInit+0x1c>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 8002730:	f7ff fee4 	bl	80024fc <imuComputeRotationMatrix>
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000001 	.word	0x20000001

0800273c <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e012      	b.n	8002776 <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 800275c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002760:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002764:	ed97 7a05 	vldr	s14, [r7, #20]
 8002768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	3301      	adds	r3, #1
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	2b02      	cmp	r3, #2
 800277a:	dde9      	ble.n	8002750 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 800277c:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <imuIsAccelerometerHealthy+0x94>)
 800277e:	ed93 7a00 	vldr	s14, [r3]
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <imuIsAccelerometerHealthy+0x94>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 8002798:	edd7 7a05 	vldr	s15, [r7, #20]
 800279c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80027d4 <imuIsAccelerometerHealthy+0x98>
 80027a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	dd0a      	ble.n	80027c0 <imuIsAccelerometerHealthy+0x84>
 80027aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80027d8 <imuIsAccelerometerHealthy+0x9c>
 80027b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	d501      	bpl.n	80027c0 <imuIsAccelerometerHealthy+0x84>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <imuIsAccelerometerHealthy+0x86>
 80027c0:	2300      	movs	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	20000240 	.word	0x20000240
 80027d4:	3f4f5c29 	.word	0x3f4f5c29
 80027d8:	3f9ae148 	.word	0x3f9ae148

080027dc <invSqrt>:

static float invSqrt(float x)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 80027e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80027ea:	f010 fa75 	bl	8012cd8 <sqrtf>
 80027ee:	eef0 7a40 	vmov.f32	s15, s0
 80027f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	ed2d 8b02 	vpush	{d8}
 800280e:	b09e      	sub	sp, #120	; 0x78
 8002810:	af00      	add	r7, sp, #0
 8002812:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002816:	edc7 0a08 	vstr	s1, [r7, #32]
 800281a:	ed87 1a07 	vstr	s2, [r7, #28]
 800281e:	edc7 1a06 	vstr	s3, [r7, #24]
 8002822:	4603      	mov	r3, r0
 8002824:	ed87 2a04 	vstr	s4, [r7, #16]
 8002828:	edc7 2a03 	vstr	s5, [r7, #12]
 800282c:	ed87 3a02 	vstr	s6, [r7, #8]
 8002830:	edc7 3a01 	vstr	s7, [r7, #4]
 8002834:	ed87 4a00 	vstr	s8, [r7]
 8002838:	75fb      	strb	r3, [r7, #23]
 800283a:	460b      	mov	r3, r1
 800283c:	75bb      	strb	r3, [r7, #22]
 800283e:	4613      	mov	r3, r2
 8002840:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 8002842:	edd7 7a08 	vldr	s15, [r7, #32]
 8002846:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800284a:	edd7 7a07 	vldr	s15, [r7, #28]
 800284e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002856:	edd7 7a06 	vldr	s15, [r7, #24]
 800285a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	eeb0 0a67 	vmov.f32	s0, s15
 8002866:	f010 fa37 	bl	8012cd8 <sqrtf>
 800286a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	677b      	str	r3, [r7, #116]	; 0x74
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	673b      	str	r3, [r7, #112]	; 0x70
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 8002880:	7d7b      	ldrb	r3, [r7, #21]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d060      	beq.n	8002948 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 8002886:	e007      	b.n	8002898 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 8002888:	edd7 7a01 	vldr	s15, [r7, #4]
 800288c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80028b0 <imuMahonyAHRSupdate+0xa8>
 8002890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002894:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 8002898:	edd7 7a01 	vldr	s15, [r7, #4]
 800289c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80028ac <imuMahonyAHRSupdate+0xa4>
 80028a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a8:	dcee      	bgt.n	8002888 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 80028aa:	e00d      	b.n	80028c8 <imuMahonyAHRSupdate+0xc0>
 80028ac:	40490fdb 	.word	0x40490fdb
 80028b0:	40c90fdb 	.word	0x40c90fdb
 80028b4:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 80028b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028bc:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80028b0 <imuMahonyAHRSupdate+0xa8>
 80028c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c4:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 80028c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028cc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80028b4 <imuMahonyAHRSupdate+0xac>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d4ee      	bmi.n	80028b8 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 80028da:	ed97 0a01 	vldr	s0, [r7, #4]
 80028de:	f7fe fd33 	bl	8001348 <sin_approx>
 80028e2:	eef0 7a40 	vmov.f32	s15, s0
 80028e6:	eeb1 7a67 	vneg.f32	s14, s15
 80028ea:	4bdb      	ldr	r3, [pc, #876]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80028f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80028f8:	f7fe fdd0 	bl	800149c <cos_approx>
 80028fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002900:	4bd5      	ldr	r3, [pc, #852]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002902:	edd3 7a03 	vldr	s15, [r3, #12]
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800290e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 8002912:	4bd1      	ldr	r3, [pc, #836]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002914:	edd3 7a06 	vldr	s15, [r3, #24]
 8002918:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 8002924:	4bcc      	ldr	r3, [pc, #816]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002926:	edd3 7a07 	vldr	s15, [r3, #28]
 800292a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 8002936:	4bc8      	ldr	r3, [pc, #800]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002938:	edd3 7a08 	vldr	s15, [r3, #32]
 800293c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002944:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 8002948:	4bc4      	ldr	r3, [pc, #784]	; (8002c5c <imuMahonyAHRSupdate+0x454>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 800294e:	4bc3      	ldr	r3, [pc, #780]	; (8002c5c <imuMahonyAHRSupdate+0x454>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 8002954:	4bc1      	ldr	r3, [pc, #772]	; (8002c5c <imuMahonyAHRSupdate+0x454>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 800295a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800295e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002962:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002966:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800296a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800296e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002972:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 809f 	beq.w	8002ac4 <imuMahonyAHRSupdate+0x2bc>
 8002986:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800298a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002c60 <imuMahonyAHRSupdate+0x458>
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	f340 8095 	ble.w	8002ac4 <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 800299a:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 800299e:	f7ff ff1d 	bl	80027dc <invSqrt>
 80029a2:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 80029a6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80029aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 80029b6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80029ba:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 80029c6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80029ca:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 80029d6:	4ba0      	ldr	r3, [pc, #640]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	4b9c      	ldr	r3, [pc, #624]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 80029e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80029ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f6:	4b98      	ldr	r3, [pc, #608]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 80029f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80029fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a08:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 8002a0c:	4b92      	ldr	r3, [pc, #584]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002a0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a12:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1a:	4b8f      	ldr	r3, [pc, #572]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002a1c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	4b8a      	ldr	r3, [pc, #552]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002a2e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002a32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 8002a42:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002a46:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a4a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002a4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a56:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5a:	f010 f93d 	bl	8012cd8 <sqrtf>
 8002a5e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 8002a62:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	eef1 7a67 	vneg.f32	s15, s15
 8002a72:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 8002a76:	4b78      	ldr	r3, [pc, #480]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002a78:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a84:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 8002a90:	4b71      	ldr	r3, [pc, #452]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002a92:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 8002aaa:	4b6b      	ldr	r3, [pc, #428]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002aac:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab8:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 8002ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002acc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002adc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d068      	beq.n	8002bc0 <imuMahonyAHRSupdate+0x3b8>
 8002aee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002af2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002c60 <imuMahonyAHRSupdate+0x458>
 8002af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	dd5f      	ble.n	8002bc0 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 8002b00:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002b04:	f7ff fe6a 	bl	80027dc <invSqrt>
 8002b08:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 8002b0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b10:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 8002b1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b20:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b28:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 8002b2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b38:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8002b3c:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002b3e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4a:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002b4c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b64:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 8002b68:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002b6a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b76:	4b38      	ldr	r3, [pc, #224]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002b78:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b88:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b90:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 8002b94:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002b96:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <imuMahonyAHRSupdate+0x450>)
 8002ba4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8002bc0:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <imuMahonyAHRSupdate+0x45c>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bce:	dd53      	ble.n	8002c78 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8002bd0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002bd4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002c68 <imuMahonyAHRSupdate+0x460>
 8002bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	d556      	bpl.n	8002c90 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <imuMahonyAHRSupdate+0x45c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 8002be8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002bec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <imuMahonyAHRSupdate+0x464>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <imuMahonyAHRSupdate+0x464>)
 8002c08:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 8002c0c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c10:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <imuMahonyAHRSupdate+0x468>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <imuMahonyAHRSupdate+0x468>)
 8002c2c:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 8002c30:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c34:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <imuMahonyAHRSupdate+0x46c>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <imuMahonyAHRSupdate+0x46c>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
 8002c54:	e01c      	b.n	8002c90 <imuMahonyAHRSupdate+0x488>
 8002c56:	bf00      	nop
 8002c58:	20000870 	.word	0x20000870
 8002c5c:	200008d0 	.word	0x200008d0
 8002c60:	3c23d70a 	.word	0x3c23d70a
 8002c64:	20000868 	.word	0x20000868
 8002c68:	3eb2b8c2 	.word	0x3eb2b8c2
 8002c6c:	200008b0 	.word	0x200008b0
 8002c70:	200008b4 	.word	0x200008b4
 8002c74:	200008b8 	.word	0x200008b8
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 8002c78:	4ba3      	ldr	r3, [pc, #652]	; (8002f08 <imuMahonyAHRSupdate+0x700>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 8002c80:	4ba2      	ldr	r3, [pc, #648]	; (8002f0c <imuMahonyAHRSupdate+0x704>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 8002c88:	4ba1      	ldr	r3, [pc, #644]	; (8002f10 <imuMahonyAHRSupdate+0x708>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 8002c90:	ed97 7a00 	vldr	s14, [r7]
 8002c94:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9c:	4b9a      	ldr	r3, [pc, #616]	; (8002f08 <imuMahonyAHRSupdate+0x700>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	ed97 7a08 	vldr	s14, [r7, #32]
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 8002cb2:	ed97 7a00 	vldr	s14, [r7]
 8002cb6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cbe:	4b93      	ldr	r3, [pc, #588]	; (8002f0c <imuMahonyAHRSupdate+0x704>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc8:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd0:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 8002cd4:	ed97 7a00 	vldr	s14, [r7]
 8002cd8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce0:	4b8b      	ldr	r3, [pc, #556]	; (8002f10 <imuMahonyAHRSupdate+0x708>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 8002cf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d02:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0a:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 8002d0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 8002d26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d32:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 8002d3e:	4b75      	ldr	r3, [pc, #468]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 8002d44:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 8002d4a:	4b72      	ldr	r3, [pc, #456]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 8002d50:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 8002d56:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d58:	ed93 7a00 	vldr	s14, [r3]
 8002d5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002d60:	eef1 6a67 	vneg.f32	s13, s15
 8002d64:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d6c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002d70:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d7c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d84:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d92:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002d98:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d9c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002da0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002da4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002da8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002dac:	edd7 7a06 	vldr	s15, [r7, #24]
 8002db0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002db4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002db8:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002dbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	4b51      	ldr	r3, [pc, #324]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002dce:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002dd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dd8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002ddc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de4:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002de8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002df0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002df4:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002df8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002dfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	4b42      	ldr	r3, [pc, #264]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e0a:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e10:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e14:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002e18:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e20:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002e24:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e28:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e30:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002e34:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e44:	4b33      	ldr	r3, [pc, #204]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e46:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e4c:	ed93 7a00 	vldr	s14, [r3]
 8002e50:	4b30      	ldr	r3, [pc, #192]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5a:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e62:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e6e:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e70:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e84:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002e8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e96:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9a:	f7ff fc9f 	bl	80027dc <invSqrt>
 8002e9e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002ea4:	ed93 7a00 	vldr	s14, [r3]
 8002ea8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002eb2:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002eb8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ebc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002ec6:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002ecc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ed0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002eda:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002ee0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ee4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <imuMahonyAHRSupdate+0x70c>)
 8002eee:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 8002ef2:	f7ff fb03 	bl	80024fc <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <imuMahonyAHRSupdate+0x710>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
}
 8002efc:	bf00      	nop
 8002efe:	3778      	adds	r7, #120	; 0x78
 8002f00:	46bd      	mov	sp, r7
 8002f02:	ecbd 8b02 	vpop	{d8}
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200008b0 	.word	0x200008b0
 8002f0c:	200008b4 	.word	0x200008b4
 8002f10:	200008b8 	.word	0x200008b8
 8002f14:	20000004 	.word	0x20000004
 8002f18:	20000866 	.word	0x20000866

08002f1c <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 8002f20:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <imuUpdateEulerAngles+0xc8>)
 8002f22:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f26:	4b2f      	ldr	r3, [pc, #188]	; (8002fe4 <imuUpdateEulerAngles+0xc8>)
 8002f28:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f2c:	eef0 0a47 	vmov.f32	s1, s14
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	f7fe fb1e 	bl	8001574 <atan2_approx>
 8002f38:	eef0 7a40 	vmov.f32	s15, s0
 8002f3c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002fe8 <imuUpdateEulerAngles+0xcc>
 8002f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f44:	eeb0 0a67 	vmov.f32	s0, s15
 8002f48:	f00f fd0c 	bl	8012964 <lrintf>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b21a      	sxth	r2, r3
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <imuUpdateEulerAngles+0xd0>)
 8002f52:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <imuUpdateEulerAngles+0xc8>)
 8002f56:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f5a:	eef1 7a67 	vneg.f32	s15, s15
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	f7fe fab3 	bl	80014cc <acos_approx>
 8002f66:	eef0 7a40 	vmov.f32	s15, s0
 8002f6a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ff0 <imuUpdateEulerAngles+0xd4>
 8002f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f72:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002fe8 <imuUpdateEulerAngles+0xcc>
 8002f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7e:	f00f fcf1 	bl	8012964 <lrintf>
 8002f82:	4603      	mov	r3, r0
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <imuUpdateEulerAngles+0xd0>)
 8002f88:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <imuUpdateEulerAngles+0xc8>)
 8002f8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <imuUpdateEulerAngles+0xc8>)
 8002f92:	ed93 7a00 	vldr	s14, [r3]
 8002f96:	eef0 0a47 	vmov.f32	s1, s14
 8002f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9e:	f7fe fae9 	bl	8001574 <atan2_approx>
 8002fa2:	eef0 7a40 	vmov.f32	s15, s0
 8002fa6:	eef1 7a67 	vneg.f32	s15, s15
 8002faa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002fe8 <imuUpdateEulerAngles+0xcc>
 8002fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb6:	f00f fcd5 	bl	8012964 <lrintf>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	b21a      	sxth	r2, r3
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <imuUpdateEulerAngles+0xd0>)
 8002fc0:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <imuUpdateEulerAngles+0xd0>)
 8002fc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da09      	bge.n	8002fe0 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <imuUpdateEulerAngles+0xd0>)
 8002fce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b21a      	sxth	r2, r3
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <imuUpdateEulerAngles+0xd0>)
 8002fde:	809a      	strh	r2, [r3, #4]
    }
}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000870 	.word	0x20000870
 8002fe8:	440f3d4c 	.word	0x440f3d4c
 8002fec:	20000860 	.word	0x20000860
 8002ff0:	3fc90fdb 	.word	0x3fc90fdb

08002ff4 <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 8003002:	2300      	movs	r3, #0
 8003004:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 8003006:	2300      	movs	r3, #0
 8003008:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 800300a:	7cbb      	ldrb	r3, [r7, #18]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d163      	bne.n	80030d8 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 8003010:	4b42      	ldr	r3, [pc, #264]	; (800311c <imuCalcKpGain+0x128>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <imuCalcKpGain+0x34>
 8003018:	4b41      	ldr	r3, [pc, #260]	; (8003120 <imuCalcKpGain+0x12c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <imuCalcKpGain+0x34>
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <imuCalcKpGain+0x130>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d030      	beq.n	800308a <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eef0 7ae7 	vabs.f32	s15, s15
 8003032:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	dc1c      	bgt.n	800307a <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	eef0 7ae7 	vabs.f32	s15, s15
 800304c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003058:	dc0f      	bgt.n	800307a <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3308      	adds	r3, #8
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	eef0 7ae7 	vabs.f32	s15, s15
 8003066:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	dc02      	bgt.n	800307a <imuCalcKpGain+0x86>
                || (!useAcc)) {
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <imuCalcKpGain+0x134>)
 800307e:	4413      	add	r3, r2
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <imuCalcKpGain+0x12c>)
 8003082:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <imuCalcKpGain+0x128>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <imuCalcKpGain+0x128>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <imuCalcKpGain+0x128>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d309      	bcc.n	80030b0 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <imuCalcKpGain+0x12c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <imuCalcKpGain+0x128>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <imuCalcKpGain+0x130>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e013      	b.n	80030d8 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 80030b0:	2301      	movs	r3, #1
 80030b2:	74fb      	strb	r3, [r7, #19]
 80030b4:	e010      	b.n	80030d8 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <imuCalcKpGain+0x12c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <imuCalcKpGain+0xe4>
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <imuCalcKpGain+0x12c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d307      	bcc.n	80030d8 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <imuCalcKpGain+0x138>)
 80030cc:	4413      	add	r3, r2
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <imuCalcKpGain+0x128>)
 80030d0:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <imuCalcKpGain+0x12c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <imuCalcKpGain+0x13c>)
 80030da:	7cbb      	ldrb	r3, [r7, #18]
 80030dc:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 80030de:	7cfb      	ldrb	r3, [r7, #19]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <imuCalcKpGain+0x140>)
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	e00d      	b.n	8003106 <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <imuCalcKpGain+0x144>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	617b      	str	r3, [r7, #20]
       if (!armState) {
 80030f0:	7cbb      	ldrb	r3, [r7, #18]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d107      	bne.n	8003106 <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 80030f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003102:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	ee07 3a90 	vmov	s15, r3
}
 800310c:	eeb0 0a67 	vmov.f32	s0, s15
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	200008c0 	.word	0x200008c0
 8003120:	200008c4 	.word	0x200008c4
 8003124:	200008c8 	.word	0x200008c8
 8003128:	0003d090 	.word	0x0003d090
 800312c:	0007a120 	.word	0x0007a120
 8003130:	200008bc 	.word	0x200008bc
 8003134:	41c80000 	.word	0x41c80000
 8003138:	20000868 	.word	0x20000868

0800313c <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 800313c:	b580      	push	{r7, lr}
 800313e:	ed2d 8b08 	vpush	{d8-d11}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 8003146:	2300      	movs	r3, #0
 8003148:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 800314a:	2300      	movs	r3, #0
 800314c:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 800314e:	2301      	movs	r3, #1
 8003150:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 8003152:	4b35      	ldr	r3, [pc, #212]	; (8003228 <imuCalculateEstimatedAttitude+0xec>)
 8003154:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 8003156:	f242 7310 	movw	r3, #10000	; 0x2710
 800315a:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <imuCalculateEstimatedAttitude+0xf0>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	4413      	add	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 8003166:	4a31      	ldr	r2, [pc, #196]	; (800322c <imuCalculateEstimatedAttitude+0xf0>)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	6013      	str	r3, [r2, #0]

    useMag = true;
 800316c:	2301      	movs	r3, #1
 800316e:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f8de 	bl	8002334 <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8003178:	482d      	ldr	r0, [pc, #180]	; (8003230 <imuCalculateEstimatedAttitude+0xf4>)
 800317a:	f7fd fb7b 	bl	8000874 <accGetAccumulationAverage>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d004      	beq.n	800318e <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 8003184:	482a      	ldr	r0, [pc, #168]	; (8003230 <imuCalculateEstimatedAttitude+0xf4>)
 8003186:	f7ff fad9 	bl	800273c <imuIsAccelerometerHealthy>
 800318a:	4603      	mov	r3, r0
 800318c:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003198:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003234 <imuCalculateEstimatedAttitude+0xf8>
 800319c:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 80031a0:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 80031a4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003238 <imuCalculateEstimatedAttitude+0xfc>
 80031a8:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 80031ac:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 80031b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003238 <imuCalculateEstimatedAttitude+0xfc>
 80031b4:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 80031b8:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 80031bc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003238 <imuCalculateEstimatedAttitude+0xfc>
 80031c0:	ee67 9a87 	vmul.f32	s19, s15, s14
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <imuCalculateEstimatedAttitude+0xf4>)
 80031c6:	ed93 aa00 	vldr	s20, [r3]
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <imuCalculateEstimatedAttitude+0xf4>)
 80031cc:	edd3 aa01 	vldr	s21, [r3, #4]
 80031d0:	4b17      	ldr	r3, [pc, #92]	; (8003230 <imuCalculateEstimatedAttitude+0xf4>)
 80031d2:	ed93 ba02 	vldr	s22, [r3, #8]
 80031d6:	1d3a      	adds	r2, r7, #4
 80031d8:	7ffb      	ldrb	r3, [r7, #31]
 80031da:	4619      	mov	r1, r3
 80031dc:	6938      	ldr	r0, [r7, #16]
 80031de:	f7ff ff09 	bl	8002ff4 <imuCalcKpGain>
 80031e2:	eef0 7a40 	vmov.f32	s15, s0
 80031e6:	7f7a      	ldrb	r2, [r7, #29]
 80031e8:	7fb9      	ldrb	r1, [r7, #30]
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	eeb0 4a67 	vmov.f32	s8, s15
 80031f0:	edd7 3a06 	vldr	s7, [r7, #24]
 80031f4:	eeb0 3a4b 	vmov.f32	s6, s22
 80031f8:	eef0 2a6a 	vmov.f32	s5, s21
 80031fc:	eeb0 2a4a 	vmov.f32	s4, s20
 8003200:	4618      	mov	r0, r3
 8003202:	eef0 1a69 	vmov.f32	s3, s19
 8003206:	eeb0 1a49 	vmov.f32	s2, s18
 800320a:	eef0 0a68 	vmov.f32	s1, s17
 800320e:	eeb0 0a48 	vmov.f32	s0, s16
 8003212:	f7ff faf9 	bl	8002808 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 8003216:	f7ff fe81 	bl	8002f1c <imuUpdateEulerAngles>
}
 800321a:	bf00      	nop
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	ecbd 8b08 	vpop	{d8-d11}
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	42e4c2a3 	.word	0x42e4c2a3
 800322c:	200008cc 	.word	0x200008cc
 8003230:	20000894 	.word	0x20000894
 8003234:	358637bd 	.word	0x358637bd
 8003238:	3c8efa35 	.word	0x3c8efa35

0800323c <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	ed2d 8b02 	vpush	{d8}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 8003246:	f7ff f8d1 	bl	80023ec <getCosTiltAngle>
 800324a:	eef0 7a40 	vmov.f32	s15, s0
 800324e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80032dc <calculateThrottleAngleCorrection+0xa0>
 8003252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325a:	d801      	bhi.n	8003260 <calculateThrottleAngleCorrection+0x24>
        return 0;
 800325c:	2300      	movs	r3, #0
 800325e:	e036      	b.n	80032ce <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 8003260:	f7ff f8c4 	bl	80023ec <getCosTiltAngle>
 8003264:	eef0 7a40 	vmov.f32	s15, s0
 8003268:	eeb0 0a67 	vmov.f32	s0, s15
 800326c:	f7fe f92e 	bl	80014cc <acos_approx>
 8003270:	eeb0 7a40 	vmov.f32	s14, s0
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <calculateThrottleAngleCorrection+0xa4>)
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	f00f fb6f 	bl	8012964 <lrintf>
 8003286:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800328e:	dd02      	ble.n	8003296 <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8003290:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003294:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <calculateThrottleAngleCorrection+0xa8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ac:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80032e8 <calculateThrottleAngleCorrection+0xac>
 80032b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032b4:	eeb0 0a47 	vmov.f32	s0, s14
 80032b8:	f7fe f846 	bl	8001348 <sin_approx>
 80032bc:	eef0 7a40 	vmov.f32	s15, s0
 80032c0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80032c4:	eeb0 0a67 	vmov.f32	s0, s15
 80032c8:	f00f fb4c 	bl	8012964 <lrintf>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	ecbd 8b02 	vpop	{d8}
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	3c75c28f 	.word	0x3c75c28f
 80032e0:	200008a0 	.word	0x200008a0
 80032e4:	200008a4 	.word	0x200008a4
 80032e8:	44b0b6ef 	.word	0x44b0b6ef

080032ec <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 8003306:	f7ff ff99 	bl	800323c <calculateThrottleAngleCorrection>
 800330a:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ffed 	bl	80032ec <mixerSetThrottleAngleCorrection>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3318      	adds	r3, #24
 8003334:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <compassDetect+0x8c>)
 8003342:	789b      	ldrb	r3, [r3, #2]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d10f      	bne.n	8003368 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <compassDetect+0x8c>)
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	4619      	mov	r1, r3
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f7fd fc54 	bl	8000bfc <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <compassDetect+0x8c>)
 8003356:	791a      	ldrb	r2, [r3, #4]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	711a      	strb	r2, [r3, #4]
        break;
 800335c:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <compassDetect+0x8c>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <compassDetect+0x54>
 8003366:	e001      	b.n	800336c <compassDetect+0x50>
        return false;
 8003368:	2300      	movs	r3, #0
 800336a:	e019      	b.n	80033a0 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 800336c:	2b02      	cmp	r3, #2
 800336e:	d10e      	bne.n	800338e <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d103      	bne.n	8003382 <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 800337a:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <compassDetect+0x8c>)
 800337c:	791a      	ldrb	r2, [r3, #4]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 8003388:	2302      	movs	r3, #2
 800338a:	73fb      	strb	r3, [r7, #15]
        break;
 800338c:	e002      	b.n	8003394 <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 800338e:	2301      	movs	r3, #1
 8003390:	73fb      	strb	r3, [r7, #15]
        break;
 8003392:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <compassDetect+0x82>
        return false;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <compassDetect+0x84>
    }

    return true;
 800339e:	2301      	movs	r3, #1
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200009d0 	.word	0x200009d0

080033ac <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <magInit+0x64>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	60d3      	str	r3, [r2, #12]
	magDev.read = readFn;
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <magInit+0x64>)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6113      	str	r3, [r2, #16]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 80033c2:	f107 030f 	add.w	r3, r7, #15
 80033c6:	4619      	mov	r1, r3
 80033c8:	4811      	ldr	r0, [pc, #68]	; (8003410 <magInit+0x64>)
 80033ca:	f7ff ffa7 	bl	800331c <compassDetect>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d018      	beq.n	8003406 <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 80033d4:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <magInit+0x64>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <magInit+0x64>)
 80033da:	4798      	blx	r3
    doneInit = true;
 80033dc:	4b0d      	ldr	r3, [pc, #52]	; (8003414 <magInit+0x68>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <magInit+0x64>)
 80033e6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <magInit+0x6c>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <magInit+0x6c>)
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <magInit+0x64>)
 80033f8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 80033fc:	4907      	ldr	r1, [pc, #28]	; (800341c <magInit+0x70>)
 80033fe:	4808      	ldr	r0, [pc, #32]	; (8003420 <magInit+0x74>)
 8003400:	f002 f8dc 	bl	80055bc <buildRotationMatrixFromAlignment>
 8003404:	e000      	b.n	8003408 <magInit+0x5c>
        return;
 8003406:	bf00      	nop
}
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	200008dc 	.word	0x200008dc
 8003414:	200009cc 	.word	0x200009cc
 8003418:	200009d0 	.word	0x200009d0
 800341c:	200009a0 	.word	0x200009a0
 8003420:	200009e0 	.word	0x200009e0

08003424 <magUpdate>:

void magUpdate(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev)) {
 800342a:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <magUpdate+0xb8>)
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	482b      	ldr	r0, [pc, #172]	; (80034dc <magUpdate+0xb8>)
 8003430:	4798      	blx	r3
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d04d      	beq.n	80034d4 <magUpdate+0xb0>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	e00c      	b.n	8003458 <magUpdate+0x34>
    	mag.magADC[axis] = magDev.magADC[axis];
 800343e:	4a27      	ldr	r2, [pc, #156]	; (80034dc <magUpdate+0xb8>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4925      	ldr	r1, [pc, #148]	; (80034e0 <magUpdate+0xbc>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3301      	adds	r3, #1
 8003456:	607b      	str	r3, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	ddef      	ble.n	800343e <magUpdate+0x1a>
    }

    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 800345e:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <magUpdate+0xb8>)
 8003460:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003464:	4619      	mov	r1, r3
 8003466:	481e      	ldr	r0, [pc, #120]	; (80034e0 <magUpdate+0xbc>)
 8003468:	f002 f93a 	bl	80056e0 <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <magUpdate+0xc0>)
 800346e:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <magUpdate+0xc4>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d02e      	beq.n	80034d6 <magUpdate+0xb2>
        mag.magADC[X] -= magZero->raw[X];
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <magUpdate+0xbc>)
 800347a:	ed93 7a00 	vldr	s14, [r3]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003484:	ee07 3a90 	vmov	s15, r3
 8003488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800348c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003490:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <magUpdate+0xbc>)
 8003492:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <magUpdate+0xbc>)
 8003498:	ed93 7a01 	vldr	s14, [r3, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <magUpdate+0xbc>)
 80034b0:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <magUpdate+0xbc>)
 80034b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <magUpdate+0xbc>)
 80034ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80034d2:	e000      	b.n	80034d6 <magUpdate+0xb2>
        return;
 80034d4:	bf00      	nop
    }
}
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200008dc 	.word	0x200008dc
 80034e0:	200008d0 	.word	0x200008d0
 80034e4:	200009d8 	.word	0x200009d8
 80034e8:	200009cc 	.word	0x200009cc

080034ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f0:	f007 fe2c 	bl	800b14c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034f4:	f000 f8f2 	bl	80036dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034f8:	f000 f9c0 	bl	800387c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80034fc:	f000 f960 	bl	80037c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003500:	f000 f98e 	bl	8003820 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* initialization of control task */
  gyroInit(sensorGyroInit, sensorGyroRead);
 8003504:	494c      	ldr	r1, [pc, #304]	; (8003638 <main+0x14c>)
 8003506:	484d      	ldr	r0, [pc, #308]	; (800363c <main+0x150>)
 8003508:	f7fe fd04 	bl	8001f14 <gyroInit>
  controlMotorInit();
 800350c:	f7fd fba2 	bl	8000c54 <controlMotorInit>

  /* initialization of attitude task */
  accInit(sensorAccInit, sensorAccRead);
 8003510:	494b      	ldr	r1, [pc, #300]	; (8003640 <main+0x154>)
 8003512:	484c      	ldr	r0, [pc, #304]	; (8003644 <main+0x158>)
 8003514:	f7fd f8c6 	bl	80006a4 <accInit>
  magInit(sensorMagInit, sensorMagRead);
 8003518:	494b      	ldr	r1, [pc, #300]	; (8003648 <main+0x15c>)
 800351a:	484c      	ldr	r0, [pc, #304]	; (800364c <main+0x160>)
 800351c:	f7ff ff46 	bl	80033ac <magInit>
  attitudeInit();
 8003520:	f7fd f9fa 	bl	8000918 <attitudeInit>

  /* initialization of altitude task */
  baroInit(sensorBaroInit, sensorBaroRead);
 8003524:	494a      	ldr	r1, [pc, #296]	; (8003650 <main+0x164>)
 8003526:	484b      	ldr	r0, [pc, #300]	; (8003654 <main+0x168>)
 8003528:	f7fd fb04 	bl	8000b34 <baroInit>

  /* initialization of sensors */
  	  /* initialization of sensor LSM6DSL*/
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 800352c:	2103      	movs	r1, #3
 800352e:	2000      	movs	r0, #0
 8003530:	f007 fa86 	bl	800aa40 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 8003534:	2103      	movs	r1, #3
 8003536:	2000      	movs	r0, #0
 8003538:	f007 fb7e 	bl	800ac38 <IKS01A2_MOTION_SENSOR_Enable>

  	  /* initialization of sensor LSM303AGR*/
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 800353c:	2102      	movs	r1, #2
 800353e:	2001      	movs	r0, #1
 8003540:	f007 fa7e 	bl	800aa40 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8003544:	2104      	movs	r1, #4
 8003546:	2002      	movs	r0, #2
 8003548:	f007 fa7a 	bl	800aa40 <IKS01A2_MOTION_SENSOR_Init>

  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 800354c:	2102      	movs	r1, #2
 800354e:	2001      	movs	r0, #1
 8003550:	f007 fb72 	bl	800ac38 <IKS01A2_MOTION_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8003554:	2104      	movs	r1, #4
 8003556:	2002      	movs	r0, #2
 8003558:	f007 fb6e 	bl	800ac38 <IKS01A2_MOTION_SENSOR_Enable>
  	  /* initialization of pressure sensor LPS22HB*/
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800355c:	2102      	movs	r1, #2
 800355e:	2001      	movs	r0, #1
 8003560:	f006 ffb2 	bl	800a4c8 <IKS01A2_ENV_SENSOR_Init>
  IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8003564:	2102      	movs	r1, #2
 8003566:	2001      	movs	r0, #1
 8003568:	f007 f86e 	bl	800a648 <IKS01A2_ENV_SENSOR_Enable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800356c:	f00b fd5c 	bl	800f028 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semPressure */
  semPressureHandle = osSemaphoreNew(1, 1, &semPressure_attributes);
 8003570:	4a39      	ldr	r2, [pc, #228]	; (8003658 <main+0x16c>)
 8003572:	2101      	movs	r1, #1
 8003574:	2001      	movs	r0, #1
 8003576:	f00b fe95 	bl	800f2a4 <osSemaphoreNew>
 800357a:	4603      	mov	r3, r0
 800357c:	4a37      	ldr	r2, [pc, #220]	; (800365c <main+0x170>)
 800357e:	6013      	str	r3, [r2, #0]

  /* creation of semAccLSM303AGR */
  semAccLSM303AGRHandle = osSemaphoreNew(1, 1, &semAccLSM303AGR_attributes);
 8003580:	4a37      	ldr	r2, [pc, #220]	; (8003660 <main+0x174>)
 8003582:	2101      	movs	r1, #1
 8003584:	2001      	movs	r0, #1
 8003586:	f00b fe8d 	bl	800f2a4 <osSemaphoreNew>
 800358a:	4603      	mov	r3, r0
 800358c:	4a35      	ldr	r2, [pc, #212]	; (8003664 <main+0x178>)
 800358e:	6013      	str	r3, [r2, #0]

  /* creation of semAccLSM6DSL */
  semAccLSM6DSLHandle = osSemaphoreNew(1, 1, &semAccLSM6DSL_attributes);
 8003590:	4a35      	ldr	r2, [pc, #212]	; (8003668 <main+0x17c>)
 8003592:	2101      	movs	r1, #1
 8003594:	2001      	movs	r0, #1
 8003596:	f00b fe85 	bl	800f2a4 <osSemaphoreNew>
 800359a:	4603      	mov	r3, r0
 800359c:	4a33      	ldr	r2, [pc, #204]	; (800366c <main+0x180>)
 800359e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tControlMotor */
  tControlMotorHandle = osThreadNew(startTaskControlMotor, NULL, &tControlMotor_attributes);
 80035a0:	4a33      	ldr	r2, [pc, #204]	; (8003670 <main+0x184>)
 80035a2:	2100      	movs	r1, #0
 80035a4:	4833      	ldr	r0, [pc, #204]	; (8003674 <main+0x188>)
 80035a6:	f00b fda9 	bl	800f0fc <osThreadNew>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4a32      	ldr	r2, [pc, #200]	; (8003678 <main+0x18c>)
 80035ae:	6013      	str	r3, [r2, #0]

  /* creation of tAttitude */
  tAttitudeHandle = osThreadNew(startTaskAttitude, NULL, &tAttitude_attributes);
 80035b0:	4a32      	ldr	r2, [pc, #200]	; (800367c <main+0x190>)
 80035b2:	2100      	movs	r1, #0
 80035b4:	4832      	ldr	r0, [pc, #200]	; (8003680 <main+0x194>)
 80035b6:	f00b fda1 	bl	800f0fc <osThreadNew>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4a31      	ldr	r2, [pc, #196]	; (8003684 <main+0x198>)
 80035be:	6013      	str	r3, [r2, #0]

  /* creation of tAltitude */
  tAltitudeHandle = osThreadNew(startTaskAltitude, NULL, &tAltitude_attributes);
 80035c0:	4a31      	ldr	r2, [pc, #196]	; (8003688 <main+0x19c>)
 80035c2:	2100      	movs	r1, #0
 80035c4:	4831      	ldr	r0, [pc, #196]	; (800368c <main+0x1a0>)
 80035c6:	f00b fd99 	bl	800f0fc <osThreadNew>
 80035ca:	4603      	mov	r3, r0
 80035cc:	4a30      	ldr	r2, [pc, #192]	; (8003690 <main+0x1a4>)
 80035ce:	6013      	str	r3, [r2, #0]

  /* creation of tGetAccLSM6DSL */
  tGetAccLSM6DSLHandle = osThreadNew(StartTaskGetAccLSM6DSL, NULL, &tGetAccLSM6DSL_attributes);
 80035d0:	4a30      	ldr	r2, [pc, #192]	; (8003694 <main+0x1a8>)
 80035d2:	2100      	movs	r1, #0
 80035d4:	4830      	ldr	r0, [pc, #192]	; (8003698 <main+0x1ac>)
 80035d6:	f00b fd91 	bl	800f0fc <osThreadNew>
 80035da:	4603      	mov	r3, r0
 80035dc:	4a2f      	ldr	r2, [pc, #188]	; (800369c <main+0x1b0>)
 80035de:	6013      	str	r3, [r2, #0]

  /* creation of tGetAccLSM303AG */
  tGetAccLSM303AGHandle = osThreadNew(StartTaskGetAccLSM303AGR, NULL, &tGetAccLSM303AG_attributes);
 80035e0:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <main+0x1b4>)
 80035e2:	2100      	movs	r1, #0
 80035e4:	482f      	ldr	r0, [pc, #188]	; (80036a4 <main+0x1b8>)
 80035e6:	f00b fd89 	bl	800f0fc <osThreadNew>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a2e      	ldr	r2, [pc, #184]	; (80036a8 <main+0x1bc>)
 80035ee:	6013      	str	r3, [r2, #0]

  /* creation of tGetGyrLSM6DSL */
  tGetGyrLSM6DSLHandle = osThreadNew(StartTaskGetGyrLSM6DSL, NULL, &tGetGyrLSM6DSL_attributes);
 80035f0:	4a2e      	ldr	r2, [pc, #184]	; (80036ac <main+0x1c0>)
 80035f2:	2100      	movs	r1, #0
 80035f4:	482e      	ldr	r0, [pc, #184]	; (80036b0 <main+0x1c4>)
 80035f6:	f00b fd81 	bl	800f0fc <osThreadNew>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <main+0x1c8>)
 80035fe:	6013      	str	r3, [r2, #0]

  /* creation of tGetMagnetLSM30 */
  tGetMagnetLSM30Handle = osThreadNew(StartTaskGetMagnetLSM303AGR, NULL, &tGetMagnetLSM30_attributes);
 8003600:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <main+0x1cc>)
 8003602:	2100      	movs	r1, #0
 8003604:	482d      	ldr	r0, [pc, #180]	; (80036bc <main+0x1d0>)
 8003606:	f00b fd79 	bl	800f0fc <osThreadNew>
 800360a:	4603      	mov	r3, r0
 800360c:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <main+0x1d4>)
 800360e:	6013      	str	r3, [r2, #0]

  /* creation of tGetPressLPS22H */
  tGetPressLPS22HHandle = osThreadNew(StartTaskGetPressLPS22HB, NULL, &tGetPressLPS22H_attributes);
 8003610:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <main+0x1d8>)
 8003612:	2100      	movs	r1, #0
 8003614:	482c      	ldr	r0, [pc, #176]	; (80036c8 <main+0x1dc>)
 8003616:	f00b fd71 	bl	800f0fc <osThreadNew>
 800361a:	4603      	mov	r3, r0
 800361c:	4a2b      	ldr	r2, [pc, #172]	; (80036cc <main+0x1e0>)
 800361e:	6013      	str	r3, [r2, #0]

  /* creation of tPrintUART */
  tPrintUARTHandle = osThreadNew(StartTaskPrintUART, NULL, &tPrintUART_attributes);
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <main+0x1e4>)
 8003622:	2100      	movs	r1, #0
 8003624:	482b      	ldr	r0, [pc, #172]	; (80036d4 <main+0x1e8>)
 8003626:	f00b fd69 	bl	800f0fc <osThreadNew>
 800362a:	4603      	mov	r3, r0
 800362c:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <main+0x1ec>)
 800362e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003630:	f00b fd2e 	bl	800f090 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003634:	e7fe      	b.n	8003634 <main+0x148>
 8003636:	bf00      	nop
 8003638:	08003a5d 	.word	0x08003a5d
 800363c:	08003a49 	.word	0x08003a49
 8003640:	08003aa9 	.word	0x08003aa9
 8003644:	08003a95 	.word	0x08003a95
 8003648:	08003b7d 	.word	0x08003b7d
 800364c:	08003b69 	.word	0x08003b69
 8003650:	08003bcd 	.word	0x08003bcd
 8003654:	08003bb1 	.word	0x08003bb1
 8003658:	08012fd4 	.word	0x08012fd4
 800365c:	20000f9c 	.word	0x20000f9c
 8003660:	08012fe4 	.word	0x08012fe4
 8003664:	20000fa0 	.word	0x20000fa0
 8003668:	08012ff4 	.word	0x08012ff4
 800366c:	20000fa4 	.word	0x20000fa4
 8003670:	08012e90 	.word	0x08012e90
 8003674:	08003c15 	.word	0x08003c15
 8003678:	20000f78 	.word	0x20000f78
 800367c:	08012eb4 	.word	0x08012eb4
 8003680:	08003c2d 	.word	0x08003c2d
 8003684:	20000f7c 	.word	0x20000f7c
 8003688:	08012ed8 	.word	0x08012ed8
 800368c:	08003c49 	.word	0x08003c49
 8003690:	20000f80 	.word	0x20000f80
 8003694:	08012efc 	.word	0x08012efc
 8003698:	08003c5d 	.word	0x08003c5d
 800369c:	20000f84 	.word	0x20000f84
 80036a0:	08012f20 	.word	0x08012f20
 80036a4:	08003cad 	.word	0x08003cad
 80036a8:	20000f88 	.word	0x20000f88
 80036ac:	08012f44 	.word	0x08012f44
 80036b0:	08003cfd 	.word	0x08003cfd
 80036b4:	20000f8c 	.word	0x20000f8c
 80036b8:	08012f68 	.word	0x08012f68
 80036bc:	08003d0d 	.word	0x08003d0d
 80036c0:	20000f90 	.word	0x20000f90
 80036c4:	08012f8c 	.word	0x08012f8c
 80036c8:	08003d1d 	.word	0x08003d1d
 80036cc:	20000f94 	.word	0x20000f94
 80036d0:	08012fb0 	.word	0x08012fb0
 80036d4:	08003d65 	.word	0x08003d65
 80036d8:	20000f98 	.word	0x20000f98

080036dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b094      	sub	sp, #80	; 0x50
 80036e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	2234      	movs	r2, #52	; 0x34
 80036e8:	2100      	movs	r1, #0
 80036ea:	4618      	mov	r0, r3
 80036ec:	f00f f870 	bl	80127d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036f0:	f107 0308 	add.w	r3, r7, #8
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003700:	f009 f8c0 	bl	800c884 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003704:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <SystemClock_Config+0xdc>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <SystemClock_Config+0xdc>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	6413      	str	r3, [r2, #64]	; 0x40
 8003710:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <SystemClock_Config+0xdc>)
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <SystemClock_Config+0xe0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003724:	4a25      	ldr	r2, [pc, #148]	; (80037bc <SystemClock_Config+0xe0>)
 8003726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <SystemClock_Config+0xe0>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800373c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003740:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003742:	2302      	movs	r3, #2
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800374a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800374c:	2304      	movs	r3, #4
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003750:	2360      	movs	r3, #96	; 0x60
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003754:	2302      	movs	r3, #2
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003758:	2304      	movs	r3, #4
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800375c:	2302      	movs	r3, #2
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003760:	f107 031c 	add.w	r3, r7, #28
 8003764:	4618      	mov	r0, r3
 8003766:	f009 f8ed 	bl	800c944 <HAL_RCC_OscConfig>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003770:	f000 fb12 	bl	8003d98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003774:	f009 f896 	bl	800c8a4 <HAL_PWREx_EnableOverDrive>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800377e:	f000 fb0b 	bl	8003d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003782:	230f      	movs	r3, #15
 8003784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003786:	2302      	movs	r3, #2
 8003788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800378e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	2103      	movs	r1, #3
 800379e:	4618      	mov	r0, r3
 80037a0:	f009 fb7e 	bl	800cea0 <HAL_RCC_ClockConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80037aa:	f000 faf5 	bl	8003d98 <Error_Handler>
  }
}
 80037ae:	bf00      	nop
 80037b0:	3750      	adds	r7, #80	; 0x50
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000

080037c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <MX_USART3_UART_Init+0x5c>)
 80037c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037da:	2200      	movs	r2, #0
 80037dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037e6:	220c      	movs	r2, #12
 80037e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <MX_USART3_UART_Init+0x58>)
 80037fe:	2200      	movs	r2, #0
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003802:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_USART3_UART_Init+0x58>)
 8003804:	f00a fcac 	bl	800e160 <HAL_UART_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800380e:	f000 fac3 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200009e8 	.word	0x200009e8
 800381c:	40004800 	.word	0x40004800

08003820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800382a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800382e:	2206      	movs	r2, #6
 8003830:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003834:	2202      	movs	r2, #2
 8003836:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003840:	2202      	movs	r2, #2
 8003842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003846:	2201      	movs	r2, #1
 8003848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003858:	2201      	movs	r2, #1
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003862:	4805      	ldr	r0, [pc, #20]	; (8003878 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003864:	f008 fec5 	bl	800c5f2 <HAL_PCD_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800386e:	f000 fa93 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000a70 	.word	0x20000a70

0800387c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	60da      	str	r2, [r3, #12]
 8003890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003892:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a67      	ldr	r2, [pc, #412]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038aa:	4b62      	ldr	r3, [pc, #392]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	4a61      	ldr	r2, [pc, #388]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b4:	6313      	str	r3, [r2, #48]	; 0x30
 80038b6:	4b5f      	ldr	r3, [pc, #380]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	4b5c      	ldr	r3, [pc, #368]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a5b      	ldr	r2, [pc, #364]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a55      	ldr	r2, [pc, #340]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038f2:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a4f      	ldr	r2, [pc, #316]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 80038f8:	f043 0308 	orr.w	r3, r3, #8
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800390a:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 8003910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b47      	ldr	r3, [pc, #284]	; (8003a34 <MX_GPIO_Init+0x1b8>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	f244 0181 	movw	r1, #16513	; 0x4081
 8003928:	4843      	ldr	r0, [pc, #268]	; (8003a38 <MX_GPIO_Init+0x1bc>)
 800392a:	f007 fffb 	bl	800b924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800392e:	2200      	movs	r2, #0
 8003930:	2140      	movs	r1, #64	; 0x40
 8003932:	4842      	ldr	r0, [pc, #264]	; (8003a3c <MX_GPIO_Init+0x1c0>)
 8003934:	f007 fff6 	bl	800b924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800393c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800393e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	4619      	mov	r1, r3
 800394e:	483c      	ldr	r0, [pc, #240]	; (8003a40 <MX_GPIO_Init+0x1c4>)
 8003950:	f007 fd30 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003954:	2332      	movs	r3, #50	; 0x32
 8003956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003960:	2303      	movs	r3, #3
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003964:	230b      	movs	r3, #11
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4834      	ldr	r0, [pc, #208]	; (8003a40 <MX_GPIO_Init+0x1c4>)
 8003970:	f007 fd20 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003974:	2386      	movs	r3, #134	; 0x86
 8003976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003984:	230b      	movs	r3, #11
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	4619      	mov	r1, r3
 800398e:	482d      	ldr	r0, [pc, #180]	; (8003a44 <MX_GPIO_Init+0x1c8>)
 8003990:	f007 fd10 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003994:	f244 0381 	movw	r3, #16513	; 0x4081
 8003998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399a:	2301      	movs	r3, #1
 800399c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a2:	2300      	movs	r3, #0
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a6:	f107 031c 	add.w	r3, r7, #28
 80039aa:	4619      	mov	r1, r3
 80039ac:	4822      	ldr	r0, [pc, #136]	; (8003a38 <MX_GPIO_Init+0x1bc>)
 80039ae:	f007 fd01 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80039b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b8:	2302      	movs	r3, #2
 80039ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c0:	2303      	movs	r3, #3
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039c4:	230b      	movs	r3, #11
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 031c 	add.w	r3, r7, #28
 80039cc:	4619      	mov	r1, r3
 80039ce:	481a      	ldr	r0, [pc, #104]	; (8003a38 <MX_GPIO_Init+0x1bc>)
 80039d0:	f007 fcf0 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80039d4:	2340      	movs	r3, #64	; 0x40
 80039d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d8:	2301      	movs	r3, #1
 80039da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80039e4:	f107 031c 	add.w	r3, r7, #28
 80039e8:	4619      	mov	r1, r3
 80039ea:	4814      	ldr	r0, [pc, #80]	; (8003a3c <MX_GPIO_Init+0x1c0>)
 80039ec:	f007 fce2 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	4619      	mov	r1, r3
 8003a02:	480e      	ldr	r0, [pc, #56]	; (8003a3c <MX_GPIO_Init+0x1c0>)
 8003a04:	f007 fcd6 	bl	800b3b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003a08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a16:	2303      	movs	r3, #3
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a1a:	230b      	movs	r3, #11
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	4619      	mov	r1, r3
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <MX_GPIO_Init+0x1c0>)
 8003a26:	f007 fcc5 	bl	800b3b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a2a:	bf00      	nop
 8003a2c:	3730      	adds	r7, #48	; 0x30
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020400 	.word	0x40020400
 8003a3c:	40021800 	.word	0x40021800
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020000 	.word	0x40020000

08003a48 <sensorGyroInit>:

/* USER CODE BEGIN 4 */
static void sensorGyroInit(struct gyroDev_s *gyro) { }
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	gyro->gyroADC[0] = 0;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	gyro->gyroADC[1] = -12345;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <sensorGyroRead+0x30>)
 8003a72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	gyro->gyroADC[2] = -28414;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <sensorGyroRead+0x34>)
 8003a7a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	return true;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	c640e400 	.word	0xc640e400
 8003a90:	c6ddfc00 	.word	0xc6ddfc00

08003a94 <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM303AG;
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM6DSL;

	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <sensorAccRead+0xb0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f00b fc8f 	bl	800f3dc <osSemaphoreAcquire>
	axes_LSM303AG = axesAcc_LSM303AG;
 8003abe:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <sensorAccRead+0xb4>)
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <sensorAccRead+0xb0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00b fcea 	bl	800f4a8 <osSemaphoreRelease>
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <sensorAccRead+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00b fc7d 	bl	800f3dc <osSemaphoreAcquire>
	axes_LSM6DSL = axesAcc_LSM6DSL;
 8003ae2:	4a20      	ldr	r2, [pc, #128]	; (8003b64 <sensorAccRead+0xbc>)
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <sensorAccRead+0xb8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00b fcd8 	bl	800f4a8 <osSemaphoreRelease>

	acc->accADC[0] = (axes_LSM303AG.x + axes_LSM6DSL.x ) / 2;
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4413      	add	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	da00      	bge.n	8003b04 <sensorAccRead+0x5c>
 8003b02:	3301      	adds	r3, #1
 8003b04:	105b      	asrs	r3, r3, #1
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	edc3 7a04 	vstr	s15, [r3, #16]
	acc->accADC[1] = (axes_LSM303AG.y + axes_LSM6DSL.y ) / 2;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da00      	bge.n	8003b20 <sensorAccRead+0x78>
 8003b1e:	3301      	adds	r3, #1
 8003b20:	105b      	asrs	r3, r3, #1
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	edc3 7a05 	vstr	s15, [r3, #20]
	acc->accADC[2] = (axes_LSM303AG.z + axes_LSM6DSL.z ) / 2;
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da00      	bge.n	8003b3c <sensorAccRead+0x94>
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	105b      	asrs	r3, r3, #1
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	edc3 7a06 	vstr	s15, [r3, #24]
	return true;
 8003b4c:	2301      	movs	r3, #1
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000fa0 	.word	0x20000fa0
 8003b5c:	20000fac 	.word	0x20000fac
 8003b60:	20000fa4 	.word	0x20000fa4
 8003b64:	20000fb8 	.word	0x20000fb8

08003b68 <sensorMagInit>:

static void sensorMagInit(struct magDev_s *mag) { }
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *mag) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	mag->magADC[0] = 2464;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <sensorMagRead+0x28>)
 8003b88:	601a      	str	r2, [r3, #0]
	mag->magADC[1] = -3257;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <sensorMagRead+0x2c>)
 8003b8e:	605a      	str	r2, [r3, #4]
	mag->magADC[2] = 1588;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a06      	ldr	r2, [pc, #24]	; (8003bac <sensorMagRead+0x30>)
 8003b94:	609a      	str	r2, [r3, #8]
	return true;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	451a0000 	.word	0x451a0000
 8003ba8:	c54b9000 	.word	0xc54b9000
 8003bac:	44c68000 	.word	0x44c68000

08003bb0 <sensorBaroInit>:

static void sensorBaroInit(struct baroDev_s *baro) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	baro->baroADC = 0;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <sensorBaroRead>:

static bool sensorBaroRead(struct baroDev_s *baro) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	//baro->baroADC = 12000;
	osSemaphoreAcquire(semPressureHandle, osWaitForever );
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <sensorBaroRead+0x40>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00b fbfd 	bl	800f3dc <osSemaphoreAcquire>
	baro->baroADC = LPS22HB_Pressure;
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <sensorBaroRead+0x44>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bec:	ee17 2a90 	vmov	r2, s15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	//LPS22HB_Pressure = pressure;
	osSemaphoreRelease(semPressureHandle);
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <sensorBaroRead+0x40>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f00b fc54 	bl	800f4a8 <osSemaphoreRelease>
	return true;
 8003c00:	2301      	movs	r3, #1
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000f9c 	.word	0x20000f9c
 8003c10:	20000fa8 	.word	0x20000fa8

08003c14 <startTaskControlMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskControlMotor */
void startTaskControlMotor(void *argument)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	gyroUpdate();
 8003c1c:	f7fe faf8 	bl	8002210 <gyroUpdate>
	controlMotorUpdate();
 8003c20:	f7fd f81e 	bl	8000c60 <controlMotorUpdate>
    osDelay(1);
 8003c24:	2001      	movs	r0, #1
 8003c26:	f00b fb0f 	bl	800f248 <osDelay>
	gyroUpdate();
 8003c2a:	e7f7      	b.n	8003c1c <startTaskControlMotor+0x8>

08003c2c <startTaskAttitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAttitude */
void startTaskAttitude(void *argument)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAttitude */
  /* Infinite loop */
  for(;;)
  {
    accUpdate();
 8003c34:	f7fc fd92 	bl	800075c <accUpdate>
    magUpdate();
 8003c38:	f7ff fbf4 	bl	8003424 <magUpdate>
    attitudeUpdate();
 8003c3c:	f7fc fe72 	bl	8000924 <attitudeUpdate>
    osDelay(1);
 8003c40:	2001      	movs	r0, #1
 8003c42:	f00b fb01 	bl	800f248 <osDelay>
    accUpdate();
 8003c46:	e7f5      	b.n	8003c34 <startTaskAttitude+0x8>

08003c48 <startTaskAltitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAltitude */
void startTaskAltitude(void *argument)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAltitude */
  /* Infinite loop */
  for(;;)
  {
    baroUpdate();
 8003c50:	f7fc ffaa 	bl	8000ba8 <baroUpdate>
    osDelay(1);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f00b faf7 	bl	800f248 <osDelay>
    baroUpdate();
 8003c5a:	e7f9      	b.n	8003c50 <startTaskAltitude+0x8>

08003c5c <StartTaskGetAccLSM6DSL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetAccLSM6DSL */
void StartTaskGetAccLSM6DSL(void *argument)
{
 8003c5c:	b590      	push	{r4, r7, lr}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetAccLSM6DSL */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &axes);
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f007 f825 	bl	800acbc <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <StartTaskGetAccLSM6DSL+0x48>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f04f 31ff 	mov.w	r1, #4294967295
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f00b fbae 	bl	800f3dc <osSemaphoreAcquire>
	axesAcc_LSM6DSL = axes;
 8003c80:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <StartTaskGetAccLSM6DSL+0x4c>)
 8003c82:	461c      	mov	r4, r3
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <StartTaskGetAccLSM6DSL+0x48>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f00b fc07 	bl	800f4a8 <osSemaphoreRelease>
	osDelay(100);
 8003c9a:	2064      	movs	r0, #100	; 0x64
 8003c9c:	f00b fad4 	bl	800f248 <osDelay>
  {
 8003ca0:	e7e0      	b.n	8003c64 <StartTaskGetAccLSM6DSL+0x8>
 8003ca2:	bf00      	nop
 8003ca4:	20000fa4 	.word	0x20000fa4
 8003ca8:	20000fb8 	.word	0x20000fb8

08003cac <StartTaskGetAccLSM303AGR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetAccLSM303AGR */
void StartTaskGetAccLSM303AGR(void *argument)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetAccLSM303AGR */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO, &axes);
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2102      	movs	r1, #2
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f006 fffd 	bl	800acbc <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <StartTaskGetAccLSM303AGR+0x48>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f00b fb86 	bl	800f3dc <osSemaphoreAcquire>
    axesAcc_LSM303AG = axes;
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <StartTaskGetAccLSM303AGR+0x4c>)
 8003cd2:	461c      	mov	r4, r3
 8003cd4:	f107 030c 	add.w	r3, r7, #12
 8003cd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <StartTaskGetAccLSM303AGR+0x48>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f00b fbdf 	bl	800f4a8 <osSemaphoreRelease>
	osDelay(100);
 8003cea:	2064      	movs	r0, #100	; 0x64
 8003cec:	f00b faac 	bl	800f248 <osDelay>
  {
 8003cf0:	e7e0      	b.n	8003cb4 <StartTaskGetAccLSM303AGR+0x8>
 8003cf2:	bf00      	nop
 8003cf4:	20000fa0 	.word	0x20000fa0
 8003cf8:	20000fac 	.word	0x20000fac

08003cfc <StartTaskGetGyrLSM6DSL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetGyrLSM6DSL */
void StartTaskGetGyrLSM6DSL(void *argument)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetGyrLSM6DSL */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8003d04:	2001      	movs	r0, #1
 8003d06:	f00b fa9f 	bl	800f248 <osDelay>
 8003d0a:	e7fb      	b.n	8003d04 <StartTaskGetGyrLSM6DSL+0x8>

08003d0c <StartTaskGetMagnetLSM303AGR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetMagnetLSM303AGR */
void StartTaskGetMagnetLSM303AGR(void *argument)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetMagnetLSM303AGR */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8003d14:	200a      	movs	r0, #10
 8003d16:	f00b fa97 	bl	800f248 <osDelay>
 8003d1a:	e7fb      	b.n	8003d14 <StartTaskGetMagnetLSM303AGR+0x8>

08003d1c <StartTaskGetPressLPS22HB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetPressLPS22HB */
void StartTaskGetPressLPS22HB(void *argument)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetPressLPS22HB */
  /* Infinite loop */
  float pressure;
  for(;;)
  {
	int res = IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_PRESSURE,
 8003d24:	f107 0308 	add.w	r3, r7, #8
 8003d28:	461a      	mov	r2, r3
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f006 fccd 	bl	800a6cc <IKS01A2_ENV_SENSOR_GetValue>
 8003d32:	60f8      	str	r0, [r7, #12]
	     &pressure);
	osSemaphoreAcquire(semPressureHandle, osWaitForever );
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <StartTaskGetPressLPS22HB+0x40>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f00b fb4d 	bl	800f3dc <osSemaphoreAcquire>
	LPS22HB_Pressure = pressure;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4a06      	ldr	r2, [pc, #24]	; (8003d60 <StartTaskGetPressLPS22HB+0x44>)
 8003d46:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(semPressureHandle);
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <StartTaskGetPressLPS22HB+0x40>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f00b fbab 	bl	800f4a8 <osSemaphoreRelease>
    osDelay(20);
 8003d52:	2014      	movs	r0, #20
 8003d54:	f00b fa78 	bl	800f248 <osDelay>
  {
 8003d58:	e7e4      	b.n	8003d24 <StartTaskGetPressLPS22HB+0x8>
 8003d5a:	bf00      	nop
 8003d5c:	20000f9c 	.word	0x20000f9c
 8003d60:	20000fa8 	.word	0x20000fa8

08003d64 <StartTaskPrintUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPrintUART */
void StartTaskPrintUART(void *argument)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPrintUART */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f00b fa6b 	bl	800f248 <osDelay>
 8003d72:	e7fb      	b.n	8003d6c <StartTaskPrintUART+0x8>

08003d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d86:	f007 f9ef 	bl	800b168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40010000 	.word	0x40010000

08003d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9c:	b672      	cpsid	i
}
 8003d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003da0:	e7fe      	b.n	8003da0 <Error_Handler+0x8>

08003da2 <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	da01      	bge.n	8003dba <constrain+0x18>
        return low;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	e006      	b.n	8003dc8 <constrain+0x26>
    else if (amt > high)
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	dd01      	ble.n	8003dc6 <constrain+0x24>
        return high;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	e000      	b.n	8003dc8 <constrain+0x26>
    else
        return amt;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	ed87 0a03 	vstr	s0, [r7, #12]
 8003dde:	edc7 0a02 	vstr	s1, [r7, #8]
 8003de2:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8003de6:	ed97 7a03 	vldr	s14, [r7, #12]
 8003dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	d501      	bpl.n	8003dfc <constrainf+0x28>
        return low;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	e00b      	b.n	8003e14 <constrainf+0x40>
    else if (amt > high)
 8003dfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0c:	dd01      	ble.n	8003e12 <constrainf+0x3e>
        return high;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e000      	b.n	8003e14 <constrainf+0x40>
    else
        return amt;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
    return true;
 8003e2a:	2301      	movs	r3, #1
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <pidAntiGravityEnabled+0x14>)
 8003e3e:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	2000105c 	.word	0x2000105c

08003e50 <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 8003e58:	4a0f      	ldr	r2, [pc, #60]	; (8003e98 <pidSetTargetLooptime+0x48>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <pidSetTargetLooptime+0x48>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003e9c <pidSetTargetLooptime+0x4c>
 8003e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <pidSetTargetLooptime+0x50>)
 8003e74:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 8003e78:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <pidSetTargetLooptime+0x50>)
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <pidSetTargetLooptime+0x50>)
 8003e88:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	200012a8 	.word	0x200012a8
 8003e9c:	358637bd 	.word	0x358637bd
 8003ea0:	2000105c 	.word	0x2000105c

08003ea4 <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b091      	sub	sp, #68	; 0x44
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 8003eac:	4bb0      	ldr	r3, [pc, #704]	; (8004170 <pidInitFilters+0x2cc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10f      	bne.n	8003ed4 <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 8003eb4:	4baf      	ldr	r3, [pc, #700]	; (8004174 <pidInitFilters+0x2d0>)
 8003eb6:	4ab0      	ldr	r2, [pc, #704]	; (8004178 <pidInitFilters+0x2d4>)
 8003eb8:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8003eba:	4bae      	ldr	r3, [pc, #696]	; (8004174 <pidInitFilters+0x2d0>)
 8003ebc:	4aae      	ldr	r2, [pc, #696]	; (8004178 <pidInitFilters+0x2d4>)
 8003ebe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8003ec2:	4bac      	ldr	r3, [pc, #688]	; (8004174 <pidInitFilters+0x2d0>)
 8003ec4:	4aac      	ldr	r2, [pc, #688]	; (8004178 <pidInitFilters+0x2d4>)
 8003ec6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8003eca:	4baa      	ldr	r3, [pc, #680]	; (8004174 <pidInitFilters+0x2d0>)
 8003ecc:	4aaa      	ldr	r2, [pc, #680]	; (8004178 <pidInitFilters+0x2d4>)
 8003ece:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 8003ed2:	e267      	b.n	80043a4 <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 8003ed4:	4ba7      	ldr	r3, [pc, #668]	; (8004174 <pidInitFilters+0x2d0>)
 8003ed6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003eda:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee6:	ee17 3a90 	vmov	r3, s15
 8003eea:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	889b      	ldrh	r3, [r3, #4]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d303      	bcc.n	8003f00 <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	889b      	ldrh	r3, [r3, #4]
 8003efc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003efe:	e00a      	b.n	8003f16 <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	88db      	ldrh	r3, [r3, #6]
 8003f04:	461a      	mov	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d902      	bls.n	8003f12 <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f10:	e001      	b.n	8003f16 <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 8003f16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d03d      	beq.n	8003f98 <pidInitFilters+0xf4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	88db      	ldrh	r3, [r3, #6]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d039      	beq.n	8003f98 <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8003f24:	4b93      	ldr	r3, [pc, #588]	; (8004174 <pidInitFilters+0x2d0>)
 8003f26:	4a95      	ldr	r2, [pc, #596]	; (800417c <pidInitFilters+0x2d8>)
 8003f28:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 8003f2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	88db      	ldrh	r3, [r3, #6]
 8003f38:	ee07 3a10 	vmov	s14, r3
 8003f3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003f40:	eef0 0a47 	vmov.f32	s1, s14
 8003f44:	eeb0 0a67 	vmov.f32	s0, s15
 8003f48:	f7fc fe94 	bl	8000c74 <filterGetNotchQ>
 8003f4c:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003f50:	2300      	movs	r3, #0
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f54:	e01c      	b.n	8003f90 <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8003f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3318      	adds	r3, #24
 8003f62:	4a84      	ldr	r2, [pc, #528]	; (8004174 <pidInitFilters+0x2d0>)
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003f6a:	ee07 2a90 	vmov	s15, r2
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	4a7f      	ldr	r2, [pc, #508]	; (8004170 <pidInitFilters+0x2cc>)
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	edd7 0a04 	vldr	s1, [r7, #16]
 8003f80:	eeb0 0a67 	vmov.f32	s0, s15
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fc ff07 	bl	8000d98 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	dddf      	ble.n	8003f56 <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 8003f96:	e002      	b.n	8003f9e <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 8003f98:	4b76      	ldr	r3, [pc, #472]	; (8004174 <pidInitFilters+0x2d0>)
 8003f9a:	4a77      	ldr	r2, [pc, #476]	; (8004178 <pidInitFilters+0x2d4>)
 8003f9c:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	885b      	ldrh	r3, [r3, #2]
 8003fa2:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 8003fa4:	89fb      	ldrh	r3, [r7, #14]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80c6 	beq.w	8004138 <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	f200 80bb 	bhi.w	800412e <pidInitFilters+0x28a>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <pidInitFilters+0x11c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08004027 	.word	0x08004027
 8003fc8:	08004083 	.word	0x08004083
 8003fcc:	080040d9 	.word	0x080040d9
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8003fd0:	4b68      	ldr	r3, [pc, #416]	; (8004174 <pidInitFilters+0x2d0>)
 8003fd2:	4a6b      	ldr	r2, [pc, #428]	; (8004180 <pidInitFilters+0x2dc>)
 8003fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003fd8:	2300      	movs	r3, #0
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	e01f      	b.n	800401e <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8003fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3398      	adds	r3, #152	; 0x98
 8003fea:	4a62      	ldr	r2, [pc, #392]	; (8004174 <pidInitFilters+0x2d0>)
 8003fec:	189c      	adds	r4, r3, r2
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff8:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <pidInitFilters+0x2d0>)
 8003ffa:	ed93 7a00 	vldr	s14, [r3]
 8003ffe:	eef0 0a47 	vmov.f32	s1, s14
 8004002:	eeb0 0a67 	vmov.f32	s0, s15
 8004006:	f7fc fe67 	bl	8000cd8 <pt1FilterGain>
 800400a:	eef0 7a40 	vmov.f32	s15, s0
 800400e:	eeb0 0a67 	vmov.f32	s0, s15
 8004012:	4620      	mov	r0, r4
 8004014:	f7fc fe88 	bl	8000d28 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	3301      	adds	r3, #1
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	2b02      	cmp	r3, #2
 8004022:	dddc      	ble.n	8003fde <pidInitFilters+0x13a>
            }
            break;
 8004024:	e08c      	b.n	8004140 <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	885b      	ldrh	r3, [r3, #2]
 800402a:	461a      	mov	r2, r3
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4293      	cmp	r3, r2
 8004030:	d922      	bls.n	8004078 <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004032:	4b50      	ldr	r3, [pc, #320]	; (8004174 <pidInitFilters+0x2d0>)
 8004034:	4a51      	ldr	r2, [pc, #324]	; (800417c <pidInitFilters+0x2d8>)
 8004036:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800403a:	2300      	movs	r3, #0
 800403c:	633b      	str	r3, [r7, #48]	; 0x30
 800403e:	e017      	b.n	8004070 <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 8004040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	3398      	adds	r3, #152	; 0x98
 800404c:	4a49      	ldr	r2, [pc, #292]	; (8004174 <pidInitFilters+0x2d0>)
 800404e:	4413      	add	r3, r2
 8004050:	89fa      	ldrh	r2, [r7, #14]
 8004052:	ee07 2a90 	vmov	s15, r2
 8004056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405a:	4a45      	ldr	r2, [pc, #276]	; (8004170 <pidInitFilters+0x2cc>)
 800405c:	6812      	ldr	r2, [r2, #0]
 800405e:	4611      	mov	r1, r2
 8004060:	eeb0 0a67 	vmov.f32	s0, s15
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc fec5 	bl	8000df4 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	3301      	adds	r3, #1
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	2b02      	cmp	r3, #2
 8004074:	dde4      	ble.n	8004040 <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004076:	e063      	b.n	8004140 <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004078:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <pidInitFilters+0x2d0>)
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <pidInitFilters+0x2d4>)
 800407c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004080:	e05e      	b.n	8004140 <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004082:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <pidInitFilters+0x2d0>)
 8004084:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <pidInitFilters+0x2e0>)
 8004086:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800408a:	2300      	movs	r3, #0
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408e:	e01f      	b.n	80040d0 <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	3398      	adds	r3, #152	; 0x98
 800409c:	4a35      	ldr	r2, [pc, #212]	; (8004174 <pidInitFilters+0x2d0>)
 800409e:	189c      	adds	r4, r3, r2
 80040a0:	89fb      	ldrh	r3, [r7, #14]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	4b32      	ldr	r3, [pc, #200]	; (8004174 <pidInitFilters+0x2d0>)
 80040ac:	ed93 7a00 	vldr	s14, [r3]
 80040b0:	eef0 0a47 	vmov.f32	s1, s14
 80040b4:	eeb0 0a67 	vmov.f32	s0, s15
 80040b8:	f7fc ffee 	bl	8001098 <pt2FilterGain>
 80040bc:	eef0 7a40 	vmov.f32	s15, s0
 80040c0:	eeb0 0a67 	vmov.f32	s0, s15
 80040c4:	4620      	mov	r0, r4
 80040c6:	f7fd f835 	bl	8001134 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	3301      	adds	r3, #1
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	dddc      	ble.n	8004090 <pidInitFilters+0x1ec>
            }
            break;
 80040d6:	e033      	b.n	8004140 <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 80040d8:	4b26      	ldr	r3, [pc, #152]	; (8004174 <pidInitFilters+0x2d0>)
 80040da:	4a2b      	ldr	r2, [pc, #172]	; (8004188 <pidInitFilters+0x2e4>)
 80040dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80040e0:	2300      	movs	r3, #0
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e4:	e01f      	b.n	8004126 <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80040e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	3398      	adds	r3, #152	; 0x98
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <pidInitFilters+0x2d0>)
 80040f4:	189c      	adds	r4, r3, r2
 80040f6:	89fb      	ldrh	r3, [r7, #14]
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004100:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <pidInitFilters+0x2d0>)
 8004102:	ed93 7a00 	vldr	s14, [r3]
 8004106:	eef0 0a47 	vmov.f32	s1, s14
 800410a:	eeb0 0a67 	vmov.f32	s0, s15
 800410e:	f7fd f863 	bl	80011d8 <pt3FilterGain>
 8004112:	eef0 7a40 	vmov.f32	s15, s0
 8004116:	eeb0 0a67 	vmov.f32	s0, s15
 800411a:	4620      	mov	r0, r4
 800411c:	f7fd f8aa 	bl	8001274 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	3301      	adds	r3, #1
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	dddc      	ble.n	80040e6 <pidInitFilters+0x242>
            }
            break;
 800412c:	e008      	b.n	8004140 <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <pidInitFilters+0x2d0>)
 8004130:	4a11      	ldr	r2, [pc, #68]	; (8004178 <pidInitFilters+0x2d4>)
 8004132:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004136:	e003      	b.n	8004140 <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <pidInitFilters+0x2d0>)
 800413a:	4a0f      	ldr	r2, [pc, #60]	; (8004178 <pidInitFilters+0x2d4>)
 800413c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80e5 	beq.w	8004316 <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004152:	2b03      	cmp	r3, #3
 8004154:	f200 80da 	bhi.w	800430c <pidInitFilters+0x468>
 8004158:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <pidInitFilters+0x2bc>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	0800418d 	.word	0x0800418d
 8004164:	080041eb 	.word	0x080041eb
 8004168:	08004251 	.word	0x08004251
 800416c:	080042af 	.word	0x080042af
 8004170:	200012a8 	.word	0x200012a8
 8004174:	2000105c 	.word	0x2000105c
 8004178:	08000cb9 	.word	0x08000cb9
 800417c:	08000e25 	.word	0x08000e25
 8004180:	08000d4f 	.word	0x08000d4f
 8004184:	08001163 	.word	0x08001163
 8004188:	080012ab 	.word	0x080012ab
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 800418c:	4b87      	ldr	r3, [pc, #540]	; (80043ac <pidInitFilters+0x508>)
 800418e:	4a88      	ldr	r2, [pc, #544]	; (80043b0 <pidInitFilters+0x50c>)
 8004190:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004194:	2300      	movs	r3, #0
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
 8004198:	e023      	b.n	80041e2 <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80041a8:	4a80      	ldr	r2, [pc, #512]	; (80043ac <pidInitFilters+0x508>)
 80041aa:	4413      	add	r3, r2
 80041ac:	1d1c      	adds	r4, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041bc:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <pidInitFilters+0x508>)
 80041be:	ed93 7a00 	vldr	s14, [r3]
 80041c2:	eef0 0a47 	vmov.f32	s1, s14
 80041c6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ca:	f7fc fd85 	bl	8000cd8 <pt1FilterGain>
 80041ce:	eef0 7a40 	vmov.f32	s15, s0
 80041d2:	eeb0 0a67 	vmov.f32	s0, s15
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7fc fda6 	bl	8000d28 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	3301      	adds	r3, #1
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	ddd8      	ble.n	800419a <pidInitFilters+0x2f6>
            }
            break;
 80041e8:	e099      	b.n	800431e <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80041f0:	461a      	mov	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d926      	bls.n	8004246 <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80041f8:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <pidInitFilters+0x508>)
 80041fa:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <pidInitFilters+0x510>)
 80041fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004200:	2300      	movs	r3, #0
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	e01b      	b.n	800423e <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004214:	4a65      	ldr	r2, [pc, #404]	; (80043ac <pidInitFilters+0x508>)
 8004216:	4413      	add	r3, r2
 8004218:	1d1a      	adds	r2, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004228:	4b63      	ldr	r3, [pc, #396]	; (80043b8 <pidInitFilters+0x514>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4619      	mov	r1, r3
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	4610      	mov	r0, r2
 8004234:	f7fc fdde 	bl	8000df4 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	3301      	adds	r3, #1
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2b02      	cmp	r3, #2
 8004242:	dde0      	ble.n	8004206 <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004244:	e06b      	b.n	800431e <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004246:	4b59      	ldr	r3, [pc, #356]	; (80043ac <pidInitFilters+0x508>)
 8004248:	4a5c      	ldr	r2, [pc, #368]	; (80043bc <pidInitFilters+0x518>)
 800424a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 800424e:	e066      	b.n	800431e <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004250:	4b56      	ldr	r3, [pc, #344]	; (80043ac <pidInitFilters+0x508>)
 8004252:	4a5b      	ldr	r2, [pc, #364]	; (80043c0 <pidInitFilters+0x51c>)
 8004254:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	e023      	b.n	80042a6 <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800426c:	4a4f      	ldr	r2, [pc, #316]	; (80043ac <pidInitFilters+0x508>)
 800426e:	4413      	add	r3, r2
 8004270:	1d1c      	adds	r4, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <pidInitFilters+0x508>)
 8004282:	ed93 7a00 	vldr	s14, [r3]
 8004286:	eef0 0a47 	vmov.f32	s1, s14
 800428a:	eeb0 0a67 	vmov.f32	s0, s15
 800428e:	f7fc ff03 	bl	8001098 <pt2FilterGain>
 8004292:	eef0 7a40 	vmov.f32	s15, s0
 8004296:	eeb0 0a67 	vmov.f32	s0, s15
 800429a:	4620      	mov	r0, r4
 800429c:	f7fc ff4a 	bl	8001134 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	ddd8      	ble.n	800425e <pidInitFilters+0x3ba>
            }
            break;
 80042ac:	e037      	b.n	800431e <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 80042ae:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <pidInitFilters+0x508>)
 80042b0:	4a44      	ldr	r2, [pc, #272]	; (80043c4 <pidInitFilters+0x520>)
 80042b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80042b6:	2300      	movs	r3, #0
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e023      	b.n	8004304 <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80042ca:	4a38      	ldr	r2, [pc, #224]	; (80043ac <pidInitFilters+0x508>)
 80042cc:	4413      	add	r3, r2
 80042ce:	1d1c      	adds	r4, r3, #4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	4b33      	ldr	r3, [pc, #204]	; (80043ac <pidInitFilters+0x508>)
 80042e0:	ed93 7a00 	vldr	s14, [r3]
 80042e4:	eef0 0a47 	vmov.f32	s1, s14
 80042e8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ec:	f7fc ff74 	bl	80011d8 <pt3FilterGain>
 80042f0:	eef0 7a40 	vmov.f32	s15, s0
 80042f4:	eeb0 0a67 	vmov.f32	s0, s15
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fc ffbb 	bl	8001274 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	3301      	adds	r3, #1
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b02      	cmp	r3, #2
 8004308:	ddd8      	ble.n	80042bc <pidInitFilters+0x418>
            }
            break;
 800430a:	e008      	b.n	800431e <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 800430c:	4b27      	ldr	r3, [pc, #156]	; (80043ac <pidInitFilters+0x508>)
 800430e:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <pidInitFilters+0x518>)
 8004310:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 8004314:	e003      	b.n	800431e <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <pidInitFilters+0x508>)
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <pidInitFilters+0x518>)
 800431a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <pidInitFilters+0x508>)
 8004328:	4a24      	ldr	r2, [pc, #144]	; (80043bc <pidInitFilters+0x518>)
 800432a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 800432e:	e019      	b.n	8004364 <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004330:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <pidInitFilters+0x508>)
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <pidInitFilters+0x50c>)
 8004334:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	ee07 3a90 	vmov	s15, r3
 8004340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <pidInitFilters+0x508>)
 8004346:	ed93 7a00 	vldr	s14, [r3]
 800434a:	eef0 0a47 	vmov.f32	s1, s14
 800434e:	eeb0 0a67 	vmov.f32	s0, s15
 8004352:	f7fc fcc1 	bl	8000cd8 <pt1FilterGain>
 8004356:	eef0 7a40 	vmov.f32	s15, s0
 800435a:	eeb0 0a67 	vmov.f32	s0, s15
 800435e:	481a      	ldr	r0, [pc, #104]	; (80043c8 <pidInitFilters+0x524>)
 8004360:	f7fc fce2 	bl	8000d28 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <pidInitFilters+0x508>)
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	eef0 0a67 	vmov.f32	s1, s15
 800436e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004372:	f7fc fcb1 	bl	8000cd8 <pt1FilterGain>
 8004376:	eef0 7a40 	vmov.f32	s15, s0
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	4813      	ldr	r0, [pc, #76]	; (80043cc <pidInitFilters+0x528>)
 8004380:	f7fc fcd2 	bl	8000d28 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <pidInitFilters+0x508>)
 8004386:	edd3 7a00 	vldr	s15, [r3]
 800438a:	eef0 0a67 	vmov.f32	s1, s15
 800438e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004392:	f7fc fca1 	bl	8000cd8 <pt1FilterGain>
 8004396:	eef0 7a40 	vmov.f32	s15, s0
 800439a:	eeb0 0a67 	vmov.f32	s0, s15
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <pidInitFilters+0x52c>)
 80043a0:	f7fc fcc2 	bl	8000d28 <pt1FilterInit>
}
 80043a4:	3744      	adds	r7, #68	; 0x44
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	bf00      	nop
 80043ac:	2000105c 	.word	0x2000105c
 80043b0:	08000d4f 	.word	0x08000d4f
 80043b4:	08000e25 	.word	0x08000e25
 80043b8:	200012a8 	.word	0x200012a8
 80043bc:	08000cb9 	.word	0x08000cb9
 80043c0:	08001163 	.word	0x08001163
 80043c4:	080012ab 	.word	0x080012ab
 80043c8:	200011ec 	.word	0x200011ec
 80043cc:	200011f8 	.word	0x200011f8
 80043d0:	20001200 	.word	0x20001200

080043d4 <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e069      	b.n	80044b6 <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	440b      	add	r3, r1
 80043f0:	3308      	adds	r3, #8
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043fc:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004730 <pidInitConfig+0x35c>
 8004400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004404:	4acb      	ldr	r2, [pc, #812]	; (8004734 <pidInitConfig+0x360>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	331c      	adds	r3, #28
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	440b      	add	r3, r1
 8004420:	3309      	adds	r3, #9
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442c:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8004738 <pidInitConfig+0x364>
 8004430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004434:	4abf      	ldr	r2, [pc, #764]	; (8004734 <pidInitConfig+0x360>)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	331c      	adds	r3, #28
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	3304      	adds	r3, #4
 8004440:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	440b      	add	r3, r1
 8004452:	330a      	adds	r3, #10
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800445e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800473c <pidInitConfig+0x368>
 8004462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004466:	4ab3      	ldr	r2, [pc, #716]	; (8004734 <pidInitConfig+0x360>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	4413      	add	r3, r2
 800446e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004472:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4613      	mov	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4413      	add	r3, r2
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	440b      	add	r3, r1
 8004484:	330c      	adds	r3, #12
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	ee07 3a90 	vmov	s15, r3
 800448c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004490:	eddf 6aab 	vldr	s13, [pc, #684]	; 8004740 <pidInitConfig+0x36c>
 8004494:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004498:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004744 <pidInitConfig+0x370>
 800449c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044a0:	4aa4      	ldr	r2, [pc, #656]	; (8004734 <pidInitConfig+0x360>)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80044ac:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	dd92      	ble.n	80043e2 <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 80044bc:	4b9d      	ldr	r3, [pc, #628]	; (8004734 <pidInitConfig+0x360>)
 80044be:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80044c2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80044c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ca:	4b9a      	ldr	r3, [pc, #616]	; (8004734 <pidInitConfig+0x360>)
 80044cc:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e9b      	ldrb	r3, [r3, #26]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044dc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80044e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044e4:	4b93      	ldr	r3, [pc, #588]	; (8004734 <pidInitConfig+0x360>)
 80044e6:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7edb      	ldrb	r3, [r3, #27]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80044fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044fe:	4b8d      	ldr	r3, [pc, #564]	; (8004734 <pidInitConfig+0x360>)
 8004500:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7f1b      	ldrb	r3, [r3, #28]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004510:	4b88      	ldr	r3, [pc, #544]	; (8004734 <pidInitConfig+0x360>)
 8004512:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800451c:	4b85      	ldr	r3, [pc, #532]	; (8004734 <pidInitConfig+0x360>)
 800451e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004528:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 800452c:	ee07 3a90 	vmov	s15, r3
 8004530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004534:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004748 <pidInitConfig+0x374>
 8004538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800453c:	4b7d      	ldr	r3, [pc, #500]	; (8004734 <pidInitConfig+0x360>)
 800453e:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004548:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004554:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800474c <pidInitConfig+0x378>
 8004558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800455c:	4b75      	ldr	r3, [pc, #468]	; (8004734 <pidInitConfig+0x360>)
 800455e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004566:	461a      	mov	r2, r3
 8004568:	2364      	movs	r3, #100	; 0x64
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004576:	4b6f      	ldr	r3, [pc, #444]	; (8004734 <pidInitConfig+0x360>)
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004580:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <pidInitConfig+0x360>)
 8004582:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <pidInitConfig+0x360>)
 8004588:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800458c:	4a69      	ldr	r2, [pc, #420]	; (8004734 <pidInitConfig+0x360>)
 800458e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004596:	461a      	mov	r2, r3
 8004598:	2364      	movs	r3, #100	; 0x64
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045a6:	4b63      	ldr	r3, [pc, #396]	; (8004734 <pidInitConfig+0x360>)
 80045a8:	edd3 7a00 	vldr	s15, [r3]
 80045ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b0:	4b60      	ldr	r3, [pc, #384]	; (8004734 <pidInitConfig+0x360>)
 80045b2:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <pidInitConfig+0x360>)
 80045b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80045bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045c6:	2b63      	cmp	r3, #99	; 0x63
 80045c8:	d819      	bhi.n	80045fe <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045d8:	eddf 6a59 	vldr	s13, [pc, #356]	; 8004740 <pidInitConfig+0x36c>
 80045dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045e0:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 80045e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f8:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <pidInitConfig+0x360>)
 80045fa:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004602:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <pidInitConfig+0x360>)
 8004604:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800460e:	461a      	mov	r2, r3
 8004610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	4a46      	ldr	r2, [pc, #280]	; (8004734 <pidInitConfig+0x360>)
 800461a:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004624:	461a      	mov	r2, r3
 8004626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	4a41      	ldr	r2, [pc, #260]	; (8004734 <pidInitConfig+0x360>)
 8004630:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800463a:	461a      	mov	r2, r3
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	461a      	mov	r2, r3
 8004646:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <pidInitConfig+0x360>)
 8004648:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <pidInitConfig+0x360>)
 800465c:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466c:	4b31      	ldr	r3, [pc, #196]	; (8004734 <pidInitConfig+0x360>)
 800466e:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <pidInitConfig+0x360>)
 8004680:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	ee07 3a90 	vmov	s15, r3
 800468c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <pidInitConfig+0x360>)
 8004692:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	4b23      	ldr	r3, [pc, #140]	; (8004734 <pidInitConfig+0x360>)
 80046a6:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <pidInitConfig+0x360>)
 80046ba:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <pidInitConfig+0x360>)
 80046c6:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80046d0:	4b18      	ldr	r3, [pc, #96]	; (8004734 <pidInitConfig+0x360>)
 80046d2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 80046d6:	4b17      	ldr	r3, [pc, #92]	; (8004734 <pidInitConfig+0x360>)
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <pidInitConfig+0x360>)
 80046e2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <pidInitConfig+0x360>)
 80046ec:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 80046f0:	4b10      	ldr	r3, [pc, #64]	; (8004734 <pidInitConfig+0x360>)
 80046f2:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046fe:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004750 <pidInitConfig+0x37c>
 8004702:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004706:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800470a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800470e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004712:	4b08      	ldr	r3, [pc, #32]	; (8004734 <pidInitConfig+0x360>)
 8004714:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <pidInitConfig+0x360>)
 8004720:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	3d0330d7 	.word	0x3d0330d7
 8004734:	2000105c 	.word	0x2000105c
 8004738:	3e7a3f03 	.word	0x3e7a3f03
 800473c:	3a0aac97 	.word	0x3a0aac97
 8004740:	42c80000 	.word	0x42c80000
 8004744:	3c615875 	.word	0x3c615875
 8004748:	3fe66666 	.word	0x3fe66666
 800474c:	3c23d70a 	.word	0x3c23d70a
 8004750:	447a0000 	.word	0x447a0000

08004754 <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 800475c:	2294      	movs	r2, #148	; 0x94
 800475e:	4907      	ldr	r1, [pc, #28]	; (800477c <resetPidProfile+0x28>)
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f00e f827 	bl	80127b4 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	221e      	movs	r2, #30
 800476a:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	741a      	strb	r2, [r3, #16]
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	08013004 	.word	0x08013004

08004780 <pidInit>:

void pidInit(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 8004786:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <pidInit+0xb8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ffe2 	bl	8004754 <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 8004790:	4b2a      	ldr	r3, [pc, #168]	; (800483c <pidInit+0xbc>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fb5b 	bl	8003e50 <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 800479a:	4b27      	ldr	r3, [pc, #156]	; (8004838 <pidInit+0xb8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fb80 	bl	8003ea4 <pidInitFilters>
    pidInitConfig(currentPidProfile);
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <pidInit+0xb8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fe13 	bl	80043d4 <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	e038      	b.n	8004826 <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 80047b4:	4922      	ldr	r1, [pc, #136]	; (8004840 <pidInit+0xc0>)
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 80047c8:	491d      	ldr	r1, [pc, #116]	; (8004840 <pidInit+0xc0>)
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	3304      	adds	r3, #4
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 80047de:	4918      	ldr	r1, [pc, #96]	; (8004840 <pidInit+0xc0>)
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3308      	adds	r3, #8
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 80047f4:	4912      	ldr	r1, [pc, #72]	; (8004840 <pidInit+0xc0>)
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	330c      	adds	r3, #12
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 800480a:	490d      	ldr	r1, [pc, #52]	; (8004840 <pidInit+0xc0>)
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3310      	adds	r3, #16
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3301      	adds	r3, #1
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b02      	cmp	r3, #2
 800482a:	ddc3      	ble.n	80047b4 <pidInit+0x34>
    }
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000003c 	.word	0x2000003c
 800483c:	200004a4 	.word	0x200004a4
 8004840:	200012b8 	.word	0x200012b8

08004844 <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 800484a:	4b35      	ldr	r3, [pc, #212]	; (8004920 <rotateItermAndAxisError+0xdc>)
 800484c:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004850:	2b00      	cmp	r3, #0
 8004852:	d060      	beq.n	8004916 <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 8004854:	4b32      	ldr	r3, [pc, #200]	; (8004920 <rotateItermAndAxisError+0xdc>)
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004924 <rotateItermAndAxisError+0xe0>
 800485e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004862:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8004866:	2300      	movs	r3, #0
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	e015      	b.n	8004898 <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 800486c:	4a2e      	ldr	r2, [pc, #184]	; (8004928 <rotateItermAndAxisError+0xe4>)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	3306      	adds	r3, #6
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	ed93 7a00 	vldr	s14, [r3]
 800487c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	3328      	adds	r3, #40	; 0x28
 800488a:	443b      	add	r3, r7
 800488c:	3b1c      	subs	r3, #28
 800488e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	3301      	adds	r3, #1
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	2b02      	cmp	r3, #2
 800489c:	dde6      	ble.n	800486c <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <rotateItermAndAxisError+0xdc>)
 80048a0:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d036      	beq.n	8004916 <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80048a8:	2300      	movs	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
 80048ac:	e011      	b.n	80048d2 <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 80048ae:	491f      	ldr	r1, [pc, #124]	; (800492c <rotateItermAndAxisError+0xe8>)
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3304      	adds	r3, #4
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	3328      	adds	r3, #40	; 0x28
 80048c6:	443b      	add	r3, r7
 80048c8:	3b28      	subs	r3, #40	; 0x28
 80048ca:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	3301      	adds	r3, #1
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	ddea      	ble.n	80048ae <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 80048d8:	f107 020c 	add.w	r2, r7, #12
 80048dc:	463b      	mov	r3, r7
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fc ff11 	bl	8001708 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e011      	b.n	8004910 <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3328      	adds	r3, #40	; 0x28
 80048f2:	443b      	add	r3, r7
 80048f4:	3b28      	subs	r3, #40	; 0x28
 80048f6:	6819      	ldr	r1, [r3, #0]
 80048f8:	480c      	ldr	r0, [pc, #48]	; (800492c <rotateItermAndAxisError+0xe8>)
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4403      	add	r3, r0
 8004906:	3304      	adds	r3, #4
 8004908:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3301      	adds	r3, #1
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b02      	cmp	r3, #2
 8004914:	ddea      	ble.n	80048ec <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 8004916:	bf00      	nop
 8004918:	3728      	adds	r7, #40	; 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	2000105c 	.word	0x2000105c
 8004924:	3c8efa35 	.word	0x3c8efa35
 8004928:	200004a4 	.word	0x200004a4
 800492c:	200012b8 	.word	0x200012b8

08004930 <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 8004938:	4a06      	ldr	r2, [pc, #24]	; (8004954 <getSetpointRate+0x24>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	ee07 3a90 	vmov	s15, r3
}
 8004946:	eeb0 0a67 	vmov.f32	s0, s15
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	200012ac 	.word	0x200012ac

08004958 <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 8004964:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <accelerationLimit+0xb4>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	edd3 7a00 	vldr	s15, [r3]
 8004970:	ed97 7a00 	vldr	s14, [r7]
 8004974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004978:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 800497c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004980:	eeb0 7ae7 	vabs.f32	s14, s15
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <accelerationLimit+0xb8>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3382      	adds	r3, #130	; 0x82
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	edd3 7a00 	vldr	s15, [r3]
 8004992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	dd27      	ble.n	80049ec <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 800499c:	edd7 7a03 	vldr	s15, [r7, #12]
 80049a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a8:	dd0f      	ble.n	80049ca <accelerationLimit+0x72>
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <accelerationLimit+0xb4>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	ed93 7a00 	vldr	s14, [r3]
 80049b6:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <accelerationLimit+0xb8>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3382      	adds	r3, #130	; 0x82
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049c8:	e00e      	b.n	80049e8 <accelerationLimit+0x90>
 80049ca:	4a10      	ldr	r2, [pc, #64]	; (8004a0c <accelerationLimit+0xb4>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	ed93 7a00 	vldr	s14, [r3]
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <accelerationLimit+0xb8>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3382      	adds	r3, #130	; 0x82
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	edd3 7a00 	vldr	s15, [r3]
 80049e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e8:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 80049ec:	4a07      	ldr	r2, [pc, #28]	; (8004a0c <accelerationLimit+0xb4>)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	ee07 3a90 	vmov	s15, r3
}
 80049fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	200013a0 	.word	0x200013a0
 8004a10:	2000105c 	.word	0x2000105c

08004a14 <pidResetIterm>:

static void pidResetIterm(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	e00d      	b.n	8004a3c <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8004a20:	490b      	ldr	r1, [pc, #44]	; (8004a50 <pidResetIterm+0x3c>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3304      	adds	r3, #4
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	ddee      	ble.n	8004a20 <pidResetIterm+0xc>
    }
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	200012b8 	.word	0x200012b8

08004a54 <pidController>:

void pidController(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b09c      	sub	sp, #112	; 0x70
 8004a58:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 8004a5a:	4bbd      	ldr	r3, [pc, #756]	; (8004d50 <pidController+0x2fc>)
 8004a5c:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8004a60:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 8004a68:	4bb9      	ldr	r3, [pc, #740]	; (8004d50 <pidController+0x2fc>)
 8004a6a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d140      	bne.n	8004af4 <pidController+0xa0>
 8004a72:	4bb7      	ldr	r3, [pc, #732]	; (8004d50 <pidController+0x2fc>)
 8004a74:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d03b      	beq.n	8004af4 <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 8004a7c:	4bb4      	ldr	r3, [pc, #720]	; (8004d50 <pidController+0x2fc>)
 8004a7e:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8004a82:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004d54 <pidController+0x300>
 8004a86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a8a:	4bb1      	ldr	r3, [pc, #708]	; (8004d50 <pidController+0x2fc>)
 8004a8c:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9c:	4bac      	ldr	r3, [pc, #688]	; (8004d50 <pidController+0x2fc>)
 8004a9e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 8004aa2:	4bab      	ldr	r3, [pc, #684]	; (8004d50 <pidController+0x2fc>)
 8004aa4:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 8004aa8:	4ba9      	ldr	r3, [pc, #676]	; (8004d50 <pidController+0x2fc>)
 8004aaa:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	4ba5      	ldr	r3, [pc, #660]	; (8004d50 <pidController+0x2fc>)
 8004abc:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 8004ac0:	4ba3      	ldr	r3, [pc, #652]	; (8004d50 <pidController+0x2fc>)
 8004ac2:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 8004ac6:	4ba2      	ldr	r3, [pc, #648]	; (8004d50 <pidController+0x2fc>)
 8004ac8:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004acc:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8004d58 <pidController+0x304>
 8004ad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad8:	4b9d      	ldr	r3, [pc, #628]	; (8004d50 <pidController+0x2fc>)
 8004ada:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 8004ade:	4b9c      	ldr	r3, [pc, #624]	; (8004d50 <pidController+0x2fc>)
 8004ae0:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004ae4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8004d5c <pidController+0x308>
 8004ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aec:	4b98      	ldr	r3, [pc, #608]	; (8004d50 <pidController+0x2fc>)
 8004aee:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 8004af2:	e004      	b.n	8004afe <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 8004af4:	4b96      	ldr	r3, [pc, #600]	; (8004d50 <pidController+0x2fc>)
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 8004afe:	4b94      	ldr	r3, [pc, #592]	; (8004d50 <pidController+0x2fc>)
 8004b00:	ed93 7a00 	vldr	s14, [r3]
 8004b04:	4b92      	ldr	r3, [pc, #584]	; (8004d50 <pidController+0x2fc>)
 8004b06:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8004b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8004d60 <pidController+0x30c>
 8004b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b16:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 8004b1a:	4b8d      	ldr	r3, [pc, #564]	; (8004d50 <pidController+0x2fc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8004b20:	4b8b      	ldr	r3, [pc, #556]	; (8004d50 <pidController+0x2fc>)
 8004b22:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8004b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b32:	dd1b      	ble.n	8004b6c <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 8004b34:	4b8b      	ldr	r3, [pc, #556]	; (8004d64 <pidController+0x310>)
 8004b36:	edd3 7a00 	vldr	s15, [r3]
 8004b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b42:	4b83      	ldr	r3, [pc, #524]	; (8004d50 <pidController+0x2fc>)
 8004b44:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8004b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004b50:	eddf 0a85 	vldr	s1, [pc, #532]	; 8004d68 <pidController+0x314>
 8004b54:	eeb0 0a67 	vmov.f32	s0, s15
 8004b58:	f7ff f93c 	bl	8003dd4 <constrainf>
 8004b5c:	eeb0 7a40 	vmov.f32	s14, s0
 8004b60:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b68:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b70:	e06e      	b.n	8004c50 <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 8004b72:	4a7e      	ldr	r2, [pc, #504]	; (8004d6c <pidController+0x318>)
 8004b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b76:	3306      	adds	r3, #6
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	3370      	adds	r3, #112	; 0x70
 8004b86:	443b      	add	r3, r7
 8004b88:	3b6c      	subs	r3, #108	; 0x6c
 8004b8a:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 8004b8c:	4b70      	ldr	r3, [pc, #448]	; (8004d50 <pidController+0x2fc>)
 8004b8e:	6999      	ldr	r1, [r3, #24]
 8004b90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	3318      	adds	r3, #24
 8004b9c:	4a6c      	ldr	r2, [pc, #432]	; (8004d50 <pidController+0x2fc>)
 8004b9e:	4413      	add	r3, r2
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	3370      	adds	r3, #112	; 0x70
 8004ba8:	443b      	add	r3, r7
 8004baa:	3b6c      	subs	r3, #108	; 0x6c
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4788      	blx	r1
 8004bb8:	eef0 7a40 	vmov.f32	s15, s0
 8004bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3370      	adds	r3, #112	; 0x70
 8004bc2:	443b      	add	r3, r7
 8004bc4:	3b6c      	subs	r3, #108	; 0x6c
 8004bc6:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <pidController+0x2fc>)
 8004bcc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004bd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	3398      	adds	r3, #152	; 0x98
 8004bdc:	4a5c      	ldr	r2, [pc, #368]	; (8004d50 <pidController+0x2fc>)
 8004bde:	441a      	add	r2, r3
 8004be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3370      	adds	r3, #112	; 0x70
 8004be6:	443b      	add	r3, r7
 8004be8:	3b6c      	subs	r3, #108	; 0x6c
 8004bea:	edd3 7a00 	vldr	s15, [r3]
 8004bee:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4788      	blx	r1
 8004bf6:	eef0 7a40 	vmov.f32	s15, s0
 8004bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	3370      	adds	r3, #112	; 0x70
 8004c00:	443b      	add	r3, r7
 8004c02:	3b6c      	subs	r3, #108	; 0x6c
 8004c04:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <pidController+0x2fc>)
 8004c0a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8004c0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004c1c:	4a4c      	ldr	r2, [pc, #304]	; (8004d50 <pidController+0x2fc>)
 8004c1e:	4413      	add	r3, r2
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	3370      	adds	r3, #112	; 0x70
 8004c28:	443b      	add	r3, r7
 8004c2a:	3b6c      	subs	r3, #108	; 0x6c
 8004c2c:	edd3 7a00 	vldr	s15, [r3]
 8004c30:	eeb0 0a67 	vmov.f32	s0, s15
 8004c34:	4610      	mov	r0, r2
 8004c36:	4788      	blx	r1
 8004c38:	eef0 7a40 	vmov.f32	s15, s0
 8004c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	3370      	adds	r3, #112	; 0x70
 8004c42:	443b      	add	r3, r7
 8004c44:	3b6c      	subs	r3, #108	; 0x6c
 8004c46:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	dd8d      	ble.n	8004b72 <pidController+0x11e>
    }

    rotateItermAndAxisError();
 8004c56:	f7ff fdf5 	bl	8004844 <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c5e:	e1e4      	b.n	800502a <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 8004c60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c62:	f7ff fe65 	bl	8004930 <getSetpointRate>
 8004c66:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 8004c6a:	4a39      	ldr	r2, [pc, #228]	; (8004d50 <pidController+0x2fc>)
 8004c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c6e:	3382      	adds	r3, #130	; 0x82
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	d006      	beq.n	8004c90 <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 8004c82:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004c86:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004c88:	f7ff fe66 	bl	8004958 <accelerationLimit>
 8004c8c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 8004c90:	4a36      	ldr	r2, [pc, #216]	; (8004d6c <pidController+0x318>)
 8004c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c94:	3306      	adds	r3, #6
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 8004ca0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004ca4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 8004cb0:	492f      	ldr	r1, [pc, #188]	; (8004d70 <pidController+0x31c>)
 8004cb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 8004cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc6:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 8004cc8:	4a21      	ldr	r2, [pc, #132]	; (8004d50 <pidController+0x2fc>)
 8004cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ccc:	331c      	adds	r3, #28
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	4413      	add	r3, r2
 8004cd2:	ed93 7a00 	vldr	s14, [r3]
 8004cd6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004cda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cde:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce6:	4922      	ldr	r1, [pc, #136]	; (8004d70 <pidController+0x31c>)
 8004ce8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 8004cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d11a      	bne.n	8004d34 <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 8004cfe:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <pidController+0x2fc>)
 8004d00:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8004d04:	481a      	ldr	r0, [pc, #104]	; (8004d70 <pidController+0x31c>)
 8004d06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4403      	add	r3, r0
 8004d12:	edd3 7a00 	vldr	s15, [r3]
 8004d16:	eeb0 0a67 	vmov.f32	s0, s15
 8004d1a:	4816      	ldr	r0, [pc, #88]	; (8004d74 <pidController+0x320>)
 8004d1c:	4788      	blx	r1
 8004d1e:	eef0 7a40 	vmov.f32	s15, s0
 8004d22:	4913      	ldr	r1, [pc, #76]	; (8004d70 <pidController+0x31c>)
 8004d24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 8004d34:	4a06      	ldr	r2, [pc, #24]	; (8004d50 <pidController+0x2fc>)
 8004d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d38:	331c      	adds	r3, #28
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	4413      	add	r3, r2
 8004d3e:	3304      	adds	r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 8004d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d016      	beq.n	8004d78 <pidController+0x324>
 8004d4a:	4b01      	ldr	r3, [pc, #4]	; (8004d50 <pidController+0x2fc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	e014      	b.n	8004d7a <pidController+0x326>
 8004d50:	2000105c 	.word	0x2000105c
 8004d54:	3c23d70a 	.word	0x3c23d70a
 8004d58:	3d4ccccd 	.word	0x3d4ccccd
 8004d5c:	3ca3d70a 	.word	0x3ca3d70a
 8004d60:	41acb227 	.word	0x41acb227
 8004d64:	200012f4 	.word	0x200012f4
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	200004a4 	.word	0x200004a4
 8004d70:	200012b8 	.word	0x200012b8
 8004d74:	200011ec 	.word	0x200011ec
 8004d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 8004d7c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004d80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d90:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004d94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004da0:	4baa      	ldr	r3, [pc, #680]	; (800504c <pidController+0x5f8>)
 8004da2:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 8004da6:	eef1 7a67 	vneg.f32	s15, s15
 8004daa:	4ba8      	ldr	r3, [pc, #672]	; (800504c <pidController+0x5f8>)
 8004dac:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 8004db0:	eeb0 1a66 	vmov.f32	s2, s13
 8004db4:	eef0 0a67 	vmov.f32	s1, s15
 8004db8:	eeb0 0a47 	vmov.f32	s0, s14
 8004dbc:	f7ff f80a 	bl	8003dd4 <constrainf>
 8004dc0:	eef0 7a40 	vmov.f32	s15, s0
 8004dc4:	49a2      	ldr	r1, [pc, #648]	; (8005050 <pidController+0x5fc>)
 8004dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 8004dde:	4a9b      	ldr	r2, [pc, #620]	; (800504c <pidController+0x5f8>)
 8004de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de2:	3302      	adds	r3, #2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	3304      	adds	r3, #4
 8004dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dec:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 8004dee:	4a97      	ldr	r2, [pc, #604]	; (800504c <pidController+0x5f8>)
 8004df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004dfa:	edd3 7a00 	vldr	s15, [r3]
 8004dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e06:	dd43      	ble.n	8004e90 <pidController+0x43c>
 8004e08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d13f      	bne.n	8004e90 <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 8004e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	3370      	adds	r3, #112	; 0x70
 8004e16:	443b      	add	r3, r7
 8004e18:	3b6c      	subs	r3, #108	; 0x6c
 8004e1a:	ed93 7a00 	vldr	s14, [r3]
 8004e1e:	4a8d      	ldr	r2, [pc, #564]	; (8005054 <pidController+0x600>)
 8004e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	edd3 7a00 	vldr	s15, [r3]
 8004e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e2e:	eeb1 7a67 	vneg.f32	s14, s15
 8004e32:	4b86      	ldr	r3, [pc, #536]	; (800504c <pidController+0x5f8>)
 8004e34:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 8004e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 8004e40:	4a82      	ldr	r2, [pc, #520]	; (800504c <pidController+0x5f8>)
 8004e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004e4c:	edd3 7a00 	vldr	s15, [r3]
 8004e50:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 8004e5c:	4b7b      	ldr	r3, [pc, #492]	; (800504c <pidController+0x5f8>)
 8004e5e:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 8004e62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	4979      	ldr	r1, [pc, #484]	; (8005050 <pidController+0x5fc>)
 8004e6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3308      	adds	r3, #8
 8004e7a:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 8004e7e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004e82:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8004e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e8a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 8004e8e:	e00a      	b.n	8004ea6 <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 8004e90:	496f      	ldr	r1, [pc, #444]	; (8005050 <pidController+0x5fc>)
 8004e92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 8004ea6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	3370      	adds	r3, #112	; 0x70
 8004eac:	443b      	add	r3, r7
 8004eae:	3b6c      	subs	r3, #108	; 0x6c
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4968      	ldr	r1, [pc, #416]	; (8005054 <pidController+0x600>)
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 8004ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <pidController+0x480>
 8004ec4:	4a61      	ldr	r2, [pc, #388]	; (800504c <pidController+0x5f8>)
 8004ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	e001      	b.n	8004ed8 <pidController+0x484>
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 8004eda:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee6:	dd17      	ble.n	8004f18 <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 8004ee8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004eec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ef4:	4b55      	ldr	r3, [pc, #340]	; (800504c <pidController+0x5f8>)
 8004ef6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 8004f02:	4953      	ldr	r1, [pc, #332]	; (8005050 <pidController+0x5fc>)
 8004f04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	330c      	adds	r3, #12
 8004f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e00a      	b.n	8004f2e <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 8004f18:	494d      	ldr	r1, [pc, #308]	; (8005050 <pidController+0x5fc>)
 8004f1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	330c      	adds	r3, #12
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 8004f2e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004f32:	eeb0 7ae7 	vabs.f32	s14, s15
 8004f36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005058 <pidController+0x604>
 8004f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f3e:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004f4a:	61bb      	str	r3, [r7, #24]
 8004f4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f50:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	dd01      	ble.n	8004f62 <pidController+0x50e>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	e000      	b.n	8004f64 <pidController+0x510>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <pidController+0x5f8>)
 8004f68:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 8004f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f7c:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 8004f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d015      	beq.n	8004fb2 <pidController+0x55e>
            pidData[axis].P *= agBoost;
 8004f86:	4932      	ldr	r1, [pc, #200]	; (8005050 <pidController+0x5fc>)
 8004f88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	ed93 7a00 	vldr	s14, [r3]
 8004f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa0:	492b      	ldr	r1, [pc, #172]	; (8005050 <pidController+0x5fc>)
 8004fa2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 8004fb2:	4927      	ldr	r1, [pc, #156]	; (8005050 <pidController+0x5fc>)
 8004fb4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	ed93 7a00 	vldr	s14, [r3]
 8004fc4:	4922      	ldr	r1, [pc, #136]	; (8005050 <pidController+0x5fc>)
 8004fc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	edd3 7a00 	vldr	s15, [r3]
 8004fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fdc:	491c      	ldr	r1, [pc, #112]	; (8005050 <pidController+0x5fc>)
 8004fde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3308      	adds	r3, #8
 8004fec:	edd3 7a00 	vldr	s15, [r3]
 8004ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ff4:	4916      	ldr	r1, [pc, #88]	; (8005050 <pidController+0x5fc>)
 8004ff6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	330c      	adds	r3, #12
 8005004:	edd3 7a00 	vldr	s15, [r3]
 8005008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500c:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 8005010:	490f      	ldr	r1, [pc, #60]	; (8005050 <pidController+0x5fc>)
 8005012:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3310      	adds	r3, #16
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005026:	3301      	adds	r3, #1
 8005028:	667b      	str	r3, [r7, #100]	; 0x64
 800502a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800502c:	2b02      	cmp	r3, #2
 800502e:	f77f ae17 	ble.w	8004c60 <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <pidController+0x5f8>)
 8005034:	7a1b      	ldrb	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <pidController+0x5f0>
 800503a:	f7fd f9cf 	bl	80023dc <gyroOverflowDetected>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d048      	beq.n	80050d6 <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005044:	2300      	movs	r3, #0
 8005046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005048:	e041      	b.n	80050ce <pidController+0x67a>
 800504a:	bf00      	nop
 800504c:	2000105c 	.word	0x2000105c
 8005050:	200012b8 	.word	0x200012b8
 8005054:	200013ac 	.word	0x200013ac
 8005058:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 800505c:	4924      	ldr	r1, [pc, #144]	; (80050f0 <pidController+0x69c>)
 800505e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 8005070:	491f      	ldr	r1, [pc, #124]	; (80050f0 <pidController+0x69c>)
 8005072:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3304      	adds	r3, #4
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 8005086:	491a      	ldr	r1, [pc, #104]	; (80050f0 <pidController+0x69c>)
 8005088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3308      	adds	r3, #8
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 800509c:	4914      	ldr	r1, [pc, #80]	; (80050f0 <pidController+0x69c>)
 800509e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	330c      	adds	r3, #12
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 80050b2:	490f      	ldr	r1, [pc, #60]	; (80050f0 <pidController+0x69c>)
 80050b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3310      	adds	r3, #16
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80050c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ca:	3301      	adds	r3, #1
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	ddc3      	ble.n	800505c <pidController+0x608>
 80050d4:	e007      	b.n	80050e6 <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 80050d6:	4b07      	ldr	r3, [pc, #28]	; (80050f4 <pidController+0x6a0>)
 80050d8:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <pidController+0x692>
        pidResetIterm();
 80050e0:	f7ff fc98 	bl	8004a14 <pidResetIterm>
    }
}
 80050e4:	e7ff      	b.n	80050e6 <pidController+0x692>
 80050e6:	bf00      	nop
 80050e8:	3770      	adds	r7, #112	; 0x70
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200012b8 	.word	0x200012b8
 80050f4:	2000105c 	.word	0x2000105c

080050f8 <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <pidSetItermAccelerator+0x20>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000105c 	.word	0x2000105c

0800511c <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	4a35      	ldr	r2, [pc, #212]	; (8005200 <checkForThrottleErrorResetState+0xe4>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	099b      	lsrs	r3, r3, #6
 8005130:	b29b      	uxth	r3, r3
 8005132:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 8005134:	2264      	movs	r2, #100	; 0x64
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	fb92 f3f3 	sdiv	r3, r2, r3
 800513c:	2214      	movs	r2, #20
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fe2e 	bl	8003da2 <constrain>
 8005146:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8005148:	4b2e      	ldr	r3, [pc, #184]	; (8005204 <checkForThrottleErrorResetState+0xe8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8005154:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <checkForThrottleErrorResetState+0xec>)
 8005156:	edd3 7a03 	vldr	s15, [r3, #12]
 800515a:	4b2c      	ldr	r3, [pc, #176]	; (800520c <checkForThrottleErrorResetState+0xf0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	492a      	ldr	r1, [pc, #168]	; (800520c <checkForThrottleErrorResetState+0xf0>)
 8005162:	600a      	str	r2, [r1, #0]
 8005164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005168:	ee17 2a90 	vmov	r2, s15
 800516c:	b211      	sxth	r1, r2
 800516e:	4a28      	ldr	r2, [pc, #160]	; (8005210 <checkForThrottleErrorResetState+0xf4>)
 8005170:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <checkForThrottleErrorResetState+0xf0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	429a      	cmp	r2, r3
 800517c:	dc02      	bgt.n	8005184 <checkForThrottleErrorResetState+0x68>
        index = 0;
 800517e:	4b23      	ldr	r3, [pc, #140]	; (800520c <checkForThrottleErrorResetState+0xf0>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <checkForThrottleErrorResetState+0xec>)
 8005186:	ed93 7a03 	vldr	s14, [r3, #12]
 800518a:	4b20      	ldr	r3, [pc, #128]	; (800520c <checkForThrottleErrorResetState+0xf0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a20      	ldr	r2, [pc, #128]	; (8005210 <checkForThrottleErrorResetState+0xf4>)
 8005190:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005194:	ee07 3a90 	vmov	s15, r3
 8005198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800519c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051a4:	ee17 3a90 	vmov	r3, s15
 80051a8:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <checkForThrottleErrorResetState+0xe8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d120      	bne.n	80051f8 <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 80051b6:	89bb      	ldrh	r3, [r7, #12]
 80051b8:	817b      	strh	r3, [r7, #10]
 80051ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bfb8      	it	lt
 80051c2:	425b      	neglt	r3, r3
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	dd0f      	ble.n	80051f0 <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <checkForThrottleErrorResetState+0xe8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051de:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005214 <checkForThrottleErrorResetState+0xf8>
 80051e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051e6:	eeb0 0a67 	vmov.f32	s0, s15
 80051ea:	f7ff ff85 	bl	80050f8 <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 80051ee:	e003      	b.n	80051f8 <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 80051f0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005218 <checkForThrottleErrorResetState+0xfc>
 80051f4:	f7ff ff80 	bl	80050f8 <pidSetItermAccelerator>
}
 80051f8:	bf00      	nop
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	10624dd3 	.word	0x10624dd3
 8005204:	2000003c 	.word	0x2000003c
 8005208:	200012f8 	.word	0x200012f8
 800520c:	200013b8 	.word	0x200013b8
 8005210:	200013bc 	.word	0x200013bc
 8005214:	3a83126f 	.word	0x3a83126f
 8005218:	00000000 	.word	0x00000000

0800521c <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	ed87 0a02 	vstr	s0, [r7, #8]
 8005228:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 800522c:	4b40      	ldr	r3, [pc, #256]	; (8005330 <applyActualRates+0x114>)
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	3306      	adds	r3, #6
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	ee07 3a90 	vmov	s15, r3
 800523c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005240:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005334 <applyActualRates+0x118>
 8005244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005248:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 800524c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8005250:	ed97 0a02 	vldr	s0, [r7, #8]
 8005254:	f00d fbe0 	bl	8012a18 <powf>
 8005258:	eeb0 7a40 	vmov.f32	s14, s0
 800525c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005260:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005268:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800526c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005270:	edd7 7a02 	vldr	s15, [r7, #8]
 8005274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800527c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005284:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 8005288:	4b29      	ldr	r3, [pc, #164]	; (8005330 <applyActualRates+0x114>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	3303      	adds	r3, #3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800529c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80052a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052a4:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	4b20      	ldr	r3, [pc, #128]	; (8005330 <applyActualRates+0x114>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	3309      	adds	r3, #9
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80052c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80052cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d0:	edc7 7a06 	vstr	s15, [r7, #24]
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052de:	ed97 7a06 	vldr	s14, [r7, #24]
 80052e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ea:	d505      	bpl.n	80052f8 <applyActualRates+0xdc>
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	ee07 3a90 	vmov	s15, r3
 80052f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f6:	e001      	b.n	80052fc <applyActualRates+0xe0>
 80052f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80052fc:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 8005300:	ed97 7a02 	vldr	s14, [r7, #8]
 8005304:	edd7 7a08 	vldr	s15, [r7, #32]
 8005308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800530c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005310:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800531c:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	ee07 3a90 	vmov	s15, r3
}
 8005326:	eeb0 0a67 	vmov.f32	s0, s15
 800532a:	3728      	adds	r7, #40	; 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	2000004c 	.word	0x2000004c
 8005334:	42c80000 	.word	0x42c80000

08005338 <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8005344:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 800534a:	4b20      	ldr	r3, [pc, #128]	; (80053cc <scaleRawSetpointToFpvCamAngle+0x94>)
 800534c:	ed93 7a00 	vldr	s14, [r3]
 8005350:	edd7 7a01 	vldr	s15, [r7, #4]
 8005354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005358:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <scaleRawSetpointToFpvCamAngle+0x98>)
 800535a:	edd3 6a00 	vldr	s13, [r3]
 800535e:	edd7 7a00 	vldr	s15, [r7]
 8005362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800536a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 80053d4 <scaleRawSetpointToFpvCamAngle+0x9c>
 800536e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80053d8 <scaleRawSetpointToFpvCamAngle+0xa0>
 8005372:	eeb0 0a67 	vmov.f32	s0, s15
 8005376:	f7fe fd2d 	bl	8003dd4 <constrainf>
 800537a:	eef0 7a40 	vmov.f32	s15, s0
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005380:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005384:	4b11      	ldr	r3, [pc, #68]	; (80053cc <scaleRawSetpointToFpvCamAngle+0x94>)
 8005386:	ed93 7a00 	vldr	s14, [r3]
 800538a:	edd7 7a00 	vldr	s15, [r7]
 800538e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005392:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <scaleRawSetpointToFpvCamAngle+0x98>)
 8005394:	edd3 6a00 	vldr	s13, [r3]
 8005398:	edd7 7a01 	vldr	s15, [r7, #4]
 800539c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a4:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80053d4 <scaleRawSetpointToFpvCamAngle+0x9c>
 80053a8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80053d8 <scaleRawSetpointToFpvCamAngle+0xa0>
 80053ac:	eeb0 0a67 	vmov.f32	s0, s15
 80053b0:	f7fe fd10 	bl	8003dd4 <constrainf>
 80053b4:	eef0 7a40 	vmov.f32	s15, s0
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <scaleRawSetpointToFpvCamAngle+0x90>)
 80053ba:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200012ac 	.word	0x200012ac
 80053cc:	20000054 	.word	0x20000054
 80053d0:	200013e4 	.word	0x200013e4
 80053d4:	44f9c000 	.word	0x44f9c000
 80053d8:	c4f9c000 	.word	0xc4f9c000

080053dc <resetYawAxis>:

static void resetYawAxis(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <resetYawAxis+0x20>)
 80053e2:	f04f 0200 	mov.w	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 80053e8:	4b05      	ldr	r3, [pc, #20]	; (8005400 <resetYawAxis+0x24>)
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	200012f8 	.word	0x200012f8
 8005400:	20001350 	.word	0x20001350

08005404 <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <pidIncUpdateCounter+0x38>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <pidIncUpdateCounter+0x3c>)
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	fbb3 f1f2 	udiv	r1, r3, r2
 8005414:	fb01 f202 	mul.w	r2, r1, r2
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <pidIncUpdateCounter+0x38>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <pidIncUpdateCounter+0x38>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	b2da      	uxtb	r2, r3
 800542e:	4b03      	ldr	r3, [pc, #12]	; (800543c <pidIncUpdateCounter+0x38>)
 8005430:	701a      	strb	r2, [r3, #0]
}
 8005432:	bf00      	nop
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	20000fc4 	.word	0x20000fc4
 8005440:	20000000 	.word	0x20000000

08005444 <processRcCommand>:


void processRcCommand(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 800544a:	f7fe fcec 	bl	8003e26 <isUsingSticksForArming>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <processRcCommand+0x28>
 8005454:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <processRcCommand+0x144>)
 8005456:	edd3 7a03 	vldr	s15, [r3, #12]
 800545a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800558c <processRcCommand+0x148>
 800545e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d801      	bhi.n	800546c <processRcCommand+0x28>
        resetYawAxis();
 8005468:	f7ff ffb8 	bl	80053dc <resetYawAxis>
    }

    if (isRxDataNew) {
 800546c:	4b48      	ldr	r3, [pc, #288]	; (8005590 <processRcCommand+0x14c>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <processRcCommand+0x36>
        newRxDataForFF = true;
 8005474:	4b47      	ldr	r3, [pc, #284]	; (8005594 <processRcCommand+0x150>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 800547a:	4b45      	ldr	r3, [pc, #276]	; (8005590 <processRcCommand+0x14c>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <processRcCommand+0x52>
 8005482:	f7fe fcd9 	bl	8003e38 <pidAntiGravityEnabled>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 800548c:	4b42      	ldr	r3, [pc, #264]	; (8005598 <processRcCommand+0x154>)
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff fe43 	bl	800511c <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 8005496:	4b3e      	ldr	r3, [pc, #248]	; (8005590 <processRcCommand+0x14c>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d06c      	beq.n	8005578 <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e064      	b.n	800556e <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d10d      	bne.n	80054c6 <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 80054aa:	4a3c      	ldr	r2, [pc, #240]	; (800559c <processRcCommand+0x158>)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	edd3 6a00 	vldr	s13, [r3]
 80054b6:	4b3a      	ldr	r3, [pc, #232]	; (80055a0 <processRcCommand+0x15c>)
 80054b8:	ed93 7a00 	vldr	s14, [r3]
 80054bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c0:	edc7 7a02 	vstr	s15, [r7, #8]
 80054c4:	e00c      	b.n	80054e0 <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 80054c6:	4a35      	ldr	r2, [pc, #212]	; (800559c <processRcCommand+0x158>)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	edd3 6a00 	vldr	s13, [r3]
 80054d2:	4b34      	ldr	r3, [pc, #208]	; (80055a4 <processRcCommand+0x160>)
 80054d4:	ed93 7a00 	vldr	s14, [r3]
 80054d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054dc:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 80054e0:	4a31      	ldr	r2, [pc, #196]	; (80055a8 <processRcCommand+0x164>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 80054ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80054f0:	eef0 7ae7 	vabs.f32	s15, s15
 80054f4:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 80054f8:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <processRcCommand+0x168>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4413      	add	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 8005504:	4b2a      	ldr	r3, [pc, #168]	; (80055b0 <processRcCommand+0x16c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	edd7 0a01 	vldr	s1, [r7, #4]
 800550c:	ed97 0a02 	vldr	s0, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	4798      	blx	r3
 8005514:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 8005518:	4b26      	ldr	r3, [pc, #152]	; (80055b4 <processRcCommand+0x170>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3308      	adds	r3, #8
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	885b      	ldrh	r3, [r3, #2]
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800552e:	eef1 7a67 	vneg.f32	s15, s15
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <processRcCommand+0x170>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3308      	adds	r3, #8
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	4413      	add	r3, r2
 800553e:	885b      	ldrh	r3, [r3, #2]
 8005540:	ee07 3a10 	vmov	s14, r3
 8005544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005548:	eeb0 1a47 	vmov.f32	s2, s14
 800554c:	eef0 0a67 	vmov.f32	s1, s15
 8005550:	ed97 0a00 	vldr	s0, [r7]
 8005554:	f7fe fc3e 	bl	8003dd4 <constrainf>
 8005558:	eef0 7a40 	vmov.f32	s15, s0
 800555c:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <processRcCommand+0x174>)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b02      	cmp	r3, #2
 8005572:	dd97      	ble.n	80054a4 <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 8005574:	f7ff fee0 	bl	8005338 <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <processRcCommand+0x14c>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20001308 	.word	0x20001308
 800558c:	44834000 	.word	0x44834000
 8005590:	20001374 	.word	0x20001374
 8005594:	20001375 	.word	0x20001375
 8005598:	20000048 	.word	0x20000048
 800559c:	200012f8 	.word	0x200012f8
 80055a0:	20000044 	.word	0x20000044
 80055a4:	20000040 	.word	0x20000040
 80055a8:	2000135c 	.word	0x2000135c
 80055ac:	20001368 	.word	0x20001368
 80055b0:	20000050 	.word	0x20000050
 80055b4:	2000004c 	.word	0x2000004c
 80055b8:	200012ac 	.word	0x200012ac

080055bc <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055cc:	ee07 3a90 	vmov	s15, r3
 80055d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80055d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005640 <buildRotationMatrixFromAlignment+0x84>
 80055e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055e4:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055f6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80055fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055fe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005640 <buildRotationMatrixFromAlignment+0x84>
 8005602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005606:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005618:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800561c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005620:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005640 <buildRotationMatrixFromAlignment+0x84>
 8005624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005628:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fc f8d2 	bl	80017dc <buildRotationMatrix>
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	3c8efa35 	.word	0x3c8efa35

08005644 <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	2b09      	cmp	r3, #9
 8005654:	d03f      	beq.n	80056d6 <buildAlignmentFromStandardAlignment+0x92>
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d03c      	beq.n	80056d6 <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	3b01      	subs	r3, #1
 8005660:	b2db      	uxtb	r3, r3
 8005662:	b25b      	sxtb	r3, r3
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	b25a      	sxtb	r2, r3
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	3b01      	subs	r3, #1
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	b25b      	sxtb	r3, r3
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	b25b      	sxtb	r3, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	b25b      	sxtb	r3, r3
 800567c:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 800567e:	2206      	movs	r2, #6
 8005680:	2100      	movs	r1, #0
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f00d f8a4 	bl	80127d0 <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e01f      	b.n	80056ce <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 800568e:	7afa      	ldrb	r2, [r7, #11]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f1c3 0302 	rsb	r3, r3, #2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	2103      	movs	r1, #3
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f1c3 0302 	rsb	r3, r3, #2
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa42 f303 	asr.w	r3, r2, r3
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	0112      	lsls	r2, r2, #4
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	b29b      	uxth	r3, r3
 80056be:	b219      	sxth	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	dddc      	ble.n	800568e <buildAlignmentFromStandardAlignment+0x4a>
 80056d4:	e000      	b.n	80056d8 <buildAlignmentFromStandardAlignment+0x94>
        return;
 80056d6:	bf00      	nop
    }
}
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	3b02      	subs	r3, #2
 8005702:	2b06      	cmp	r3, #6
 8005704:	d810      	bhi.n	8005728 <alignSensorViaRotation+0x48>
 8005706:	a201      	add	r2, pc, #4	; (adr r2, 800570c <alignSensorViaRotation+0x2c>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	08005741 	.word	0x08005741
 8005710:	08005761 	.word	0x08005761
 8005714:	08005789 	.word	0x08005789
 8005718:	080057a9 	.word	0x080057a9
 800571c:	080057d1 	.word	0x080057d1
 8005720:	080057f1 	.word	0x080057f1
 8005724:	08005819 	.word	0x08005819
    default:
    case CW0_DEG:
        dest[X] = x;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3304      	adds	r3, #4
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3308      	adds	r3, #8
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]
        break;
 800573e:	e083      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	edd7 7a05 	vldr	s15, [r7, #20]
 800574e:	eef1 7a67 	vneg.f32	s15, s15
 8005752:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3308      	adds	r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	601a      	str	r2, [r3, #0]
        break;
 800575e:	e073      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 8005760:	edd7 7a05 	vldr	s15, [r7, #20]
 8005764:	eef1 7a67 	vneg.f32	s15, s15
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3304      	adds	r3, #4
 8005772:	edd7 7a04 	vldr	s15, [r7, #16]
 8005776:	eef1 7a67 	vneg.f32	s15, s15
 800577a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3308      	adds	r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]
        break;
 8005786:	e05f      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 8005788:	edd7 7a04 	vldr	s15, [r7, #16]
 800578c:	eef1 7a67 	vneg.f32	s15, s15
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3308      	adds	r3, #8
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]
        break;
 80057a6:	e04f      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 80057a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80057ac:	eef1 7a67 	vneg.f32	s15, s15
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3308      	adds	r3, #8
 80057c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80057c6:	eef1 7a67 	vneg.f32	s15, s15
 80057ca:	edc3 7a00 	vstr	s15, [r3]
        break;
 80057ce:	e03b      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3308      	adds	r3, #8
 80057e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80057e6:	eef1 7a67 	vneg.f32	s15, s15
 80057ea:	edc3 7a00 	vstr	s15, [r3]
        break;
 80057ee:	e02b      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3304      	adds	r3, #4
 80057fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80057fe:	eef1 7a67 	vneg.f32	s15, s15
 8005802:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3308      	adds	r3, #8
 800580a:	edd7 7a03 	vldr	s15, [r7, #12]
 800580e:	eef1 7a67 	vneg.f32	s15, s15
 8005812:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005816:	e017      	b.n	8005848 <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 8005818:	edd7 7a04 	vldr	s15, [r7, #16]
 800581c:	eef1 7a67 	vneg.f32	s15, s15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3304      	adds	r3, #4
 800582a:	edd7 7a05 	vldr	s15, [r7, #20]
 800582e:	eef1 7a67 	vneg.f32	s15, s15
 8005832:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3308      	adds	r3, #8
 800583a:	edd7 7a03 	vldr	s15, [r7, #12]
 800583e:	eef1 7a67 	vneg.f32	s15, s15
 8005842:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005846:	bf00      	nop
    }
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <HAL_MspInit+0x4c>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	4a10      	ldr	r2, [pc, #64]	; (80058a0 <HAL_MspInit+0x4c>)
 8005860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005864:	6413      	str	r3, [r2, #64]	; 0x40
 8005866:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <HAL_MspInit+0x4c>)
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_MspInit+0x4c>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <HAL_MspInit+0x4c>)
 8005878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800587c:	6453      	str	r3, [r2, #68]	; 0x44
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_MspInit+0x4c>)
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800588a:	2200      	movs	r2, #0
 800588c:	210f      	movs	r1, #15
 800588e:	f06f 0001 	mvn.w	r0, #1
 8005892:	f005 fd65 	bl	800b360 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800

080058a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b0ae      	sub	sp, #184	; 0xb8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	2290      	movs	r2, #144	; 0x90
 80058c2:	2100      	movs	r1, #0
 80058c4:	4618      	mov	r0, r3
 80058c6:	f00c ff83 	bl	80127d0 <memset>
  if(huart->Instance==USART3)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a22      	ldr	r2, [pc, #136]	; (8005958 <HAL_UART_MspInit+0xb4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d13c      	bne.n	800594e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80058da:	2300      	movs	r3, #0
 80058dc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058de:	f107 0314 	add.w	r3, r7, #20
 80058e2:	4618      	mov	r0, r3
 80058e4:	f007 fd34 	bl	800d350 <HAL_RCCEx_PeriphCLKConfig>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80058ee:	f7fe fa53 	bl	8003d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <HAL_UART_MspInit+0xb8>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	4a19      	ldr	r2, [pc, #100]	; (800595c <HAL_UART_MspInit+0xb8>)
 80058f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058fc:	6413      	str	r3, [r2, #64]	; 0x40
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <HAL_UART_MspInit+0xb8>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800590a:	4b14      	ldr	r3, [pc, #80]	; (800595c <HAL_UART_MspInit+0xb8>)
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	4a13      	ldr	r2, [pc, #76]	; (800595c <HAL_UART_MspInit+0xb8>)
 8005910:	f043 0308 	orr.w	r3, r3, #8
 8005914:	6313      	str	r3, [r2, #48]	; 0x30
 8005916:	4b11      	ldr	r3, [pc, #68]	; (800595c <HAL_UART_MspInit+0xb8>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592a:	2302      	movs	r3, #2
 800592c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005930:	2300      	movs	r3, #0
 8005932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005936:	2303      	movs	r3, #3
 8005938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800593c:	2307      	movs	r3, #7
 800593e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005942:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005946:	4619      	mov	r1, r3
 8005948:	4805      	ldr	r0, [pc, #20]	; (8005960 <HAL_UART_MspInit+0xbc>)
 800594a:	f005 fd33 	bl	800b3b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800594e:	bf00      	nop
 8005950:	37b8      	adds	r7, #184	; 0xb8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40004800 	.word	0x40004800
 800595c:	40023800 	.word	0x40023800
 8005960:	40020c00 	.word	0x40020c00

08005964 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b0ae      	sub	sp, #184	; 0xb8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800596c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	2290      	movs	r2, #144	; 0x90
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f00c ff23 	bl	80127d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005992:	d159      	bne.n	8005a48 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8005994:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005998:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800599a:	2300      	movs	r3, #0
 800599c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059a0:	f107 0314 	add.w	r3, r7, #20
 80059a4:	4618      	mov	r0, r3
 80059a6:	f007 fcd3 	bl	800d350 <HAL_RCCEx_PeriphCLKConfig>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80059b0:	f7fe f9f2 	bl	8003d98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	4a25      	ldr	r2, [pc, #148]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 80059ba:	f043 0301 	orr.w	r3, r3, #1
 80059be:	6313      	str	r3, [r2, #48]	; 0x30
 80059c0:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80059cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80059d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d4:	2302      	movs	r3, #2
 80059d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e0:	2303      	movs	r3, #3
 80059e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80059e6:	230a      	movs	r3, #10
 80059e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80059f0:	4619      	mov	r1, r3
 80059f2:	4818      	ldr	r0, [pc, #96]	; (8005a54 <HAL_PCD_MspInit+0xf0>)
 80059f4:	f005 fcde 	bl	800b3b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80059f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4810      	ldr	r0, [pc, #64]	; (8005a54 <HAL_PCD_MspInit+0xf0>)
 8005a14:	f005 fcce 	bl	800b3b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005a18:	4b0d      	ldr	r3, [pc, #52]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a22:	6353      	str	r3, [r2, #52]	; 0x34
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	4a06      	ldr	r2, [pc, #24]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 8005a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8005a3c:	4b04      	ldr	r3, [pc, #16]	; (8005a50 <HAL_PCD_MspInit+0xec>)
 8005a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005a48:	bf00      	nop
 8005a4a:	37b8      	adds	r7, #184	; 0xb8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40020000 	.word	0x40020000

08005a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005a68:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HAL_InitTick+0xcc>)
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <HAL_InitTick+0xcc>)
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6453      	str	r3, [r2, #68]	; 0x44
 8005a74:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <HAL_InitTick+0xcc>)
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a80:	f107 020c 	add.w	r2, r7, #12
 8005a84:	f107 0310 	add.w	r3, r7, #16
 8005a88:	4611      	mov	r1, r2
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f007 fc2e 	bl	800d2ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005a90:	f007 fc18 	bl	800d2c4 <HAL_RCC_GetPCLK2Freq>
 8005a94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_InitTick+0xd0>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	0c9b      	lsrs	r3, r3, #18
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005aa4:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <HAL_InitTick+0xd4>)
 8005aa6:	4a22      	ldr	r2, [pc, #136]	; (8005b30 <HAL_InitTick+0xd8>)
 8005aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_InitTick+0xd4>)
 8005aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <HAL_InitTick+0xd4>)
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005ab8:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <HAL_InitTick+0xd4>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_InitTick+0xd4>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <HAL_InitTick+0xd4>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005aca:	4818      	ldr	r0, [pc, #96]	; (8005b2c <HAL_InitTick+0xd4>)
 8005acc:	f008 f868 	bl	800dba0 <HAL_TIM_Base_Init>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d11b      	bne.n	8005b16 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005ade:	4813      	ldr	r0, [pc, #76]	; (8005b2c <HAL_InitTick+0xd4>)
 8005ae0:	f008 f8c0 	bl	800dc64 <HAL_TIM_Base_Start_IT>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d111      	bne.n	8005b16 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005af2:	2019      	movs	r0, #25
 8005af4:	f005 fc50 	bl	800b398 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d808      	bhi.n	8005b10 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005afe:	2200      	movs	r2, #0
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	2019      	movs	r0, #25
 8005b04:	f005 fc2c 	bl	800b360 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b08:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <HAL_InitTick+0xdc>)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	e002      	b.n	8005b16 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3730      	adds	r7, #48	; 0x30
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40023800 	.word	0x40023800
 8005b28:	431bde83 	.word	0x431bde83
 8005b2c:	200013e8 	.word	0x200013e8
 8005b30:	40010000 	.word	0x40010000
 8005b34:	200001b4 	.word	0x200001b4

08005b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b3c:	e7fe      	b.n	8005b3c <NMI_Handler+0x4>

08005b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b42:	e7fe      	b.n	8005b42 <HardFault_Handler+0x4>

08005b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b48:	e7fe      	b.n	8005b48 <MemManage_Handler+0x4>

08005b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b4e:	e7fe      	b.n	8005b4e <BusFault_Handler+0x4>

08005b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b54:	e7fe      	b.n	8005b54 <UsageFault_Handler+0x4>

08005b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b56:	b480      	push	{r7}
 8005b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b68:	4802      	ldr	r0, [pc, #8]	; (8005b74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005b6a:	f008 f8f3 	bl	800dd54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200013e8 	.word	0x200013e8

08005b78 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005b82:	4b19      	ldr	r3, [pc, #100]	; (8005be8 <BSP_I2C1_Init+0x70>)
 8005b84:	4a19      	ldr	r2, [pc, #100]	; (8005bec <BSP_I2C1_Init+0x74>)
 8005b86:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <BSP_I2C1_Init+0x78>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	4918      	ldr	r1, [pc, #96]	; (8005bf0 <BSP_I2C1_Init+0x78>)
 8005b90:	600a      	str	r2, [r1, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d122      	bne.n	8005bdc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8005b96:	4814      	ldr	r0, [pc, #80]	; (8005be8 <BSP_I2C1_Init+0x70>)
 8005b98:	f006 f9e0 	bl	800bf5c <HAL_I2C_GetState>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d11c      	bne.n	8005bdc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8005ba2:	4811      	ldr	r0, [pc, #68]	; (8005be8 <BSP_I2C1_Init+0x70>)
 8005ba4:	f000 f8fe 	bl	8005da4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d116      	bne.n	8005bdc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005bae:	480e      	ldr	r0, [pc, #56]	; (8005be8 <BSP_I2C1_Init+0x70>)
 8005bb0:	f000 f8b4 	bl	8005d1c <MX_I2C1_Init>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005bba:	f06f 0307 	mvn.w	r3, #7
 8005bbe:	607b      	str	r3, [r7, #4]
 8005bc0:	e00c      	b.n	8005bdc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4808      	ldr	r0, [pc, #32]	; (8005be8 <BSP_I2C1_Init+0x70>)
 8005bc6:	f006 fc7d 	bl	800c4c4 <HAL_I2CEx_ConfigAnalogFilter>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005bd0:	f06f 0307 	mvn.w	r3, #7
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	e001      	b.n	8005bdc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005bdc:	687b      	ldr	r3, [r7, #4]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20001434 	.word	0x20001434
 8005bec:	40005400 	.word	0x40005400
 8005bf0:	20001488 	.word	0x20001488

08005bf4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <BSP_I2C1_DeInit+0x48>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d014      	beq.n	8005c30 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8005c06:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <BSP_I2C1_DeInit+0x48>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	4a0b      	ldr	r2, [pc, #44]	; (8005c3c <BSP_I2C1_DeInit+0x48>)
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <BSP_I2C1_DeInit+0x48>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10b      	bne.n	8005c30 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8005c18:	4809      	ldr	r0, [pc, #36]	; (8005c40 <BSP_I2C1_DeInit+0x4c>)
 8005c1a:	f000 f925 	bl	8005e68 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8005c1e:	4808      	ldr	r0, [pc, #32]	; (8005c40 <BSP_I2C1_DeInit+0x4c>)
 8005c20:	f005 ff2a 	bl	800ba78 <HAL_I2C_DeInit>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005c2a:	f06f 0307 	mvn.w	r3, #7
 8005c2e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8005c30:	687b      	ldr	r3, [r7, #4]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20001488 	.word	0x20001488
 8005c40:	20001434 	.word	0x20001434

08005c44 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af04      	add	r7, sp, #16
 8005c4a:	60ba      	str	r2, [r7, #8]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	81fb      	strh	r3, [r7, #14]
 8005c52:	460b      	mov	r3, r1
 8005c54:	81bb      	strh	r3, [r7, #12]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005c5e:	89ba      	ldrh	r2, [r7, #12]
 8005c60:	89f9      	ldrh	r1, [r7, #14]
 8005c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c66:	9302      	str	r3, [sp, #8]
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	2301      	movs	r3, #1
 8005c72:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <BSP_I2C1_WriteReg+0x60>)
 8005c74:	f005 ff44 	bl	800bb00 <HAL_I2C_Mem_Write>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8005c7e:	4809      	ldr	r0, [pc, #36]	; (8005ca4 <BSP_I2C1_WriteReg+0x60>)
 8005c80:	f006 f97a 	bl	800bf78 <HAL_I2C_GetError>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d103      	bne.n	8005c92 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005c8a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e002      	b.n	8005c98 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005c92:	f06f 0303 	mvn.w	r3, #3
 8005c96:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005c98:	697b      	ldr	r3, [r7, #20]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20001434 	.word	0x20001434

08005ca8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af04      	add	r7, sp, #16
 8005cae:	60ba      	str	r2, [r7, #8]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	81fb      	strh	r3, [r7, #14]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	81bb      	strh	r3, [r7, #12]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005cc2:	89ba      	ldrh	r2, [r7, #12]
 8005cc4:	89f9      	ldrh	r1, [r7, #14]
 8005cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	480c      	ldr	r0, [pc, #48]	; (8005d08 <BSP_I2C1_ReadReg+0x60>)
 8005cd8:	f006 f826 	bl	800bd28 <HAL_I2C_Mem_Read>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8005ce2:	4809      	ldr	r0, [pc, #36]	; (8005d08 <BSP_I2C1_ReadReg+0x60>)
 8005ce4:	f006 f948 	bl	800bf78 <HAL_I2C_GetError>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d103      	bne.n	8005cf6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005cee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e002      	b.n	8005cfc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005cf6:	f06f 0303 	mvn.w	r3, #3
 8005cfa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005cfc:	697b      	ldr	r3, [r7, #20]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20001434 	.word	0x20001434

08005d0c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d10:	f005 fa3e 	bl	800b190 <HAL_GetTick>
 8005d14:	4603      	mov	r3, r0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <MX_I2C1_Init+0x80>)
 8005d2c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x20303E5D;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <MX_I2C1_Init+0x84>)
 8005d32:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f005 fdfa 	bl	800b958 <HAL_I2C_Init>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d6e:	2100      	movs	r1, #0
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f006 fba7 	bl	800c4c4 <HAL_I2CEx_ConfigAnalogFilter>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005d80:	2100      	movs	r1, #0
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f006 fbe9 	bl	800c55a <HAL_I2CEx_ConfigDigitalFilter>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40005400 	.word	0x40005400
 8005da0:	20303e5d 	.word	0x20303e5d

08005da4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b0ae      	sub	sp, #184	; 0xb8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dac:	f107 0314 	add.w	r3, r7, #20
 8005db0:	2290      	movs	r2, #144	; 0x90
 8005db2:	2100      	movs	r1, #0
 8005db4:	4618      	mov	r0, r3
 8005db6:	f00c fd0b 	bl	80127d0 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005dba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dbe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f007 fac1 	bl	800d350 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dce:	4b24      	ldr	r3, [pc, #144]	; (8005e60 <I2C1_MspInit+0xbc>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	4a23      	ldr	r2, [pc, #140]	; (8005e60 <I2C1_MspInit+0xbc>)
 8005dd4:	f043 0302 	orr.w	r3, r3, #2
 8005dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dda:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <I2C1_MspInit+0xbc>)
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dee:	2312      	movs	r3, #18
 8005df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005e00:	2304      	movs	r3, #4
 8005e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005e06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4815      	ldr	r0, [pc, #84]	; (8005e64 <I2C1_MspInit+0xc0>)
 8005e0e:	f005 fad1 	bl	800b3b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e1a:	2312      	movs	r3, #18
 8005e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e26:	2303      	movs	r3, #3
 8005e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005e32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e36:	4619      	mov	r1, r3
 8005e38:	480a      	ldr	r0, [pc, #40]	; (8005e64 <I2C1_MspInit+0xc0>)
 8005e3a:	f005 fabb 	bl	800b3b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <I2C1_MspInit+0xbc>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <I2C1_MspInit+0xbc>)
 8005e44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e48:	6413      	str	r3, [r2, #64]	; 0x40
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <I2C1_MspInit+0xbc>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005e56:	bf00      	nop
 8005e58:	37b8      	adds	r7, #184	; 0xb8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40023800 	.word	0x40023800
 8005e64:	40020400 	.word	0x40020400

08005e68 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005e70:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <I2C1_MspDeInit+0x30>)
 8005e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <I2C1_MspDeInit+0x30>)
 8005e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8005e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e80:	4806      	ldr	r0, [pc, #24]	; (8005e9c <I2C1_MspDeInit+0x34>)
 8005e82:	f005 fc43 	bl	800b70c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8005e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e8a:	4804      	ldr	r0, [pc, #16]	; (8005e9c <I2C1_MspDeInit+0x34>)
 8005e8c:	f005 fc3e 	bl	800b70c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	40020400 	.word	0x40020400

08005ea0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <SystemInit+0x20>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	4a05      	ldr	r2, [pc, #20]	; (8005ec0 <SystemInit+0x20>)
 8005eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ec8:	480d      	ldr	r0, [pc, #52]	; (8005f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005eca:	490e      	ldr	r1, [pc, #56]	; (8005f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ecc:	4a0e      	ldr	r2, [pc, #56]	; (8005f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ed0:	e002      	b.n	8005ed8 <LoopCopyDataInit>

08005ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ed6:	3304      	adds	r3, #4

08005ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005edc:	d3f9      	bcc.n	8005ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ede:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005ee0:	4c0b      	ldr	r4, [pc, #44]	; (8005f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ee4:	e001      	b.n	8005eea <LoopFillZerobss>

08005ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ee8:	3204      	adds	r2, #4

08005eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005eec:	d3fb      	bcc.n	8005ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005eee:	f7ff ffd7 	bl	8005ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ef2:	f00c fc39 	bl	8012768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ef6:	f7fd faf9 	bl	80034ec <main>
  bx  lr    
 8005efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005efc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8005f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f04:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8005f08:	08013398 	.word	0x08013398
  ldr r2, =_sbss
 8005f0c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8005f10:	20006020 	.word	0x20006020

08005f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f14:	e7fe      	b.n	8005f14 <ADC_IRQHandler>
	...

08005f18 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8005f28:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e034      	b.n	8005f9a <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	7b1a      	ldrb	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695a      	ldr	r2, [r3, #20]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a0e      	ldr	r2, [pc, #56]	; (8005fa4 <HTS221_RegisterBusIO+0x8c>)
 8005f6c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a0d      	ldr	r2, [pc, #52]	; (8005fa8 <HTS221_RegisterBusIO+0x90>)
 8005f72:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4798      	blx	r3
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	e002      	b.n	8005f9a <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	080065d7 	.word	0x080065d7
 8005fa8:	08006639 	.word	0x08006639

08005fac <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d108      	bne.n	8005fd0 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 faa4 	bl	800650c <HTS221_Initialize>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8005fca:	f04f 33ff 	mov.w	r3, #4294967295
 8005fce:	e004      	b.n	8005fda <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d111      	bne.n	8006018 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f878 	bl	80060ea <HTS221_HUM_Disable>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	e00d      	b.n	8006022 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f95f 	bl	80062ca <HTS221_TEMP_Disable>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d002      	beq.n	8006018 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	e004      	b.n	8006022 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3320      	adds	r3, #32
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fc28 	bl	8006890 <hts221_device_id_get>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8006046:	f04f 33ff 	mov.w	r3, #4294967295
 800604a:	e000      	b.n	800604e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2201      	movs	r2, #1
 8006066:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	4a07      	ldr	r2, [pc, #28]	; (800609c <HTS221_GetCapabilities+0x44>)
 800607e:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	4a06      	ldr	r2, [pc, #24]	; (800609c <HTS221_GetCapabilities+0x44>)
 8006084:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	41480000 	.word	0x41480000

080060a0 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e015      	b.n	80060e2 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3320      	adds	r3, #32
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fbf3 	bl	80068b2 <hts221_power_on_set>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295
 80060d6:	e004      	b.n	80060e2 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e015      	b.n	800612c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3320      	adds	r3, #32
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fbce 	bl	80068b2 <hts221_power_on_set>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	e004      	b.n	800612c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f96f 	bl	8006424 <HTS221_GetOutputDataRate>
 8006146:	4603      	mov	r3, r0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800615c:	ed97 0a00 	vldr	s0, [r7]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f9a3 	bl	80064ac <HTS221_SetOutputDataRate>
 8006166:	4603      	mov	r3, r0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3320      	adds	r3, #32
 800617e:	f107 020c 	add.w	r2, r7, #12
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fc58 	bl	8006a3a <hts221_hum_adc_point_0_get>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8006190:	f04f 33ff 	mov.w	r3, #4294967295
 8006194:	e06b      	b.n	800626e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f103 0220 	add.w	r2, r3, #32
 800619c:	f107 030c 	add.w	r3, r7, #12
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f000 fbaa 	bl	80068fe <hts221_hum_rh_point_0_get>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	e05b      	b.n	800626e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f103 0220 	add.w	r2, r3, #32
 80061bc:	f107 030c 	add.w	r3, r7, #12
 80061c0:	3308      	adds	r3, #8
 80061c2:	4619      	mov	r1, r3
 80061c4:	4610      	mov	r0, r2
 80061c6:	f000 fc5c 	bl	8006a82 <hts221_hum_adc_point_1_get>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	e04b      	b.n	800626e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f103 0220 	add.w	r2, r3, #32
 80061dc:	f107 030c 	add.w	r3, r7, #12
 80061e0:	330c      	adds	r3, #12
 80061e2:	4619      	mov	r1, r3
 80061e4:	4610      	mov	r0, r2
 80061e6:	f000 fba8 	bl	800693a <hts221_hum_rh_point_1_get>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	e03b      	b.n	800626e <HTS221_HUM_GetHumidity+0xfe>
 80061f6:	2300      	movs	r3, #0
 80061f8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3320      	adds	r3, #32
 80061fe:	f107 021c 	add.w	r2, r7, #28
 8006202:	4611      	mov	r1, r2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fafd 	bl	8006804 <hts221_humidity_raw_get>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	e02b      	b.n	800626e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8006216:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006222:	f107 030c 	add.w	r3, r7, #12
 8006226:	eeb0 0a67 	vmov.f32	s0, s15
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f99a 	bl	8006564 <Linear_Interpolation>
 8006230:	eef0 7a40 	vmov.f32	s15, s0
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	edd3 7a00 	vldr	s15, [r3]
 8006240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	d503      	bpl.n	8006252 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	edd3 7a00 	vldr	s15, [r3]
 8006258:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006278 <HTS221_HUM_GetHumidity+0x108>
 800625c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006264:	dd02      	ble.n	800626c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4a04      	ldr	r2, [pc, #16]	; (800627c <HTS221_HUM_GetHumidity+0x10c>)
 800626a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	42c80000 	.word	0x42c80000
 800627c:	42c80000 	.word	0x42c80000

08006280 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e015      	b.n	80062c2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3320      	adds	r3, #32
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fb03 	bl	80068b2 <hts221_power_on_set>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e004      	b.n	80062c2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	e015      	b.n	800630c <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3320      	adds	r3, #32
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fade 	bl	80068b2 <hts221_power_on_set>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	e004      	b.n	800630c <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f87f 	bl	8006424 <HTS221_GetOutputDataRate>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800633c:	ed97 0a00 	vldr	s0, [r7]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8b3 	bl	80064ac <HTS221_SetOutputDataRate>
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3320      	adds	r3, #32
 800635e:	f107 020c 	add.w	r2, r7, #12
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 fbb0 	bl	8006aca <hts221_temp_adc_point_0_get>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8006370:	f04f 33ff 	mov.w	r3, #4294967295
 8006374:	e052      	b.n	800641c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f103 0220 	add.w	r2, r3, #32
 800637c:	f107 030c 	add.w	r3, r7, #12
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f000 faf6 	bl	8006976 <hts221_temp_deg_point_0_get>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	e042      	b.n	800641c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f103 0220 	add.w	r2, r3, #32
 800639c:	f107 030c 	add.w	r3, r7, #12
 80063a0:	3308      	adds	r3, #8
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f000 fbb4 	bl	8006b12 <hts221_temp_adc_point_1_get>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80063b0:	f04f 33ff 	mov.w	r3, #4294967295
 80063b4:	e032      	b.n	800641c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 0220 	add.w	r2, r3, #32
 80063bc:	f107 030c 	add.w	r3, r7, #12
 80063c0:	330c      	adds	r3, #12
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f000 fb07 	bl	80069d8 <hts221_temp_deg_point_1_get>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	e022      	b.n	800641c <HTS221_TEMP_GetTemperature+0xcc>
 80063d6:	2300      	movs	r3, #0
 80063d8:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3320      	adds	r3, #32
 80063de:	f107 021c 	add.w	r2, r7, #28
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fa30 	bl	800684a <hts221_temperature_raw_get>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80063f0:	f04f 33ff 	mov.w	r3, #4294967295
 80063f4:	e012      	b.n	800641c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80063f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	eeb0 0a67 	vmov.f32	s0, s15
 800640a:	4618      	mov	r0, r3
 800640c:	f000 f8aa 	bl	8006564 <Linear_Interpolation>
 8006410:	eef0 7a40 	vmov.f32	s15, s0
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3320      	adds	r3, #32
 8006436:	f107 020b 	add.w	r2, r7, #11
 800643a:	4611      	mov	r1, r2
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f983 	bl	8006748 <hts221_data_rate_get>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	e025      	b.n	800649a <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	2b03      	cmp	r3, #3
 8006452:	d81d      	bhi.n	8006490 <HTS221_GetOutputDataRate+0x6c>
 8006454:	a201      	add	r2, pc, #4	; (adr r2, 800645c <HTS221_GetOutputDataRate+0x38>)
 8006456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645a:	bf00      	nop
 800645c:	0800646d 	.word	0x0800646d
 8006460:	08006477 	.word	0x08006477
 8006464:	08006481 	.word	0x08006481
 8006468:	08006489 	.word	0x08006489
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
      break;
 8006474:	e010      	b.n	8006498 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800647c:	601a      	str	r2, [r3, #0]
      break;
 800647e:	e00b      	b.n	8006498 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4a08      	ldr	r2, [pc, #32]	; (80064a4 <HTS221_GetOutputDataRate+0x80>)
 8006484:	601a      	str	r2, [r3, #0]
      break;
 8006486:	e007      	b.n	8006498 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <HTS221_GetOutputDataRate+0x84>)
 800648c:	601a      	str	r2, [r3, #0]
      break;
 800648e:	e003      	b.n	8006498 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8006490:	f04f 33ff 	mov.w	r3, #4294967295
 8006494:	60fb      	str	r3, [r7, #12]
      break;
 8006496:	bf00      	nop
  }

  return ret;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40e00000 	.word	0x40e00000
 80064a8:	41480000 	.word	0x41480000

080064ac <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80064b8:	edd7 7a00 	vldr	s15, [r7]
 80064bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	d801      	bhi.n	80064ce <HTS221_SetOutputDataRate+0x22>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e00b      	b.n	80064e6 <HTS221_SetOutputDataRate+0x3a>
 80064ce:	edd7 7a00 	vldr	s15, [r7]
 80064d2:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80064d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064de:	d801      	bhi.n	80064e4 <HTS221_SetOutputDataRate+0x38>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e000      	b.n	80064e6 <HTS221_SetOutputDataRate+0x3a>
 80064e4:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80064e6:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3320      	adds	r3, #32
 80064ec:	7bfa      	ldrb	r2, [r7, #15]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 f902 	bl	80066fa <hts221_data_rate_set>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	e000      	b.n	8006504 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3320      	adds	r3, #32
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f9c9 	bl	80068b2 <hts221_power_on_set>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8006526:	f04f 33ff 	mov.w	r3, #4294967295
 800652a:	e017      	b.n	800655c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3320      	adds	r3, #32
 8006530:	2101      	movs	r1, #1
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f940 	bl	80067b8 <hts221_block_data_update_set>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295
 8006542:	e00b      	b.n	800655c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8006544:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ffaf 	bl	80064ac <HTS221_SetOutputDataRate>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	e000      	b.n	800655c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	ed93 7a03 	vldr	s14, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	edd3 7a01 	vldr	s15, [r3, #4]
 800657c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006580:	edd7 7a00 	vldr	s15, [r7]
 8006584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	edd3 6a02 	vldr	s13, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	edd3 7a01 	vldr	s15, [r3, #4]
 8006594:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	ed93 6a00 	vldr	s12, [r3]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80065a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80065a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	edd3 7a00 	vldr	s15, [r3]
 80065bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065c4:	eef0 7a66 	vmov.f32	s15, s13
}
 80065c8:	eeb0 0a67 	vmov.f32	s0, s15
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80065d6:	b590      	push	{r4, r7, lr}
 80065d8:	b087      	sub	sp, #28
 80065da:	af00      	add	r7, sp, #0
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	461a      	mov	r2, r3
 80065e2:	460b      	mov	r3, r1
 80065e4:	72fb      	strb	r3, [r7, #11]
 80065e6:	4613      	mov	r3, r2
 80065e8:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10e      	bne.n	8006614 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	695c      	ldr	r4, [r3, #20]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	7b1b      	ldrb	r3, [r3, #12]
 80065fe:	b298      	uxth	r0, r3
 8006600:	7afb      	ldrb	r3, [r7, #11]
 8006602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006606:	b2db      	uxtb	r3, r3
 8006608:	b299      	uxth	r1, r3
 800660a:	893b      	ldrh	r3, [r7, #8]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	47a0      	blx	r4
 8006610:	4603      	mov	r3, r0
 8006612:	e00d      	b.n	8006630 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	695c      	ldr	r4, [r3, #20]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	7b1b      	ldrb	r3, [r3, #12]
 800661c:	b298      	uxth	r0, r3
 800661e:	7afb      	ldrb	r3, [r7, #11]
 8006620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006624:	b2db      	uxtb	r3, r3
 8006626:	b299      	uxth	r1, r3
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	47a0      	blx	r4
 800662e:	4603      	mov	r3, r0
  }
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}

08006638 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	461a      	mov	r2, r3
 8006644:	460b      	mov	r3, r1
 8006646:	72fb      	strb	r3, [r7, #11]
 8006648:	4613      	mov	r3, r2
 800664a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10e      	bne.n	8006676 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	691c      	ldr	r4, [r3, #16]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	7b1b      	ldrb	r3, [r3, #12]
 8006660:	b298      	uxth	r0, r3
 8006662:	7afb      	ldrb	r3, [r7, #11]
 8006664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006668:	b2db      	uxtb	r3, r3
 800666a:	b299      	uxth	r1, r3
 800666c:	893b      	ldrh	r3, [r7, #8]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	47a0      	blx	r4
 8006672:	4603      	mov	r3, r0
 8006674:	e00d      	b.n	8006692 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	691c      	ldr	r4, [r3, #16]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	7b1b      	ldrb	r3, [r3, #12]
 800667e:	b298      	uxth	r0, r3
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006686:	b2db      	uxtb	r3, r3
 8006688:	b299      	uxth	r1, r3
 800668a:	893b      	ldrh	r3, [r7, #8]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	47a0      	blx	r4
 8006690:	4603      	mov	r3, r0
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}

0800669a <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800669a:	b590      	push	{r4, r7, lr}
 800669c:	b087      	sub	sp, #28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	461a      	mov	r2, r3
 80066a6:	460b      	mov	r3, r1
 80066a8:	72fb      	strb	r3, [r7, #11]
 80066aa:	4613      	mov	r3, r2
 80066ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685c      	ldr	r4, [r3, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68d8      	ldr	r0, [r3, #12]
 80066b6:	893b      	ldrh	r3, [r7, #8]
 80066b8:	7af9      	ldrb	r1, [r7, #11]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	47a0      	blx	r4
 80066be:	6178      	str	r0, [r7, #20]

  return ret;
 80066c0:	697b      	ldr	r3, [r7, #20]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}

080066ca <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80066ca:	b590      	push	{r4, r7, lr}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	461a      	mov	r2, r3
 80066d6:	460b      	mov	r3, r1
 80066d8:	72fb      	strb	r3, [r7, #11]
 80066da:	4613      	mov	r3, r2
 80066dc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681c      	ldr	r4, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68d8      	ldr	r0, [r3, #12]
 80066e6:	893b      	ldrh	r3, [r7, #8]
 80066e8:	7af9      	ldrb	r1, [r7, #11]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	47a0      	blx	r4
 80066ee:	6178      	str	r0, [r7, #20]

  return ret;
 80066f0:	697b      	ldr	r3, [r7, #20]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006706:	f107 0208 	add.w	r2, r7, #8
 800670a:	2301      	movs	r3, #1
 800670c:	2120      	movs	r1, #32
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff ffc3 	bl	800669a <hts221_read_reg>
 8006714:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10f      	bne.n	800673c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	b2da      	uxtb	r2, r3
 8006724:	7a3b      	ldrb	r3, [r7, #8]
 8006726:	f362 0301 	bfi	r3, r2, #0, #2
 800672a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800672c:	f107 0208 	add.w	r2, r7, #8
 8006730:	2301      	movs	r3, #1
 8006732:	2120      	movs	r1, #32
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ffc8 	bl	80066ca <hts221_write_reg>
 800673a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800673c:	68fb      	ldr	r3, [r7, #12]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006752:	f107 0208 	add.w	r2, r7, #8
 8006756:	2301      	movs	r3, #1
 8006758:	2120      	movs	r1, #32
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ff9d 	bl	800669a <hts221_read_reg>
 8006760:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8006762:	7a3b      	ldrb	r3, [r7, #8]
 8006764:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d81a      	bhi.n	80067a4 <hts221_data_rate_get+0x5c>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <hts221_data_rate_get+0x2c>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	0800678d 	.word	0x0800678d
 800677c:	08006795 	.word	0x08006795
 8006780:	0800679d 	.word	0x0800679d
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
      break;
 800678a:	e00f      	b.n	80067ac <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
      break;
 8006792:	e00b      	b.n	80067ac <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2202      	movs	r2, #2
 8006798:	701a      	strb	r2, [r3, #0]
      break;
 800679a:	e007      	b.n	80067ac <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2203      	movs	r2, #3
 80067a0:	701a      	strb	r2, [r3, #0]
      break;
 80067a2:	e003      	b.n	80067ac <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2204      	movs	r2, #4
 80067a8:	701a      	strb	r2, [r3, #0]
      break;
 80067aa:	bf00      	nop
  }

  return ret;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop

080067b8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80067c4:	f107 0208 	add.w	r2, r7, #8
 80067c8:	2301      	movs	r3, #1
 80067ca:	2120      	movs	r1, #32
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff ff64 	bl	800669a <hts221_read_reg>
 80067d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10f      	bne.n	80067fa <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	7a3b      	ldrb	r3, [r7, #8]
 80067e4:	f362 0382 	bfi	r3, r2, #2, #1
 80067e8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80067ea:	f107 0208 	add.w	r2, r7, #8
 80067ee:	2301      	movs	r3, #1
 80067f0:	2120      	movs	r1, #32
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff ff69 	bl	80066ca <hts221_write_reg>
 80067f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067fa:	68fb      	ldr	r3, [r7, #12]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800680e:	f107 0208 	add.w	r2, r7, #8
 8006812:	2302      	movs	r3, #2
 8006814:	2128      	movs	r1, #40	; 0x28
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff3f 	bl	800669a <hts221_read_reg>
 800681c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800681e:	7a7b      	ldrb	r3, [r7, #9]
 8006820:	b21a      	sxth	r2, r3
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800682c:	b29b      	uxth	r3, r3
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	b29a      	uxth	r2, r3
 8006832:	7a3b      	ldrb	r3, [r7, #8]
 8006834:	b29b      	uxth	r3, r3
 8006836:	4413      	add	r3, r2
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21a      	sxth	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8006854:	f107 0208 	add.w	r2, r7, #8
 8006858:	2302      	movs	r3, #2
 800685a:	212a      	movs	r1, #42	; 0x2a
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff ff1c 	bl	800669a <hts221_read_reg>
 8006862:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006864:	7a7b      	ldrb	r3, [r7, #9]
 8006866:	b21a      	sxth	r2, r3
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006872:	b29b      	uxth	r3, r3
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	b29a      	uxth	r2, r3
 8006878:	7a3b      	ldrb	r3, [r7, #8]
 800687a:	b29b      	uxth	r3, r3
 800687c:	4413      	add	r3, r2
 800687e:	b29b      	uxth	r3, r3
 8006880:	b21a      	sxth	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	801a      	strh	r2, [r3, #0]

  return ret;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800689a:	2301      	movs	r3, #1
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	210f      	movs	r1, #15
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fefa 	bl	800669a <hts221_read_reg>
 80068a6:	60f8      	str	r0, [r7, #12]

  return ret;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80068be:	f107 0208 	add.w	r2, r7, #8
 80068c2:	2301      	movs	r3, #1
 80068c4:	2120      	movs	r1, #32
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fee7 	bl	800669a <hts221_read_reg>
 80068cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10f      	bne.n	80068f4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	7a3b      	ldrb	r3, [r7, #8]
 80068de:	f362 13c7 	bfi	r3, r2, #7, #1
 80068e2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	2301      	movs	r3, #1
 80068ea:	2120      	movs	r1, #32
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff feec 	bl	80066ca <hts221_write_reg>
 80068f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8006908:	f107 020b 	add.w	r2, r7, #11
 800690c:	2301      	movs	r3, #1
 800690e:	2130      	movs	r1, #48	; 0x30
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff fec2 	bl	800669a <hts221_read_reg>
 8006916:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006922:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006930:	68fb      	ldr	r3, [r7, #12]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8006944:	f107 020b 	add.w	r2, r7, #11
 8006948:	2301      	movs	r3, #1
 800694a:	2131      	movs	r1, #49	; 0x31
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fea4 	bl	800669a <hts221_read_reg>
 8006952:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800695e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8006980:	f107 020f 	add.w	r2, r7, #15
 8006984:	2301      	movs	r3, #1
 8006986:	2132      	movs	r1, #50	; 0x32
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fe86 	bl	800669a <hts221_read_reg>
 800698e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d11b      	bne.n	80069ce <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006996:	f107 0210 	add.w	r2, r7, #16
 800699a:	2301      	movs	r3, #1
 800699c:	2135      	movs	r1, #53	; 0x35
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff fe7b 	bl	800669a <hts221_read_reg>
 80069a4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80069a6:	7c3b      	ldrb	r3, [r7, #16]
 80069a8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80069b0:	7cfb      	ldrb	r3, [r7, #19]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	7bfa      	ldrb	r2, [r7, #15]
 80069b6:	4413      	add	r3, r2
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80069c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80069ce:	697b      	ldr	r3, [r7, #20]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80069e2:	f107 020f 	add.w	r2, r7, #15
 80069e6:	2301      	movs	r3, #1
 80069e8:	2133      	movs	r1, #51	; 0x33
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fe55 	bl	800669a <hts221_read_reg>
 80069f0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d11b      	bne.n	8006a30 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80069f8:	f107 0210 	add.w	r2, r7, #16
 80069fc:	2301      	movs	r3, #1
 80069fe:	2135      	movs	r1, #53	; 0x35
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fe4a 	bl	800669a <hts221_read_reg>
 8006a06:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8006a08:	7c3b      	ldrb	r3, [r7, #16]
 8006a0a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	7bfa      	ldrb	r2, [r7, #15]
 8006a18:	4413      	add	r3, r2
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a22:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006a26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006a30:	697b      	ldr	r3, [r7, #20]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8006a44:	f107 0208 	add.w	r2, r7, #8
 8006a48:	2302      	movs	r3, #2
 8006a4a:	2136      	movs	r1, #54	; 0x36
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fe24 	bl	800669a <hts221_read_reg>
 8006a52:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006a54:	7a7b      	ldrb	r3, [r7, #9]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	7a3b      	ldrb	r3, [r7, #8]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006a66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006a78:	68fb      	ldr	r3, [r7, #12]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8006a8c:	f107 0208 	add.w	r2, r7, #8
 8006a90:	2302      	movs	r3, #2
 8006a92:	213a      	movs	r1, #58	; 0x3a
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff fe00 	bl	800669a <hts221_read_reg>
 8006a9a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006a9c:	7a7b      	ldrb	r3, [r7, #9]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	7a3b      	ldrb	r3, [r7, #8]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006aae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8006ad4:	f107 0208 	add.w	r2, r7, #8
 8006ad8:	2302      	movs	r3, #2
 8006ada:	213c      	movs	r1, #60	; 0x3c
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fddc 	bl	800669a <hts221_read_reg>
 8006ae2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006ae4:	7a7b      	ldrb	r3, [r7, #9]
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	7a3b      	ldrb	r3, [r7, #8]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4413      	add	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006af6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8006b1c:	f107 0208 	add.w	r2, r7, #8
 8006b20:	2302      	movs	r3, #2
 8006b22:	213e      	movs	r1, #62	; 0x3e
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff fdb8 	bl	800669a <hts221_read_reg>
 8006b2a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006b2c:	7a7b      	ldrb	r3, [r7, #9]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	7a3b      	ldrb	r3, [r7, #8]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	4413      	add	r3, r2
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006b3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d103      	bne.n	8006b78 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8006b70:	f04f 33ff 	mov.w	r3, #4294967295
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	e051      	b.n	8006c1c <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	7b1a      	ldrb	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	; (8006c28 <LPS22HB_RegisterBusIO+0xcc>)
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1c      	ldr	r2, [pc, #112]	; (8006c2c <LPS22HB_RegisterBusIO+0xd0>)
 8006bba:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8006bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e020      	b.n	8006c1c <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8006be6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e016      	b.n	8006c1c <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d112      	bne.n	8006c1c <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006c00:	2301      	movs	r3, #1
 8006c02:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	461a      	mov	r2, r3
 8006c08:	2110      	movs	r1, #16
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f9df 	bl	8006fce <LPS22HB_Write_Reg>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	0800728f 	.word	0x0800728f
 8006c2c:	08007315 	.word	0x08007315

08006c30 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d108      	bne.n	8006c54 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 faca 	bl	80071dc <LPS22HB_Initialize>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8006c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c52:	e004      	b.n	8006c5e <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <LPS22HB_DeInit>:
  * @brief  Deinitialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d111      	bne.n	8006c9c <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f877 	bl	8006d6c <LPS22HB_PRESS_Disable>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	e00d      	b.n	8006ca6 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f918 	bl	8006ec0 <LPS22HB_TEMP_Disable>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8006c96:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9a:	e004      	b.n	8006ca6 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <LPS22HB_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b082      	sub	sp, #8
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3320      	adds	r3, #32
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fcd0 	bl	8007664 <lps22hb_device_id_get>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8006cca:	f04f 33ff 	mov.w	r3, #4294967295
 8006cce:	e000      	b.n	8006cd2 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <LPS22HB_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HB sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	4a05      	ldr	r2, [pc, #20]	; (8006d20 <LPS22HB_GetCapabilities+0x44>)
 8006d0a:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <LPS22HB_GetCapabilities+0x44>)
 8006d10:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	42960000 	.word	0x42960000

08006d24 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e014      	b.n	8006d64 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f103 0220 	add.w	r2, r3, #32
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f000 fbd5 	bl	80074f8 <lps22hb_data_rate_set>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	e004      	b.n	8006d64 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <LPS22HB_PRESS_Disable>:
  * @brief  Disable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	e024      	b.n	8006dcc <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11a      	bne.n	8006dc2 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 0220 	add.w	r2, r3, #32
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3333      	adds	r3, #51	; 0x33
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f000 fbd3 	bl	8007544 <lps22hb_data_rate_get>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8006da4:	f04f 33ff 	mov.w	r3, #4294967295
 8006da8:	e010      	b.n	8006dcc <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3320      	adds	r3, #32
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 fba1 	bl	80074f8 <lps22hb_data_rate_set>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8006dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc0:	e004      	b.n	8006dcc <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <LPS22HB_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f90f 	bl	8007004 <LPS22HB_GetOutputDataRate>
 8006de6:	4603      	mov	r3, r0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <LPS22HB_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d106      	bne.n	8006e14 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006e06:	ed97 0a00 	vldr	s0, [r7]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f94e 	bl	80070ac <LPS22HB_SetOutputDataRate_When_Enabled>
 8006e10:	4603      	mov	r3, r0
 8006e12:	e005      	b.n	8006e20 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006e14:	ed97 0a00 	vldr	s0, [r7]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f99f 	bl	800715c <LPS22HB_SetOutputDataRate_When_Disabled>
 8006e1e:	4603      	mov	r3, r0
  }
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8006e32:	f107 030c 	add.w	r3, r7, #12
 8006e36:	2204      	movs	r2, #4
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f00b fcc8 	bl	80127d0 <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3320      	adds	r3, #32
 8006e44:	f107 020c 	add.w	r2, r7, #12
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fbbe 	bl	80075cc <lps22hb_pressure_raw_get>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8006e56:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5a:	e009      	b.n	8006e70 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 facc 	bl	80073fc <lps22hb_from_lsb_to_hpa>
 8006e64:	eef0 7a40 	vmov.f32	s15, s0
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <LPS22HB_TEMP_Enable>:
  * @brief  Enable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e014      	b.n	8006eb8 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f103 0220 	add.w	r2, r3, #32
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f000 fb2b 	bl	80074f8 <lps22hb_data_rate_set>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8006ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eac:	e004      	b.n	8006eb8 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <LPS22HB_TEMP_Disable>:
  * @brief  Disable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e024      	b.n	8006f20 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11a      	bne.n	8006f16 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f103 0220 	add.w	r2, r3, #32
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	3333      	adds	r3, #51	; 0x33
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f000 fb29 	bl	8007544 <lps22hb_data_rate_get>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	e010      	b.n	8006f20 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3320      	adds	r3, #32
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 faf7 	bl	80074f8 <lps22hb_data_rate_set>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	e004      	b.n	8006f20 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <LPS22HB_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f865 	bl	8007004 <LPS22HB_GetOutputDataRate>
 8006f3a:	4603      	mov	r3, r0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <LPS22HB_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d106      	bne.n	8006f68 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006f5a:	ed97 0a00 	vldr	s0, [r7]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f8a4 	bl	80070ac <LPS22HB_SetOutputDataRate_When_Enabled>
 8006f64:	4603      	mov	r3, r0
 8006f66:	e005      	b.n	8006f74 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006f68:	ed97 0a00 	vldr	s0, [r7]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f8f5 	bl	800715c <LPS22HB_SetOutputDataRate_When_Disabled>
 8006f72:	4603      	mov	r3, r0
  }
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <LPS22HB_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8006f86:	f107 030c 	add.w	r3, r7, #12
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f00b fc1e 	bl	80127d0 <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3320      	adds	r3, #32
 8006f98:	f107 020c 	add.w	r2, r7, #12
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fb3d 	bl	800761e <lps22hb_temperature_raw_get>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	e00a      	b.n	8006fc6 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 8006fb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fa39 	bl	800742c <lps22hb_from_lsb_to_degc>
 8006fba:	eef0 7a40 	vmov.f32	s15, s0
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f103 0020 	add.w	r0, r3, #32
 8006fe4:	1cba      	adds	r2, r7, #2
 8006fe6:	78f9      	ldrb	r1, [r7, #3]
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f000 f9ee 	bl	80073ca <lps22hb_write_reg>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8006ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff8:	e000      	b.n	8006ffc <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <LPS22HB_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3320      	adds	r3, #32
 8007016:	f107 020b 	add.w	r2, r7, #11
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fa91 	bl	8007544 <lps22hb_data_rate_get>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8007028:	f04f 33ff 	mov.w	r3, #4294967295
 800702c:	e031      	b.n	8007092 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	2b05      	cmp	r3, #5
 8007032:	d829      	bhi.n	8007088 <LPS22HB_GetOutputDataRate+0x84>
 8007034:	a201      	add	r2, pc, #4	; (adr r2, 800703c <LPS22HB_GetOutputDataRate+0x38>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	08007055 	.word	0x08007055
 8007040:	0800705f 	.word	0x0800705f
 8007044:	08007069 	.word	0x08007069
 8007048:	08007071 	.word	0x08007071
 800704c:	08007079 	.word	0x08007079
 8007050:	08007081 	.word	0x08007081
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	601a      	str	r2, [r3, #0]
      break;
 800705c:	e018      	b.n	8007090 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007064:	601a      	str	r2, [r3, #0]
      break;
 8007066:	e013      	b.n	8007090 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <LPS22HB_GetOutputDataRate+0x98>)
 800706c:	601a      	str	r2, [r3, #0]
      break;
 800706e:	e00f      	b.n	8007090 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4a0b      	ldr	r2, [pc, #44]	; (80070a0 <LPS22HB_GetOutputDataRate+0x9c>)
 8007074:	601a      	str	r2, [r3, #0]
      break;
 8007076:	e00b      	b.n	8007090 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	4a0a      	ldr	r2, [pc, #40]	; (80070a4 <LPS22HB_GetOutputDataRate+0xa0>)
 800707c:	601a      	str	r2, [r3, #0]
      break;
 800707e:	e007      	b.n	8007090 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <LPS22HB_GetOutputDataRate+0xa4>)
 8007084:	601a      	str	r2, [r3, #0]
      break;
 8007086:	e003      	b.n	8007090 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8007088:	f04f 33ff 	mov.w	r3, #4294967295
 800708c:	60fb      	str	r3, [r7, #12]
      break;
 800708e:	bf00      	nop
  }

  return ret;
 8007090:	68fb      	ldr	r3, [r7, #12]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	41200000 	.word	0x41200000
 80070a0:	41c80000 	.word	0x41c80000
 80070a4:	42480000 	.word	0x42480000
 80070a8:	42960000 	.word	0x42960000

080070ac <LPS22HB_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80070b8:	edd7 7a00 	vldr	s15, [r7]
 80070bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c8:	d801      	bhi.n	80070ce <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e021      	b.n	8007112 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80070ce:	edd7 7a00 	vldr	s15, [r7]
 80070d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80070d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	d801      	bhi.n	80070e4 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e016      	b.n	8007112 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80070e4:	edd7 7a00 	vldr	s15, [r7]
 80070e8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80070ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f4:	d801      	bhi.n	80070fa <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 80070f6:	2303      	movs	r3, #3
 80070f8:	e00b      	b.n	8007112 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80070fa:	edd7 7a00 	vldr	s15, [r7]
 80070fe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007158 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8007102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710a:	d801      	bhi.n	8007110 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 800710c:	2304      	movs	r3, #4
 800710e:	e000      	b.n	8007112 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007110:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8007112:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3320      	adds	r3, #32
 8007118:	7bfa      	ldrb	r2, [r7, #15]
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f9eb 	bl	80074f8 <lps22hb_data_rate_set>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8007128:	f04f 33ff 	mov.w	r3, #4294967295
 800712c:	e00f      	b.n	800714e <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f103 0220 	add.w	r2, r3, #32
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3333      	adds	r3, #51	; 0x33
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f000 fa02 	bl	8007544 <lps22hb_data_rate_get>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	e000      	b.n	800714e <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	42480000 	.word	0x42480000

0800715c <LPS22HB_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8007168:	edd7 7a00 	vldr	s15, [r7]
 800716c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007178:	d801      	bhi.n	800717e <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 800717a:	2301      	movs	r3, #1
 800717c:	e021      	b.n	80071c2 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 800717e:	edd7 7a00 	vldr	s15, [r7]
 8007182:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718e:	d801      	bhi.n	8007194 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8007190:	2302      	movs	r3, #2
 8007192:	e016      	b.n	80071c2 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007194:	edd7 7a00 	vldr	s15, [r7]
 8007198:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800719c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a4:	d801      	bhi.n	80071aa <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80071a6:	2303      	movs	r3, #3
 80071a8:	e00b      	b.n	80071c2 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80071aa:	edd7 7a00 	vldr	s15, [r7]
 80071ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80071d8 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80071b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	d801      	bhi.n	80071c0 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80071bc:	2304      	movs	r3, #4
 80071be:	e000      	b.n	80071c2 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80071c0:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	42480000 	.word	0x42480000

080071dc <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3320      	adds	r3, #32
 80071e8:	2101      	movs	r1, #1
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fa4b 	bl	8007686 <lps22hb_low_power_set>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80071f6:	f04f 33ff 	mov.w	r3, #4294967295
 80071fa:	e044      	b.n	8007286 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3320      	adds	r3, #32
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f978 	bl	80074f8 <lps22hb_data_rate_set>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 800720e:	f04f 33ff 	mov.w	r3, #4294967295
 8007212:	e038      	b.n	8007286 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3320      	adds	r3, #32
 8007218:	2102      	movs	r1, #2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f946 	bl	80074ac <lps22hb_low_pass_filter_mode_set>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8007226:	f04f 33ff 	mov.w	r3, #4294967295
 800722a:	e02c      	b.n	8007286 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3320      	adds	r3, #32
 8007230:	2101      	movs	r1, #1
 8007232:	4618      	mov	r0, r3
 8007234:	f000 f914 	bl	8007460 <lps22hb_block_data_update_set>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	e020      	b.n	8007286 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3320      	adds	r3, #32
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fa3d 	bl	80076d2 <lps22hb_auto_add_inc_set>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800725e:	f04f 33ff 	mov.w	r3, #4294967295
 8007262:	e010      	b.n	8007286 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3320      	adds	r3, #32
 8007268:	2101      	movs	r1, #1
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fa31 	bl	80076d2 <lps22hb_auto_add_inc_set>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8007276:	f04f 33ff 	mov.w	r3, #4294967295
 800727a:	e004      	b.n	8007286 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2203      	movs	r2, #3
 8007280:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800728e:	b590      	push	{r4, r7, lr}
 8007290:	b089      	sub	sp, #36	; 0x24
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	461a      	mov	r2, r3
 800729a:	460b      	mov	r3, r1
 800729c:	72fb      	strb	r3, [r7, #11]
 800729e:	4613      	mov	r3, r2
 80072a0:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d121      	bne.n	80072f6 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	83fb      	strh	r3, [r7, #30]
 80072b6:	e018      	b.n	80072ea <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	695c      	ldr	r4, [r3, #20]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	7b1b      	ldrb	r3, [r3, #12]
 80072c0:	b298      	uxth	r0, r3
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	8bfb      	ldrh	r3, [r7, #30]
 80072c8:	4413      	add	r3, r2
 80072ca:	b299      	uxth	r1, r3
 80072cc:	8bfb      	ldrh	r3, [r7, #30]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	441a      	add	r2, r3
 80072d2:	2301      	movs	r3, #1
 80072d4:	47a0      	blx	r4
 80072d6:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80072de:	f04f 33ff 	mov.w	r3, #4294967295
 80072e2:	e013      	b.n	800730c <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80072e4:	8bfb      	ldrh	r3, [r7, #30]
 80072e6:	3301      	adds	r3, #1
 80072e8:	83fb      	strh	r3, [r7, #30]
 80072ea:	8bfa      	ldrh	r2, [r7, #30]
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d3e2      	bcc.n	80072b8 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	e00a      	b.n	800730c <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	695c      	ldr	r4, [r3, #20]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	7b1b      	ldrb	r3, [r3, #12]
 80072fe:	b298      	uxth	r0, r3
 8007300:	7afb      	ldrb	r3, [r7, #11]
 8007302:	b299      	uxth	r1, r3
 8007304:	893b      	ldrh	r3, [r7, #8]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	47a0      	blx	r4
 800730a:	4603      	mov	r3, r0
  }
}
 800730c:	4618      	mov	r0, r3
 800730e:	3724      	adds	r7, #36	; 0x24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}

08007314 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b089      	sub	sp, #36	; 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	460b      	mov	r3, r1
 8007322:	72fb      	strb	r3, [r7, #11]
 8007324:	4613      	mov	r3, r2
 8007326:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d121      	bne.n	800737c <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8007338:	2300      	movs	r3, #0
 800733a:	83fb      	strh	r3, [r7, #30]
 800733c:	e018      	b.n	8007370 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	691c      	ldr	r4, [r3, #16]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	7b1b      	ldrb	r3, [r3, #12]
 8007346:	b298      	uxth	r0, r3
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	b29a      	uxth	r2, r3
 800734c:	8bfb      	ldrh	r3, [r7, #30]
 800734e:	4413      	add	r3, r2
 8007350:	b299      	uxth	r1, r3
 8007352:	8bfb      	ldrh	r3, [r7, #30]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	441a      	add	r2, r3
 8007358:	2301      	movs	r3, #1
 800735a:	47a0      	blx	r4
 800735c:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007364:	f04f 33ff 	mov.w	r3, #4294967295
 8007368:	e013      	b.n	8007392 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800736a:	8bfb      	ldrh	r3, [r7, #30]
 800736c:	3301      	adds	r3, #1
 800736e:	83fb      	strh	r3, [r7, #30]
 8007370:	8bfa      	ldrh	r2, [r7, #30]
 8007372:	893b      	ldrh	r3, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3e2      	bcc.n	800733e <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	e00a      	b.n	8007392 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	691c      	ldr	r4, [r3, #16]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	7b1b      	ldrb	r3, [r3, #12]
 8007384:	b298      	uxth	r0, r3
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	b299      	uxth	r1, r3
 800738a:	893b      	ldrh	r3, [r7, #8]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	47a0      	blx	r4
 8007390:	4603      	mov	r3, r0
  }
}
 8007392:	4618      	mov	r0, r3
 8007394:	3724      	adds	r7, #36	; 0x24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd90      	pop	{r4, r7, pc}

0800739a <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800739a:	b590      	push	{r4, r7, lr}
 800739c:	b087      	sub	sp, #28
 800739e:	af00      	add	r7, sp, #0
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	461a      	mov	r2, r3
 80073a6:	460b      	mov	r3, r1
 80073a8:	72fb      	strb	r3, [r7, #11]
 80073aa:	4613      	mov	r3, r2
 80073ac:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	685c      	ldr	r4, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	68d8      	ldr	r0, [r3, #12]
 80073b6:	893b      	ldrh	r3, [r7, #8]
 80073b8:	7af9      	ldrb	r1, [r7, #11]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	47a0      	blx	r4
 80073be:	6178      	str	r0, [r7, #20]

  return ret;
 80073c0:	697b      	ldr	r3, [r7, #20]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd90      	pop	{r4, r7, pc}

080073ca <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80073ca:	b590      	push	{r4, r7, lr}
 80073cc:	b087      	sub	sp, #28
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	461a      	mov	r2, r3
 80073d6:	460b      	mov	r3, r1
 80073d8:	72fb      	strb	r3, [r7, #11]
 80073da:	4613      	mov	r3, r2
 80073dc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681c      	ldr	r4, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68d8      	ldr	r0, [r3, #12]
 80073e6:	893b      	ldrh	r3, [r7, #8]
 80073e8:	7af9      	ldrb	r1, [r7, #11]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	47a0      	blx	r4
 80073ee:	6178      	str	r0, [r7, #20]

  return ret;
 80073f0:	697b      	ldr	r3, [r7, #20]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd90      	pop	{r4, r7, pc}
	...

080073fc <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	ee07 3a90 	vmov	s15, r3
 800740a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800740e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007428 <lps22hb_from_lsb_to_hpa+0x2c>
 8007412:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007416:	eef0 7a66 	vmov.f32	s15, s13
}
 800741a:	eeb0 0a67 	vmov.f32	s0, s15
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	49800000 	.word	0x49800000

0800742c <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8007436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800743a:	ee07 3a90 	vmov	s15, r3
 800743e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007442:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800745c <lps22hb_from_lsb_to_degc+0x30>
 8007446:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800744a:	eef0 7a66 	vmov.f32	s15, s13
}
 800744e:	eeb0 0a67 	vmov.f32	s0, s15
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	42c80000 	.word	0x42c80000

08007460 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800746c:	f107 0208 	add.w	r2, r7, #8
 8007470:	2301      	movs	r3, #1
 8007472:	2110      	movs	r1, #16
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff ff90 	bl	800739a <lps22hb_read_reg>
 800747a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	7a3b      	ldrb	r3, [r7, #8]
 800748c:	f362 0341 	bfi	r3, r2, #1, #1
 8007490:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007492:	f107 0208 	add.w	r2, r7, #8
 8007496:	2301      	movs	r3, #1
 8007498:	2110      	movs	r1, #16
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff ff95 	bl	80073ca <lps22hb_write_reg>
 80074a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80074b8:	f107 0208 	add.w	r2, r7, #8
 80074bc:	2301      	movs	r3, #1
 80074be:	2110      	movs	r1, #16
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ff6a 	bl	800739a <lps22hb_read_reg>
 80074c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10f      	bne.n	80074ee <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	f003 0303 	and.w	r3, r3, #3
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	7a3b      	ldrb	r3, [r7, #8]
 80074d8:	f362 0383 	bfi	r3, r2, #2, #2
 80074dc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80074de:	f107 0208 	add.w	r2, r7, #8
 80074e2:	2301      	movs	r3, #1
 80074e4:	2110      	movs	r1, #16
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff ff6f 	bl	80073ca <lps22hb_write_reg>
 80074ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074ee:	68fb      	ldr	r3, [r7, #12]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007504:	f107 0208 	add.w	r2, r7, #8
 8007508:	2301      	movs	r3, #1
 800750a:	2110      	movs	r1, #16
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff44 	bl	800739a <lps22hb_read_reg>
 8007512:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10f      	bne.n	800753a <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	b2da      	uxtb	r2, r3
 8007522:	7a3b      	ldrb	r3, [r7, #8]
 8007524:	f362 1306 	bfi	r3, r2, #4, #3
 8007528:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800752a:	f107 0208 	add.w	r2, r7, #8
 800752e:	2301      	movs	r3, #1
 8007530:	2110      	movs	r1, #16
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff ff49 	bl	80073ca <lps22hb_write_reg>
 8007538:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800753a:	68fb      	ldr	r3, [r7, #12]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800754e:	f107 0208 	add.w	r2, r7, #8
 8007552:	2301      	movs	r3, #1
 8007554:	2110      	movs	r1, #16
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff ff1f 	bl	800739a <lps22hb_read_reg>
 800755c:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.odr)
 800755e:	7a3b      	ldrb	r3, [r7, #8]
 8007560:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b05      	cmp	r3, #5
 8007568:	d826      	bhi.n	80075b8 <lps22hb_data_rate_get+0x74>
 800756a:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <lps22hb_data_rate_get+0x2c>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007589 	.word	0x08007589
 8007574:	08007591 	.word	0x08007591
 8007578:	08007599 	.word	0x08007599
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075b1 	.word	0x080075b1
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	701a      	strb	r2, [r3, #0]
      break;
 800758e:	e017      	b.n	80075c0 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
      break;
 8007596:	e013      	b.n	80075c0 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2202      	movs	r2, #2
 800759c:	701a      	strb	r2, [r3, #0]
      break;
 800759e:	e00f      	b.n	80075c0 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2203      	movs	r2, #3
 80075a4:	701a      	strb	r2, [r3, #0]
      break;
 80075a6:	e00b      	b.n	80075c0 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2204      	movs	r2, #4
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	e007      	b.n	80075c0 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2205      	movs	r2, #5
 80075b4:	701a      	strb	r2, [r3, #0]
      break;
 80075b6:	e003      	b.n	80075c0 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	bf00      	nop
  }

  return ret;
 80075c0:	68fb      	ldr	r3, [r7, #12]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop

080075cc <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 80075d6:	f107 0208 	add.w	r2, r7, #8
 80075da:	2303      	movs	r3, #3
 80075dc:	2128      	movs	r1, #40	; 0x28
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fedb 	bl	800739a <lps22hb_read_reg>
 80075e4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80075e6:	7abb      	ldrb	r3, [r7, #10]
 80075e8:	461a      	mov	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	7a7a      	ldrb	r2, [r7, #9]
 80075f6:	441a      	add	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	7a3a      	ldrb	r2, [r7, #8]
 8007604:	441a      	add	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	021a      	lsls	r2, r3, #8
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	601a      	str	r2, [r3, #0]

  return ret;
 8007614:	68fb      	ldr	r3, [r7, #12]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8007628:	f107 0208 	add.w	r2, r7, #8
 800762c:	2302      	movs	r3, #2
 800762e:	212b      	movs	r1, #43	; 0x2b
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff feb2 	bl	800739a <lps22hb_read_reg>
 8007636:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8007638:	7a7b      	ldrb	r3, [r7, #9]
 800763a:	b21a      	sxth	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007646:	b29b      	uxth	r3, r3
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	b29a      	uxth	r2, r3
 800764c:	7a3b      	ldrb	r3, [r7, #8]
 800764e:	b29b      	uxth	r3, r3
 8007650:	4413      	add	r3, r2
 8007652:	b29b      	uxth	r3, r3
 8007654:	b21a      	sxth	r2, r3
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	801a      	strh	r2, [r3, #0]

  return ret;
 800765a:	68fb      	ldr	r3, [r7, #12]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 800766e:	2301      	movs	r3, #1
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	210f      	movs	r1, #15
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fe90 	bl	800739a <lps22hb_read_reg>
 800767a:	60f8      	str	r0, [r7, #12]

  return ret;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8007692:	f107 0208 	add.w	r2, r7, #8
 8007696:	2301      	movs	r3, #1
 8007698:	211a      	movs	r1, #26
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fe7d 	bl	800739a <lps22hb_read_reg>
 80076a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10f      	bne.n	80076c8 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	7a3b      	ldrb	r3, [r7, #8]
 80076b2:	f362 0300 	bfi	r3, r2, #0, #1
 80076b6:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80076b8:	f107 0208 	add.w	r2, r7, #8
 80076bc:	2301      	movs	r3, #1
 80076be:	211a      	movs	r1, #26
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff fe82 	bl	80073ca <lps22hb_write_reg>
 80076c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80076c8:	68fb      	ldr	r3, [r7, #12]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80076de:	f107 0208 	add.w	r2, r7, #8
 80076e2:	2301      	movs	r3, #1
 80076e4:	2111      	movs	r1, #17
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fe57 	bl	800739a <lps22hb_read_reg>
 80076ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10f      	bne.n	8007714 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 80076f4:	78fb      	ldrb	r3, [r7, #3]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	7a3b      	ldrb	r3, [r7, #8]
 80076fe:	f362 1304 	bfi	r3, r2, #4, #1
 8007702:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007704:	f107 0208 	add.w	r2, r7, #8
 8007708:	2301      	movs	r3, #1
 800770a:	2111      	movs	r1, #17
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff fe5c 	bl	80073ca <lps22hb_write_reg>
 8007712:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007714:	68fb      	ldr	r3, [r7, #12]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8007734:	f04f 33ff 	mov.w	r3, #4294967295
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e051      	b.n	80077e0 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	7b1a      	ldrb	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	695a      	ldr	r2, [r3, #20]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699a      	ldr	r2, [r3, #24]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8007778:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1c      	ldr	r2, [pc, #112]	; (80077f0 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 800777e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	69da      	ldr	r2, [r3, #28]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d103      	bne.n	800779e <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e020      	b.n	80077e0 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4798      	blx	r3
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e016      	b.n	80077e0 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d112      	bne.n	80077e0 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10d      	bne.n	80077e0 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80077c4:	2301      	movs	r3, #1
 80077c6:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	461a      	mov	r2, r3
 80077cc:	2123      	movs	r1, #35	; 0x23
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb55 	bl	8007e7e <LSM303AGR_ACC_Write_Reg>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	e000      	b.n	80077e2 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 80077e0:	68fb      	ldr	r3, [r7, #12]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	0800868d 	.word	0x0800868d
 80077f0:	080086ef 	.word	0x080086ef

080077f4 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3320      	adds	r3, #32
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f001 f94a 	bl	8008a9c <lsm303agr_xl_block_data_update_set>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	e02c      	b.n	800786e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3320      	adds	r3, #32
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f001 faed 	bl	8008dfa <lsm303agr_xl_fifo_mode_set>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d002      	beq.n	800782c <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8007826:	f04f 33ff 	mov.w	r3, #4294967295
 800782a:	e020      	b.n	800786e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2205      	movs	r2, #5
 8007830:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3320      	adds	r3, #32
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f84e 	bl	80088dc <lsm303agr_xl_data_rate_set>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8007846:	f04f 33ff 	mov.w	r3, #4294967295
 800784a:	e010      	b.n	800786e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3320      	adds	r3, #32
 8007850:	2100      	movs	r1, #0
 8007852:	4618      	mov	r0, r3
 8007854:	f001 f8c4 	bl	80089e0 <lsm303agr_xl_full_scale_set>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	e004      	b.n	800786e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f87c 	bl	800797c <LSM303AGR_ACC_Disable>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800788a:	f04f 33ff 	mov.w	r3, #4294967295
 800788e:	e008      	b.n	80078a2 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3320      	adds	r3, #32
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f001 fa55 	bl	8008d6a <lsm303agr_xl_device_id_get>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ca:	e000      	b.n	80078ce <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2201      	movs	r2, #1
 80078e6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2200      	movs	r2, #0
 80078f2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2200      	movs	r2, #0
 80078f8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2200      	movs	r2, #0
 80078fe:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2210      	movs	r2, #16
 8007904:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f04f 0200 	mov.w	r2, #0
 8007912:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	4a06      	ldr	r2, [pc, #24]	; (8007930 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8007918:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	43c80000 	.word	0x43c80000

08007934 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e014      	b.n	8007974 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f103 0220 	add.w	r2, r3, #32
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f000 ffbf 	bl	80088dc <lsm303agr_xl_data_rate_set>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8007964:	f04f 33ff 	mov.w	r3, #4294967295
 8007968:	e004      	b.n	8007974 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e01f      	b.n	80079d2 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f103 0220 	add.w	r2, r3, #32
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3332      	adds	r3, #50	; 0x32
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f000 ffc2 	bl	8008928 <lsm303agr_xl_data_rate_get>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80079aa:	f04f 33ff 	mov.w	r3, #4294967295
 80079ae:	e010      	b.n	80079d2 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3320      	adds	r3, #32
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 ff90 	bl	80088dc <lsm303agr_xl_data_rate_set>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	e004      	b.n	80079d2 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3320      	adds	r3, #32
 80079ec:	f107 020b 	add.w	r2, r7, #11
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 ff3e 	bl	8008874 <lsm303agr_xl_operating_mode_get>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	e031      	b.n	8007a68 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d01a      	beq.n	8007a40 <LSM303AGR_ACC_GetSensitivity+0x66>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	dc22      	bgt.n	8007a54 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d00a      	beq.n	8007a2c <LSM303AGR_ACC_GetSensitivity+0x52>
 8007a16:	e01d      	b.n	8007a54 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fca8 	bl	8008370 <LSM303AGR_ACC_GetSensitivityHR>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01a      	beq.n	8007a5c <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8007a26:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2a:	e01d      	b.n	8007a68 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fce4 	bl	80083fc <LSM303AGR_ACC_GetSensitivityNM>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d012      	beq.n	8007a60 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8007a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3e:	e013      	b.n	8007a68 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fd20 	bl	8008488 <LSM303AGR_ACC_GetSensitivityLP>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a52:	e009      	b.n	8007a68 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8007a54:	f04f 33ff 	mov.w	r3, #4294967295
 8007a58:	60fb      	str	r3, [r7, #12]
      break;
 8007a5a:	e004      	b.n	8007a66 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e002      	b.n	8007a66 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007a64:	bf00      	nop
  }

  return ret;
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3320      	adds	r3, #32
 8007a82:	f107 020b 	add.w	r2, r7, #11
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fef3 	bl	8008874 <lsm303agr_xl_operating_mode_get>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8007a94:	f04f 33ff 	mov.w	r3, #4294967295
 8007a98:	e09d      	b.n	8007bd6 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3320      	adds	r3, #32
 8007a9e:	f107 020a 	add.w	r2, r7, #10
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 ff3f 	bl	8008928 <lsm303agr_xl_data_rate_get>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	e08f      	b.n	8007bd6 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d147      	bne.n	8007b4c <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8007abc:	7abb      	ldrb	r3, [r7, #10]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d840      	bhi.n	8007b44 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8007ac2:	a201      	add	r2, pc, #4	; (adr r2, 8007ac8 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007afb 	.word	0x08007afb
 8007ad0:	08007b05 	.word	0x08007b05
 8007ad4:	08007b0d 	.word	0x08007b0d
 8007ad8:	08007b15 	.word	0x08007b15
 8007adc:	08007b1d 	.word	0x08007b1d
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b3d 	.word	0x08007b3d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
        break;
 8007af8:	e06c      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007b00:	601a      	str	r2, [r3, #0]
        break;
 8007b02:	e067      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	4a36      	ldr	r2, [pc, #216]	; (8007be0 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8007b08:	601a      	str	r2, [r3, #0]
        break;
 8007b0a:	e063      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	4a35      	ldr	r2, [pc, #212]	; (8007be4 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8007b10:	601a      	str	r2, [r3, #0]
        break;
 8007b12:	e05f      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	4a34      	ldr	r2, [pc, #208]	; (8007be8 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8007b18:	601a      	str	r2, [r3, #0]
        break;
 8007b1a:	e05b      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	4a33      	ldr	r2, [pc, #204]	; (8007bec <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8007b20:	601a      	str	r2, [r3, #0]
        break;
 8007b22:	e057      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	4a32      	ldr	r2, [pc, #200]	; (8007bf0 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8007b28:	601a      	str	r2, [r3, #0]
        break;
 8007b2a:	e053      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	4a31      	ldr	r2, [pc, #196]	; (8007bf4 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8007b30:	601a      	str	r2, [r3, #0]
        break;
 8007b32:	e04f      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	4a30      	ldr	r2, [pc, #192]	; (8007bf8 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8007b38:	601a      	str	r2, [r3, #0]
        break;
 8007b3a:	e04b      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	4a2f      	ldr	r2, [pc, #188]	; (8007bfc <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8007b40:	601a      	str	r2, [r3, #0]
        break;
 8007b42:	e047      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8007b44:	f04f 33ff 	mov.w	r3, #4294967295
 8007b48:	60fb      	str	r3, [r7, #12]
        break;
 8007b4a:	e043      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8007b4c:	7abb      	ldrb	r3, [r7, #10]
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d83c      	bhi.n	8007bcc <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8007b52:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b8b 	.word	0x08007b8b
 8007b60:	08007b95 	.word	0x08007b95
 8007b64:	08007b9d 	.word	0x08007b9d
 8007b68:	08007ba5 	.word	0x08007ba5
 8007b6c:	08007bad 	.word	0x08007bad
 8007b70:	08007bb5 	.word	0x08007bb5
 8007b74:	08007bbd 	.word	0x08007bbd
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007bc5 	.word	0x08007bc5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f04f 0200 	mov.w	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
        break;
 8007b88:	e024      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007b90:	601a      	str	r2, [r3, #0]
        break;
 8007b92:	e01f      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	4a12      	ldr	r2, [pc, #72]	; (8007be0 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8007b98:	601a      	str	r2, [r3, #0]
        break;
 8007b9a:	e01b      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	4a11      	ldr	r2, [pc, #68]	; (8007be4 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8007ba0:	601a      	str	r2, [r3, #0]
        break;
 8007ba2:	e017      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	4a10      	ldr	r2, [pc, #64]	; (8007be8 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8007ba8:	601a      	str	r2, [r3, #0]
        break;
 8007baa:	e013      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	4a0f      	ldr	r2, [pc, #60]	; (8007bec <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8007bb0:	601a      	str	r2, [r3, #0]
        break;
 8007bb2:	e00f      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	4a0e      	ldr	r2, [pc, #56]	; (8007bf0 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8007bb8:	601a      	str	r2, [r3, #0]
        break;
 8007bba:	e00b      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8007bc0:	601a      	str	r2, [r3, #0]
        break;
 8007bc2:	e007      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8007bc8:	601a      	str	r2, [r3, #0]
        break;
 8007bca:	e003      	b.n	8007bd4 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd0:	60fb      	str	r3, [r7, #12]
        break;
 8007bd2:	bf00      	nop
    }
  }

  return ret;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	41200000 	.word	0x41200000
 8007be4:	41c80000 	.word	0x41c80000
 8007be8:	42480000 	.word	0x42480000
 8007bec:	42c80000 	.word	0x42c80000
 8007bf0:	43480000 	.word	0x43480000
 8007bf4:	43c80000 	.word	0x43c80000
 8007bf8:	44ca8000 	.word	0x44ca8000
 8007bfc:	45a80000 	.word	0x45a80000
 8007c00:	44a80000 	.word	0x44a80000

08007c04 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d106      	bne.n	8007c28 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007c1a:	ed97 0a00 	vldr	s0, [r7]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fc78 	bl	8008514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8007c24:	4603      	mov	r3, r0
 8007c26:	e005      	b.n	8007c34 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007c28:	ed97 0a00 	vldr	s0, [r7]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fcd3 	bl	80085d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8007c32:	4603      	mov	r3, r0
  }
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3320      	adds	r3, #32
 8007c4e:	f107 020b 	add.w	r2, r7, #11
 8007c52:	4611      	mov	r1, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fee9 	bl	8008a2c <lsm303agr_xl_full_scale_get>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8007c60:	f04f 33ff 	mov.w	r3, #4294967295
 8007c64:	e023      	b.n	8007cae <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d81b      	bhi.n	8007ca4 <LSM303AGR_ACC_GetFullScale+0x68>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <LSM303AGR_ACC_GetFullScale+0x38>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c85 	.word	0x08007c85
 8007c78:	08007c8d 	.word	0x08007c8d
 8007c7c:	08007c95 	.word	0x08007c95
 8007c80:	08007c9d 	.word	0x08007c9d
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2202      	movs	r2, #2
 8007c88:	601a      	str	r2, [r3, #0]
      break;
 8007c8a:	e00f      	b.n	8007cac <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2204      	movs	r2, #4
 8007c90:	601a      	str	r2, [r3, #0]
      break;
 8007c92:	e00b      	b.n	8007cac <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2208      	movs	r2, #8
 8007c98:	601a      	str	r2, [r3, #0]
      break;
 8007c9a:	e007      	b.n	8007cac <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	601a      	str	r2, [r3, #0]
      break;
 8007ca2:	e003      	b.n	8007cac <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca8:	60fb      	str	r3, [r7, #12]
      break;
 8007caa:	bf00      	nop
  }

  return ret;
 8007cac:	68fb      	ldr	r3, [r7, #12]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop

08007cb8 <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	dd0b      	ble.n	8007ce0 <LSM303AGR_ACC_SetFullScale+0x28>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	dd06      	ble.n	8007cdc <LSM303AGR_ACC_SetFullScale+0x24>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	dc01      	bgt.n	8007cd8 <LSM303AGR_ACC_SetFullScale+0x20>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e004      	b.n	8007ce2 <LSM303AGR_ACC_SetFullScale+0x2a>
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e002      	b.n	8007ce2 <LSM303AGR_ACC_SetFullScale+0x2a>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e000      	b.n	8007ce2 <LSM303AGR_ACC_SetFullScale+0x2a>
 8007ce0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8007ce2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3320      	adds	r3, #32
 8007ce8:	7bfa      	ldrb	r2, [r7, #15]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fe77 	bl	80089e0 <lsm303agr_xl_full_scale_set>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	e000      	b.n	8007d00 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8007d12:	2301      	movs	r3, #1
 8007d14:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3320      	adds	r3, #32
 8007d1e:	f107 020f 	add.w	r2, r7, #15
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fda5 	bl	8008874 <lsm303agr_xl_operating_mode_get>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	e04a      	b.n	8007dcc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d00c      	beq.n	8007d56 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	dc0e      	bgt.n	8007d5e <LSM303AGR_ACC_GetAxesRaw+0x56>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <LSM303AGR_ACC_GetAxesRaw+0x42>
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d003      	beq.n	8007d50 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8007d48:	e009      	b.n	8007d5e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	83fb      	strh	r3, [r7, #30]
      break;
 8007d4e:	e00a      	b.n	8007d66 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	83fb      	strh	r3, [r7, #30]
      break;
 8007d54:	e007      	b.n	8007d66 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8007d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d5a:	83fb      	strh	r3, [r7, #30]
      break;
 8007d5c:	e003      	b.n	8007d66 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d62:	61bb      	str	r3, [r7, #24]
      break;
 8007d64:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d101      	bne.n	8007d72 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	e02c      	b.n	8007dcc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3320      	adds	r3, #32
 8007d76:	f107 0210 	add.w	r2, r7, #16
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 feb3 	bl	8008ae8 <lsm303agr_acceleration_raw_get>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	e01e      	b.n	8007dcc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8007d8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007d92:	461a      	mov	r2, r3
 8007d94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d98:	fb92 f3f3 	sdiv	r3, r2, r3
 8007d9c:	b21a      	sxth	r2, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8007da2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8007db0:	b21a      	sxth	r2, r3
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8007db6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007dc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	809a      	strh	r2, [r3, #4]

  return ret;
 8007dca:	69bb      	ldr	r3, [r7, #24]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3720      	adds	r7, #32
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8007de4:	f107 0310 	add.w	r3, r7, #16
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff ff8c 	bl	8007d08 <LSM303AGR_ACC_GetAxesRaw>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8007df6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfa:	e03c      	b.n	8007e76 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8007dfc:	f107 030c 	add.w	r3, r7, #12
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fde9 	bl	80079da <LSM303AGR_ACC_GetSensitivity>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8007e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e12:	e030      	b.n	8007e76 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8007e14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e2c:	ee17 2a90 	vmov	r2, s15
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8007e34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e4c:	ee17 2a90 	vmov	r2, s15
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8007e54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e60:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e6c:	ee17 2a90 	vmov	r2, s15
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f103 0020 	add.w	r0, r3, #32
 8007e94:	1cba      	adds	r2, r7, #2
 8007e96:	78f9      	ldrb	r1, [r7, #3]
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f000 fcd3 	bl	8008844 <lsm303agr_write_reg>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	e000      	b.n	8007eac <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	e04b      	b.n	8007f68 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	7b1a      	ldrb	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	695a      	ldr	r2, [r3, #20]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	699a      	ldr	r2, [r3, #24]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a1a      	ldr	r2, [pc, #104]	; (8007f74 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a19      	ldr	r2, [pc, #100]	; (8007f78 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8007f12:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	e01e      	b.n	8007f68 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4798      	blx	r3
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8007f36:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	e014      	b.n	8007f68 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d010      	beq.n	8007f68 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3320      	adds	r3, #32
 8007f54:	2101      	movs	r1, #1
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 ff75 	bl	8008e46 <lsm303agr_mag_i2c_interface_set>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8007f62:	f04f 33ff 	mov.w	r3, #4294967295
 8007f66:	e000      	b.n	8007f6a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8007f68:	68fb      	ldr	r3, [r7, #12]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	08008751 	.word	0x08008751
 8007f78:	080087b3 	.word	0x080087b3

08007f7c <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3320      	adds	r3, #32
 8007f88:	2101      	movs	r1, #1
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fe7c 	bl	8008c88 <lsm303agr_mag_block_data_update_set>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9a:	e028      	b.n	8007fee <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3320      	adds	r3, #32
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fdeb 	bl	8008b7e <lsm303agr_mag_operating_mode_set>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8007fae:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb2:	e01c      	b.n	8007fee <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3320      	adds	r3, #32
 8007fb8:	2103      	movs	r1, #3
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fe05 	bl	8008bca <lsm303agr_mag_data_rate_set>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8007fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fca:	e010      	b.n	8007fee <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3320      	adds	r3, #32
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 feeb 	bl	8008dae <lsm303agr_mag_self_test_set>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	e004      	b.n	8007fee <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b082      	sub	sp, #8
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f874 	bl	80080ec <LSM303AGR_MAG_Disable>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	e004      	b.n	800801a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3320      	adds	r3, #32
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 feaa 	bl	8008d8c <lsm303agr_mag_device_id_get>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800803e:	f04f 33ff 	mov.w	r3, #4294967295
 8008042:	e000      	b.n	8008046 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2201      	movs	r2, #1
 800806a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2200      	movs	r2, #0
 8008070:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2200      	movs	r2, #0
 8008076:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2232      	movs	r2, #50	; 0x32
 8008082:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	4a04      	ldr	r2, [pc, #16]	; (80080a8 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8008098:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	42c80000 	.word	0x42c80000

080080ac <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e010      	b.n	80080e4 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3320      	adds	r3, #32
 80080c6:	2100      	movs	r1, #0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fd58 	bl	8008b7e <lsm303agr_mag_operating_mode_set>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	e004      	b.n	80080e4 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	e010      	b.n	8008124 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3320      	adds	r3, #32
 8008106:	2102      	movs	r1, #2
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fd38 	bl	8008b7e <lsm303agr_mag_operating_mode_set>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008114:	f04f 33ff 	mov.w	r3, #4294967295
 8008118:	e004      	b.n	8008124 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800813c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3320      	adds	r3, #32
 800815e:	f107 020b 	add.w	r2, r7, #11
 8008162:	4611      	mov	r1, r2
 8008164:	4618      	mov	r0, r3
 8008166:	f000 fd57 	bl	8008c18 <lsm303agr_mag_data_rate_get>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
 8008174:	e023      	b.n	80081be <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8008176:	7afb      	ldrb	r3, [r7, #11]
 8008178:	2b03      	cmp	r3, #3
 800817a:	d81b      	bhi.n	80081b4 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	08008195 	.word	0x08008195
 8008188:	0800819d 	.word	0x0800819d
 800818c:	080081a5 	.word	0x080081a5
 8008190:	080081ad 	.word	0x080081ad
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	4a0c      	ldr	r2, [pc, #48]	; (80081c8 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8008198:	601a      	str	r2, [r3, #0]
      break;
 800819a:	e00f      	b.n	80081bc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80081a0:	601a      	str	r2, [r3, #0]
      break;
 80081a2:	e00b      	b.n	80081bc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	4a0a      	ldr	r2, [pc, #40]	; (80081d0 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80081a8:	601a      	str	r2, [r3, #0]
      break;
 80081aa:	e007      	b.n	80081bc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80081b0:	601a      	str	r2, [r3, #0]
      break;
 80081b2:	e003      	b.n	80081bc <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80081b4:	f04f 33ff 	mov.w	r3, #4294967295
 80081b8:	60fb      	str	r3, [r7, #12]
      break;
 80081ba:	bf00      	nop
  }

  return ret;
 80081bc:	68fb      	ldr	r3, [r7, #12]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	41200000 	.word	0x41200000
 80081cc:	41a00000 	.word	0x41a00000
 80081d0:	42480000 	.word	0x42480000
 80081d4:	42c80000 	.word	0x42c80000

080081d8 <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80081e4:	edd7 7a00 	vldr	s15, [r7]
 80081e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80081ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f4:	d801      	bhi.n	80081fa <LSM303AGR_MAG_SetOutputDataRate+0x22>
 80081f6:	2300      	movs	r3, #0
 80081f8:	e016      	b.n	8008228 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80081fa:	edd7 7a00 	vldr	s15, [r7]
 80081fe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	d801      	bhi.n	8008210 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 800820c:	2301      	movs	r3, #1
 800820e:	e00b      	b.n	8008228 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008210:	edd7 7a00 	vldr	s15, [r7]
 8008214:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008250 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8008218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800821c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008220:	d801      	bhi.n	8008226 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8008222:	2302      	movs	r3, #2
 8008224:	e000      	b.n	8008228 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008226:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8008228:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3320      	adds	r3, #32
 800822e:	7bfa      	ldrb	r2, [r7, #15]
 8008230:	4611      	mov	r1, r2
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fcc9 	bl	8008bca <lsm303agr_mag_data_rate_set>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 800823e:	f04f 33ff 	mov.w	r3, #4294967295
 8008242:	e000      	b.n	8008246 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	42480000 	.word	0x42480000

08008254 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2232      	movs	r2, #50	; 0x32
 8008262:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3320      	adds	r3, #32
 8008298:	f107 0208 	add.w	r2, r7, #8
 800829c:	4611      	mov	r1, r2
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fd18 	bl	8008cd4 <lsm303agr_magnetic_raw_get>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80082aa:	f04f 33ff 	mov.w	r3, #4294967295
 80082ae:	e00c      	b.n	80082ca <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80082b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80082b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80082c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3320      	adds	r3, #32
 80082e0:	f107 0210 	add.w	r2, r7, #16
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fcf4 	bl	8008cd4 <lsm303agr_magnetic_raw_get>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80082f2:	f04f 33ff 	mov.w	r3, #4294967295
 80082f6:	e036      	b.n	8008366 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff ff14 	bl	800812c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008304:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008308:	ee07 3a90 	vmov	s15, r3
 800830c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008310:	edd7 7a03 	vldr	s15, [r7, #12]
 8008314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800831c:	ee17 2a90 	vmov	r2, s15
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008330:	edd7 7a03 	vldr	s15, [r7, #12]
 8008334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800833c:	ee17 2a90 	vmov	r2, s15
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008348:	ee07 3a90 	vmov	s15, r3
 800834c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008350:	edd7 7a03 	vldr	s15, [r7, #12]
 8008354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800835c:	ee17 2a90 	vmov	r2, s15
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3320      	adds	r3, #32
 8008382:	f107 020b 	add.w	r2, r7, #11
 8008386:	4611      	mov	r1, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fb4f 	bl	8008a2c <lsm303agr_xl_full_scale_get>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
 8008398:	e023      	b.n	80083e2 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800839a:	7afb      	ldrb	r3, [r7, #11]
 800839c:	2b03      	cmp	r3, #3
 800839e:	d81b      	bhi.n	80083d8 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80083a0:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80083a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a6:	bf00      	nop
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083c1 	.word	0x080083c1
 80083b0:	080083c9 	.word	0x080083c9
 80083b4:	080083d1 	.word	0x080083d1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4a0c      	ldr	r2, [pc, #48]	; (80083ec <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80083bc:	601a      	str	r2, [r3, #0]
      break;
 80083be:	e00f      	b.n	80083e0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	4a0b      	ldr	r2, [pc, #44]	; (80083f0 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80083c4:	601a      	str	r2, [r3, #0]
      break;
 80083c6:	e00b      	b.n	80083e0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	4a0a      	ldr	r2, [pc, #40]	; (80083f4 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80083cc:	601a      	str	r2, [r3, #0]
      break;
 80083ce:	e007      	b.n	80083e0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	4a09      	ldr	r2, [pc, #36]	; (80083f8 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80083d4:	601a      	str	r2, [r3, #0]
      break;
 80083d6:	e003      	b.n	80083e0 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80083d8:	f04f 33ff 	mov.w	r3, #4294967295
 80083dc:	60fb      	str	r3, [r7, #12]
      break;
 80083de:	bf00      	nop
  }

  return ret;
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	3f7ae148 	.word	0x3f7ae148
 80083f0:	3ff9999a 	.word	0x3ff9999a
 80083f4:	4079999a 	.word	0x4079999a
 80083f8:	413b851f 	.word	0x413b851f

080083fc <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3320      	adds	r3, #32
 800840e:	f107 020b 	add.w	r2, r7, #11
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fb09 	bl	8008a2c <lsm303agr_xl_full_scale_get>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8008420:	f04f 33ff 	mov.w	r3, #4294967295
 8008424:	e023      	b.n	800846e <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8008426:	7afb      	ldrb	r3, [r7, #11]
 8008428:	2b03      	cmp	r3, #3
 800842a:	d81b      	bhi.n	8008464 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008445 	.word	0x08008445
 8008438:	0800844d 	.word	0x0800844d
 800843c:	08008455 	.word	0x08008455
 8008440:	0800845d 	.word	0x0800845d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8008448:	601a      	str	r2, [r3, #0]
      break;
 800844a:	e00f      	b.n	800846c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	4a0b      	ldr	r2, [pc, #44]	; (800847c <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8008450:	601a      	str	r2, [r3, #0]
      break;
 8008452:	e00b      	b.n	800846c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8008458:	601a      	str	r2, [r3, #0]
      break;
 800845a:	e007      	b.n	800846c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	4a09      	ldr	r2, [pc, #36]	; (8008484 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8008460:	601a      	str	r2, [r3, #0]
      break;
 8008462:	e003      	b.n	800846c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008464:	f04f 33ff 	mov.w	r3, #4294967295
 8008468:	60fb      	str	r3, [r7, #12]
      break;
 800846a:	bf00      	nop
  }

  return ret;
 800846c:	68fb      	ldr	r3, [r7, #12]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	4079999a 	.word	0x4079999a
 800847c:	40fa3d71 	.word	0x40fa3d71
 8008480:	417a147b 	.word	0x417a147b
 8008484:	423b999a 	.word	0x423b999a

08008488 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3320      	adds	r3, #32
 800849a:	f107 020b 	add.w	r2, r7, #11
 800849e:	4611      	mov	r1, r2
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fac3 	bl	8008a2c <lsm303agr_xl_full_scale_get>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	e023      	b.n	80084fa <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d81b      	bhi.n	80084f0 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80084b8:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084d9 	.word	0x080084d9
 80084c8:	080084e1 	.word	0x080084e1
 80084cc:	080084e9 	.word	0x080084e9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	4a0c      	ldr	r2, [pc, #48]	; (8008504 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80084d4:	601a      	str	r2, [r3, #0]
      break;
 80084d6:	e00f      	b.n	80084f8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80084dc:	601a      	str	r2, [r3, #0]
      break;
 80084de:	e00b      	b.n	80084f8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	4a0a      	ldr	r2, [pc, #40]	; (800850c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80084e4:	601a      	str	r2, [r3, #0]
      break;
 80084e6:	e007      	b.n	80084f8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	4a09      	ldr	r2, [pc, #36]	; (8008510 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80084ec:	601a      	str	r2, [r3, #0]
      break;
 80084ee:	e003      	b.n	80084f8 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80084f0:	f04f 33ff 	mov.w	r3, #4294967295
 80084f4:	60fb      	str	r3, [r7, #12]
      break;
 80084f6:	bf00      	nop
  }

  return ret;
 80084f8:	68fb      	ldr	r3, [r7, #12]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	417a147b 	.word	0x417a147b
 8008508:	41fa147b 	.word	0x41fa147b
 800850c:	427a147b 	.word	0x427a147b
 8008510:	433b947b 	.word	0x433b947b

08008514 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8008520:	edd7 7a00 	vldr	s15, [r7]
 8008524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800852c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008530:	d801      	bhi.n	8008536 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008532:	2301      	movs	r3, #1
 8008534:	e037      	b.n	80085a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008536:	edd7 7a00 	vldr	s15, [r7]
 800853a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800853e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	d801      	bhi.n	800854c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008548:	2302      	movs	r3, #2
 800854a:	e02c      	b.n	80085a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800854c:	edd7 7a00 	vldr	s15, [r7]
 8008550:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800855c:	d801      	bhi.n	8008562 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800855e:	2303      	movs	r3, #3
 8008560:	e021      	b.n	80085a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008562:	edd7 7a00 	vldr	s15, [r7]
 8008566:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80085cc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 800856a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800856e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008572:	d801      	bhi.n	8008578 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008574:	2304      	movs	r3, #4
 8008576:	e016      	b.n	80085a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008578:	edd7 7a00 	vldr	s15, [r7]
 800857c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80085d0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	d801      	bhi.n	800858e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800858a:	2305      	movs	r3, #5
 800858c:	e00b      	b.n	80085a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800858e:	edd7 7a00 	vldr	s15, [r7]
 8008592:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80085d4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8008596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859e:	d801      	bhi.n	80085a4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80085a0:	2306      	movs	r3, #6
 80085a2:	e000      	b.n	80085a6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80085a4:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80085a6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3320      	adds	r3, #32
 80085ac:	7bfa      	ldrb	r2, [r7, #15]
 80085ae:	4611      	mov	r1, r2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 f993 	bl	80088dc <lsm303agr_xl_data_rate_set>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d002      	beq.n	80085c2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80085bc:	f04f 33ff 	mov.w	r3, #4294967295
 80085c0:	e000      	b.n	80085c4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	42480000 	.word	0x42480000
 80085d0:	42c80000 	.word	0x42c80000
 80085d4:	43480000 	.word	0x43480000

080085d8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80085e4:	edd7 7a00 	vldr	s15, [r7]
 80085e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f4:	d801      	bhi.n	80085fa <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e037      	b.n	800866a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80085fa:	edd7 7a00 	vldr	s15, [r7]
 80085fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800860a:	d801      	bhi.n	8008610 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800860c:	2302      	movs	r3, #2
 800860e:	e02c      	b.n	800866a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008610:	edd7 7a00 	vldr	s15, [r7]
 8008614:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800861c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008620:	d801      	bhi.n	8008626 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008622:	2303      	movs	r3, #3
 8008624:	e021      	b.n	800866a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008626:	edd7 7a00 	vldr	s15, [r7]
 800862a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008680 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800862e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008636:	d801      	bhi.n	800863c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008638:	2304      	movs	r3, #4
 800863a:	e016      	b.n	800866a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800863c:	edd7 7a00 	vldr	s15, [r7]
 8008640:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008684 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864c:	d801      	bhi.n	8008652 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800864e:	2305      	movs	r3, #5
 8008650:	e00b      	b.n	800866a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008652:	edd7 7a00 	vldr	s15, [r7]
 8008656:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008688 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800865a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008662:	d801      	bhi.n	8008668 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008664:	2306      	movs	r3, #6
 8008666:	e000      	b.n	800866a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008668:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	42480000 	.word	0x42480000
 8008684:	42c80000 	.word	0x42c80000
 8008688:	43480000 	.word	0x43480000

0800868c <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800868c:	b590      	push	{r4, r7, lr}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	461a      	mov	r2, r3
 8008698:	460b      	mov	r3, r1
 800869a:	72fb      	strb	r3, [r7, #11]
 800869c:	4613      	mov	r3, r2
 800869e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10e      	bne.n	80086ca <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	695c      	ldr	r4, [r3, #20]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	7b1b      	ldrb	r3, [r3, #12]
 80086b4:	b298      	uxth	r0, r3
 80086b6:	7afb      	ldrb	r3, [r7, #11]
 80086b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	b299      	uxth	r1, r3
 80086c0:	893b      	ldrh	r3, [r7, #8]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	47a0      	blx	r4
 80086c6:	4603      	mov	r3, r0
 80086c8:	e00d      	b.n	80086e6 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	695c      	ldr	r4, [r3, #20]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	7b1b      	ldrb	r3, [r3, #12]
 80086d2:	b298      	uxth	r0, r3
 80086d4:	7afb      	ldrb	r3, [r7, #11]
 80086d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	b299      	uxth	r1, r3
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	47a0      	blx	r4
 80086e4:	4603      	mov	r3, r0
  }
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd90      	pop	{r4, r7, pc}

080086ee <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80086ee:	b590      	push	{r4, r7, lr}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	461a      	mov	r2, r3
 80086fa:	460b      	mov	r3, r1
 80086fc:	72fb      	strb	r3, [r7, #11]
 80086fe:	4613      	mov	r3, r2
 8008700:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10e      	bne.n	800872c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	691c      	ldr	r4, [r3, #16]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	7b1b      	ldrb	r3, [r3, #12]
 8008716:	b298      	uxth	r0, r3
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800871e:	b2db      	uxtb	r3, r3
 8008720:	b299      	uxth	r1, r3
 8008722:	893b      	ldrh	r3, [r7, #8]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	47a0      	blx	r4
 8008728:	4603      	mov	r3, r0
 800872a:	e00d      	b.n	8008748 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	691c      	ldr	r4, [r3, #16]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	7b1b      	ldrb	r3, [r3, #12]
 8008734:	b298      	uxth	r0, r3
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873c:	b2db      	uxtb	r3, r3
 800873e:	b299      	uxth	r1, r3
 8008740:	893b      	ldrh	r3, [r7, #8]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	47a0      	blx	r4
 8008746:	4603      	mov	r3, r0
  }
}
 8008748:	4618      	mov	r0, r3
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd90      	pop	{r4, r7, pc}

08008750 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	461a      	mov	r2, r3
 800875c:	460b      	mov	r3, r1
 800875e:	72fb      	strb	r3, [r7, #11]
 8008760:	4613      	mov	r3, r2
 8008762:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10e      	bne.n	800878e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	695c      	ldr	r4, [r3, #20]
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	7b1b      	ldrb	r3, [r3, #12]
 8008778:	b298      	uxth	r0, r3
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008780:	b2db      	uxtb	r3, r3
 8008782:	b299      	uxth	r1, r3
 8008784:	893b      	ldrh	r3, [r7, #8]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	47a0      	blx	r4
 800878a:	4603      	mov	r3, r0
 800878c:	e00d      	b.n	80087aa <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	695c      	ldr	r4, [r3, #20]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	7b1b      	ldrb	r3, [r3, #12]
 8008796:	b298      	uxth	r0, r3
 8008798:	7afb      	ldrb	r3, [r7, #11]
 800879a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	b299      	uxth	r1, r3
 80087a2:	893b      	ldrh	r3, [r7, #8]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	47a0      	blx	r4
 80087a8:	4603      	mov	r3, r0
  }
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd90      	pop	{r4, r7, pc}

080087b2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80087b2:	b590      	push	{r4, r7, lr}
 80087b4:	b087      	sub	sp, #28
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	461a      	mov	r2, r3
 80087be:	460b      	mov	r3, r1
 80087c0:	72fb      	strb	r3, [r7, #11]
 80087c2:	4613      	mov	r3, r2
 80087c4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10e      	bne.n	80087f0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	691c      	ldr	r4, [r3, #16]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	7b1b      	ldrb	r3, [r3, #12]
 80087da:	b298      	uxth	r0, r3
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	b299      	uxth	r1, r3
 80087e6:	893b      	ldrh	r3, [r7, #8]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	47a0      	blx	r4
 80087ec:	4603      	mov	r3, r0
 80087ee:	e00d      	b.n	800880c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	691c      	ldr	r4, [r3, #16]
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	7b1b      	ldrb	r3, [r3, #12]
 80087f8:	b298      	uxth	r0, r3
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008800:	b2db      	uxtb	r3, r3
 8008802:	b299      	uxth	r1, r3
 8008804:	893b      	ldrh	r3, [r7, #8]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	47a0      	blx	r4
 800880a:	4603      	mov	r3, r0
  }
}
 800880c:	4618      	mov	r0, r3
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}

08008814 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8008814:	b590      	push	{r4, r7, lr}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	461a      	mov	r2, r3
 8008820:	460b      	mov	r3, r1
 8008822:	72fb      	strb	r3, [r7, #11]
 8008824:	4613      	mov	r3, r2
 8008826:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685c      	ldr	r4, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	68d8      	ldr	r0, [r3, #12]
 8008830:	893b      	ldrh	r3, [r7, #8]
 8008832:	7af9      	ldrb	r1, [r7, #11]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	47a0      	blx	r4
 8008838:	6178      	str	r0, [r7, #20]

  return ret;
 800883a:	697b      	ldr	r3, [r7, #20]
}
 800883c:	4618      	mov	r0, r3
 800883e:	371c      	adds	r7, #28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}

08008844 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8008844:	b590      	push	{r4, r7, lr}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	607a      	str	r2, [r7, #4]
 800884e:	461a      	mov	r2, r3
 8008850:	460b      	mov	r3, r1
 8008852:	72fb      	strb	r3, [r7, #11]
 8008854:	4613      	mov	r3, r2
 8008856:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681c      	ldr	r4, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68d8      	ldr	r0, [r3, #12]
 8008860:	893b      	ldrh	r3, [r7, #8]
 8008862:	7af9      	ldrb	r1, [r7, #11]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	47a0      	blx	r4
 8008868:	6178      	str	r0, [r7, #20]

  return ret;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	371c      	adds	r7, #28
 8008870:	46bd      	mov	sp, r7
 8008872:	bd90      	pop	{r4, r7, pc}

08008874 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800887e:	f107 020c 	add.w	r2, r7, #12
 8008882:	2301      	movs	r3, #1
 8008884:	2120      	movs	r1, #32
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff ffc4 	bl	8008814 <lsm303agr_read_reg>
 800888c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d107      	bne.n	80088a4 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008894:	f107 0210 	add.w	r2, r7, #16
 8008898:	2301      	movs	r3, #1
 800889a:	2123      	movs	r1, #35	; 0x23
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff ffb9 	bl	8008814 <lsm303agr_read_reg>
 80088a2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 80088a4:	7b3b      	ldrb	r3, [r7, #12]
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2202      	movs	r2, #2
 80088b4:	701a      	strb	r2, [r3, #0]
 80088b6:	e00c      	b.n	80088d2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 80088b8:	7c3b      	ldrb	r3, [r7, #16]
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e002      	b.n	80088d2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2201      	movs	r2, #1
 80088d0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80088d2:	697b      	ldr	r3, [r7, #20]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80088e8:	f107 0208 	add.w	r2, r7, #8
 80088ec:	2301      	movs	r3, #1
 80088ee:	2120      	movs	r1, #32
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff ff8f 	bl	8008814 <lsm303agr_read_reg>
 80088f6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10f      	bne.n	800891e <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	b2da      	uxtb	r2, r3
 8008906:	7a3b      	ldrb	r3, [r7, #8]
 8008908:	f362 1307 	bfi	r3, r2, #4, #4
 800890c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800890e:	f107 0208 	add.w	r2, r7, #8
 8008912:	2301      	movs	r3, #1
 8008914:	2120      	movs	r1, #32
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff ff94 	bl	8008844 <lsm303agr_write_reg>
 800891c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800891e:	68fb      	ldr	r3, [r7, #12]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008932:	f107 0208 	add.w	r2, r7, #8
 8008936:	2301      	movs	r3, #1
 8008938:	2120      	movs	r1, #32
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff ff6a 	bl	8008814 <lsm303agr_read_reg>
 8008940:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 8008942:	7a3b      	ldrb	r3, [r7, #8]
 8008944:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b09      	cmp	r3, #9
 800894c:	d83e      	bhi.n	80089cc <lsm303agr_xl_data_rate_get+0xa4>
 800894e:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <lsm303agr_xl_data_rate_get+0x2c>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	0800897d 	.word	0x0800897d
 8008958:	08008985 	.word	0x08008985
 800895c:	0800898d 	.word	0x0800898d
 8008960:	08008995 	.word	0x08008995
 8008964:	0800899d 	.word	0x0800899d
 8008968:	080089a5 	.word	0x080089a5
 800896c:	080089ad 	.word	0x080089ad
 8008970:	080089b5 	.word	0x080089b5
 8008974:	080089bd 	.word	0x080089bd
 8008978:	080089c5 	.word	0x080089c5
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
      break;
 8008982:	e027      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2201      	movs	r2, #1
 8008988:	701a      	strb	r2, [r3, #0]
      break;
 800898a:	e023      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	2202      	movs	r2, #2
 8008990:	701a      	strb	r2, [r3, #0]
      break;
 8008992:	e01f      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2203      	movs	r2, #3
 8008998:	701a      	strb	r2, [r3, #0]
      break;
 800899a:	e01b      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2204      	movs	r2, #4
 80089a0:	701a      	strb	r2, [r3, #0]
      break;
 80089a2:	e017      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2205      	movs	r2, #5
 80089a8:	701a      	strb	r2, [r3, #0]
      break;
 80089aa:	e013      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2206      	movs	r2, #6
 80089b0:	701a      	strb	r2, [r3, #0]
      break;
 80089b2:	e00f      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2207      	movs	r2, #7
 80089b8:	701a      	strb	r2, [r3, #0]
      break;
 80089ba:	e00b      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2208      	movs	r2, #8
 80089c0:	701a      	strb	r2, [r3, #0]
      break;
 80089c2:	e007      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2209      	movs	r2, #9
 80089c8:	701a      	strb	r2, [r3, #0]
      break;
 80089ca:	e003      	b.n	80089d4 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	701a      	strb	r2, [r3, #0]
      break;
 80089d2:	bf00      	nop
  }

  return ret;
 80089d4:	68fb      	ldr	r3, [r7, #12]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop

080089e0 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80089ec:	f107 0208 	add.w	r2, r7, #8
 80089f0:	2301      	movs	r3, #1
 80089f2:	2123      	movs	r1, #35	; 0x23
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff ff0d 	bl	8008814 <lsm303agr_read_reg>
 80089fa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10f      	bne.n	8008a22 <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	7a3b      	ldrb	r3, [r7, #8]
 8008a0c:	f362 1305 	bfi	r3, r2, #4, #2
 8008a10:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	2301      	movs	r3, #1
 8008a18:	2123      	movs	r1, #35	; 0x23
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7ff ff12 	bl	8008844 <lsm303agr_write_reg>
 8008a20:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8008a22:	68fb      	ldr	r3, [r7, #12]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008a36:	f107 0208 	add.w	r2, r7, #8
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	2123      	movs	r1, #35	; 0x23
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f7ff fee8 	bl	8008814 <lsm303agr_read_reg>
 8008a44:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8008a46:	7a3b      	ldrb	r3, [r7, #8]
 8008a48:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d81a      	bhi.n	8008a88 <lsm303agr_xl_full_scale_get+0x5c>
 8008a52:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <lsm303agr_xl_full_scale_get+0x2c>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008a69 	.word	0x08008a69
 8008a5c:	08008a71 	.word	0x08008a71
 8008a60:	08008a79 	.word	0x08008a79
 8008a64:	08008a81 	.word	0x08008a81
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
      break;
 8008a6e:	e00f      	b.n	8008a90 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
      break;
 8008a76:	e00b      	b.n	8008a90 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	701a      	strb	r2, [r3, #0]
      break;
 8008a7e:	e007      	b.n	8008a90 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2203      	movs	r2, #3
 8008a84:	701a      	strb	r2, [r3, #0]
      break;
 8008a86:	e003      	b.n	8008a90 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	701a      	strb	r2, [r3, #0]
      break;
 8008a8e:	bf00      	nop
  }

  return ret;
 8008a90:	68fb      	ldr	r3, [r7, #12]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop

08008a9c <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008aa8:	f107 0208 	add.w	r2, r7, #8
 8008aac:	2301      	movs	r3, #1
 8008aae:	2123      	movs	r1, #35	; 0x23
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff feaf 	bl	8008814 <lsm303agr_read_reg>
 8008ab6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10f      	bne.n	8008ade <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8008abe:	78fb      	ldrb	r3, [r7, #3]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	7a3b      	ldrb	r3, [r7, #8]
 8008ac8:	f362 13c7 	bfi	r3, r2, #7, #1
 8008acc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008ace:	f107 0208 	add.w	r2, r7, #8
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	2123      	movs	r1, #35	; 0x23
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff feb4 	bl	8008844 <lsm303agr_write_reg>
 8008adc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8008ade:	68fb      	ldr	r3, [r7, #12]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8008af2:	f107 020c 	add.w	r2, r7, #12
 8008af6:	2306      	movs	r3, #6
 8008af8:	2128      	movs	r1, #40	; 0x28
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff fe8a 	bl	8008814 <lsm303agr_read_reg>
 8008b00:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008b02:	7b7b      	ldrb	r3, [r7, #13]
 8008b04:	b21a      	sxth	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	7b3b      	ldrb	r3, [r7, #12]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	b21a      	sxth	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008b24:	7bfa      	ldrb	r2, [r7, #15]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	3302      	adds	r3, #2
 8008b2a:	b212      	sxth	r2, r2
 8008b2c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	3302      	adds	r3, #2
 8008b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	4413      	add	r3, r2
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	3302      	adds	r3, #2
 8008b48:	b212      	sxth	r2, r2
 8008b4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008b4c:	7c7a      	ldrb	r2, [r7, #17]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	3304      	adds	r3, #4
 8008b52:	b212      	sxth	r2, r2
 8008b54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	7c3b      	ldrb	r3, [r7, #16]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	4413      	add	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	b212      	sxth	r2, r2
 8008b72:	801a      	strh	r2, [r3, #0]

  return ret;
 8008b74:	697b      	ldr	r3, [r7, #20]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008b8a:	f107 0208 	add.w	r2, r7, #8
 8008b8e:	2301      	movs	r3, #1
 8008b90:	2160      	movs	r1, #96	; 0x60
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fe3e 	bl	8008814 <lsm303agr_read_reg>
 8008b98:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10f      	bne.n	8008bc0 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	7a3b      	ldrb	r3, [r7, #8]
 8008baa:	f362 0301 	bfi	r3, r2, #0, #2
 8008bae:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008bb0:	f107 0208 	add.w	r2, r7, #8
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	2160      	movs	r1, #96	; 0x60
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fe43 	bl	8008844 <lsm303agr_write_reg>
 8008bbe:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008bd6:	f107 0208 	add.w	r2, r7, #8
 8008bda:	2301      	movs	r3, #1
 8008bdc:	2160      	movs	r1, #96	; 0x60
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7ff fe18 	bl	8008814 <lsm303agr_read_reg>
 8008be4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10f      	bne.n	8008c0c <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	7a3b      	ldrb	r3, [r7, #8]
 8008bf6:	f362 0383 	bfi	r3, r2, #2, #2
 8008bfa:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008bfc:	f107 0208 	add.w	r2, r7, #8
 8008c00:	2301      	movs	r3, #1
 8008c02:	2160      	movs	r1, #96	; 0x60
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f7ff fe1d 	bl	8008844 <lsm303agr_write_reg>
 8008c0a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008c22:	f107 0208 	add.w	r2, r7, #8
 8008c26:	2301      	movs	r3, #1
 8008c28:	2160      	movs	r1, #96	; 0x60
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fdf2 	bl	8008814 <lsm303agr_read_reg>
 8008c30:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 8008c32:	7a3b      	ldrb	r3, [r7, #8]
 8008c34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d81a      	bhi.n	8008c74 <lsm303agr_mag_data_rate_get+0x5c>
 8008c3e:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <lsm303agr_mag_data_rate_get+0x2c>)
 8008c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c5d 	.word	0x08008c5d
 8008c4c:	08008c65 	.word	0x08008c65
 8008c50:	08008c6d 	.word	0x08008c6d
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]
      break;
 8008c5a:	e00f      	b.n	8008c7c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	701a      	strb	r2, [r3, #0]
      break;
 8008c62:	e00b      	b.n	8008c7c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2202      	movs	r2, #2
 8008c68:	701a      	strb	r2, [r3, #0]
      break;
 8008c6a:	e007      	b.n	8008c7c <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2203      	movs	r2, #3
 8008c70:	701a      	strb	r2, [r3, #0]
      break;
 8008c72:	e003      	b.n	8008c7c <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	701a      	strb	r2, [r3, #0]
      break;
 8008c7a:	bf00      	nop
  }

  return ret;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop

08008c88 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8008c94:	f107 0208 	add.w	r2, r7, #8
 8008c98:	2301      	movs	r3, #1
 8008c9a:	2162      	movs	r1, #98	; 0x62
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fdb9 	bl	8008814 <lsm303agr_read_reg>
 8008ca2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10f      	bne.n	8008cca <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	7a3b      	ldrb	r3, [r7, #8]
 8008cb4:	f362 1304 	bfi	r3, r2, #4, #1
 8008cb8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8008cba:	f107 0208 	add.w	r2, r7, #8
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	2162      	movs	r1, #98	; 0x62
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fdbe 	bl	8008844 <lsm303agr_write_reg>
 8008cc8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8008cca:	68fb      	ldr	r3, [r7, #12]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8008cde:	f107 020c 	add.w	r2, r7, #12
 8008ce2:	2306      	movs	r3, #6
 8008ce4:	2168      	movs	r1, #104	; 0x68
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fd94 	bl	8008814 <lsm303agr_read_reg>
 8008cec:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008cee:	7b7b      	ldrb	r3, [r7, #13]
 8008cf0:	b21a      	sxth	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	7b3b      	ldrb	r3, [r7, #12]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	4413      	add	r3, r2
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	b21a      	sxth	r2, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008d10:	7bfa      	ldrb	r2, [r7, #15]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	3302      	adds	r3, #2
 8008d16:	b212      	sxth	r2, r2
 8008d18:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	3302      	adds	r3, #2
 8008d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	3302      	adds	r3, #2
 8008d34:	b212      	sxth	r2, r2
 8008d36:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008d38:	7c7a      	ldrb	r2, [r7, #17]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	b212      	sxth	r2, r2
 8008d40:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	3304      	adds	r3, #4
 8008d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	7c3b      	ldrb	r3, [r7, #16]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4413      	add	r3, r2
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	b212      	sxth	r2, r2
 8008d5e:	801a      	strh	r2, [r3, #0]

  return ret;
 8008d60:	697b      	ldr	r3, [r7, #20]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8008d74:	2301      	movs	r3, #1
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	210f      	movs	r1, #15
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fd4a 	bl	8008814 <lsm303agr_read_reg>
 8008d80:	60f8      	str	r0, [r7, #12]

  return ret;
 8008d82:	68fb      	ldr	r3, [r7, #12]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8008d96:	2301      	movs	r3, #1
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	214f      	movs	r1, #79	; 0x4f
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff fd39 	bl	8008814 <lsm303agr_read_reg>
 8008da2:	60f8      	str	r0, [r7, #12]

  return ret;
 8008da4:	68fb      	ldr	r3, [r7, #12]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8008dba:	f107 0208 	add.w	r2, r7, #8
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	2162      	movs	r1, #98	; 0x62
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fd26 	bl	8008814 <lsm303agr_read_reg>
 8008dc8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10f      	bne.n	8008df0 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	7a3b      	ldrb	r3, [r7, #8]
 8008dda:	f362 0341 	bfi	r3, r2, #1, #1
 8008dde:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8008de0:	f107 0208 	add.w	r2, r7, #8
 8008de4:	2301      	movs	r3, #1
 8008de6:	2162      	movs	r1, #98	; 0x62
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7ff fd2b 	bl	8008844 <lsm303agr_write_reg>
 8008dee:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8008df0:	68fb      	ldr	r3, [r7, #12]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8008e06:	f107 0208 	add.w	r2, r7, #8
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	212e      	movs	r1, #46	; 0x2e
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fd00 	bl	8008814 <lsm303agr_read_reg>
 8008e14:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10f      	bne.n	8008e3c <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	7a3b      	ldrb	r3, [r7, #8]
 8008e26:	f362 1387 	bfi	r3, r2, #6, #2
 8008e2a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8008e2c:	f107 0208 	add.w	r2, r7, #8
 8008e30:	2301      	movs	r3, #1
 8008e32:	212e      	movs	r1, #46	; 0x2e
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fd05 	bl	8008844 <lsm303agr_write_reg>
 8008e3a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8008e52:	f107 0208 	add.w	r2, r7, #8
 8008e56:	2301      	movs	r3, #1
 8008e58:	2162      	movs	r1, #98	; 0x62
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fcda 	bl	8008814 <lsm303agr_read_reg>
 8008e60:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10f      	bne.n	8008e88 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	b2da      	uxtb	r2, r3
 8008e70:	7a3b      	ldrb	r3, [r7, #8]
 8008e72:	f362 1345 	bfi	r3, r2, #5, #1
 8008e76:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8008e78:	f107 0208 	add.w	r2, r7, #8
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	2162      	movs	r1, #98	; 0x62
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff fcdf 	bl	8008844 <lsm303agr_write_reg>
 8008e86:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8008ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	e051      	b.n	8008f54 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689a      	ldr	r2, [r3, #8]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	7b1a      	ldrb	r2, [r3, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	695a      	ldr	r2, [r3, #20]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a1d      	ldr	r2, [pc, #116]	; (8008f60 <LSM6DSL_RegisterBusIO+0xcc>)
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a1c      	ldr	r2, [pc, #112]	; (8008f64 <LSM6DSL_RegisterBusIO+0xd0>)
 8008ef2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d103      	bne.n	8008f12 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8008f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e020      	b.n	8008f54 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4798      	blx	r3
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d003      	beq.n	8008f26 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	e016      	b.n	8008f54 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d112      	bne.n	8008f54 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10d      	bne.n	8008f54 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8008f38:	230c      	movs	r3, #12
 8008f3a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	2112      	movs	r1, #18
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fd2d 	bl	80099a2 <LSM6DSL_Write_Reg>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f52:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8008f54:	68fb      	ldr	r3, [r7, #12]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	08009e11 	.word	0x08009e11
 8008f64:	08009e47 	.word	0x08009e47

08008f68 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3320      	adds	r3, #32
 8008f74:	2101      	movs	r1, #1
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 fa59 	bl	800a42e <lsm6dsl_auto_increment_set>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	e054      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3320      	adds	r3, #32
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 f980 	bl	800a294 <lsm6dsl_block_data_update_set>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9e:	e048      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3320      	adds	r3, #32
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fa67 	bl	800a47a <lsm6dsl_fifo_mode_set>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	e03c      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2204      	movs	r2, #4
 8008fbc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3320      	adds	r3, #32
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 ffe6 	bl	8009f98 <lsm6dsl_xl_data_rate_set>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd6:	e02c      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3320      	adds	r3, #32
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 ff7c 	bl	8009edc <lsm6dsl_xl_full_scale_set>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8008fea:	f04f 33ff 	mov.w	r3, #4294967295
 8008fee:	e020      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2204      	movs	r2, #4
 8008ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3320      	adds	r3, #32
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 f8c0 	bl	800a184 <lsm6dsl_gy_data_rate_set>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800900a:	f04f 33ff 	mov.w	r3, #4294967295
 800900e:	e010      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3320      	adds	r3, #32
 8009014:	2106      	movs	r1, #6
 8009016:	4618      	mov	r0, r3
 8009018:	f001 f84c 	bl	800a0b4 <lsm6dsl_gy_full_scale_set>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	e004      	b.n	8009032 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f888 	bl	8009158 <LSM6DSL_ACC_Disable>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800904e:	f04f 33ff 	mov.w	r3, #4294967295
 8009052:	e015      	b.n	8009080 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fa9a 	bl	800958e <LSM6DSL_GYRO_Disable>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8009060:	f04f 33ff 	mov.w	r3, #4294967295
 8009064:	e00c      	b.n	8009080 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3320      	adds	r3, #32
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f9b7 	bl	800a40c <lsm6dsl_device_id_get>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d002      	beq.n	80090aa <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80090a4:	f04f 33ff 	mov.w	r3, #4294967295
 80090a8:	e000      	b.n	80090ac <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2201      	movs	r2, #1
 80090c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2201      	movs	r2, #1
 80090c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2200      	movs	r2, #0
 80090ce:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80090dc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2210      	movs	r2, #16
 80090e2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	4a07      	ldr	r2, [pc, #28]	; (800910c <LSM6DSL_GetCapabilities+0x58>)
 80090ee:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	4a06      	ldr	r2, [pc, #24]	; (800910c <LSM6DSL_GetCapabilities+0x58>)
 80090f4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	45d02000 	.word	0x45d02000

08009110 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	e014      	b.n	8009150 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f103 0220 	add.w	r2, r3, #32
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009132:	4619      	mov	r1, r3
 8009134:	4610      	mov	r0, r2
 8009136:	f000 ff2f 	bl	8009f98 <lsm6dsl_xl_data_rate_set>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8009140:	f04f 33ff 	mov.w	r3, #4294967295
 8009144:	e004      	b.n	8009150 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e01f      	b.n	80091ae <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f103 0220 	add.w	r2, r3, #32
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3333      	adds	r3, #51	; 0x33
 8009178:	4619      	mov	r1, r3
 800917a:	4610      	mov	r0, r2
 800917c:	f000 ff32 	bl	8009fe4 <lsm6dsl_xl_data_rate_get>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8009186:	f04f 33ff 	mov.w	r3, #4294967295
 800918a:	e010      	b.n	80091ae <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3320      	adds	r3, #32
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f000 ff00 	bl	8009f98 <lsm6dsl_xl_data_rate_set>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800919e:	f04f 33ff 	mov.w	r3, #4294967295
 80091a2:	e004      	b.n	80091ae <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
	...

080091b8 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3320      	adds	r3, #32
 80091ca:	f107 020b 	add.w	r2, r7, #11
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fea9 	bl	8009f28 <lsm6dsl_xl_full_scale_get>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80091dc:	f04f 33ff 	mov.w	r3, #4294967295
 80091e0:	e023      	b.n	800922a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d81b      	bhi.n	8009220 <LSM6DSL_ACC_GetSensitivity+0x68>
 80091e8:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	08009201 	.word	0x08009201
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009209 	.word	0x08009209
 80091fc:	08009211 	.word	0x08009211
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	4a0c      	ldr	r2, [pc, #48]	; (8009234 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8009204:	601a      	str	r2, [r3, #0]
      break;
 8009206:	e00f      	b.n	8009228 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	4a0b      	ldr	r2, [pc, #44]	; (8009238 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800920c:	601a      	str	r2, [r3, #0]
      break;
 800920e:	e00b      	b.n	8009228 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	4a0a      	ldr	r2, [pc, #40]	; (800923c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8009214:	601a      	str	r2, [r3, #0]
      break;
 8009216:	e007      	b.n	8009228 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	4a09      	ldr	r2, [pc, #36]	; (8009240 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800921c:	601a      	str	r2, [r3, #0]
      break;
 800921e:	e003      	b.n	8009228 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8009220:	f04f 33ff 	mov.w	r3, #4294967295
 8009224:	60fb      	str	r3, [r7, #12]
      break;
 8009226:	bf00      	nop
  }

  return ret;
 8009228:	68fb      	ldr	r3, [r7, #12]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	3d79db23 	.word	0x3d79db23
 8009238:	3df9db23 	.word	0x3df9db23
 800923c:	3e79db23 	.word	0x3e79db23
 8009240:	3ef9db23 	.word	0x3ef9db23

08009244 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3320      	adds	r3, #32
 8009256:	f107 020b 	add.w	r2, r7, #11
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fec1 	bl	8009fe4 <lsm6dsl_xl_data_rate_get>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	e054      	b.n	8009318 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	2b0b      	cmp	r3, #11
 8009272:	d84c      	bhi.n	800930e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092ad 	.word	0x080092ad
 8009280:	080092bf 	.word	0x080092bf
 8009284:	080092c7 	.word	0x080092c7
 8009288:	080092cf 	.word	0x080092cf
 800928c:	080092d7 	.word	0x080092d7
 8009290:	080092df 	.word	0x080092df
 8009294:	080092e7 	.word	0x080092e7
 8009298:	080092ef 	.word	0x080092ef
 800929c:	080092f7 	.word	0x080092f7
 80092a0:	080092ff 	.word	0x080092ff
 80092a4:	08009307 	.word	0x08009307
 80092a8:	080092b7 	.word	0x080092b7
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
      break;
 80092b4:	e02f      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	4a19      	ldr	r2, [pc, #100]	; (8009320 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80092ba:	601a      	str	r2, [r3, #0]
      break;
 80092bc:	e02b      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	4a18      	ldr	r2, [pc, #96]	; (8009324 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80092c2:	601a      	str	r2, [r3, #0]
      break;
 80092c4:	e027      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	4a17      	ldr	r2, [pc, #92]	; (8009328 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80092ca:	601a      	str	r2, [r3, #0]
      break;
 80092cc:	e023      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	4a16      	ldr	r2, [pc, #88]	; (800932c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80092d2:	601a      	str	r2, [r3, #0]
      break;
 80092d4:	e01f      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	4a15      	ldr	r2, [pc, #84]	; (8009330 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80092da:	601a      	str	r2, [r3, #0]
      break;
 80092dc:	e01b      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	4a14      	ldr	r2, [pc, #80]	; (8009334 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80092e2:	601a      	str	r2, [r3, #0]
      break;
 80092e4:	e017      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	4a13      	ldr	r2, [pc, #76]	; (8009338 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 80092ea:	601a      	str	r2, [r3, #0]
      break;
 80092ec:	e013      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	4a12      	ldr	r2, [pc, #72]	; (800933c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 80092f2:	601a      	str	r2, [r3, #0]
      break;
 80092f4:	e00f      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	4a11      	ldr	r2, [pc, #68]	; (8009340 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 80092fa:	601a      	str	r2, [r3, #0]
      break;
 80092fc:	e00b      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	4a10      	ldr	r2, [pc, #64]	; (8009344 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8009302:	601a      	str	r2, [r3, #0]
      break;
 8009304:	e007      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	4a0f      	ldr	r2, [pc, #60]	; (8009348 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800930a:	601a      	str	r2, [r3, #0]
      break;
 800930c:	e003      	b.n	8009316 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	60fb      	str	r3, [r7, #12]
      break;
 8009314:	bf00      	nop
  }

  return ret;
 8009316:	68fb      	ldr	r3, [r7, #12]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	3fcccccd 	.word	0x3fcccccd
 8009324:	41480000 	.word	0x41480000
 8009328:	41d00000 	.word	0x41d00000
 800932c:	42500000 	.word	0x42500000
 8009330:	42d00000 	.word	0x42d00000
 8009334:	43500000 	.word	0x43500000
 8009338:	43d00000 	.word	0x43d00000
 800933c:	44504000 	.word	0x44504000
 8009340:	44cf8000 	.word	0x44cf8000
 8009344:	45502000 	.word	0x45502000
 8009348:	45d02000 	.word	0x45d02000

0800934c <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800935e:	2b01      	cmp	r3, #1
 8009360:	d106      	bne.n	8009370 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009362:	ed97 0a00 	vldr	s0, [r7]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fb36 	bl	80099d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800936c:	4603      	mov	r3, r0
 800936e:	e005      	b.n	800937c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009370:	ed97 0a00 	vldr	s0, [r7]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fbbb 	bl	8009af0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800937a:	4603      	mov	r3, r0
  }
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3320      	adds	r3, #32
 8009396:	f107 020b 	add.w	r2, r7, #11
 800939a:	4611      	mov	r1, r2
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fdc3 	bl	8009f28 <lsm6dsl_xl_full_scale_get>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80093a8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ac:	e023      	b.n	80093f6 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d81b      	bhi.n	80093ec <LSM6DSL_ACC_GetFullScale+0x68>
 80093b4:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <LSM6DSL_ACC_GetFullScale+0x38>)
 80093b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ba:	bf00      	nop
 80093bc:	080093cd 	.word	0x080093cd
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093dd 	.word	0x080093dd
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2202      	movs	r2, #2
 80093d0:	601a      	str	r2, [r3, #0]
      break;
 80093d2:	e00f      	b.n	80093f4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2204      	movs	r2, #4
 80093d8:	601a      	str	r2, [r3, #0]
      break;
 80093da:	e00b      	b.n	80093f4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2208      	movs	r2, #8
 80093e0:	601a      	str	r2, [r3, #0]
      break;
 80093e2:	e007      	b.n	80093f4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2210      	movs	r2, #16
 80093e8:	601a      	str	r2, [r3, #0]
      break;
 80093ea:	e003      	b.n	80093f4 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295
 80093f0:	60fb      	str	r3, [r7, #12]
      break;
 80093f2:	bf00      	nop
  }

  return ret;
 80093f4:	68fb      	ldr	r3, [r7, #12]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop

08009400 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b02      	cmp	r3, #2
 800940e:	dd0b      	ble.n	8009428 <LSM6DSL_ACC_SetFullScale+0x28>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b04      	cmp	r3, #4
 8009414:	dd06      	ble.n	8009424 <LSM6DSL_ACC_SetFullScale+0x24>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2b08      	cmp	r3, #8
 800941a:	dc01      	bgt.n	8009420 <LSM6DSL_ACC_SetFullScale+0x20>
 800941c:	2303      	movs	r3, #3
 800941e:	e004      	b.n	800942a <LSM6DSL_ACC_SetFullScale+0x2a>
 8009420:	2301      	movs	r3, #1
 8009422:	e002      	b.n	800942a <LSM6DSL_ACC_SetFullScale+0x2a>
 8009424:	2302      	movs	r3, #2
 8009426:	e000      	b.n	800942a <LSM6DSL_ACC_SetFullScale+0x2a>
 8009428:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800942a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3320      	adds	r3, #32
 8009430:	7bfa      	ldrb	r2, [r7, #15]
 8009432:	4611      	mov	r1, r2
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fd51 	bl	8009edc <lsm6dsl_xl_full_scale_set>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8009440:	f04f 33ff 	mov.w	r3, #4294967295
 8009444:	e000      	b.n	8009448 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3320      	adds	r3, #32
 800945e:	f107 0208 	add.w	r2, r7, #8
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f000 ff86 	bl	800a376 <lsm6dsl_acceleration_raw_get>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	e00c      	b.n	8009490 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8009476:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800947e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8009486:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80094a2:	f04f 0300 	mov.w	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3320      	adds	r3, #32
 80094ac:	f107 0210 	add.w	r2, r7, #16
 80094b0:	4611      	mov	r1, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 ff5f 	bl	800a376 <lsm6dsl_acceleration_raw_get>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d002      	beq.n	80094c4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80094be:	f04f 33ff 	mov.w	r3, #4294967295
 80094c2:	e03c      	b.n	800953e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80094c4:	f107 030c 	add.w	r3, r7, #12
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fe74 	bl	80091b8 <LSM6DSL_ACC_GetSensitivity>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80094d6:	f04f 33ff 	mov.w	r3, #4294967295
 80094da:	e030      	b.n	800953e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80094dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80094e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80094ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094f4:	ee17 2a90 	vmov	r2, s15
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80094fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009500:	ee07 3a90 	vmov	s15, r3
 8009504:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009508:	edd7 7a03 	vldr	s15, [r7, #12]
 800950c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009514:	ee17 2a90 	vmov	r2, s15
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800951c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009520:	ee07 3a90 	vmov	s15, r3
 8009524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009528:	edd7 7a03 	vldr	s15, [r7, #12]
 800952c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009534:	ee17 2a90 	vmov	r2, s15
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009554:	2b01      	cmp	r3, #1
 8009556:	d101      	bne.n	800955c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	e014      	b.n	8009586 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f103 0220 	add.w	r2, r3, #32
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f000 fe0a 	bl	800a184 <lsm6dsl_gy_data_rate_set>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8009576:	f04f 33ff 	mov.w	r3, #4294967295
 800957a:	e004      	b.n	8009586 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e01f      	b.n	80095e4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f103 0220 	add.w	r2, r3, #32
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3334      	adds	r3, #52	; 0x34
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f000 fe0d 	bl	800a1d0 <lsm6dsl_gy_data_rate_get>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80095bc:	f04f 33ff 	mov.w	r3, #4294967295
 80095c0:	e010      	b.n	80095e4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3320      	adds	r3, #32
 80095c6:	2100      	movs	r1, #0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fddb 	bl	800a184 <lsm6dsl_gy_data_rate_set>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d002      	beq.n	80095da <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80095d4:	f04f 33ff 	mov.w	r3, #4294967295
 80095d8:	e004      	b.n	80095e4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	3320      	adds	r3, #32
 80095fe:	f107 020b 	add.w	r2, r7, #11
 8009602:	4611      	mov	r1, r2
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fd7b 	bl	800a100 <lsm6dsl_gy_full_scale_get>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8009610:	f04f 33ff 	mov.w	r3, #4294967295
 8009614:	e02d      	b.n	8009672 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	2b06      	cmp	r3, #6
 800961a:	d825      	bhi.n	8009668 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800961c:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	08009649 	.word	0x08009649
 8009628:	08009641 	.word	0x08009641
 800962c:	08009651 	.word	0x08009651
 8009630:	08009669 	.word	0x08009669
 8009634:	08009659 	.word	0x08009659
 8009638:	08009669 	.word	0x08009669
 800963c:	08009661 	.word	0x08009661
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	4a0e      	ldr	r2, [pc, #56]	; (800967c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8009644:	601a      	str	r2, [r3, #0]
      break;
 8009646:	e013      	b.n	8009670 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	4a0d      	ldr	r2, [pc, #52]	; (8009680 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800964c:	601a      	str	r2, [r3, #0]
      break;
 800964e:	e00f      	b.n	8009670 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	4a0c      	ldr	r2, [pc, #48]	; (8009684 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8009654:	601a      	str	r2, [r3, #0]
      break;
 8009656:	e00b      	b.n	8009670 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	4a0b      	ldr	r2, [pc, #44]	; (8009688 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800965c:	601a      	str	r2, [r3, #0]
      break;
 800965e:	e007      	b.n	8009670 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	4a0a      	ldr	r2, [pc, #40]	; (800968c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8009664:	601a      	str	r2, [r3, #0]
      break;
 8009666:	e003      	b.n	8009670 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8009668:	f04f 33ff 	mov.w	r3, #4294967295
 800966c:	60fb      	str	r3, [r7, #12]
      break;
 800966e:	bf00      	nop
  }

  return ret;
 8009670:	68fb      	ldr	r3, [r7, #12]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	408c0000 	.word	0x408c0000
 8009680:	410c0000 	.word	0x410c0000
 8009684:	418c0000 	.word	0x418c0000
 8009688:	420c0000 	.word	0x420c0000
 800968c:	428c0000 	.word	0x428c0000

08009690 <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3320      	adds	r3, #32
 80096a2:	f107 020b 	add.w	r2, r7, #11
 80096a6:	4611      	mov	r1, r2
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fd91 	bl	800a1d0 <lsm6dsl_gy_data_rate_get>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80096b4:	f04f 33ff 	mov.w	r3, #4294967295
 80096b8:	e04e      	b.n	8009758 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	2b0a      	cmp	r3, #10
 80096be:	d846      	bhi.n	800974e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80096c0:	a201      	add	r2, pc, #4	; (adr r2, 80096c8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80096c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c6:	bf00      	nop
 80096c8:	080096f5 	.word	0x080096f5
 80096cc:	080096ff 	.word	0x080096ff
 80096d0:	08009707 	.word	0x08009707
 80096d4:	0800970f 	.word	0x0800970f
 80096d8:	08009717 	.word	0x08009717
 80096dc:	0800971f 	.word	0x0800971f
 80096e0:	08009727 	.word	0x08009727
 80096e4:	0800972f 	.word	0x0800972f
 80096e8:	08009737 	.word	0x08009737
 80096ec:	0800973f 	.word	0x0800973f
 80096f0:	08009747 	.word	0x08009747
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
      break;
 80096fc:	e02b      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	4a17      	ldr	r2, [pc, #92]	; (8009760 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8009702:	601a      	str	r2, [r3, #0]
      break;
 8009704:	e027      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	4a16      	ldr	r2, [pc, #88]	; (8009764 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800970a:	601a      	str	r2, [r3, #0]
      break;
 800970c:	e023      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	4a15      	ldr	r2, [pc, #84]	; (8009768 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8009712:	601a      	str	r2, [r3, #0]
      break;
 8009714:	e01f      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	4a14      	ldr	r2, [pc, #80]	; (800976c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800971a:	601a      	str	r2, [r3, #0]
      break;
 800971c:	e01b      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	4a13      	ldr	r2, [pc, #76]	; (8009770 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8009722:	601a      	str	r2, [r3, #0]
      break;
 8009724:	e017      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	4a12      	ldr	r2, [pc, #72]	; (8009774 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800972a:	601a      	str	r2, [r3, #0]
      break;
 800972c:	e013      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	4a11      	ldr	r2, [pc, #68]	; (8009778 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8009732:	601a      	str	r2, [r3, #0]
      break;
 8009734:	e00f      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	4a10      	ldr	r2, [pc, #64]	; (800977c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800973a:	601a      	str	r2, [r3, #0]
      break;
 800973c:	e00b      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	4a0f      	ldr	r2, [pc, #60]	; (8009780 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8009742:	601a      	str	r2, [r3, #0]
      break;
 8009744:	e007      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	4a0e      	ldr	r2, [pc, #56]	; (8009784 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800974a:	601a      	str	r2, [r3, #0]
      break;
 800974c:	e003      	b.n	8009756 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	60fb      	str	r3, [r7, #12]
      break;
 8009754:	bf00      	nop
  }

  return ret;
 8009756:	68fb      	ldr	r3, [r7, #12]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	41480000 	.word	0x41480000
 8009764:	41d00000 	.word	0x41d00000
 8009768:	42500000 	.word	0x42500000
 800976c:	42d00000 	.word	0x42d00000
 8009770:	43500000 	.word	0x43500000
 8009774:	43d00000 	.word	0x43d00000
 8009778:	44504000 	.word	0x44504000
 800977c:	44cf8000 	.word	0x44cf8000
 8009780:	45502000 	.word	0x45502000
 8009784:	45d02000 	.word	0x45d02000

08009788 <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800979a:	2b01      	cmp	r3, #1
 800979c:	d106      	bne.n	80097ac <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800979e:	ed97 0a00 	vldr	s0, [r7]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa26 	bl	8009bf4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80097a8:	4603      	mov	r3, r0
 80097aa:	e005      	b.n	80097b8 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80097ac:	ed97 0a00 	vldr	s0, [r7]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 faab 	bl	8009d0c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80097b6:	4603      	mov	r3, r0
  }
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3320      	adds	r3, #32
 80097d2:	f107 020b 	add.w	r2, r7, #11
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fc91 	bl	800a100 <lsm6dsl_gy_full_scale_get>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80097e4:	f04f 33ff 	mov.w	r3, #4294967295
 80097e8:	e030      	b.n	800984c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	2b06      	cmp	r3, #6
 80097ee:	d828      	bhi.n	8009842 <LSM6DSL_GYRO_GetFullScale+0x82>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	0800981d 	.word	0x0800981d
 80097fc:	08009815 	.word	0x08009815
 8009800:	08009825 	.word	0x08009825
 8009804:	08009843 	.word	0x08009843
 8009808:	0800982f 	.word	0x0800982f
 800980c:	08009843 	.word	0x08009843
 8009810:	08009839 	.word	0x08009839
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	227d      	movs	r2, #125	; 0x7d
 8009818:	601a      	str	r2, [r3, #0]
      break;
 800981a:	e016      	b.n	800984a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	22fa      	movs	r2, #250	; 0xfa
 8009820:	601a      	str	r2, [r3, #0]
      break;
 8009822:	e012      	b.n	800984a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800982a:	601a      	str	r2, [r3, #0]
      break;
 800982c:	e00d      	b.n	800984a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009834:	601a      	str	r2, [r3, #0]
      break;
 8009836:	e008      	b.n	800984a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800983e:	601a      	str	r2, [r3, #0]
      break;
 8009840:	e003      	b.n	800984a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8009842:	f04f 33ff 	mov.w	r3, #4294967295
 8009846:	60fb      	str	r3, [r7, #12]
      break;
 8009848:	bf00      	nop
  }

  return ret;
 800984a:	68fb      	ldr	r3, [r7, #12]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b7d      	cmp	r3, #125	; 0x7d
 8009862:	dd12      	ble.n	800988a <LSM6DSL_GYRO_SetFullScale+0x36>
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2bfa      	cmp	r3, #250	; 0xfa
 8009868:	dd0d      	ble.n	8009886 <LSM6DSL_GYRO_SetFullScale+0x32>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009870:	dd07      	ble.n	8009882 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009878:	dc01      	bgt.n	800987e <LSM6DSL_GYRO_SetFullScale+0x2a>
 800987a:	2304      	movs	r3, #4
 800987c:	e006      	b.n	800988c <LSM6DSL_GYRO_SetFullScale+0x38>
 800987e:	2306      	movs	r3, #6
 8009880:	e004      	b.n	800988c <LSM6DSL_GYRO_SetFullScale+0x38>
 8009882:	2302      	movs	r3, #2
 8009884:	e002      	b.n	800988c <LSM6DSL_GYRO_SetFullScale+0x38>
 8009886:	2300      	movs	r3, #0
 8009888:	e000      	b.n	800988c <LSM6DSL_GYRO_SetFullScale+0x38>
 800988a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800988c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3320      	adds	r3, #32
 8009892:	7bfa      	ldrb	r2, [r7, #15]
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fc0c 	bl	800a0b4 <lsm6dsl_gy_full_scale_set>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295
 80098a6:	e000      	b.n	80098aa <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3320      	adds	r3, #32
 80098c0:	f107 0208 	add.w	r2, r7, #8
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fd0a 	bl	800a2e0 <lsm6dsl_angular_rate_raw_get>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295
 80098d6:	e00c      	b.n	80098f2 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80098d8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80098e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80098e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3320      	adds	r3, #32
 8009908:	f107 0210 	add.w	r2, r7, #16
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fce6 	bl	800a2e0 <lsm6dsl_angular_rate_raw_get>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800991a:	f04f 33ff 	mov.w	r3, #4294967295
 800991e:	e03c      	b.n	800999a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8009920:	f107 030c 	add.w	r3, r7, #12
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff fe60 	bl	80095ec <LSM6DSL_GYRO_GetSensitivity>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8009932:	f04f 33ff 	mov.w	r3, #4294967295
 8009936:	e030      	b.n	800999a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009938:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009944:	edd7 7a03 	vldr	s15, [r7, #12]
 8009948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009950:	ee17 2a90 	vmov	r2, s15
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009958:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009964:	edd7 7a03 	vldr	s15, [r7, #12]
 8009968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009970:	ee17 2a90 	vmov	r2, s15
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8009978:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009984:	edd7 7a03 	vldr	s15, [r7, #12]
 8009988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009990:	ee17 2a90 	vmov	r2, s15
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b082      	sub	sp, #8
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
 80099ae:	4613      	mov	r3, r2
 80099b0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f103 0020 	add.w	r0, r3, #32
 80099b8:	1cba      	adds	r2, r7, #2
 80099ba:	78f9      	ldrb	r1, [r7, #3]
 80099bc:	2301      	movs	r3, #1
 80099be:	f000 fa75 	bl	8009eac <lsm6dsl_write_reg>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80099c8:	f04f 33ff 	mov.w	r3, #4294967295
 80099cc:	e000      	b.n	80099d0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80099e4:	edd7 7a00 	vldr	s15, [r7]
 80099e8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80099ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f4:	d801      	bhi.n	80099fa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e058      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80099fa:	edd7 7a00 	vldr	s15, [r7]
 80099fe:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0a:	d801      	bhi.n	8009a10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e04d      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a10:	edd7 7a00 	vldr	s15, [r7]
 8009a14:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009ad4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8009a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a20:	d801      	bhi.n	8009a26 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009a22:	2303      	movs	r3, #3
 8009a24:	e042      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a26:	edd7 7a00 	vldr	s15, [r7]
 8009a2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009ad8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a36:	d801      	bhi.n	8009a3c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	e037      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a3c:	edd7 7a00 	vldr	s15, [r7]
 8009a40:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009adc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8009a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4c:	d801      	bhi.n	8009a52 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8009a4e:	2305      	movs	r3, #5
 8009a50:	e02c      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a52:	edd7 7a00 	vldr	s15, [r7]
 8009a56:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009ae0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8009a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a62:	d801      	bhi.n	8009a68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009a64:	2306      	movs	r3, #6
 8009a66:	e021      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a68:	edd7 7a00 	vldr	s15, [r7]
 8009a6c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009ae4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8009a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a78:	d801      	bhi.n	8009a7e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8009a7a:	2307      	movs	r3, #7
 8009a7c:	e016      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a7e:	edd7 7a00 	vldr	s15, [r7]
 8009a82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009ae8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8009a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a8e:	d801      	bhi.n	8009a94 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8009a90:	2308      	movs	r3, #8
 8009a92:	e00b      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009a94:	edd7 7a00 	vldr	s15, [r7]
 8009a98:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009aec <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8009a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa4:	d801      	bhi.n	8009aaa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8009aa6:	2309      	movs	r3, #9
 8009aa8:	e000      	b.n	8009aac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009aaa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8009aac:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3320      	adds	r3, #32
 8009ab2:	7bfa      	ldrb	r2, [r7, #15]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fa6e 	bl	8009f98 <lsm6dsl_xl_data_rate_set>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d002      	beq.n	8009ac8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8009ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac6:	e000      	b.n	8009aca <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	42500000 	.word	0x42500000
 8009ad8:	42d00000 	.word	0x42d00000
 8009adc:	43500000 	.word	0x43500000
 8009ae0:	43d00000 	.word	0x43d00000
 8009ae4:	44504000 	.word	0x44504000
 8009ae8:	44cf8000 	.word	0x44cf8000
 8009aec:	45502000 	.word	0x45502000

08009af0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8009afc:	edd7 7a00 	vldr	s15, [r7]
 8009b00:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0c:	d801      	bhi.n	8009b12 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e058      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b12:	edd7 7a00 	vldr	s15, [r7]
 8009b16:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b22:	d801      	bhi.n	8009b28 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e04d      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b28:	edd7 7a00 	vldr	s15, [r7]
 8009b2c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009bd8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b38:	d801      	bhi.n	8009b3e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e042      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b3e:	edd7 7a00 	vldr	s15, [r7]
 8009b42:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009bdc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8009b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b4e:	d801      	bhi.n	8009b54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009b50:	2304      	movs	r3, #4
 8009b52:	e037      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b54:	edd7 7a00 	vldr	s15, [r7]
 8009b58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009be0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8009b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b64:	d801      	bhi.n	8009b6a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009b66:	2305      	movs	r3, #5
 8009b68:	e02c      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b6a:	edd7 7a00 	vldr	s15, [r7]
 8009b6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009be4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8009b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7a:	d801      	bhi.n	8009b80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8009b7c:	2306      	movs	r3, #6
 8009b7e:	e021      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b80:	edd7 7a00 	vldr	s15, [r7]
 8009b84:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009be8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8009b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b90:	d801      	bhi.n	8009b96 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8009b92:	2307      	movs	r3, #7
 8009b94:	e016      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009b96:	edd7 7a00 	vldr	s15, [r7]
 8009b9a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009bec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8009b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba6:	d801      	bhi.n	8009bac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	e00b      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009bac:	edd7 7a00 	vldr	s15, [r7]
 8009bb0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009bf0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bbc:	d801      	bhi.n	8009bc2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8009bbe:	2309      	movs	r3, #9
 8009bc0:	e000      	b.n	8009bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009bc2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	42500000 	.word	0x42500000
 8009bdc:	42d00000 	.word	0x42d00000
 8009be0:	43500000 	.word	0x43500000
 8009be4:	43d00000 	.word	0x43d00000
 8009be8:	44504000 	.word	0x44504000
 8009bec:	44cf8000 	.word	0x44cf8000
 8009bf0:	45502000 	.word	0x45502000

08009bf4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8009c00:	edd7 7a00 	vldr	s15, [r7]
 8009c04:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c10:	d801      	bhi.n	8009c16 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e058      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c16:	edd7 7a00 	vldr	s15, [r7]
 8009c1a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c26:	d801      	bhi.n	8009c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e04d      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c2c:	edd7 7a00 	vldr	s15, [r7]
 8009c30:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009cf0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8009c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c3c:	d801      	bhi.n	8009c42 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e042      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c42:	edd7 7a00 	vldr	s15, [r7]
 8009c46:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009cf4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8009c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c52:	d801      	bhi.n	8009c58 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8009c54:	2304      	movs	r3, #4
 8009c56:	e037      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c58:	edd7 7a00 	vldr	s15, [r7]
 8009c5c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009cf8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8009c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c68:	d801      	bhi.n	8009c6e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8009c6a:	2305      	movs	r3, #5
 8009c6c:	e02c      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c6e:	edd7 7a00 	vldr	s15, [r7]
 8009c72:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009cfc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8009c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c7e:	d801      	bhi.n	8009c84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8009c80:	2306      	movs	r3, #6
 8009c82:	e021      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c84:	edd7 7a00 	vldr	s15, [r7]
 8009c88:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009d00 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8009c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	d801      	bhi.n	8009c9a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8009c96:	2307      	movs	r3, #7
 8009c98:	e016      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009c9a:	edd7 7a00 	vldr	s15, [r7]
 8009c9e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009d04 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8009ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009caa:	d801      	bhi.n	8009cb0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009cac:	2308      	movs	r3, #8
 8009cae:	e00b      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009cb0:	edd7 7a00 	vldr	s15, [r7]
 8009cb4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009d08 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8009cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc0:	d801      	bhi.n	8009cc6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8009cc2:	2309      	movs	r3, #9
 8009cc4:	e000      	b.n	8009cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009cc6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8009cc8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3320      	adds	r3, #32
 8009cce:	7bfa      	ldrb	r2, [r7, #15]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fa56 	bl	800a184 <lsm6dsl_gy_data_rate_set>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce2:	e000      	b.n	8009ce6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	42500000 	.word	0x42500000
 8009cf4:	42d00000 	.word	0x42d00000
 8009cf8:	43500000 	.word	0x43500000
 8009cfc:	43d00000 	.word	0x43d00000
 8009d00:	44504000 	.word	0x44504000
 8009d04:	44cf8000 	.word	0x44cf8000
 8009d08:	45502000 	.word	0x45502000

08009d0c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8009d18:	edd7 7a00 	vldr	s15, [r7]
 8009d1c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d28:	d801      	bhi.n	8009d2e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e058      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009d2e:	edd7 7a00 	vldr	s15, [r7]
 8009d32:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3e:	d801      	bhi.n	8009d44 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e04d      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009d44:	edd7 7a00 	vldr	s15, [r7]
 8009d48:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009df4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d54:	d801      	bhi.n	8009d5a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8009d56:	2303      	movs	r3, #3
 8009d58:	e042      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009d5a:	edd7 7a00 	vldr	s15, [r7]
 8009d5e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009df8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8009d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6a:	d801      	bhi.n	8009d70 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8009d6c:	2304      	movs	r3, #4
 8009d6e:	e037      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009d70:	edd7 7a00 	vldr	s15, [r7]
 8009d74:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009dfc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8009d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d80:	d801      	bhi.n	8009d86 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8009d82:	2305      	movs	r3, #5
 8009d84:	e02c      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009d86:	edd7 7a00 	vldr	s15, [r7]
 8009d8a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009e00 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8009d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d96:	d801      	bhi.n	8009d9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009d98:	2306      	movs	r3, #6
 8009d9a:	e021      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009d9c:	edd7 7a00 	vldr	s15, [r7]
 8009da0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009e04 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8009da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dac:	d801      	bhi.n	8009db2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8009dae:	2307      	movs	r3, #7
 8009db0:	e016      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009db2:	edd7 7a00 	vldr	s15, [r7]
 8009db6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009e08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8009dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	d801      	bhi.n	8009dc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009dc4:	2308      	movs	r3, #8
 8009dc6:	e00b      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009dc8:	edd7 7a00 	vldr	s15, [r7]
 8009dcc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009e0c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8009dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd8:	d801      	bhi.n	8009dde <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8009dda:	2309      	movs	r3, #9
 8009ddc:	e000      	b.n	8009de0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8009dde:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	42500000 	.word	0x42500000
 8009df8:	42d00000 	.word	0x42d00000
 8009dfc:	43500000 	.word	0x43500000
 8009e00:	43d00000 	.word	0x43d00000
 8009e04:	44504000 	.word	0x44504000
 8009e08:	44cf8000 	.word	0x44cf8000
 8009e0c:	45502000 	.word	0x45502000

08009e10 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009e10:	b590      	push	{r4, r7, lr}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	607a      	str	r2, [r7, #4]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	72fb      	strb	r3, [r7, #11]
 8009e20:	4613      	mov	r3, r2
 8009e22:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	695c      	ldr	r4, [r3, #20]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	7b1b      	ldrb	r3, [r3, #12]
 8009e30:	b298      	uxth	r0, r3
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	b299      	uxth	r1, r3
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	47a0      	blx	r4
 8009e3c:	4603      	mov	r3, r0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	371c      	adds	r7, #28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd90      	pop	{r4, r7, pc}

08009e46 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009e46:	b590      	push	{r4, r7, lr}
 8009e48:	b087      	sub	sp, #28
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	461a      	mov	r2, r3
 8009e52:	460b      	mov	r3, r1
 8009e54:	72fb      	strb	r3, [r7, #11]
 8009e56:	4613      	mov	r3, r2
 8009e58:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	691c      	ldr	r4, [r3, #16]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	7b1b      	ldrb	r3, [r3, #12]
 8009e66:	b298      	uxth	r0, r3
 8009e68:	7afb      	ldrb	r3, [r7, #11]
 8009e6a:	b299      	uxth	r1, r3
 8009e6c:	893b      	ldrh	r3, [r7, #8]
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	47a0      	blx	r4
 8009e72:	4603      	mov	r3, r0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd90      	pop	{r4, r7, pc}

08009e7c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8009e7c:	b590      	push	{r4, r7, lr}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	461a      	mov	r2, r3
 8009e88:	460b      	mov	r3, r1
 8009e8a:	72fb      	strb	r3, [r7, #11]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	685c      	ldr	r4, [r3, #4]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	68d8      	ldr	r0, [r3, #12]
 8009e98:	893b      	ldrh	r3, [r7, #8]
 8009e9a:	7af9      	ldrb	r1, [r7, #11]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	47a0      	blx	r4
 8009ea0:	6178      	str	r0, [r7, #20]

  return ret;
 8009ea2:	697b      	ldr	r3, [r7, #20]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd90      	pop	{r4, r7, pc}

08009eac <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	607a      	str	r2, [r7, #4]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	460b      	mov	r3, r1
 8009eba:	72fb      	strb	r3, [r7, #11]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681c      	ldr	r4, [r3, #0]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	68d8      	ldr	r0, [r3, #12]
 8009ec8:	893b      	ldrh	r3, [r7, #8]
 8009eca:	7af9      	ldrb	r1, [r7, #11]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	47a0      	blx	r4
 8009ed0:	6178      	str	r0, [r7, #20]

  return ret;
 8009ed2:	697b      	ldr	r3, [r7, #20]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	371c      	adds	r7, #28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd90      	pop	{r4, r7, pc}

08009edc <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8009ee8:	f107 0208 	add.w	r2, r7, #8
 8009eec:	2301      	movs	r3, #1
 8009eee:	2110      	movs	r1, #16
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff ffc3 	bl	8009e7c <lsm6dsl_read_reg>
 8009ef6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10f      	bne.n	8009f1e <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	7a3b      	ldrb	r3, [r7, #8]
 8009f08:	f362 0383 	bfi	r3, r2, #2, #2
 8009f0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8009f0e:	f107 0208 	add.w	r2, r7, #8
 8009f12:	2301      	movs	r3, #1
 8009f14:	2110      	movs	r1, #16
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff ffc8 	bl	8009eac <lsm6dsl_write_reg>
 8009f1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8009f32:	f107 0208 	add.w	r2, r7, #8
 8009f36:	2301      	movs	r3, #1
 8009f38:	2110      	movs	r1, #16
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff ff9e 	bl	8009e7c <lsm6dsl_read_reg>
 8009f40:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8009f42:	7a3b      	ldrb	r3, [r7, #8]
 8009f44:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d81a      	bhi.n	8009f84 <lsm6dsl_xl_full_scale_get+0x5c>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <lsm6dsl_xl_full_scale_get+0x2c>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009f6d 	.word	0x08009f6d
 8009f5c:	08009f75 	.word	0x08009f75
 8009f60:	08009f7d 	.word	0x08009f7d
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2200      	movs	r2, #0
 8009f68:	701a      	strb	r2, [r3, #0]
      break;
 8009f6a:	e00f      	b.n	8009f8c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	701a      	strb	r2, [r3, #0]
      break;
 8009f72:	e00b      	b.n	8009f8c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
      break;
 8009f7a:	e007      	b.n	8009f8c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	701a      	strb	r2, [r3, #0]
      break;
 8009f82:	e003      	b.n	8009f8c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2204      	movs	r2, #4
 8009f88:	701a      	strb	r2, [r3, #0]
      break;
 8009f8a:	bf00      	nop
  }

  return ret;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop

08009f98 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8009fa4:	f107 0208 	add.w	r2, r7, #8
 8009fa8:	2301      	movs	r3, #1
 8009faa:	2110      	movs	r1, #16
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ff65 	bl	8009e7c <lsm6dsl_read_reg>
 8009fb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10f      	bne.n	8009fda <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	f003 030f 	and.w	r3, r3, #15
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	7a3b      	ldrb	r3, [r7, #8]
 8009fc4:	f362 1307 	bfi	r3, r2, #4, #4
 8009fc8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8009fca:	f107 0208 	add.w	r2, r7, #8
 8009fce:	2301      	movs	r3, #1
 8009fd0:	2110      	movs	r1, #16
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff ff6a 	bl	8009eac <lsm6dsl_write_reg>
 8009fd8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009fda:	68fb      	ldr	r3, [r7, #12]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8009fee:	f107 0208 	add.w	r2, r7, #8
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	2110      	movs	r1, #16
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ff40 	bl	8009e7c <lsm6dsl_read_reg>
 8009ffc:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 8009ffe:	7a3b      	ldrb	r3, [r7, #8]
 800a000:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b0b      	cmp	r3, #11
 800a008:	d84a      	bhi.n	800a0a0 <lsm6dsl_xl_data_rate_get+0xbc>
 800a00a:	a201      	add	r2, pc, #4	; (adr r2, 800a010 <lsm6dsl_xl_data_rate_get+0x2c>)
 800a00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a010:	0800a041 	.word	0x0800a041
 800a014:	0800a049 	.word	0x0800a049
 800a018:	0800a051 	.word	0x0800a051
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a061 	.word	0x0800a061
 800a024:	0800a069 	.word	0x0800a069
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a079 	.word	0x0800a079
 800a030:	0800a081 	.word	0x0800a081
 800a034:	0800a089 	.word	0x0800a089
 800a038:	0800a091 	.word	0x0800a091
 800a03c:	0800a099 	.word	0x0800a099
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]
      break;
 800a046:	e02f      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2201      	movs	r2, #1
 800a04c:	701a      	strb	r2, [r3, #0]
      break;
 800a04e:	e02b      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2202      	movs	r2, #2
 800a054:	701a      	strb	r2, [r3, #0]
      break;
 800a056:	e027      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2203      	movs	r2, #3
 800a05c:	701a      	strb	r2, [r3, #0]
      break;
 800a05e:	e023      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2204      	movs	r2, #4
 800a064:	701a      	strb	r2, [r3, #0]
      break;
 800a066:	e01f      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2205      	movs	r2, #5
 800a06c:	701a      	strb	r2, [r3, #0]
      break;
 800a06e:	e01b      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2206      	movs	r2, #6
 800a074:	701a      	strb	r2, [r3, #0]
      break;
 800a076:	e017      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2207      	movs	r2, #7
 800a07c:	701a      	strb	r2, [r3, #0]
      break;
 800a07e:	e013      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2208      	movs	r2, #8
 800a084:	701a      	strb	r2, [r3, #0]
      break;
 800a086:	e00f      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2209      	movs	r2, #9
 800a08c:	701a      	strb	r2, [r3, #0]
      break;
 800a08e:	e00b      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	220a      	movs	r2, #10
 800a094:	701a      	strb	r2, [r3, #0]
      break;
 800a096:	e007      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	220b      	movs	r2, #11
 800a09c:	701a      	strb	r2, [r3, #0]
      break;
 800a09e:	e003      	b.n	800a0a8 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	220c      	movs	r2, #12
 800a0a4:	701a      	strb	r2, [r3, #0]
      break;
 800a0a6:	bf00      	nop
  }

  return ret;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop

0800a0b4 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a0c0:	f107 0208 	add.w	r2, r7, #8
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	2111      	movs	r1, #17
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fed7 	bl	8009e7c <lsm6dsl_read_reg>
 800a0ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10f      	bne.n	800a0f6 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	7a3b      	ldrb	r3, [r7, #8]
 800a0e0:	f362 0343 	bfi	r3, r2, #1, #3
 800a0e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a0e6:	f107 0208 	add.w	r2, r7, #8
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	2111      	movs	r1, #17
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fedc 	bl	8009eac <lsm6dsl_write_reg>
 800a0f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a10a:	f107 0208 	add.w	r2, r7, #8
 800a10e:	2301      	movs	r3, #1
 800a110:	2111      	movs	r1, #17
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff feb2 	bl	8009e7c <lsm6dsl_read_reg>
 800a118:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 800a11a:	7a3b      	ldrb	r3, [r7, #8]
 800a11c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b06      	cmp	r3, #6
 800a124:	d824      	bhi.n	800a170 <lsm6dsl_gy_full_scale_get+0x70>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <lsm6dsl_gy_full_scale_get+0x2c>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a149 	.word	0x0800a149
 800a130:	0800a151 	.word	0x0800a151
 800a134:	0800a159 	.word	0x0800a159
 800a138:	0800a171 	.word	0x0800a171
 800a13c:	0800a161 	.word	0x0800a161
 800a140:	0800a171 	.word	0x0800a171
 800a144:	0800a169 	.word	0x0800a169
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
      break;
 800a14e:	e013      	b.n	800a178 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2201      	movs	r2, #1
 800a154:	701a      	strb	r2, [r3, #0]
      break;
 800a156:	e00f      	b.n	800a178 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2202      	movs	r2, #2
 800a15c:	701a      	strb	r2, [r3, #0]
      break;
 800a15e:	e00b      	b.n	800a178 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2204      	movs	r2, #4
 800a164:	701a      	strb	r2, [r3, #0]
      break;
 800a166:	e007      	b.n	800a178 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2206      	movs	r2, #6
 800a16c:	701a      	strb	r2, [r3, #0]
      break;
 800a16e:	e003      	b.n	800a178 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2207      	movs	r2, #7
 800a174:	701a      	strb	r2, [r3, #0]
      break;
 800a176:	bf00      	nop
  }

  return ret;
 800a178:	68fb      	ldr	r3, [r7, #12]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop

0800a184 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a190:	f107 0208 	add.w	r2, r7, #8
 800a194:	2301      	movs	r3, #1
 800a196:	2111      	movs	r1, #17
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff fe6f 	bl	8009e7c <lsm6dsl_read_reg>
 800a19e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10f      	bne.n	800a1c6 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800a1a6:	78fb      	ldrb	r3, [r7, #3]
 800a1a8:	f003 030f 	and.w	r3, r3, #15
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	7a3b      	ldrb	r3, [r7, #8]
 800a1b0:	f362 1307 	bfi	r3, r2, #4, #4
 800a1b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a1b6:	f107 0208 	add.w	r2, r7, #8
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	2111      	movs	r1, #17
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7ff fe74 	bl	8009eac <lsm6dsl_write_reg>
 800a1c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a1da:	f107 0208 	add.w	r2, r7, #8
 800a1de:	2301      	movs	r3, #1
 800a1e0:	2111      	movs	r1, #17
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff fe4a 	bl	8009e7c <lsm6dsl_read_reg>
 800a1e8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 800a1ea:	7a3b      	ldrb	r3, [r7, #8]
 800a1ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b0a      	cmp	r3, #10
 800a1f4:	d844      	bhi.n	800a280 <lsm6dsl_gy_data_rate_get+0xb0>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <lsm6dsl_gy_data_rate_get+0x2c>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a229 	.word	0x0800a229
 800a200:	0800a231 	.word	0x0800a231
 800a204:	0800a239 	.word	0x0800a239
 800a208:	0800a241 	.word	0x0800a241
 800a20c:	0800a249 	.word	0x0800a249
 800a210:	0800a251 	.word	0x0800a251
 800a214:	0800a259 	.word	0x0800a259
 800a218:	0800a261 	.word	0x0800a261
 800a21c:	0800a269 	.word	0x0800a269
 800a220:	0800a271 	.word	0x0800a271
 800a224:	0800a279 	.word	0x0800a279
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2200      	movs	r2, #0
 800a22c:	701a      	strb	r2, [r3, #0]
      break;
 800a22e:	e02b      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
      break;
 800a236:	e027      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2202      	movs	r2, #2
 800a23c:	701a      	strb	r2, [r3, #0]
      break;
 800a23e:	e023      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2203      	movs	r2, #3
 800a244:	701a      	strb	r2, [r3, #0]
      break;
 800a246:	e01f      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	2204      	movs	r2, #4
 800a24c:	701a      	strb	r2, [r3, #0]
      break;
 800a24e:	e01b      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2205      	movs	r2, #5
 800a254:	701a      	strb	r2, [r3, #0]
      break;
 800a256:	e017      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2206      	movs	r2, #6
 800a25c:	701a      	strb	r2, [r3, #0]
      break;
 800a25e:	e013      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2207      	movs	r2, #7
 800a264:	701a      	strb	r2, [r3, #0]
      break;
 800a266:	e00f      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2208      	movs	r2, #8
 800a26c:	701a      	strb	r2, [r3, #0]
      break;
 800a26e:	e00b      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2209      	movs	r2, #9
 800a274:	701a      	strb	r2, [r3, #0]
      break;
 800a276:	e007      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	220a      	movs	r2, #10
 800a27c:	701a      	strb	r2, [r3, #0]
      break;
 800a27e:	e003      	b.n	800a288 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	220b      	movs	r2, #11
 800a284:	701a      	strb	r2, [r3, #0]
      break;
 800a286:	bf00      	nop
  }

  return ret;
 800a288:	68fb      	ldr	r3, [r7, #12]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop

0800a294 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a2a0:	f107 0208 	add.w	r2, r7, #8
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	2112      	movs	r1, #18
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff fde7 	bl	8009e7c <lsm6dsl_read_reg>
 800a2ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10f      	bne.n	800a2d6 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800a2b6:	78fb      	ldrb	r3, [r7, #3]
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	7a3b      	ldrb	r3, [r7, #8]
 800a2c0:	f362 1386 	bfi	r3, r2, #6, #1
 800a2c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a2c6:	f107 0208 	add.w	r2, r7, #8
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	2112      	movs	r1, #18
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fdec 	bl	8009eac <lsm6dsl_write_reg>
 800a2d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800a2ea:	f107 020c 	add.w	r2, r7, #12
 800a2ee:	2306      	movs	r3, #6
 800a2f0:	2122      	movs	r1, #34	; 0x22
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fdc2 	bl	8009e7c <lsm6dsl_read_reg>
 800a2f8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a2fa:	7b7b      	ldrb	r3, [r7, #13]
 800a2fc:	b21a      	sxth	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	7b3b      	ldrb	r3, [r7, #12]
 800a310:	b29b      	uxth	r3, r3
 800a312:	4413      	add	r3, r2
 800a314:	b29b      	uxth	r3, r3
 800a316:	b21a      	sxth	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a31c:	7bfa      	ldrb	r2, [r7, #15]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	3302      	adds	r3, #2
 800a322:	b212      	sxth	r2, r2
 800a324:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	3302      	adds	r3, #2
 800a32a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	021b      	lsls	r3, r3, #8
 800a332:	b29a      	uxth	r2, r3
 800a334:	7bbb      	ldrb	r3, [r7, #14]
 800a336:	b29b      	uxth	r3, r3
 800a338:	4413      	add	r3, r2
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	3302      	adds	r3, #2
 800a340:	b212      	sxth	r2, r2
 800a342:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a344:	7c7a      	ldrb	r2, [r7, #17]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	3304      	adds	r3, #4
 800a34a:	b212      	sxth	r2, r2
 800a34c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	3304      	adds	r3, #4
 800a352:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a356:	b29b      	uxth	r3, r3
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	7c3b      	ldrb	r3, [r7, #16]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	4413      	add	r3, r2
 800a362:	b29a      	uxth	r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	3304      	adds	r3, #4
 800a368:	b212      	sxth	r2, r2
 800a36a:	801a      	strh	r2, [r3, #0]

  return ret;
 800a36c:	697b      	ldr	r3, [r7, #20]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b086      	sub	sp, #24
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800a380:	f107 020c 	add.w	r2, r7, #12
 800a384:	2306      	movs	r3, #6
 800a386:	2128      	movs	r1, #40	; 0x28
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff fd77 	bl	8009e7c <lsm6dsl_read_reg>
 800a38e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a390:	7b7b      	ldrb	r3, [r7, #13]
 800a392:	b21a      	sxth	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	021b      	lsls	r3, r3, #8
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	7b3b      	ldrb	r3, [r7, #12]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	b21a      	sxth	r2, r3
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a3b2:	7bfa      	ldrb	r2, [r7, #15]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	b212      	sxth	r2, r2
 800a3ba:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	3302      	adds	r3, #2
 800a3c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	021b      	lsls	r3, r3, #8
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	3302      	adds	r3, #2
 800a3d6:	b212      	sxth	r2, r2
 800a3d8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a3da:	7c7a      	ldrb	r2, [r7, #17]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	b212      	sxth	r2, r2
 800a3e2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	3304      	adds	r3, #4
 800a3e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	7c3b      	ldrb	r3, [r7, #16]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	4413      	add	r3, r2
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	b212      	sxth	r2, r2
 800a400:	801a      	strh	r2, [r3, #0]

  return ret;
 800a402:	697b      	ldr	r3, [r7, #20]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800a416:	2301      	movs	r3, #1
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	210f      	movs	r1, #15
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f7ff fd2d 	bl	8009e7c <lsm6dsl_read_reg>
 800a422:	60f8      	str	r0, [r7, #12]

  return ret;
 800a424:	68fb      	ldr	r3, [r7, #12]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b084      	sub	sp, #16
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	460b      	mov	r3, r1
 800a438:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a43a:	f107 0208 	add.w	r2, r7, #8
 800a43e:	2301      	movs	r3, #1
 800a440:	2112      	movs	r1, #18
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff fd1a 	bl	8009e7c <lsm6dsl_read_reg>
 800a448:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10f      	bne.n	800a470 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	7a3b      	ldrb	r3, [r7, #8]
 800a45a:	f362 0382 	bfi	r3, r2, #2, #1
 800a45e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a460:	f107 0208 	add.w	r2, r7, #8
 800a464:	2301      	movs	r3, #1
 800a466:	2112      	movs	r1, #18
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff fd1f 	bl	8009eac <lsm6dsl_write_reg>
 800a46e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800a486:	f107 0208 	add.w	r2, r7, #8
 800a48a:	2301      	movs	r3, #1
 800a48c:	210a      	movs	r1, #10
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fcf4 	bl	8009e7c <lsm6dsl_read_reg>
 800a494:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10f      	bne.n	800a4bc <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	f003 0307 	and.w	r3, r3, #7
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	7a3b      	ldrb	r3, [r7, #8]
 800a4a6:	f362 0302 	bfi	r3, r2, #0, #3
 800a4aa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800a4ac:	f107 0208 	add.w	r2, r7, #8
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	210a      	movs	r1, #10
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fcf9 	bl	8009eac <lsm6dsl_write_reg>
 800a4ba:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <IKS01A2_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	; 0x28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <IKS01A2_ENV_SENSOR_Init+0x24>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d032      	beq.n	800a550 <IKS01A2_ENV_SENSOR_Init+0x88>
 800a4ea:	e063      	b.n	800a5b4 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800a4ec:	6838      	ldr	r0, [r7, #0]
 800a4ee:	f000 f931 	bl	800a754 <HTS221_0_Probe>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	e098      	b.n	800a630 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a4fe:	4a4e      	ldr	r2, [pc, #312]	; (800a638 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	494c      	ldr	r1, [pc, #304]	; (800a63c <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a510:	f107 0108 	add.w	r1, r7, #8
 800a514:	4610      	mov	r0, r2
 800a516:	4798      	blx	r3
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a51e:	f06f 0306 	mvn.w	r3, #6
 800a522:	e085      	b.n	800a630 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800a524:	7a3b      	ldrb	r3, [r7, #8]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d103      	bne.n	800a532 <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f043 0301 	orr.w	r3, r3, #1
 800a530:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a532:	7abb      	ldrb	r3, [r7, #10]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d103      	bne.n	800a540 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	f043 0304 	orr.w	r3, r3, #4
 800a53e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a540:	7a7b      	ldrb	r3, [r7, #9]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d13a      	bne.n	800a5bc <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	f043 0302 	orr.w	r3, r3, #2
 800a54c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a54e:	e035      	b.n	800a5bc <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800a550:	6838      	ldr	r0, [r7, #0]
 800a552:	f000 f9b9 	bl	800a8c8 <LPS22HB_0_Probe>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800a55c:	f04f 33ff 	mov.w	r3, #4294967295
 800a560:	e066      	b.n	800a630 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a562:	4a35      	ldr	r2, [pc, #212]	; (800a638 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	4933      	ldr	r1, [pc, #204]	; (800a63c <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a574:	f107 0108 	add.w	r1, r7, #8
 800a578:	4610      	mov	r0, r2
 800a57a:	4798      	blx	r3
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a582:	f06f 0306 	mvn.w	r3, #6
 800a586:	e053      	b.n	800a630 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800a588:	7a3b      	ldrb	r3, [r7, #8]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d103      	bne.n	800a596 <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	f043 0301 	orr.w	r3, r3, #1
 800a594:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a596:	7abb      	ldrb	r3, [r7, #10]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d103      	bne.n	800a5a4 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f043 0304 	orr.w	r3, r3, #4
 800a5a2:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a5a4:	7a7b      	ldrb	r3, [r7, #9]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d10a      	bne.n	800a5c0 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f043 0302 	orr.w	r3, r3, #2
 800a5b0:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a5b2:	e005      	b.n	800a5c0 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a5b4:	f06f 0301 	mvn.w	r3, #1
 800a5b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a5ba:	e002      	b.n	800a5c2 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800a5bc:	bf00      	nop
 800a5be:	e000      	b.n	800a5c2 <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800a5c0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	e031      	b.n	800a630 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
 800a5d0:	e02a      	b.n	800a628 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	4013      	ands	r3, r2
 800a5d8:	6a3a      	ldr	r2, [r7, #32]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d11e      	bne.n	800a61c <IKS01A2_ENV_SENSOR_Init+0x154>
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	6a3a      	ldr	r2, [r7, #32]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d118      	bne.n	800a61c <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a5ea:	4a15      	ldr	r2, [pc, #84]	; (800a640 <IKS01A2_ENV_SENSOR_Init+0x178>)
 800a5ec:	6a3b      	ldr	r3, [r7, #32]
 800a5ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a5f2:	4814      	ldr	r0, [pc, #80]	; (800a644 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	490d      	ldr	r1, [pc, #52]	; (800a63c <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a60c:	4610      	mov	r0, r2
 800a60e:	4798      	blx	r3
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a616:	f06f 0304 	mvn.w	r3, #4
 800a61a:	e009      	b.n	800a630 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	3301      	adds	r3, #1
 800a626:	61fb      	str	r3, [r7, #28]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d9d1      	bls.n	800a5d2 <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a630:	4618      	mov	r0, r3
 800a632:	3728      	adds	r7, #40	; 0x28
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	200014ac 	.word	0x200014ac
 800a63c:	2000148c 	.word	0x2000148c
 800a640:	2000018c 	.word	0x2000018c
 800a644:	20001494 	.word	0x20001494

0800a648 <IKS01A2_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d903      	bls.n	800a660 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a658:	f06f 0301 	mvn.w	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	e028      	b.n	800a6b2 <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a660:	4a16      	ldr	r2, [pc, #88]	; (800a6bc <IKS01A2_ENV_SENSOR_Enable+0x74>)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	4013      	ands	r3, r2
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d11c      	bne.n	800a6ac <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a672:	4a13      	ldr	r2, [pc, #76]	; (800a6c0 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a67a:	4812      	ldr	r0, [pc, #72]	; (800a6c4 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	4613      	mov	r3, r2
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	4413      	add	r3, r2
 800a684:	440b      	add	r3, r1
 800a686:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	490e      	ldr	r1, [pc, #56]	; (800a6c8 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a694:	4610      	mov	r0, r2
 800a696:	4798      	blx	r3
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a69e:	f06f 0304 	mvn.w	r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]
 800a6a4:	e005      	b.n	800a6b2 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e002      	b.n	800a6b2 <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a6ac:	f06f 0301 	mvn.w	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	200014b4 	.word	0x200014b4
 800a6c0:	2000018c 	.word	0x2000018c
 800a6c4:	20001494 	.word	0x20001494
 800a6c8:	2000148c 	.word	0x2000148c

0800a6cc <IKS01A2_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d903      	bls.n	800a6e6 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a6de:	f06f 0301 	mvn.w	r3, #1
 800a6e2:	617b      	str	r3, [r7, #20]
 800a6e4:	e029      	b.n	800a73a <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a6e6:	4a17      	ldr	r2, [pc, #92]	; (800a744 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d11d      	bne.n	800a734 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800a6f8:	4a13      	ldr	r2, [pc, #76]	; (800a748 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a700:	4812      	ldr	r0, [pc, #72]	; (800a74c <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	4613      	mov	r3, r2
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	4413      	add	r3, r2
 800a70a:	440b      	add	r3, r1
 800a70c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	490f      	ldr	r1, [pc, #60]	; (800a750 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	4610      	mov	r0, r2
 800a71e:	4798      	blx	r3
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a726:	f06f 0304 	mvn.w	r3, #4
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e005      	b.n	800a73a <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]
 800a732:	e002      	b.n	800a73a <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a734:	f06f 0301 	mvn.w	r3, #1
 800a738:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a73a:	697b      	ldr	r3, [r7, #20]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	200014b4 	.word	0x200014b4
 800a748:	2000018c 	.word	0x2000018c
 800a74c:	20001494 	.word	0x20001494
 800a750:	2000148c 	.word	0x2000148c

0800a754 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b090      	sub	sp, #64	; 0x40
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800a760:	2300      	movs	r3, #0
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800a764:	23bf      	movs	r3, #191	; 0xbf
 800a766:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800a76a:	4b49      	ldr	r3, [pc, #292]	; (800a890 <HTS221_0_Probe+0x13c>)
 800a76c:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800a76e:	4b49      	ldr	r3, [pc, #292]	; (800a894 <HTS221_0_Probe+0x140>)
 800a770:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800a772:	4b49      	ldr	r3, [pc, #292]	; (800a898 <HTS221_0_Probe+0x144>)
 800a774:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800a776:	4b49      	ldr	r3, [pc, #292]	; (800a89c <HTS221_0_Probe+0x148>)
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800a77a:	4b49      	ldr	r3, [pc, #292]	; (800a8a0 <HTS221_0_Probe+0x14c>)
 800a77c:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800a77e:	f107 031c 	add.w	r3, r7, #28
 800a782:	4619      	mov	r1, r3
 800a784:	4847      	ldr	r0, [pc, #284]	; (800a8a4 <HTS221_0_Probe+0x150>)
 800a786:	f7fb fbc7 	bl	8005f18 <HTS221_RegisterBusIO>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a790:	f06f 0306 	mvn.w	r3, #6
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a796:	e076      	b.n	800a886 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800a798:	f107 031b 	add.w	r3, r7, #27
 800a79c:	4619      	mov	r1, r3
 800a79e:	4841      	ldr	r0, [pc, #260]	; (800a8a4 <HTS221_0_Probe+0x150>)
 800a7a0:	f7fb fc43 	bl	800602a <HTS221_ReadID>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a7aa:	f06f 0306 	mvn.w	r3, #6
 800a7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b0:	e069      	b.n	800a886 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800a7b2:	7efb      	ldrb	r3, [r7, #27]
 800a7b4:	2bbc      	cmp	r3, #188	; 0xbc
 800a7b6:	d003      	beq.n	800a7c0 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a7b8:	f06f 0306 	mvn.w	r3, #6
 800a7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7be:	e062      	b.n	800a886 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800a7c0:	f107 0308 	add.w	r3, r7, #8
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4837      	ldr	r0, [pc, #220]	; (800a8a4 <HTS221_0_Probe+0x150>)
 800a7c8:	f7fb fc46 	bl	8006058 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a7cc:	7a3b      	ldrb	r3, [r7, #8]
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	7a7b      	ldrb	r3, [r7, #9]
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800a7d6:	7abb      	ldrb	r3, [r7, #10]
 800a7d8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	4a32      	ldr	r2, [pc, #200]	; (800a8a8 <HTS221_0_Probe+0x154>)
 800a7de:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800a7e0:	4b32      	ldr	r3, [pc, #200]	; (800a8ac <HTS221_0_Probe+0x158>)
 800a7e2:	4a30      	ldr	r2, [pc, #192]	; (800a8a4 <HTS221_0_Probe+0x150>)
 800a7e4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800a7e6:	4b32      	ldr	r3, [pc, #200]	; (800a8b0 <HTS221_0_Probe+0x15c>)
 800a7e8:	4a32      	ldr	r2, [pc, #200]	; (800a8b4 <HTS221_0_Probe+0x160>)
 800a7ea:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d11d      	bne.n	800a82e <HTS221_0_Probe+0xda>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f003 0301 	and.w	r3, r3, #1
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d018      	beq.n	800a82e <HTS221_0_Probe+0xda>
 800a7fc:	7a3b      	ldrb	r3, [r7, #8]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d115      	bne.n	800a82e <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800a802:	4b2d      	ldr	r3, [pc, #180]	; (800a8b8 <HTS221_0_Probe+0x164>)
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	4a2d      	ldr	r2, [pc, #180]	; (800a8bc <HTS221_0_Probe+0x168>)
 800a808:	492d      	ldr	r1, [pc, #180]	; (800a8c0 <HTS221_0_Probe+0x16c>)
 800a80a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800a80e:	4b28      	ldr	r3, [pc, #160]	; (800a8b0 <HTS221_0_Probe+0x15c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a25      	ldr	r2, [pc, #148]	; (800a8ac <HTS221_0_Probe+0x158>)
 800a816:	6812      	ldr	r2, [r2, #0]
 800a818:	4610      	mov	r0, r2
 800a81a:	4798      	blx	r3
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a822:	f06f 0304 	mvn.w	r3, #4
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a828:	e001      	b.n	800a82e <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800a82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d11d      	bne.n	800a870 <HTS221_0_Probe+0x11c>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f003 0304 	and.w	r3, r3, #4
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d018      	beq.n	800a870 <HTS221_0_Probe+0x11c>
 800a83e:	7abb      	ldrb	r3, [r7, #10]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d115      	bne.n	800a870 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800a844:	4b1c      	ldr	r3, [pc, #112]	; (800a8b8 <HTS221_0_Probe+0x164>)
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	4a1c      	ldr	r2, [pc, #112]	; (800a8bc <HTS221_0_Probe+0x168>)
 800a84a:	491e      	ldr	r1, [pc, #120]	; (800a8c4 <HTS221_0_Probe+0x170>)
 800a84c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800a850:	4b17      	ldr	r3, [pc, #92]	; (800a8b0 <HTS221_0_Probe+0x15c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <HTS221_0_Probe+0x158>)
 800a858:	6812      	ldr	r2, [r2, #0]
 800a85a:	4610      	mov	r0, r2
 800a85c:	4798      	blx	r3
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d003      	beq.n	800a86c <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a864:	f06f 0304 	mvn.w	r3, #4
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a86a:	e001      	b.n	800a870 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d107      	bne.n	800a886 <HTS221_0_Probe+0x132>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f003 0302 	and.w	r3, r3, #2
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a880:	f06f 0304 	mvn.w	r3, #4
 800a884:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800a886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3740      	adds	r7, #64	; 0x40
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	08005b79 	.word	0x08005b79
 800a894:	08005bf5 	.word	0x08005bf5
 800a898:	08005ca9 	.word	0x08005ca9
 800a89c:	08005c45 	.word	0x08005c45
 800a8a0:	08005d0d 	.word	0x08005d0d
 800a8a4:	200014bc 	.word	0x200014bc
 800a8a8:	200014b4 	.word	0x200014b4
 800a8ac:	2000148c 	.word	0x2000148c
 800a8b0:	200014ac 	.word	0x200014ac
 800a8b4:	2000005c 	.word	0x2000005c
 800a8b8:	2000018c 	.word	0x2000018c
 800a8bc:	20001494 	.word	0x20001494
 800a8c0:	20000080 	.word	0x20000080
 800a8c4:	2000006c 	.word	0x2000006c

0800a8c8 <LPS22HB_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b090      	sub	sp, #64	; 0x40
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800a8d8:	23bb      	movs	r3, #187	; 0xbb
 800a8da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800a8de:	4b4a      	ldr	r3, [pc, #296]	; (800aa08 <LPS22HB_0_Probe+0x140>)
 800a8e0:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800a8e2:	4b4a      	ldr	r3, [pc, #296]	; (800aa0c <LPS22HB_0_Probe+0x144>)
 800a8e4:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800a8e6:	4b4a      	ldr	r3, [pc, #296]	; (800aa10 <LPS22HB_0_Probe+0x148>)
 800a8e8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800a8ea:	4b4a      	ldr	r3, [pc, #296]	; (800aa14 <LPS22HB_0_Probe+0x14c>)
 800a8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800a8ee:	4b4a      	ldr	r3, [pc, #296]	; (800aa18 <LPS22HB_0_Probe+0x150>)
 800a8f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800a8f2:	f107 031c 	add.w	r3, r7, #28
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4848      	ldr	r0, [pc, #288]	; (800aa1c <LPS22HB_0_Probe+0x154>)
 800a8fa:	f7fc f92f 	bl	8006b5c <LPS22HB_RegisterBusIO>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a904:	f06f 0306 	mvn.w	r3, #6
 800a908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a90a:	e078      	b.n	800a9fe <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800a90c:	f107 031b 	add.w	r3, r7, #27
 800a910:	4619      	mov	r1, r3
 800a912:	4842      	ldr	r0, [pc, #264]	; (800aa1c <LPS22HB_0_Probe+0x154>)
 800a914:	f7fc f9cb 	bl	8006cae <LPS22HB_ReadID>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a91e:	f06f 0306 	mvn.w	r3, #6
 800a922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a924:	e06b      	b.n	800a9fe <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800a926:	7efb      	ldrb	r3, [r7, #27]
 800a928:	2bb1      	cmp	r3, #177	; 0xb1
 800a92a:	d003      	beq.n	800a934 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a92c:	f06f 0306 	mvn.w	r3, #6
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a932:	e064      	b.n	800a9fe <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800a934:	f107 0308 	add.w	r3, r7, #8
 800a938:	4619      	mov	r1, r3
 800a93a:	4838      	ldr	r0, [pc, #224]	; (800aa1c <LPS22HB_0_Probe+0x154>)
 800a93c:	f7fc f9ce 	bl	8006cdc <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a940:	7a3b      	ldrb	r3, [r7, #8]
 800a942:	461a      	mov	r2, r3
 800a944:	7a7b      	ldrb	r3, [r7, #9]
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800a94a:	7abb      	ldrb	r3, [r7, #10]
 800a94c:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800a94e:	4313      	orrs	r3, r2
 800a950:	4a33      	ldr	r2, [pc, #204]	; (800aa20 <LPS22HB_0_Probe+0x158>)
 800a952:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800a954:	4b33      	ldr	r3, [pc, #204]	; (800aa24 <LPS22HB_0_Probe+0x15c>)
 800a956:	4a31      	ldr	r2, [pc, #196]	; (800aa1c <LPS22HB_0_Probe+0x154>)
 800a958:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800a95a:	4b33      	ldr	r3, [pc, #204]	; (800aa28 <LPS22HB_0_Probe+0x160>)
 800a95c:	4a33      	ldr	r2, [pc, #204]	; (800aa2c <LPS22HB_0_Probe+0x164>)
 800a95e:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d11e      	bne.n	800a9a4 <LPS22HB_0_Probe+0xdc>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d019      	beq.n	800a9a4 <LPS22HB_0_Probe+0xdc>
 800a970:	7a3b      	ldrb	r3, [r7, #8]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d116      	bne.n	800a9a4 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800a976:	4b2e      	ldr	r3, [pc, #184]	; (800aa30 <LPS22HB_0_Probe+0x168>)
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	4a2e      	ldr	r2, [pc, #184]	; (800aa34 <LPS22HB_0_Probe+0x16c>)
 800a97c:	3303      	adds	r3, #3
 800a97e:	492e      	ldr	r1, [pc, #184]	; (800aa38 <LPS22HB_0_Probe+0x170>)
 800a980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800a984:	4b28      	ldr	r3, [pc, #160]	; (800aa28 <LPS22HB_0_Probe+0x160>)
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a26      	ldr	r2, [pc, #152]	; (800aa24 <LPS22HB_0_Probe+0x15c>)
 800a98c:	6852      	ldr	r2, [r2, #4]
 800a98e:	4610      	mov	r0, r2
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a998:	f06f 0304 	mvn.w	r3, #4
 800a99c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a99e:	e001      	b.n	800a9a4 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800a9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d11e      	bne.n	800a9e8 <LPS22HB_0_Probe+0x120>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d019      	beq.n	800a9e8 <LPS22HB_0_Probe+0x120>
 800a9b4:	7a7b      	ldrb	r3, [r7, #9]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d116      	bne.n	800a9e8 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800a9ba:	4b1d      	ldr	r3, [pc, #116]	; (800aa30 <LPS22HB_0_Probe+0x168>)
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	4a1d      	ldr	r2, [pc, #116]	; (800aa34 <LPS22HB_0_Probe+0x16c>)
 800a9c0:	3303      	adds	r3, #3
 800a9c2:	491e      	ldr	r1, [pc, #120]	; (800aa3c <LPS22HB_0_Probe+0x174>)
 800a9c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800a9c8:	4b17      	ldr	r3, [pc, #92]	; (800aa28 <LPS22HB_0_Probe+0x160>)
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a15      	ldr	r2, [pc, #84]	; (800aa24 <LPS22HB_0_Probe+0x15c>)
 800a9d0:	6852      	ldr	r2, [r2, #4]
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	4798      	blx	r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d003      	beq.n	800a9e4 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9dc:	f06f 0304 	mvn.w	r3, #4
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9e2:	e001      	b.n	800a9e8 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d107      	bne.n	800a9fe <LPS22HB_0_Probe+0x136>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a9f8:	f06f 0304 	mvn.w	r3, #4
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3740      	adds	r7, #64	; 0x40
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	08005b79 	.word	0x08005b79
 800aa0c:	08005bf5 	.word	0x08005bf5
 800aa10:	08005ca9 	.word	0x08005ca9
 800aa14:	08005c45 	.word	0x08005c45
 800aa18:	08005d0d 	.word	0x08005d0d
 800aa1c:	200014f0 	.word	0x200014f0
 800aa20:	200014b4 	.word	0x200014b4
 800aa24:	2000148c 	.word	0x2000148c
 800aa28:	200014ac 	.word	0x200014ac
 800aa2c:	20000094 	.word	0x20000094
 800aa30:	2000018c 	.word	0x2000018c
 800aa34:	20001494 	.word	0x20001494
 800aa38:	200000b8 	.word	0x200000b8
 800aa3c:	200000a4 	.word	0x200000a4

0800aa40 <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08e      	sub	sp, #56	; 0x38
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d06e      	beq.n	800ab3a <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	f200 809d 	bhi.w	800ab9e <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d032      	beq.n	800aad6 <IKS01A2_MOTION_SENSOR_Init+0x96>
 800aa70:	e095      	b.n	800ab9e <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800aa72:	6838      	ldr	r0, [r7, #0]
 800aa74:	f000 f966 	bl	800ad44 <LSM6DSL_0_Probe>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	e0cc      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aa84:	4a68      	ldr	r2, [pc, #416]	; (800ac28 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4967      	ldr	r1, [pc, #412]	; (800ac2c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aa96:	f107 010c 	add.w	r1, r7, #12
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800aaa4:	f06f 0306 	mvn.w	r3, #6
 800aaa8:	e0b9      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800aaaa:	7b3b      	ldrb	r3, [r7, #12]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d103      	bne.n	800aab8 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	f043 0302 	orr.w	r3, r3, #2
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800aab8:	7b7b      	ldrb	r3, [r7, #13]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d103      	bne.n	800aac6 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	f043 0301 	orr.w	r3, r3, #1
 800aac4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d16c      	bne.n	800aba6 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	f043 0304 	orr.w	r3, r3, #4
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800aad4:	e067      	b.n	800aba6 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800aad6:	6838      	ldr	r0, [r7, #0]
 800aad8:	f000 f9f0 	bl	800aebc <LSM303AGR_ACC_0_Probe>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295
 800aae6:	e09a      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aae8:	4a4f      	ldr	r2, [pc, #316]	; (800ac28 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	494e      	ldr	r1, [pc, #312]	; (800ac2c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aafa:	f107 010c 	add.w	r1, r7, #12
 800aafe:	4610      	mov	r0, r2
 800ab00:	4798      	blx	r3
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ab08:	f06f 0306 	mvn.w	r3, #6
 800ab0c:	e087      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800ab0e:	7b3b      	ldrb	r3, [r7, #12]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d103      	bne.n	800ab1c <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	f043 0302 	orr.w	r3, r3, #2
 800ab1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800ab1c:	7b7b      	ldrb	r3, [r7, #13]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d103      	bne.n	800ab2a <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	f043 0301 	orr.w	r3, r3, #1
 800ab28:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d13c      	bne.n	800abaa <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	f043 0304 	orr.w	r3, r3, #4
 800ab36:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800ab38:	e037      	b.n	800abaa <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800ab3a:	6838      	ldr	r0, [r7, #0]
 800ab3c:	f000 fa62 	bl	800b004 <LSM303AGR_MAG_0_Probe>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800ab46:	f04f 33ff 	mov.w	r3, #4294967295
 800ab4a:	e068      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ab4c:	4a36      	ldr	r2, [pc, #216]	; (800ac28 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	4935      	ldr	r1, [pc, #212]	; (800ac2c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab5e:	f107 010c 	add.w	r1, r7, #12
 800ab62:	4610      	mov	r0, r2
 800ab64:	4798      	blx	r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ab6c:	f06f 0306 	mvn.w	r3, #6
 800ab70:	e055      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800ab72:	7b3b      	ldrb	r3, [r7, #12]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d103      	bne.n	800ab80 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	f043 0302 	orr.w	r3, r3, #2
 800ab7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800ab80:	7b7b      	ldrb	r3, [r7, #13]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d103      	bne.n	800ab8e <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	f043 0301 	orr.w	r3, r3, #1
 800ab8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d10c      	bne.n	800abae <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	f043 0304 	orr.w	r3, r3, #4
 800ab9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800ab9c:	e007      	b.n	800abae <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ab9e:	f06f 0301 	mvn.w	r3, #1
 800aba2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800aba4:	e004      	b.n	800abb0 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800aba6:	bf00      	nop
 800aba8:	e002      	b.n	800abb0 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800abaa:	bf00      	nop
 800abac:	e000      	b.n	800abb0 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800abae:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800abb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	e031      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800abba:	2300      	movs	r3, #0
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abbe:	e02a      	b.n	800ac16 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	4013      	ands	r3, r2
 800abc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc8:	429a      	cmp	r2, r3
 800abca:	d11e      	bne.n	800ac0a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 800abcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	4013      	ands	r3, r2
 800abd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d118      	bne.n	800ac0a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800abd8:	4a15      	ldr	r2, [pc, #84]	; (800ac30 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800abe0:	4814      	ldr	r0, [pc, #80]	; (800ac34 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	4613      	mov	r3, r2
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	4413      	add	r3, r2
 800abea:	440b      	add	r3, r1
 800abec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	490e      	ldr	r1, [pc, #56]	; (800ac2c <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ac04:	f06f 0304 	mvn.w	r3, #4
 800ac08:	e009      	b.n	800ac1e <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	3301      	adds	r3, #1
 800ac14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d9d1      	bls.n	800abc0 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800ac1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3738      	adds	r7, #56	; 0x38
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	20001554 	.word	0x20001554
 800ac2c:	20001524 	.word	0x20001524
 800ac30:	200001a0 	.word	0x200001a0
 800ac34:	20001530 	.word	0x20001530

0800ac38 <IKS01A2_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d903      	bls.n	800ac50 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ac48:	f06f 0301 	mvn.w	r3, #1
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	e028      	b.n	800aca2 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ac50:	4a16      	ldr	r2, [pc, #88]	; (800acac <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d11c      	bne.n	800ac9c <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800ac62:	4a13      	ldr	r2, [pc, #76]	; (800acb0 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac6a:	4812      	ldr	r0, [pc, #72]	; (800acb4 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	4413      	add	r3, r2
 800ac74:	440b      	add	r3, r1
 800ac76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	490e      	ldr	r1, [pc, #56]	; (800acb8 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac8e:	f06f 0304 	mvn.w	r3, #4
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	e005      	b.n	800aca2 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]
 800ac9a:	e002      	b.n	800aca2 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ac9c:	f06f 0301 	mvn.w	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800aca2:	68fb      	ldr	r3, [r7, #12]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20001560 	.word	0x20001560
 800acb0:	200001a0 	.word	0x200001a0
 800acb4:	20001530 	.word	0x20001530
 800acb8:	20001524 	.word	0x20001524

0800acbc <IKS01A2_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b02      	cmp	r3, #2
 800accc:	d903      	bls.n	800acd6 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800acce:	f06f 0301 	mvn.w	r3, #1
 800acd2:	617b      	str	r3, [r7, #20]
 800acd4:	e029      	b.n	800ad2a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800acd6:	4a17      	ldr	r2, [pc, #92]	; (800ad34 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	4013      	ands	r3, r2
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d11d      	bne.n	800ad24 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800ace8:	4a13      	ldr	r2, [pc, #76]	; (800ad38 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800acf0:	4812      	ldr	r0, [pc, #72]	; (800ad3c <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	4613      	mov	r3, r2
 800acf6:	005b      	lsls	r3, r3, #1
 800acf8:	4413      	add	r3, r2
 800acfa:	440b      	add	r3, r1
 800acfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	490f      	ldr	r1, [pc, #60]	; (800ad40 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad16:	f06f 0304 	mvn.w	r3, #4
 800ad1a:	617b      	str	r3, [r7, #20]
 800ad1c:	e005      	b.n	800ad2a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	617b      	str	r3, [r7, #20]
 800ad22:	e002      	b.n	800ad2a <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ad24:	f06f 0301 	mvn.w	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ad2a:	697b      	ldr	r3, [r7, #20]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20001560 	.word	0x20001560
 800ad38:	200001a0 	.word	0x200001a0
 800ad3c:	20001530 	.word	0x20001530
 800ad40:	20001524 	.word	0x20001524

0800ad44 <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b094      	sub	sp, #80	; 0x50
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800ad50:	2300      	movs	r3, #0
 800ad52:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800ad54:	23d7      	movs	r3, #215	; 0xd7
 800ad56:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800ad5a:	4b4a      	ldr	r3, [pc, #296]	; (800ae84 <LSM6DSL_0_Probe+0x140>)
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800ad5e:	4b4a      	ldr	r3, [pc, #296]	; (800ae88 <LSM6DSL_0_Probe+0x144>)
 800ad60:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800ad62:	4b4a      	ldr	r3, [pc, #296]	; (800ae8c <LSM6DSL_0_Probe+0x148>)
 800ad64:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800ad66:	4b4a      	ldr	r3, [pc, #296]	; (800ae90 <LSM6DSL_0_Probe+0x14c>)
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800ad6a:	4b4a      	ldr	r3, [pc, #296]	; (800ae94 <LSM6DSL_0_Probe+0x150>)
 800ad6c:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800ad6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad72:	4619      	mov	r1, r3
 800ad74:	4848      	ldr	r0, [pc, #288]	; (800ae98 <LSM6DSL_0_Probe+0x154>)
 800ad76:	f7fe f88d 	bl	8008e94 <LSM6DSL_RegisterBusIO>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad80:	f06f 0306 	mvn.w	r3, #6
 800ad84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad86:	e077      	b.n	800ae78 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800ad88:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	4842      	ldr	r0, [pc, #264]	; (800ae98 <LSM6DSL_0_Probe+0x154>)
 800ad90:	f7fe f97a 	bl	8009088 <LSM6DSL_ReadID>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad9a:	f06f 0306 	mvn.w	r3, #6
 800ad9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ada0:	e06a      	b.n	800ae78 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800ada2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ada6:	2b6a      	cmp	r3, #106	; 0x6a
 800ada8:	d003      	beq.n	800adb2 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adaa:	f06f 0306 	mvn.w	r3, #6
 800adae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adb0:	e062      	b.n	800ae78 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	4619      	mov	r1, r3
 800adb8:	4837      	ldr	r0, [pc, #220]	; (800ae98 <LSM6DSL_0_Probe+0x154>)
 800adba:	f7fe f97b 	bl	80090b4 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800adbe:	7b7b      	ldrb	r3, [r7, #13]
 800adc0:	461a      	mov	r2, r3
 800adc2:	7b3b      	ldrb	r3, [r7, #12]
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	431a      	orrs	r2, r3
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4313      	orrs	r3, r2
 800adce:	4a33      	ldr	r2, [pc, #204]	; (800ae9c <LSM6DSL_0_Probe+0x158>)
 800add0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800add2:	4b33      	ldr	r3, [pc, #204]	; (800aea0 <LSM6DSL_0_Probe+0x15c>)
 800add4:	4a30      	ldr	r2, [pc, #192]	; (800ae98 <LSM6DSL_0_Probe+0x154>)
 800add6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800add8:	4b32      	ldr	r3, [pc, #200]	; (800aea4 <LSM6DSL_0_Probe+0x160>)
 800adda:	4a33      	ldr	r2, [pc, #204]	; (800aea8 <LSM6DSL_0_Probe+0x164>)
 800addc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800adde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d11d      	bne.n	800ae20 <LSM6DSL_0_Probe+0xdc>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d018      	beq.n	800ae20 <LSM6DSL_0_Probe+0xdc>
 800adee:	7b7b      	ldrb	r3, [r7, #13]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d115      	bne.n	800ae20 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800adf4:	4b2d      	ldr	r3, [pc, #180]	; (800aeac <LSM6DSL_0_Probe+0x168>)
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	4a2d      	ldr	r2, [pc, #180]	; (800aeb0 <LSM6DSL_0_Probe+0x16c>)
 800adfa:	492e      	ldr	r1, [pc, #184]	; (800aeb4 <LSM6DSL_0_Probe+0x170>)
 800adfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800ae00:	4b28      	ldr	r3, [pc, #160]	; (800aea4 <LSM6DSL_0_Probe+0x160>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a26      	ldr	r2, [pc, #152]	; (800aea0 <LSM6DSL_0_Probe+0x15c>)
 800ae08:	6812      	ldr	r2, [r2, #0]
 800ae0a:	4610      	mov	r0, r2
 800ae0c:	4798      	blx	r3
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae14:	f06f 0304 	mvn.w	r3, #4
 800ae18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae1a:	e001      	b.n	800ae20 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800ae20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d11d      	bne.n	800ae62 <LSM6DSL_0_Probe+0x11e>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f003 0302 	and.w	r3, r3, #2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d018      	beq.n	800ae62 <LSM6DSL_0_Probe+0x11e>
 800ae30:	7b3b      	ldrb	r3, [r7, #12]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d115      	bne.n	800ae62 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ae36:	4b1d      	ldr	r3, [pc, #116]	; (800aeac <LSM6DSL_0_Probe+0x168>)
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	4a1d      	ldr	r2, [pc, #116]	; (800aeb0 <LSM6DSL_0_Probe+0x16c>)
 800ae3c:	491e      	ldr	r1, [pc, #120]	; (800aeb8 <LSM6DSL_0_Probe+0x174>)
 800ae3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800ae42:	4b18      	ldr	r3, [pc, #96]	; (800aea4 <LSM6DSL_0_Probe+0x160>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a15      	ldr	r2, [pc, #84]	; (800aea0 <LSM6DSL_0_Probe+0x15c>)
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae56:	f06f 0304 	mvn.w	r3, #4
 800ae5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae5c:	e001      	b.n	800ae62 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800ae62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d107      	bne.n	800ae78 <LSM6DSL_0_Probe+0x134>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f003 0304 	and.w	r3, r3, #4
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae72:	f06f 0304 	mvn.w	r3, #4
 800ae76:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800ae78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3750      	adds	r7, #80	; 0x50
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08005b79 	.word	0x08005b79
 800ae88:	08005bf5 	.word	0x08005bf5
 800ae8c:	08005ca9 	.word	0x08005ca9
 800ae90:	08005c45 	.word	0x08005c45
 800ae94:	08005d0d 	.word	0x08005d0d
 800ae98:	2000156c 	.word	0x2000156c
 800ae9c:	20001560 	.word	0x20001560
 800aea0:	20001524 	.word	0x20001524
 800aea4:	20001554 	.word	0x20001554
 800aea8:	20000134 	.word	0x20000134
 800aeac:	200001a0 	.word	0x200001a0
 800aeb0:	20001530 	.word	0x20001530
 800aeb4:	20000168 	.word	0x20000168
 800aeb8:	20000144 	.word	0x20000144

0800aebc <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b094      	sub	sp, #80	; 0x50
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800aec8:	2300      	movs	r3, #0
 800aeca:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800aecc:	2333      	movs	r3, #51	; 0x33
 800aece:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800aed2:	4b3f      	ldr	r3, [pc, #252]	; (800afd0 <LSM303AGR_ACC_0_Probe+0x114>)
 800aed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800aed6:	4b3f      	ldr	r3, [pc, #252]	; (800afd4 <LSM303AGR_ACC_0_Probe+0x118>)
 800aed8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800aeda:	4b3f      	ldr	r3, [pc, #252]	; (800afd8 <LSM303AGR_ACC_0_Probe+0x11c>)
 800aedc:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800aede:	4b3f      	ldr	r3, [pc, #252]	; (800afdc <LSM303AGR_ACC_0_Probe+0x120>)
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800aee2:	4b3f      	ldr	r3, [pc, #252]	; (800afe0 <LSM303AGR_ACC_0_Probe+0x124>)
 800aee4:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800aee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aeea:	4619      	mov	r1, r3
 800aeec:	483d      	ldr	r0, [pc, #244]	; (800afe4 <LSM303AGR_ACC_0_Probe+0x128>)
 800aeee:	f7fc fc17 	bl	8007720 <LSM303AGR_ACC_RegisterBusIO>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aef8:	f06f 0306 	mvn.w	r3, #6
 800aefc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aefe:	e062      	b.n	800afc6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800af00:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800af04:	4619      	mov	r1, r3
 800af06:	4837      	ldr	r0, [pc, #220]	; (800afe4 <LSM303AGR_ACC_0_Probe+0x128>)
 800af08:	f7fc fccf 	bl	80078aa <LSM303AGR_ACC_ReadID>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d003      	beq.n	800af1a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af12:	f06f 0306 	mvn.w	r3, #6
 800af16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af18:	e055      	b.n	800afc6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800af1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af1e:	2b33      	cmp	r3, #51	; 0x33
 800af20:	d003      	beq.n	800af2a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af22:	f06f 0306 	mvn.w	r3, #6
 800af26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af28:	e04d      	b.n	800afc6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800af2a:	f107 030c 	add.w	r3, r7, #12
 800af2e:	4619      	mov	r1, r3
 800af30:	482c      	ldr	r0, [pc, #176]	; (800afe4 <LSM303AGR_ACC_0_Probe+0x128>)
 800af32:	f7fc fcd1 	bl	80078d8 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800af36:	7b7b      	ldrb	r3, [r7, #13]
 800af38:	461a      	mov	r2, r3
 800af3a:	7b3b      	ldrb	r3, [r7, #12]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800af44:	4313      	orrs	r3, r2
 800af46:	4a28      	ldr	r2, [pc, #160]	; (800afe8 <LSM303AGR_ACC_0_Probe+0x12c>)
 800af48:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800af4a:	4b28      	ldr	r3, [pc, #160]	; (800afec <LSM303AGR_ACC_0_Probe+0x130>)
 800af4c:	4a25      	ldr	r2, [pc, #148]	; (800afe4 <LSM303AGR_ACC_0_Probe+0x128>)
 800af4e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800af50:	4b27      	ldr	r3, [pc, #156]	; (800aff0 <LSM303AGR_ACC_0_Probe+0x134>)
 800af52:	4a28      	ldr	r2, [pc, #160]	; (800aff4 <LSM303AGR_ACC_0_Probe+0x138>)
 800af54:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800af56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11e      	bne.n	800af9a <LSM303AGR_ACC_0_Probe+0xde>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d019      	beq.n	800af9a <LSM303AGR_ACC_0_Probe+0xde>
 800af66:	7b3b      	ldrb	r3, [r7, #12]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d116      	bne.n	800af9a <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800af6c:	4b22      	ldr	r3, [pc, #136]	; (800aff8 <LSM303AGR_ACC_0_Probe+0x13c>)
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	4a22      	ldr	r2, [pc, #136]	; (800affc <LSM303AGR_ACC_0_Probe+0x140>)
 800af72:	3303      	adds	r3, #3
 800af74:	4922      	ldr	r1, [pc, #136]	; (800b000 <LSM303AGR_ACC_0_Probe+0x144>)
 800af76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800af7a:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <LSM303AGR_ACC_0_Probe+0x134>)
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a1a      	ldr	r2, [pc, #104]	; (800afec <LSM303AGR_ACC_0_Probe+0x130>)
 800af82:	6852      	ldr	r2, [r2, #4]
 800af84:	4610      	mov	r0, r2
 800af86:	4798      	blx	r3
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af8e:	f06f 0304 	mvn.w	r3, #4
 800af92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af94:	e001      	b.n	800af9a <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af96:	2300      	movs	r3, #0
 800af98:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800af9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d107      	bne.n	800afb0 <LSM303AGR_ACC_0_Probe+0xf4>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800afaa:	f06f 0304 	mvn.w	r3, #4
 800afae:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800afb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d107      	bne.n	800afc6 <LSM303AGR_ACC_0_Probe+0x10a>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800afc0:	f06f 0304 	mvn.w	r3, #4
 800afc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800afc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3750      	adds	r7, #80	; 0x50
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	08005b79 	.word	0x08005b79
 800afd4:	08005bf5 	.word	0x08005bf5
 800afd8:	08005ca9 	.word	0x08005ca9
 800afdc:	08005c45 	.word	0x08005c45
 800afe0:	08005d0d 	.word	0x08005d0d
 800afe4:	200015a4 	.word	0x200015a4
 800afe8:	20001560 	.word	0x20001560
 800afec:	20001524 	.word	0x20001524
 800aff0:	20001554 	.word	0x20001554
 800aff4:	200000cc 	.word	0x200000cc
 800aff8:	200001a0 	.word	0x200001a0
 800affc:	20001530 	.word	0x20001530
 800b000:	200000dc 	.word	0x200000dc

0800b004 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b094      	sub	sp, #80	; 0x50
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800b010:	2300      	movs	r3, #0
 800b012:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800b014:	233d      	movs	r3, #61	; 0x3d
 800b016:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b01a:	4b3f      	ldr	r3, [pc, #252]	; (800b118 <LSM303AGR_MAG_0_Probe+0x114>)
 800b01c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b01e:	4b3f      	ldr	r3, [pc, #252]	; (800b11c <LSM303AGR_MAG_0_Probe+0x118>)
 800b020:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b022:	4b3f      	ldr	r3, [pc, #252]	; (800b120 <LSM303AGR_MAG_0_Probe+0x11c>)
 800b024:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b026:	4b3f      	ldr	r3, [pc, #252]	; (800b124 <LSM303AGR_MAG_0_Probe+0x120>)
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b02a:	4b3f      	ldr	r3, [pc, #252]	; (800b128 <LSM303AGR_MAG_0_Probe+0x124>)
 800b02c:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800b02e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b032:	4619      	mov	r1, r3
 800b034:	483d      	ldr	r0, [pc, #244]	; (800b12c <LSM303AGR_MAG_0_Probe+0x128>)
 800b036:	f7fc ff3d 	bl	8007eb4 <LSM303AGR_MAG_RegisterBusIO>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b040:	f06f 0306 	mvn.w	r3, #6
 800b044:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b046:	e062      	b.n	800b10e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800b048:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b04c:	4619      	mov	r1, r3
 800b04e:	4837      	ldr	r0, [pc, #220]	; (800b12c <LSM303AGR_MAG_0_Probe+0x128>)
 800b050:	f7fc ffe7 	bl	8008022 <LSM303AGR_MAG_ReadID>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b05a:	f06f 0306 	mvn.w	r3, #6
 800b05e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b060:	e055      	b.n	800b10e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800b062:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b066:	2b40      	cmp	r3, #64	; 0x40
 800b068:	d003      	beq.n	800b072 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b06a:	f06f 0306 	mvn.w	r3, #6
 800b06e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b070:	e04d      	b.n	800b10e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800b072:	f107 030c 	add.w	r3, r7, #12
 800b076:	4619      	mov	r1, r3
 800b078:	482c      	ldr	r0, [pc, #176]	; (800b12c <LSM303AGR_MAG_0_Probe+0x128>)
 800b07a:	f7fc ffe9 	bl	8008050 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b07e:	7b7b      	ldrb	r3, [r7, #13]
 800b080:	461a      	mov	r2, r3
 800b082:	7b3b      	ldrb	r3, [r7, #12]
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b08c:	4313      	orrs	r3, r2
 800b08e:	4a28      	ldr	r2, [pc, #160]	; (800b130 <LSM303AGR_MAG_0_Probe+0x12c>)
 800b090:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800b092:	4b28      	ldr	r3, [pc, #160]	; (800b134 <LSM303AGR_MAG_0_Probe+0x130>)
 800b094:	4a25      	ldr	r2, [pc, #148]	; (800b12c <LSM303AGR_MAG_0_Probe+0x128>)
 800b096:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800b098:	4b27      	ldr	r3, [pc, #156]	; (800b138 <LSM303AGR_MAG_0_Probe+0x134>)
 800b09a:	4a28      	ldr	r2, [pc, #160]	; (800b13c <LSM303AGR_MAG_0_Probe+0x138>)
 800b09c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d11e      	bne.n	800b0e2 <LSM303AGR_MAG_0_Probe+0xde>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f003 0304 	and.w	r3, r3, #4
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d019      	beq.n	800b0e2 <LSM303AGR_MAG_0_Probe+0xde>
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d116      	bne.n	800b0e2 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b0b4:	4b22      	ldr	r3, [pc, #136]	; (800b140 <LSM303AGR_MAG_0_Probe+0x13c>)
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	4a22      	ldr	r2, [pc, #136]	; (800b144 <LSM303AGR_MAG_0_Probe+0x140>)
 800b0ba:	3306      	adds	r3, #6
 800b0bc:	4922      	ldr	r1, [pc, #136]	; (800b148 <LSM303AGR_MAG_0_Probe+0x144>)
 800b0be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <LSM303AGR_MAG_0_Probe+0x134>)
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a1a      	ldr	r2, [pc, #104]	; (800b134 <LSM303AGR_MAG_0_Probe+0x130>)
 800b0ca:	6892      	ldr	r2, [r2, #8]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4798      	blx	r3
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0d6:	f06f 0304 	mvn.w	r3, #4
 800b0da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0dc:	e001      	b.n	800b0e2 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d107      	bne.n	800b0f8 <LSM303AGR_MAG_0_Probe+0xf4>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0f2:	f06f 0304 	mvn.w	r3, #4
 800b0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d107      	bne.n	800b10e <LSM303AGR_MAG_0_Probe+0x10a>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b108:	f06f 0304 	mvn.w	r3, #4
 800b10c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800b10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b110:	4618      	mov	r0, r3
 800b112:	3750      	adds	r7, #80	; 0x50
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	08005b79 	.word	0x08005b79
 800b11c:	08005bf5 	.word	0x08005bf5
 800b120:	08005ca9 	.word	0x08005ca9
 800b124:	08005c45 	.word	0x08005c45
 800b128:	08005d0d 	.word	0x08005d0d
 800b12c:	200015d8 	.word	0x200015d8
 800b130:	20001560 	.word	0x20001560
 800b134:	20001524 	.word	0x20001524
 800b138:	20001554 	.word	0x20001554
 800b13c:	20000100 	.word	0x20000100
 800b140:	200001a0 	.word	0x200001a0
 800b144:	20001530 	.word	0x20001530
 800b148:	20000110 	.word	0x20000110

0800b14c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b150:	2003      	movs	r0, #3
 800b152:	f000 f8fa 	bl	800b34a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b156:	200f      	movs	r0, #15
 800b158:	f7fa fc7e 	bl	8005a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b15c:	f7fa fb7a 	bl	8005854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	bd80      	pop	{r7, pc}
	...

0800b168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b168:	b480      	push	{r7}
 800b16a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b16c:	4b06      	ldr	r3, [pc, #24]	; (800b188 <HAL_IncTick+0x20>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <HAL_IncTick+0x24>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4413      	add	r3, r2
 800b178:	4a04      	ldr	r2, [pc, #16]	; (800b18c <HAL_IncTick+0x24>)
 800b17a:	6013      	str	r3, [r2, #0]
}
 800b17c:	bf00      	nop
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	200001b8 	.word	0x200001b8
 800b18c:	2000160c 	.word	0x2000160c

0800b190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b190:	b480      	push	{r7}
 800b192:	af00      	add	r7, sp, #0
  return uwTick;
 800b194:	4b03      	ldr	r3, [pc, #12]	; (800b1a4 <HAL_GetTick+0x14>)
 800b196:	681b      	ldr	r3, [r3, #0]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	2000160c 	.word	0x2000160c

0800b1a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b1b0:	f7ff ffee 	bl	800b190 <HAL_GetTick>
 800b1b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c0:	d005      	beq.n	800b1ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b1c2:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <HAL_Delay+0x44>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b1ce:	bf00      	nop
 800b1d0:	f7ff ffde 	bl	800b190 <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d8f7      	bhi.n	800b1d0 <HAL_Delay+0x28>
  {
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	bf00      	nop
 800b1e4:	3710      	adds	r7, #16
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	200001b8 	.word	0x200001b8

0800b1f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b200:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <__NVIC_SetPriorityGrouping+0x40>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b20c:	4013      	ands	r3, r2
 800b20e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b218:	4b06      	ldr	r3, [pc, #24]	; (800b234 <__NVIC_SetPriorityGrouping+0x44>)
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b21e:	4a04      	ldr	r2, [pc, #16]	; (800b230 <__NVIC_SetPriorityGrouping+0x40>)
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	60d3      	str	r3, [r2, #12]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	e000ed00 	.word	0xe000ed00
 800b234:	05fa0000 	.word	0x05fa0000

0800b238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b23c:	4b04      	ldr	r3, [pc, #16]	; (800b250 <__NVIC_GetPriorityGrouping+0x18>)
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	0a1b      	lsrs	r3, r3, #8
 800b242:	f003 0307 	and.w	r3, r3, #7
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr
 800b250:	e000ed00 	.word	0xe000ed00

0800b254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b25e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b262:	2b00      	cmp	r3, #0
 800b264:	db0b      	blt.n	800b27e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	f003 021f 	and.w	r2, r3, #31
 800b26c:	4907      	ldr	r1, [pc, #28]	; (800b28c <__NVIC_EnableIRQ+0x38>)
 800b26e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b272:	095b      	lsrs	r3, r3, #5
 800b274:	2001      	movs	r0, #1
 800b276:	fa00 f202 	lsl.w	r2, r0, r2
 800b27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	e000e100 	.word	0xe000e100

0800b290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	db0a      	blt.n	800b2ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	490c      	ldr	r1, [pc, #48]	; (800b2dc <__NVIC_SetPriority+0x4c>)
 800b2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2ae:	0112      	lsls	r2, r2, #4
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	440b      	add	r3, r1
 800b2b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b2b8:	e00a      	b.n	800b2d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	4908      	ldr	r1, [pc, #32]	; (800b2e0 <__NVIC_SetPriority+0x50>)
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	f003 030f 	and.w	r3, r3, #15
 800b2c6:	3b04      	subs	r3, #4
 800b2c8:	0112      	lsls	r2, r2, #4
 800b2ca:	b2d2      	uxtb	r2, r2
 800b2cc:	440b      	add	r3, r1
 800b2ce:	761a      	strb	r2, [r3, #24]
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	e000e100 	.word	0xe000e100
 800b2e0:	e000ed00 	.word	0xe000ed00

0800b2e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b089      	sub	sp, #36	; 0x24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f1c3 0307 	rsb	r3, r3, #7
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	bf28      	it	cs
 800b302:	2304      	movcs	r3, #4
 800b304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	3304      	adds	r3, #4
 800b30a:	2b06      	cmp	r3, #6
 800b30c:	d902      	bls.n	800b314 <NVIC_EncodePriority+0x30>
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	3b03      	subs	r3, #3
 800b312:	e000      	b.n	800b316 <NVIC_EncodePriority+0x32>
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b318:	f04f 32ff 	mov.w	r2, #4294967295
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	43da      	mvns	r2, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	401a      	ands	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b32c:	f04f 31ff 	mov.w	r1, #4294967295
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	fa01 f303 	lsl.w	r3, r1, r3
 800b336:	43d9      	mvns	r1, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b33c:	4313      	orrs	r3, r2
         );
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3724      	adds	r7, #36	; 0x24
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7ff ff4c 	bl	800b1f0 <__NVIC_SetPriorityGrouping>
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	4603      	mov	r3, r0
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b372:	f7ff ff61 	bl	800b238 <__NVIC_GetPriorityGrouping>
 800b376:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	68b9      	ldr	r1, [r7, #8]
 800b37c:	6978      	ldr	r0, [r7, #20]
 800b37e:	f7ff ffb1 	bl	800b2e4 <NVIC_EncodePriority>
 800b382:	4602      	mov	r2, r0
 800b384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b388:	4611      	mov	r1, r2
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff ff80 	bl	800b290 <__NVIC_SetPriority>
}
 800b390:	bf00      	nop
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b3a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff ff54 	bl	800b254 <__NVIC_EnableIRQ>
}
 800b3ac:	bf00      	nop
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b089      	sub	sp, #36	; 0x24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	61fb      	str	r3, [r7, #28]
 800b3d2:	e175      	b.n	800b6c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	f040 8164 	bne.w	800b6ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d005      	beq.n	800b40a <HAL_GPIO_Init+0x56>
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d130      	bne.n	800b46c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	2203      	movs	r2, #3
 800b416:	fa02 f303 	lsl.w	r3, r2, r3
 800b41a:	43db      	mvns	r3, r3
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	4013      	ands	r3, r2
 800b420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	fa02 f303 	lsl.w	r3, r2, r3
 800b42e:	69ba      	ldr	r2, [r7, #24]
 800b430:	4313      	orrs	r3, r2
 800b432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	69ba      	ldr	r2, [r7, #24]
 800b438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b440:	2201      	movs	r2, #1
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	fa02 f303 	lsl.w	r3, r2, r3
 800b448:	43db      	mvns	r3, r3
 800b44a:	69ba      	ldr	r2, [r7, #24]
 800b44c:	4013      	ands	r3, r2
 800b44e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	091b      	lsrs	r3, r3, #4
 800b456:	f003 0201 	and.w	r2, r3, #1
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	fa02 f303 	lsl.w	r3, r2, r3
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	4313      	orrs	r3, r2
 800b464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	69ba      	ldr	r2, [r7, #24]
 800b46a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	f003 0303 	and.w	r3, r3, #3
 800b474:	2b03      	cmp	r3, #3
 800b476:	d017      	beq.n	800b4a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	2203      	movs	r2, #3
 800b484:	fa02 f303 	lsl.w	r3, r2, r3
 800b488:	43db      	mvns	r3, r3
 800b48a:	69ba      	ldr	r2, [r7, #24]
 800b48c:	4013      	ands	r3, r2
 800b48e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	005b      	lsls	r3, r3, #1
 800b498:	fa02 f303 	lsl.w	r3, r2, r3
 800b49c:	69ba      	ldr	r2, [r7, #24]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f003 0303 	and.w	r3, r3, #3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d123      	bne.n	800b4fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	08da      	lsrs	r2, r3, #3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	3208      	adds	r2, #8
 800b4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	220f      	movs	r2, #15
 800b4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	69ba      	ldr	r2, [r7, #24]
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	08da      	lsrs	r2, r3, #3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3208      	adds	r2, #8
 800b4f6:	69b9      	ldr	r1, [r7, #24]
 800b4f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	2203      	movs	r2, #3
 800b508:	fa02 f303 	lsl.w	r3, r2, r3
 800b50c:	43db      	mvns	r3, r3
 800b50e:	69ba      	ldr	r2, [r7, #24]
 800b510:	4013      	ands	r3, r2
 800b512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	f003 0203 	and.w	r2, r3, #3
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	fa02 f303 	lsl.w	r3, r2, r3
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	4313      	orrs	r3, r2
 800b528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	69ba      	ldr	r2, [r7, #24]
 800b52e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	f000 80be 	beq.w	800b6ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b53e:	4b66      	ldr	r3, [pc, #408]	; (800b6d8 <HAL_GPIO_Init+0x324>)
 800b540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b542:	4a65      	ldr	r2, [pc, #404]	; (800b6d8 <HAL_GPIO_Init+0x324>)
 800b544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b548:	6453      	str	r3, [r2, #68]	; 0x44
 800b54a:	4b63      	ldr	r3, [pc, #396]	; (800b6d8 <HAL_GPIO_Init+0x324>)
 800b54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b556:	4a61      	ldr	r2, [pc, #388]	; (800b6dc <HAL_GPIO_Init+0x328>)
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	089b      	lsrs	r3, r3, #2
 800b55c:	3302      	adds	r3, #2
 800b55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b562:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	f003 0303 	and.w	r3, r3, #3
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	220f      	movs	r2, #15
 800b56e:	fa02 f303 	lsl.w	r3, r2, r3
 800b572:	43db      	mvns	r3, r3
 800b574:	69ba      	ldr	r2, [r7, #24]
 800b576:	4013      	ands	r3, r2
 800b578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4a58      	ldr	r2, [pc, #352]	; (800b6e0 <HAL_GPIO_Init+0x32c>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d037      	beq.n	800b5f2 <HAL_GPIO_Init+0x23e>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	4a57      	ldr	r2, [pc, #348]	; (800b6e4 <HAL_GPIO_Init+0x330>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d031      	beq.n	800b5ee <HAL_GPIO_Init+0x23a>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4a56      	ldr	r2, [pc, #344]	; (800b6e8 <HAL_GPIO_Init+0x334>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d02b      	beq.n	800b5ea <HAL_GPIO_Init+0x236>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4a55      	ldr	r2, [pc, #340]	; (800b6ec <HAL_GPIO_Init+0x338>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d025      	beq.n	800b5e6 <HAL_GPIO_Init+0x232>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a54      	ldr	r2, [pc, #336]	; (800b6f0 <HAL_GPIO_Init+0x33c>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d01f      	beq.n	800b5e2 <HAL_GPIO_Init+0x22e>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a53      	ldr	r2, [pc, #332]	; (800b6f4 <HAL_GPIO_Init+0x340>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d019      	beq.n	800b5de <HAL_GPIO_Init+0x22a>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a52      	ldr	r2, [pc, #328]	; (800b6f8 <HAL_GPIO_Init+0x344>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d013      	beq.n	800b5da <HAL_GPIO_Init+0x226>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a51      	ldr	r2, [pc, #324]	; (800b6fc <HAL_GPIO_Init+0x348>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d00d      	beq.n	800b5d6 <HAL_GPIO_Init+0x222>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a50      	ldr	r2, [pc, #320]	; (800b700 <HAL_GPIO_Init+0x34c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d007      	beq.n	800b5d2 <HAL_GPIO_Init+0x21e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4a4f      	ldr	r2, [pc, #316]	; (800b704 <HAL_GPIO_Init+0x350>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d101      	bne.n	800b5ce <HAL_GPIO_Init+0x21a>
 800b5ca:	2309      	movs	r3, #9
 800b5cc:	e012      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5ce:	230a      	movs	r3, #10
 800b5d0:	e010      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	e00e      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5d6:	2307      	movs	r3, #7
 800b5d8:	e00c      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5da:	2306      	movs	r3, #6
 800b5dc:	e00a      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5de:	2305      	movs	r3, #5
 800b5e0:	e008      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5e2:	2304      	movs	r3, #4
 800b5e4:	e006      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e004      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	e002      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <HAL_GPIO_Init+0x240>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	69fa      	ldr	r2, [r7, #28]
 800b5f6:	f002 0203 	and.w	r2, r2, #3
 800b5fa:	0092      	lsls	r2, r2, #2
 800b5fc:	4093      	lsls	r3, r2
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	4313      	orrs	r3, r2
 800b602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800b604:	4935      	ldr	r1, [pc, #212]	; (800b6dc <HAL_GPIO_Init+0x328>)
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	089b      	lsrs	r3, r3, #2
 800b60a:	3302      	adds	r3, #2
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b612:	4b3d      	ldr	r3, [pc, #244]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	43db      	mvns	r3, r3
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	4013      	ands	r3, r2
 800b620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	4313      	orrs	r3, r2
 800b634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b636:	4a34      	ldr	r2, [pc, #208]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b63c:	4b32      	ldr	r3, [pc, #200]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	43db      	mvns	r3, r3
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	4013      	ands	r3, r2
 800b64a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b660:	4a29      	ldr	r2, [pc, #164]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b666:	4b28      	ldr	r3, [pc, #160]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	43db      	mvns	r3, r3
 800b670:	69ba      	ldr	r2, [r7, #24]
 800b672:	4013      	ands	r3, r2
 800b674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d003      	beq.n	800b68a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b682:	69ba      	ldr	r2, [r7, #24]
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	4313      	orrs	r3, r2
 800b688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b68a:	4a1f      	ldr	r2, [pc, #124]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b690:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	43db      	mvns	r3, r3
 800b69a:	69ba      	ldr	r2, [r7, #24]
 800b69c:	4013      	ands	r3, r2
 800b69e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b6ac:	69ba      	ldr	r2, [r7, #24]
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b6b4:	4a14      	ldr	r2, [pc, #80]	; (800b708 <HAL_GPIO_Init+0x354>)
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	61fb      	str	r3, [r7, #28]
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	2b0f      	cmp	r3, #15
 800b6c4:	f67f ae86 	bls.w	800b3d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	3724      	adds	r7, #36	; 0x24
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	40023800 	.word	0x40023800
 800b6dc:	40013800 	.word	0x40013800
 800b6e0:	40020000 	.word	0x40020000
 800b6e4:	40020400 	.word	0x40020400
 800b6e8:	40020800 	.word	0x40020800
 800b6ec:	40020c00 	.word	0x40020c00
 800b6f0:	40021000 	.word	0x40021000
 800b6f4:	40021400 	.word	0x40021400
 800b6f8:	40021800 	.word	0x40021800
 800b6fc:	40021c00 	.word	0x40021c00
 800b700:	40022000 	.word	0x40022000
 800b704:	40022400 	.word	0x40022400
 800b708:	40013c00 	.word	0x40013c00

0800b70c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800b716:	2300      	movs	r3, #0
 800b718:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800b71a:	2300      	movs	r3, #0
 800b71c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800b71e:	2300      	movs	r3, #0
 800b720:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b722:	2300      	movs	r3, #0
 800b724:	617b      	str	r3, [r7, #20]
 800b726:	e0d9      	b.n	800b8dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b728:	2201      	movs	r2, #1
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	4013      	ands	r3, r2
 800b738:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	429a      	cmp	r2, r3
 800b740:	f040 80c9 	bne.w	800b8d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800b744:	4a6b      	ldr	r2, [pc, #428]	; (800b8f4 <HAL_GPIO_DeInit+0x1e8>)
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	089b      	lsrs	r3, r3, #2
 800b74a:	3302      	adds	r3, #2
 800b74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b750:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f003 0303 	and.w	r3, r3, #3
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	220f      	movs	r2, #15
 800b75c:	fa02 f303 	lsl.w	r3, r2, r3
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	4013      	ands	r3, r2
 800b764:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a63      	ldr	r2, [pc, #396]	; (800b8f8 <HAL_GPIO_DeInit+0x1ec>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d037      	beq.n	800b7de <HAL_GPIO_DeInit+0xd2>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a62      	ldr	r2, [pc, #392]	; (800b8fc <HAL_GPIO_DeInit+0x1f0>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d031      	beq.n	800b7da <HAL_GPIO_DeInit+0xce>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a61      	ldr	r2, [pc, #388]	; (800b900 <HAL_GPIO_DeInit+0x1f4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d02b      	beq.n	800b7d6 <HAL_GPIO_DeInit+0xca>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a60      	ldr	r2, [pc, #384]	; (800b904 <HAL_GPIO_DeInit+0x1f8>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d025      	beq.n	800b7d2 <HAL_GPIO_DeInit+0xc6>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a5f      	ldr	r2, [pc, #380]	; (800b908 <HAL_GPIO_DeInit+0x1fc>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d01f      	beq.n	800b7ce <HAL_GPIO_DeInit+0xc2>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a5e      	ldr	r2, [pc, #376]	; (800b90c <HAL_GPIO_DeInit+0x200>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d019      	beq.n	800b7ca <HAL_GPIO_DeInit+0xbe>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a5d      	ldr	r2, [pc, #372]	; (800b910 <HAL_GPIO_DeInit+0x204>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d013      	beq.n	800b7c6 <HAL_GPIO_DeInit+0xba>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a5c      	ldr	r2, [pc, #368]	; (800b914 <HAL_GPIO_DeInit+0x208>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d00d      	beq.n	800b7c2 <HAL_GPIO_DeInit+0xb6>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a5b      	ldr	r2, [pc, #364]	; (800b918 <HAL_GPIO_DeInit+0x20c>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d007      	beq.n	800b7be <HAL_GPIO_DeInit+0xb2>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a5a      	ldr	r2, [pc, #360]	; (800b91c <HAL_GPIO_DeInit+0x210>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d101      	bne.n	800b7ba <HAL_GPIO_DeInit+0xae>
 800b7b6:	2309      	movs	r3, #9
 800b7b8:	e012      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7ba:	230a      	movs	r3, #10
 800b7bc:	e010      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7be:	2308      	movs	r3, #8
 800b7c0:	e00e      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7c2:	2307      	movs	r3, #7
 800b7c4:	e00c      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7c6:	2306      	movs	r3, #6
 800b7c8:	e00a      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7ca:	2305      	movs	r3, #5
 800b7cc:	e008      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	e006      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e004      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	e002      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <HAL_GPIO_DeInit+0xd4>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	f002 0203 	and.w	r2, r2, #3
 800b7e6:	0092      	lsls	r2, r2, #2
 800b7e8:	4093      	lsls	r3, r2
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d132      	bne.n	800b856 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b7f0:	4b4b      	ldr	r3, [pc, #300]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	43db      	mvns	r3, r3
 800b7f8:	4949      	ldr	r1, [pc, #292]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b7fa:	4013      	ands	r3, r2
 800b7fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b7fe:	4b48      	ldr	r3, [pc, #288]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b800:	685a      	ldr	r2, [r3, #4]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	43db      	mvns	r3, r3
 800b806:	4946      	ldr	r1, [pc, #280]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b808:	4013      	ands	r3, r2
 800b80a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b80c:	4b44      	ldr	r3, [pc, #272]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b80e:	68da      	ldr	r2, [r3, #12]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	43db      	mvns	r3, r3
 800b814:	4942      	ldr	r1, [pc, #264]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b816:	4013      	ands	r3, r2
 800b818:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b81a:	4b41      	ldr	r3, [pc, #260]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b81c:	689a      	ldr	r2, [r3, #8]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	43db      	mvns	r3, r3
 800b822:	493f      	ldr	r1, [pc, #252]	; (800b920 <HAL_GPIO_DeInit+0x214>)
 800b824:	4013      	ands	r3, r2
 800b826:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	f003 0303 	and.w	r3, r3, #3
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	220f      	movs	r2, #15
 800b832:	fa02 f303 	lsl.w	r3, r2, r3
 800b836:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b838:	4a2e      	ldr	r2, [pc, #184]	; (800b8f4 <HAL_GPIO_DeInit+0x1e8>)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	089b      	lsrs	r3, r3, #2
 800b83e:	3302      	adds	r3, #2
 800b840:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	43da      	mvns	r2, r3
 800b848:	482a      	ldr	r0, [pc, #168]	; (800b8f4 <HAL_GPIO_DeInit+0x1e8>)
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	089b      	lsrs	r3, r3, #2
 800b84e:	400a      	ands	r2, r1
 800b850:	3302      	adds	r3, #2
 800b852:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	2103      	movs	r1, #3
 800b860:	fa01 f303 	lsl.w	r3, r1, r3
 800b864:	43db      	mvns	r3, r3
 800b866:	401a      	ands	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	08da      	lsrs	r2, r3, #3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3208      	adds	r2, #8
 800b874:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	220f      	movs	r2, #15
 800b882:	fa02 f303 	lsl.w	r3, r2, r3
 800b886:	43db      	mvns	r3, r3
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	08d2      	lsrs	r2, r2, #3
 800b88c:	4019      	ands	r1, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3208      	adds	r2, #8
 800b892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	68da      	ldr	r2, [r3, #12]
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	005b      	lsls	r3, r3, #1
 800b89e:	2103      	movs	r1, #3
 800b8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a4:	43db      	mvns	r3, r3
 800b8a6:	401a      	ands	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b8:	43db      	mvns	r3, r3
 800b8ba:	401a      	ands	r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	2103      	movs	r1, #3
 800b8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ce:	43db      	mvns	r3, r3
 800b8d0:	401a      	ands	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	2b0f      	cmp	r3, #15
 800b8e0:	f67f af22 	bls.w	800b728 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b8e4:	bf00      	nop
 800b8e6:	bf00      	nop
 800b8e8:	371c      	adds	r7, #28
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	40013800 	.word	0x40013800
 800b8f8:	40020000 	.word	0x40020000
 800b8fc:	40020400 	.word	0x40020400
 800b900:	40020800 	.word	0x40020800
 800b904:	40020c00 	.word	0x40020c00
 800b908:	40021000 	.word	0x40021000
 800b90c:	40021400 	.word	0x40021400
 800b910:	40021800 	.word	0x40021800
 800b914:	40021c00 	.word	0x40021c00
 800b918:	40022000 	.word	0x40022000
 800b91c:	40022400 	.word	0x40022400
 800b920:	40013c00 	.word	0x40013c00

0800b924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	460b      	mov	r3, r1
 800b92e:	807b      	strh	r3, [r7, #2]
 800b930:	4613      	mov	r3, r2
 800b932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b934:	787b      	ldrb	r3, [r7, #1]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b93a:	887a      	ldrh	r2, [r7, #2]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800b940:	e003      	b.n	800b94a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b942:	887b      	ldrh	r3, [r7, #2]
 800b944:	041a      	lsls	r2, r3, #16
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	619a      	str	r2, [r3, #24]
}
 800b94a:	bf00      	nop
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d101      	bne.n	800b96a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	e07f      	b.n	800ba6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f8a9 	bl	800bad6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2224      	movs	r2, #36	; 0x24
 800b988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 0201 	bic.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b9a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b9b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d107      	bne.n	800b9d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	689a      	ldr	r2, [r3, #8]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9ce:	609a      	str	r2, [r3, #8]
 800b9d0:	e006      	b.n	800b9e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b9de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d104      	bne.n	800b9f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	6859      	ldr	r1, [r3, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	4b1d      	ldr	r3, [pc, #116]	; (800ba74 <HAL_I2C_Init+0x11c>)
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68da      	ldr	r2, [r3, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	691a      	ldr	r2, [r3, #16]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	69d9      	ldr	r1, [r3, #28]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a1a      	ldr	r2, [r3, #32]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f042 0201 	orr.w	r2, r2, #1
 800ba4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	02008000 	.word	0x02008000

0800ba78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e021      	b.n	800bace <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2224      	movs	r2, #36	; 0x24
 800ba8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f022 0201 	bic.w	r2, r2, #1
 800baa0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f821 	bl	800baea <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
	...

0800bb00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b088      	sub	sp, #32
 800bb04:	af02      	add	r7, sp, #8
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	817b      	strh	r3, [r7, #10]
 800bb12:	460b      	mov	r3, r1
 800bb14:	813b      	strh	r3, [r7, #8]
 800bb16:	4613      	mov	r3, r2
 800bb18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	f040 80f9 	bne.w	800bd1a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb28:	6a3b      	ldr	r3, [r7, #32]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d002      	beq.n	800bb34 <HAL_I2C_Mem_Write+0x34>
 800bb2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d105      	bne.n	800bb40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e0ed      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d101      	bne.n	800bb4e <HAL_I2C_Mem_Write+0x4e>
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	e0e6      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bb56:	f7ff fb1b 	bl	800b190 <HAL_GetTick>
 800bb5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	2319      	movs	r3, #25
 800bb62:	2201      	movs	r2, #1
 800bb64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 fadd 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e0d1      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2221      	movs	r2, #33	; 0x21
 800bb7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2240      	movs	r2, #64	; 0x40
 800bb84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a3a      	ldr	r2, [r7, #32]
 800bb92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bba0:	88f8      	ldrh	r0, [r7, #6]
 800bba2:	893a      	ldrh	r2, [r7, #8]
 800bba4:	8979      	ldrh	r1, [r7, #10]
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	4603      	mov	r3, r0
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f000 f9ed 	bl	800bf90 <I2C_RequestMemoryWrite>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d005      	beq.n	800bbc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e0a9      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	2bff      	cmp	r3, #255	; 0xff
 800bbd0:	d90e      	bls.n	800bbf0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	22ff      	movs	r2, #255	; 0xff
 800bbd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	8979      	ldrh	r1, [r7, #10]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f000 fc39 	bl	800c460 <I2C_TransferConfig>
 800bbee:	e00f      	b.n	800bc10 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbfe:	b2da      	uxtb	r2, r3
 800bc00:	8979      	ldrh	r1, [r7, #10]
 800bc02:	2300      	movs	r3, #0
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fc28 	bl	800c460 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc14:	68f8      	ldr	r0, [r7, #12]
 800bc16:	f000 fac7 	bl	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e07b      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc28:	781a      	ldrb	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3b01      	subs	r3, #1
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d034      	beq.n	800bcc8 <HAL_I2C_Mem_Write+0x1c8>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d130      	bne.n	800bcc8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2180      	movs	r1, #128	; 0x80
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f000 fa59 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d001      	beq.n	800bc80 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e04d      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	2bff      	cmp	r3, #255	; 0xff
 800bc88:	d90e      	bls.n	800bca8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	22ff      	movs	r2, #255	; 0xff
 800bc8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc94:	b2da      	uxtb	r2, r3
 800bc96:	8979      	ldrh	r1, [r7, #10]
 800bc98:	2300      	movs	r3, #0
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bca0:	68f8      	ldr	r0, [r7, #12]
 800bca2:	f000 fbdd 	bl	800c460 <I2C_TransferConfig>
 800bca6:	e00f      	b.n	800bcc8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	8979      	ldrh	r1, [r7, #10]
 800bcba:	2300      	movs	r3, #0
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bcc2:	68f8      	ldr	r0, [r7, #12]
 800bcc4:	f000 fbcc 	bl	800c460 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d19e      	bne.n	800bc10 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 faa6 	bl	800c228 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e01a      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2220      	movs	r2, #32
 800bcec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6859      	ldr	r1, [r3, #4]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <HAL_I2C_Mem_Write+0x224>)
 800bcfa:	400b      	ands	r3, r1
 800bcfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	e000      	b.n	800bd1c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800bd1a:	2302      	movs	r3, #2
  }
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	fe00e800 	.word	0xfe00e800

0800bd28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	4608      	mov	r0, r1
 800bd32:	4611      	mov	r1, r2
 800bd34:	461a      	mov	r2, r3
 800bd36:	4603      	mov	r3, r0
 800bd38:	817b      	strh	r3, [r7, #10]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	813b      	strh	r3, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b20      	cmp	r3, #32
 800bd4c:	f040 80fd 	bne.w	800bf4a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <HAL_I2C_Mem_Read+0x34>
 800bd56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e0f1      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d101      	bne.n	800bd76 <HAL_I2C_Mem_Read+0x4e>
 800bd72:	2302      	movs	r3, #2
 800bd74:	e0ea      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bd7e:	f7ff fa07 	bl	800b190 <HAL_GetTick>
 800bd82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	2319      	movs	r3, #25
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 f9c9 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800bd96:	4603      	mov	r3, r0
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	e0d5      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2222      	movs	r2, #34	; 0x22
 800bda4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2240      	movs	r2, #64	; 0x40
 800bdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a3a      	ldr	r2, [r7, #32]
 800bdba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bdc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bdc8:	88f8      	ldrh	r0, [r7, #6]
 800bdca:	893a      	ldrh	r2, [r7, #8]
 800bdcc:	8979      	ldrh	r1, [r7, #10]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	9300      	str	r3, [sp, #0]
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	68f8      	ldr	r0, [r7, #12]
 800bdda:	f000 f92d 	bl	800c038 <I2C_RequestMemoryRead>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e0ad      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	2bff      	cmp	r3, #255	; 0xff
 800bdf8:	d90e      	bls.n	800be18 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	22ff      	movs	r2, #255	; 0xff
 800bdfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be04:	b2da      	uxtb	r2, r3
 800be06:	8979      	ldrh	r1, [r7, #10]
 800be08:	4b52      	ldr	r3, [pc, #328]	; (800bf54 <HAL_I2C_Mem_Read+0x22c>)
 800be0a:	9300      	str	r3, [sp, #0]
 800be0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 fb25 	bl	800c460 <I2C_TransferConfig>
 800be16:	e00f      	b.n	800be38 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be26:	b2da      	uxtb	r2, r3
 800be28:	8979      	ldrh	r1, [r7, #10]
 800be2a:	4b4a      	ldr	r3, [pc, #296]	; (800bf54 <HAL_I2C_Mem_Read+0x22c>)
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f000 fb14 	bl	800c460 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	2200      	movs	r2, #0
 800be40:	2104      	movs	r1, #4
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f000 f970 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	e07c      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	b2d2      	uxtb	r2, r2
 800be5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be6e:	3b01      	subs	r3, #1
 800be70:	b29a      	uxth	r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	3b01      	subs	r3, #1
 800be7e:	b29a      	uxth	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be88:	b29b      	uxth	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d034      	beq.n	800bef8 <HAL_I2C_Mem_Read+0x1d0>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be92:	2b00      	cmp	r3, #0
 800be94:	d130      	bne.n	800bef8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	2200      	movs	r2, #0
 800be9e:	2180      	movs	r1, #128	; 0x80
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f000 f941 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	e04d      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	2bff      	cmp	r3, #255	; 0xff
 800beb8:	d90e      	bls.n	800bed8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	22ff      	movs	r2, #255	; 0xff
 800bebe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	8979      	ldrh	r1, [r7, #10]
 800bec8:	2300      	movs	r3, #0
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 fac5 	bl	800c460 <I2C_TransferConfig>
 800bed6:	e00f      	b.n	800bef8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bedc:	b29a      	uxth	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bee6:	b2da      	uxtb	r2, r3
 800bee8:	8979      	ldrh	r1, [r7, #10]
 800beea:	2300      	movs	r3, #0
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 fab4 	bl	800c460 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800befc:	b29b      	uxth	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d19a      	bne.n	800be38 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 f98e 	bl	800c228 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e01a      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6859      	ldr	r1, [r3, #4]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <HAL_I2C_Mem_Read+0x230>)
 800bf2a:	400b      	ands	r3, r1
 800bf2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2220      	movs	r2, #32
 800bf32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	e000      	b.n	800bf4c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bf4a:	2302      	movs	r3, #2
  }
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	80002400 	.word	0x80002400
 800bf58:	fe00e800 	.word	0xfe00e800

0800bf5c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf6a:	b2db      	uxtb	r3, r3
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af02      	add	r7, sp, #8
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	4608      	mov	r0, r1
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	817b      	strh	r3, [r7, #10]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	813b      	strh	r3, [r7, #8]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bfaa:	88fb      	ldrh	r3, [r7, #6]
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	8979      	ldrh	r1, [r7, #10]
 800bfb0:	4b20      	ldr	r3, [pc, #128]	; (800c034 <I2C_RequestMemoryWrite+0xa4>)
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 fa51 	bl	800c460 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfbe:	69fa      	ldr	r2, [r7, #28]
 800bfc0:	69b9      	ldr	r1, [r7, #24]
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 f8f0 	bl	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e02c      	b.n	800c02c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d105      	bne.n	800bfe4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bfd8:	893b      	ldrh	r3, [r7, #8]
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	629a      	str	r2, [r3, #40]	; 0x28
 800bfe2:	e015      	b.n	800c010 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bfe4:	893b      	ldrh	r3, [r7, #8]
 800bfe6:	0a1b      	lsrs	r3, r3, #8
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bff2:	69fa      	ldr	r2, [r7, #28]
 800bff4:	69b9      	ldr	r1, [r7, #24]
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f000 f8d6 	bl	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e012      	b.n	800c02c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c006:	893b      	ldrh	r3, [r7, #8]
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	2200      	movs	r2, #0
 800c018:	2180      	movs	r1, #128	; 0x80
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 f884 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e000      	b.n	800c02c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	80002000 	.word	0x80002000

0800c038 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	4608      	mov	r0, r1
 800c042:	4611      	mov	r1, r2
 800c044:	461a      	mov	r2, r3
 800c046:	4603      	mov	r3, r0
 800c048:	817b      	strh	r3, [r7, #10]
 800c04a:	460b      	mov	r3, r1
 800c04c:	813b      	strh	r3, [r7, #8]
 800c04e:	4613      	mov	r3, r2
 800c050:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c052:	88fb      	ldrh	r3, [r7, #6]
 800c054:	b2da      	uxtb	r2, r3
 800c056:	8979      	ldrh	r1, [r7, #10]
 800c058:	4b20      	ldr	r3, [pc, #128]	; (800c0dc <I2C_RequestMemoryRead+0xa4>)
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	2300      	movs	r3, #0
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 f9fe 	bl	800c460 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c064:	69fa      	ldr	r2, [r7, #28]
 800c066:	69b9      	ldr	r1, [r7, #24]
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f000 f89d 	bl	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e02c      	b.n	800c0d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d105      	bne.n	800c08a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c07e:	893b      	ldrh	r3, [r7, #8]
 800c080:	b2da      	uxtb	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	629a      	str	r2, [r3, #40]	; 0x28
 800c088:	e015      	b.n	800c0b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c08a:	893b      	ldrh	r3, [r7, #8]
 800c08c:	0a1b      	lsrs	r3, r3, #8
 800c08e:	b29b      	uxth	r3, r3
 800c090:	b2da      	uxtb	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c098:	69fa      	ldr	r2, [r7, #28]
 800c09a:	69b9      	ldr	r1, [r7, #24]
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f000 f883 	bl	800c1a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d001      	beq.n	800c0ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	e012      	b.n	800c0d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c0ac:	893b      	ldrh	r3, [r7, #8]
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2140      	movs	r1, #64	; 0x40
 800c0c0:	68f8      	ldr	r0, [r7, #12]
 800c0c2:	f000 f831 	bl	800c128 <I2C_WaitOnFlagUntilTimeout>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	80002000 	.word	0x80002000

0800c0e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	f003 0302 	and.w	r3, r3, #2
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d103      	bne.n	800c0fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	f003 0301 	and.w	r3, r3, #1
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d007      	beq.n	800c11c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f042 0201 	orr.w	r2, r2, #1
 800c11a:	619a      	str	r2, [r3, #24]
  }
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	603b      	str	r3, [r7, #0]
 800c134:	4613      	mov	r3, r2
 800c136:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c138:	e022      	b.n	800c180 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c140:	d01e      	beq.n	800c180 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c142:	f7ff f825 	bl	800b190 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d302      	bcc.n	800c158 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d113      	bne.n	800c180 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c15c:	f043 0220 	orr.w	r2, r3, #32
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2220      	movs	r2, #32
 800c168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	e00f      	b.n	800c1a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	699a      	ldr	r2, [r3, #24]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	4013      	ands	r3, r2
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	bf0c      	ite	eq
 800c190:	2301      	moveq	r3, #1
 800c192:	2300      	movne	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	461a      	mov	r2, r3
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d0cd      	beq.n	800c13a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c1b4:	e02c      	b.n	800c210 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	68b9      	ldr	r1, [r7, #8]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f000 f870 	bl	800c2a0 <I2C_IsErrorOccurred>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e02a      	b.n	800c220 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d0:	d01e      	beq.n	800c210 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1d2:	f7fe ffdd 	bl	800b190 <HAL_GetTick>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d302      	bcc.n	800c1e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d113      	bne.n	800c210 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ec:	f043 0220 	orr.w	r2, r3, #32
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2220      	movs	r2, #32
 800c1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	e007      	b.n	800c220 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	f003 0302 	and.w	r3, r3, #2
 800c21a:	2b02      	cmp	r3, #2
 800c21c:	d1cb      	bne.n	800c1b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c234:	e028      	b.n	800c288 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	68b9      	ldr	r1, [r7, #8]
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f000 f830 	bl	800c2a0 <I2C_IsErrorOccurred>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e026      	b.n	800c298 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c24a:	f7fe ffa1 	bl	800b190 <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	429a      	cmp	r2, r3
 800c258:	d302      	bcc.n	800c260 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d113      	bne.n	800c288 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c264:	f043 0220 	orr.w	r2, r3, #32
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2220      	movs	r2, #32
 800c270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e007      	b.n	800c298 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	f003 0320 	and.w	r3, r3, #32
 800c292:	2b20      	cmp	r3, #32
 800c294:	d1cf      	bne.n	800c236 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b08a      	sub	sp, #40	; 0x28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	f003 0310 	and.w	r3, r3, #16
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d068      	beq.n	800c39e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2210      	movs	r2, #16
 800c2d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c2d4:	e049      	b.n	800c36a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2dc:	d045      	beq.n	800c36a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c2de:	f7fe ff57 	bl	800b190 <HAL_GetTick>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d302      	bcc.n	800c2f4 <I2C_IsErrorOccurred+0x54>
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d13a      	bne.n	800c36a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c306:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	699b      	ldr	r3, [r3, #24]
 800c30e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c316:	d121      	bne.n	800c35c <I2C_IsErrorOccurred+0xbc>
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c31e:	d01d      	beq.n	800c35c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c320:	7cfb      	ldrb	r3, [r7, #19]
 800c322:	2b20      	cmp	r3, #32
 800c324:	d01a      	beq.n	800c35c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c334:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c336:	f7fe ff2b 	bl	800b190 <HAL_GetTick>
 800c33a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c33c:	e00e      	b.n	800c35c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c33e:	f7fe ff27 	bl	800b190 <HAL_GetTick>
 800c342:	4602      	mov	r2, r0
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	2b19      	cmp	r3, #25
 800c34a:	d907      	bls.n	800c35c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	f043 0320 	orr.w	r3, r3, #32
 800c352:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c35a:	e006      	b.n	800c36a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	f003 0320 	and.w	r3, r3, #32
 800c366:	2b20      	cmp	r3, #32
 800c368:	d1e9      	bne.n	800c33e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	f003 0320 	and.w	r3, r3, #32
 800c374:	2b20      	cmp	r3, #32
 800c376:	d003      	beq.n	800c380 <I2C_IsErrorOccurred+0xe0>
 800c378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d0aa      	beq.n	800c2d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c384:	2b00      	cmp	r3, #0
 800c386:	d103      	bne.n	800c390 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2220      	movs	r2, #32
 800c38e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c390:	6a3b      	ldr	r3, [r7, #32]
 800c392:	f043 0304 	orr.w	r3, r3, #4
 800c396:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c3b0:	6a3b      	ldr	r3, [r7, #32]
 800c3b2:	f043 0301 	orr.w	r3, r3, #1
 800c3b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00b      	beq.n	800c3ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	f043 0308 	orr.w	r3, r3, #8
 800c3d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c3e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00b      	beq.n	800c40c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	f043 0302 	orr.w	r3, r3, #2
 800c3fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01c      	beq.n	800c44e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff fe63 	bl	800c0e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6859      	ldr	r1, [r3, #4]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	4b0d      	ldr	r3, [pc, #52]	; (800c45c <I2C_IsErrorOccurred+0x1bc>)
 800c426:	400b      	ands	r3, r1
 800c428:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	431a      	orrs	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2220      	movs	r2, #32
 800c43a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c44e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c452:	4618      	mov	r0, r3
 800c454:	3728      	adds	r7, #40	; 0x28
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	fe00e800 	.word	0xfe00e800

0800c460 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c460:	b480      	push	{r7}
 800c462:	b087      	sub	sp, #28
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	607b      	str	r3, [r7, #4]
 800c46a:	460b      	mov	r3, r1
 800c46c:	817b      	strh	r3, [r7, #10]
 800c46e:	4613      	mov	r3, r2
 800c470:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c472:	897b      	ldrh	r3, [r7, #10]
 800c474:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c478:	7a7b      	ldrb	r3, [r7, #9]
 800c47a:	041b      	lsls	r3, r3, #16
 800c47c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c480:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	4313      	orrs	r3, r2
 800c48a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c48e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	6a3b      	ldr	r3, [r7, #32]
 800c498:	0d5b      	lsrs	r3, r3, #21
 800c49a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c49e:	4b08      	ldr	r3, [pc, #32]	; (800c4c0 <I2C_TransferConfig+0x60>)
 800c4a0:	430b      	orrs	r3, r1
 800c4a2:	43db      	mvns	r3, r3
 800c4a4:	ea02 0103 	and.w	r1, r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c4b2:	bf00      	nop
 800c4b4:	371c      	adds	r7, #28
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	03ff63ff 	.word	0x03ff63ff

0800c4c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2b20      	cmp	r3, #32
 800c4d8:	d138      	bne.n	800c54c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d101      	bne.n	800c4e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c4e4:	2302      	movs	r3, #2
 800c4e6:	e032      	b.n	800c54e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2224      	movs	r2, #36	; 0x24
 800c4f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f022 0201 	bic.w	r2, r2, #1
 800c506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6819      	ldr	r1, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	683a      	ldr	r2, [r7, #0]
 800c524:	430a      	orrs	r2, r1
 800c526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f042 0201 	orr.w	r2, r2, #1
 800c536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	e000      	b.n	800c54e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c54c:	2302      	movs	r3, #2
  }
}
 800c54e:	4618      	mov	r0, r3
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	2b20      	cmp	r3, #32
 800c56e:	d139      	bne.n	800c5e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c576:	2b01      	cmp	r3, #1
 800c578:	d101      	bne.n	800c57e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c57a:	2302      	movs	r3, #2
 800c57c:	e033      	b.n	800c5e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2224      	movs	r2, #36	; 0x24
 800c58a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f022 0201 	bic.w	r2, r2, #1
 800c59c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c5ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	021b      	lsls	r3, r3, #8
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f042 0201 	orr.w	r2, r2, #1
 800c5ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2220      	movs	r2, #32
 800c5d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	e000      	b.n	800c5e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c5e4:	2302      	movs	r3, #2
  }
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c5f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f4:	b08f      	sub	sp, #60	; 0x3c
 800c5f6:	af0a      	add	r7, sp, #40	; 0x28
 800c5f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	e116      	b.n	800c832 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d106      	bne.n	800c624 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7f9 f9a0 	bl	8005964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2203      	movs	r2, #3
 800c628:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4618      	mov	r0, r3
 800c644:	f002 fa4c 	bl	800eae0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	603b      	str	r3, [r7, #0]
 800c64e:	687e      	ldr	r6, [r7, #4]
 800c650:	466d      	mov	r5, sp
 800c652:	f106 0410 	add.w	r4, r6, #16
 800c656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c65a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c65c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c65e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c662:	e885 0003 	stmia.w	r5, {r0, r1}
 800c666:	1d33      	adds	r3, r6, #4
 800c668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c66a:	6838      	ldr	r0, [r7, #0]
 800c66c:	f002 f9e0 	bl	800ea30 <USB_CoreInit>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d005      	beq.n	800c682 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e0d7      	b.n	800c832 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2100      	movs	r1, #0
 800c688:	4618      	mov	r0, r3
 800c68a:	f002 fa3a 	bl	800eb02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c68e:	2300      	movs	r3, #0
 800c690:	73fb      	strb	r3, [r7, #15]
 800c692:	e04a      	b.n	800c72a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c694:	7bfa      	ldrb	r2, [r7, #15]
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	4613      	mov	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	4413      	add	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	440b      	add	r3, r1
 800c6a2:	333d      	adds	r3, #61	; 0x3d
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c6a8:	7bfa      	ldrb	r2, [r7, #15]
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	440b      	add	r3, r1
 800c6b6:	333c      	adds	r3, #60	; 0x3c
 800c6b8:	7bfa      	ldrb	r2, [r7, #15]
 800c6ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c6bc:	7bfa      	ldrb	r2, [r7, #15]
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	b298      	uxth	r0, r3
 800c6c2:	6879      	ldr	r1, [r7, #4]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	4413      	add	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	440b      	add	r3, r1
 800c6ce:	3344      	adds	r3, #68	; 0x44
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c6d4:	7bfa      	ldrb	r2, [r7, #15]
 800c6d6:	6879      	ldr	r1, [r7, #4]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	4413      	add	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	440b      	add	r3, r1
 800c6e2:	3340      	adds	r3, #64	; 0x40
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c6e8:	7bfa      	ldrb	r2, [r7, #15]
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	00db      	lsls	r3, r3, #3
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	440b      	add	r3, r1
 800c6f6:	3348      	adds	r3, #72	; 0x48
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c6fc:	7bfa      	ldrb	r2, [r7, #15]
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	4413      	add	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	440b      	add	r3, r1
 800c70a:	334c      	adds	r3, #76	; 0x4c
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c710:	7bfa      	ldrb	r2, [r7, #15]
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	4613      	mov	r3, r2
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	4413      	add	r3, r2
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	440b      	add	r3, r1
 800c71e:	3354      	adds	r3, #84	; 0x54
 800c720:	2200      	movs	r2, #0
 800c722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	3301      	adds	r3, #1
 800c728:	73fb      	strb	r3, [r7, #15]
 800c72a:	7bfa      	ldrb	r2, [r7, #15]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	429a      	cmp	r2, r3
 800c732:	d3af      	bcc.n	800c694 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c734:	2300      	movs	r3, #0
 800c736:	73fb      	strb	r3, [r7, #15]
 800c738:	e044      	b.n	800c7c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c73a:	7bfa      	ldrb	r2, [r7, #15]
 800c73c:	6879      	ldr	r1, [r7, #4]
 800c73e:	4613      	mov	r3, r2
 800c740:	00db      	lsls	r3, r3, #3
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	440b      	add	r3, r1
 800c748:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800c74c:	2200      	movs	r2, #0
 800c74e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c750:	7bfa      	ldrb	r2, [r7, #15]
 800c752:	6879      	ldr	r1, [r7, #4]
 800c754:	4613      	mov	r3, r2
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	4413      	add	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	440b      	add	r3, r1
 800c75e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800c762:	7bfa      	ldrb	r2, [r7, #15]
 800c764:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c766:	7bfa      	ldrb	r2, [r7, #15]
 800c768:	6879      	ldr	r1, [r7, #4]
 800c76a:	4613      	mov	r3, r2
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	4413      	add	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	440b      	add	r3, r1
 800c774:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c778:	2200      	movs	r2, #0
 800c77a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c77c:	7bfa      	ldrb	r2, [r7, #15]
 800c77e:	6879      	ldr	r1, [r7, #4]
 800c780:	4613      	mov	r3, r2
 800c782:	00db      	lsls	r3, r3, #3
 800c784:	4413      	add	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	440b      	add	r3, r1
 800c78a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c792:	7bfa      	ldrb	r2, [r7, #15]
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	4613      	mov	r3, r2
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	4413      	add	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	440b      	add	r3, r1
 800c7a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c7a8:	7bfa      	ldrb	r2, [r7, #15]
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	4613      	mov	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	440b      	add	r3, r1
 800c7b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	73fb      	strb	r3, [r7, #15]
 800c7c4:	7bfa      	ldrb	r2, [r7, #15]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d3b5      	bcc.n	800c73a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	603b      	str	r3, [r7, #0]
 800c7d4:	687e      	ldr	r6, [r7, #4]
 800c7d6:	466d      	mov	r5, sp
 800c7d8:	f106 0410 	add.w	r4, r6, #16
 800c7dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c7e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c7e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c7e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c7e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800c7ec:	1d33      	adds	r3, r6, #4
 800c7ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7f0:	6838      	ldr	r0, [r7, #0]
 800c7f2:	f002 f9d3 	bl	800eb9c <USB_DevInit>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d005      	beq.n	800c808 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2202      	movs	r2, #2
 800c800:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	e014      	b.n	800c832 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d102      	bne.n	800c826 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f80b 	bl	800c83c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4618      	mov	r0, r3
 800c82c:	f002 fb91 	bl	800ef52 <USB_DevDisconnect>

  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c83c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c86a:	4b05      	ldr	r3, [pc, #20]	; (800c880 <HAL_PCDEx_ActivateLPM+0x44>)
 800c86c:	4313      	orrs	r3, r2
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr
 800c880:	10000003 	.word	0x10000003

0800c884 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c884:	b480      	push	{r7}
 800c886:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c888:	4b05      	ldr	r3, [pc, #20]	; (800c8a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a04      	ldr	r2, [pc, #16]	; (800c8a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c88e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c892:	6013      	str	r3, [r2, #0]
}
 800c894:	bf00      	nop
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	40007000 	.word	0x40007000

0800c8a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c8ae:	4b23      	ldr	r3, [pc, #140]	; (800c93c <HAL_PWREx_EnableOverDrive+0x98>)
 800c8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8b2:	4a22      	ldr	r2, [pc, #136]	; (800c93c <HAL_PWREx_EnableOverDrive+0x98>)
 800c8b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8b8:	6413      	str	r3, [r2, #64]	; 0x40
 800c8ba:	4b20      	ldr	r3, [pc, #128]	; (800c93c <HAL_PWREx_EnableOverDrive+0x98>)
 800c8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c8c6:	4b1e      	ldr	r3, [pc, #120]	; (800c940 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a1d      	ldr	r2, [pc, #116]	; (800c940 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c8cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c8d2:	f7fe fc5d 	bl	800b190 <HAL_GetTick>
 800c8d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c8d8:	e009      	b.n	800c8ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c8da:	f7fe fc59 	bl	800b190 <HAL_GetTick>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8e8:	d901      	bls.n	800c8ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e022      	b.n	800c934 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c8ee:	4b14      	ldr	r3, [pc, #80]	; (800c940 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8fa:	d1ee      	bne.n	800c8da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c8fc:	4b10      	ldr	r3, [pc, #64]	; (800c940 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a0f      	ldr	r2, [pc, #60]	; (800c940 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c906:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c908:	f7fe fc42 	bl	800b190 <HAL_GetTick>
 800c90c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c90e:	e009      	b.n	800c924 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c910:	f7fe fc3e 	bl	800b190 <HAL_GetTick>
 800c914:	4602      	mov	r2, r0
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c91e:	d901      	bls.n	800c924 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800c920:	2303      	movs	r3, #3
 800c922:	e007      	b.n	800c934 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c924:	4b06      	ldr	r3, [pc, #24]	; (800c940 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c92c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c930:	d1ee      	bne.n	800c910 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	40023800 	.word	0x40023800
 800c940:	40007000 	.word	0x40007000

0800c944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800c94c:	2300      	movs	r3, #0
 800c94e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d101      	bne.n	800c95a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e29b      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 8087 	beq.w	800ca76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c968:	4b96      	ldr	r3, [pc, #600]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	f003 030c 	and.w	r3, r3, #12
 800c970:	2b04      	cmp	r3, #4
 800c972:	d00c      	beq.n	800c98e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c974:	4b93      	ldr	r3, [pc, #588]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	f003 030c 	and.w	r3, r3, #12
 800c97c:	2b08      	cmp	r3, #8
 800c97e:	d112      	bne.n	800c9a6 <HAL_RCC_OscConfig+0x62>
 800c980:	4b90      	ldr	r3, [pc, #576]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c98c:	d10b      	bne.n	800c9a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c98e:	4b8d      	ldr	r3, [pc, #564]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d06c      	beq.n	800ca74 <HAL_RCC_OscConfig+0x130>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d168      	bne.n	800ca74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e275      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ae:	d106      	bne.n	800c9be <HAL_RCC_OscConfig+0x7a>
 800c9b0:	4b84      	ldr	r3, [pc, #528]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a83      	ldr	r2, [pc, #524]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	e02e      	b.n	800ca1c <HAL_RCC_OscConfig+0xd8>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10c      	bne.n	800c9e0 <HAL_RCC_OscConfig+0x9c>
 800c9c6:	4b7f      	ldr	r3, [pc, #508]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a7e      	ldr	r2, [pc, #504]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	4b7c      	ldr	r3, [pc, #496]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a7b      	ldr	r2, [pc, #492]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	e01d      	b.n	800ca1c <HAL_RCC_OscConfig+0xd8>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c9e8:	d10c      	bne.n	800ca04 <HAL_RCC_OscConfig+0xc0>
 800c9ea:	4b76      	ldr	r3, [pc, #472]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a75      	ldr	r2, [pc, #468]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	4b73      	ldr	r3, [pc, #460]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a72      	ldr	r2, [pc, #456]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800c9fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca00:	6013      	str	r3, [r2, #0]
 800ca02:	e00b      	b.n	800ca1c <HAL_RCC_OscConfig+0xd8>
 800ca04:	4b6f      	ldr	r3, [pc, #444]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a6e      	ldr	r2, [pc, #440]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca0e:	6013      	str	r3, [r2, #0]
 800ca10:	4b6c      	ldr	r3, [pc, #432]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a6b      	ldr	r2, [pc, #428]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d013      	beq.n	800ca4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca24:	f7fe fbb4 	bl	800b190 <HAL_GetTick>
 800ca28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca2a:	e008      	b.n	800ca3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca2c:	f7fe fbb0 	bl	800b190 <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	2b64      	cmp	r3, #100	; 0x64
 800ca38:	d901      	bls.n	800ca3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e229      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca3e:	4b61      	ldr	r3, [pc, #388]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0f0      	beq.n	800ca2c <HAL_RCC_OscConfig+0xe8>
 800ca4a:	e014      	b.n	800ca76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca4c:	f7fe fba0 	bl	800b190 <HAL_GetTick>
 800ca50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca52:	e008      	b.n	800ca66 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ca54:	f7fe fb9c 	bl	800b190 <HAL_GetTick>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	2b64      	cmp	r3, #100	; 0x64
 800ca60:	d901      	bls.n	800ca66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e215      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca66:	4b57      	ldr	r3, [pc, #348]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f0      	bne.n	800ca54 <HAL_RCC_OscConfig+0x110>
 800ca72:	e000      	b.n	800ca76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f003 0302 	and.w	r3, r3, #2
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d069      	beq.n	800cb56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ca82:	4b50      	ldr	r3, [pc, #320]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	f003 030c 	and.w	r3, r3, #12
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca8e:	4b4d      	ldr	r3, [pc, #308]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	f003 030c 	and.w	r3, r3, #12
 800ca96:	2b08      	cmp	r3, #8
 800ca98:	d11c      	bne.n	800cad4 <HAL_RCC_OscConfig+0x190>
 800ca9a:	4b4a      	ldr	r3, [pc, #296]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d116      	bne.n	800cad4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800caa6:	4b47      	ldr	r3, [pc, #284]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 0302 	and.w	r3, r3, #2
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d005      	beq.n	800cabe <HAL_RCC_OscConfig+0x17a>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d001      	beq.n	800cabe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e1e9      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cabe:	4b41      	ldr	r3, [pc, #260]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	00db      	lsls	r3, r3, #3
 800cacc:	493d      	ldr	r1, [pc, #244]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cace:	4313      	orrs	r3, r2
 800cad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cad2:	e040      	b.n	800cb56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d023      	beq.n	800cb24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cadc:	4b39      	ldr	r3, [pc, #228]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a38      	ldr	r2, [pc, #224]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cae8:	f7fe fb52 	bl	800b190 <HAL_GetTick>
 800caec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800caee:	e008      	b.n	800cb02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800caf0:	f7fe fb4e 	bl	800b190 <HAL_GetTick>
 800caf4:	4602      	mov	r2, r0
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d901      	bls.n	800cb02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e1c7      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb02:	4b30      	ldr	r3, [pc, #192]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 0302 	and.w	r3, r3, #2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0f0      	beq.n	800caf0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb0e:	4b2d      	ldr	r3, [pc, #180]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	4929      	ldr	r1, [pc, #164]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb1e:	4313      	orrs	r3, r2
 800cb20:	600b      	str	r3, [r1, #0]
 800cb22:	e018      	b.n	800cb56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb24:	4b27      	ldr	r3, [pc, #156]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a26      	ldr	r2, [pc, #152]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb30:	f7fe fb2e 	bl	800b190 <HAL_GetTick>
 800cb34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb36:	e008      	b.n	800cb4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb38:	f7fe fb2a 	bl	800b190 <HAL_GetTick>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	2b02      	cmp	r3, #2
 800cb44:	d901      	bls.n	800cb4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e1a3      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb4a:	4b1e      	ldr	r3, [pc, #120]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0302 	and.w	r3, r3, #2
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1f0      	bne.n	800cb38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 0308 	and.w	r3, r3, #8
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d038      	beq.n	800cbd4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d019      	beq.n	800cb9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb6a:	4b16      	ldr	r3, [pc, #88]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb6e:	4a15      	ldr	r2, [pc, #84]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb70:	f043 0301 	orr.w	r3, r3, #1
 800cb74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb76:	f7fe fb0b 	bl	800b190 <HAL_GetTick>
 800cb7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb7c:	e008      	b.n	800cb90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb7e:	f7fe fb07 	bl	800b190 <HAL_GetTick>
 800cb82:	4602      	mov	r2, r0
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	1ad3      	subs	r3, r2, r3
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d901      	bls.n	800cb90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cb8c:	2303      	movs	r3, #3
 800cb8e:	e180      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb90:	4b0c      	ldr	r3, [pc, #48]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cb92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb94:	f003 0302 	and.w	r3, r3, #2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0f0      	beq.n	800cb7e <HAL_RCC_OscConfig+0x23a>
 800cb9c:	e01a      	b.n	800cbd4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cba2:	4a08      	ldr	r2, [pc, #32]	; (800cbc4 <HAL_RCC_OscConfig+0x280>)
 800cba4:	f023 0301 	bic.w	r3, r3, #1
 800cba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbaa:	f7fe faf1 	bl	800b190 <HAL_GetTick>
 800cbae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbb0:	e00a      	b.n	800cbc8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbb2:	f7fe faed 	bl	800b190 <HAL_GetTick>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d903      	bls.n	800cbc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	e166      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
 800cbc4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbc8:	4b92      	ldr	r3, [pc, #584]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cbca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbcc:	f003 0302 	and.w	r3, r3, #2
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1ee      	bne.n	800cbb2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 0304 	and.w	r3, r3, #4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80a4 	beq.w	800cd2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbe2:	4b8c      	ldr	r3, [pc, #560]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10d      	bne.n	800cc0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbee:	4b89      	ldr	r3, [pc, #548]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf2:	4a88      	ldr	r2, [pc, #544]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cbf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbf8:	6413      	str	r3, [r2, #64]	; 0x40
 800cbfa:	4b86      	ldr	r3, [pc, #536]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc02:	60bb      	str	r3, [r7, #8]
 800cc04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cc06:	2301      	movs	r3, #1
 800cc08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc0a:	4b83      	ldr	r3, [pc, #524]	; (800ce18 <HAL_RCC_OscConfig+0x4d4>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d118      	bne.n	800cc48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800cc16:	4b80      	ldr	r3, [pc, #512]	; (800ce18 <HAL_RCC_OscConfig+0x4d4>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a7f      	ldr	r2, [pc, #508]	; (800ce18 <HAL_RCC_OscConfig+0x4d4>)
 800cc1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc22:	f7fe fab5 	bl	800b190 <HAL_GetTick>
 800cc26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc28:	e008      	b.n	800cc3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc2a:	f7fe fab1 	bl	800b190 <HAL_GetTick>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	2b64      	cmp	r3, #100	; 0x64
 800cc36:	d901      	bls.n	800cc3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	e12a      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc3c:	4b76      	ldr	r3, [pc, #472]	; (800ce18 <HAL_RCC_OscConfig+0x4d4>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d0f0      	beq.n	800cc2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d106      	bne.n	800cc5e <HAL_RCC_OscConfig+0x31a>
 800cc50:	4b70      	ldr	r3, [pc, #448]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc54:	4a6f      	ldr	r2, [pc, #444]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc56:	f043 0301 	orr.w	r3, r3, #1
 800cc5a:	6713      	str	r3, [r2, #112]	; 0x70
 800cc5c:	e02d      	b.n	800ccba <HAL_RCC_OscConfig+0x376>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10c      	bne.n	800cc80 <HAL_RCC_OscConfig+0x33c>
 800cc66:	4b6b      	ldr	r3, [pc, #428]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc6a:	4a6a      	ldr	r2, [pc, #424]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	6713      	str	r3, [r2, #112]	; 0x70
 800cc72:	4b68      	ldr	r3, [pc, #416]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc76:	4a67      	ldr	r2, [pc, #412]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc78:	f023 0304 	bic.w	r3, r3, #4
 800cc7c:	6713      	str	r3, [r2, #112]	; 0x70
 800cc7e:	e01c      	b.n	800ccba <HAL_RCC_OscConfig+0x376>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b05      	cmp	r3, #5
 800cc86:	d10c      	bne.n	800cca2 <HAL_RCC_OscConfig+0x35e>
 800cc88:	4b62      	ldr	r3, [pc, #392]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8c:	4a61      	ldr	r2, [pc, #388]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc8e:	f043 0304 	orr.w	r3, r3, #4
 800cc92:	6713      	str	r3, [r2, #112]	; 0x70
 800cc94:	4b5f      	ldr	r3, [pc, #380]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc98:	4a5e      	ldr	r2, [pc, #376]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cc9a:	f043 0301 	orr.w	r3, r3, #1
 800cc9e:	6713      	str	r3, [r2, #112]	; 0x70
 800cca0:	e00b      	b.n	800ccba <HAL_RCC_OscConfig+0x376>
 800cca2:	4b5c      	ldr	r3, [pc, #368]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca6:	4a5b      	ldr	r2, [pc, #364]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cca8:	f023 0301 	bic.w	r3, r3, #1
 800ccac:	6713      	str	r3, [r2, #112]	; 0x70
 800ccae:	4b59      	ldr	r3, [pc, #356]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800ccb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb2:	4a58      	ldr	r2, [pc, #352]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800ccb4:	f023 0304 	bic.w	r3, r3, #4
 800ccb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d015      	beq.n	800ccee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc2:	f7fe fa65 	bl	800b190 <HAL_GetTick>
 800ccc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccc8:	e00a      	b.n	800cce0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccca:	f7fe fa61 	bl	800b190 <HAL_GetTick>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d901      	bls.n	800cce0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e0d8      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cce0:	4b4c      	ldr	r3, [pc, #304]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0ee      	beq.n	800ccca <HAL_RCC_OscConfig+0x386>
 800ccec:	e014      	b.n	800cd18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccee:	f7fe fa4f 	bl	800b190 <HAL_GetTick>
 800ccf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ccf4:	e00a      	b.n	800cd0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccf6:	f7fe fa4b 	bl	800b190 <HAL_GetTick>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d901      	bls.n	800cd0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e0c2      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd0c:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd10:	f003 0302 	and.w	r3, r3, #2
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1ee      	bne.n	800ccf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d105      	bne.n	800cd2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd1e:	4b3d      	ldr	r3, [pc, #244]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd22:	4a3c      	ldr	r2, [pc, #240]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 80ae 	beq.w	800ce90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cd34:	4b37      	ldr	r3, [pc, #220]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f003 030c 	and.w	r3, r3, #12
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d06d      	beq.n	800ce1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	699b      	ldr	r3, [r3, #24]
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d14b      	bne.n	800cde0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd48:	4b32      	ldr	r3, [pc, #200]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a31      	ldr	r2, [pc, #196]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd54:	f7fe fa1c 	bl	800b190 <HAL_GetTick>
 800cd58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd5a:	e008      	b.n	800cd6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd5c:	f7fe fa18 	bl	800b190 <HAL_GetTick>
 800cd60:	4602      	mov	r2, r0
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d901      	bls.n	800cd6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	e091      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd6e:	4b29      	ldr	r3, [pc, #164]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1f0      	bne.n	800cd5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	69da      	ldr	r2, [r3, #28]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd88:	019b      	lsls	r3, r3, #6
 800cd8a:	431a      	orrs	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd90:	085b      	lsrs	r3, r3, #1
 800cd92:	3b01      	subs	r3, #1
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd9c:	061b      	lsls	r3, r3, #24
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda4:	071b      	lsls	r3, r3, #28
 800cda6:	491b      	ldr	r1, [pc, #108]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cdac:	4b19      	ldr	r3, [pc, #100]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4a18      	ldr	r2, [pc, #96]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cdb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdb8:	f7fe f9ea 	bl	800b190 <HAL_GetTick>
 800cdbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdbe:	e008      	b.n	800cdd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdc0:	f7fe f9e6 	bl	800b190 <HAL_GetTick>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d901      	bls.n	800cdd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e05f      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdd2:	4b10      	ldr	r3, [pc, #64]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0f0      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x47c>
 800cdde:	e057      	b.n	800ce90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cde0:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a0b      	ldr	r2, [pc, #44]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800cde6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cdea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdec:	f7fe f9d0 	bl	800b190 <HAL_GetTick>
 800cdf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdf2:	e008      	b.n	800ce06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cdf4:	f7fe f9cc 	bl	800b190 <HAL_GetTick>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d901      	bls.n	800ce06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800ce02:	2303      	movs	r3, #3
 800ce04:	e045      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce06:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <HAL_RCC_OscConfig+0x4d0>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1f0      	bne.n	800cdf4 <HAL_RCC_OscConfig+0x4b0>
 800ce12:	e03d      	b.n	800ce90 <HAL_RCC_OscConfig+0x54c>
 800ce14:	40023800 	.word	0x40023800
 800ce18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800ce1c:	4b1f      	ldr	r3, [pc, #124]	; (800ce9c <HAL_RCC_OscConfig+0x558>)
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d030      	beq.n	800ce8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d129      	bne.n	800ce8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d122      	bne.n	800ce8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ce46:	68fa      	ldr	r2, [r7, #12]
 800ce48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ce52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d119      	bne.n	800ce8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce62:	085b      	lsrs	r3, r3, #1
 800ce64:	3b01      	subs	r3, #1
 800ce66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d10f      	bne.n	800ce8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d107      	bne.n	800ce8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d001      	beq.n	800ce90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e000      	b.n	800ce92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3718      	adds	r7, #24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	40023800 	.word	0x40023800

0800cea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e0d0      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ceb8:	4b6a      	ldr	r3, [pc, #424]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 030f 	and.w	r3, r3, #15
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d910      	bls.n	800cee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cec6:	4b67      	ldr	r3, [pc, #412]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f023 020f 	bic.w	r2, r3, #15
 800cece:	4965      	ldr	r1, [pc, #404]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ced6:	4b63      	ldr	r3, [pc, #396]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f003 030f 	and.w	r3, r3, #15
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d001      	beq.n	800cee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e0b8      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f003 0302 	and.w	r3, r3, #2
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d020      	beq.n	800cf36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 0304 	and.w	r3, r3, #4
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d005      	beq.n	800cf0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf00:	4b59      	ldr	r3, [pc, #356]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	4a58      	ldr	r2, [pc, #352]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cf0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 0308 	and.w	r3, r3, #8
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d005      	beq.n	800cf24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cf18:	4b53      	ldr	r3, [pc, #332]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	4a52      	ldr	r2, [pc, #328]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cf22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf24:	4b50      	ldr	r3, [pc, #320]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	494d      	ldr	r1, [pc, #308]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf32:	4313      	orrs	r3, r2
 800cf34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 0301 	and.w	r3, r3, #1
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d040      	beq.n	800cfc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d107      	bne.n	800cf5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cf4a:	4b47      	ldr	r3, [pc, #284]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d115      	bne.n	800cf82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cf56:	2301      	movs	r3, #1
 800cf58:	e07f      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d107      	bne.n	800cf72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf62:	4b41      	ldr	r3, [pc, #260]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d109      	bne.n	800cf82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e073      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf72:	4b3d      	ldr	r3, [pc, #244]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f003 0302 	and.w	r3, r3, #2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e06b      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cf82:	4b39      	ldr	r3, [pc, #228]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	f023 0203 	bic.w	r2, r3, #3
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	4936      	ldr	r1, [pc, #216]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cf90:	4313      	orrs	r3, r2
 800cf92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf94:	f7fe f8fc 	bl	800b190 <HAL_GetTick>
 800cf98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf9a:	e00a      	b.n	800cfb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf9c:	f7fe f8f8 	bl	800b190 <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d901      	bls.n	800cfb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e053      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfb2:	4b2d      	ldr	r3, [pc, #180]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800cfb4:	689b      	ldr	r3, [r3, #8]
 800cfb6:	f003 020c 	and.w	r2, r3, #12
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d1eb      	bne.n	800cf9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfc4:	4b27      	ldr	r3, [pc, #156]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 030f 	and.w	r3, r3, #15
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d210      	bcs.n	800cff4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfd2:	4b24      	ldr	r3, [pc, #144]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f023 020f 	bic.w	r2, r3, #15
 800cfda:	4922      	ldr	r1, [pc, #136]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfe2:	4b20      	ldr	r3, [pc, #128]	; (800d064 <HAL_RCC_ClockConfig+0x1c4>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f003 030f 	and.w	r3, r3, #15
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d001      	beq.n	800cff4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e032      	b.n	800d05a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 0304 	and.w	r3, r3, #4
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d008      	beq.n	800d012 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d000:	4b19      	ldr	r3, [pc, #100]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	4916      	ldr	r1, [pc, #88]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800d00e:	4313      	orrs	r3, r2
 800d010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 0308 	and.w	r3, r3, #8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d009      	beq.n	800d032 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d01e:	4b12      	ldr	r3, [pc, #72]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	490e      	ldr	r1, [pc, #56]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800d02e:	4313      	orrs	r3, r2
 800d030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d032:	f000 f821 	bl	800d078 <HAL_RCC_GetSysClockFreq>
 800d036:	4602      	mov	r2, r0
 800d038:	4b0b      	ldr	r3, [pc, #44]	; (800d068 <HAL_RCC_ClockConfig+0x1c8>)
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	091b      	lsrs	r3, r3, #4
 800d03e:	f003 030f 	and.w	r3, r3, #15
 800d042:	490a      	ldr	r1, [pc, #40]	; (800d06c <HAL_RCC_ClockConfig+0x1cc>)
 800d044:	5ccb      	ldrb	r3, [r1, r3]
 800d046:	fa22 f303 	lsr.w	r3, r2, r3
 800d04a:	4a09      	ldr	r2, [pc, #36]	; (800d070 <HAL_RCC_ClockConfig+0x1d0>)
 800d04c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d04e:	4b09      	ldr	r3, [pc, #36]	; (800d074 <HAL_RCC_ClockConfig+0x1d4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4618      	mov	r0, r3
 800d054:	f7f8 fd00 	bl	8005a58 <HAL_InitTick>

  return HAL_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	40023c00 	.word	0x40023c00
 800d068:	40023800 	.word	0x40023800
 800d06c:	08013098 	.word	0x08013098
 800d070:	20000058 	.word	0x20000058
 800d074:	200001b4 	.word	0x200001b4

0800d078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d07c:	b094      	sub	sp, #80	; 0x50
 800d07e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	647b      	str	r3, [r7, #68]	; 0x44
 800d084:	2300      	movs	r3, #0
 800d086:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d088:	2300      	movs	r3, #0
 800d08a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d090:	4b79      	ldr	r3, [pc, #484]	; (800d278 <HAL_RCC_GetSysClockFreq+0x200>)
 800d092:	689b      	ldr	r3, [r3, #8]
 800d094:	f003 030c 	and.w	r3, r3, #12
 800d098:	2b08      	cmp	r3, #8
 800d09a:	d00d      	beq.n	800d0b8 <HAL_RCC_GetSysClockFreq+0x40>
 800d09c:	2b08      	cmp	r3, #8
 800d09e:	f200 80e1 	bhi.w	800d264 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <HAL_RCC_GetSysClockFreq+0x34>
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	d003      	beq.n	800d0b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800d0aa:	e0db      	b.n	800d264 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d0ac:	4b73      	ldr	r3, [pc, #460]	; (800d27c <HAL_RCC_GetSysClockFreq+0x204>)
 800d0ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d0b0:	e0db      	b.n	800d26a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d0b2:	4b73      	ldr	r3, [pc, #460]	; (800d280 <HAL_RCC_GetSysClockFreq+0x208>)
 800d0b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d0b6:	e0d8      	b.n	800d26a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d0b8:	4b6f      	ldr	r3, [pc, #444]	; (800d278 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d0c2:	4b6d      	ldr	r3, [pc, #436]	; (800d278 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d063      	beq.n	800d196 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0ce:	4b6a      	ldr	r3, [pc, #424]	; (800d278 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	099b      	lsrs	r3, r3, #6
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e0:	633b      	str	r3, [r7, #48]	; 0x30
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	462b      	mov	r3, r5
 800d0ee:	f04f 0000 	mov.w	r0, #0
 800d0f2:	f04f 0100 	mov.w	r1, #0
 800d0f6:	0159      	lsls	r1, r3, #5
 800d0f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d0fc:	0150      	lsls	r0, r2, #5
 800d0fe:	4602      	mov	r2, r0
 800d100:	460b      	mov	r3, r1
 800d102:	4621      	mov	r1, r4
 800d104:	1a51      	subs	r1, r2, r1
 800d106:	6139      	str	r1, [r7, #16]
 800d108:	4629      	mov	r1, r5
 800d10a:	eb63 0301 	sbc.w	r3, r3, r1
 800d10e:	617b      	str	r3, [r7, #20]
 800d110:	f04f 0200 	mov.w	r2, #0
 800d114:	f04f 0300 	mov.w	r3, #0
 800d118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d11c:	4659      	mov	r1, fp
 800d11e:	018b      	lsls	r3, r1, #6
 800d120:	4651      	mov	r1, sl
 800d122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d126:	4651      	mov	r1, sl
 800d128:	018a      	lsls	r2, r1, #6
 800d12a:	4651      	mov	r1, sl
 800d12c:	ebb2 0801 	subs.w	r8, r2, r1
 800d130:	4659      	mov	r1, fp
 800d132:	eb63 0901 	sbc.w	r9, r3, r1
 800d136:	f04f 0200 	mov.w	r2, #0
 800d13a:	f04f 0300 	mov.w	r3, #0
 800d13e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d14a:	4690      	mov	r8, r2
 800d14c:	4699      	mov	r9, r3
 800d14e:	4623      	mov	r3, r4
 800d150:	eb18 0303 	adds.w	r3, r8, r3
 800d154:	60bb      	str	r3, [r7, #8]
 800d156:	462b      	mov	r3, r5
 800d158:	eb49 0303 	adc.w	r3, r9, r3
 800d15c:	60fb      	str	r3, [r7, #12]
 800d15e:	f04f 0200 	mov.w	r2, #0
 800d162:	f04f 0300 	mov.w	r3, #0
 800d166:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d16a:	4629      	mov	r1, r5
 800d16c:	024b      	lsls	r3, r1, #9
 800d16e:	4621      	mov	r1, r4
 800d170:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d174:	4621      	mov	r1, r4
 800d176:	024a      	lsls	r2, r1, #9
 800d178:	4610      	mov	r0, r2
 800d17a:	4619      	mov	r1, r3
 800d17c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d17e:	2200      	movs	r2, #0
 800d180:	62bb      	str	r3, [r7, #40]	; 0x28
 800d182:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d184:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d188:	f7f3 f85a 	bl	8000240 <__aeabi_uldivmod>
 800d18c:	4602      	mov	r2, r0
 800d18e:	460b      	mov	r3, r1
 800d190:	4613      	mov	r3, r2
 800d192:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d194:	e058      	b.n	800d248 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d196:	4b38      	ldr	r3, [pc, #224]	; (800d278 <HAL_RCC_GetSysClockFreq+0x200>)
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	099b      	lsrs	r3, r3, #6
 800d19c:	2200      	movs	r2, #0
 800d19e:	4618      	mov	r0, r3
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d1a6:	623b      	str	r3, [r7, #32]
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d1ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	464b      	mov	r3, r9
 800d1b4:	f04f 0000 	mov.w	r0, #0
 800d1b8:	f04f 0100 	mov.w	r1, #0
 800d1bc:	0159      	lsls	r1, r3, #5
 800d1be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d1c2:	0150      	lsls	r0, r2, #5
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4641      	mov	r1, r8
 800d1ca:	ebb2 0a01 	subs.w	sl, r2, r1
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	eb63 0b01 	sbc.w	fp, r3, r1
 800d1d4:	f04f 0200 	mov.w	r2, #0
 800d1d8:	f04f 0300 	mov.w	r3, #0
 800d1dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d1e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d1e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d1e8:	ebb2 040a 	subs.w	r4, r2, sl
 800d1ec:	eb63 050b 	sbc.w	r5, r3, fp
 800d1f0:	f04f 0200 	mov.w	r2, #0
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	00eb      	lsls	r3, r5, #3
 800d1fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1fe:	00e2      	lsls	r2, r4, #3
 800d200:	4614      	mov	r4, r2
 800d202:	461d      	mov	r5, r3
 800d204:	4643      	mov	r3, r8
 800d206:	18e3      	adds	r3, r4, r3
 800d208:	603b      	str	r3, [r7, #0]
 800d20a:	464b      	mov	r3, r9
 800d20c:	eb45 0303 	adc.w	r3, r5, r3
 800d210:	607b      	str	r3, [r7, #4]
 800d212:	f04f 0200 	mov.w	r2, #0
 800d216:	f04f 0300 	mov.w	r3, #0
 800d21a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d21e:	4629      	mov	r1, r5
 800d220:	028b      	lsls	r3, r1, #10
 800d222:	4621      	mov	r1, r4
 800d224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d228:	4621      	mov	r1, r4
 800d22a:	028a      	lsls	r2, r1, #10
 800d22c:	4610      	mov	r0, r2
 800d22e:	4619      	mov	r1, r3
 800d230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d232:	2200      	movs	r2, #0
 800d234:	61bb      	str	r3, [r7, #24]
 800d236:	61fa      	str	r2, [r7, #28]
 800d238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d23c:	f7f3 f800 	bl	8000240 <__aeabi_uldivmod>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4613      	mov	r3, r2
 800d246:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d248:	4b0b      	ldr	r3, [pc, #44]	; (800d278 <HAL_RCC_GetSysClockFreq+0x200>)
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	0c1b      	lsrs	r3, r3, #16
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	3301      	adds	r3, #1
 800d254:	005b      	lsls	r3, r3, #1
 800d256:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800d258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d262:	e002      	b.n	800d26a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d264:	4b05      	ldr	r3, [pc, #20]	; (800d27c <HAL_RCC_GetSysClockFreq+0x204>)
 800d266:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3750      	adds	r7, #80	; 0x50
 800d270:	46bd      	mov	sp, r7
 800d272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d276:	bf00      	nop
 800d278:	40023800 	.word	0x40023800
 800d27c:	00f42400 	.word	0x00f42400
 800d280:	007a1200 	.word	0x007a1200

0800d284 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d284:	b480      	push	{r7}
 800d286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d288:	4b03      	ldr	r3, [pc, #12]	; (800d298 <HAL_RCC_GetHCLKFreq+0x14>)
 800d28a:	681b      	ldr	r3, [r3, #0]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	20000058 	.word	0x20000058

0800d29c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d2a0:	f7ff fff0 	bl	800d284 <HAL_RCC_GetHCLKFreq>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <HAL_RCC_GetPCLK1Freq+0x20>)
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	0a9b      	lsrs	r3, r3, #10
 800d2ac:	f003 0307 	and.w	r3, r3, #7
 800d2b0:	4903      	ldr	r1, [pc, #12]	; (800d2c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d2b2:	5ccb      	ldrb	r3, [r1, r3]
 800d2b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	40023800 	.word	0x40023800
 800d2c0:	080130a8 	.word	0x080130a8

0800d2c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d2c8:	f7ff ffdc 	bl	800d284 <HAL_RCC_GetHCLKFreq>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	0b5b      	lsrs	r3, r3, #13
 800d2d4:	f003 0307 	and.w	r3, r3, #7
 800d2d8:	4903      	ldr	r1, [pc, #12]	; (800d2e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d2da:	5ccb      	ldrb	r3, [r1, r3]
 800d2dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	40023800 	.word	0x40023800
 800d2e8:	080130a8 	.word	0x080130a8

0800d2ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	220f      	movs	r2, #15
 800d2fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d2fc:	4b12      	ldr	r3, [pc, #72]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f003 0203 	and.w	r2, r3, #3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d308:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d314:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d316:	689b      	ldr	r3, [r3, #8]
 800d318:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d320:	4b09      	ldr	r3, [pc, #36]	; (800d348 <HAL_RCC_GetClockConfig+0x5c>)
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	08db      	lsrs	r3, r3, #3
 800d326:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d32e:	4b07      	ldr	r3, [pc, #28]	; (800d34c <HAL_RCC_GetClockConfig+0x60>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f003 020f 	and.w	r2, r3, #15
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	601a      	str	r2, [r3, #0]
}
 800d33a:	bf00      	nop
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	40023800 	.word	0x40023800
 800d34c:	40023c00 	.word	0x40023c00

0800d350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d360:	2300      	movs	r3, #0
 800d362:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	2b00      	cmp	r3, #0
 800d376:	d012      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d378:	4b69      	ldr	r3, [pc, #420]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d37a:	689b      	ldr	r3, [r3, #8]
 800d37c:	4a68      	ldr	r2, [pc, #416]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d37e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d382:	6093      	str	r3, [r2, #8]
 800d384:	4b66      	ldr	r3, [pc, #408]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d386:	689a      	ldr	r2, [r3, #8]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38c:	4964      	ldr	r1, [pc, #400]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d38e:	4313      	orrs	r3, r2
 800d390:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d39a:	2301      	movs	r3, #1
 800d39c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d017      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d3aa:	4b5d      	ldr	r3, [pc, #372]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d3ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b8:	4959      	ldr	r1, [pc, #356]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3c8:	d101      	bne.n	800d3ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d017      	beq.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d3e6:	4b4e      	ldr	r3, [pc, #312]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d3e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f4:	494a      	ldr	r1, [pc, #296]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d404:	d101      	bne.n	800d40a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d406:	2301      	movs	r3, #1
 800d408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d101      	bne.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d412:	2301      	movs	r3, #1
 800d414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d422:	2301      	movs	r3, #1
 800d424:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f003 0320 	and.w	r3, r3, #32
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 808b 	beq.w	800d54a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d434:	4b3a      	ldr	r3, [pc, #232]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d438:	4a39      	ldr	r2, [pc, #228]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d43a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d43e:	6413      	str	r3, [r2, #64]	; 0x40
 800d440:	4b37      	ldr	r3, [pc, #220]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d448:	60bb      	str	r3, [r7, #8]
 800d44a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d44c:	4b35      	ldr	r3, [pc, #212]	; (800d524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a34      	ldr	r2, [pc, #208]	; (800d524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d458:	f7fd fe9a 	bl	800b190 <HAL_GetTick>
 800d45c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d45e:	e008      	b.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d460:	f7fd fe96 	bl	800b190 <HAL_GetTick>
 800d464:	4602      	mov	r2, r0
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	2b64      	cmp	r3, #100	; 0x64
 800d46c:	d901      	bls.n	800d472 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d46e:	2303      	movs	r3, #3
 800d470:	e38f      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d472:	4b2c      	ldr	r3, [pc, #176]	; (800d524 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0f0      	beq.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d47e:	4b28      	ldr	r3, [pc, #160]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d486:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d035      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d496:	693a      	ldr	r2, [r7, #16]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d02e      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d49c:	4b20      	ldr	r3, [pc, #128]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d4a6:	4b1e      	ldr	r3, [pc, #120]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4aa:	4a1d      	ldr	r2, [pc, #116]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4b0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d4b2:	4b1b      	ldr	r3, [pc, #108]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b6:	4a1a      	ldr	r2, [pc, #104]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d4be:	4a18      	ldr	r2, [pc, #96]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d4c4:	4b16      	ldr	r3, [pc, #88]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d114      	bne.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4d0:	f7fd fe5e 	bl	800b190 <HAL_GetTick>
 800d4d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4d6:	e00a      	b.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4d8:	f7fd fe5a 	bl	800b190 <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d901      	bls.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d4ea:	2303      	movs	r3, #3
 800d4ec:	e351      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d4ee:	4b0c      	ldr	r3, [pc, #48]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d0ee      	beq.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d506:	d111      	bne.n	800d52c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d508:	4b05      	ldr	r3, [pc, #20]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d50a:	689b      	ldr	r3, [r3, #8]
 800d50c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d514:	4b04      	ldr	r3, [pc, #16]	; (800d528 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d516:	400b      	ands	r3, r1
 800d518:	4901      	ldr	r1, [pc, #4]	; (800d520 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d51a:	4313      	orrs	r3, r2
 800d51c:	608b      	str	r3, [r1, #8]
 800d51e:	e00b      	b.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d520:	40023800 	.word	0x40023800
 800d524:	40007000 	.word	0x40007000
 800d528:	0ffffcff 	.word	0x0ffffcff
 800d52c:	4bac      	ldr	r3, [pc, #688]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	4aab      	ldr	r2, [pc, #684]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d532:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d536:	6093      	str	r3, [r2, #8]
 800d538:	4ba9      	ldr	r3, [pc, #676]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d53a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d544:	49a6      	ldr	r1, [pc, #664]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d546:	4313      	orrs	r3, r2
 800d548:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 0310 	and.w	r3, r3, #16
 800d552:	2b00      	cmp	r3, #0
 800d554:	d010      	beq.n	800d578 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d556:	4ba2      	ldr	r3, [pc, #648]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d55c:	4aa0      	ldr	r2, [pc, #640]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d55e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d562:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d566:	4b9e      	ldr	r3, [pc, #632]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d568:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d570:	499b      	ldr	r1, [pc, #620]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d572:	4313      	orrs	r3, r2
 800d574:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00a      	beq.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d584:	4b96      	ldr	r3, [pc, #600]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d58a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d592:	4993      	ldr	r1, [pc, #588]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d594:	4313      	orrs	r3, r2
 800d596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d5a6:	4b8e      	ldr	r3, [pc, #568]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b4:	498a      	ldr	r1, [pc, #552]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00a      	beq.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d5c8:	4b85      	ldr	r3, [pc, #532]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5d6:	4982      	ldr	r1, [pc, #520]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00a      	beq.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5ea:	4b7d      	ldr	r3, [pc, #500]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5f8:	4979      	ldr	r1, [pc, #484]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00a      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d60c:	4b74      	ldr	r3, [pc, #464]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d612:	f023 0203 	bic.w	r2, r3, #3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d61a:	4971      	ldr	r1, [pc, #452]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d61c:	4313      	orrs	r3, r2
 800d61e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00a      	beq.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d62e:	4b6c      	ldr	r3, [pc, #432]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d634:	f023 020c 	bic.w	r2, r3, #12
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d63c:	4968      	ldr	r1, [pc, #416]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d63e:	4313      	orrs	r3, r2
 800d640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00a      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d650:	4b63      	ldr	r3, [pc, #396]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d656:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d65e:	4960      	ldr	r1, [pc, #384]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d660:	4313      	orrs	r3, r2
 800d662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00a      	beq.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d672:	4b5b      	ldr	r3, [pc, #364]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d678:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d680:	4957      	ldr	r1, [pc, #348]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d682:	4313      	orrs	r3, r2
 800d684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00a      	beq.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d694:	4b52      	ldr	r3, [pc, #328]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d69a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6a2:	494f      	ldr	r1, [pc, #316]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00a      	beq.n	800d6cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d6b6:	4b4a      	ldr	r3, [pc, #296]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6c4:	4946      	ldr	r1, [pc, #280]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00a      	beq.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d6d8:	4b41      	ldr	r3, [pc, #260]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6e6:	493e      	ldr	r1, [pc, #248]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d6fa:	4b39      	ldr	r3, [pc, #228]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d700:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d708:	4935      	ldr	r1, [pc, #212]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d70a:	4313      	orrs	r3, r2
 800d70c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00a      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d71c:	4b30      	ldr	r3, [pc, #192]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d722:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d72a:	492d      	ldr	r1, [pc, #180]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d72c:	4313      	orrs	r3, r2
 800d72e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d011      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d73e:	4b28      	ldr	r3, [pc, #160]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d744:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d74c:	4924      	ldr	r1, [pc, #144]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d75c:	d101      	bne.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f003 0308 	and.w	r3, r3, #8
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d001      	beq.n	800d772 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d76e:	2301      	movs	r3, #1
 800d770:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00a      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d77e:	4b18      	ldr	r3, [pc, #96]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d784:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d78c:	4914      	ldr	r1, [pc, #80]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d78e:	4313      	orrs	r3, r2
 800d790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d00b      	beq.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d7a0:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7b0:	490b      	ldr	r1, [pc, #44]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00f      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d7c4:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7d4:	4902      	ldr	r1, [pc, #8]	; (800d7e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d7dc:	e002      	b.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800d7de:	bf00      	nop
 800d7e0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d7f0:	4b8a      	ldr	r3, [pc, #552]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d7f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d800:	4986      	ldr	r1, [pc, #536]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d802:	4313      	orrs	r3, r2
 800d804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00b      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800d814:	4b81      	ldr	r3, [pc, #516]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d81a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d824:	497d      	ldr	r1, [pc, #500]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d826:	4313      	orrs	r3, r2
 800d828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d006      	beq.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f000 80d6 	beq.w	800d9ec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800d840:	4b76      	ldr	r3, [pc, #472]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a75      	ldr	r2, [pc, #468]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d84a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d84c:	f7fd fca0 	bl	800b190 <HAL_GetTick>
 800d850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d852:	e008      	b.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d854:	f7fd fc9c 	bl	800b190 <HAL_GetTick>
 800d858:	4602      	mov	r2, r0
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	2b64      	cmp	r3, #100	; 0x64
 800d860:	d901      	bls.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e195      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800d866:	4b6d      	ldr	r3, [pc, #436]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1f0      	bne.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d021      	beq.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d882:	2b00      	cmp	r3, #0
 800d884:	d11d      	bne.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d886:	4b65      	ldr	r3, [pc, #404]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d88c:	0c1b      	lsrs	r3, r3, #16
 800d88e:	f003 0303 	and.w	r3, r3, #3
 800d892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d894:	4b61      	ldr	r3, [pc, #388]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d89a:	0e1b      	lsrs	r3, r3, #24
 800d89c:	f003 030f 	and.w	r3, r3, #15
 800d8a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	019a      	lsls	r2, r3, #6
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	041b      	lsls	r3, r3, #16
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	061b      	lsls	r3, r3, #24
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	071b      	lsls	r3, r3, #28
 800d8ba:	4958      	ldr	r1, [pc, #352]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d004      	beq.n	800d8d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8d6:	d00a      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d02e      	beq.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8ec:	d129      	bne.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800d8ee:	4b4b      	ldr	r3, [pc, #300]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8f4:	0c1b      	lsrs	r3, r3, #16
 800d8f6:	f003 0303 	and.w	r3, r3, #3
 800d8fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d8fc:	4b47      	ldr	r3, [pc, #284]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d902:	0f1b      	lsrs	r3, r3, #28
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	019a      	lsls	r2, r3, #6
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	041b      	lsls	r3, r3, #16
 800d914:	431a      	orrs	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68db      	ldr	r3, [r3, #12]
 800d91a:	061b      	lsls	r3, r3, #24
 800d91c:	431a      	orrs	r2, r3
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	071b      	lsls	r3, r3, #28
 800d922:	493e      	ldr	r1, [pc, #248]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d924:	4313      	orrs	r3, r2
 800d926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800d92a:	4b3c      	ldr	r3, [pc, #240]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d930:	f023 021f 	bic.w	r2, r3, #31
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d938:	3b01      	subs	r3, #1
 800d93a:	4938      	ldr	r1, [pc, #224]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d93c:	4313      	orrs	r3, r2
 800d93e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d01d      	beq.n	800d98a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800d94e:	4b33      	ldr	r3, [pc, #204]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d954:	0e1b      	lsrs	r3, r3, #24
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800d95c:	4b2f      	ldr	r3, [pc, #188]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d962:	0f1b      	lsrs	r3, r3, #28
 800d964:	f003 0307 	and.w	r3, r3, #7
 800d968:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	019a      	lsls	r2, r3, #6
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	041b      	lsls	r3, r3, #16
 800d976:	431a      	orrs	r2, r3
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	061b      	lsls	r3, r3, #24
 800d97c:	431a      	orrs	r2, r3
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	071b      	lsls	r3, r3, #28
 800d982:	4926      	ldr	r1, [pc, #152]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d984:	4313      	orrs	r3, r2
 800d986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d992:	2b00      	cmp	r3, #0
 800d994:	d011      	beq.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	019a      	lsls	r2, r3, #6
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	041b      	lsls	r3, r3, #16
 800d9a2:	431a      	orrs	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	061b      	lsls	r3, r3, #24
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	071b      	lsls	r3, r3, #28
 800d9b2:	491a      	ldr	r1, [pc, #104]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800d9ba:	4b18      	ldr	r3, [pc, #96]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4a17      	ldr	r2, [pc, #92]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d9c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d9c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9c6:	f7fd fbe3 	bl	800b190 <HAL_GetTick>
 800d9ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d9cc:	e008      	b.n	800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800d9ce:	f7fd fbdf 	bl	800b190 <HAL_GetTick>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	2b64      	cmp	r3, #100	; 0x64
 800d9da:	d901      	bls.n	800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e0d8      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800d9e0:	4b0e      	ldr	r3, [pc, #56]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d0f0      	beq.n	800d9ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	f040 80ce 	bne.w	800db90 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800d9f4:	4b09      	ldr	r3, [pc, #36]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a08      	ldr	r2, [pc, #32]	; (800da1c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800d9fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da00:	f7fd fbc6 	bl	800b190 <HAL_GetTick>
 800da04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800da06:	e00b      	b.n	800da20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800da08:	f7fd fbc2 	bl	800b190 <HAL_GetTick>
 800da0c:	4602      	mov	r2, r0
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	2b64      	cmp	r3, #100	; 0x64
 800da14:	d904      	bls.n	800da20 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e0bb      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800da1a:	bf00      	nop
 800da1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800da20:	4b5e      	ldr	r3, [pc, #376]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da2c:	d0ec      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d009      	beq.n	800da56 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d02e      	beq.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da52:	2b00      	cmp	r3, #0
 800da54:	d12a      	bne.n	800daac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800da56:	4b51      	ldr	r3, [pc, #324]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800da58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da5c:	0c1b      	lsrs	r3, r3, #16
 800da5e:	f003 0303 	and.w	r3, r3, #3
 800da62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800da64:	4b4d      	ldr	r3, [pc, #308]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800da66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da6a:	0f1b      	lsrs	r3, r3, #28
 800da6c:	f003 0307 	and.w	r3, r3, #7
 800da70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	695b      	ldr	r3, [r3, #20]
 800da76:	019a      	lsls	r2, r3, #6
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	041b      	lsls	r3, r3, #16
 800da7c:	431a      	orrs	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	061b      	lsls	r3, r3, #24
 800da84:	431a      	orrs	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	071b      	lsls	r3, r3, #28
 800da8a:	4944      	ldr	r1, [pc, #272]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800da8c:	4313      	orrs	r3, r2
 800da8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800da92:	4b42      	ldr	r3, [pc, #264]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800da94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa0:	3b01      	subs	r3, #1
 800daa2:	021b      	lsls	r3, r3, #8
 800daa4:	493d      	ldr	r1, [pc, #244]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800daa6:	4313      	orrs	r3, r2
 800daa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d022      	beq.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dabc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dac0:	d11d      	bne.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dac2:	4b36      	ldr	r3, [pc, #216]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dac8:	0e1b      	lsrs	r3, r3, #24
 800daca:	f003 030f 	and.w	r3, r3, #15
 800dace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dad0:	4b32      	ldr	r3, [pc, #200]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dad6:	0f1b      	lsrs	r3, r3, #28
 800dad8:	f003 0307 	and.w	r3, r3, #7
 800dadc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	019a      	lsls	r2, r3, #6
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a1b      	ldr	r3, [r3, #32]
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	431a      	orrs	r2, r3
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	061b      	lsls	r3, r3, #24
 800daf0:	431a      	orrs	r2, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	071b      	lsls	r3, r3, #28
 800daf6:	4929      	ldr	r1, [pc, #164]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800daf8:	4313      	orrs	r3, r2
 800dafa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 0308 	and.w	r3, r3, #8
 800db06:	2b00      	cmp	r3, #0
 800db08:	d028      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800db0a:	4b24      	ldr	r3, [pc, #144]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db10:	0e1b      	lsrs	r3, r3, #24
 800db12:	f003 030f 	and.w	r3, r3, #15
 800db16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800db18:	4b20      	ldr	r3, [pc, #128]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db1e:	0c1b      	lsrs	r3, r3, #16
 800db20:	f003 0303 	and.w	r3, r3, #3
 800db24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	019a      	lsls	r2, r3, #6
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	041b      	lsls	r3, r3, #16
 800db30:	431a      	orrs	r2, r3
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	061b      	lsls	r3, r3, #24
 800db36:	431a      	orrs	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	69db      	ldr	r3, [r3, #28]
 800db3c:	071b      	lsls	r3, r3, #28
 800db3e:	4917      	ldr	r1, [pc, #92]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db40:	4313      	orrs	r3, r2
 800db42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800db46:	4b15      	ldr	r3, [pc, #84]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db54:	4911      	ldr	r1, [pc, #68]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db56:	4313      	orrs	r3, r2
 800db58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800db5c:	4b0f      	ldr	r3, [pc, #60]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a0e      	ldr	r2, [pc, #56]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db68:	f7fd fb12 	bl	800b190 <HAL_GetTick>
 800db6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800db6e:	e008      	b.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800db70:	f7fd fb0e 	bl	800b190 <HAL_GetTick>
 800db74:	4602      	mov	r2, r0
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	2b64      	cmp	r3, #100	; 0x64
 800db7c:	d901      	bls.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800db7e:	2303      	movs	r3, #3
 800db80:	e007      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800db82:	4b06      	ldr	r3, [pc, #24]	; (800db9c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db8e:	d1ef      	bne.n	800db70 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	3720      	adds	r7, #32
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	40023800 	.word	0x40023800

0800dba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d101      	bne.n	800dbb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e049      	b.n	800dc46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f841 	bl	800dc4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2202      	movs	r2, #2
 800dbd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	3304      	adds	r3, #4
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4610      	mov	r0, r2
 800dbe0:	f000 fa00 	bl	800dfe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2201      	movs	r2, #1
 800dc30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b083      	sub	sp, #12
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800dc56:	bf00      	nop
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
	...

0800dc64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d001      	beq.n	800dc7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e054      	b.n	800dd26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2202      	movs	r2, #2
 800dc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68da      	ldr	r2, [r3, #12]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f042 0201 	orr.w	r2, r2, #1
 800dc92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a26      	ldr	r2, [pc, #152]	; (800dd34 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d022      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dca6:	d01d      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a22      	ldr	r2, [pc, #136]	; (800dd38 <HAL_TIM_Base_Start_IT+0xd4>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d018      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a21      	ldr	r2, [pc, #132]	; (800dd3c <HAL_TIM_Base_Start_IT+0xd8>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d013      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a1f      	ldr	r2, [pc, #124]	; (800dd40 <HAL_TIM_Base_Start_IT+0xdc>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d00e      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a1e      	ldr	r2, [pc, #120]	; (800dd44 <HAL_TIM_Base_Start_IT+0xe0>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d009      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a1c      	ldr	r2, [pc, #112]	; (800dd48 <HAL_TIM_Base_Start_IT+0xe4>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d004      	beq.n	800dce4 <HAL_TIM_Base_Start_IT+0x80>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4a1b      	ldr	r2, [pc, #108]	; (800dd4c <HAL_TIM_Base_Start_IT+0xe8>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d115      	bne.n	800dd10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	689a      	ldr	r2, [r3, #8]
 800dcea:	4b19      	ldr	r3, [pc, #100]	; (800dd50 <HAL_TIM_Base_Start_IT+0xec>)
 800dcec:	4013      	ands	r3, r2
 800dcee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b06      	cmp	r3, #6
 800dcf4:	d015      	beq.n	800dd22 <HAL_TIM_Base_Start_IT+0xbe>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcfc:	d011      	beq.n	800dd22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f042 0201 	orr.w	r2, r2, #1
 800dd0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd0e:	e008      	b.n	800dd22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f042 0201 	orr.w	r2, r2, #1
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	e000      	b.n	800dd24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	40010000 	.word	0x40010000
 800dd38:	40000400 	.word	0x40000400
 800dd3c:	40000800 	.word	0x40000800
 800dd40:	40000c00 	.word	0x40000c00
 800dd44:	40010400 	.word	0x40010400
 800dd48:	40014000 	.word	0x40014000
 800dd4c:	40001800 	.word	0x40001800
 800dd50:	00010007 	.word	0x00010007

0800dd54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	f003 0302 	and.w	r3, r3, #2
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d122      	bne.n	800ddb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	f003 0302 	and.w	r3, r3, #2
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d11b      	bne.n	800ddb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f06f 0202 	mvn.w	r2, #2
 800dd80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2201      	movs	r2, #1
 800dd86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	f003 0303 	and.w	r3, r3, #3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d003      	beq.n	800dd9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 f905 	bl	800dfa6 <HAL_TIM_IC_CaptureCallback>
 800dd9c:	e005      	b.n	800ddaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f8f7 	bl	800df92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 f908 	bl	800dfba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	f003 0304 	and.w	r3, r3, #4
 800ddba:	2b04      	cmp	r3, #4
 800ddbc:	d122      	bne.n	800de04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b04      	cmp	r3, #4
 800ddca:	d11b      	bne.n	800de04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	f06f 0204 	mvn.w	r2, #4
 800ddd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2202      	movs	r2, #2
 800ddda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f8db 	bl	800dfa6 <HAL_TIM_IC_CaptureCallback>
 800ddf0:	e005      	b.n	800ddfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f8cd 	bl	800df92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f8de 	bl	800dfba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	f003 0308 	and.w	r3, r3, #8
 800de0e:	2b08      	cmp	r3, #8
 800de10:	d122      	bne.n	800de58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b08      	cmp	r3, #8
 800de1e:	d11b      	bne.n	800de58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f06f 0208 	mvn.w	r2, #8
 800de28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2204      	movs	r2, #4
 800de2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	69db      	ldr	r3, [r3, #28]
 800de36:	f003 0303 	and.w	r3, r3, #3
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d003      	beq.n	800de46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f8b1 	bl	800dfa6 <HAL_TIM_IC_CaptureCallback>
 800de44:	e005      	b.n	800de52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f000 f8a3 	bl	800df92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f8b4 	bl	800dfba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	691b      	ldr	r3, [r3, #16]
 800de5e:	f003 0310 	and.w	r3, r3, #16
 800de62:	2b10      	cmp	r3, #16
 800de64:	d122      	bne.n	800deac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	f003 0310 	and.w	r3, r3, #16
 800de70:	2b10      	cmp	r3, #16
 800de72:	d11b      	bne.n	800deac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f06f 0210 	mvn.w	r2, #16
 800de7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2208      	movs	r2, #8
 800de82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	69db      	ldr	r3, [r3, #28]
 800de8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d003      	beq.n	800de9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f887 	bl	800dfa6 <HAL_TIM_IC_CaptureCallback>
 800de98:	e005      	b.n	800dea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 f879 	bl	800df92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f88a 	bl	800dfba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	691b      	ldr	r3, [r3, #16]
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d10e      	bne.n	800ded8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d107      	bne.n	800ded8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f06f 0201 	mvn.w	r2, #1
 800ded0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7f5 ff4e 	bl	8003d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dee2:	2b80      	cmp	r3, #128	; 0x80
 800dee4:	d10e      	bne.n	800df04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800def0:	2b80      	cmp	r3, #128	; 0x80
 800def2:	d107      	bne.n	800df04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800defc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 f91a 	bl	800e138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df12:	d10e      	bne.n	800df32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df1e:	2b80      	cmp	r3, #128	; 0x80
 800df20:	d107      	bne.n	800df32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800df2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 f90d 	bl	800e14c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df3c:	2b40      	cmp	r3, #64	; 0x40
 800df3e:	d10e      	bne.n	800df5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4a:	2b40      	cmp	r3, #64	; 0x40
 800df4c:	d107      	bne.n	800df5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f838 	bl	800dfce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	f003 0320 	and.w	r3, r3, #32
 800df68:	2b20      	cmp	r3, #32
 800df6a:	d10e      	bne.n	800df8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	f003 0320 	and.w	r3, r3, #32
 800df76:	2b20      	cmp	r3, #32
 800df78:	d107      	bne.n	800df8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f06f 0220 	mvn.w	r2, #32
 800df82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 f8cd 	bl	800e124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df92:	b480      	push	{r7}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df9a:	bf00      	nop
 800df9c:	370c      	adds	r7, #12
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr

0800dfa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dfa6:	b480      	push	{r7}
 800dfa8:	b083      	sub	sp, #12
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dfae:	bf00      	nop
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b083      	sub	sp, #12
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dfc2:	bf00      	nop
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
	...

0800dfe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	4a40      	ldr	r2, [pc, #256]	; (800e0f8 <TIM_Base_SetConfig+0x114>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d013      	beq.n	800e024 <TIM_Base_SetConfig+0x40>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e002:	d00f      	beq.n	800e024 <TIM_Base_SetConfig+0x40>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a3d      	ldr	r2, [pc, #244]	; (800e0fc <TIM_Base_SetConfig+0x118>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d00b      	beq.n	800e024 <TIM_Base_SetConfig+0x40>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a3c      	ldr	r2, [pc, #240]	; (800e100 <TIM_Base_SetConfig+0x11c>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d007      	beq.n	800e024 <TIM_Base_SetConfig+0x40>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a3b      	ldr	r2, [pc, #236]	; (800e104 <TIM_Base_SetConfig+0x120>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d003      	beq.n	800e024 <TIM_Base_SetConfig+0x40>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a3a      	ldr	r2, [pc, #232]	; (800e108 <TIM_Base_SetConfig+0x124>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d108      	bne.n	800e036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e02a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a2f      	ldr	r2, [pc, #188]	; (800e0f8 <TIM_Base_SetConfig+0x114>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d02b      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e044:	d027      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a2c      	ldr	r2, [pc, #176]	; (800e0fc <TIM_Base_SetConfig+0x118>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d023      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a2b      	ldr	r2, [pc, #172]	; (800e100 <TIM_Base_SetConfig+0x11c>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d01f      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a2a      	ldr	r2, [pc, #168]	; (800e104 <TIM_Base_SetConfig+0x120>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d01b      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4a29      	ldr	r2, [pc, #164]	; (800e108 <TIM_Base_SetConfig+0x124>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d017      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	4a28      	ldr	r2, [pc, #160]	; (800e10c <TIM_Base_SetConfig+0x128>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d013      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4a27      	ldr	r2, [pc, #156]	; (800e110 <TIM_Base_SetConfig+0x12c>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d00f      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a26      	ldr	r2, [pc, #152]	; (800e114 <TIM_Base_SetConfig+0x130>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d00b      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a25      	ldr	r2, [pc, #148]	; (800e118 <TIM_Base_SetConfig+0x134>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d007      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a24      	ldr	r2, [pc, #144]	; (800e11c <TIM_Base_SetConfig+0x138>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d003      	beq.n	800e096 <TIM_Base_SetConfig+0xb2>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a23      	ldr	r2, [pc, #140]	; (800e120 <TIM_Base_SetConfig+0x13c>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d108      	bne.n	800e0a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e09c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	689a      	ldr	r2, [r3, #8]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a0a      	ldr	r2, [pc, #40]	; (800e0f8 <TIM_Base_SetConfig+0x114>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d003      	beq.n	800e0dc <TIM_Base_SetConfig+0xf8>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a0c      	ldr	r2, [pc, #48]	; (800e108 <TIM_Base_SetConfig+0x124>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d103      	bne.n	800e0e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	691a      	ldr	r2, [r3, #16]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	615a      	str	r2, [r3, #20]
}
 800e0ea:	bf00      	nop
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	40010000 	.word	0x40010000
 800e0fc:	40000400 	.word	0x40000400
 800e100:	40000800 	.word	0x40000800
 800e104:	40000c00 	.word	0x40000c00
 800e108:	40010400 	.word	0x40010400
 800e10c:	40014000 	.word	0x40014000
 800e110:	40014400 	.word	0x40014400
 800e114:	40014800 	.word	0x40014800
 800e118:	40001800 	.word	0x40001800
 800e11c:	40001c00 	.word	0x40001c00
 800e120:	40002000 	.word	0x40002000

0800e124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	e040      	b.n	800e1f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e176:	2b00      	cmp	r3, #0
 800e178:	d106      	bne.n	800e188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7f7 fb8e 	bl	80058a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2224      	movs	r2, #36	; 0x24
 800e18c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f022 0201 	bic.w	r2, r2, #1
 800e19c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f000 f82c 	bl	800e1fc <UART_SetConfig>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d101      	bne.n	800e1ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e022      	b.n	800e1f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d002      	beq.n	800e1bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 fa84 	bl	800e6c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	685a      	ldr	r2, [r3, #4]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f042 0201 	orr.w	r2, r2, #1
 800e1ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 fb0b 	bl	800e808 <UART_CheckIdleState>
 800e1f2:	4603      	mov	r3, r0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	689a      	ldr	r2, [r3, #8]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	431a      	orrs	r2, r3
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	431a      	orrs	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	69db      	ldr	r3, [r3, #28]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	4ba6      	ldr	r3, [pc, #664]	; (800e4c0 <UART_SetConfig+0x2c4>)
 800e228:	4013      	ands	r3, r2
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	6812      	ldr	r2, [r2, #0]
 800e22e:	6979      	ldr	r1, [r7, #20]
 800e230:	430b      	orrs	r3, r1
 800e232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	68da      	ldr	r2, [r3, #12]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	699b      	ldr	r3, [r3, #24]
 800e24e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	4313      	orrs	r3, r2
 800e258:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	689b      	ldr	r3, [r3, #8]
 800e260:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	697a      	ldr	r2, [r7, #20]
 800e26a:	430a      	orrs	r2, r1
 800e26c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4a94      	ldr	r2, [pc, #592]	; (800e4c4 <UART_SetConfig+0x2c8>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d120      	bne.n	800e2ba <UART_SetConfig+0xbe>
 800e278:	4b93      	ldr	r3, [pc, #588]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e27e:	f003 0303 	and.w	r3, r3, #3
 800e282:	2b03      	cmp	r3, #3
 800e284:	d816      	bhi.n	800e2b4 <UART_SetConfig+0xb8>
 800e286:	a201      	add	r2, pc, #4	; (adr r2, 800e28c <UART_SetConfig+0x90>)
 800e288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e28c:	0800e29d 	.word	0x0800e29d
 800e290:	0800e2a9 	.word	0x0800e2a9
 800e294:	0800e2a3 	.word	0x0800e2a3
 800e298:	0800e2af 	.word	0x0800e2af
 800e29c:	2301      	movs	r3, #1
 800e29e:	77fb      	strb	r3, [r7, #31]
 800e2a0:	e150      	b.n	800e544 <UART_SetConfig+0x348>
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	77fb      	strb	r3, [r7, #31]
 800e2a6:	e14d      	b.n	800e544 <UART_SetConfig+0x348>
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	77fb      	strb	r3, [r7, #31]
 800e2ac:	e14a      	b.n	800e544 <UART_SetConfig+0x348>
 800e2ae:	2308      	movs	r3, #8
 800e2b0:	77fb      	strb	r3, [r7, #31]
 800e2b2:	e147      	b.n	800e544 <UART_SetConfig+0x348>
 800e2b4:	2310      	movs	r3, #16
 800e2b6:	77fb      	strb	r3, [r7, #31]
 800e2b8:	e144      	b.n	800e544 <UART_SetConfig+0x348>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a83      	ldr	r2, [pc, #524]	; (800e4cc <UART_SetConfig+0x2d0>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d132      	bne.n	800e32a <UART_SetConfig+0x12e>
 800e2c4:	4b80      	ldr	r3, [pc, #512]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ca:	f003 030c 	and.w	r3, r3, #12
 800e2ce:	2b0c      	cmp	r3, #12
 800e2d0:	d828      	bhi.n	800e324 <UART_SetConfig+0x128>
 800e2d2:	a201      	add	r2, pc, #4	; (adr r2, 800e2d8 <UART_SetConfig+0xdc>)
 800e2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d8:	0800e30d 	.word	0x0800e30d
 800e2dc:	0800e325 	.word	0x0800e325
 800e2e0:	0800e325 	.word	0x0800e325
 800e2e4:	0800e325 	.word	0x0800e325
 800e2e8:	0800e319 	.word	0x0800e319
 800e2ec:	0800e325 	.word	0x0800e325
 800e2f0:	0800e325 	.word	0x0800e325
 800e2f4:	0800e325 	.word	0x0800e325
 800e2f8:	0800e313 	.word	0x0800e313
 800e2fc:	0800e325 	.word	0x0800e325
 800e300:	0800e325 	.word	0x0800e325
 800e304:	0800e325 	.word	0x0800e325
 800e308:	0800e31f 	.word	0x0800e31f
 800e30c:	2300      	movs	r3, #0
 800e30e:	77fb      	strb	r3, [r7, #31]
 800e310:	e118      	b.n	800e544 <UART_SetConfig+0x348>
 800e312:	2302      	movs	r3, #2
 800e314:	77fb      	strb	r3, [r7, #31]
 800e316:	e115      	b.n	800e544 <UART_SetConfig+0x348>
 800e318:	2304      	movs	r3, #4
 800e31a:	77fb      	strb	r3, [r7, #31]
 800e31c:	e112      	b.n	800e544 <UART_SetConfig+0x348>
 800e31e:	2308      	movs	r3, #8
 800e320:	77fb      	strb	r3, [r7, #31]
 800e322:	e10f      	b.n	800e544 <UART_SetConfig+0x348>
 800e324:	2310      	movs	r3, #16
 800e326:	77fb      	strb	r3, [r7, #31]
 800e328:	e10c      	b.n	800e544 <UART_SetConfig+0x348>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a68      	ldr	r2, [pc, #416]	; (800e4d0 <UART_SetConfig+0x2d4>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d120      	bne.n	800e376 <UART_SetConfig+0x17a>
 800e334:	4b64      	ldr	r3, [pc, #400]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e33a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e33e:	2b30      	cmp	r3, #48	; 0x30
 800e340:	d013      	beq.n	800e36a <UART_SetConfig+0x16e>
 800e342:	2b30      	cmp	r3, #48	; 0x30
 800e344:	d814      	bhi.n	800e370 <UART_SetConfig+0x174>
 800e346:	2b20      	cmp	r3, #32
 800e348:	d009      	beq.n	800e35e <UART_SetConfig+0x162>
 800e34a:	2b20      	cmp	r3, #32
 800e34c:	d810      	bhi.n	800e370 <UART_SetConfig+0x174>
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <UART_SetConfig+0x15c>
 800e352:	2b10      	cmp	r3, #16
 800e354:	d006      	beq.n	800e364 <UART_SetConfig+0x168>
 800e356:	e00b      	b.n	800e370 <UART_SetConfig+0x174>
 800e358:	2300      	movs	r3, #0
 800e35a:	77fb      	strb	r3, [r7, #31]
 800e35c:	e0f2      	b.n	800e544 <UART_SetConfig+0x348>
 800e35e:	2302      	movs	r3, #2
 800e360:	77fb      	strb	r3, [r7, #31]
 800e362:	e0ef      	b.n	800e544 <UART_SetConfig+0x348>
 800e364:	2304      	movs	r3, #4
 800e366:	77fb      	strb	r3, [r7, #31]
 800e368:	e0ec      	b.n	800e544 <UART_SetConfig+0x348>
 800e36a:	2308      	movs	r3, #8
 800e36c:	77fb      	strb	r3, [r7, #31]
 800e36e:	e0e9      	b.n	800e544 <UART_SetConfig+0x348>
 800e370:	2310      	movs	r3, #16
 800e372:	77fb      	strb	r3, [r7, #31]
 800e374:	e0e6      	b.n	800e544 <UART_SetConfig+0x348>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a56      	ldr	r2, [pc, #344]	; (800e4d4 <UART_SetConfig+0x2d8>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d120      	bne.n	800e3c2 <UART_SetConfig+0x1c6>
 800e380:	4b51      	ldr	r3, [pc, #324]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e386:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e38a:	2bc0      	cmp	r3, #192	; 0xc0
 800e38c:	d013      	beq.n	800e3b6 <UART_SetConfig+0x1ba>
 800e38e:	2bc0      	cmp	r3, #192	; 0xc0
 800e390:	d814      	bhi.n	800e3bc <UART_SetConfig+0x1c0>
 800e392:	2b80      	cmp	r3, #128	; 0x80
 800e394:	d009      	beq.n	800e3aa <UART_SetConfig+0x1ae>
 800e396:	2b80      	cmp	r3, #128	; 0x80
 800e398:	d810      	bhi.n	800e3bc <UART_SetConfig+0x1c0>
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d002      	beq.n	800e3a4 <UART_SetConfig+0x1a8>
 800e39e:	2b40      	cmp	r3, #64	; 0x40
 800e3a0:	d006      	beq.n	800e3b0 <UART_SetConfig+0x1b4>
 800e3a2:	e00b      	b.n	800e3bc <UART_SetConfig+0x1c0>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	77fb      	strb	r3, [r7, #31]
 800e3a8:	e0cc      	b.n	800e544 <UART_SetConfig+0x348>
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	77fb      	strb	r3, [r7, #31]
 800e3ae:	e0c9      	b.n	800e544 <UART_SetConfig+0x348>
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	77fb      	strb	r3, [r7, #31]
 800e3b4:	e0c6      	b.n	800e544 <UART_SetConfig+0x348>
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	77fb      	strb	r3, [r7, #31]
 800e3ba:	e0c3      	b.n	800e544 <UART_SetConfig+0x348>
 800e3bc:	2310      	movs	r3, #16
 800e3be:	77fb      	strb	r3, [r7, #31]
 800e3c0:	e0c0      	b.n	800e544 <UART_SetConfig+0x348>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a44      	ldr	r2, [pc, #272]	; (800e4d8 <UART_SetConfig+0x2dc>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d125      	bne.n	800e418 <UART_SetConfig+0x21c>
 800e3cc:	4b3e      	ldr	r3, [pc, #248]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3da:	d017      	beq.n	800e40c <UART_SetConfig+0x210>
 800e3dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3e0:	d817      	bhi.n	800e412 <UART_SetConfig+0x216>
 800e3e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e6:	d00b      	beq.n	800e400 <UART_SetConfig+0x204>
 800e3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3ec:	d811      	bhi.n	800e412 <UART_SetConfig+0x216>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d003      	beq.n	800e3fa <UART_SetConfig+0x1fe>
 800e3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3f6:	d006      	beq.n	800e406 <UART_SetConfig+0x20a>
 800e3f8:	e00b      	b.n	800e412 <UART_SetConfig+0x216>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	77fb      	strb	r3, [r7, #31]
 800e3fe:	e0a1      	b.n	800e544 <UART_SetConfig+0x348>
 800e400:	2302      	movs	r3, #2
 800e402:	77fb      	strb	r3, [r7, #31]
 800e404:	e09e      	b.n	800e544 <UART_SetConfig+0x348>
 800e406:	2304      	movs	r3, #4
 800e408:	77fb      	strb	r3, [r7, #31]
 800e40a:	e09b      	b.n	800e544 <UART_SetConfig+0x348>
 800e40c:	2308      	movs	r3, #8
 800e40e:	77fb      	strb	r3, [r7, #31]
 800e410:	e098      	b.n	800e544 <UART_SetConfig+0x348>
 800e412:	2310      	movs	r3, #16
 800e414:	77fb      	strb	r3, [r7, #31]
 800e416:	e095      	b.n	800e544 <UART_SetConfig+0x348>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	4a2f      	ldr	r2, [pc, #188]	; (800e4dc <UART_SetConfig+0x2e0>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d125      	bne.n	800e46e <UART_SetConfig+0x272>
 800e422:	4b29      	ldr	r3, [pc, #164]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e42c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e430:	d017      	beq.n	800e462 <UART_SetConfig+0x266>
 800e432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e436:	d817      	bhi.n	800e468 <UART_SetConfig+0x26c>
 800e438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e43c:	d00b      	beq.n	800e456 <UART_SetConfig+0x25a>
 800e43e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e442:	d811      	bhi.n	800e468 <UART_SetConfig+0x26c>
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <UART_SetConfig+0x254>
 800e448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e44c:	d006      	beq.n	800e45c <UART_SetConfig+0x260>
 800e44e:	e00b      	b.n	800e468 <UART_SetConfig+0x26c>
 800e450:	2301      	movs	r3, #1
 800e452:	77fb      	strb	r3, [r7, #31]
 800e454:	e076      	b.n	800e544 <UART_SetConfig+0x348>
 800e456:	2302      	movs	r3, #2
 800e458:	77fb      	strb	r3, [r7, #31]
 800e45a:	e073      	b.n	800e544 <UART_SetConfig+0x348>
 800e45c:	2304      	movs	r3, #4
 800e45e:	77fb      	strb	r3, [r7, #31]
 800e460:	e070      	b.n	800e544 <UART_SetConfig+0x348>
 800e462:	2308      	movs	r3, #8
 800e464:	77fb      	strb	r3, [r7, #31]
 800e466:	e06d      	b.n	800e544 <UART_SetConfig+0x348>
 800e468:	2310      	movs	r3, #16
 800e46a:	77fb      	strb	r3, [r7, #31]
 800e46c:	e06a      	b.n	800e544 <UART_SetConfig+0x348>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a1b      	ldr	r2, [pc, #108]	; (800e4e0 <UART_SetConfig+0x2e4>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d138      	bne.n	800e4ea <UART_SetConfig+0x2ee>
 800e478:	4b13      	ldr	r3, [pc, #76]	; (800e4c8 <UART_SetConfig+0x2cc>)
 800e47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e47e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e486:	d017      	beq.n	800e4b8 <UART_SetConfig+0x2bc>
 800e488:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e48c:	d82a      	bhi.n	800e4e4 <UART_SetConfig+0x2e8>
 800e48e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e492:	d00b      	beq.n	800e4ac <UART_SetConfig+0x2b0>
 800e494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e498:	d824      	bhi.n	800e4e4 <UART_SetConfig+0x2e8>
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d003      	beq.n	800e4a6 <UART_SetConfig+0x2aa>
 800e49e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a2:	d006      	beq.n	800e4b2 <UART_SetConfig+0x2b6>
 800e4a4:	e01e      	b.n	800e4e4 <UART_SetConfig+0x2e8>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	77fb      	strb	r3, [r7, #31]
 800e4aa:	e04b      	b.n	800e544 <UART_SetConfig+0x348>
 800e4ac:	2302      	movs	r3, #2
 800e4ae:	77fb      	strb	r3, [r7, #31]
 800e4b0:	e048      	b.n	800e544 <UART_SetConfig+0x348>
 800e4b2:	2304      	movs	r3, #4
 800e4b4:	77fb      	strb	r3, [r7, #31]
 800e4b6:	e045      	b.n	800e544 <UART_SetConfig+0x348>
 800e4b8:	2308      	movs	r3, #8
 800e4ba:	77fb      	strb	r3, [r7, #31]
 800e4bc:	e042      	b.n	800e544 <UART_SetConfig+0x348>
 800e4be:	bf00      	nop
 800e4c0:	efff69f3 	.word	0xefff69f3
 800e4c4:	40011000 	.word	0x40011000
 800e4c8:	40023800 	.word	0x40023800
 800e4cc:	40004400 	.word	0x40004400
 800e4d0:	40004800 	.word	0x40004800
 800e4d4:	40004c00 	.word	0x40004c00
 800e4d8:	40005000 	.word	0x40005000
 800e4dc:	40011400 	.word	0x40011400
 800e4e0:	40007800 	.word	0x40007800
 800e4e4:	2310      	movs	r3, #16
 800e4e6:	77fb      	strb	r3, [r7, #31]
 800e4e8:	e02c      	b.n	800e544 <UART_SetConfig+0x348>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a72      	ldr	r2, [pc, #456]	; (800e6b8 <UART_SetConfig+0x4bc>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d125      	bne.n	800e540 <UART_SetConfig+0x344>
 800e4f4:	4b71      	ldr	r3, [pc, #452]	; (800e6bc <UART_SetConfig+0x4c0>)
 800e4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e4fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e502:	d017      	beq.n	800e534 <UART_SetConfig+0x338>
 800e504:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e508:	d817      	bhi.n	800e53a <UART_SetConfig+0x33e>
 800e50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e50e:	d00b      	beq.n	800e528 <UART_SetConfig+0x32c>
 800e510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e514:	d811      	bhi.n	800e53a <UART_SetConfig+0x33e>
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <UART_SetConfig+0x326>
 800e51a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e51e:	d006      	beq.n	800e52e <UART_SetConfig+0x332>
 800e520:	e00b      	b.n	800e53a <UART_SetConfig+0x33e>
 800e522:	2300      	movs	r3, #0
 800e524:	77fb      	strb	r3, [r7, #31]
 800e526:	e00d      	b.n	800e544 <UART_SetConfig+0x348>
 800e528:	2302      	movs	r3, #2
 800e52a:	77fb      	strb	r3, [r7, #31]
 800e52c:	e00a      	b.n	800e544 <UART_SetConfig+0x348>
 800e52e:	2304      	movs	r3, #4
 800e530:	77fb      	strb	r3, [r7, #31]
 800e532:	e007      	b.n	800e544 <UART_SetConfig+0x348>
 800e534:	2308      	movs	r3, #8
 800e536:	77fb      	strb	r3, [r7, #31]
 800e538:	e004      	b.n	800e544 <UART_SetConfig+0x348>
 800e53a:	2310      	movs	r3, #16
 800e53c:	77fb      	strb	r3, [r7, #31]
 800e53e:	e001      	b.n	800e544 <UART_SetConfig+0x348>
 800e540:	2310      	movs	r3, #16
 800e542:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	69db      	ldr	r3, [r3, #28]
 800e548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e54c:	d15b      	bne.n	800e606 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e54e:	7ffb      	ldrb	r3, [r7, #31]
 800e550:	2b08      	cmp	r3, #8
 800e552:	d828      	bhi.n	800e5a6 <UART_SetConfig+0x3aa>
 800e554:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <UART_SetConfig+0x360>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e581 	.word	0x0800e581
 800e560:	0800e589 	.word	0x0800e589
 800e564:	0800e591 	.word	0x0800e591
 800e568:	0800e5a7 	.word	0x0800e5a7
 800e56c:	0800e597 	.word	0x0800e597
 800e570:	0800e5a7 	.word	0x0800e5a7
 800e574:	0800e5a7 	.word	0x0800e5a7
 800e578:	0800e5a7 	.word	0x0800e5a7
 800e57c:	0800e59f 	.word	0x0800e59f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e580:	f7fe fe8c 	bl	800d29c <HAL_RCC_GetPCLK1Freq>
 800e584:	61b8      	str	r0, [r7, #24]
        break;
 800e586:	e013      	b.n	800e5b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e588:	f7fe fe9c 	bl	800d2c4 <HAL_RCC_GetPCLK2Freq>
 800e58c:	61b8      	str	r0, [r7, #24]
        break;
 800e58e:	e00f      	b.n	800e5b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e590:	4b4b      	ldr	r3, [pc, #300]	; (800e6c0 <UART_SetConfig+0x4c4>)
 800e592:	61bb      	str	r3, [r7, #24]
        break;
 800e594:	e00c      	b.n	800e5b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e596:	f7fe fd6f 	bl	800d078 <HAL_RCC_GetSysClockFreq>
 800e59a:	61b8      	str	r0, [r7, #24]
        break;
 800e59c:	e008      	b.n	800e5b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5a2:	61bb      	str	r3, [r7, #24]
        break;
 800e5a4:	e004      	b.n	800e5b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	77bb      	strb	r3, [r7, #30]
        break;
 800e5ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d074      	beq.n	800e6a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	005a      	lsls	r2, r3, #1
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	085b      	lsrs	r3, r3, #1
 800e5c0:	441a      	add	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	2b0f      	cmp	r3, #15
 800e5d0:	d916      	bls.n	800e600 <UART_SetConfig+0x404>
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5d8:	d212      	bcs.n	800e600 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	f023 030f 	bic.w	r3, r3, #15
 800e5e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	085b      	lsrs	r3, r3, #1
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	f003 0307 	and.w	r3, r3, #7
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	89fb      	ldrh	r3, [r7, #14]
 800e5f2:	4313      	orrs	r3, r2
 800e5f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	89fa      	ldrh	r2, [r7, #14]
 800e5fc:	60da      	str	r2, [r3, #12]
 800e5fe:	e04f      	b.n	800e6a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e600:	2301      	movs	r3, #1
 800e602:	77bb      	strb	r3, [r7, #30]
 800e604:	e04c      	b.n	800e6a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e606:	7ffb      	ldrb	r3, [r7, #31]
 800e608:	2b08      	cmp	r3, #8
 800e60a:	d828      	bhi.n	800e65e <UART_SetConfig+0x462>
 800e60c:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <UART_SetConfig+0x418>)
 800e60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e612:	bf00      	nop
 800e614:	0800e639 	.word	0x0800e639
 800e618:	0800e641 	.word	0x0800e641
 800e61c:	0800e649 	.word	0x0800e649
 800e620:	0800e65f 	.word	0x0800e65f
 800e624:	0800e64f 	.word	0x0800e64f
 800e628:	0800e65f 	.word	0x0800e65f
 800e62c:	0800e65f 	.word	0x0800e65f
 800e630:	0800e65f 	.word	0x0800e65f
 800e634:	0800e657 	.word	0x0800e657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e638:	f7fe fe30 	bl	800d29c <HAL_RCC_GetPCLK1Freq>
 800e63c:	61b8      	str	r0, [r7, #24]
        break;
 800e63e:	e013      	b.n	800e668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e640:	f7fe fe40 	bl	800d2c4 <HAL_RCC_GetPCLK2Freq>
 800e644:	61b8      	str	r0, [r7, #24]
        break;
 800e646:	e00f      	b.n	800e668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e648:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <UART_SetConfig+0x4c4>)
 800e64a:	61bb      	str	r3, [r7, #24]
        break;
 800e64c:	e00c      	b.n	800e668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e64e:	f7fe fd13 	bl	800d078 <HAL_RCC_GetSysClockFreq>
 800e652:	61b8      	str	r0, [r7, #24]
        break;
 800e654:	e008      	b.n	800e668 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e65a:	61bb      	str	r3, [r7, #24]
        break;
 800e65c:	e004      	b.n	800e668 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e65e:	2300      	movs	r3, #0
 800e660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e662:	2301      	movs	r3, #1
 800e664:	77bb      	strb	r3, [r7, #30]
        break;
 800e666:	bf00      	nop
    }

    if (pclk != 0U)
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d018      	beq.n	800e6a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	085a      	lsrs	r2, r3, #1
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	441a      	add	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	2b0f      	cmp	r3, #15
 800e686:	d909      	bls.n	800e69c <UART_SetConfig+0x4a0>
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e68e:	d205      	bcs.n	800e69c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	b29a      	uxth	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	60da      	str	r2, [r3, #12]
 800e69a:	e001      	b.n	800e6a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e69c:	2301      	movs	r3, #1
 800e69e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e6ac:	7fbb      	ldrb	r3, [r7, #30]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3720      	adds	r7, #32
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	40007c00 	.word	0x40007c00
 800e6bc:	40023800 	.word	0x40023800
 800e6c0:	00f42400 	.word	0x00f42400

0800e6c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b083      	sub	sp, #12
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d0:	f003 0301 	and.w	r3, r3, #1
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00a      	beq.n	800e6ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	430a      	orrs	r2, r1
 800e6ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6f2:	f003 0302 	and.w	r3, r3, #2
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00a      	beq.n	800e710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	430a      	orrs	r2, r1
 800e70e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e714:	f003 0304 	and.w	r3, r3, #4
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00a      	beq.n	800e732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	430a      	orrs	r2, r1
 800e730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e736:	f003 0308 	and.w	r3, r3, #8
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00a      	beq.n	800e754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	430a      	orrs	r2, r1
 800e752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	f003 0310 	and.w	r3, r3, #16
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00a      	beq.n	800e776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	689b      	ldr	r3, [r3, #8]
 800e766:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	430a      	orrs	r2, r1
 800e774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77a:	f003 0320 	and.w	r3, r3, #32
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00a      	beq.n	800e798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	430a      	orrs	r2, r1
 800e796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d01a      	beq.n	800e7da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	430a      	orrs	r2, r1
 800e7b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7c2:	d10a      	bne.n	800e7da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	430a      	orrs	r2, r1
 800e7d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00a      	beq.n	800e7fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	430a      	orrs	r2, r1
 800e7fa:	605a      	str	r2, [r3, #4]
  }
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af02      	add	r7, sp, #8
 800e80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e818:	f7fc fcba 	bl	800b190 <HAL_GetTick>
 800e81c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f003 0308 	and.w	r3, r3, #8
 800e828:	2b08      	cmp	r3, #8
 800e82a:	d10e      	bne.n	800e84a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e82c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 f831 	bl	800e8a2 <UART_WaitOnFlagUntilTimeout>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e846:	2303      	movs	r3, #3
 800e848:	e027      	b.n	800e89a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f003 0304 	and.w	r3, r3, #4
 800e854:	2b04      	cmp	r3, #4
 800e856:	d10e      	bne.n	800e876 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e858:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f81b 	bl	800e8a2 <UART_WaitOnFlagUntilTimeout>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e872:	2303      	movs	r3, #3
 800e874:	e011      	b.n	800e89a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2220      	movs	r2, #32
 800e87a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2220      	movs	r2, #32
 800e880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e898:	2300      	movs	r3, #0
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b09c      	sub	sp, #112	; 0x70
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	603b      	str	r3, [r7, #0]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8b2:	e0a7      	b.n	800ea04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ba:	f000 80a3 	beq.w	800ea04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8be:	f7fc fc67 	bl	800b190 <HAL_GetTick>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d302      	bcc.n	800e8d4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e8ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d13f      	bne.n	800e954 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8dc:	e853 3f00 	ldrex	r3, [r3]
 800e8e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8e8:	667b      	str	r3, [r7, #100]	; 0x64
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e8fa:	e841 2300 	strex	r3, r2, [r1]
 800e8fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1e6      	bne.n	800e8d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3308      	adds	r3, #8
 800e90c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e910:	e853 3f00 	ldrex	r3, [r3]
 800e914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e918:	f023 0301 	bic.w	r3, r3, #1
 800e91c:	663b      	str	r3, [r7, #96]	; 0x60
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	3308      	adds	r3, #8
 800e924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e926:	64ba      	str	r2, [r7, #72]	; 0x48
 800e928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e92c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e92e:	e841 2300 	strex	r3, r2, [r1]
 800e932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e5      	bne.n	800e906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2220      	movs	r2, #32
 800e93e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2220      	movs	r2, #32
 800e944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800e950:	2303      	movs	r3, #3
 800e952:	e068      	b.n	800ea26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f003 0304 	and.w	r3, r3, #4
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d050      	beq.n	800ea04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	69db      	ldr	r3, [r3, #28]
 800e968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e96c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e970:	d148      	bne.n	800ea04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e97a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e984:	e853 3f00 	ldrex	r3, [r3]
 800e988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e990:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	461a      	mov	r2, r3
 800e998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e99a:	637b      	str	r3, [r7, #52]	; 0x34
 800e99c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9a2:	e841 2300 	strex	r3, r2, [r1]
 800e9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d1e6      	bne.n	800e97c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	e853 3f00 	ldrex	r3, [r3]
 800e9bc:	613b      	str	r3, [r7, #16]
   return(result);
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	f023 0301 	bic.w	r3, r3, #1
 800e9c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e9ce:	623a      	str	r2, [r7, #32]
 800e9d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	69f9      	ldr	r1, [r7, #28]
 800e9d4:	6a3a      	ldr	r2, [r7, #32]
 800e9d6:	e841 2300 	strex	r3, r2, [r1]
 800e9da:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9dc:	69bb      	ldr	r3, [r7, #24]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e5      	bne.n	800e9ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2220      	movs	r2, #32
 800e9e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2220      	movs	r2, #32
 800e9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ea00:	2303      	movs	r3, #3
 800ea02:	e010      	b.n	800ea26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	69da      	ldr	r2, [r3, #28]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	bf0c      	ite	eq
 800ea14:	2301      	moveq	r3, #1
 800ea16:	2300      	movne	r3, #0
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	f43f af48 	beq.w	800e8b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3770      	adds	r7, #112	; 0x70
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
	...

0800ea30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ea30:	b084      	sub	sp, #16
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b084      	sub	sp, #16
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
 800ea3a:	f107 001c 	add.w	r0, r7, #28
 800ea3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ea42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d120      	bne.n	800ea8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	68da      	ldr	r2, [r3, #12]
 800ea58:	4b20      	ldr	r3, [pc, #128]	; (800eadc <USB_CoreInit+0xac>)
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ea6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d105      	bne.n	800ea7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fa96 	bl	800efb0 <USB_CoreReset>
 800ea84:	4603      	mov	r3, r0
 800ea86:	73fb      	strb	r3, [r7, #15]
 800ea88:	e010      	b.n	800eaac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 fa8a 	bl	800efb0 <USB_CoreReset>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d10b      	bne.n	800eaca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	f043 0206 	orr.w	r2, r3, #6
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	689b      	ldr	r3, [r3, #8]
 800eac2:	f043 0220 	orr.w	r2, r3, #32
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3710      	adds	r7, #16
 800ead0:	46bd      	mov	sp, r7
 800ead2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ead6:	b004      	add	sp, #16
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	ffbdffbf 	.word	0xffbdffbf

0800eae0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	689b      	ldr	r3, [r3, #8]
 800eaec:	f023 0201 	bic.w	r2, r3, #1
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eb1e:	78fb      	ldrb	r3, [r7, #3]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d115      	bne.n	800eb50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800eb30:	2001      	movs	r0, #1
 800eb32:	f7fc fb39 	bl	800b1a8 <HAL_Delay>
      ms++;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fa29 	bl	800ef94 <USB_GetMode>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d01e      	beq.n	800eb86 <USB_SetCurrentMode+0x84>
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2b31      	cmp	r3, #49	; 0x31
 800eb4c:	d9f0      	bls.n	800eb30 <USB_SetCurrentMode+0x2e>
 800eb4e:	e01a      	b.n	800eb86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d115      	bne.n	800eb82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800eb62:	2001      	movs	r0, #1
 800eb64:	f7fc fb20 	bl	800b1a8 <HAL_Delay>
      ms++;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fa10 	bl	800ef94 <USB_GetMode>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d005      	beq.n	800eb86 <USB_SetCurrentMode+0x84>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b31      	cmp	r3, #49	; 0x31
 800eb7e:	d9f0      	bls.n	800eb62 <USB_SetCurrentMode+0x60>
 800eb80:	e001      	b.n	800eb86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e005      	b.n	800eb92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b32      	cmp	r3, #50	; 0x32
 800eb8a:	d101      	bne.n	800eb90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e000      	b.n	800eb92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
	...

0800eb9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb9c:	b084      	sub	sp, #16
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b086      	sub	sp, #24
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ebaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	613b      	str	r3, [r7, #16]
 800ebba:	e009      	b.n	800ebd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	3340      	adds	r3, #64	; 0x40
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	4413      	add	r3, r2
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	613b      	str	r3, [r7, #16]
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	2b0e      	cmp	r3, #14
 800ebd4:	d9f2      	bls.n	800ebbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ebd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d11c      	bne.n	800ec16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebea:	f043 0302 	orr.w	r3, r3, #2
 800ebee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	e005      	b.n	800ec22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec28:	461a      	mov	r2, r3
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec34:	4619      	mov	r1, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	680b      	ldr	r3, [r1, #0]
 800ec40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d10c      	bne.n	800ec62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ec48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d104      	bne.n	800ec58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ec4e:	2100      	movs	r1, #0
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f965 	bl	800ef20 <USB_SetDevSpeed>
 800ec56:	e008      	b.n	800ec6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ec58:	2101      	movs	r1, #1
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f960 	bl	800ef20 <USB_SetDevSpeed>
 800ec60:	e003      	b.n	800ec6a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ec62:	2103      	movs	r1, #3
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 f95b 	bl	800ef20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ec6a:	2110      	movs	r1, #16
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f8f3 	bl	800ee58 <USB_FlushTxFifo>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 f91f 	bl	800eec0 <USB_FlushRxFifo>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d001      	beq.n	800ec8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec92:	461a      	mov	r2, r3
 800ec94:	2300      	movs	r3, #0
 800ec96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec9e:	461a      	mov	r2, r3
 800eca0:	2300      	movs	r3, #0
 800eca2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecaa:	461a      	mov	r2, r3
 800ecac:	2300      	movs	r3, #0
 800ecae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	613b      	str	r3, [r7, #16]
 800ecb4:	e043      	b.n	800ed3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	015a      	lsls	r2, r3, #5
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eccc:	d118      	bne.n	800ed00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10a      	bne.n	800ecea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	015a      	lsls	r2, r3, #5
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	4413      	add	r3, r2
 800ecdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ece0:	461a      	mov	r2, r3
 800ece2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ece6:	6013      	str	r3, [r2, #0]
 800ece8:	e013      	b.n	800ed12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	015a      	lsls	r2, r3, #5
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ecfc:	6013      	str	r3, [r2, #0]
 800ecfe:	e008      	b.n	800ed12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	015a      	lsls	r2, r3, #5
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	4413      	add	r3, r2
 800ed08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	2300      	movs	r3, #0
 800ed10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	015a      	lsls	r2, r3, #5
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed1e:	461a      	mov	r2, r3
 800ed20:	2300      	movs	r3, #0
 800ed22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	015a      	lsls	r2, r3, #5
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed30:	461a      	mov	r2, r3
 800ed32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	613b      	str	r3, [r7, #16]
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	693a      	ldr	r2, [r7, #16]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d3b7      	bcc.n	800ecb6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed46:	2300      	movs	r3, #0
 800ed48:	613b      	str	r3, [r7, #16]
 800ed4a:	e043      	b.n	800edd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	015a      	lsls	r2, r3, #5
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	4413      	add	r3, r2
 800ed54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed62:	d118      	bne.n	800ed96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10a      	bne.n	800ed80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	015a      	lsls	r2, r3, #5
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	4413      	add	r3, r2
 800ed72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed76:	461a      	mov	r2, r3
 800ed78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed7c:	6013      	str	r3, [r2, #0]
 800ed7e:	e013      	b.n	800eda8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	015a      	lsls	r2, r3, #5
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	4413      	add	r3, r2
 800ed88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ed92:	6013      	str	r3, [r2, #0]
 800ed94:	e008      	b.n	800eda8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	015a      	lsls	r2, r3, #5
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda2:	461a      	mov	r2, r3
 800eda4:	2300      	movs	r3, #0
 800eda6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb4:	461a      	mov	r2, r3
 800edb6:	2300      	movs	r3, #0
 800edb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	015a      	lsls	r2, r3, #5
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	4413      	add	r3, r2
 800edc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edc6:	461a      	mov	r2, r3
 800edc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800edcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	3301      	adds	r3, #1
 800edd2:	613b      	str	r3, [r7, #16]
 800edd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd6:	693a      	ldr	r2, [r7, #16]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d3b7      	bcc.n	800ed4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800edee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800edfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d105      	bne.n	800ee10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	f043 0210 	orr.w	r2, r3, #16
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	699a      	ldr	r2, [r3, #24]
 800ee14:	4b0e      	ldr	r3, [pc, #56]	; (800ee50 <USB_DevInit+0x2b4>)
 800ee16:	4313      	orrs	r3, r2
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ee1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d005      	beq.n	800ee2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	f043 0208 	orr.w	r2, r3, #8
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ee2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d105      	bne.n	800ee40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	699a      	ldr	r2, [r3, #24]
 800ee38:	4b06      	ldr	r3, [pc, #24]	; (800ee54 <USB_DevInit+0x2b8>)
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee4c:	b004      	add	sp, #16
 800ee4e:	4770      	bx	lr
 800ee50:	803c3800 	.word	0x803c3800
 800ee54:	40000004 	.word	0x40000004

0800ee58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	4a13      	ldr	r2, [pc, #76]	; (800eebc <USB_FlushTxFifo+0x64>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d901      	bls.n	800ee78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e01b      	b.n	800eeb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	691b      	ldr	r3, [r3, #16]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	daf2      	bge.n	800ee66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ee80:	2300      	movs	r3, #0
 800ee82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	019b      	lsls	r3, r3, #6
 800ee88:	f043 0220 	orr.w	r2, r3, #32
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3301      	adds	r3, #1
 800ee94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	4a08      	ldr	r2, [pc, #32]	; (800eebc <USB_FlushTxFifo+0x64>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d901      	bls.n	800eea2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	e006      	b.n	800eeb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	f003 0320 	and.w	r3, r3, #32
 800eeaa:	2b20      	cmp	r3, #32
 800eeac:	d0f0      	beq.n	800ee90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	00030d40 	.word	0x00030d40

0800eec0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	3301      	adds	r3, #1
 800eed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	4a11      	ldr	r2, [pc, #68]	; (800ef1c <USB_FlushRxFifo+0x5c>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d901      	bls.n	800eede <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800eeda:	2303      	movs	r3, #3
 800eedc:	e018      	b.n	800ef10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	daf2      	bge.n	800eecc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800eee6:	2300      	movs	r3, #0
 800eee8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2210      	movs	r2, #16
 800eeee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	3301      	adds	r3, #1
 800eef4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	4a08      	ldr	r2, [pc, #32]	; (800ef1c <USB_FlushRxFifo+0x5c>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d901      	bls.n	800ef02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800eefe:	2303      	movs	r3, #3
 800ef00:	e006      	b.n	800ef10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	f003 0310 	and.w	r3, r3, #16
 800ef0a:	2b10      	cmp	r3, #16
 800ef0c:	d0f0      	beq.n	800eef0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3714      	adds	r7, #20
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	00030d40 	.word	0x00030d40

0800ef20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	78fb      	ldrb	r3, [r7, #3]
 800ef3a:	68f9      	ldr	r1, [r7, #12]
 800ef3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef40:	4313      	orrs	r3, r2
 800ef42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ef44:	2300      	movs	r3, #0
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b085      	sub	sp, #20
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef6c:	f023 0303 	bic.w	r3, r3, #3
 800ef70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef80:	f043 0302 	orr.w	r3, r3, #2
 800ef84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3714      	adds	r7, #20
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	f003 0301 	and.w	r3, r3, #1
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800efb8:	2300      	movs	r3, #0
 800efba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	3301      	adds	r3, #1
 800efc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4a13      	ldr	r2, [pc, #76]	; (800f014 <USB_CoreReset+0x64>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d901      	bls.n	800efce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800efca:	2303      	movs	r3, #3
 800efcc:	e01b      	b.n	800f006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	691b      	ldr	r3, [r3, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	daf2      	bge.n	800efbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800efd6:	2300      	movs	r3, #0
 800efd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	691b      	ldr	r3, [r3, #16]
 800efde:	f043 0201 	orr.w	r2, r3, #1
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3301      	adds	r3, #1
 800efea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4a09      	ldr	r2, [pc, #36]	; (800f014 <USB_CoreReset+0x64>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d901      	bls.n	800eff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eff4:	2303      	movs	r3, #3
 800eff6:	e006      	b.n	800f006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	f003 0301 	and.w	r3, r3, #1
 800f000:	2b01      	cmp	r3, #1
 800f002:	d0f0      	beq.n	800efe6 <USB_CoreReset+0x36>

  return HAL_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3714      	adds	r7, #20
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	00030d40 	.word	0x00030d40

0800f018 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f018:	b480      	push	{r7}
 800f01a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f01c:	bf00      	nop
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
	...

0800f028 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f02e:	f3ef 8305 	mrs	r3, IPSR
 800f032:	60bb      	str	r3, [r7, #8]
  return(result);
 800f034:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10f      	bne.n	800f05a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f03a:	f3ef 8310 	mrs	r3, PRIMASK
 800f03e:	607b      	str	r3, [r7, #4]
  return(result);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d105      	bne.n	800f052 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f046:	f3ef 8311 	mrs	r3, BASEPRI
 800f04a:	603b      	str	r3, [r7, #0]
  return(result);
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d007      	beq.n	800f062 <osKernelInitialize+0x3a>
 800f052:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <osKernelInitialize+0x64>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b02      	cmp	r3, #2
 800f058:	d103      	bne.n	800f062 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f05a:	f06f 0305 	mvn.w	r3, #5
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	e00c      	b.n	800f07c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f062:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <osKernelInitialize+0x64>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d105      	bne.n	800f076 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f06a:	4b08      	ldr	r3, [pc, #32]	; (800f08c <osKernelInitialize+0x64>)
 800f06c:	2201      	movs	r2, #1
 800f06e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f070:	2300      	movs	r3, #0
 800f072:	60fb      	str	r3, [r7, #12]
 800f074:	e002      	b.n	800f07c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f076:	f04f 33ff 	mov.w	r3, #4294967295
 800f07a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f07c:	68fb      	ldr	r3, [r7, #12]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	20001610 	.word	0x20001610

0800f090 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f096:	f3ef 8305 	mrs	r3, IPSR
 800f09a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f09c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10f      	bne.n	800f0c2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0a2:	f3ef 8310 	mrs	r3, PRIMASK
 800f0a6:	607b      	str	r3, [r7, #4]
  return(result);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d105      	bne.n	800f0ba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0ae:	f3ef 8311 	mrs	r3, BASEPRI
 800f0b2:	603b      	str	r3, [r7, #0]
  return(result);
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d007      	beq.n	800f0ca <osKernelStart+0x3a>
 800f0ba:	4b0f      	ldr	r3, [pc, #60]	; (800f0f8 <osKernelStart+0x68>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d103      	bne.n	800f0ca <osKernelStart+0x3a>
    stat = osErrorISR;
 800f0c2:	f06f 0305 	mvn.w	r3, #5
 800f0c6:	60fb      	str	r3, [r7, #12]
 800f0c8:	e010      	b.n	800f0ec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f0ca:	4b0b      	ldr	r3, [pc, #44]	; (800f0f8 <osKernelStart+0x68>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d109      	bne.n	800f0e6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f0d2:	f7ff ffa1 	bl	800f018 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f0d6:	4b08      	ldr	r3, [pc, #32]	; (800f0f8 <osKernelStart+0x68>)
 800f0d8:	2202      	movs	r2, #2
 800f0da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f0dc:	f001 fd70 	bl	8010bc0 <vTaskStartScheduler>
      stat = osOK;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	e002      	b.n	800f0ec <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f0e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	20001610 	.word	0x20001610

0800f0fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b090      	sub	sp, #64	; 0x40
 800f100:	af04      	add	r7, sp, #16
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f108:	2300      	movs	r3, #0
 800f10a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f10c:	f3ef 8305 	mrs	r3, IPSR
 800f110:	61fb      	str	r3, [r7, #28]
  return(result);
 800f112:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f114:	2b00      	cmp	r3, #0
 800f116:	f040 808f 	bne.w	800f238 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f11a:	f3ef 8310 	mrs	r3, PRIMASK
 800f11e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d105      	bne.n	800f132 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f126:	f3ef 8311 	mrs	r3, BASEPRI
 800f12a:	617b      	str	r3, [r7, #20]
  return(result);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d003      	beq.n	800f13a <osThreadNew+0x3e>
 800f132:	4b44      	ldr	r3, [pc, #272]	; (800f244 <osThreadNew+0x148>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b02      	cmp	r3, #2
 800f138:	d07e      	beq.n	800f238 <osThreadNew+0x13c>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d07b      	beq.n	800f238 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f140:	2380      	movs	r3, #128	; 0x80
 800f142:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f144:	2318      	movs	r3, #24
 800f146:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f148:	2300      	movs	r3, #0
 800f14a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f14c:	f04f 33ff 	mov.w	r3, #4294967295
 800f150:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d045      	beq.n	800f1e4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <osThreadNew+0x6a>
        name = attr->name;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	699b      	ldr	r3, [r3, #24]
 800f172:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f176:	2b00      	cmp	r3, #0
 800f178:	d008      	beq.n	800f18c <osThreadNew+0x90>
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	2b38      	cmp	r3, #56	; 0x38
 800f17e:	d805      	bhi.n	800f18c <osThreadNew+0x90>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d001      	beq.n	800f190 <osThreadNew+0x94>
        return (NULL);
 800f18c:	2300      	movs	r3, #0
 800f18e:	e054      	b.n	800f23a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d003      	beq.n	800f1a0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	695b      	ldr	r3, [r3, #20]
 800f19c:	089b      	lsrs	r3, r3, #2
 800f19e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00e      	beq.n	800f1c6 <osThreadNew+0xca>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	2bbb      	cmp	r3, #187	; 0xbb
 800f1ae:	d90a      	bls.n	800f1c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d006      	beq.n	800f1c6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <osThreadNew+0xca>
        mem = 1;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	623b      	str	r3, [r7, #32]
 800f1c4:	e010      	b.n	800f1e8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d10c      	bne.n	800f1e8 <osThreadNew+0xec>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d108      	bne.n	800f1e8 <osThreadNew+0xec>
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d104      	bne.n	800f1e8 <osThreadNew+0xec>
          mem = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	623b      	str	r3, [r7, #32]
 800f1e2:	e001      	b.n	800f1e8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d110      	bne.n	800f210 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f1f6:	9202      	str	r2, [sp, #8]
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f001 fae5 	bl	80107d4 <xTaskCreateStatic>
 800f20a:	4603      	mov	r3, r0
 800f20c:	613b      	str	r3, [r7, #16]
 800f20e:	e013      	b.n	800f238 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f210:	6a3b      	ldr	r3, [r7, #32]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d110      	bne.n	800f238 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	b29a      	uxth	r2, r3
 800f21a:	f107 0310 	add.w	r3, r7, #16
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	f001 fb36 	bl	801089a <xTaskCreate>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b01      	cmp	r3, #1
 800f232:	d001      	beq.n	800f238 <osThreadNew+0x13c>
          hTask = NULL;
 800f234:	2300      	movs	r3, #0
 800f236:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f238:	693b      	ldr	r3, [r7, #16]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3730      	adds	r7, #48	; 0x30
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20001610 	.word	0x20001610

0800f248 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f250:	f3ef 8305 	mrs	r3, IPSR
 800f254:	613b      	str	r3, [r7, #16]
  return(result);
 800f256:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10f      	bne.n	800f27c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f25c:	f3ef 8310 	mrs	r3, PRIMASK
 800f260:	60fb      	str	r3, [r7, #12]
  return(result);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d105      	bne.n	800f274 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f268:	f3ef 8311 	mrs	r3, BASEPRI
 800f26c:	60bb      	str	r3, [r7, #8]
  return(result);
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d007      	beq.n	800f284 <osDelay+0x3c>
 800f274:	4b0a      	ldr	r3, [pc, #40]	; (800f2a0 <osDelay+0x58>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b02      	cmp	r3, #2
 800f27a:	d103      	bne.n	800f284 <osDelay+0x3c>
    stat = osErrorISR;
 800f27c:	f06f 0305 	mvn.w	r3, #5
 800f280:	617b      	str	r3, [r7, #20]
 800f282:	e007      	b.n	800f294 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f284:	2300      	movs	r3, #0
 800f286:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d002      	beq.n	800f294 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f001 fc60 	bl	8010b54 <vTaskDelay>
    }
  }

  return (stat);
 800f294:	697b      	ldr	r3, [r7, #20]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	20001610 	.word	0x20001610

0800f2a4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b08c      	sub	sp, #48	; 0x30
 800f2a8:	af02      	add	r7, sp, #8
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2b4:	f3ef 8305 	mrs	r3, IPSR
 800f2b8:	61bb      	str	r3, [r7, #24]
  return(result);
 800f2ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 8086 	bne.w	800f3ce <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2c2:	f3ef 8310 	mrs	r3, PRIMASK
 800f2c6:	617b      	str	r3, [r7, #20]
  return(result);
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d105      	bne.n	800f2da <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2ce:	f3ef 8311 	mrs	r3, BASEPRI
 800f2d2:	613b      	str	r3, [r7, #16]
  return(result);
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d003      	beq.n	800f2e2 <osSemaphoreNew+0x3e>
 800f2da:	4b3f      	ldr	r3, [pc, #252]	; (800f3d8 <osSemaphoreNew+0x134>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d075      	beq.n	800f3ce <osSemaphoreNew+0x12a>
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d072      	beq.n	800f3ce <osSemaphoreNew+0x12a>
 800f2e8:	68ba      	ldr	r2, [r7, #8]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d86e      	bhi.n	800f3ce <osSemaphoreNew+0x12a>
    mem = -1;
 800f2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d015      	beq.n	800f328 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	689b      	ldr	r3, [r3, #8]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d006      	beq.n	800f312 <osSemaphoreNew+0x6e>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	2b4f      	cmp	r3, #79	; 0x4f
 800f30a:	d902      	bls.n	800f312 <osSemaphoreNew+0x6e>
        mem = 1;
 800f30c:	2301      	movs	r3, #1
 800f30e:	623b      	str	r3, [r7, #32]
 800f310:	e00c      	b.n	800f32c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d108      	bne.n	800f32c <osSemaphoreNew+0x88>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d104      	bne.n	800f32c <osSemaphoreNew+0x88>
          mem = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	623b      	str	r3, [r7, #32]
 800f326:	e001      	b.n	800f32c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f32c:	6a3b      	ldr	r3, [r7, #32]
 800f32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f332:	d04c      	beq.n	800f3ce <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2b01      	cmp	r3, #1
 800f338:	d128      	bne.n	800f38c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d10a      	bne.n	800f356 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	2203      	movs	r2, #3
 800f346:	9200      	str	r2, [sp, #0]
 800f348:	2200      	movs	r2, #0
 800f34a:	2100      	movs	r1, #0
 800f34c:	2001      	movs	r0, #1
 800f34e:	f000 fa55 	bl	800f7fc <xQueueGenericCreateStatic>
 800f352:	6278      	str	r0, [r7, #36]	; 0x24
 800f354:	e005      	b.n	800f362 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f356:	2203      	movs	r2, #3
 800f358:	2100      	movs	r1, #0
 800f35a:	2001      	movs	r0, #1
 800f35c:	f000 fad0 	bl	800f900 <xQueueGenericCreate>
 800f360:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	2b00      	cmp	r3, #0
 800f366:	d022      	beq.n	800f3ae <osSemaphoreNew+0x10a>
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d01f      	beq.n	800f3ae <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f36e:	2300      	movs	r3, #0
 800f370:	2200      	movs	r2, #0
 800f372:	2100      	movs	r1, #0
 800f374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f376:	f000 fb9b 	bl	800fab0 <xQueueGenericSend>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d016      	beq.n	800f3ae <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800f380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f382:	f001 f851 	bl	8010428 <vQueueDelete>
            hSemaphore = NULL;
 800f386:	2300      	movs	r3, #0
 800f388:	627b      	str	r3, [r7, #36]	; 0x24
 800f38a:	e010      	b.n	800f3ae <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d108      	bne.n	800f3a4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	461a      	mov	r2, r3
 800f398:	68b9      	ldr	r1, [r7, #8]
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	f000 fb15 	bl	800f9ca <xQueueCreateCountingSemaphoreStatic>
 800f3a0:	6278      	str	r0, [r7, #36]	; 0x24
 800f3a2:	e004      	b.n	800f3ae <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f000 fb4a 	bl	800fa40 <xQueueCreateCountingSemaphore>
 800f3ac:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00c      	beq.n	800f3ce <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d003      	beq.n	800f3c2 <osSemaphoreNew+0x11e>
          name = attr->name;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	61fb      	str	r3, [r7, #28]
 800f3c0:	e001      	b.n	800f3c6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f3c6:	69f9      	ldr	r1, [r7, #28]
 800f3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ca:	f001 f97b 	bl	80106c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3728      	adds	r7, #40	; 0x28
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	20001610 	.word	0x20001610

0800f3dc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b088      	sub	sp, #32
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d103      	bne.n	800f3fc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f3f4:	f06f 0303 	mvn.w	r3, #3
 800f3f8:	61fb      	str	r3, [r7, #28]
 800f3fa:	e04b      	b.n	800f494 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3fc:	f3ef 8305 	mrs	r3, IPSR
 800f400:	617b      	str	r3, [r7, #20]
  return(result);
 800f402:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f404:	2b00      	cmp	r3, #0
 800f406:	d10f      	bne.n	800f428 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f408:	f3ef 8310 	mrs	r3, PRIMASK
 800f40c:	613b      	str	r3, [r7, #16]
  return(result);
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d105      	bne.n	800f420 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f414:	f3ef 8311 	mrs	r3, BASEPRI
 800f418:	60fb      	str	r3, [r7, #12]
  return(result);
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d026      	beq.n	800f46e <osSemaphoreAcquire+0x92>
 800f420:	4b1f      	ldr	r3, [pc, #124]	; (800f4a0 <osSemaphoreAcquire+0xc4>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2b02      	cmp	r3, #2
 800f426:	d122      	bne.n	800f46e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d003      	beq.n	800f436 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f42e:	f06f 0303 	mvn.w	r3, #3
 800f432:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f434:	e02d      	b.n	800f492 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f436:	2300      	movs	r3, #0
 800f438:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f43a:	f107 0308 	add.w	r3, r7, #8
 800f43e:	461a      	mov	r2, r3
 800f440:	2100      	movs	r1, #0
 800f442:	69b8      	ldr	r0, [r7, #24]
 800f444:	f000 ff6a 	bl	801031c <xQueueReceiveFromISR>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d003      	beq.n	800f456 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f44e:	f06f 0302 	mvn.w	r3, #2
 800f452:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f454:	e01d      	b.n	800f492 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d01a      	beq.n	800f492 <osSemaphoreAcquire+0xb6>
 800f45c:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <osSemaphoreAcquire+0xc8>)
 800f45e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f46c:	e011      	b.n	800f492 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f46e:	6839      	ldr	r1, [r7, #0]
 800f470:	69b8      	ldr	r0, [r7, #24]
 800f472:	f000 fe3f 	bl	80100f4 <xQueueSemaphoreTake>
 800f476:	4603      	mov	r3, r0
 800f478:	2b01      	cmp	r3, #1
 800f47a:	d00b      	beq.n	800f494 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d003      	beq.n	800f48a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f482:	f06f 0301 	mvn.w	r3, #1
 800f486:	61fb      	str	r3, [r7, #28]
 800f488:	e004      	b.n	800f494 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f48a:	f06f 0302 	mvn.w	r3, #2
 800f48e:	61fb      	str	r3, [r7, #28]
 800f490:	e000      	b.n	800f494 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f492:	bf00      	nop
      }
    }
  }

  return (stat);
 800f494:	69fb      	ldr	r3, [r7, #28]
}
 800f496:	4618      	mov	r0, r3
 800f498:	3720      	adds	r7, #32
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	20001610 	.word	0x20001610
 800f4a4:	e000ed04 	.word	0xe000ed04

0800f4a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b088      	sub	sp, #32
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d103      	bne.n	800f4c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f4be:	f06f 0303 	mvn.w	r3, #3
 800f4c2:	61fb      	str	r3, [r7, #28]
 800f4c4:	e03e      	b.n	800f544 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4c6:	f3ef 8305 	mrs	r3, IPSR
 800f4ca:	617b      	str	r3, [r7, #20]
  return(result);
 800f4cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10f      	bne.n	800f4f2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f4d6:	613b      	str	r3, [r7, #16]
  return(result);
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d105      	bne.n	800f4ea <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4de:	f3ef 8311 	mrs	r3, BASEPRI
 800f4e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d01e      	beq.n	800f528 <osSemaphoreRelease+0x80>
 800f4ea:	4b19      	ldr	r3, [pc, #100]	; (800f550 <osSemaphoreRelease+0xa8>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2b02      	cmp	r3, #2
 800f4f0:	d11a      	bne.n	800f528 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f4f6:	f107 0308 	add.w	r3, r7, #8
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	69b8      	ldr	r0, [r7, #24]
 800f4fe:	f000 fc7d 	bl	800fdfc <xQueueGiveFromISR>
 800f502:	4603      	mov	r3, r0
 800f504:	2b01      	cmp	r3, #1
 800f506:	d003      	beq.n	800f510 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f508:	f06f 0302 	mvn.w	r3, #2
 800f50c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f50e:	e018      	b.n	800f542 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d015      	beq.n	800f542 <osSemaphoreRelease+0x9a>
 800f516:	4b0f      	ldr	r3, [pc, #60]	; (800f554 <osSemaphoreRelease+0xac>)
 800f518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f51c:	601a      	str	r2, [r3, #0]
 800f51e:	f3bf 8f4f 	dsb	sy
 800f522:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f526:	e00c      	b.n	800f542 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f528:	2300      	movs	r3, #0
 800f52a:	2200      	movs	r2, #0
 800f52c:	2100      	movs	r1, #0
 800f52e:	69b8      	ldr	r0, [r7, #24]
 800f530:	f000 fabe 	bl	800fab0 <xQueueGenericSend>
 800f534:	4603      	mov	r3, r0
 800f536:	2b01      	cmp	r3, #1
 800f538:	d004      	beq.n	800f544 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f53a:	f06f 0302 	mvn.w	r3, #2
 800f53e:	61fb      	str	r3, [r7, #28]
 800f540:	e000      	b.n	800f544 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f542:	bf00      	nop
    }
  }

  return (stat);
 800f544:	69fb      	ldr	r3, [r7, #28]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3720      	adds	r7, #32
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20001610 	.word	0x20001610
 800f554:	e000ed04 	.word	0xe000ed04

0800f558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	4a07      	ldr	r2, [pc, #28]	; (800f584 <vApplicationGetIdleTaskMemory+0x2c>)
 800f568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	4a06      	ldr	r2, [pc, #24]	; (800f588 <vApplicationGetIdleTaskMemory+0x30>)
 800f56e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2280      	movs	r2, #128	; 0x80
 800f574:	601a      	str	r2, [r3, #0]
}
 800f576:	bf00      	nop
 800f578:	3714      	adds	r7, #20
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop
 800f584:	20001614 	.word	0x20001614
 800f588:	200016d0 	.word	0x200016d0

0800f58c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	4a07      	ldr	r2, [pc, #28]	; (800f5b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800f59c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	4a06      	ldr	r2, [pc, #24]	; (800f5bc <vApplicationGetTimerTaskMemory+0x30>)
 800f5a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5aa:	601a      	str	r2, [r3, #0]
}
 800f5ac:	bf00      	nop
 800f5ae:	3714      	adds	r7, #20
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr
 800f5b8:	200018d0 	.word	0x200018d0
 800f5bc:	2000198c 	.word	0x2000198c

0800f5c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b083      	sub	sp, #12
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f103 0208 	add.w	r2, r3, #8
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f103 0208 	add.w	r2, r3, #8
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f103 0208 	add.w	r2, r3, #8
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f5f4:	bf00      	nop
 800f5f6:	370c      	adds	r7, #12
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f60e:	bf00      	nop
 800f610:	370c      	adds	r7, #12
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr

0800f61a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f61a:	b480      	push	{r7}
 800f61c:	b085      	sub	sp, #20
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	689a      	ldr	r2, [r3, #8]
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	683a      	ldr	r2, [r7, #0]
 800f63e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	683a      	ldr	r2, [r7, #0]
 800f644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	1c5a      	adds	r2, r3, #1
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	601a      	str	r2, [r3, #0]
}
 800f656:	bf00      	nop
 800f658:	3714      	adds	r7, #20
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f662:	b480      	push	{r7}
 800f664:	b085      	sub	sp, #20
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
 800f66a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f678:	d103      	bne.n	800f682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	691b      	ldr	r3, [r3, #16]
 800f67e:	60fb      	str	r3, [r7, #12]
 800f680:	e00c      	b.n	800f69c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3308      	adds	r3, #8
 800f686:	60fb      	str	r3, [r7, #12]
 800f688:	e002      	b.n	800f690 <vListInsert+0x2e>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68ba      	ldr	r2, [r7, #8]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d2f6      	bcs.n	800f68a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	683a      	ldr	r2, [r7, #0]
 800f6aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	683a      	ldr	r2, [r7, #0]
 800f6b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	601a      	str	r2, [r3, #0]
}
 800f6c8:	bf00      	nop
 800f6ca:	3714      	adds	r7, #20
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6892      	ldr	r2, [r2, #8]
 800f6ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	689b      	ldr	r3, [r3, #8]
 800f6f0:	687a      	ldr	r2, [r7, #4]
 800f6f2:	6852      	ldr	r2, [r2, #4]
 800f6f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d103      	bne.n	800f708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	689a      	ldr	r2, [r3, #8]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	1e5a      	subs	r2, r3, #1
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d10c      	bne.n	800f756 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f740:	b672      	cpsid	i
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	b662      	cpsie	i
 800f750:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f752:	bf00      	nop
 800f754:	e7fe      	b.n	800f754 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f756:	f002 fcf1 	bl	801213c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f762:	68f9      	ldr	r1, [r7, #12]
 800f764:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f766:	fb01 f303 	mul.w	r3, r1, r3
 800f76a:	441a      	add	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2200      	movs	r2, #0
 800f774:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f786:	3b01      	subs	r3, #1
 800f788:	68f9      	ldr	r1, [r7, #12]
 800f78a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f78c:	fb01 f303 	mul.w	r3, r1, r3
 800f790:	441a      	add	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	22ff      	movs	r2, #255	; 0xff
 800f79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	22ff      	movs	r2, #255	; 0xff
 800f7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d114      	bne.n	800f7d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	691b      	ldr	r3, [r3, #16]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d01a      	beq.n	800f7ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	3310      	adds	r3, #16
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f001 fca9 	bl	8011110 <xTaskRemoveFromEventList>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d012      	beq.n	800f7ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f7c4:	4b0c      	ldr	r3, [pc, #48]	; (800f7f8 <xQueueGenericReset+0xd0>)
 800f7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7ca:	601a      	str	r2, [r3, #0]
 800f7cc:	f3bf 8f4f 	dsb	sy
 800f7d0:	f3bf 8f6f 	isb	sy
 800f7d4:	e009      	b.n	800f7ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	3310      	adds	r3, #16
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7ff fef0 	bl	800f5c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	3324      	adds	r3, #36	; 0x24
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7ff feeb 	bl	800f5c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f7ea:	f002 fcdb 	bl	80121a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f7ee:	2301      	movs	r3, #1
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	e000ed04 	.word	0xe000ed04

0800f7fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b08e      	sub	sp, #56	; 0x38
 800f800:	af02      	add	r7, sp, #8
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
 800f808:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10c      	bne.n	800f82a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	b672      	cpsid	i
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	b662      	cpsie	i
 800f824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f826:	bf00      	nop
 800f828:	e7fe      	b.n	800f828 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10c      	bne.n	800f84a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	b672      	cpsid	i
 800f836:	f383 8811 	msr	BASEPRI, r3
 800f83a:	f3bf 8f6f 	isb	sy
 800f83e:	f3bf 8f4f 	dsb	sy
 800f842:	b662      	cpsie	i
 800f844:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f846:	bf00      	nop
 800f848:	e7fe      	b.n	800f848 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <xQueueGenericCreateStatic+0x5a>
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <xQueueGenericCreateStatic+0x5e>
 800f856:	2301      	movs	r3, #1
 800f858:	e000      	b.n	800f85c <xQueueGenericCreateStatic+0x60>
 800f85a:	2300      	movs	r3, #0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10c      	bne.n	800f87a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f864:	b672      	cpsid	i
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	b662      	cpsie	i
 800f874:	623b      	str	r3, [r7, #32]
}
 800f876:	bf00      	nop
 800f878:	e7fe      	b.n	800f878 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d102      	bne.n	800f886 <xQueueGenericCreateStatic+0x8a>
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <xQueueGenericCreateStatic+0x8e>
 800f886:	2301      	movs	r3, #1
 800f888:	e000      	b.n	800f88c <xQueueGenericCreateStatic+0x90>
 800f88a:	2300      	movs	r3, #0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d10c      	bne.n	800f8aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f894:	b672      	cpsid	i
 800f896:	f383 8811 	msr	BASEPRI, r3
 800f89a:	f3bf 8f6f 	isb	sy
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	b662      	cpsie	i
 800f8a4:	61fb      	str	r3, [r7, #28]
}
 800f8a6:	bf00      	nop
 800f8a8:	e7fe      	b.n	800f8a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8aa:	2350      	movs	r3, #80	; 0x50
 800f8ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2b50      	cmp	r3, #80	; 0x50
 800f8b2:	d00c      	beq.n	800f8ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b8:	b672      	cpsid	i
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	b662      	cpsie	i
 800f8c8:	61bb      	str	r3, [r7, #24]
}
 800f8ca:	bf00      	nop
 800f8cc:	e7fe      	b.n	800f8cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f8ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d00d      	beq.n	800f8f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	2201      	movs	r2, #1
 800f8de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f8e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	68b9      	ldr	r1, [r7, #8]
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f000 f847 	bl	800f984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3730      	adds	r7, #48	; 0x30
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f900:	b580      	push	{r7, lr}
 800f902:	b08a      	sub	sp, #40	; 0x28
 800f904:	af02      	add	r7, sp, #8
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	60b9      	str	r1, [r7, #8]
 800f90a:	4613      	mov	r3, r2
 800f90c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10c      	bne.n	800f92e <xQueueGenericCreate+0x2e>
	__asm volatile
 800f914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f918:	b672      	cpsid	i
 800f91a:	f383 8811 	msr	BASEPRI, r3
 800f91e:	f3bf 8f6f 	isb	sy
 800f922:	f3bf 8f4f 	dsb	sy
 800f926:	b662      	cpsie	i
 800f928:	613b      	str	r3, [r7, #16]
}
 800f92a:	bf00      	nop
 800f92c:	e7fe      	b.n	800f92c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d102      	bne.n	800f93a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f934:	2300      	movs	r3, #0
 800f936:	61fb      	str	r3, [r7, #28]
 800f938:	e004      	b.n	800f944 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	fb02 f303 	mul.w	r3, r2, r3
 800f942:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	3350      	adds	r3, #80	; 0x50
 800f948:	4618      	mov	r0, r3
 800f94a:	f002 fd23 	bl	8012394 <pvPortMalloc>
 800f94e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d011      	beq.n	800f97a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	3350      	adds	r3, #80	; 0x50
 800f95e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	2200      	movs	r2, #0
 800f964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f968:	79fa      	ldrb	r2, [r7, #7]
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	9300      	str	r3, [sp, #0]
 800f96e:	4613      	mov	r3, r2
 800f970:	697a      	ldr	r2, [r7, #20]
 800f972:	68b9      	ldr	r1, [r7, #8]
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f000 f805 	bl	800f984 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f97a:	69bb      	ldr	r3, [r7, #24]
	}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3720      	adds	r7, #32
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
 800f990:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d103      	bne.n	800f9a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f998:	69bb      	ldr	r3, [r7, #24]
 800f99a:	69ba      	ldr	r2, [r7, #24]
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	e002      	b.n	800f9a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	68fa      	ldr	r2, [r7, #12]
 800f9aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9b2:	2101      	movs	r1, #1
 800f9b4:	69b8      	ldr	r0, [r7, #24]
 800f9b6:	f7ff feb7 	bl	800f728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f9ba:	69bb      	ldr	r3, [r7, #24]
 800f9bc:	78fa      	ldrb	r2, [r7, #3]
 800f9be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9c2:	bf00      	nop
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b08a      	sub	sp, #40	; 0x28
 800f9ce:	af02      	add	r7, sp, #8
 800f9d0:	60f8      	str	r0, [r7, #12]
 800f9d2:	60b9      	str	r1, [r7, #8]
 800f9d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10c      	bne.n	800f9f6 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800f9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e0:	b672      	cpsid	i
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	b662      	cpsie	i
 800f9f0:	61bb      	str	r3, [r7, #24]
}
 800f9f2:	bf00      	nop
 800f9f4:	e7fe      	b.n	800f9f4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d90c      	bls.n	800fa18 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa02:	b672      	cpsid	i
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	b662      	cpsie	i
 800fa12:	617b      	str	r3, [r7, #20]
}
 800fa14:	bf00      	nop
 800fa16:	e7fe      	b.n	800fa16 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fa18:	2302      	movs	r3, #2
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	2100      	movs	r1, #0
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff feea 	bl	800f7fc <xQueueGenericCreateStatic>
 800fa28:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fa36:	69fb      	ldr	r3, [r7, #28]
	}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3720      	adds	r7, #32
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b086      	sub	sp, #24
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d10c      	bne.n	800fa6a <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800fa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa54:	b672      	cpsid	i
 800fa56:	f383 8811 	msr	BASEPRI, r3
 800fa5a:	f3bf 8f6f 	isb	sy
 800fa5e:	f3bf 8f4f 	dsb	sy
 800fa62:	b662      	cpsie	i
 800fa64:	613b      	str	r3, [r7, #16]
}
 800fa66:	bf00      	nop
 800fa68:	e7fe      	b.n	800fa68 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa6a:	683a      	ldr	r2, [r7, #0]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d90c      	bls.n	800fa8c <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800fa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa76:	b672      	cpsid	i
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	b662      	cpsie	i
 800fa86:	60fb      	str	r3, [r7, #12]
}
 800fa88:	bf00      	nop
 800fa8a:	e7fe      	b.n	800fa8a <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fa8c:	2202      	movs	r2, #2
 800fa8e:	2100      	movs	r1, #0
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff ff35 	bl	800f900 <xQueueGenericCreate>
 800fa96:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800faa4:	697b      	ldr	r3, [r7, #20]
	}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
	...

0800fab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b08e      	sub	sp, #56	; 0x38
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	607a      	str	r2, [r7, #4]
 800fabc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fabe:	2300      	movs	r3, #0
 800fac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10c      	bne.n	800fae6 <xQueueGenericSend+0x36>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad0:	b672      	cpsid	i
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	b662      	cpsie	i
 800fae0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fae2:	bf00      	nop
 800fae4:	e7fe      	b.n	800fae4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d103      	bne.n	800faf4 <xQueueGenericSend+0x44>
 800faec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <xQueueGenericSend+0x48>
 800faf4:	2301      	movs	r3, #1
 800faf6:	e000      	b.n	800fafa <xQueueGenericSend+0x4a>
 800faf8:	2300      	movs	r3, #0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10c      	bne.n	800fb18 <xQueueGenericSend+0x68>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	b672      	cpsid	i
 800fb04:	f383 8811 	msr	BASEPRI, r3
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	f3bf 8f4f 	dsb	sy
 800fb10:	b662      	cpsie	i
 800fb12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb14:	bf00      	nop
 800fb16:	e7fe      	b.n	800fb16 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2b02      	cmp	r3, #2
 800fb1c:	d103      	bne.n	800fb26 <xQueueGenericSend+0x76>
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d101      	bne.n	800fb2a <xQueueGenericSend+0x7a>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e000      	b.n	800fb2c <xQueueGenericSend+0x7c>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d10c      	bne.n	800fb4a <xQueueGenericSend+0x9a>
	__asm volatile
 800fb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb34:	b672      	cpsid	i
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	b662      	cpsie	i
 800fb44:	623b      	str	r3, [r7, #32]
}
 800fb46:	bf00      	nop
 800fb48:	e7fe      	b.n	800fb48 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb4a:	f001 fcab 	bl	80114a4 <xTaskGetSchedulerState>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <xQueueGenericSend+0xaa>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <xQueueGenericSend+0xae>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e000      	b.n	800fb60 <xQueueGenericSend+0xb0>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10c      	bne.n	800fb7e <xQueueGenericSend+0xce>
	__asm volatile
 800fb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb68:	b672      	cpsid	i
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	b662      	cpsie	i
 800fb78:	61fb      	str	r3, [r7, #28]
}
 800fb7a:	bf00      	nop
 800fb7c:	e7fe      	b.n	800fb7c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb7e:	f002 fadd 	bl	801213c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d302      	bcc.n	800fb94 <xQueueGenericSend+0xe4>
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	d129      	bne.n	800fbe8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb94:	683a      	ldr	r2, [r7, #0]
 800fb96:	68b9      	ldr	r1, [r7, #8]
 800fb98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb9a:	f000 fc82 	bl	80104a2 <prvCopyDataToQueue>
 800fb9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d010      	beq.n	800fbca <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbaa:	3324      	adds	r3, #36	; 0x24
 800fbac:	4618      	mov	r0, r3
 800fbae:	f001 faaf 	bl	8011110 <xTaskRemoveFromEventList>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d013      	beq.n	800fbe0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fbb8:	4b3f      	ldr	r3, [pc, #252]	; (800fcb8 <xQueueGenericSend+0x208>)
 800fbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbbe:	601a      	str	r2, [r3, #0]
 800fbc0:	f3bf 8f4f 	dsb	sy
 800fbc4:	f3bf 8f6f 	isb	sy
 800fbc8:	e00a      	b.n	800fbe0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d007      	beq.n	800fbe0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fbd0:	4b39      	ldr	r3, [pc, #228]	; (800fcb8 <xQueueGenericSend+0x208>)
 800fbd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbd6:	601a      	str	r2, [r3, #0]
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fbe0:	f002 fae0 	bl	80121a4 <vPortExitCritical>
				return pdPASS;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e063      	b.n	800fcb0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d103      	bne.n	800fbf6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbee:	f002 fad9 	bl	80121a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	e05c      	b.n	800fcb0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d106      	bne.n	800fc0a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbfc:	f107 0314 	add.w	r3, r7, #20
 800fc00:	4618      	mov	r0, r3
 800fc02:	f001 faeb 	bl	80111dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc06:	2301      	movs	r3, #1
 800fc08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc0a:	f002 facb 	bl	80121a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc0e:	f001 f84b 	bl	8010ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc12:	f002 fa93 	bl	801213c <vPortEnterCritical>
 800fc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc1c:	b25b      	sxtb	r3, r3
 800fc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc22:	d103      	bne.n	800fc2c <xQueueGenericSend+0x17c>
 800fc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc26:	2200      	movs	r2, #0
 800fc28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc32:	b25b      	sxtb	r3, r3
 800fc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc38:	d103      	bne.n	800fc42 <xQueueGenericSend+0x192>
 800fc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc42:	f002 faaf 	bl	80121a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc46:	1d3a      	adds	r2, r7, #4
 800fc48:	f107 0314 	add.w	r3, r7, #20
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f001 fada 	bl	8011208 <xTaskCheckForTimeOut>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d124      	bne.n	800fca4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fc5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc5c:	f000 fd19 	bl	8010692 <prvIsQueueFull>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d018      	beq.n	800fc98 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc68:	3310      	adds	r3, #16
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f001 f9fa 	bl	8011068 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc76:	f000 fca4 	bl	80105c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc7a:	f001 f823 	bl	8010cc4 <xTaskResumeAll>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f47f af7c 	bne.w	800fb7e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fc86:	4b0c      	ldr	r3, [pc, #48]	; (800fcb8 <xQueueGenericSend+0x208>)
 800fc88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	f3bf 8f4f 	dsb	sy
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	e772      	b.n	800fb7e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fc98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc9a:	f000 fc92 	bl	80105c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc9e:	f001 f811 	bl	8010cc4 <xTaskResumeAll>
 800fca2:	e76c      	b.n	800fb7e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fca6:	f000 fc8c 	bl	80105c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fcaa:	f001 f80b 	bl	8010cc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fcae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3738      	adds	r7, #56	; 0x38
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	e000ed04 	.word	0xe000ed04

0800fcbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b08e      	sub	sp, #56	; 0x38
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	607a      	str	r2, [r7, #4]
 800fcc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d10c      	bne.n	800fcee <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd8:	b672      	cpsid	i
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	b662      	cpsie	i
 800fce8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fcea:	bf00      	nop
 800fcec:	e7fe      	b.n	800fcec <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d103      	bne.n	800fcfc <xQueueGenericSendFromISR+0x40>
 800fcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d101      	bne.n	800fd00 <xQueueGenericSendFromISR+0x44>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e000      	b.n	800fd02 <xQueueGenericSendFromISR+0x46>
 800fd00:	2300      	movs	r3, #0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d10c      	bne.n	800fd20 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0a:	b672      	cpsid	i
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	b662      	cpsie	i
 800fd1a:	623b      	str	r3, [r7, #32]
}
 800fd1c:	bf00      	nop
 800fd1e:	e7fe      	b.n	800fd1e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	d103      	bne.n	800fd2e <xQueueGenericSendFromISR+0x72>
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d101      	bne.n	800fd32 <xQueueGenericSendFromISR+0x76>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e000      	b.n	800fd34 <xQueueGenericSendFromISR+0x78>
 800fd32:	2300      	movs	r3, #0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d10c      	bne.n	800fd52 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3c:	b672      	cpsid	i
 800fd3e:	f383 8811 	msr	BASEPRI, r3
 800fd42:	f3bf 8f6f 	isb	sy
 800fd46:	f3bf 8f4f 	dsb	sy
 800fd4a:	b662      	cpsie	i
 800fd4c:	61fb      	str	r3, [r7, #28]
}
 800fd4e:	bf00      	nop
 800fd50:	e7fe      	b.n	800fd50 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd52:	f002 fadb 	bl	801230c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fd56:	f3ef 8211 	mrs	r2, BASEPRI
 800fd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd5e:	b672      	cpsid	i
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	b662      	cpsie	i
 800fd6e:	61ba      	str	r2, [r7, #24]
 800fd70:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fd72:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd74:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d302      	bcc.n	800fd88 <xQueueGenericSendFromISR+0xcc>
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d12c      	bne.n	800fde2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	68b9      	ldr	r1, [r7, #8]
 800fd96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd98:	f000 fb83 	bl	80104a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fd9c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda4:	d112      	bne.n	800fdcc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d016      	beq.n	800fddc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb0:	3324      	adds	r3, #36	; 0x24
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f001 f9ac 	bl	8011110 <xTaskRemoveFromEventList>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00e      	beq.n	800fddc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00b      	beq.n	800fddc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	e007      	b.n	800fddc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fdcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	b25a      	sxtb	r2, r3
 800fdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fddc:	2301      	movs	r3, #1
 800fdde:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fde0:	e001      	b.n	800fde6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	637b      	str	r3, [r7, #52]	; 0x34
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fdf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3738      	adds	r7, #56	; 0x38
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08e      	sub	sp, #56	; 0x38
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d10c      	bne.n	800fe2a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800fe10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe14:	b672      	cpsid	i
 800fe16:	f383 8811 	msr	BASEPRI, r3
 800fe1a:	f3bf 8f6f 	isb	sy
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	b662      	cpsie	i
 800fe24:	623b      	str	r3, [r7, #32]
}
 800fe26:	bf00      	nop
 800fe28:	e7fe      	b.n	800fe28 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d00c      	beq.n	800fe4c <xQueueGiveFromISR+0x50>
	__asm volatile
 800fe32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe36:	b672      	cpsid	i
 800fe38:	f383 8811 	msr	BASEPRI, r3
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	f3bf 8f4f 	dsb	sy
 800fe44:	b662      	cpsie	i
 800fe46:	61fb      	str	r3, [r7, #28]
}
 800fe48:	bf00      	nop
 800fe4a:	e7fe      	b.n	800fe4a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d103      	bne.n	800fe5c <xQueueGiveFromISR+0x60>
 800fe54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d101      	bne.n	800fe60 <xQueueGiveFromISR+0x64>
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	e000      	b.n	800fe62 <xQueueGiveFromISR+0x66>
 800fe60:	2300      	movs	r3, #0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d10c      	bne.n	800fe80 <xQueueGiveFromISR+0x84>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6a:	b672      	cpsid	i
 800fe6c:	f383 8811 	msr	BASEPRI, r3
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	b662      	cpsie	i
 800fe7a:	61bb      	str	r3, [r7, #24]
}
 800fe7c:	bf00      	nop
 800fe7e:	e7fe      	b.n	800fe7e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe80:	f002 fa44 	bl	801230c <vPortValidateInterruptPriority>
	__asm volatile
 800fe84:	f3ef 8211 	mrs	r2, BASEPRI
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	b672      	cpsid	i
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	b662      	cpsie	i
 800fe9c:	617a      	str	r2, [r7, #20]
 800fe9e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fea0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d22b      	bcs.n	800ff0c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800feb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800feba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	1c5a      	adds	r2, r3, #1
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fec6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800feca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fece:	d112      	bne.n	800fef6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d016      	beq.n	800ff06 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feda:	3324      	adds	r3, #36	; 0x24
 800fedc:	4618      	mov	r0, r3
 800fede:	f001 f917 	bl	8011110 <xTaskRemoveFromEventList>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00e      	beq.n	800ff06 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d00b      	beq.n	800ff06 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	2201      	movs	r2, #1
 800fef2:	601a      	str	r2, [r3, #0]
 800fef4:	e007      	b.n	800ff06 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fefa:	3301      	adds	r3, #1
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	b25a      	sxtb	r2, r3
 800ff00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ff06:	2301      	movs	r3, #1
 800ff08:	637b      	str	r3, [r7, #52]	; 0x34
 800ff0a:	e001      	b.n	800ff10 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ff10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff12:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f383 8811 	msr	BASEPRI, r3
}
 800ff1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3738      	adds	r7, #56	; 0x38
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
	...

0800ff28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08c      	sub	sp, #48	; 0x30
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff34:	2300      	movs	r3, #0
 800ff36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10c      	bne.n	800ff5c <xQueueReceive+0x34>
	__asm volatile
 800ff42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff46:	b672      	cpsid	i
 800ff48:	f383 8811 	msr	BASEPRI, r3
 800ff4c:	f3bf 8f6f 	isb	sy
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	b662      	cpsie	i
 800ff56:	623b      	str	r3, [r7, #32]
}
 800ff58:	bf00      	nop
 800ff5a:	e7fe      	b.n	800ff5a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d103      	bne.n	800ff6a <xQueueReceive+0x42>
 800ff62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d101      	bne.n	800ff6e <xQueueReceive+0x46>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e000      	b.n	800ff70 <xQueueReceive+0x48>
 800ff6e:	2300      	movs	r3, #0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d10c      	bne.n	800ff8e <xQueueReceive+0x66>
	__asm volatile
 800ff74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff78:	b672      	cpsid	i
 800ff7a:	f383 8811 	msr	BASEPRI, r3
 800ff7e:	f3bf 8f6f 	isb	sy
 800ff82:	f3bf 8f4f 	dsb	sy
 800ff86:	b662      	cpsie	i
 800ff88:	61fb      	str	r3, [r7, #28]
}
 800ff8a:	bf00      	nop
 800ff8c:	e7fe      	b.n	800ff8c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff8e:	f001 fa89 	bl	80114a4 <xTaskGetSchedulerState>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d102      	bne.n	800ff9e <xQueueReceive+0x76>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d101      	bne.n	800ffa2 <xQueueReceive+0x7a>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e000      	b.n	800ffa4 <xQueueReceive+0x7c>
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d10c      	bne.n	800ffc2 <xQueueReceive+0x9a>
	__asm volatile
 800ffa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffac:	b672      	cpsid	i
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	b662      	cpsie	i
 800ffbc:	61bb      	str	r3, [r7, #24]
}
 800ffbe:	bf00      	nop
 800ffc0:	e7fe      	b.n	800ffc0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffc2:	f002 f8bb 	bl	801213c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01f      	beq.n	8010012 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffd2:	68b9      	ldr	r1, [r7, #8]
 800ffd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffd6:	f000 face 	bl	8010576 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffdc:	1e5a      	subs	r2, r3, #1
 800ffde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe4:	691b      	ldr	r3, [r3, #16]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00f      	beq.n	801000a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffec:	3310      	adds	r3, #16
 800ffee:	4618      	mov	r0, r3
 800fff0:	f001 f88e 	bl	8011110 <xTaskRemoveFromEventList>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d007      	beq.n	801000a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fffa:	4b3d      	ldr	r3, [pc, #244]	; (80100f0 <xQueueReceive+0x1c8>)
 800fffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010000:	601a      	str	r2, [r3, #0]
 8010002:	f3bf 8f4f 	dsb	sy
 8010006:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801000a:	f002 f8cb 	bl	80121a4 <vPortExitCritical>
				return pdPASS;
 801000e:	2301      	movs	r3, #1
 8010010:	e069      	b.n	80100e6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d103      	bne.n	8010020 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010018:	f002 f8c4 	bl	80121a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801001c:	2300      	movs	r3, #0
 801001e:	e062      	b.n	80100e6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010026:	f107 0310 	add.w	r3, r7, #16
 801002a:	4618      	mov	r0, r3
 801002c:	f001 f8d6 	bl	80111dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010030:	2301      	movs	r3, #1
 8010032:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010034:	f002 f8b6 	bl	80121a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010038:	f000 fe36 	bl	8010ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801003c:	f002 f87e 	bl	801213c <vPortEnterCritical>
 8010040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010046:	b25b      	sxtb	r3, r3
 8010048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801004c:	d103      	bne.n	8010056 <xQueueReceive+0x12e>
 801004e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801005c:	b25b      	sxtb	r3, r3
 801005e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010062:	d103      	bne.n	801006c <xQueueReceive+0x144>
 8010064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010066:	2200      	movs	r2, #0
 8010068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801006c:	f002 f89a 	bl	80121a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010070:	1d3a      	adds	r2, r7, #4
 8010072:	f107 0310 	add.w	r3, r7, #16
 8010076:	4611      	mov	r1, r2
 8010078:	4618      	mov	r0, r3
 801007a:	f001 f8c5 	bl	8011208 <xTaskCheckForTimeOut>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d123      	bne.n	80100cc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010086:	f000 faee 	bl	8010666 <prvIsQueueEmpty>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d017      	beq.n	80100c0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010092:	3324      	adds	r3, #36	; 0x24
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	4611      	mov	r1, r2
 8010098:	4618      	mov	r0, r3
 801009a:	f000 ffe5 	bl	8011068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801009e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100a0:	f000 fa8f 	bl	80105c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100a4:	f000 fe0e 	bl	8010cc4 <xTaskResumeAll>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d189      	bne.n	800ffc2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80100ae:	4b10      	ldr	r3, [pc, #64]	; (80100f0 <xQueueReceive+0x1c8>)
 80100b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	f3bf 8f6f 	isb	sy
 80100be:	e780      	b.n	800ffc2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80100c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100c2:	f000 fa7e 	bl	80105c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100c6:	f000 fdfd 	bl	8010cc4 <xTaskResumeAll>
 80100ca:	e77a      	b.n	800ffc2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80100cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100ce:	f000 fa78 	bl	80105c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100d2:	f000 fdf7 	bl	8010cc4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100d8:	f000 fac5 	bl	8010666 <prvIsQueueEmpty>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f43f af6f 	beq.w	800ffc2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80100e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3730      	adds	r7, #48	; 0x30
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	e000ed04 	.word	0xe000ed04

080100f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b08e      	sub	sp, #56	; 0x38
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80100fe:	2300      	movs	r3, #0
 8010100:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010106:	2300      	movs	r3, #0
 8010108:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10c      	bne.n	801012a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	b672      	cpsid	i
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	b662      	cpsie	i
 8010124:	623b      	str	r3, [r7, #32]
}
 8010126:	bf00      	nop
 8010128:	e7fe      	b.n	8010128 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00c      	beq.n	801014c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8010132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010136:	b672      	cpsid	i
 8010138:	f383 8811 	msr	BASEPRI, r3
 801013c:	f3bf 8f6f 	isb	sy
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	b662      	cpsie	i
 8010146:	61fb      	str	r3, [r7, #28]
}
 8010148:	bf00      	nop
 801014a:	e7fe      	b.n	801014a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801014c:	f001 f9aa 	bl	80114a4 <xTaskGetSchedulerState>
 8010150:	4603      	mov	r3, r0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d102      	bne.n	801015c <xQueueSemaphoreTake+0x68>
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d101      	bne.n	8010160 <xQueueSemaphoreTake+0x6c>
 801015c:	2301      	movs	r3, #1
 801015e:	e000      	b.n	8010162 <xQueueSemaphoreTake+0x6e>
 8010160:	2300      	movs	r3, #0
 8010162:	2b00      	cmp	r3, #0
 8010164:	d10c      	bne.n	8010180 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8010166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016a:	b672      	cpsid	i
 801016c:	f383 8811 	msr	BASEPRI, r3
 8010170:	f3bf 8f6f 	isb	sy
 8010174:	f3bf 8f4f 	dsb	sy
 8010178:	b662      	cpsie	i
 801017a:	61bb      	str	r3, [r7, #24]
}
 801017c:	bf00      	nop
 801017e:	e7fe      	b.n	801017e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010180:	f001 ffdc 	bl	801213c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010188:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801018a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801018c:	2b00      	cmp	r3, #0
 801018e:	d024      	beq.n	80101da <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010192:	1e5a      	subs	r2, r3, #1
 8010194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010196:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d104      	bne.n	80101aa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80101a0:	f001 fafe 	bl	80117a0 <pvTaskIncrementMutexHeldCount>
 80101a4:	4602      	mov	r2, r0
 80101a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00f      	beq.n	80101d2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b4:	3310      	adds	r3, #16
 80101b6:	4618      	mov	r0, r3
 80101b8:	f000 ffaa 	bl	8011110 <xTaskRemoveFromEventList>
 80101bc:	4603      	mov	r3, r0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d007      	beq.n	80101d2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80101c2:	4b55      	ldr	r3, [pc, #340]	; (8010318 <xQueueSemaphoreTake+0x224>)
 80101c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101c8:	601a      	str	r2, [r3, #0]
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80101d2:	f001 ffe7 	bl	80121a4 <vPortExitCritical>
				return pdPASS;
 80101d6:	2301      	movs	r3, #1
 80101d8:	e099      	b.n	801030e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d113      	bne.n	8010208 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00c      	beq.n	8010200 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80101e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ea:	b672      	cpsid	i
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	b662      	cpsie	i
 80101fa:	617b      	str	r3, [r7, #20]
}
 80101fc:	bf00      	nop
 80101fe:	e7fe      	b.n	80101fe <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010200:	f001 ffd0 	bl	80121a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010204:	2300      	movs	r3, #0
 8010206:	e082      	b.n	801030e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801020e:	f107 030c 	add.w	r3, r7, #12
 8010212:	4618      	mov	r0, r3
 8010214:	f000 ffe2 	bl	80111dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010218:	2301      	movs	r3, #1
 801021a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801021c:	f001 ffc2 	bl	80121a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010220:	f000 fd42 	bl	8010ca8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010224:	f001 ff8a 	bl	801213c <vPortEnterCritical>
 8010228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801022e:	b25b      	sxtb	r3, r3
 8010230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010234:	d103      	bne.n	801023e <xQueueSemaphoreTake+0x14a>
 8010236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801023e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010244:	b25b      	sxtb	r3, r3
 8010246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024a:	d103      	bne.n	8010254 <xQueueSemaphoreTake+0x160>
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010254:	f001 ffa6 	bl	80121a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010258:	463a      	mov	r2, r7
 801025a:	f107 030c 	add.w	r3, r7, #12
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f000 ffd1 	bl	8011208 <xTaskCheckForTimeOut>
 8010266:	4603      	mov	r3, r0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d132      	bne.n	80102d2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801026c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801026e:	f000 f9fa 	bl	8010666 <prvIsQueueEmpty>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d026      	beq.n	80102c6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d109      	bne.n	8010294 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8010280:	f001 ff5c 	bl	801213c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010286:	689b      	ldr	r3, [r3, #8]
 8010288:	4618      	mov	r0, r3
 801028a:	f001 f929 	bl	80114e0 <xTaskPriorityInherit>
 801028e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010290:	f001 ff88 	bl	80121a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010296:	3324      	adds	r3, #36	; 0x24
 8010298:	683a      	ldr	r2, [r7, #0]
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f000 fee3 	bl	8011068 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102a4:	f000 f98d 	bl	80105c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102a8:	f000 fd0c 	bl	8010cc4 <xTaskResumeAll>
 80102ac:	4603      	mov	r3, r0
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f47f af66 	bne.w	8010180 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80102b4:	4b18      	ldr	r3, [pc, #96]	; (8010318 <xQueueSemaphoreTake+0x224>)
 80102b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102ba:	601a      	str	r2, [r3, #0]
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	f3bf 8f6f 	isb	sy
 80102c4:	e75c      	b.n	8010180 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80102c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102c8:	f000 f97b 	bl	80105c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102cc:	f000 fcfa 	bl	8010cc4 <xTaskResumeAll>
 80102d0:	e756      	b.n	8010180 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80102d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102d4:	f000 f975 	bl	80105c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102d8:	f000 fcf4 	bl	8010cc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102de:	f000 f9c2 	bl	8010666 <prvIsQueueEmpty>
 80102e2:	4603      	mov	r3, r0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f43f af4b 	beq.w	8010180 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00d      	beq.n	801030c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80102f0:	f001 ff24 	bl	801213c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80102f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102f6:	f000 f8bc 	bl	8010472 <prvGetDisinheritPriorityAfterTimeout>
 80102fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80102fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010302:	4618      	mov	r0, r3
 8010304:	f001 f9c6 	bl	8011694 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010308:	f001 ff4c 	bl	80121a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801030c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801030e:	4618      	mov	r0, r3
 8010310:	3738      	adds	r7, #56	; 0x38
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	e000ed04 	.word	0xe000ed04

0801031c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b08e      	sub	sp, #56	; 0x38
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10c      	bne.n	801034c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8010332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010336:	b672      	cpsid	i
 8010338:	f383 8811 	msr	BASEPRI, r3
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f3bf 8f4f 	dsb	sy
 8010344:	b662      	cpsie	i
 8010346:	623b      	str	r3, [r7, #32]
}
 8010348:	bf00      	nop
 801034a:	e7fe      	b.n	801034a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d103      	bne.n	801035a <xQueueReceiveFromISR+0x3e>
 8010352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010356:	2b00      	cmp	r3, #0
 8010358:	d101      	bne.n	801035e <xQueueReceiveFromISR+0x42>
 801035a:	2301      	movs	r3, #1
 801035c:	e000      	b.n	8010360 <xQueueReceiveFromISR+0x44>
 801035e:	2300      	movs	r3, #0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d10c      	bne.n	801037e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	b672      	cpsid	i
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	b662      	cpsie	i
 8010378:	61fb      	str	r3, [r7, #28]
}
 801037a:	bf00      	nop
 801037c:	e7fe      	b.n	801037c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801037e:	f001 ffc5 	bl	801230c <vPortValidateInterruptPriority>
	__asm volatile
 8010382:	f3ef 8211 	mrs	r2, BASEPRI
 8010386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038a:	b672      	cpsid	i
 801038c:	f383 8811 	msr	BASEPRI, r3
 8010390:	f3bf 8f6f 	isb	sy
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	b662      	cpsie	i
 801039a:	61ba      	str	r2, [r7, #24]
 801039c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801039e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d02f      	beq.n	801040e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80103ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103b8:	68b9      	ldr	r1, [r7, #8]
 80103ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103bc:	f000 f8db 	bl	8010576 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103c2:	1e5a      	subs	r2, r3, #1
 80103c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80103c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d0:	d112      	bne.n	80103f8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	691b      	ldr	r3, [r3, #16]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d016      	beq.n	8010408 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	3310      	adds	r3, #16
 80103de:	4618      	mov	r0, r3
 80103e0:	f000 fe96 	bl	8011110 <xTaskRemoveFromEventList>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00e      	beq.n	8010408 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00b      	beq.n	8010408 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	601a      	str	r2, [r3, #0]
 80103f6:	e007      	b.n	8010408 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80103f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fc:	3301      	adds	r3, #1
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	b25a      	sxtb	r2, r3
 8010402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010408:	2301      	movs	r3, #1
 801040a:	637b      	str	r3, [r7, #52]	; 0x34
 801040c:	e001      	b.n	8010412 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801040e:	2300      	movs	r3, #0
 8010410:	637b      	str	r3, [r7, #52]	; 0x34
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	f383 8811 	msr	BASEPRI, r3
}
 801041c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010420:	4618      	mov	r0, r3
 8010422:	3738      	adds	r7, #56	; 0x38
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d10c      	bne.n	8010454 <vQueueDelete+0x2c>
	__asm volatile
 801043a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043e:	b672      	cpsid	i
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	b662      	cpsie	i
 801044e:	60bb      	str	r3, [r7, #8]
}
 8010450:	bf00      	nop
 8010452:	e7fe      	b.n	8010452 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f000 f95f 	bl	8010718 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010460:	2b00      	cmp	r3, #0
 8010462:	d102      	bne.n	801046a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8010464:	68f8      	ldr	r0, [r7, #12]
 8010466:	f002 f85f 	bl	8012528 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801046a:	bf00      	nop
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010472:	b480      	push	{r7}
 8010474:	b085      	sub	sp, #20
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801047e:	2b00      	cmp	r3, #0
 8010480:	d006      	beq.n	8010490 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801048c:	60fb      	str	r3, [r7, #12]
 801048e:	e001      	b.n	8010494 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010490:	2300      	movs	r3, #0
 8010492:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010494:	68fb      	ldr	r3, [r7, #12]
	}
 8010496:	4618      	mov	r0, r3
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b086      	sub	sp, #24
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80104ae:	2300      	movs	r3, #0
 80104b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10d      	bne.n	80104dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d14d      	bne.n	8010564 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f001 f86f 	bl	80115b0 <xTaskPriorityDisinherit>
 80104d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2200      	movs	r2, #0
 80104d8:	609a      	str	r2, [r3, #8]
 80104da:	e043      	b.n	8010564 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d119      	bne.n	8010516 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6858      	ldr	r0, [r3, #4]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ea:	461a      	mov	r2, r3
 80104ec:	68b9      	ldr	r1, [r7, #8]
 80104ee:	f002 f961 	bl	80127b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104fa:	441a      	add	r2, r3
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	685a      	ldr	r2, [r3, #4]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	429a      	cmp	r2, r3
 801050a:	d32b      	bcc.n	8010564 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	605a      	str	r2, [r3, #4]
 8010514:	e026      	b.n	8010564 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	68d8      	ldr	r0, [r3, #12]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801051e:	461a      	mov	r2, r3
 8010520:	68b9      	ldr	r1, [r7, #8]
 8010522:	f002 f947 	bl	80127b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	68da      	ldr	r2, [r3, #12]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052e:	425b      	negs	r3, r3
 8010530:	441a      	add	r2, r3
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68da      	ldr	r2, [r3, #12]
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	429a      	cmp	r2, r3
 8010540:	d207      	bcs.n	8010552 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	689a      	ldr	r2, [r3, #8]
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054a:	425b      	negs	r3, r3
 801054c:	441a      	add	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b02      	cmp	r3, #2
 8010556:	d105      	bne.n	8010564 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d002      	beq.n	8010564 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	3b01      	subs	r3, #1
 8010562:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	1c5a      	adds	r2, r3, #1
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801056c:	697b      	ldr	r3, [r7, #20]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3718      	adds	r7, #24
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b082      	sub	sp, #8
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010584:	2b00      	cmp	r3, #0
 8010586:	d018      	beq.n	80105ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	68da      	ldr	r2, [r3, #12]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010590:	441a      	add	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	68da      	ldr	r2, [r3, #12]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	689b      	ldr	r3, [r3, #8]
 801059e:	429a      	cmp	r2, r3
 80105a0:	d303      	bcc.n	80105aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68d9      	ldr	r1, [r3, #12]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b2:	461a      	mov	r2, r3
 80105b4:	6838      	ldr	r0, [r7, #0]
 80105b6:	f002 f8fd 	bl	80127b4 <memcpy>
	}
}
 80105ba:	bf00      	nop
 80105bc:	3708      	adds	r7, #8
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b084      	sub	sp, #16
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80105ca:	f001 fdb7 	bl	801213c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105d6:	e011      	b.n	80105fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d012      	beq.n	8010606 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	3324      	adds	r3, #36	; 0x24
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 fd93 	bl	8011110 <xTaskRemoveFromEventList>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105f0:	f000 fe70 	bl	80112d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
 80105f6:	3b01      	subs	r3, #1
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010600:	2b00      	cmp	r3, #0
 8010602:	dce9      	bgt.n	80105d8 <prvUnlockQueue+0x16>
 8010604:	e000      	b.n	8010608 <prvUnlockQueue+0x46>
					break;
 8010606:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	22ff      	movs	r2, #255	; 0xff
 801060c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010610:	f001 fdc8 	bl	80121a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010614:	f001 fd92 	bl	801213c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801061e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010620:	e011      	b.n	8010646 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d012      	beq.n	8010650 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3310      	adds	r3, #16
 801062e:	4618      	mov	r0, r3
 8010630:	f000 fd6e 	bl	8011110 <xTaskRemoveFromEventList>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d001      	beq.n	801063e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801063a:	f000 fe4b 	bl	80112d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801063e:	7bbb      	ldrb	r3, [r7, #14]
 8010640:	3b01      	subs	r3, #1
 8010642:	b2db      	uxtb	r3, r3
 8010644:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801064a:	2b00      	cmp	r3, #0
 801064c:	dce9      	bgt.n	8010622 <prvUnlockQueue+0x60>
 801064e:	e000      	b.n	8010652 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010650:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	22ff      	movs	r2, #255	; 0xff
 8010656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801065a:	f001 fda3 	bl	80121a4 <vPortExitCritical>
}
 801065e:	bf00      	nop
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b084      	sub	sp, #16
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801066e:	f001 fd65 	bl	801213c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010676:	2b00      	cmp	r3, #0
 8010678:	d102      	bne.n	8010680 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801067a:	2301      	movs	r3, #1
 801067c:	60fb      	str	r3, [r7, #12]
 801067e:	e001      	b.n	8010684 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010680:	2300      	movs	r3, #0
 8010682:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010684:	f001 fd8e 	bl	80121a4 <vPortExitCritical>

	return xReturn;
 8010688:	68fb      	ldr	r3, [r7, #12]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801069a:	f001 fd4f 	bl	801213c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d102      	bne.n	80106b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80106aa:	2301      	movs	r3, #1
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	e001      	b.n	80106b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80106b0:	2300      	movs	r3, #0
 80106b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80106b4:	f001 fd76 	bl	80121a4 <vPortExitCritical>

	return xReturn;
 80106b8:	68fb      	ldr	r3, [r7, #12]
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
	...

080106c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106ce:	2300      	movs	r3, #0
 80106d0:	60fb      	str	r3, [r7, #12]
 80106d2:	e014      	b.n	80106fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80106d4:	4a0f      	ldr	r2, [pc, #60]	; (8010714 <vQueueAddToRegistry+0x50>)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d10b      	bne.n	80106f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80106e0:	490c      	ldr	r1, [pc, #48]	; (8010714 <vQueueAddToRegistry+0x50>)
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	683a      	ldr	r2, [r7, #0]
 80106e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80106ea:	4a0a      	ldr	r2, [pc, #40]	; (8010714 <vQueueAddToRegistry+0x50>)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	00db      	lsls	r3, r3, #3
 80106f0:	4413      	add	r3, r2
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80106f6:	e006      	b.n	8010706 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	3301      	adds	r3, #1
 80106fc:	60fb      	str	r3, [r7, #12]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2b07      	cmp	r3, #7
 8010702:	d9e7      	bls.n	80106d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010704:	bf00      	nop
 8010706:	bf00      	nop
 8010708:	3714      	adds	r7, #20
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	20001d8c 	.word	0x20001d8c

08010718 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010718:	b480      	push	{r7}
 801071a:	b085      	sub	sp, #20
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010720:	2300      	movs	r3, #0
 8010722:	60fb      	str	r3, [r7, #12]
 8010724:	e016      	b.n	8010754 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010726:	4a10      	ldr	r2, [pc, #64]	; (8010768 <vQueueUnregisterQueue+0x50>)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	00db      	lsls	r3, r3, #3
 801072c:	4413      	add	r3, r2
 801072e:	685b      	ldr	r3, [r3, #4]
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	429a      	cmp	r2, r3
 8010734:	d10b      	bne.n	801074e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010736:	4a0c      	ldr	r2, [pc, #48]	; (8010768 <vQueueUnregisterQueue+0x50>)
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2100      	movs	r1, #0
 801073c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010740:	4a09      	ldr	r2, [pc, #36]	; (8010768 <vQueueUnregisterQueue+0x50>)
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	4413      	add	r3, r2
 8010748:	2200      	movs	r2, #0
 801074a:	605a      	str	r2, [r3, #4]
				break;
 801074c:	e006      	b.n	801075c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	3301      	adds	r3, #1
 8010752:	60fb      	str	r3, [r7, #12]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2b07      	cmp	r3, #7
 8010758:	d9e5      	bls.n	8010726 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801075a:	bf00      	nop
 801075c:	bf00      	nop
 801075e:	3714      	adds	r7, #20
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr
 8010768:	20001d8c 	.word	0x20001d8c

0801076c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801077c:	f001 fcde 	bl	801213c <vPortEnterCritical>
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010786:	b25b      	sxtb	r3, r3
 8010788:	f1b3 3fff 	cmp.w	r3, #4294967295
 801078c:	d103      	bne.n	8010796 <vQueueWaitForMessageRestricted+0x2a>
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	2200      	movs	r2, #0
 8010792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801079c:	b25b      	sxtb	r3, r3
 801079e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107a2:	d103      	bne.n	80107ac <vQueueWaitForMessageRestricted+0x40>
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2200      	movs	r2, #0
 80107a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107ac:	f001 fcfa 	bl	80121a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d106      	bne.n	80107c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	3324      	adds	r3, #36	; 0x24
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	68b9      	ldr	r1, [r7, #8]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f000 fc77 	bl	80110b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80107c6:	6978      	ldr	r0, [r7, #20]
 80107c8:	f7ff fefb 	bl	80105c2 <prvUnlockQueue>
	}
 80107cc:	bf00      	nop
 80107ce:	3718      	adds	r7, #24
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08e      	sub	sp, #56	; 0x38
 80107d8:	af04      	add	r7, sp, #16
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
 80107e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80107e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10c      	bne.n	8010802 <xTaskCreateStatic+0x2e>
	__asm volatile
 80107e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ec:	b672      	cpsid	i
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	b662      	cpsie	i
 80107fc:	623b      	str	r3, [r7, #32]
}
 80107fe:	bf00      	nop
 8010800:	e7fe      	b.n	8010800 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	2b00      	cmp	r3, #0
 8010806:	d10c      	bne.n	8010822 <xTaskCreateStatic+0x4e>
	__asm volatile
 8010808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080c:	b672      	cpsid	i
 801080e:	f383 8811 	msr	BASEPRI, r3
 8010812:	f3bf 8f6f 	isb	sy
 8010816:	f3bf 8f4f 	dsb	sy
 801081a:	b662      	cpsie	i
 801081c:	61fb      	str	r3, [r7, #28]
}
 801081e:	bf00      	nop
 8010820:	e7fe      	b.n	8010820 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010822:	23bc      	movs	r3, #188	; 0xbc
 8010824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	2bbc      	cmp	r3, #188	; 0xbc
 801082a:	d00c      	beq.n	8010846 <xTaskCreateStatic+0x72>
	__asm volatile
 801082c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010830:	b672      	cpsid	i
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	b662      	cpsie	i
 8010840:	61bb      	str	r3, [r7, #24]
}
 8010842:	bf00      	nop
 8010844:	e7fe      	b.n	8010844 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010846:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084a:	2b00      	cmp	r3, #0
 801084c:	d01e      	beq.n	801088c <xTaskCreateStatic+0xb8>
 801084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010850:	2b00      	cmp	r3, #0
 8010852:	d01b      	beq.n	801088c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801085c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010860:	2202      	movs	r2, #2
 8010862:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010866:	2300      	movs	r3, #0
 8010868:	9303      	str	r3, [sp, #12]
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	9302      	str	r3, [sp, #8]
 801086e:	f107 0314 	add.w	r3, r7, #20
 8010872:	9301      	str	r3, [sp, #4]
 8010874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	68b9      	ldr	r1, [r7, #8]
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f000 f850 	bl	8010924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010886:	f000 f8f5 	bl	8010a74 <prvAddNewTaskToReadyList>
 801088a:	e001      	b.n	8010890 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801088c:	2300      	movs	r3, #0
 801088e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010890:	697b      	ldr	r3, [r7, #20]
	}
 8010892:	4618      	mov	r0, r3
 8010894:	3728      	adds	r7, #40	; 0x28
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801089a:	b580      	push	{r7, lr}
 801089c:	b08c      	sub	sp, #48	; 0x30
 801089e:	af04      	add	r7, sp, #16
 80108a0:	60f8      	str	r0, [r7, #12]
 80108a2:	60b9      	str	r1, [r7, #8]
 80108a4:	603b      	str	r3, [r7, #0]
 80108a6:	4613      	mov	r3, r2
 80108a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80108aa:	88fb      	ldrh	r3, [r7, #6]
 80108ac:	009b      	lsls	r3, r3, #2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f001 fd70 	bl	8012394 <pvPortMalloc>
 80108b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00e      	beq.n	80108da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80108bc:	20bc      	movs	r0, #188	; 0xbc
 80108be:	f001 fd69 	bl	8012394 <pvPortMalloc>
 80108c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d003      	beq.n	80108d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80108ca:	69fb      	ldr	r3, [r7, #28]
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	631a      	str	r2, [r3, #48]	; 0x30
 80108d0:	e005      	b.n	80108de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80108d2:	6978      	ldr	r0, [r7, #20]
 80108d4:	f001 fe28 	bl	8012528 <vPortFree>
 80108d8:	e001      	b.n	80108de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80108da:	2300      	movs	r3, #0
 80108dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d017      	beq.n	8010914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	2200      	movs	r2, #0
 80108e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80108ec:	88fa      	ldrh	r2, [r7, #6]
 80108ee:	2300      	movs	r3, #0
 80108f0:	9303      	str	r3, [sp, #12]
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	9302      	str	r3, [sp, #8]
 80108f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f8:	9301      	str	r3, [sp, #4]
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	68b9      	ldr	r1, [r7, #8]
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f000 f80e 	bl	8010924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010908:	69f8      	ldr	r0, [r7, #28]
 801090a:	f000 f8b3 	bl	8010a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801090e:	2301      	movs	r3, #1
 8010910:	61bb      	str	r3, [r7, #24]
 8010912:	e002      	b.n	801091a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010914:	f04f 33ff 	mov.w	r3, #4294967295
 8010918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801091a:	69bb      	ldr	r3, [r7, #24]
	}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	461a      	mov	r2, r3
 801093c:	21a5      	movs	r1, #165	; 0xa5
 801093e:	f001 ff47 	bl	80127d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010946:	6879      	ldr	r1, [r7, #4]
 8010948:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801094c:	440b      	add	r3, r1
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4413      	add	r3, r2
 8010952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	f023 0307 	bic.w	r3, r3, #7
 801095a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801095c:	69bb      	ldr	r3, [r7, #24]
 801095e:	f003 0307 	and.w	r3, r3, #7
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00c      	beq.n	8010980 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096a:	b672      	cpsid	i
 801096c:	f383 8811 	msr	BASEPRI, r3
 8010970:	f3bf 8f6f 	isb	sy
 8010974:	f3bf 8f4f 	dsb	sy
 8010978:	b662      	cpsie	i
 801097a:	617b      	str	r3, [r7, #20]
}
 801097c:	bf00      	nop
 801097e:	e7fe      	b.n	801097e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d01f      	beq.n	80109c6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010986:	2300      	movs	r3, #0
 8010988:	61fb      	str	r3, [r7, #28]
 801098a:	e012      	b.n	80109b2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	4413      	add	r3, r2
 8010992:	7819      	ldrb	r1, [r3, #0]
 8010994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	4413      	add	r3, r2
 801099a:	3334      	adds	r3, #52	; 0x34
 801099c:	460a      	mov	r2, r1
 801099e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	4413      	add	r3, r2
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d006      	beq.n	80109ba <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	3301      	adds	r3, #1
 80109b0:	61fb      	str	r3, [r7, #28]
 80109b2:	69fb      	ldr	r3, [r7, #28]
 80109b4:	2b0f      	cmp	r3, #15
 80109b6:	d9e9      	bls.n	801098c <prvInitialiseNewTask+0x68>
 80109b8:	e000      	b.n	80109bc <prvInitialiseNewTask+0x98>
			{
				break;
 80109ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80109bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109be:	2200      	movs	r2, #0
 80109c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109c4:	e003      	b.n	80109ce <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	2200      	movs	r2, #0
 80109ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80109ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d0:	2b37      	cmp	r3, #55	; 0x37
 80109d2:	d901      	bls.n	80109d8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80109d4:	2337      	movs	r3, #55	; 0x37
 80109d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80109d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	2200      	movs	r2, #0
 80109e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	3304      	adds	r3, #4
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fe fe06 	bl	800f600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	3318      	adds	r3, #24
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7fe fe01 	bl	800f600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a16:	2200      	movs	r2, #0
 8010a18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	3354      	adds	r3, #84	; 0x54
 8010a28:	2260      	movs	r2, #96	; 0x60
 8010a2a:	2100      	movs	r1, #0
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f001 fecf 	bl	80127d0 <memset>
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	4a0c      	ldr	r2, [pc, #48]	; (8010a68 <prvInitialiseNewTask+0x144>)
 8010a36:	659a      	str	r2, [r3, #88]	; 0x58
 8010a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3a:	4a0c      	ldr	r2, [pc, #48]	; (8010a6c <prvInitialiseNewTask+0x148>)
 8010a3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a40:	4a0b      	ldr	r2, [pc, #44]	; (8010a70 <prvInitialiseNewTask+0x14c>)
 8010a42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	68f9      	ldr	r1, [r7, #12]
 8010a48:	69b8      	ldr	r0, [r7, #24]
 8010a4a:	f001 fa6d 	bl	8011f28 <pxPortInitialiseStack>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a60:	bf00      	nop
 8010a62:	3720      	adds	r7, #32
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	080130d0 	.word	0x080130d0
 8010a6c:	080130f0 	.word	0x080130f0
 8010a70:	080130b0 	.word	0x080130b0

08010a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b082      	sub	sp, #8
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010a7c:	f001 fb5e 	bl	801213c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010a80:	4b2d      	ldr	r3, [pc, #180]	; (8010b38 <prvAddNewTaskToReadyList+0xc4>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	3301      	adds	r3, #1
 8010a86:	4a2c      	ldr	r2, [pc, #176]	; (8010b38 <prvAddNewTaskToReadyList+0xc4>)
 8010a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010a8a:	4b2c      	ldr	r3, [pc, #176]	; (8010b3c <prvAddNewTaskToReadyList+0xc8>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d109      	bne.n	8010aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010a92:	4a2a      	ldr	r2, [pc, #168]	; (8010b3c <prvAddNewTaskToReadyList+0xc8>)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a98:	4b27      	ldr	r3, [pc, #156]	; (8010b38 <prvAddNewTaskToReadyList+0xc4>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d110      	bne.n	8010ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010aa0:	f000 fc3c 	bl	801131c <prvInitialiseTaskLists>
 8010aa4:	e00d      	b.n	8010ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010aa6:	4b26      	ldr	r3, [pc, #152]	; (8010b40 <prvAddNewTaskToReadyList+0xcc>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d109      	bne.n	8010ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010aae:	4b23      	ldr	r3, [pc, #140]	; (8010b3c <prvAddNewTaskToReadyList+0xc8>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d802      	bhi.n	8010ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010abc:	4a1f      	ldr	r2, [pc, #124]	; (8010b3c <prvAddNewTaskToReadyList+0xc8>)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ac2:	4b20      	ldr	r3, [pc, #128]	; (8010b44 <prvAddNewTaskToReadyList+0xd0>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	4a1e      	ldr	r2, [pc, #120]	; (8010b44 <prvAddNewTaskToReadyList+0xd0>)
 8010aca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010acc:	4b1d      	ldr	r3, [pc, #116]	; (8010b44 <prvAddNewTaskToReadyList+0xd0>)
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ad8:	4b1b      	ldr	r3, [pc, #108]	; (8010b48 <prvAddNewTaskToReadyList+0xd4>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d903      	bls.n	8010ae8 <prvAddNewTaskToReadyList+0x74>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ae4:	4a18      	ldr	r2, [pc, #96]	; (8010b48 <prvAddNewTaskToReadyList+0xd4>)
 8010ae6:	6013      	str	r3, [r2, #0]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aec:	4613      	mov	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	4413      	add	r3, r2
 8010af2:	009b      	lsls	r3, r3, #2
 8010af4:	4a15      	ldr	r2, [pc, #84]	; (8010b4c <prvAddNewTaskToReadyList+0xd8>)
 8010af6:	441a      	add	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3304      	adds	r3, #4
 8010afc:	4619      	mov	r1, r3
 8010afe:	4610      	mov	r0, r2
 8010b00:	f7fe fd8b 	bl	800f61a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010b04:	f001 fb4e 	bl	80121a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010b08:	4b0d      	ldr	r3, [pc, #52]	; (8010b40 <prvAddNewTaskToReadyList+0xcc>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d00e      	beq.n	8010b2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010b10:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <prvAddNewTaskToReadyList+0xc8>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d207      	bcs.n	8010b2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010b1e:	4b0c      	ldr	r3, [pc, #48]	; (8010b50 <prvAddNewTaskToReadyList+0xdc>)
 8010b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b24:	601a      	str	r2, [r3, #0]
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b2e:	bf00      	nop
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	200022a0 	.word	0x200022a0
 8010b3c:	20001dcc 	.word	0x20001dcc
 8010b40:	200022ac 	.word	0x200022ac
 8010b44:	200022bc 	.word	0x200022bc
 8010b48:	200022a8 	.word	0x200022a8
 8010b4c:	20001dd0 	.word	0x20001dd0
 8010b50:	e000ed04 	.word	0xe000ed04

08010b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d019      	beq.n	8010b9a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b66:	4b14      	ldr	r3, [pc, #80]	; (8010bb8 <vTaskDelay+0x64>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00c      	beq.n	8010b88 <vTaskDelay+0x34>
	__asm volatile
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	b672      	cpsid	i
 8010b74:	f383 8811 	msr	BASEPRI, r3
 8010b78:	f3bf 8f6f 	isb	sy
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	b662      	cpsie	i
 8010b82:	60bb      	str	r3, [r7, #8]
}
 8010b84:	bf00      	nop
 8010b86:	e7fe      	b.n	8010b86 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010b88:	f000 f88e 	bl	8010ca8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f000 fe1a 	bl	80117c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b94:	f000 f896 	bl	8010cc4 <xTaskResumeAll>
 8010b98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d107      	bne.n	8010bb0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010ba0:	4b06      	ldr	r3, [pc, #24]	; (8010bbc <vTaskDelay+0x68>)
 8010ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ba6:	601a      	str	r2, [r3, #0]
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010bb0:	bf00      	nop
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	200022c8 	.word	0x200022c8
 8010bbc:	e000ed04 	.word	0xe000ed04

08010bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b08a      	sub	sp, #40	; 0x28
 8010bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bce:	463a      	mov	r2, r7
 8010bd0:	1d39      	adds	r1, r7, #4
 8010bd2:	f107 0308 	add.w	r3, r7, #8
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fe fcbe 	bl	800f558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	68ba      	ldr	r2, [r7, #8]
 8010be2:	9202      	str	r2, [sp, #8]
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	2300      	movs	r3, #0
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	2300      	movs	r3, #0
 8010bec:	460a      	mov	r2, r1
 8010bee:	4926      	ldr	r1, [pc, #152]	; (8010c88 <vTaskStartScheduler+0xc8>)
 8010bf0:	4826      	ldr	r0, [pc, #152]	; (8010c8c <vTaskStartScheduler+0xcc>)
 8010bf2:	f7ff fdef 	bl	80107d4 <xTaskCreateStatic>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	4a25      	ldr	r2, [pc, #148]	; (8010c90 <vTaskStartScheduler+0xd0>)
 8010bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010bfc:	4b24      	ldr	r3, [pc, #144]	; (8010c90 <vTaskStartScheduler+0xd0>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d002      	beq.n	8010c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010c04:	2301      	movs	r3, #1
 8010c06:	617b      	str	r3, [r7, #20]
 8010c08:	e001      	b.n	8010c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d102      	bne.n	8010c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010c14:	f000 fe2c 	bl	8011870 <xTimerCreateTimerTask>
 8010c18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d11d      	bne.n	8010c5c <vTaskStartScheduler+0x9c>
	__asm volatile
 8010c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c24:	b672      	cpsid	i
 8010c26:	f383 8811 	msr	BASEPRI, r3
 8010c2a:	f3bf 8f6f 	isb	sy
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	b662      	cpsie	i
 8010c34:	613b      	str	r3, [r7, #16]
}
 8010c36:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c38:	4b16      	ldr	r3, [pc, #88]	; (8010c94 <vTaskStartScheduler+0xd4>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	3354      	adds	r3, #84	; 0x54
 8010c3e:	4a16      	ldr	r2, [pc, #88]	; (8010c98 <vTaskStartScheduler+0xd8>)
 8010c40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c42:	4b16      	ldr	r3, [pc, #88]	; (8010c9c <vTaskStartScheduler+0xdc>)
 8010c44:	f04f 32ff 	mov.w	r2, #4294967295
 8010c48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c4a:	4b15      	ldr	r3, [pc, #84]	; (8010ca0 <vTaskStartScheduler+0xe0>)
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c50:	4b14      	ldr	r3, [pc, #80]	; (8010ca4 <vTaskStartScheduler+0xe4>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c56:	f001 f9f3 	bl	8012040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c5a:	e010      	b.n	8010c7e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c62:	d10c      	bne.n	8010c7e <vTaskStartScheduler+0xbe>
	__asm volatile
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	b672      	cpsid	i
 8010c6a:	f383 8811 	msr	BASEPRI, r3
 8010c6e:	f3bf 8f6f 	isb	sy
 8010c72:	f3bf 8f4f 	dsb	sy
 8010c76:	b662      	cpsie	i
 8010c78:	60fb      	str	r3, [r7, #12]
}
 8010c7a:	bf00      	nop
 8010c7c:	e7fe      	b.n	8010c7c <vTaskStartScheduler+0xbc>
}
 8010c7e:	bf00      	nop
 8010c80:	3718      	adds	r7, #24
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	08012e78 	.word	0x08012e78
 8010c8c:	080112ed 	.word	0x080112ed
 8010c90:	200022c4 	.word	0x200022c4
 8010c94:	20001dcc 	.word	0x20001dcc
 8010c98:	200001c0 	.word	0x200001c0
 8010c9c:	200022c0 	.word	0x200022c0
 8010ca0:	200022ac 	.word	0x200022ac
 8010ca4:	200022a4 	.word	0x200022a4

08010ca8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010ca8:	b480      	push	{r7}
 8010caa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010cac:	4b04      	ldr	r3, [pc, #16]	; (8010cc0 <vTaskSuspendAll+0x18>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	4a03      	ldr	r2, [pc, #12]	; (8010cc0 <vTaskSuspendAll+0x18>)
 8010cb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010cb6:	bf00      	nop
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr
 8010cc0:	200022c8 	.word	0x200022c8

08010cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010cd2:	4b43      	ldr	r3, [pc, #268]	; (8010de0 <xTaskResumeAll+0x11c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d10c      	bne.n	8010cf4 <xTaskResumeAll+0x30>
	__asm volatile
 8010cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cde:	b672      	cpsid	i
 8010ce0:	f383 8811 	msr	BASEPRI, r3
 8010ce4:	f3bf 8f6f 	isb	sy
 8010ce8:	f3bf 8f4f 	dsb	sy
 8010cec:	b662      	cpsie	i
 8010cee:	603b      	str	r3, [r7, #0]
}
 8010cf0:	bf00      	nop
 8010cf2:	e7fe      	b.n	8010cf2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010cf4:	f001 fa22 	bl	801213c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010cf8:	4b39      	ldr	r3, [pc, #228]	; (8010de0 <xTaskResumeAll+0x11c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	4a38      	ldr	r2, [pc, #224]	; (8010de0 <xTaskResumeAll+0x11c>)
 8010d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d02:	4b37      	ldr	r3, [pc, #220]	; (8010de0 <xTaskResumeAll+0x11c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d162      	bne.n	8010dd0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d0a:	4b36      	ldr	r3, [pc, #216]	; (8010de4 <xTaskResumeAll+0x120>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d05e      	beq.n	8010dd0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d12:	e02f      	b.n	8010d74 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d14:	4b34      	ldr	r3, [pc, #208]	; (8010de8 <xTaskResumeAll+0x124>)
 8010d16:	68db      	ldr	r3, [r3, #12]
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	3318      	adds	r3, #24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fe fcd7 	bl	800f6d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fe fcd2 	bl	800f6d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d34:	4b2d      	ldr	r3, [pc, #180]	; (8010dec <xTaskResumeAll+0x128>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d903      	bls.n	8010d44 <xTaskResumeAll+0x80>
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d40:	4a2a      	ldr	r2, [pc, #168]	; (8010dec <xTaskResumeAll+0x128>)
 8010d42:	6013      	str	r3, [r2, #0]
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d48:	4613      	mov	r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4413      	add	r3, r2
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4a27      	ldr	r2, [pc, #156]	; (8010df0 <xTaskResumeAll+0x12c>)
 8010d52:	441a      	add	r2, r3
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	3304      	adds	r3, #4
 8010d58:	4619      	mov	r1, r3
 8010d5a:	4610      	mov	r0, r2
 8010d5c:	f7fe fc5d 	bl	800f61a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d64:	4b23      	ldr	r3, [pc, #140]	; (8010df4 <xTaskResumeAll+0x130>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d302      	bcc.n	8010d74 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8010d6e:	4b22      	ldr	r3, [pc, #136]	; (8010df8 <xTaskResumeAll+0x134>)
 8010d70:	2201      	movs	r2, #1
 8010d72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d74:	4b1c      	ldr	r3, [pc, #112]	; (8010de8 <xTaskResumeAll+0x124>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d1cb      	bne.n	8010d14 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d001      	beq.n	8010d86 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d82:	f000 fb6f 	bl	8011464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010d86:	4b1d      	ldr	r3, [pc, #116]	; (8010dfc <xTaskResumeAll+0x138>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d010      	beq.n	8010db4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d92:	f000 f847 	bl	8010e24 <xTaskIncrementTick>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d002      	beq.n	8010da2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010d9c:	4b16      	ldr	r3, [pc, #88]	; (8010df8 <xTaskResumeAll+0x134>)
 8010d9e:	2201      	movs	r2, #1
 8010da0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3b01      	subs	r3, #1
 8010da6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d1f1      	bne.n	8010d92 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8010dae:	4b13      	ldr	r3, [pc, #76]	; (8010dfc <xTaskResumeAll+0x138>)
 8010db0:	2200      	movs	r2, #0
 8010db2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010db4:	4b10      	ldr	r3, [pc, #64]	; (8010df8 <xTaskResumeAll+0x134>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d009      	beq.n	8010dd0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010dc0:	4b0f      	ldr	r3, [pc, #60]	; (8010e00 <xTaskResumeAll+0x13c>)
 8010dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dc6:	601a      	str	r2, [r3, #0]
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010dd0:	f001 f9e8 	bl	80121a4 <vPortExitCritical>

	return xAlreadyYielded;
 8010dd4:	68bb      	ldr	r3, [r7, #8]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3710      	adds	r7, #16
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	200022c8 	.word	0x200022c8
 8010de4:	200022a0 	.word	0x200022a0
 8010de8:	20002260 	.word	0x20002260
 8010dec:	200022a8 	.word	0x200022a8
 8010df0:	20001dd0 	.word	0x20001dd0
 8010df4:	20001dcc 	.word	0x20001dcc
 8010df8:	200022b4 	.word	0x200022b4
 8010dfc:	200022b0 	.word	0x200022b0
 8010e00:	e000ed04 	.word	0xe000ed04

08010e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010e0a:	4b05      	ldr	r3, [pc, #20]	; (8010e20 <xTaskGetTickCount+0x1c>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010e10:	687b      	ldr	r3, [r7, #4]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	370c      	adds	r7, #12
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	200022a4 	.word	0x200022a4

08010e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b086      	sub	sp, #24
 8010e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e2e:	4b50      	ldr	r3, [pc, #320]	; (8010f70 <xTaskIncrementTick+0x14c>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f040 808b 	bne.w	8010f4e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e38:	4b4e      	ldr	r3, [pc, #312]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e40:	4a4c      	ldr	r2, [pc, #304]	; (8010f74 <xTaskIncrementTick+0x150>)
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d122      	bne.n	8010e92 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e4c:	4b4a      	ldr	r3, [pc, #296]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00c      	beq.n	8010e70 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	b672      	cpsid	i
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	b662      	cpsie	i
 8010e6a:	603b      	str	r3, [r7, #0]
}
 8010e6c:	bf00      	nop
 8010e6e:	e7fe      	b.n	8010e6e <xTaskIncrementTick+0x4a>
 8010e70:	4b41      	ldr	r3, [pc, #260]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	60fb      	str	r3, [r7, #12]
 8010e76:	4b41      	ldr	r3, [pc, #260]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4a3f      	ldr	r2, [pc, #252]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e7c:	6013      	str	r3, [r2, #0]
 8010e7e:	4a3f      	ldr	r2, [pc, #252]	; (8010f7c <xTaskIncrementTick+0x158>)
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	4b3e      	ldr	r3, [pc, #248]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	4a3d      	ldr	r2, [pc, #244]	; (8010f80 <xTaskIncrementTick+0x15c>)
 8010e8c:	6013      	str	r3, [r2, #0]
 8010e8e:	f000 fae9 	bl	8011464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e92:	4b3c      	ldr	r3, [pc, #240]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	693a      	ldr	r2, [r7, #16]
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d349      	bcc.n	8010f30 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e9c:	4b36      	ldr	r3, [pc, #216]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d104      	bne.n	8010eb0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ea6:	4b37      	ldr	r3, [pc, #220]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8010eac:	601a      	str	r2, [r3, #0]
					break;
 8010eae:	e03f      	b.n	8010f30 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010eb0:	4b31      	ldr	r3, [pc, #196]	; (8010f78 <xTaskIncrementTick+0x154>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010ec0:	693a      	ldr	r2, [r7, #16]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d203      	bcs.n	8010ed0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010ec8:	4a2e      	ldr	r2, [pc, #184]	; (8010f84 <xTaskIncrementTick+0x160>)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010ece:	e02f      	b.n	8010f30 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	3304      	adds	r3, #4
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7fe fbfd 	bl	800f6d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d004      	beq.n	8010eec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	3318      	adds	r3, #24
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fe fbf4 	bl	800f6d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef0:	4b25      	ldr	r3, [pc, #148]	; (8010f88 <xTaskIncrementTick+0x164>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d903      	bls.n	8010f00 <xTaskIncrementTick+0xdc>
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010efc:	4a22      	ldr	r2, [pc, #136]	; (8010f88 <xTaskIncrementTick+0x164>)
 8010efe:	6013      	str	r3, [r2, #0]
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f04:	4613      	mov	r3, r2
 8010f06:	009b      	lsls	r3, r3, #2
 8010f08:	4413      	add	r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	4a1f      	ldr	r2, [pc, #124]	; (8010f8c <xTaskIncrementTick+0x168>)
 8010f0e:	441a      	add	r2, r3
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	3304      	adds	r3, #4
 8010f14:	4619      	mov	r1, r3
 8010f16:	4610      	mov	r0, r2
 8010f18:	f7fe fb7f 	bl	800f61a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f20:	4b1b      	ldr	r3, [pc, #108]	; (8010f90 <xTaskIncrementTick+0x16c>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d3b8      	bcc.n	8010e9c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f2e:	e7b5      	b.n	8010e9c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f30:	4b17      	ldr	r3, [pc, #92]	; (8010f90 <xTaskIncrementTick+0x16c>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f36:	4915      	ldr	r1, [pc, #84]	; (8010f8c <xTaskIncrementTick+0x168>)
 8010f38:	4613      	mov	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	440b      	add	r3, r1
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d907      	bls.n	8010f58 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	617b      	str	r3, [r7, #20]
 8010f4c:	e004      	b.n	8010f58 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010f4e:	4b11      	ldr	r3, [pc, #68]	; (8010f94 <xTaskIncrementTick+0x170>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3301      	adds	r3, #1
 8010f54:	4a0f      	ldr	r2, [pc, #60]	; (8010f94 <xTaskIncrementTick+0x170>)
 8010f56:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010f58:	4b0f      	ldr	r3, [pc, #60]	; (8010f98 <xTaskIncrementTick+0x174>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d001      	beq.n	8010f64 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010f60:	2301      	movs	r3, #1
 8010f62:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010f64:	697b      	ldr	r3, [r7, #20]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3718      	adds	r7, #24
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	200022c8 	.word	0x200022c8
 8010f74:	200022a4 	.word	0x200022a4
 8010f78:	20002258 	.word	0x20002258
 8010f7c:	2000225c 	.word	0x2000225c
 8010f80:	200022b8 	.word	0x200022b8
 8010f84:	200022c0 	.word	0x200022c0
 8010f88:	200022a8 	.word	0x200022a8
 8010f8c:	20001dd0 	.word	0x20001dd0
 8010f90:	20001dcc 	.word	0x20001dcc
 8010f94:	200022b0 	.word	0x200022b0
 8010f98:	200022b4 	.word	0x200022b4

08010f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b085      	sub	sp, #20
 8010fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010fa2:	4b2b      	ldr	r3, [pc, #172]	; (8011050 <vTaskSwitchContext+0xb4>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d003      	beq.n	8010fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010faa:	4b2a      	ldr	r3, [pc, #168]	; (8011054 <vTaskSwitchContext+0xb8>)
 8010fac:	2201      	movs	r2, #1
 8010fae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010fb0:	e048      	b.n	8011044 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8010fb2:	4b28      	ldr	r3, [pc, #160]	; (8011054 <vTaskSwitchContext+0xb8>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fb8:	4b27      	ldr	r3, [pc, #156]	; (8011058 <vTaskSwitchContext+0xbc>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	60fb      	str	r3, [r7, #12]
 8010fbe:	e012      	b.n	8010fe6 <vTaskSwitchContext+0x4a>
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d10c      	bne.n	8010fe0 <vTaskSwitchContext+0x44>
	__asm volatile
 8010fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fca:	b672      	cpsid	i
 8010fcc:	f383 8811 	msr	BASEPRI, r3
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	f3bf 8f4f 	dsb	sy
 8010fd8:	b662      	cpsie	i
 8010fda:	607b      	str	r3, [r7, #4]
}
 8010fdc:	bf00      	nop
 8010fde:	e7fe      	b.n	8010fde <vTaskSwitchContext+0x42>
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	491d      	ldr	r1, [pc, #116]	; (801105c <vTaskSwitchContext+0xc0>)
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	4613      	mov	r3, r2
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	4413      	add	r3, r2
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	440b      	add	r3, r1
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d0e2      	beq.n	8010fc0 <vTaskSwitchContext+0x24>
 8010ffa:	68fa      	ldr	r2, [r7, #12]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4413      	add	r3, r2
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4a15      	ldr	r2, [pc, #84]	; (801105c <vTaskSwitchContext+0xc0>)
 8011006:	4413      	add	r3, r2
 8011008:	60bb      	str	r3, [r7, #8]
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	685a      	ldr	r2, [r3, #4]
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	605a      	str	r2, [r3, #4]
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	3308      	adds	r3, #8
 801101c:	429a      	cmp	r2, r3
 801101e:	d104      	bne.n	801102a <vTaskSwitchContext+0x8e>
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	685a      	ldr	r2, [r3, #4]
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	605a      	str	r2, [r3, #4]
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	4a0b      	ldr	r2, [pc, #44]	; (8011060 <vTaskSwitchContext+0xc4>)
 8011032:	6013      	str	r3, [r2, #0]
 8011034:	4a08      	ldr	r2, [pc, #32]	; (8011058 <vTaskSwitchContext+0xbc>)
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801103a:	4b09      	ldr	r3, [pc, #36]	; (8011060 <vTaskSwitchContext+0xc4>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3354      	adds	r3, #84	; 0x54
 8011040:	4a08      	ldr	r2, [pc, #32]	; (8011064 <vTaskSwitchContext+0xc8>)
 8011042:	6013      	str	r3, [r2, #0]
}
 8011044:	bf00      	nop
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr
 8011050:	200022c8 	.word	0x200022c8
 8011054:	200022b4 	.word	0x200022b4
 8011058:	200022a8 	.word	0x200022a8
 801105c:	20001dd0 	.word	0x20001dd0
 8011060:	20001dcc 	.word	0x20001dcc
 8011064:	200001c0 	.word	0x200001c0

08011068 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10c      	bne.n	8011092 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	b672      	cpsid	i
 801107e:	f383 8811 	msr	BASEPRI, r3
 8011082:	f3bf 8f6f 	isb	sy
 8011086:	f3bf 8f4f 	dsb	sy
 801108a:	b662      	cpsie	i
 801108c:	60fb      	str	r3, [r7, #12]
}
 801108e:	bf00      	nop
 8011090:	e7fe      	b.n	8011090 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011092:	4b07      	ldr	r3, [pc, #28]	; (80110b0 <vTaskPlaceOnEventList+0x48>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	3318      	adds	r3, #24
 8011098:	4619      	mov	r1, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7fe fae1 	bl	800f662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80110a0:	2101      	movs	r1, #1
 80110a2:	6838      	ldr	r0, [r7, #0]
 80110a4:	f000 fb90 	bl	80117c8 <prvAddCurrentTaskToDelayedList>
}
 80110a8:	bf00      	nop
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}
 80110b0:	20001dcc 	.word	0x20001dcc

080110b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d10c      	bne.n	80110e0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80110c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ca:	b672      	cpsid	i
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	b662      	cpsie	i
 80110da:	617b      	str	r3, [r7, #20]
}
 80110dc:	bf00      	nop
 80110de:	e7fe      	b.n	80110de <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110e0:	4b0a      	ldr	r3, [pc, #40]	; (801110c <vTaskPlaceOnEventListRestricted+0x58>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	3318      	adds	r3, #24
 80110e6:	4619      	mov	r1, r3
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f7fe fa96 	bl	800f61a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d002      	beq.n	80110fa <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80110f4:	f04f 33ff 	mov.w	r3, #4294967295
 80110f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80110fa:	6879      	ldr	r1, [r7, #4]
 80110fc:	68b8      	ldr	r0, [r7, #8]
 80110fe:	f000 fb63 	bl	80117c8 <prvAddCurrentTaskToDelayedList>
	}
 8011102:	bf00      	nop
 8011104:	3718      	adds	r7, #24
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	20001dcc 	.word	0x20001dcc

08011110 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10c      	bne.n	8011140 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	b672      	cpsid	i
 801112c:	f383 8811 	msr	BASEPRI, r3
 8011130:	f3bf 8f6f 	isb	sy
 8011134:	f3bf 8f4f 	dsb	sy
 8011138:	b662      	cpsie	i
 801113a:	60fb      	str	r3, [r7, #12]
}
 801113c:	bf00      	nop
 801113e:	e7fe      	b.n	801113e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	3318      	adds	r3, #24
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe fac5 	bl	800f6d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801114a:	4b1e      	ldr	r3, [pc, #120]	; (80111c4 <xTaskRemoveFromEventList+0xb4>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d11d      	bne.n	801118e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	3304      	adds	r3, #4
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fabc 	bl	800f6d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011160:	4b19      	ldr	r3, [pc, #100]	; (80111c8 <xTaskRemoveFromEventList+0xb8>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	429a      	cmp	r2, r3
 8011166:	d903      	bls.n	8011170 <xTaskRemoveFromEventList+0x60>
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116c:	4a16      	ldr	r2, [pc, #88]	; (80111c8 <xTaskRemoveFromEventList+0xb8>)
 801116e:	6013      	str	r3, [r2, #0]
 8011170:	693b      	ldr	r3, [r7, #16]
 8011172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011174:	4613      	mov	r3, r2
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	4413      	add	r3, r2
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	4a13      	ldr	r2, [pc, #76]	; (80111cc <xTaskRemoveFromEventList+0xbc>)
 801117e:	441a      	add	r2, r3
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	3304      	adds	r3, #4
 8011184:	4619      	mov	r1, r3
 8011186:	4610      	mov	r0, r2
 8011188:	f7fe fa47 	bl	800f61a <vListInsertEnd>
 801118c:	e005      	b.n	801119a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	3318      	adds	r3, #24
 8011192:	4619      	mov	r1, r3
 8011194:	480e      	ldr	r0, [pc, #56]	; (80111d0 <xTaskRemoveFromEventList+0xc0>)
 8011196:	f7fe fa40 	bl	800f61a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119e:	4b0d      	ldr	r3, [pc, #52]	; (80111d4 <xTaskRemoveFromEventList+0xc4>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d905      	bls.n	80111b4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80111a8:	2301      	movs	r3, #1
 80111aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80111ac:	4b0a      	ldr	r3, [pc, #40]	; (80111d8 <xTaskRemoveFromEventList+0xc8>)
 80111ae:	2201      	movs	r2, #1
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	e001      	b.n	80111b8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80111b4:	2300      	movs	r3, #0
 80111b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80111b8:	697b      	ldr	r3, [r7, #20]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3718      	adds	r7, #24
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
 80111c2:	bf00      	nop
 80111c4:	200022c8 	.word	0x200022c8
 80111c8:	200022a8 	.word	0x200022a8
 80111cc:	20001dd0 	.word	0x20001dd0
 80111d0:	20002260 	.word	0x20002260
 80111d4:	20001dcc 	.word	0x20001dcc
 80111d8:	200022b4 	.word	0x200022b4

080111dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111e4:	4b06      	ldr	r3, [pc, #24]	; (8011200 <vTaskInternalSetTimeOutState+0x24>)
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111ec:	4b05      	ldr	r3, [pc, #20]	; (8011204 <vTaskInternalSetTimeOutState+0x28>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	605a      	str	r2, [r3, #4]
}
 80111f4:	bf00      	nop
 80111f6:	370c      	adds	r7, #12
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	200022b8 	.word	0x200022b8
 8011204:	200022a4 	.word	0x200022a4

08011208 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b088      	sub	sp, #32
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d10c      	bne.n	8011232 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8011218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121c:	b672      	cpsid	i
 801121e:	f383 8811 	msr	BASEPRI, r3
 8011222:	f3bf 8f6f 	isb	sy
 8011226:	f3bf 8f4f 	dsb	sy
 801122a:	b662      	cpsie	i
 801122c:	613b      	str	r3, [r7, #16]
}
 801122e:	bf00      	nop
 8011230:	e7fe      	b.n	8011230 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d10c      	bne.n	8011252 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123c:	b672      	cpsid	i
 801123e:	f383 8811 	msr	BASEPRI, r3
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	b662      	cpsie	i
 801124c:	60fb      	str	r3, [r7, #12]
}
 801124e:	bf00      	nop
 8011250:	e7fe      	b.n	8011250 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011252:	f000 ff73 	bl	801213c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011256:	4b1d      	ldr	r3, [pc, #116]	; (80112cc <xTaskCheckForTimeOut+0xc4>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126e:	d102      	bne.n	8011276 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011270:	2300      	movs	r3, #0
 8011272:	61fb      	str	r3, [r7, #28]
 8011274:	e023      	b.n	80112be <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681a      	ldr	r2, [r3, #0]
 801127a:	4b15      	ldr	r3, [pc, #84]	; (80112d0 <xTaskCheckForTimeOut+0xc8>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	429a      	cmp	r2, r3
 8011280:	d007      	beq.n	8011292 <xTaskCheckForTimeOut+0x8a>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	69ba      	ldr	r2, [r7, #24]
 8011288:	429a      	cmp	r2, r3
 801128a:	d302      	bcc.n	8011292 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801128c:	2301      	movs	r3, #1
 801128e:	61fb      	str	r3, [r7, #28]
 8011290:	e015      	b.n	80112be <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	697a      	ldr	r2, [r7, #20]
 8011298:	429a      	cmp	r2, r3
 801129a:	d20b      	bcs.n	80112b4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	1ad2      	subs	r2, r2, r3
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7ff ff97 	bl	80111dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112ae:	2300      	movs	r3, #0
 80112b0:	61fb      	str	r3, [r7, #28]
 80112b2:	e004      	b.n	80112be <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	2200      	movs	r2, #0
 80112b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80112ba:	2301      	movs	r3, #1
 80112bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80112be:	f000 ff71 	bl	80121a4 <vPortExitCritical>

	return xReturn;
 80112c2:	69fb      	ldr	r3, [r7, #28]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3720      	adds	r7, #32
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}
 80112cc:	200022a4 	.word	0x200022a4
 80112d0:	200022b8 	.word	0x200022b8

080112d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80112d4:	b480      	push	{r7}
 80112d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80112d8:	4b03      	ldr	r3, [pc, #12]	; (80112e8 <vTaskMissedYield+0x14>)
 80112da:	2201      	movs	r2, #1
 80112dc:	601a      	str	r2, [r3, #0]
}
 80112de:	bf00      	nop
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr
 80112e8:	200022b4 	.word	0x200022b4

080112ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112f4:	f000 f852 	bl	801139c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112f8:	4b06      	ldr	r3, [pc, #24]	; (8011314 <prvIdleTask+0x28>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	d9f9      	bls.n	80112f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011300:	4b05      	ldr	r3, [pc, #20]	; (8011318 <prvIdleTask+0x2c>)
 8011302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011310:	e7f0      	b.n	80112f4 <prvIdleTask+0x8>
 8011312:	bf00      	nop
 8011314:	20001dd0 	.word	0x20001dd0
 8011318:	e000ed04 	.word	0xe000ed04

0801131c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011322:	2300      	movs	r3, #0
 8011324:	607b      	str	r3, [r7, #4]
 8011326:	e00c      	b.n	8011342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	4613      	mov	r3, r2
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	4413      	add	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	4a12      	ldr	r2, [pc, #72]	; (801137c <prvInitialiseTaskLists+0x60>)
 8011334:	4413      	add	r3, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f7fe f942 	bl	800f5c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	3301      	adds	r3, #1
 8011340:	607b      	str	r3, [r7, #4]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2b37      	cmp	r3, #55	; 0x37
 8011346:	d9ef      	bls.n	8011328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011348:	480d      	ldr	r0, [pc, #52]	; (8011380 <prvInitialiseTaskLists+0x64>)
 801134a:	f7fe f939 	bl	800f5c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801134e:	480d      	ldr	r0, [pc, #52]	; (8011384 <prvInitialiseTaskLists+0x68>)
 8011350:	f7fe f936 	bl	800f5c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011354:	480c      	ldr	r0, [pc, #48]	; (8011388 <prvInitialiseTaskLists+0x6c>)
 8011356:	f7fe f933 	bl	800f5c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801135a:	480c      	ldr	r0, [pc, #48]	; (801138c <prvInitialiseTaskLists+0x70>)
 801135c:	f7fe f930 	bl	800f5c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011360:	480b      	ldr	r0, [pc, #44]	; (8011390 <prvInitialiseTaskLists+0x74>)
 8011362:	f7fe f92d 	bl	800f5c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011366:	4b0b      	ldr	r3, [pc, #44]	; (8011394 <prvInitialiseTaskLists+0x78>)
 8011368:	4a05      	ldr	r2, [pc, #20]	; (8011380 <prvInitialiseTaskLists+0x64>)
 801136a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801136c:	4b0a      	ldr	r3, [pc, #40]	; (8011398 <prvInitialiseTaskLists+0x7c>)
 801136e:	4a05      	ldr	r2, [pc, #20]	; (8011384 <prvInitialiseTaskLists+0x68>)
 8011370:	601a      	str	r2, [r3, #0]
}
 8011372:	bf00      	nop
 8011374:	3708      	adds	r7, #8
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
 801137a:	bf00      	nop
 801137c:	20001dd0 	.word	0x20001dd0
 8011380:	20002230 	.word	0x20002230
 8011384:	20002244 	.word	0x20002244
 8011388:	20002260 	.word	0x20002260
 801138c:	20002274 	.word	0x20002274
 8011390:	2000228c 	.word	0x2000228c
 8011394:	20002258 	.word	0x20002258
 8011398:	2000225c 	.word	0x2000225c

0801139c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113a2:	e019      	b.n	80113d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113a4:	f000 feca 	bl	801213c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113a8:	4b10      	ldr	r3, [pc, #64]	; (80113ec <prvCheckTasksWaitingTermination+0x50>)
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	3304      	adds	r3, #4
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7fe f98d 	bl	800f6d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80113ba:	4b0d      	ldr	r3, [pc, #52]	; (80113f0 <prvCheckTasksWaitingTermination+0x54>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	3b01      	subs	r3, #1
 80113c0:	4a0b      	ldr	r2, [pc, #44]	; (80113f0 <prvCheckTasksWaitingTermination+0x54>)
 80113c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80113c4:	4b0b      	ldr	r3, [pc, #44]	; (80113f4 <prvCheckTasksWaitingTermination+0x58>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	4a0a      	ldr	r2, [pc, #40]	; (80113f4 <prvCheckTasksWaitingTermination+0x58>)
 80113cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80113ce:	f000 fee9 	bl	80121a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f810 	bl	80113f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113d8:	4b06      	ldr	r3, [pc, #24]	; (80113f4 <prvCheckTasksWaitingTermination+0x58>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d1e1      	bne.n	80113a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113e0:	bf00      	nop
 80113e2:	bf00      	nop
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	20002274 	.word	0x20002274
 80113f0:	200022a0 	.word	0x200022a0
 80113f4:	20002288 	.word	0x20002288

080113f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	3354      	adds	r3, #84	; 0x54
 8011404:	4618      	mov	r0, r3
 8011406:	f001 f9f9 	bl	80127fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011410:	2b00      	cmp	r3, #0
 8011412:	d108      	bne.n	8011426 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011418:	4618      	mov	r0, r3
 801141a:	f001 f885 	bl	8012528 <vPortFree>
				vPortFree( pxTCB );
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f001 f882 	bl	8012528 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011424:	e01a      	b.n	801145c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801142c:	2b01      	cmp	r3, #1
 801142e:	d103      	bne.n	8011438 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f001 f879 	bl	8012528 <vPortFree>
	}
 8011436:	e011      	b.n	801145c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801143e:	2b02      	cmp	r3, #2
 8011440:	d00c      	beq.n	801145c <prvDeleteTCB+0x64>
	__asm volatile
 8011442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011446:	b672      	cpsid	i
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	b662      	cpsie	i
 8011456:	60fb      	str	r3, [r7, #12]
}
 8011458:	bf00      	nop
 801145a:	e7fe      	b.n	801145a <prvDeleteTCB+0x62>
	}
 801145c:	bf00      	nop
 801145e:	3710      	adds	r7, #16
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801146a:	4b0c      	ldr	r3, [pc, #48]	; (801149c <prvResetNextTaskUnblockTime+0x38>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d104      	bne.n	801147e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011474:	4b0a      	ldr	r3, [pc, #40]	; (80114a0 <prvResetNextTaskUnblockTime+0x3c>)
 8011476:	f04f 32ff 	mov.w	r2, #4294967295
 801147a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801147c:	e008      	b.n	8011490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801147e:	4b07      	ldr	r3, [pc, #28]	; (801149c <prvResetNextTaskUnblockTime+0x38>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	685b      	ldr	r3, [r3, #4]
 801148c:	4a04      	ldr	r2, [pc, #16]	; (80114a0 <prvResetNextTaskUnblockTime+0x3c>)
 801148e:	6013      	str	r3, [r2, #0]
}
 8011490:	bf00      	nop
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr
 801149c:	20002258 	.word	0x20002258
 80114a0:	200022c0 	.word	0x200022c0

080114a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114aa:	4b0b      	ldr	r3, [pc, #44]	; (80114d8 <xTaskGetSchedulerState+0x34>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d102      	bne.n	80114b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114b2:	2301      	movs	r3, #1
 80114b4:	607b      	str	r3, [r7, #4]
 80114b6:	e008      	b.n	80114ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114b8:	4b08      	ldr	r3, [pc, #32]	; (80114dc <xTaskGetSchedulerState+0x38>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d102      	bne.n	80114c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114c0:	2302      	movs	r3, #2
 80114c2:	607b      	str	r3, [r7, #4]
 80114c4:	e001      	b.n	80114ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114c6:	2300      	movs	r3, #0
 80114c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80114ca:	687b      	ldr	r3, [r7, #4]
	}
 80114cc:	4618      	mov	r0, r3
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr
 80114d8:	200022ac 	.word	0x200022ac
 80114dc:	200022c8 	.word	0x200022c8

080114e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80114ec:	2300      	movs	r3, #0
 80114ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d051      	beq.n	801159a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fa:	4b2a      	ldr	r3, [pc, #168]	; (80115a4 <xTaskPriorityInherit+0xc4>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011500:	429a      	cmp	r2, r3
 8011502:	d241      	bcs.n	8011588 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011504:	68bb      	ldr	r3, [r7, #8]
 8011506:	699b      	ldr	r3, [r3, #24]
 8011508:	2b00      	cmp	r3, #0
 801150a:	db06      	blt.n	801151a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801150c:	4b25      	ldr	r3, [pc, #148]	; (80115a4 <xTaskPriorityInherit+0xc4>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011512:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	6959      	ldr	r1, [r3, #20]
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011522:	4613      	mov	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	4a1f      	ldr	r2, [pc, #124]	; (80115a8 <xTaskPriorityInherit+0xc8>)
 801152c:	4413      	add	r3, r2
 801152e:	4299      	cmp	r1, r3
 8011530:	d122      	bne.n	8011578 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	3304      	adds	r3, #4
 8011536:	4618      	mov	r0, r3
 8011538:	f7fe f8cc 	bl	800f6d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801153c:	4b19      	ldr	r3, [pc, #100]	; (80115a4 <xTaskPriorityInherit+0xc4>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801154a:	4b18      	ldr	r3, [pc, #96]	; (80115ac <xTaskPriorityInherit+0xcc>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	429a      	cmp	r2, r3
 8011550:	d903      	bls.n	801155a <xTaskPriorityInherit+0x7a>
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011556:	4a15      	ldr	r2, [pc, #84]	; (80115ac <xTaskPriorityInherit+0xcc>)
 8011558:	6013      	str	r3, [r2, #0]
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801155e:	4613      	mov	r3, r2
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	4413      	add	r3, r2
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	4a10      	ldr	r2, [pc, #64]	; (80115a8 <xTaskPriorityInherit+0xc8>)
 8011568:	441a      	add	r2, r3
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	3304      	adds	r3, #4
 801156e:	4619      	mov	r1, r3
 8011570:	4610      	mov	r0, r2
 8011572:	f7fe f852 	bl	800f61a <vListInsertEnd>
 8011576:	e004      	b.n	8011582 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011578:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <xTaskPriorityInherit+0xc4>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011582:	2301      	movs	r3, #1
 8011584:	60fb      	str	r3, [r7, #12]
 8011586:	e008      	b.n	801159a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801158c:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <xTaskPriorityInherit+0xc4>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011592:	429a      	cmp	r2, r3
 8011594:	d201      	bcs.n	801159a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011596:	2301      	movs	r3, #1
 8011598:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801159a:	68fb      	ldr	r3, [r7, #12]
	}
 801159c:	4618      	mov	r0, r3
 801159e:	3710      	adds	r7, #16
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	20001dcc 	.word	0x20001dcc
 80115a8:	20001dd0 	.word	0x20001dd0
 80115ac:	200022a8 	.word	0x200022a8

080115b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b086      	sub	sp, #24
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115bc:	2300      	movs	r3, #0
 80115be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d05a      	beq.n	801167c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80115c6:	4b30      	ldr	r3, [pc, #192]	; (8011688 <xTaskPriorityDisinherit+0xd8>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	693a      	ldr	r2, [r7, #16]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d00c      	beq.n	80115ea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80115d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d4:	b672      	cpsid	i
 80115d6:	f383 8811 	msr	BASEPRI, r3
 80115da:	f3bf 8f6f 	isb	sy
 80115de:	f3bf 8f4f 	dsb	sy
 80115e2:	b662      	cpsie	i
 80115e4:	60fb      	str	r3, [r7, #12]
}
 80115e6:	bf00      	nop
 80115e8:	e7fe      	b.n	80115e8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10c      	bne.n	801160c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f6:	b672      	cpsid	i
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	b662      	cpsie	i
 8011606:	60bb      	str	r3, [r7, #8]
}
 8011608:	bf00      	nop
 801160a:	e7fe      	b.n	801160a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011610:	1e5a      	subs	r2, r3, #1
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801161e:	429a      	cmp	r2, r3
 8011620:	d02c      	beq.n	801167c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011626:	2b00      	cmp	r3, #0
 8011628:	d128      	bne.n	801167c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	3304      	adds	r3, #4
 801162e:	4618      	mov	r0, r3
 8011630:	f7fe f850 	bl	800f6d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011640:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164c:	4b0f      	ldr	r3, [pc, #60]	; (801168c <xTaskPriorityDisinherit+0xdc>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	429a      	cmp	r2, r3
 8011652:	d903      	bls.n	801165c <xTaskPriorityDisinherit+0xac>
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011658:	4a0c      	ldr	r2, [pc, #48]	; (801168c <xTaskPriorityDisinherit+0xdc>)
 801165a:	6013      	str	r3, [r2, #0]
 801165c:	693b      	ldr	r3, [r7, #16]
 801165e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011660:	4613      	mov	r3, r2
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	4413      	add	r3, r2
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	4a09      	ldr	r2, [pc, #36]	; (8011690 <xTaskPriorityDisinherit+0xe0>)
 801166a:	441a      	add	r2, r3
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	3304      	adds	r3, #4
 8011670:	4619      	mov	r1, r3
 8011672:	4610      	mov	r0, r2
 8011674:	f7fd ffd1 	bl	800f61a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011678:	2301      	movs	r3, #1
 801167a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801167c:	697b      	ldr	r3, [r7, #20]
	}
 801167e:	4618      	mov	r0, r3
 8011680:	3718      	adds	r7, #24
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	20001dcc 	.word	0x20001dcc
 801168c:	200022a8 	.word	0x200022a8
 8011690:	20001dd0 	.word	0x20001dd0

08011694 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80116a2:	2301      	movs	r3, #1
 80116a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d06e      	beq.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80116ac:	69bb      	ldr	r3, [r7, #24]
 80116ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10c      	bne.n	80116ce <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80116b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b8:	b672      	cpsid	i
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	b662      	cpsie	i
 80116c8:	60fb      	str	r3, [r7, #12]
}
 80116ca:	bf00      	nop
 80116cc:	e7fe      	b.n	80116cc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d902      	bls.n	80116de <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	61fb      	str	r3, [r7, #28]
 80116dc:	e002      	b.n	80116e4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e8:	69fa      	ldr	r2, [r7, #28]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d04d      	beq.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80116ee:	69bb      	ldr	r3, [r7, #24]
 80116f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116f2:	697a      	ldr	r2, [r7, #20]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d148      	bne.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80116f8:	4b26      	ldr	r3, [pc, #152]	; (8011794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	69ba      	ldr	r2, [r7, #24]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d10c      	bne.n	801171c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8011702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011706:	b672      	cpsid	i
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	b662      	cpsie	i
 8011716:	60bb      	str	r3, [r7, #8]
}
 8011718:	bf00      	nop
 801171a:	e7fe      	b.n	801171a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011720:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	69fa      	ldr	r2, [r7, #28]
 8011726:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	699b      	ldr	r3, [r3, #24]
 801172c:	2b00      	cmp	r3, #0
 801172e:	db04      	blt.n	801173a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	6959      	ldr	r1, [r3, #20]
 801173e:	693a      	ldr	r2, [r7, #16]
 8011740:	4613      	mov	r3, r2
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4413      	add	r3, r2
 8011746:	009b      	lsls	r3, r3, #2
 8011748:	4a13      	ldr	r2, [pc, #76]	; (8011798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801174a:	4413      	add	r3, r2
 801174c:	4299      	cmp	r1, r3
 801174e:	d11c      	bne.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	3304      	adds	r3, #4
 8011754:	4618      	mov	r0, r3
 8011756:	f7fd ffbd 	bl	800f6d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801175e:	4b0f      	ldr	r3, [pc, #60]	; (801179c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	429a      	cmp	r2, r3
 8011764:	d903      	bls.n	801176e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801176a:	4a0c      	ldr	r2, [pc, #48]	; (801179c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011772:	4613      	mov	r3, r2
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	4413      	add	r3, r2
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4a07      	ldr	r2, [pc, #28]	; (8011798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801177c:	441a      	add	r2, r3
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	3304      	adds	r3, #4
 8011782:	4619      	mov	r1, r3
 8011784:	4610      	mov	r0, r2
 8011786:	f7fd ff48 	bl	800f61a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801178a:	bf00      	nop
 801178c:	3720      	adds	r7, #32
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20001dcc 	.word	0x20001dcc
 8011798:	20001dd0 	.word	0x20001dd0
 801179c:	200022a8 	.word	0x200022a8

080117a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80117a4:	4b07      	ldr	r3, [pc, #28]	; (80117c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80117ac:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117b2:	3201      	adds	r2, #1
 80117b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80117b6:	4b03      	ldr	r3, [pc, #12]	; (80117c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117b8:	681b      	ldr	r3, [r3, #0]
	}
 80117ba:	4618      	mov	r0, r3
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	20001dcc 	.word	0x20001dcc

080117c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117d2:	4b21      	ldr	r3, [pc, #132]	; (8011858 <prvAddCurrentTaskToDelayedList+0x90>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117d8:	4b20      	ldr	r3, [pc, #128]	; (801185c <prvAddCurrentTaskToDelayedList+0x94>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3304      	adds	r3, #4
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fd ff78 	bl	800f6d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117ea:	d10a      	bne.n	8011802 <prvAddCurrentTaskToDelayedList+0x3a>
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d007      	beq.n	8011802 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117f2:	4b1a      	ldr	r3, [pc, #104]	; (801185c <prvAddCurrentTaskToDelayedList+0x94>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	3304      	adds	r3, #4
 80117f8:	4619      	mov	r1, r3
 80117fa:	4819      	ldr	r0, [pc, #100]	; (8011860 <prvAddCurrentTaskToDelayedList+0x98>)
 80117fc:	f7fd ff0d 	bl	800f61a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011800:	e026      	b.n	8011850 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4413      	add	r3, r2
 8011808:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801180a:	4b14      	ldr	r3, [pc, #80]	; (801185c <prvAddCurrentTaskToDelayedList+0x94>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011812:	68ba      	ldr	r2, [r7, #8]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	429a      	cmp	r2, r3
 8011818:	d209      	bcs.n	801182e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801181a:	4b12      	ldr	r3, [pc, #72]	; (8011864 <prvAddCurrentTaskToDelayedList+0x9c>)
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	4b0f      	ldr	r3, [pc, #60]	; (801185c <prvAddCurrentTaskToDelayedList+0x94>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	3304      	adds	r3, #4
 8011824:	4619      	mov	r1, r3
 8011826:	4610      	mov	r0, r2
 8011828:	f7fd ff1b 	bl	800f662 <vListInsert>
}
 801182c:	e010      	b.n	8011850 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801182e:	4b0e      	ldr	r3, [pc, #56]	; (8011868 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	4b0a      	ldr	r3, [pc, #40]	; (801185c <prvAddCurrentTaskToDelayedList+0x94>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	3304      	adds	r3, #4
 8011838:	4619      	mov	r1, r3
 801183a:	4610      	mov	r0, r2
 801183c:	f7fd ff11 	bl	800f662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011840:	4b0a      	ldr	r3, [pc, #40]	; (801186c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68ba      	ldr	r2, [r7, #8]
 8011846:	429a      	cmp	r2, r3
 8011848:	d202      	bcs.n	8011850 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801184a:	4a08      	ldr	r2, [pc, #32]	; (801186c <prvAddCurrentTaskToDelayedList+0xa4>)
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	6013      	str	r3, [r2, #0]
}
 8011850:	bf00      	nop
 8011852:	3710      	adds	r7, #16
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	200022a4 	.word	0x200022a4
 801185c:	20001dcc 	.word	0x20001dcc
 8011860:	2000228c 	.word	0x2000228c
 8011864:	2000225c 	.word	0x2000225c
 8011868:	20002258 	.word	0x20002258
 801186c:	200022c0 	.word	0x200022c0

08011870 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b08a      	sub	sp, #40	; 0x28
 8011874:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011876:	2300      	movs	r3, #0
 8011878:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801187a:	f000 fb15 	bl	8011ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801187e:	4b1d      	ldr	r3, [pc, #116]	; (80118f4 <xTimerCreateTimerTask+0x84>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d021      	beq.n	80118ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011886:	2300      	movs	r3, #0
 8011888:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801188a:	2300      	movs	r3, #0
 801188c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801188e:	1d3a      	adds	r2, r7, #4
 8011890:	f107 0108 	add.w	r1, r7, #8
 8011894:	f107 030c 	add.w	r3, r7, #12
 8011898:	4618      	mov	r0, r3
 801189a:	f7fd fe77 	bl	800f58c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801189e:	6879      	ldr	r1, [r7, #4]
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	9202      	str	r2, [sp, #8]
 80118a6:	9301      	str	r3, [sp, #4]
 80118a8:	2302      	movs	r3, #2
 80118aa:	9300      	str	r3, [sp, #0]
 80118ac:	2300      	movs	r3, #0
 80118ae:	460a      	mov	r2, r1
 80118b0:	4911      	ldr	r1, [pc, #68]	; (80118f8 <xTimerCreateTimerTask+0x88>)
 80118b2:	4812      	ldr	r0, [pc, #72]	; (80118fc <xTimerCreateTimerTask+0x8c>)
 80118b4:	f7fe ff8e 	bl	80107d4 <xTaskCreateStatic>
 80118b8:	4603      	mov	r3, r0
 80118ba:	4a11      	ldr	r2, [pc, #68]	; (8011900 <xTimerCreateTimerTask+0x90>)
 80118bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80118be:	4b10      	ldr	r3, [pc, #64]	; (8011900 <xTimerCreateTimerTask+0x90>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d001      	beq.n	80118ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80118c6:	2301      	movs	r3, #1
 80118c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d10c      	bne.n	80118ea <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80118d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d4:	b672      	cpsid	i
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	b662      	cpsie	i
 80118e4:	613b      	str	r3, [r7, #16]
}
 80118e6:	bf00      	nop
 80118e8:	e7fe      	b.n	80118e8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80118ea:	697b      	ldr	r3, [r7, #20]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3718      	adds	r7, #24
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	200022fc 	.word	0x200022fc
 80118f8:	08012e80 	.word	0x08012e80
 80118fc:	08011a41 	.word	0x08011a41
 8011900:	20002300 	.word	0x20002300

08011904 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b08a      	sub	sp, #40	; 0x28
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
 8011910:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011912:	2300      	movs	r3, #0
 8011914:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10c      	bne.n	8011936 <xTimerGenericCommand+0x32>
	__asm volatile
 801191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011920:	b672      	cpsid	i
 8011922:	f383 8811 	msr	BASEPRI, r3
 8011926:	f3bf 8f6f 	isb	sy
 801192a:	f3bf 8f4f 	dsb	sy
 801192e:	b662      	cpsie	i
 8011930:	623b      	str	r3, [r7, #32]
}
 8011932:	bf00      	nop
 8011934:	e7fe      	b.n	8011934 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011936:	4b1a      	ldr	r3, [pc, #104]	; (80119a0 <xTimerGenericCommand+0x9c>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d02a      	beq.n	8011994 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	2b05      	cmp	r3, #5
 801194e:	dc18      	bgt.n	8011982 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011950:	f7ff fda8 	bl	80114a4 <xTaskGetSchedulerState>
 8011954:	4603      	mov	r3, r0
 8011956:	2b02      	cmp	r3, #2
 8011958:	d109      	bne.n	801196e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801195a:	4b11      	ldr	r3, [pc, #68]	; (80119a0 <xTimerGenericCommand+0x9c>)
 801195c:	6818      	ldr	r0, [r3, #0]
 801195e:	f107 0110 	add.w	r1, r7, #16
 8011962:	2300      	movs	r3, #0
 8011964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011966:	f7fe f8a3 	bl	800fab0 <xQueueGenericSend>
 801196a:	6278      	str	r0, [r7, #36]	; 0x24
 801196c:	e012      	b.n	8011994 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801196e:	4b0c      	ldr	r3, [pc, #48]	; (80119a0 <xTimerGenericCommand+0x9c>)
 8011970:	6818      	ldr	r0, [r3, #0]
 8011972:	f107 0110 	add.w	r1, r7, #16
 8011976:	2300      	movs	r3, #0
 8011978:	2200      	movs	r2, #0
 801197a:	f7fe f899 	bl	800fab0 <xQueueGenericSend>
 801197e:	6278      	str	r0, [r7, #36]	; 0x24
 8011980:	e008      	b.n	8011994 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011982:	4b07      	ldr	r3, [pc, #28]	; (80119a0 <xTimerGenericCommand+0x9c>)
 8011984:	6818      	ldr	r0, [r3, #0]
 8011986:	f107 0110 	add.w	r1, r7, #16
 801198a:	2300      	movs	r3, #0
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	f7fe f995 	bl	800fcbc <xQueueGenericSendFromISR>
 8011992:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011996:	4618      	mov	r0, r3
 8011998:	3728      	adds	r7, #40	; 0x28
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	200022fc 	.word	0x200022fc

080119a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b088      	sub	sp, #32
 80119a8:	af02      	add	r7, sp, #8
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119ae:	4b23      	ldr	r3, [pc, #140]	; (8011a3c <prvProcessExpiredTimer+0x98>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	3304      	adds	r3, #4
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fd fe89 	bl	800f6d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119c8:	f003 0304 	and.w	r3, r3, #4
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d024      	beq.n	8011a1a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	699a      	ldr	r2, [r3, #24]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	18d1      	adds	r1, r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	683a      	ldr	r2, [r7, #0]
 80119dc:	6978      	ldr	r0, [r7, #20]
 80119de:	f000 f8d3 	bl	8011b88 <prvInsertTimerInActiveList>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d021      	beq.n	8011a2c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80119e8:	2300      	movs	r3, #0
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	2300      	movs	r3, #0
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	2100      	movs	r1, #0
 80119f2:	6978      	ldr	r0, [r7, #20]
 80119f4:	f7ff ff86 	bl	8011904 <xTimerGenericCommand>
 80119f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d115      	bne.n	8011a2c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a04:	b672      	cpsid	i
 8011a06:	f383 8811 	msr	BASEPRI, r3
 8011a0a:	f3bf 8f6f 	isb	sy
 8011a0e:	f3bf 8f4f 	dsb	sy
 8011a12:	b662      	cpsie	i
 8011a14:	60fb      	str	r3, [r7, #12]
}
 8011a16:	bf00      	nop
 8011a18:	e7fe      	b.n	8011a18 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a20:	f023 0301 	bic.w	r3, r3, #1
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a2c:	697b      	ldr	r3, [r7, #20]
 8011a2e:	6a1b      	ldr	r3, [r3, #32]
 8011a30:	6978      	ldr	r0, [r7, #20]
 8011a32:	4798      	blx	r3
}
 8011a34:	bf00      	nop
 8011a36:	3718      	adds	r7, #24
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}
 8011a3c:	200022f4 	.word	0x200022f4

08011a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b084      	sub	sp, #16
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a48:	f107 0308 	add.w	r3, r7, #8
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 f857 	bl	8011b00 <prvGetNextExpireTime>
 8011a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	4619      	mov	r1, r3
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f000 f803 	bl	8011a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011a5e:	f000 f8d5 	bl	8011c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011a62:	e7f1      	b.n	8011a48 <prvTimerTask+0x8>

08011a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011a6e:	f7ff f91b 	bl	8010ca8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011a72:	f107 0308 	add.w	r3, r7, #8
 8011a76:	4618      	mov	r0, r3
 8011a78:	f000 f866 	bl	8011b48 <prvSampleTimeNow>
 8011a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d130      	bne.n	8011ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d10a      	bne.n	8011aa0 <prvProcessTimerOrBlockTask+0x3c>
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d806      	bhi.n	8011aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011a92:	f7ff f917 	bl	8010cc4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011a96:	68f9      	ldr	r1, [r7, #12]
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7ff ff83 	bl	80119a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011a9e:	e024      	b.n	8011aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d008      	beq.n	8011ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011aa6:	4b13      	ldr	r3, [pc, #76]	; (8011af4 <prvProcessTimerOrBlockTask+0x90>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d101      	bne.n	8011ab4 <prvProcessTimerOrBlockTask+0x50>
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	e000      	b.n	8011ab6 <prvProcessTimerOrBlockTask+0x52>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ab8:	4b0f      	ldr	r3, [pc, #60]	; (8011af8 <prvProcessTimerOrBlockTask+0x94>)
 8011aba:	6818      	ldr	r0, [r3, #0]
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	f7fe fe51 	bl	801076c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011aca:	f7ff f8fb 	bl	8010cc4 <xTaskResumeAll>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d10a      	bne.n	8011aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011ad4:	4b09      	ldr	r3, [pc, #36]	; (8011afc <prvProcessTimerOrBlockTask+0x98>)
 8011ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ada:	601a      	str	r2, [r3, #0]
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	f3bf 8f6f 	isb	sy
}
 8011ae4:	e001      	b.n	8011aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011ae6:	f7ff f8ed 	bl	8010cc4 <xTaskResumeAll>
}
 8011aea:	bf00      	nop
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	200022f8 	.word	0x200022f8
 8011af8:	200022fc 	.word	0x200022fc
 8011afc:	e000ed04 	.word	0xe000ed04

08011b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011b08:	4b0e      	ldr	r3, [pc, #56]	; (8011b44 <prvGetNextExpireTime+0x44>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d101      	bne.n	8011b16 <prvGetNextExpireTime+0x16>
 8011b12:	2201      	movs	r2, #1
 8011b14:	e000      	b.n	8011b18 <prvGetNextExpireTime+0x18>
 8011b16:	2200      	movs	r2, #0
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d105      	bne.n	8011b30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b24:	4b07      	ldr	r3, [pc, #28]	; (8011b44 <prvGetNextExpireTime+0x44>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	60fb      	str	r3, [r7, #12]
 8011b2e:	e001      	b.n	8011b34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011b30:	2300      	movs	r3, #0
 8011b32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011b34:	68fb      	ldr	r3, [r7, #12]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3714      	adds	r7, #20
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	200022f4 	.word	0x200022f4

08011b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011b50:	f7ff f958 	bl	8010e04 <xTaskGetTickCount>
 8011b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011b56:	4b0b      	ldr	r3, [pc, #44]	; (8011b84 <prvSampleTimeNow+0x3c>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d205      	bcs.n	8011b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011b60:	f000 f93c 	bl	8011ddc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2201      	movs	r2, #1
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	e002      	b.n	8011b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011b72:	4a04      	ldr	r2, [pc, #16]	; (8011b84 <prvSampleTimeNow+0x3c>)
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011b78:	68fb      	ldr	r3, [r7, #12]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20002304 	.word	0x20002304

08011b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b086      	sub	sp, #24
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	607a      	str	r2, [r7, #4]
 8011b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011b96:	2300      	movs	r3, #0
 8011b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	68ba      	ldr	r2, [r7, #8]
 8011b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	68fa      	ldr	r2, [r7, #12]
 8011ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011ba6:	68ba      	ldr	r2, [r7, #8]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d812      	bhi.n	8011bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	1ad2      	subs	r2, r2, r3
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d302      	bcc.n	8011bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	617b      	str	r3, [r7, #20]
 8011bc0:	e01b      	b.n	8011bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011bc2:	4b10      	ldr	r3, [pc, #64]	; (8011c04 <prvInsertTimerInActiveList+0x7c>)
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	3304      	adds	r3, #4
 8011bca:	4619      	mov	r1, r3
 8011bcc:	4610      	mov	r0, r2
 8011bce:	f7fd fd48 	bl	800f662 <vListInsert>
 8011bd2:	e012      	b.n	8011bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d206      	bcs.n	8011bea <prvInsertTimerInActiveList+0x62>
 8011bdc:	68ba      	ldr	r2, [r7, #8]
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d302      	bcc.n	8011bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011be4:	2301      	movs	r3, #1
 8011be6:	617b      	str	r3, [r7, #20]
 8011be8:	e007      	b.n	8011bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011bea:	4b07      	ldr	r3, [pc, #28]	; (8011c08 <prvInsertTimerInActiveList+0x80>)
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	3304      	adds	r3, #4
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	4610      	mov	r0, r2
 8011bf6:	f7fd fd34 	bl	800f662 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011bfa:	697b      	ldr	r3, [r7, #20]
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3718      	adds	r7, #24
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	200022f8 	.word	0x200022f8
 8011c08:	200022f4 	.word	0x200022f4

08011c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b08e      	sub	sp, #56	; 0x38
 8011c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011c12:	e0d0      	b.n	8011db6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	da1a      	bge.n	8011c50 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011c1a:	1d3b      	adds	r3, r7, #4
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d10c      	bne.n	8011c40 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8011c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2a:	b672      	cpsid	i
 8011c2c:	f383 8811 	msr	BASEPRI, r3
 8011c30:	f3bf 8f6f 	isb	sy
 8011c34:	f3bf 8f4f 	dsb	sy
 8011c38:	b662      	cpsie	i
 8011c3a:	61fb      	str	r3, [r7, #28]
}
 8011c3c:	bf00      	nop
 8011c3e:	e7fe      	b.n	8011c3e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c46:	6850      	ldr	r0, [r2, #4]
 8011c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c4a:	6892      	ldr	r2, [r2, #8]
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f2c0 80ae 	blt.w	8011db4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5e:	695b      	ldr	r3, [r3, #20]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d004      	beq.n	8011c6e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c66:	3304      	adds	r3, #4
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fd fd33 	bl	800f6d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c6e:	463b      	mov	r3, r7
 8011c70:	4618      	mov	r0, r3
 8011c72:	f7ff ff69 	bl	8011b48 <prvSampleTimeNow>
 8011c76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b09      	cmp	r3, #9
 8011c7c:	f200 809b 	bhi.w	8011db6 <prvProcessReceivedCommands+0x1aa>
 8011c80:	a201      	add	r2, pc, #4	; (adr r2, 8011c88 <prvProcessReceivedCommands+0x7c>)
 8011c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c86:	bf00      	nop
 8011c88:	08011cb1 	.word	0x08011cb1
 8011c8c:	08011cb1 	.word	0x08011cb1
 8011c90:	08011cb1 	.word	0x08011cb1
 8011c94:	08011d29 	.word	0x08011d29
 8011c98:	08011d3d 	.word	0x08011d3d
 8011c9c:	08011d8b 	.word	0x08011d8b
 8011ca0:	08011cb1 	.word	0x08011cb1
 8011ca4:	08011cb1 	.word	0x08011cb1
 8011ca8:	08011d29 	.word	0x08011d29
 8011cac:	08011d3d 	.word	0x08011d3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cb6:	f043 0301 	orr.w	r3, r3, #1
 8011cba:	b2da      	uxtb	r2, r3
 8011cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011cc2:	68ba      	ldr	r2, [r7, #8]
 8011cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	18d1      	adds	r1, r2, r3
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011cd0:	f7ff ff5a 	bl	8011b88 <prvInsertTimerInActiveList>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d06d      	beq.n	8011db6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cdc:	6a1b      	ldr	r3, [r3, #32]
 8011cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ce0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ce8:	f003 0304 	and.w	r3, r3, #4
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d062      	beq.n	8011db6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf4:	699b      	ldr	r3, [r3, #24]
 8011cf6:	441a      	add	r2, r3
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	9300      	str	r3, [sp, #0]
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	2100      	movs	r1, #0
 8011d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d02:	f7ff fdff 	bl	8011904 <xTimerGenericCommand>
 8011d06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011d08:	6a3b      	ldr	r3, [r7, #32]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d153      	bne.n	8011db6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8011d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d12:	b672      	cpsid	i
 8011d14:	f383 8811 	msr	BASEPRI, r3
 8011d18:	f3bf 8f6f 	isb	sy
 8011d1c:	f3bf 8f4f 	dsb	sy
 8011d20:	b662      	cpsie	i
 8011d22:	61bb      	str	r3, [r7, #24]
}
 8011d24:	bf00      	nop
 8011d26:	e7fe      	b.n	8011d26 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d2e:	f023 0301 	bic.w	r3, r3, #1
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011d3a:	e03c      	b.n	8011db6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d42:	f043 0301 	orr.w	r3, r3, #1
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011d4e:	68ba      	ldr	r2, [r7, #8]
 8011d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d56:	699b      	ldr	r3, [r3, #24]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d10c      	bne.n	8011d76 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8011d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d60:	b672      	cpsid	i
 8011d62:	f383 8811 	msr	BASEPRI, r3
 8011d66:	f3bf 8f6f 	isb	sy
 8011d6a:	f3bf 8f4f 	dsb	sy
 8011d6e:	b662      	cpsie	i
 8011d70:	617b      	str	r3, [r7, #20]
}
 8011d72:	bf00      	nop
 8011d74:	e7fe      	b.n	8011d74 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d78:	699a      	ldr	r2, [r3, #24]
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7c:	18d1      	adds	r1, r2, r3
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d84:	f7ff ff00 	bl	8011b88 <prvInsertTimerInActiveList>
					break;
 8011d88:	e015      	b.n	8011db6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d90:	f003 0302 	and.w	r3, r3, #2
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d103      	bne.n	8011da0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8011d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d9a:	f000 fbc5 	bl	8012528 <vPortFree>
 8011d9e:	e00a      	b.n	8011db6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011da6:	f023 0301 	bic.w	r3, r3, #1
 8011daa:	b2da      	uxtb	r2, r3
 8011dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011db2:	e000      	b.n	8011db6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011db4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011db6:	4b08      	ldr	r3, [pc, #32]	; (8011dd8 <prvProcessReceivedCommands+0x1cc>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	1d39      	adds	r1, r7, #4
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fe f8b2 	bl	800ff28 <xQueueReceive>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f47f af24 	bne.w	8011c14 <prvProcessReceivedCommands+0x8>
	}
}
 8011dcc:	bf00      	nop
 8011dce:	bf00      	nop
 8011dd0:	3730      	adds	r7, #48	; 0x30
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	bf00      	nop
 8011dd8:	200022fc 	.word	0x200022fc

08011ddc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b088      	sub	sp, #32
 8011de0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011de2:	e04a      	b.n	8011e7a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011de4:	4b2e      	ldr	r3, [pc, #184]	; (8011ea0 <prvSwitchTimerLists+0xc4>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dee:	4b2c      	ldr	r3, [pc, #176]	; (8011ea0 <prvSwitchTimerLists+0xc4>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	68db      	ldr	r3, [r3, #12]
 8011df6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	3304      	adds	r3, #4
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f7fd fc69 	bl	800f6d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	6a1b      	ldr	r3, [r3, #32]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e10:	f003 0304 	and.w	r3, r3, #4
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d030      	beq.n	8011e7a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	699b      	ldr	r3, [r3, #24]
 8011e1c:	693a      	ldr	r2, [r7, #16]
 8011e1e:	4413      	add	r3, r2
 8011e20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d90e      	bls.n	8011e48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	68fa      	ldr	r2, [r7, #12]
 8011e34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e36:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <prvSwitchTimerLists+0xc4>)
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	4619      	mov	r1, r3
 8011e40:	4610      	mov	r0, r2
 8011e42:	f7fd fc0e 	bl	800f662 <vListInsert>
 8011e46:	e018      	b.n	8011e7a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e48:	2300      	movs	r3, #0
 8011e4a:	9300      	str	r3, [sp, #0]
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	693a      	ldr	r2, [r7, #16]
 8011e50:	2100      	movs	r1, #0
 8011e52:	68f8      	ldr	r0, [r7, #12]
 8011e54:	f7ff fd56 	bl	8011904 <xTimerGenericCommand>
 8011e58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d10c      	bne.n	8011e7a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8011e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e64:	b672      	cpsid	i
 8011e66:	f383 8811 	msr	BASEPRI, r3
 8011e6a:	f3bf 8f6f 	isb	sy
 8011e6e:	f3bf 8f4f 	dsb	sy
 8011e72:	b662      	cpsie	i
 8011e74:	603b      	str	r3, [r7, #0]
}
 8011e76:	bf00      	nop
 8011e78:	e7fe      	b.n	8011e78 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011e7a:	4b09      	ldr	r3, [pc, #36]	; (8011ea0 <prvSwitchTimerLists+0xc4>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d1af      	bne.n	8011de4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011e84:	4b06      	ldr	r3, [pc, #24]	; (8011ea0 <prvSwitchTimerLists+0xc4>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011e8a:	4b06      	ldr	r3, [pc, #24]	; (8011ea4 <prvSwitchTimerLists+0xc8>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	4a04      	ldr	r2, [pc, #16]	; (8011ea0 <prvSwitchTimerLists+0xc4>)
 8011e90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011e92:	4a04      	ldr	r2, [pc, #16]	; (8011ea4 <prvSwitchTimerLists+0xc8>)
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	6013      	str	r3, [r2, #0]
}
 8011e98:	bf00      	nop
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	200022f4 	.word	0x200022f4
 8011ea4:	200022f8 	.word	0x200022f8

08011ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011eae:	f000 f945 	bl	801213c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011eb2:	4b15      	ldr	r3, [pc, #84]	; (8011f08 <prvCheckForValidListAndQueue+0x60>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d120      	bne.n	8011efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011eba:	4814      	ldr	r0, [pc, #80]	; (8011f0c <prvCheckForValidListAndQueue+0x64>)
 8011ebc:	f7fd fb80 	bl	800f5c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011ec0:	4813      	ldr	r0, [pc, #76]	; (8011f10 <prvCheckForValidListAndQueue+0x68>)
 8011ec2:	f7fd fb7d 	bl	800f5c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011ec6:	4b13      	ldr	r3, [pc, #76]	; (8011f14 <prvCheckForValidListAndQueue+0x6c>)
 8011ec8:	4a10      	ldr	r2, [pc, #64]	; (8011f0c <prvCheckForValidListAndQueue+0x64>)
 8011eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011ecc:	4b12      	ldr	r3, [pc, #72]	; (8011f18 <prvCheckForValidListAndQueue+0x70>)
 8011ece:	4a10      	ldr	r2, [pc, #64]	; (8011f10 <prvCheckForValidListAndQueue+0x68>)
 8011ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	9300      	str	r3, [sp, #0]
 8011ed6:	4b11      	ldr	r3, [pc, #68]	; (8011f1c <prvCheckForValidListAndQueue+0x74>)
 8011ed8:	4a11      	ldr	r2, [pc, #68]	; (8011f20 <prvCheckForValidListAndQueue+0x78>)
 8011eda:	2110      	movs	r1, #16
 8011edc:	200a      	movs	r0, #10
 8011ede:	f7fd fc8d 	bl	800f7fc <xQueueGenericCreateStatic>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	4a08      	ldr	r2, [pc, #32]	; (8011f08 <prvCheckForValidListAndQueue+0x60>)
 8011ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011ee8:	4b07      	ldr	r3, [pc, #28]	; (8011f08 <prvCheckForValidListAndQueue+0x60>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d005      	beq.n	8011efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011ef0:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <prvCheckForValidListAndQueue+0x60>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	490b      	ldr	r1, [pc, #44]	; (8011f24 <prvCheckForValidListAndQueue+0x7c>)
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fe fbe4 	bl	80106c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011efc:	f000 f952 	bl	80121a4 <vPortExitCritical>
}
 8011f00:	bf00      	nop
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	200022fc 	.word	0x200022fc
 8011f0c:	200022cc 	.word	0x200022cc
 8011f10:	200022e0 	.word	0x200022e0
 8011f14:	200022f4 	.word	0x200022f4
 8011f18:	200022f8 	.word	0x200022f8
 8011f1c:	200023a8 	.word	0x200023a8
 8011f20:	20002308 	.word	0x20002308
 8011f24:	08012e88 	.word	0x08012e88

08011f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	3b04      	subs	r3, #4
 8011f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	3b04      	subs	r3, #4
 8011f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	f023 0201 	bic.w	r2, r3, #1
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	3b04      	subs	r3, #4
 8011f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f58:	4a0c      	ldr	r2, [pc, #48]	; (8011f8c <pxPortInitialiseStack+0x64>)
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	3b14      	subs	r3, #20
 8011f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	3b04      	subs	r3, #4
 8011f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f06f 0202 	mvn.w	r2, #2
 8011f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	3b20      	subs	r3, #32
 8011f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3714      	adds	r7, #20
 8011f84:	46bd      	mov	sp, r7
 8011f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8a:	4770      	bx	lr
 8011f8c:	08011f91 	.word	0x08011f91

08011f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f90:	b480      	push	{r7}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f96:	2300      	movs	r3, #0
 8011f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f9a:	4b14      	ldr	r3, [pc, #80]	; (8011fec <prvTaskExitError+0x5c>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa2:	d00c      	beq.n	8011fbe <prvTaskExitError+0x2e>
	__asm volatile
 8011fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa8:	b672      	cpsid	i
 8011faa:	f383 8811 	msr	BASEPRI, r3
 8011fae:	f3bf 8f6f 	isb	sy
 8011fb2:	f3bf 8f4f 	dsb	sy
 8011fb6:	b662      	cpsie	i
 8011fb8:	60fb      	str	r3, [r7, #12]
}
 8011fba:	bf00      	nop
 8011fbc:	e7fe      	b.n	8011fbc <prvTaskExitError+0x2c>
	__asm volatile
 8011fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc2:	b672      	cpsid	i
 8011fc4:	f383 8811 	msr	BASEPRI, r3
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	b662      	cpsie	i
 8011fd2:	60bb      	str	r3, [r7, #8]
}
 8011fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011fd6:	bf00      	nop
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d0fc      	beq.n	8011fd8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fde:	bf00      	nop
 8011fe0:	bf00      	nop
 8011fe2:	3714      	adds	r7, #20
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fea:	4770      	bx	lr
 8011fec:	200001bc 	.word	0x200001bc

08011ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011ff0:	4b07      	ldr	r3, [pc, #28]	; (8012010 <pxCurrentTCBConst2>)
 8011ff2:	6819      	ldr	r1, [r3, #0]
 8011ff4:	6808      	ldr	r0, [r1, #0]
 8011ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ffa:	f380 8809 	msr	PSP, r0
 8011ffe:	f3bf 8f6f 	isb	sy
 8012002:	f04f 0000 	mov.w	r0, #0
 8012006:	f380 8811 	msr	BASEPRI, r0
 801200a:	4770      	bx	lr
 801200c:	f3af 8000 	nop.w

08012010 <pxCurrentTCBConst2>:
 8012010:	20001dcc 	.word	0x20001dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012014:	bf00      	nop
 8012016:	bf00      	nop

08012018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012018:	4808      	ldr	r0, [pc, #32]	; (801203c <prvPortStartFirstTask+0x24>)
 801201a:	6800      	ldr	r0, [r0, #0]
 801201c:	6800      	ldr	r0, [r0, #0]
 801201e:	f380 8808 	msr	MSP, r0
 8012022:	f04f 0000 	mov.w	r0, #0
 8012026:	f380 8814 	msr	CONTROL, r0
 801202a:	b662      	cpsie	i
 801202c:	b661      	cpsie	f
 801202e:	f3bf 8f4f 	dsb	sy
 8012032:	f3bf 8f6f 	isb	sy
 8012036:	df00      	svc	0
 8012038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801203a:	bf00      	nop
 801203c:	e000ed08 	.word	0xe000ed08

08012040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012046:	4b37      	ldr	r3, [pc, #220]	; (8012124 <xPortStartScheduler+0xe4>)
 8012048:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	22ff      	movs	r2, #255	; 0xff
 8012056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	b2db      	uxtb	r3, r3
 801205e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012060:	78fb      	ldrb	r3, [r7, #3]
 8012062:	b2db      	uxtb	r3, r3
 8012064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012068:	b2da      	uxtb	r2, r3
 801206a:	4b2f      	ldr	r3, [pc, #188]	; (8012128 <xPortStartScheduler+0xe8>)
 801206c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801206e:	4b2f      	ldr	r3, [pc, #188]	; (801212c <xPortStartScheduler+0xec>)
 8012070:	2207      	movs	r2, #7
 8012072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012074:	e009      	b.n	801208a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012076:	4b2d      	ldr	r3, [pc, #180]	; (801212c <xPortStartScheduler+0xec>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	3b01      	subs	r3, #1
 801207c:	4a2b      	ldr	r2, [pc, #172]	; (801212c <xPortStartScheduler+0xec>)
 801207e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012080:	78fb      	ldrb	r3, [r7, #3]
 8012082:	b2db      	uxtb	r3, r3
 8012084:	005b      	lsls	r3, r3, #1
 8012086:	b2db      	uxtb	r3, r3
 8012088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801208a:	78fb      	ldrb	r3, [r7, #3]
 801208c:	b2db      	uxtb	r3, r3
 801208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012092:	2b80      	cmp	r3, #128	; 0x80
 8012094:	d0ef      	beq.n	8012076 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012096:	4b25      	ldr	r3, [pc, #148]	; (801212c <xPortStartScheduler+0xec>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f1c3 0307 	rsb	r3, r3, #7
 801209e:	2b04      	cmp	r3, #4
 80120a0:	d00c      	beq.n	80120bc <xPortStartScheduler+0x7c>
	__asm volatile
 80120a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a6:	b672      	cpsid	i
 80120a8:	f383 8811 	msr	BASEPRI, r3
 80120ac:	f3bf 8f6f 	isb	sy
 80120b0:	f3bf 8f4f 	dsb	sy
 80120b4:	b662      	cpsie	i
 80120b6:	60bb      	str	r3, [r7, #8]
}
 80120b8:	bf00      	nop
 80120ba:	e7fe      	b.n	80120ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120bc:	4b1b      	ldr	r3, [pc, #108]	; (801212c <xPortStartScheduler+0xec>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	021b      	lsls	r3, r3, #8
 80120c2:	4a1a      	ldr	r2, [pc, #104]	; (801212c <xPortStartScheduler+0xec>)
 80120c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120c6:	4b19      	ldr	r3, [pc, #100]	; (801212c <xPortStartScheduler+0xec>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120ce:	4a17      	ldr	r2, [pc, #92]	; (801212c <xPortStartScheduler+0xec>)
 80120d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80120da:	4b15      	ldr	r3, [pc, #84]	; (8012130 <xPortStartScheduler+0xf0>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4a14      	ldr	r2, [pc, #80]	; (8012130 <xPortStartScheduler+0xf0>)
 80120e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80120e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80120e6:	4b12      	ldr	r3, [pc, #72]	; (8012130 <xPortStartScheduler+0xf0>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	4a11      	ldr	r2, [pc, #68]	; (8012130 <xPortStartScheduler+0xf0>)
 80120ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80120f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80120f2:	f000 f8dd 	bl	80122b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80120f6:	4b0f      	ldr	r3, [pc, #60]	; (8012134 <xPortStartScheduler+0xf4>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80120fc:	f000 f8fc 	bl	80122f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012100:	4b0d      	ldr	r3, [pc, #52]	; (8012138 <xPortStartScheduler+0xf8>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4a0c      	ldr	r2, [pc, #48]	; (8012138 <xPortStartScheduler+0xf8>)
 8012106:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801210a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801210c:	f7ff ff84 	bl	8012018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012110:	f7fe ff44 	bl	8010f9c <vTaskSwitchContext>
	prvTaskExitError();
 8012114:	f7ff ff3c 	bl	8011f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	e000e400 	.word	0xe000e400
 8012128:	200023f8 	.word	0x200023f8
 801212c:	200023fc 	.word	0x200023fc
 8012130:	e000ed20 	.word	0xe000ed20
 8012134:	200001bc 	.word	0x200001bc
 8012138:	e000ef34 	.word	0xe000ef34

0801213c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
	__asm volatile
 8012142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012146:	b672      	cpsid	i
 8012148:	f383 8811 	msr	BASEPRI, r3
 801214c:	f3bf 8f6f 	isb	sy
 8012150:	f3bf 8f4f 	dsb	sy
 8012154:	b662      	cpsie	i
 8012156:	607b      	str	r3, [r7, #4]
}
 8012158:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801215a:	4b10      	ldr	r3, [pc, #64]	; (801219c <vPortEnterCritical+0x60>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	3301      	adds	r3, #1
 8012160:	4a0e      	ldr	r2, [pc, #56]	; (801219c <vPortEnterCritical+0x60>)
 8012162:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012164:	4b0d      	ldr	r3, [pc, #52]	; (801219c <vPortEnterCritical+0x60>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d111      	bne.n	8012190 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801216c:	4b0c      	ldr	r3, [pc, #48]	; (80121a0 <vPortEnterCritical+0x64>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	b2db      	uxtb	r3, r3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d00c      	beq.n	8012190 <vPortEnterCritical+0x54>
	__asm volatile
 8012176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217a:	b672      	cpsid	i
 801217c:	f383 8811 	msr	BASEPRI, r3
 8012180:	f3bf 8f6f 	isb	sy
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	b662      	cpsie	i
 801218a:	603b      	str	r3, [r7, #0]
}
 801218c:	bf00      	nop
 801218e:	e7fe      	b.n	801218e <vPortEnterCritical+0x52>
	}
}
 8012190:	bf00      	nop
 8012192:	370c      	adds	r7, #12
 8012194:	46bd      	mov	sp, r7
 8012196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219a:	4770      	bx	lr
 801219c:	200001bc 	.word	0x200001bc
 80121a0:	e000ed04 	.word	0xe000ed04

080121a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121aa:	4b13      	ldr	r3, [pc, #76]	; (80121f8 <vPortExitCritical+0x54>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d10c      	bne.n	80121cc <vPortExitCritical+0x28>
	__asm volatile
 80121b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b6:	b672      	cpsid	i
 80121b8:	f383 8811 	msr	BASEPRI, r3
 80121bc:	f3bf 8f6f 	isb	sy
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	b662      	cpsie	i
 80121c6:	607b      	str	r3, [r7, #4]
}
 80121c8:	bf00      	nop
 80121ca:	e7fe      	b.n	80121ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80121cc:	4b0a      	ldr	r3, [pc, #40]	; (80121f8 <vPortExitCritical+0x54>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	3b01      	subs	r3, #1
 80121d2:	4a09      	ldr	r2, [pc, #36]	; (80121f8 <vPortExitCritical+0x54>)
 80121d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121d6:	4b08      	ldr	r3, [pc, #32]	; (80121f8 <vPortExitCritical+0x54>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d105      	bne.n	80121ea <vPortExitCritical+0x46>
 80121de:	2300      	movs	r3, #0
 80121e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	f383 8811 	msr	BASEPRI, r3
}
 80121e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80121ea:	bf00      	nop
 80121ec:	370c      	adds	r7, #12
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop
 80121f8:	200001bc 	.word	0x200001bc
 80121fc:	00000000 	.word	0x00000000

08012200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012200:	f3ef 8009 	mrs	r0, PSP
 8012204:	f3bf 8f6f 	isb	sy
 8012208:	4b15      	ldr	r3, [pc, #84]	; (8012260 <pxCurrentTCBConst>)
 801220a:	681a      	ldr	r2, [r3, #0]
 801220c:	f01e 0f10 	tst.w	lr, #16
 8012210:	bf08      	it	eq
 8012212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221a:	6010      	str	r0, [r2, #0]
 801221c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012224:	b672      	cpsid	i
 8012226:	f380 8811 	msr	BASEPRI, r0
 801222a:	f3bf 8f4f 	dsb	sy
 801222e:	f3bf 8f6f 	isb	sy
 8012232:	b662      	cpsie	i
 8012234:	f7fe feb2 	bl	8010f9c <vTaskSwitchContext>
 8012238:	f04f 0000 	mov.w	r0, #0
 801223c:	f380 8811 	msr	BASEPRI, r0
 8012240:	bc09      	pop	{r0, r3}
 8012242:	6819      	ldr	r1, [r3, #0]
 8012244:	6808      	ldr	r0, [r1, #0]
 8012246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224a:	f01e 0f10 	tst.w	lr, #16
 801224e:	bf08      	it	eq
 8012250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012254:	f380 8809 	msr	PSP, r0
 8012258:	f3bf 8f6f 	isb	sy
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop

08012260 <pxCurrentTCBConst>:
 8012260:	20001dcc 	.word	0x20001dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012264:	bf00      	nop
 8012266:	bf00      	nop

08012268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
	__asm volatile
 801226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012272:	b672      	cpsid	i
 8012274:	f383 8811 	msr	BASEPRI, r3
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	b662      	cpsie	i
 8012282:	607b      	str	r3, [r7, #4]
}
 8012284:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012286:	f7fe fdcd 	bl	8010e24 <xTaskIncrementTick>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d003      	beq.n	8012298 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012290:	4b06      	ldr	r3, [pc, #24]	; (80122ac <SysTick_Handler+0x44>)
 8012292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012296:	601a      	str	r2, [r3, #0]
 8012298:	2300      	movs	r3, #0
 801229a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	f383 8811 	msr	BASEPRI, r3
}
 80122a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80122a4:	bf00      	nop
 80122a6:	3708      	adds	r7, #8
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	e000ed04 	.word	0xe000ed04

080122b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122b0:	b480      	push	{r7}
 80122b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122b4:	4b0b      	ldr	r3, [pc, #44]	; (80122e4 <vPortSetupTimerInterrupt+0x34>)
 80122b6:	2200      	movs	r2, #0
 80122b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122ba:	4b0b      	ldr	r3, [pc, #44]	; (80122e8 <vPortSetupTimerInterrupt+0x38>)
 80122bc:	2200      	movs	r2, #0
 80122be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122c0:	4b0a      	ldr	r3, [pc, #40]	; (80122ec <vPortSetupTimerInterrupt+0x3c>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4a0a      	ldr	r2, [pc, #40]	; (80122f0 <vPortSetupTimerInterrupt+0x40>)
 80122c6:	fba2 2303 	umull	r2, r3, r2, r3
 80122ca:	099b      	lsrs	r3, r3, #6
 80122cc:	4a09      	ldr	r2, [pc, #36]	; (80122f4 <vPortSetupTimerInterrupt+0x44>)
 80122ce:	3b01      	subs	r3, #1
 80122d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122d2:	4b04      	ldr	r3, [pc, #16]	; (80122e4 <vPortSetupTimerInterrupt+0x34>)
 80122d4:	2207      	movs	r2, #7
 80122d6:	601a      	str	r2, [r3, #0]
}
 80122d8:	bf00      	nop
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr
 80122e2:	bf00      	nop
 80122e4:	e000e010 	.word	0xe000e010
 80122e8:	e000e018 	.word	0xe000e018
 80122ec:	20000058 	.word	0x20000058
 80122f0:	10624dd3 	.word	0x10624dd3
 80122f4:	e000e014 	.word	0xe000e014

080122f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80122f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012308 <vPortEnableVFP+0x10>
 80122fc:	6801      	ldr	r1, [r0, #0]
 80122fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012302:	6001      	str	r1, [r0, #0]
 8012304:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012306:	bf00      	nop
 8012308:	e000ed88 	.word	0xe000ed88

0801230c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801230c:	b480      	push	{r7}
 801230e:	b085      	sub	sp, #20
 8012310:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012312:	f3ef 8305 	mrs	r3, IPSR
 8012316:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2b0f      	cmp	r3, #15
 801231c:	d916      	bls.n	801234c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801231e:	4a19      	ldr	r2, [pc, #100]	; (8012384 <vPortValidateInterruptPriority+0x78>)
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	4413      	add	r3, r2
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012328:	4b17      	ldr	r3, [pc, #92]	; (8012388 <vPortValidateInterruptPriority+0x7c>)
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	7afa      	ldrb	r2, [r7, #11]
 801232e:	429a      	cmp	r2, r3
 8012330:	d20c      	bcs.n	801234c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012336:	b672      	cpsid	i
 8012338:	f383 8811 	msr	BASEPRI, r3
 801233c:	f3bf 8f6f 	isb	sy
 8012340:	f3bf 8f4f 	dsb	sy
 8012344:	b662      	cpsie	i
 8012346:	607b      	str	r3, [r7, #4]
}
 8012348:	bf00      	nop
 801234a:	e7fe      	b.n	801234a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801234c:	4b0f      	ldr	r3, [pc, #60]	; (801238c <vPortValidateInterruptPriority+0x80>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012354:	4b0e      	ldr	r3, [pc, #56]	; (8012390 <vPortValidateInterruptPriority+0x84>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	429a      	cmp	r2, r3
 801235a:	d90c      	bls.n	8012376 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012360:	b672      	cpsid	i
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	b662      	cpsie	i
 8012370:	603b      	str	r3, [r7, #0]
}
 8012372:	bf00      	nop
 8012374:	e7fe      	b.n	8012374 <vPortValidateInterruptPriority+0x68>
	}
 8012376:	bf00      	nop
 8012378:	3714      	adds	r7, #20
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr
 8012382:	bf00      	nop
 8012384:	e000e3f0 	.word	0xe000e3f0
 8012388:	200023f8 	.word	0x200023f8
 801238c:	e000ed0c 	.word	0xe000ed0c
 8012390:	200023fc 	.word	0x200023fc

08012394 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b08a      	sub	sp, #40	; 0x28
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801239c:	2300      	movs	r3, #0
 801239e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123a0:	f7fe fc82 	bl	8010ca8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123a4:	4b5b      	ldr	r3, [pc, #364]	; (8012514 <pvPortMalloc+0x180>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d101      	bne.n	80123b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123ac:	f000 f91a 	bl	80125e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123b0:	4b59      	ldr	r3, [pc, #356]	; (8012518 <pvPortMalloc+0x184>)
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4013      	ands	r3, r2
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f040 8092 	bne.w	80124e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d01f      	beq.n	8012404 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80123c4:	2208      	movs	r2, #8
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4413      	add	r3, r2
 80123ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f003 0307 	and.w	r3, r3, #7
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d016      	beq.n	8012404 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f023 0307 	bic.w	r3, r3, #7
 80123dc:	3308      	adds	r3, #8
 80123de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f003 0307 	and.w	r3, r3, #7
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00c      	beq.n	8012404 <pvPortMalloc+0x70>
	__asm volatile
 80123ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123ee:	b672      	cpsid	i
 80123f0:	f383 8811 	msr	BASEPRI, r3
 80123f4:	f3bf 8f6f 	isb	sy
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	b662      	cpsie	i
 80123fe:	617b      	str	r3, [r7, #20]
}
 8012400:	bf00      	nop
 8012402:	e7fe      	b.n	8012402 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d06b      	beq.n	80124e2 <pvPortMalloc+0x14e>
 801240a:	4b44      	ldr	r3, [pc, #272]	; (801251c <pvPortMalloc+0x188>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	429a      	cmp	r2, r3
 8012412:	d866      	bhi.n	80124e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012414:	4b42      	ldr	r3, [pc, #264]	; (8012520 <pvPortMalloc+0x18c>)
 8012416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012418:	4b41      	ldr	r3, [pc, #260]	; (8012520 <pvPortMalloc+0x18c>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801241e:	e004      	b.n	801242a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	429a      	cmp	r2, r3
 8012432:	d903      	bls.n	801243c <pvPortMalloc+0xa8>
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d1f1      	bne.n	8012420 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801243c:	4b35      	ldr	r3, [pc, #212]	; (8012514 <pvPortMalloc+0x180>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012442:	429a      	cmp	r2, r3
 8012444:	d04d      	beq.n	80124e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012446:	6a3b      	ldr	r3, [r7, #32]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2208      	movs	r2, #8
 801244c:	4413      	add	r3, r2
 801244e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	6a3b      	ldr	r3, [r7, #32]
 8012456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245a:	685a      	ldr	r2, [r3, #4]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	1ad2      	subs	r2, r2, r3
 8012460:	2308      	movs	r3, #8
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	429a      	cmp	r2, r3
 8012466:	d921      	bls.n	80124ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	4413      	add	r3, r2
 801246e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	f003 0307 	and.w	r3, r3, #7
 8012476:	2b00      	cmp	r3, #0
 8012478:	d00c      	beq.n	8012494 <pvPortMalloc+0x100>
	__asm volatile
 801247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801247e:	b672      	cpsid	i
 8012480:	f383 8811 	msr	BASEPRI, r3
 8012484:	f3bf 8f6f 	isb	sy
 8012488:	f3bf 8f4f 	dsb	sy
 801248c:	b662      	cpsie	i
 801248e:	613b      	str	r3, [r7, #16]
}
 8012490:	bf00      	nop
 8012492:	e7fe      	b.n	8012492 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	1ad2      	subs	r2, r2, r3
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124a6:	69b8      	ldr	r0, [r7, #24]
 80124a8:	f000 f8fe 	bl	80126a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124ac:	4b1b      	ldr	r3, [pc, #108]	; (801251c <pvPortMalloc+0x188>)
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	1ad3      	subs	r3, r2, r3
 80124b6:	4a19      	ldr	r2, [pc, #100]	; (801251c <pvPortMalloc+0x188>)
 80124b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124ba:	4b18      	ldr	r3, [pc, #96]	; (801251c <pvPortMalloc+0x188>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	4b19      	ldr	r3, [pc, #100]	; (8012524 <pvPortMalloc+0x190>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d203      	bcs.n	80124ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124c6:	4b15      	ldr	r3, [pc, #84]	; (801251c <pvPortMalloc+0x188>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	4a16      	ldr	r2, [pc, #88]	; (8012524 <pvPortMalloc+0x190>)
 80124cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d0:	685a      	ldr	r2, [r3, #4]
 80124d2:	4b11      	ldr	r3, [pc, #68]	; (8012518 <pvPortMalloc+0x184>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	431a      	orrs	r2, r3
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124de:	2200      	movs	r2, #0
 80124e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124e2:	f7fe fbef 	bl	8010cc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	f003 0307 	and.w	r3, r3, #7
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d00c      	beq.n	801250a <pvPortMalloc+0x176>
	__asm volatile
 80124f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f4:	b672      	cpsid	i
 80124f6:	f383 8811 	msr	BASEPRI, r3
 80124fa:	f3bf 8f6f 	isb	sy
 80124fe:	f3bf 8f4f 	dsb	sy
 8012502:	b662      	cpsie	i
 8012504:	60fb      	str	r3, [r7, #12]
}
 8012506:	bf00      	nop
 8012508:	e7fe      	b.n	8012508 <pvPortMalloc+0x174>
	return pvReturn;
 801250a:	69fb      	ldr	r3, [r7, #28]
}
 801250c:	4618      	mov	r0, r3
 801250e:	3728      	adds	r7, #40	; 0x28
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	20006008 	.word	0x20006008
 8012518:	20006014 	.word	0x20006014
 801251c:	2000600c 	.word	0x2000600c
 8012520:	20006000 	.word	0x20006000
 8012524:	20006010 	.word	0x20006010

08012528 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b086      	sub	sp, #24
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d04c      	beq.n	80125d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801253a:	2308      	movs	r3, #8
 801253c:	425b      	negs	r3, r3
 801253e:	697a      	ldr	r2, [r7, #20]
 8012540:	4413      	add	r3, r2
 8012542:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	685a      	ldr	r2, [r3, #4]
 801254c:	4b23      	ldr	r3, [pc, #140]	; (80125dc <vPortFree+0xb4>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4013      	ands	r3, r2
 8012552:	2b00      	cmp	r3, #0
 8012554:	d10c      	bne.n	8012570 <vPortFree+0x48>
	__asm volatile
 8012556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255a:	b672      	cpsid	i
 801255c:	f383 8811 	msr	BASEPRI, r3
 8012560:	f3bf 8f6f 	isb	sy
 8012564:	f3bf 8f4f 	dsb	sy
 8012568:	b662      	cpsie	i
 801256a:	60fb      	str	r3, [r7, #12]
}
 801256c:	bf00      	nop
 801256e:	e7fe      	b.n	801256e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d00c      	beq.n	8012592 <vPortFree+0x6a>
	__asm volatile
 8012578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801257c:	b672      	cpsid	i
 801257e:	f383 8811 	msr	BASEPRI, r3
 8012582:	f3bf 8f6f 	isb	sy
 8012586:	f3bf 8f4f 	dsb	sy
 801258a:	b662      	cpsie	i
 801258c:	60bb      	str	r3, [r7, #8]
}
 801258e:	bf00      	nop
 8012590:	e7fe      	b.n	8012590 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	4b11      	ldr	r3, [pc, #68]	; (80125dc <vPortFree+0xb4>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4013      	ands	r3, r2
 801259c:	2b00      	cmp	r3, #0
 801259e:	d019      	beq.n	80125d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80125a0:	693b      	ldr	r3, [r7, #16]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d115      	bne.n	80125d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	685a      	ldr	r2, [r3, #4]
 80125ac:	4b0b      	ldr	r3, [pc, #44]	; (80125dc <vPortFree+0xb4>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	43db      	mvns	r3, r3
 80125b2:	401a      	ands	r2, r3
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125b8:	f7fe fb76 	bl	8010ca8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	685a      	ldr	r2, [r3, #4]
 80125c0:	4b07      	ldr	r3, [pc, #28]	; (80125e0 <vPortFree+0xb8>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	4413      	add	r3, r2
 80125c6:	4a06      	ldr	r2, [pc, #24]	; (80125e0 <vPortFree+0xb8>)
 80125c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125ca:	6938      	ldr	r0, [r7, #16]
 80125cc:	f000 f86c 	bl	80126a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80125d0:	f7fe fb78 	bl	8010cc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125d4:	bf00      	nop
 80125d6:	3718      	adds	r7, #24
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	20006014 	.word	0x20006014
 80125e0:	2000600c 	.word	0x2000600c

080125e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125e4:	b480      	push	{r7}
 80125e6:	b085      	sub	sp, #20
 80125e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80125ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125f0:	4b27      	ldr	r3, [pc, #156]	; (8012690 <prvHeapInit+0xac>)
 80125f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	f003 0307 	and.w	r3, r3, #7
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d00c      	beq.n	8012618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	3307      	adds	r3, #7
 8012602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f023 0307 	bic.w	r3, r3, #7
 801260a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	1ad3      	subs	r3, r2, r3
 8012612:	4a1f      	ldr	r2, [pc, #124]	; (8012690 <prvHeapInit+0xac>)
 8012614:	4413      	add	r3, r2
 8012616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801261c:	4a1d      	ldr	r2, [pc, #116]	; (8012694 <prvHeapInit+0xb0>)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012622:	4b1c      	ldr	r3, [pc, #112]	; (8012694 <prvHeapInit+0xb0>)
 8012624:	2200      	movs	r2, #0
 8012626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	4413      	add	r3, r2
 801262e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012630:	2208      	movs	r2, #8
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	1a9b      	subs	r3, r3, r2
 8012636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	f023 0307 	bic.w	r3, r3, #7
 801263e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	4a15      	ldr	r2, [pc, #84]	; (8012698 <prvHeapInit+0xb4>)
 8012644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012646:	4b14      	ldr	r3, [pc, #80]	; (8012698 <prvHeapInit+0xb4>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2200      	movs	r2, #0
 801264c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801264e:	4b12      	ldr	r3, [pc, #72]	; (8012698 <prvHeapInit+0xb4>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	2200      	movs	r2, #0
 8012654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	1ad2      	subs	r2, r2, r3
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012664:	4b0c      	ldr	r3, [pc, #48]	; (8012698 <prvHeapInit+0xb4>)
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	4a0a      	ldr	r2, [pc, #40]	; (801269c <prvHeapInit+0xb8>)
 8012672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	4a09      	ldr	r2, [pc, #36]	; (80126a0 <prvHeapInit+0xbc>)
 801267a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801267c:	4b09      	ldr	r3, [pc, #36]	; (80126a4 <prvHeapInit+0xc0>)
 801267e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012682:	601a      	str	r2, [r3, #0]
}
 8012684:	bf00      	nop
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	20002400 	.word	0x20002400
 8012694:	20006000 	.word	0x20006000
 8012698:	20006008 	.word	0x20006008
 801269c:	20006010 	.word	0x20006010
 80126a0:	2000600c 	.word	0x2000600c
 80126a4:	20006014 	.word	0x20006014

080126a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126a8:	b480      	push	{r7}
 80126aa:	b085      	sub	sp, #20
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126b0:	4b28      	ldr	r3, [pc, #160]	; (8012754 <prvInsertBlockIntoFreeList+0xac>)
 80126b2:	60fb      	str	r3, [r7, #12]
 80126b4:	e002      	b.n	80126bc <prvInsertBlockIntoFreeList+0x14>
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	60fb      	str	r3, [r7, #12]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	687a      	ldr	r2, [r7, #4]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d8f7      	bhi.n	80126b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	68ba      	ldr	r2, [r7, #8]
 80126d0:	4413      	add	r3, r2
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d108      	bne.n	80126ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	685a      	ldr	r2, [r3, #4]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	441a      	add	r2, r3
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	68ba      	ldr	r2, [r7, #8]
 80126f4:	441a      	add	r2, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d118      	bne.n	8012730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	4b15      	ldr	r3, [pc, #84]	; (8012758 <prvInsertBlockIntoFreeList+0xb0>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	429a      	cmp	r2, r3
 8012708:	d00d      	beq.n	8012726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	685a      	ldr	r2, [r3, #4]
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	441a      	add	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	601a      	str	r2, [r3, #0]
 8012724:	e008      	b.n	8012738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012726:	4b0c      	ldr	r3, [pc, #48]	; (8012758 <prvInsertBlockIntoFreeList+0xb0>)
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	601a      	str	r2, [r3, #0]
 801272e:	e003      	b.n	8012738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012738:	68fa      	ldr	r2, [r7, #12]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	429a      	cmp	r2, r3
 801273e:	d002      	beq.n	8012746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012746:	bf00      	nop
 8012748:	3714      	adds	r7, #20
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	20006000 	.word	0x20006000
 8012758:	20006008 	.word	0x20006008

0801275c <__errno>:
 801275c:	4b01      	ldr	r3, [pc, #4]	; (8012764 <__errno+0x8>)
 801275e:	6818      	ldr	r0, [r3, #0]
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	200001c0 	.word	0x200001c0

08012768 <__libc_init_array>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	4d0d      	ldr	r5, [pc, #52]	; (80127a0 <__libc_init_array+0x38>)
 801276c:	4c0d      	ldr	r4, [pc, #52]	; (80127a4 <__libc_init_array+0x3c>)
 801276e:	1b64      	subs	r4, r4, r5
 8012770:	10a4      	asrs	r4, r4, #2
 8012772:	2600      	movs	r6, #0
 8012774:	42a6      	cmp	r6, r4
 8012776:	d109      	bne.n	801278c <__libc_init_array+0x24>
 8012778:	4d0b      	ldr	r5, [pc, #44]	; (80127a8 <__libc_init_array+0x40>)
 801277a:	4c0c      	ldr	r4, [pc, #48]	; (80127ac <__libc_init_array+0x44>)
 801277c:	f000 fb16 	bl	8012dac <_init>
 8012780:	1b64      	subs	r4, r4, r5
 8012782:	10a4      	asrs	r4, r4, #2
 8012784:	2600      	movs	r6, #0
 8012786:	42a6      	cmp	r6, r4
 8012788:	d105      	bne.n	8012796 <__libc_init_array+0x2e>
 801278a:	bd70      	pop	{r4, r5, r6, pc}
 801278c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012790:	4798      	blx	r3
 8012792:	3601      	adds	r6, #1
 8012794:	e7ee      	b.n	8012774 <__libc_init_array+0xc>
 8012796:	f855 3b04 	ldr.w	r3, [r5], #4
 801279a:	4798      	blx	r3
 801279c:	3601      	adds	r6, #1
 801279e:	e7f2      	b.n	8012786 <__libc_init_array+0x1e>
 80127a0:	08013390 	.word	0x08013390
 80127a4:	08013390 	.word	0x08013390
 80127a8:	08013390 	.word	0x08013390
 80127ac:	08013394 	.word	0x08013394

080127b0 <__retarget_lock_acquire_recursive>:
 80127b0:	4770      	bx	lr

080127b2 <__retarget_lock_release_recursive>:
 80127b2:	4770      	bx	lr

080127b4 <memcpy>:
 80127b4:	440a      	add	r2, r1
 80127b6:	4291      	cmp	r1, r2
 80127b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80127bc:	d100      	bne.n	80127c0 <memcpy+0xc>
 80127be:	4770      	bx	lr
 80127c0:	b510      	push	{r4, lr}
 80127c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80127c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80127ca:	4291      	cmp	r1, r2
 80127cc:	d1f9      	bne.n	80127c2 <memcpy+0xe>
 80127ce:	bd10      	pop	{r4, pc}

080127d0 <memset>:
 80127d0:	4402      	add	r2, r0
 80127d2:	4603      	mov	r3, r0
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d100      	bne.n	80127da <memset+0xa>
 80127d8:	4770      	bx	lr
 80127da:	f803 1b01 	strb.w	r1, [r3], #1
 80127de:	e7f9      	b.n	80127d4 <memset+0x4>

080127e0 <cleanup_glue>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	460c      	mov	r4, r1
 80127e4:	6809      	ldr	r1, [r1, #0]
 80127e6:	4605      	mov	r5, r0
 80127e8:	b109      	cbz	r1, 80127ee <cleanup_glue+0xe>
 80127ea:	f7ff fff9 	bl	80127e0 <cleanup_glue>
 80127ee:	4621      	mov	r1, r4
 80127f0:	4628      	mov	r0, r5
 80127f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127f6:	f000 b869 	b.w	80128cc <_free_r>
	...

080127fc <_reclaim_reent>:
 80127fc:	4b2c      	ldr	r3, [pc, #176]	; (80128b0 <_reclaim_reent+0xb4>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4283      	cmp	r3, r0
 8012802:	b570      	push	{r4, r5, r6, lr}
 8012804:	4604      	mov	r4, r0
 8012806:	d051      	beq.n	80128ac <_reclaim_reent+0xb0>
 8012808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801280a:	b143      	cbz	r3, 801281e <_reclaim_reent+0x22>
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d14a      	bne.n	80128a8 <_reclaim_reent+0xac>
 8012812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012814:	6819      	ldr	r1, [r3, #0]
 8012816:	b111      	cbz	r1, 801281e <_reclaim_reent+0x22>
 8012818:	4620      	mov	r0, r4
 801281a:	f000 f857 	bl	80128cc <_free_r>
 801281e:	6961      	ldr	r1, [r4, #20]
 8012820:	b111      	cbz	r1, 8012828 <_reclaim_reent+0x2c>
 8012822:	4620      	mov	r0, r4
 8012824:	f000 f852 	bl	80128cc <_free_r>
 8012828:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801282a:	b111      	cbz	r1, 8012832 <_reclaim_reent+0x36>
 801282c:	4620      	mov	r0, r4
 801282e:	f000 f84d 	bl	80128cc <_free_r>
 8012832:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012834:	b111      	cbz	r1, 801283c <_reclaim_reent+0x40>
 8012836:	4620      	mov	r0, r4
 8012838:	f000 f848 	bl	80128cc <_free_r>
 801283c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801283e:	b111      	cbz	r1, 8012846 <_reclaim_reent+0x4a>
 8012840:	4620      	mov	r0, r4
 8012842:	f000 f843 	bl	80128cc <_free_r>
 8012846:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012848:	b111      	cbz	r1, 8012850 <_reclaim_reent+0x54>
 801284a:	4620      	mov	r0, r4
 801284c:	f000 f83e 	bl	80128cc <_free_r>
 8012850:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012852:	b111      	cbz	r1, 801285a <_reclaim_reent+0x5e>
 8012854:	4620      	mov	r0, r4
 8012856:	f000 f839 	bl	80128cc <_free_r>
 801285a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801285c:	b111      	cbz	r1, 8012864 <_reclaim_reent+0x68>
 801285e:	4620      	mov	r0, r4
 8012860:	f000 f834 	bl	80128cc <_free_r>
 8012864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012866:	b111      	cbz	r1, 801286e <_reclaim_reent+0x72>
 8012868:	4620      	mov	r0, r4
 801286a:	f000 f82f 	bl	80128cc <_free_r>
 801286e:	69a3      	ldr	r3, [r4, #24]
 8012870:	b1e3      	cbz	r3, 80128ac <_reclaim_reent+0xb0>
 8012872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012874:	4620      	mov	r0, r4
 8012876:	4798      	blx	r3
 8012878:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801287a:	b1b9      	cbz	r1, 80128ac <_reclaim_reent+0xb0>
 801287c:	4620      	mov	r0, r4
 801287e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012882:	f7ff bfad 	b.w	80127e0 <cleanup_glue>
 8012886:	5949      	ldr	r1, [r1, r5]
 8012888:	b941      	cbnz	r1, 801289c <_reclaim_reent+0xa0>
 801288a:	3504      	adds	r5, #4
 801288c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801288e:	2d80      	cmp	r5, #128	; 0x80
 8012890:	68d9      	ldr	r1, [r3, #12]
 8012892:	d1f8      	bne.n	8012886 <_reclaim_reent+0x8a>
 8012894:	4620      	mov	r0, r4
 8012896:	f000 f819 	bl	80128cc <_free_r>
 801289a:	e7ba      	b.n	8012812 <_reclaim_reent+0x16>
 801289c:	680e      	ldr	r6, [r1, #0]
 801289e:	4620      	mov	r0, r4
 80128a0:	f000 f814 	bl	80128cc <_free_r>
 80128a4:	4631      	mov	r1, r6
 80128a6:	e7ef      	b.n	8012888 <_reclaim_reent+0x8c>
 80128a8:	2500      	movs	r5, #0
 80128aa:	e7ef      	b.n	801288c <_reclaim_reent+0x90>
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	bf00      	nop
 80128b0:	200001c0 	.word	0x200001c0

080128b4 <__malloc_lock>:
 80128b4:	4801      	ldr	r0, [pc, #4]	; (80128bc <__malloc_lock+0x8>)
 80128b6:	f7ff bf7b 	b.w	80127b0 <__retarget_lock_acquire_recursive>
 80128ba:	bf00      	nop
 80128bc:	20006018 	.word	0x20006018

080128c0 <__malloc_unlock>:
 80128c0:	4801      	ldr	r0, [pc, #4]	; (80128c8 <__malloc_unlock+0x8>)
 80128c2:	f7ff bf76 	b.w	80127b2 <__retarget_lock_release_recursive>
 80128c6:	bf00      	nop
 80128c8:	20006018 	.word	0x20006018

080128cc <_free_r>:
 80128cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128ce:	2900      	cmp	r1, #0
 80128d0:	d044      	beq.n	801295c <_free_r+0x90>
 80128d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128d6:	9001      	str	r0, [sp, #4]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f1a1 0404 	sub.w	r4, r1, #4
 80128de:	bfb8      	it	lt
 80128e0:	18e4      	addlt	r4, r4, r3
 80128e2:	f7ff ffe7 	bl	80128b4 <__malloc_lock>
 80128e6:	4a1e      	ldr	r2, [pc, #120]	; (8012960 <_free_r+0x94>)
 80128e8:	9801      	ldr	r0, [sp, #4]
 80128ea:	6813      	ldr	r3, [r2, #0]
 80128ec:	b933      	cbnz	r3, 80128fc <_free_r+0x30>
 80128ee:	6063      	str	r3, [r4, #4]
 80128f0:	6014      	str	r4, [r2, #0]
 80128f2:	b003      	add	sp, #12
 80128f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128f8:	f7ff bfe2 	b.w	80128c0 <__malloc_unlock>
 80128fc:	42a3      	cmp	r3, r4
 80128fe:	d908      	bls.n	8012912 <_free_r+0x46>
 8012900:	6825      	ldr	r5, [r4, #0]
 8012902:	1961      	adds	r1, r4, r5
 8012904:	428b      	cmp	r3, r1
 8012906:	bf01      	itttt	eq
 8012908:	6819      	ldreq	r1, [r3, #0]
 801290a:	685b      	ldreq	r3, [r3, #4]
 801290c:	1949      	addeq	r1, r1, r5
 801290e:	6021      	streq	r1, [r4, #0]
 8012910:	e7ed      	b.n	80128ee <_free_r+0x22>
 8012912:	461a      	mov	r2, r3
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	b10b      	cbz	r3, 801291c <_free_r+0x50>
 8012918:	42a3      	cmp	r3, r4
 801291a:	d9fa      	bls.n	8012912 <_free_r+0x46>
 801291c:	6811      	ldr	r1, [r2, #0]
 801291e:	1855      	adds	r5, r2, r1
 8012920:	42a5      	cmp	r5, r4
 8012922:	d10b      	bne.n	801293c <_free_r+0x70>
 8012924:	6824      	ldr	r4, [r4, #0]
 8012926:	4421      	add	r1, r4
 8012928:	1854      	adds	r4, r2, r1
 801292a:	42a3      	cmp	r3, r4
 801292c:	6011      	str	r1, [r2, #0]
 801292e:	d1e0      	bne.n	80128f2 <_free_r+0x26>
 8012930:	681c      	ldr	r4, [r3, #0]
 8012932:	685b      	ldr	r3, [r3, #4]
 8012934:	6053      	str	r3, [r2, #4]
 8012936:	4421      	add	r1, r4
 8012938:	6011      	str	r1, [r2, #0]
 801293a:	e7da      	b.n	80128f2 <_free_r+0x26>
 801293c:	d902      	bls.n	8012944 <_free_r+0x78>
 801293e:	230c      	movs	r3, #12
 8012940:	6003      	str	r3, [r0, #0]
 8012942:	e7d6      	b.n	80128f2 <_free_r+0x26>
 8012944:	6825      	ldr	r5, [r4, #0]
 8012946:	1961      	adds	r1, r4, r5
 8012948:	428b      	cmp	r3, r1
 801294a:	bf04      	itt	eq
 801294c:	6819      	ldreq	r1, [r3, #0]
 801294e:	685b      	ldreq	r3, [r3, #4]
 8012950:	6063      	str	r3, [r4, #4]
 8012952:	bf04      	itt	eq
 8012954:	1949      	addeq	r1, r1, r5
 8012956:	6021      	streq	r1, [r4, #0]
 8012958:	6054      	str	r4, [r2, #4]
 801295a:	e7ca      	b.n	80128f2 <_free_r+0x26>
 801295c:	b003      	add	sp, #12
 801295e:	bd30      	pop	{r4, r5, pc}
 8012960:	2000601c 	.word	0x2000601c

08012964 <lrintf>:
 8012964:	ee10 3a10 	vmov	r3, s0
 8012968:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801296c:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8012970:	281e      	cmp	r0, #30
 8012972:	b082      	sub	sp, #8
 8012974:	dc2e      	bgt.n	80129d4 <lrintf+0x70>
 8012976:	1c41      	adds	r1, r0, #1
 8012978:	da02      	bge.n	8012980 <lrintf+0x1c>
 801297a:	2000      	movs	r0, #0
 801297c:	b002      	add	sp, #8
 801297e:	4770      	bx	lr
 8012980:	2816      	cmp	r0, #22
 8012982:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8012986:	dd09      	ble.n	801299c <lrintf+0x38>
 8012988:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801298c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8012990:	3a96      	subs	r2, #150	; 0x96
 8012992:	4090      	lsls	r0, r2
 8012994:	2900      	cmp	r1, #0
 8012996:	d0f1      	beq.n	801297c <lrintf+0x18>
 8012998:	4240      	negs	r0, r0
 801299a:	e7ef      	b.n	801297c <lrintf+0x18>
 801299c:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <lrintf+0x7c>)
 801299e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80129a2:	ed93 7a00 	vldr	s14, [r3]
 80129a6:	ee37 0a00 	vadd.f32	s0, s14, s0
 80129aa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80129ae:	eddd 7a01 	vldr	s15, [sp, #4]
 80129b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80129b6:	ee17 3a90 	vmov	r3, s15
 80129ba:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80129be:	d0dc      	beq.n	801297a <lrintf+0x16>
 80129c0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80129c4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80129c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80129cc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80129d0:	40d8      	lsrs	r0, r3
 80129d2:	e7df      	b.n	8012994 <lrintf+0x30>
 80129d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80129d8:	ee17 0a90 	vmov	r0, s15
 80129dc:	e7ce      	b.n	801297c <lrintf+0x18>
 80129de:	bf00      	nop
 80129e0:	08013110 	.word	0x08013110

080129e4 <checkint>:
 80129e4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80129e8:	2b7e      	cmp	r3, #126	; 0x7e
 80129ea:	dd10      	ble.n	8012a0e <checkint+0x2a>
 80129ec:	2b96      	cmp	r3, #150	; 0x96
 80129ee:	dc0c      	bgt.n	8012a0a <checkint+0x26>
 80129f0:	2201      	movs	r2, #1
 80129f2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80129f6:	fa02 f303 	lsl.w	r3, r2, r3
 80129fa:	1e5a      	subs	r2, r3, #1
 80129fc:	4202      	tst	r2, r0
 80129fe:	d106      	bne.n	8012a0e <checkint+0x2a>
 8012a00:	4203      	tst	r3, r0
 8012a02:	bf0c      	ite	eq
 8012a04:	2002      	moveq	r0, #2
 8012a06:	2001      	movne	r0, #1
 8012a08:	4770      	bx	lr
 8012a0a:	2002      	movs	r0, #2
 8012a0c:	4770      	bx	lr
 8012a0e:	2000      	movs	r0, #0
 8012a10:	4770      	bx	lr
 8012a12:	0000      	movs	r0, r0
 8012a14:	0000      	movs	r0, r0
	...

08012a18 <powf>:
 8012a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a1a:	ee10 1a10 	vmov	r1, s0
 8012a1e:	ee10 4a90 	vmov	r4, s1
 8012a22:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8012a26:	0062      	lsls	r2, r4, #1
 8012a28:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012a2c:	eef0 7a40 	vmov.f32	s15, s0
 8012a30:	f102 30ff 	add.w	r0, r2, #4294967295
 8012a34:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8012a38:	d252      	bcs.n	8012ae0 <powf+0xc8>
 8012a3a:	4298      	cmp	r0, r3
 8012a3c:	d252      	bcs.n	8012ae4 <powf+0xcc>
 8012a3e:	2000      	movs	r0, #0
 8012a40:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8012a44:	4ca0      	ldr	r4, [pc, #640]	; (8012cc8 <powf+0x2b0>)
 8012a46:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8012a4a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8012a4e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8012a52:	0dd2      	lsrs	r2, r2, #23
 8012a54:	05d2      	lsls	r2, r2, #23
 8012a56:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8012a5a:	1a8b      	subs	r3, r1, r2
 8012a5c:	ed95 6b00 	vldr	d6, [r5]
 8012a60:	ee07 3a90 	vmov	s15, r3
 8012a64:	15d2      	asrs	r2, r2, #23
 8012a66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012a6a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8012a6e:	ed95 6b02 	vldr	d6, [r5, #8]
 8012a72:	ee25 2b05 	vmul.f64	d2, d5, d5
 8012a76:	ee22 1b02 	vmul.f64	d1, d2, d2
 8012a7a:	ee07 2a90 	vmov	s15, r2
 8012a7e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8012a82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012a8a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8012a8e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8012a92:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012a96:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8012a9a:	eea5 6b04 	vfma.f64	d6, d5, d4
 8012a9e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8012aa2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8012aa6:	eea5 7b04 	vfma.f64	d7, d5, d4
 8012aaa:	eea2 7b06 	vfma.f64	d7, d2, d6
 8012aae:	eea3 7b01 	vfma.f64	d7, d3, d1
 8012ab2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012ab6:	ee10 3a90 	vmov	r3, s1
 8012aba:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8012abe:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	f0c0 80b1 	bcc.w	8012c2a <powf+0x212>
 8012ac8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8012ca8 <powf+0x290>
 8012acc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad4:	dd79      	ble.n	8012bca <powf+0x1b2>
 8012ad6:	b003      	add	sp, #12
 8012ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012adc:	f000 b940 	b.w	8012d60 <__math_oflowf>
 8012ae0:	4298      	cmp	r0, r3
 8012ae2:	d32d      	bcc.n	8012b40 <powf+0x128>
 8012ae4:	b952      	cbnz	r2, 8012afc <powf+0xe4>
 8012ae6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8012aea:	005b      	lsls	r3, r3, #1
 8012aec:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8012af0:	f240 80c9 	bls.w	8012c86 <powf+0x26e>
 8012af4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8012af8:	b003      	add	sp, #12
 8012afa:	bd30      	pop	{r4, r5, pc}
 8012afc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8012b00:	d105      	bne.n	8012b0e <powf+0xf6>
 8012b02:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012b06:	0064      	lsls	r4, r4, #1
 8012b08:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012b0c:	e7f0      	b.n	8012af0 <powf+0xd8>
 8012b0e:	004b      	lsls	r3, r1, #1
 8012b10:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8012b14:	d8ee      	bhi.n	8012af4 <powf+0xdc>
 8012b16:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8012b1a:	d1eb      	bne.n	8012af4 <powf+0xdc>
 8012b1c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012b20:	f000 80b1 	beq.w	8012c86 <powf+0x26e>
 8012b24:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012b28:	ea6f 0404 	mvn.w	r4, r4
 8012b2c:	bf34      	ite	cc
 8012b2e:	2300      	movcc	r3, #0
 8012b30:	2301      	movcs	r3, #1
 8012b32:	0fe4      	lsrs	r4, r4, #31
 8012b34:	42a3      	cmp	r3, r4
 8012b36:	f040 80a9 	bne.w	8012c8c <powf+0x274>
 8012b3a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8012b3e:	e7db      	b.n	8012af8 <powf+0xe0>
 8012b40:	004d      	lsls	r5, r1, #1
 8012b42:	1e6a      	subs	r2, r5, #1
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d31c      	bcc.n	8012b82 <powf+0x16a>
 8012b48:	2900      	cmp	r1, #0
 8012b4a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012b4e:	da0f      	bge.n	8012b70 <powf+0x158>
 8012b50:	ee10 0a90 	vmov	r0, s1
 8012b54:	f7ff ff46 	bl	80129e4 <checkint>
 8012b58:	2801      	cmp	r0, #1
 8012b5a:	d109      	bne.n	8012b70 <powf+0x158>
 8012b5c:	eeb1 0a40 	vneg.f32	s0, s0
 8012b60:	b945      	cbnz	r5, 8012b74 <powf+0x15c>
 8012b62:	2c00      	cmp	r4, #0
 8012b64:	dac8      	bge.n	8012af8 <powf+0xe0>
 8012b66:	b003      	add	sp, #12
 8012b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b6c:	f000 b8fe 	b.w	8012d6c <__math_divzerof>
 8012b70:	2000      	movs	r0, #0
 8012b72:	e7f5      	b.n	8012b60 <powf+0x148>
 8012b74:	2c00      	cmp	r4, #0
 8012b76:	dabf      	bge.n	8012af8 <powf+0xe0>
 8012b78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b7c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012b80:	e7ba      	b.n	8012af8 <powf+0xe0>
 8012b82:	2900      	cmp	r1, #0
 8012b84:	da1f      	bge.n	8012bc6 <powf+0x1ae>
 8012b86:	ee10 0a90 	vmov	r0, s1
 8012b8a:	f7ff ff2b 	bl	80129e4 <checkint>
 8012b8e:	b920      	cbnz	r0, 8012b9a <powf+0x182>
 8012b90:	b003      	add	sp, #12
 8012b92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b96:	f000 b8f9 	b.w	8012d8c <__math_invalidf>
 8012b9a:	2801      	cmp	r0, #1
 8012b9c:	bf14      	ite	ne
 8012b9e:	2000      	movne	r0, #0
 8012ba0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8012ba4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012ba8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8012bac:	f4bf af48 	bcs.w	8012a40 <powf+0x28>
 8012bb0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8012ccc <powf+0x2b4>
 8012bb4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012bb8:	ee10 3a10 	vmov	r3, s0
 8012bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bc0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8012bc4:	e73c      	b.n	8012a40 <powf+0x28>
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	e7ee      	b.n	8012ba8 <powf+0x190>
 8012bca:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012cb0 <powf+0x298>
 8012bce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd6:	dd10      	ble.n	8012bfa <powf+0x1e2>
 8012bd8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d158      	bne.n	8012c92 <powf+0x27a>
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	eddd 7a00 	vldr	s15, [sp]
 8012be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012bee:	eef4 7a47 	vcmp.f32	s15, s14
 8012bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf6:	f47f af6e 	bne.w	8012ad6 <powf+0xbe>
 8012bfa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012cb8 <powf+0x2a0>
 8012bfe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c06:	d804      	bhi.n	8012c12 <powf+0x1fa>
 8012c08:	b003      	add	sp, #12
 8012c0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c0e:	f000 b89b 	b.w	8012d48 <__math_uflowf>
 8012c12:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8012cc0 <powf+0x2a8>
 8012c16:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1e:	d504      	bpl.n	8012c2a <powf+0x212>
 8012c20:	b003      	add	sp, #12
 8012c22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c26:	f000 b895 	b.w	8012d54 <__math_may_uflowf>
 8012c2a:	4b29      	ldr	r3, [pc, #164]	; (8012cd0 <powf+0x2b8>)
 8012c2c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8012c30:	ee30 6b07 	vadd.f64	d6, d0, d7
 8012c34:	ee16 2a10 	vmov	r2, s12
 8012c38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012c3c:	f002 011f 	and.w	r1, r2, #31
 8012c40:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8012c44:	ee30 7b47 	vsub.f64	d7, d0, d7
 8012c48:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012c4c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8012c50:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012c54:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8012c58:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8012c5c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012c60:	686d      	ldr	r5, [r5, #4]
 8012c62:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8012c66:	1882      	adds	r2, r0, r2
 8012c68:	2300      	movs	r3, #0
 8012c6a:	1918      	adds	r0, r3, r4
 8012c6c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8012c70:	eea7 0b05 	vfma.f64	d0, d7, d5
 8012c74:	ec41 0b17 	vmov	d7, r0, r1
 8012c78:	eea6 0b04 	vfma.f64	d0, d6, d4
 8012c7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012c80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012c84:	e738      	b.n	8012af8 <powf+0xe0>
 8012c86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012c8a:	e735      	b.n	8012af8 <powf+0xe0>
 8012c8c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8012cd4 <powf+0x2bc>
 8012c90:	e732      	b.n	8012af8 <powf+0xe0>
 8012c92:	9301      	str	r3, [sp, #4]
 8012c94:	eddd 7a01 	vldr	s15, [sp, #4]
 8012c98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ca0:	e7a5      	b.n	8012bee <powf+0x1d6>
 8012ca2:	bf00      	nop
 8012ca4:	f3af 8000 	nop.w
 8012ca8:	ffd1d571 	.word	0xffd1d571
 8012cac:	405fffff 	.word	0x405fffff
 8012cb0:	ffa3aae2 	.word	0xffa3aae2
 8012cb4:	405fffff 	.word	0x405fffff
 8012cb8:	00000000 	.word	0x00000000
 8012cbc:	c062c000 	.word	0xc062c000
 8012cc0:	00000000 	.word	0x00000000
 8012cc4:	c062a000 	.word	0xc062a000
 8012cc8:	08013118 	.word	0x08013118
 8012ccc:	4b000000 	.word	0x4b000000
 8012cd0:	08013240 	.word	0x08013240
 8012cd4:	00000000 	.word	0x00000000

08012cd8 <sqrtf>:
 8012cd8:	b508      	push	{r3, lr}
 8012cda:	ed2d 8b02 	vpush	{d8}
 8012cde:	eeb0 8a40 	vmov.f32	s16, s0
 8012ce2:	f000 f817 	bl	8012d14 <__ieee754_sqrtf>
 8012ce6:	eeb4 8a48 	vcmp.f32	s16, s16
 8012cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cee:	d60c      	bvs.n	8012d0a <sqrtf+0x32>
 8012cf0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012d10 <sqrtf+0x38>
 8012cf4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfc:	d505      	bpl.n	8012d0a <sqrtf+0x32>
 8012cfe:	f7ff fd2d 	bl	801275c <__errno>
 8012d02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012d06:	2321      	movs	r3, #33	; 0x21
 8012d08:	6003      	str	r3, [r0, #0]
 8012d0a:	ecbd 8b02 	vpop	{d8}
 8012d0e:	bd08      	pop	{r3, pc}
 8012d10:	00000000 	.word	0x00000000

08012d14 <__ieee754_sqrtf>:
 8012d14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012d18:	4770      	bx	lr

08012d1a <with_errnof>:
 8012d1a:	b513      	push	{r0, r1, r4, lr}
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012d22:	f7ff fd1b 	bl	801275c <__errno>
 8012d26:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012d2a:	6004      	str	r4, [r0, #0]
 8012d2c:	b002      	add	sp, #8
 8012d2e:	bd10      	pop	{r4, pc}

08012d30 <xflowf>:
 8012d30:	b130      	cbz	r0, 8012d40 <xflowf+0x10>
 8012d32:	eef1 7a40 	vneg.f32	s15, s0
 8012d36:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d3a:	2022      	movs	r0, #34	; 0x22
 8012d3c:	f7ff bfed 	b.w	8012d1a <with_errnof>
 8012d40:	eef0 7a40 	vmov.f32	s15, s0
 8012d44:	e7f7      	b.n	8012d36 <xflowf+0x6>
	...

08012d48 <__math_uflowf>:
 8012d48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012d50 <__math_uflowf+0x8>
 8012d4c:	f7ff bff0 	b.w	8012d30 <xflowf>
 8012d50:	10000000 	.word	0x10000000

08012d54 <__math_may_uflowf>:
 8012d54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012d5c <__math_may_uflowf+0x8>
 8012d58:	f7ff bfea 	b.w	8012d30 <xflowf>
 8012d5c:	1a200000 	.word	0x1a200000

08012d60 <__math_oflowf>:
 8012d60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012d68 <__math_oflowf+0x8>
 8012d64:	f7ff bfe4 	b.w	8012d30 <xflowf>
 8012d68:	70000000 	.word	0x70000000

08012d6c <__math_divzerof>:
 8012d6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012d70:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012d74:	2800      	cmp	r0, #0
 8012d76:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8012d7a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8012d88 <__math_divzerof+0x1c>
 8012d7e:	2022      	movs	r0, #34	; 0x22
 8012d80:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012d84:	f7ff bfc9 	b.w	8012d1a <with_errnof>
 8012d88:	00000000 	.word	0x00000000

08012d8c <__math_invalidf>:
 8012d8c:	eef0 7a40 	vmov.f32	s15, s0
 8012d90:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012d94:	eef4 7a67 	vcmp.f32	s15, s15
 8012d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8012da0:	d602      	bvs.n	8012da8 <__math_invalidf+0x1c>
 8012da2:	2021      	movs	r0, #33	; 0x21
 8012da4:	f7ff bfb9 	b.w	8012d1a <with_errnof>
 8012da8:	4770      	bx	lr
	...

08012dac <_init>:
 8012dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dae:	bf00      	nop
 8012db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012db2:	bc08      	pop	{r3}
 8012db4:	469e      	mov	lr, r3
 8012db6:	4770      	bx	lr

08012db8 <_fini>:
 8012db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dba:	bf00      	nop
 8012dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dbe:	bc08      	pop	{r3}
 8012dc0:	469e      	mov	lr, r3
 8012dc2:	4770      	bx	lr
