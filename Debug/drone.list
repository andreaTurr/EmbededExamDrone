
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ec  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080083e8  080083e8  000183e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008710  08008710  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008718  08008718  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ac  200000c8  080087e8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001174  080087e8  00021174  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce61  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a40  00000000  00000000  0003cf57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00040998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  000418f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029315  00000000  00000000  000426d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001448d  00000000  00000000  0006b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f80f5  00000000  00000000  0007fe72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177f67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  00177fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000c8 	.word	0x200000c8
 8000214:	00000000 	.word	0x00000000
 8000218:	080083cc 	.word	0x080083cc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000cc 	.word	0x200000cc
 8000234:	080083cc 	.word	0x080083cc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <applyAccelerationTrims+0x70>)
 8000546:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000550:	ee07 3a90 	vmov	s15, r3
 8000554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <applyAccelerationTrims+0x70>)
 800055e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <applyAccelerationTrims+0x70>)
 8000564:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800056e:	ee07 3a90 	vmov	s15, r3
 8000572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <applyAccelerationTrims+0x70>)
 800057c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <applyAccelerationTrims+0x70>)
 8000582:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800058c:	ee07 3a90 	vmov	s15, r3
 8000590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <applyAccelerationTrims+0x70>)
 800059a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000e4 	.word	0x200000e4

080005b0 <accInitFilters>:


static void accInitFilters(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <accInitFilters+0xc0>)
 80005b8:	2232      	movs	r2, #50	; 0x32
 80005ba:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <accInitFilters+0xc4>)
 80005be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <accInitFilters+0x1c>
 80005c6:	4b2a      	ldr	r3, [pc, #168]	; (8000670 <accInitFilters+0xc0>)
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	e000      	b.n	80005ce <accInitFilters+0x1e>
 80005cc:	2300      	movs	r3, #0
 80005ce:	4a2a      	ldr	r2, [pc, #168]	; (8000678 <accInitFilters+0xc8>)
 80005d0:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 80005d2:	4b29      	ldr	r3, [pc, #164]	; (8000678 <accInitFilters+0xc8>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d02c      	beq.n	8000634 <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <accInitFilters+0xc4>)
 80005dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80005e0:	ee07 3a90 	vmov	s15, r3
 80005e4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005e8:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000668 <accInitFilters+0xb8>
 80005ec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80005f0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80005f4:	ee17 3a90 	vmov	r3, s15
 80005f8:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e016      	b.n	800062e <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <accInitFilters+0xc8>)
 800060c:	4413      	add	r3, r2
 800060e:	3304      	adds	r3, #4
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <accInitFilters+0xc8>)
 8000612:	8812      	ldrh	r2, [r2, #0]
 8000614:	ee07 2a90 	vmov	s15, r2
 8000618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800061c:	6839      	ldr	r1, [r7, #0]
 800061e:	eeb0 0a67 	vmov.f32	s0, s15
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa82 	bl	8000b2c <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b02      	cmp	r3, #2
 8000632:	dde5      	ble.n	8000600 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <accInitFilters+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <accInitFilters+0xc8>)
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <accInitFilters+0xc8>)
 8000648:	f04f 0200 	mov.w	r2, #0
 800064c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <accInitFilters+0xc8>)
 8000652:	f04f 0200 	mov.w	r2, #0
 8000656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	f3af 8000 	nop.w
 8000668:	00000000 	.word	0x00000000
 800066c:	412e8480 	.word	0x412e8480
 8000670:	200001d0 	.word	0x200001d0
 8000674:	200000e4 	.word	0x200000e4
 8000678:	2000013c 	.word	0x2000013c

0800067c <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <setAccelerationTrims+0x1c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	2000013c 	.word	0x2000013c

0800069c <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 80006a6:	2258      	movs	r2, #88	; 0x58
 80006a8:	2100      	movs	r1, #0
 80006aa:	4823      	ldr	r0, [pc, #140]	; (8000738 <accInit+0x9c>)
 80006ac:	f007 fc62 	bl	8007f74 <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <accInit+0x9c>)
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <accInit+0xa0>)
 80006b4:	619a      	str	r2, [r3, #24]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <accInit+0xa4>)
 80006b8:	78da      	ldrb	r2, [r3, #3]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <accInit+0x9c>)
 80006bc:	771a      	strb	r2, [r3, #28]

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <accInit+0xa8>)
 80006c0:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80006c4:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fc5a 	bl	8004f88 <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <accInit+0x9c>)
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	7593      	strb	r3, [r2, #22]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	491a      	ldr	r1, [pc, #104]	; (8000748 <accInit+0xac>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fc0d 	bl	8004f00 <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <accInit+0x9c>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <accInit+0x9c>)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <accInit+0x9c>)
 80006f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f8:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <accInit+0x9c>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <accInit+0x9c>)
 8000700:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <accInit+0x9c>)
 8000704:	899b      	ldrh	r3, [r3, #12]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <accInit+0x9c>)
 8000718:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <accInit+0x9c>)
 800071e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	setAccelerationTrims(&accelerometerConfig.accZero);
 8000726:	4809      	ldr	r0, [pc, #36]	; (800074c <accInit+0xb0>)
 8000728:	f7ff ffa8 	bl	800067c <setAccelerationTrims>

	accInitFilters();
 800072c:	f7ff ff40 	bl	80005b0 <accInitFilters>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000e4 	.word	0x200000e4
 800073c:	200002bc 	.word	0x200002bc
 8000740:	200001d0 	.word	0x200001d0
 8000744:	20000280 	.word	0x20000280
 8000748:	20000104 	.word	0x20000104
 800074c:	200001d4 	.word	0x200001d4

08000750 <accUpdate>:

void accUpdate(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000756:	4b44      	ldr	r3, [pc, #272]	; (8000868 <accUpdate+0x118>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	4843      	ldr	r0, [pc, #268]	; (8000868 <accUpdate+0x118>)
 800075c:	4798      	blx	r3
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d07d      	beq.n	8000860 <accUpdate+0x110>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <accUpdate+0x118>)
 8000766:	2201      	movs	r2, #1
 8000768:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	e014      	b.n	800079c <accUpdate+0x4c>
        acc.accADC[axis] = acc.dev.ADCRaw[axis];
 8000772:	4a3d      	ldr	r2, [pc, #244]	; (8000868 <accUpdate+0x118>)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3304      	adds	r3, #4
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000788:	4a37      	ldr	r2, [pc, #220]	; (8000868 <accUpdate+0x118>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3312      	adds	r3, #18
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	dde7      	ble.n	8000772 <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <accUpdate+0x11c>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d025      	beq.n	80007f6 <accUpdate+0xa6>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	e01f      	b.n	80007f0 <accUpdate+0xa0>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	4613      	mov	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <accUpdate+0x11c>)
 80007bc:	4413      	add	r3, r2
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	4929      	ldr	r1, [pc, #164]	; (8000868 <accUpdate+0x118>)
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3312      	adds	r3, #18
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	eeb0 0a67 	vmov.f32	s0, s15
 80007d2:	4610      	mov	r0, r2
 80007d4:	f000 f9c2 	bl	8000b5c <biquadFilterApply>
 80007d8:	eef0 7a40 	vmov.f32	s15, s0
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <accUpdate+0x118>)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	3312      	adds	r3, #18
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	dddc      	ble.n	80007b0 <accUpdate+0x60>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <accUpdate+0x118>)
 80007f8:	7d9b      	ldrb	r3, [r3, #22]
 80007fa:	4619      	mov	r1, r3
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <accUpdate+0x120>)
 80007fe:	f004 fc11 	bl	8005024 <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <accUpdate+0x11c>)
 8000804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe98 	bl	800053c <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <accUpdate+0x11c>)
 800080e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000812:	3301      	adds	r3, #1
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <accUpdate+0x11c>)
 8000816:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	e01b      	b.n	8000858 <accUpdate+0x108>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <accUpdate+0x11c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3320      	adds	r3, #32
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	3304      	adds	r3, #4
 800082c:	ed93 7a00 	vldr	s14, [r3]
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <accUpdate+0x118>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3312      	adds	r3, #18
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <accUpdate+0x11c>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3320      	adds	r3, #32
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	3304      	adds	r3, #4
 800084e:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	dde0      	ble.n	8000820 <accUpdate+0xd0>
 800085e:	e000      	b.n	8000862 <accUpdate+0x112>
        return;
 8000860:	bf00      	nop
    }
}
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000e4 	.word	0x200000e4
 800086c:	2000013c 	.word	0x2000013c
 8000870:	2000012c 	.word	0x2000012c

08000874 <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <accGetAccumulationAverage+0xa0>)
 800087e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000882:	2b00      	cmp	r3, #0
 8000884:	dd2e      	ble.n	80008e4 <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e022      	b.n	80008d2 <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <accGetAccumulationAverage+0xa0>)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3320      	adds	r3, #32
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	3304      	adds	r3, #4
 8000898:	edd3 6a00 	vldr	s13, [r3]
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <accGetAccumulationAverage+0xa0>)
 800089e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008b6:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <accGetAccumulationAverage+0xa0>)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3320      	adds	r3, #32
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4413      	add	r3, r2
 80008c4:	3304      	adds	r3, #4
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	ddd9      	ble.n	800088c <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <accGetAccumulationAverage+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e010      	b.n	8000906 <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	e009      	b.n	80008fe <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	f04f 0200 	mov.w	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b02      	cmp	r3, #2
 8000902:	ddf2      	ble.n	80008ea <accGetAccumulationAverage+0x76>
        }
        return false;
 8000904:	2300      	movs	r3, #0
    }
}
 8000906:	4618      	mov	r0, r3
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000013c 	.word	0x2000013c

08000918 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	imuInit();
 800091c:	f001 fda2 	bl	8002464 <imuInit>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <attitudeUpdate>:

void attitudeUpdate(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 8000928:	f002 faac 	bl	8002e84 <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 800092c:	f002 fb8c 	bl	8003048 <imuCalculateThrottleAngleCorrection>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <i2cBusSetInstance+0x16>
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b04      	cmp	r3, #4
 8000948:	d901      	bls.n	800094e <i2cBusSetInstance+0x1a>
        return false;
 800094a:	2300      	movs	r3, #0
 800094c:	e016      	b.n	800097c <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	4613      	mov	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	4413      	add	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <i2cBusSetInstance+0x54>)
 800095c:	441a      	add	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	3b01      	subs	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	b252      	sxtb	r2, r2
 8000978:	711a      	strb	r2, [r3, #4]

    return true;
 800097a:	2301      	movs	r3, #1
}
 800097c:	4618      	mov	r0, r3
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	200001e0 	.word	0x200001e0

0800098c <controlMotorInit>:
 */

#include "control_motor.h"
#include "pid.h"

void controlMotorInit(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	pidInit();
 8000990:	f003 fb98 	bl	80040c4 <pidInit>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 800099c:	f004 f9d4 	bl	8004d48 <pidIncUpdateCounter>
    processRcCommand();
 80009a0:	f004 f9f2 	bl	8004d88 <processRcCommand>
    pidController();
 80009a4:	f003 fcf8 	bl	8004398 <pidController>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80009b6:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 80009ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80009be:	edd7 7a00 	vldr	s15, [r7]
 80009c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80009ce:	edd7 7a00 	vldr	s15, [r7]
 80009d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80009da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80009de:	eef0 7a66 	vmov.f32	s15, s13
}
 80009e2:	eeb0 0a67 	vmov.f32	s0, s15
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	ed87 0a00 	vstr	s0, [r7]
    return input;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	ee07 3a90 	vmov	s15, r3
}
 8000a02:	eeb0 0a67 	vmov.f32	s0, s15
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1a:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8000a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a22:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000a5c <pt1FilterGain+0x4c>
 8000a26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a32:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8000a36:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a3a:	edd7 7a00 	vldr	s15, [r7]
 8000a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a42:	ed97 7a00 	vldr	s14, [r7]
 8000a46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000a4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40c90fdb 	.word	0x40c90fdb

08000a60 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
    filter->k = k;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	605a      	str	r2, [r3, #4]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	ed93 7a00 	vldr	s14, [r3]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	ed97 6a00 	vldr	s12, [r7]
 8000aa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	ee07 3a90 	vmov	s15, r3
}
 8000ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6178      	str	r0, [r7, #20]
 8000ad8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000adc:	60f9      	str	r1, [r7, #12]
 8000ade:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	ed87 1a00 	vstr	s2, [r7]
 8000ae8:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	ed97 1a00 	vldr	s2, [r7]
 8000af0:	461a      	mov	r2, r3
 8000af2:	edd7 0a02 	vldr	s1, [r7, #8]
 8000af6:	68f9      	ldr	r1, [r7, #12]
 8000af8:	ed97 0a04 	vldr	s0, [r7, #16]
 8000afc:	6978      	ldr	r0, [r7, #20]
 8000afe:	f000 f877 	bl	8000bf0 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	699a      	ldr	r2, [r3, #24]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	6a1a      	ldr	r2, [r3, #32]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	61da      	str	r2, [r3, #28]
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b38:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 8000b3a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000b58 <biquadFilterInitLPF+0x2c>
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	ed97 0a02 	vldr	s0, [r7, #8]
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff ffc0 	bl	8000ad0 <biquadFilterInit>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	3f3504f3 	.word	0x3f3504f3

08000b5c <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	ed93 7a00 	vldr	s14, [r3]
 8000b6e:	edd7 7a00 	vldr	s15, [r7]
 8000b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b80:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b8a:	edd7 7a00 	vldr	s15, [r7]
 8000b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ba0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	ed93 7a02 	vldr	s14, [r3, #8]
 8000bba:	edd7 7a00 	vldr	s15, [r7]
 8000bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	edd3 6a04 	vldr	s13, [r3, #16]
 8000bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	ee07 3a90 	vmov	s15, r3
}
 8000be0:	eeb0 0a67 	vmov.f32	s0, s15
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6178      	str	r0, [r7, #20]
 8000bf8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000bfc:	60f9      	str	r1, [r7, #12]
 8000bfe:	edc7 0a02 	vstr	s1, [r7, #8]
 8000c02:	4613      	mov	r3, r2
 8000c04:	ed87 1a00 	vstr	s2, [r7]
 8000c08:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 8000c0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c0e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000dc8 <biquadFilterUpdate+0x1d8>
 8000c12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c24:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000dcc <biquadFilterUpdate+0x1dc>
 8000c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8000c30:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000c34:	f000 fa24 	bl	8001080 <sin_approx>
 8000c38:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8000c3c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000c40:	f000 fac8 	bl	80011d4 <cos_approx>
 8000c44:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8000c48:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c50:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c58:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d04f      	beq.n	8000d02 <biquadFilterUpdate+0x112>
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	dc6e      	bgt.n	8000d44 <biquadFilterUpdate+0x154>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <biquadFilterUpdate+0x80>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d02a      	beq.n	8000cc4 <biquadFilterUpdate+0xd4>
 8000c6e:	e069      	b.n	8000d44 <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 8000c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 8000c9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ca2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8000cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8000cc2:	e03f      	b.n	8000d44 <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000cca:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 8000ccc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000cd0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ce4:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 8000cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8000d00:	e020      	b.n	8000d44 <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	6a3a      	ldr	r2, [r7, #32]
 8000d06:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8000d10:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d14:	eef1 7a67 	vneg.f32	s15, s15
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 8000d1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d22:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8000d26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8000d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d34:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8000d42:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 8000d44:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d50:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	edd3 6a00 	vldr	s13, [r3]
 8000d5a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d82:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	edd3 6a03 	vldr	s13, [r3, #12]
 8000d96:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000daa:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dbe:	bf00      	nop
 8000dc0:	3730      	adds	r7, #48	; 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40c90fdb 	.word	0x40c90fdb
 8000dcc:	358637bd 	.word	0x358637bd

08000dd0 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dda:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de2:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 8000de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000df0:	eef0 0a47 	vmov.f32	s1, s14
 8000df4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000df8:	f007 f91e 	bl	8008038 <powf>
 8000dfc:	eef0 7a40 	vmov.f32	s15, s0
 8000e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e08:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0c:	f007 fa74 	bl	80082f8 <sqrtf>
 8000e10:	eeb0 7a40 	vmov.f32	s14, s0
 8000e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1c:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8000e20:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e28:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000e68 <pt2FilterGain+0x98>
 8000e2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e40:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 8000e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e48:	edd7 7a00 	vldr	s15, [r7]
 8000e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e50:	ed97 7a00 	vldr	s14, [r7]
 8000e54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e58:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40490fdb 	.word	0x40490fdb

08000e6c <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
    filter->k = k;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	609a      	str	r2, [r3, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000eb8:	ed97 6a00 	vldr	s12, [r7]
 8000ebc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	ed93 7a00 	vldr	s14, [r3]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 6a01 	vldr	s12, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	ee07 3a90 	vmov	s15, r3
}
 8000f00:	eeb0 0a67 	vmov.f32	s0, s15
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f1a:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <pt3FilterGain+0x94>)
 8000f20:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 8000f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f2e:	eef0 0a47 	vmov.f32	s1, s14
 8000f32:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000f36:	f007 f87f 	bl	8008038 <powf>
 8000f3a:	eef0 7a40 	vmov.f32	s15, s0
 8000f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f46:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4a:	f007 f9d5 	bl	80082f8 <sqrtf>
 8000f4e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5a:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8000f5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fa8 <pt3FilterGain+0x98>
 8000f6a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7e:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 8000f82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f86:	edd7 7a00 	vldr	s15, [r7]
 8000f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8e:	ed97 7a00 	vldr	s14, [r7]
 8000f92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f96:	eef0 7a66 	vmov.f32	s15, s13
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40400000 	.word	0x40400000
 8000fa8:	40490fdb 	.word	0x40490fdb

08000fac <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	60da      	str	r2, [r3, #12]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001000:	ed97 6a00 	vldr	s12, [r7]
 8001004:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	ed93 7a02 	vldr	s14, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	ed93 6a01 	vldr	s12, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	edd3 7a02 	vldr	s15, [r3, #8]
 800102e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	edd3 6a03 	vldr	s13, [r3, #12]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee76 7a67 	vsub.f32	s15, s12, s15
 800105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	ee07 3a90 	vmov	s15, r3
}
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 800108a:	edd7 7a01 	vldr	s15, [r7, #4]
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	ee17 3a90 	vmov	r3, s15
 8001096:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f113 0f20 	cmn.w	r3, #32
 800109e:	db02      	blt.n	80010a6 <sin_approx+0x26>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b20      	cmp	r3, #32
 80010a4:	dd0a      	ble.n	80010bc <sin_approx+0x3c>
 80010a6:	eddf 7a42 	vldr	s15, [pc, #264]	; 80011b0 <sin_approx+0x130>
 80010aa:	e079      	b.n	80011a0 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80011b4 <sin_approx+0x134>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80011b8 <sin_approx+0x138>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	dcee      	bgt.n	80010ac <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 80010ce:	e007      	b.n	80010e0 <sin_approx+0x60>
 80010d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80011b4 <sin_approx+0x134>
 80010d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80010e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80011bc <sin_approx+0x13c>
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d4ee      	bmi.n	80010d0 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 80010f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80011c0 <sin_approx+0x140>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dd0c      	ble.n	800111e <sin_approx+0x9e>
 8001104:	edd7 7a01 	vldr	s15, [r7, #4]
 8001108:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80011c0 <sin_approx+0x140>
 800110c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001110:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80011c0 <sin_approx+0x140>
 8001114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001118:	edc7 7a01 	vstr	s15, [r7, #4]
 800111c:	e014      	b.n	8001148 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 800111e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001122:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80011c4 <sin_approx+0x144>
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d50b      	bpl.n	8001148 <sin_approx+0xc8>
 8001130:	edd7 7a01 	vldr	s15, [r7, #4]
 8001134:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011c0 <sin_approx+0x140>
 8001138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80011c4 <sin_approx+0x144>
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 8001148:	edd7 7a01 	vldr	s15, [r7, #4]
 800114c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001150:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8001154:	ed97 7a01 	vldr	s14, [r7, #4]
 8001158:	edd7 7a02 	vldr	s15, [r7, #8]
 800115c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001160:	edd7 7a02 	vldr	s15, [r7, #8]
 8001164:	eddf 6a12 	vldr	s13, [pc, #72]	; 80011b0 <sin_approx+0x130>
 8001168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800116c:	eddf 6a16 	vldr	s13, [pc, #88]	; 80011c8 <sin_approx+0x148>
 8001170:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001174:	edd7 7a02 	vldr	s15, [r7, #8]
 8001178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80011cc <sin_approx+0x14c>
 8001180:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001184:	edd7 7a02 	vldr	s15, [r7, #8]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80011d0 <sin_approx+0x150>
 8001190:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001198:	edd7 7a01 	vldr	s15, [r7, #4]
 800119c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80011a0:	eeb0 0a67 	vmov.f32	s0, s15
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40c90fdb 	.word	0x40c90fdb
 80011b8:	40490fdb 	.word	0x40490fdb
 80011bc:	c0490fdb 	.word	0xc0490fdb
 80011c0:	3fc90fdb 	.word	0x3fc90fdb
 80011c4:	bfc90fdb 	.word	0xbfc90fdb
 80011c8:	3941e792 	.word	0x3941e792
 80011cc:	3c083097 	.word	0x3c083097
 80011d0:	3e2aa815 	.word	0x3e2aa815

080011d4 <cos_approx>:

float cos_approx(float x)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 80011de:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001200 <cos_approx+0x2c>
 80011e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ea:	eeb0 0a67 	vmov.f32	s0, s15
 80011ee:	f7ff ff47 	bl	8001080 <sin_approx>
 80011f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80011f6:	eeb0 0a67 	vmov.f32	s0, s15
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	3fc90fdb 	.word	0x3fc90fdb

08001204 <acos_approx>:

float acos_approx(float x)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 800120e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001212:	eef0 7ae7 	vabs.f32	s15, s15
 8001216:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 800121a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800121e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	f007 f865 	bl	80082f8 <sqrtf>
 800122e:	eef0 6a40 	vmov.f32	s13, s0
 8001232:	edd7 7a03 	vldr	s15, [r7, #12]
 8001236:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001298 <acos_approx+0x94>
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800129c <acos_approx+0x98>
 8001242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001246:	edd7 7a03 	vldr	s15, [r7, #12]
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012a0 <acos_approx+0x9c>
 8001252:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001256:	edd7 7a03 	vldr	s15, [r7, #12]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012a4 <acos_approx+0xa0>
 8001262:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126a:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d506      	bpl.n	800128a <acos_approx+0x86>
        return M_PIf - result;
 800127c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80012a8 <acos_approx+0xa4>
 8001280:	edd7 7a02 	vldr	s15, [r7, #8]
 8001284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001288:	e001      	b.n	800128e <acos_approx+0x8a>
    else
        return result;
 800128a:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	bc996e30 	.word	0xbc996e30
 800129c:	3d981627 	.word	0x3d981627
 80012a0:	3e593484 	.word	0x3e593484
 80012a4:	3fc90da4 	.word	0x3fc90da4
 80012a8:	40490fdb 	.word	0x40490fdb

080012ac <atan2_approx>:

float atan2_approx(float y, float x)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80012b6:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 80012ba:	edd7 7a00 	vldr	s15, [r7]
 80012be:	eef0 7ae7 	vabs.f32	s15, s15
 80012c2:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 80012c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ca:	eef0 7ae7 	vabs.f32	s15, s15
 80012ce:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	ed97 7a06 	vldr	s14, [r7, #24]
 80012de:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	dd01      	ble.n	80012f0 <atan2_approx+0x44>
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	e000      	b.n	80012f2 <atan2_approx+0x46>
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 80012f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	d018      	beq.n	8001334 <atan2_approx+0x88>
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	ed97 7a04 	vldr	s14, [r7, #16]
 800130e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d502      	bpl.n	8001322 <atan2_approx+0x76>
 800131c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001320:	e001      	b.n	8001326 <atan2_approx+0x7a>
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800132a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800132e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001332:	e002      	b.n	800133a <atan2_approx+0x8e>
    else res = 0.0f;
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 800133a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800133e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800141c <atan2_approx+0x170>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001420 <atan2_approx+0x174>
 800134a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800134e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001424 <atan2_approx+0x178>
 800135a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800135e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001366:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001428 <atan2_approx+0x17c>
 800136a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800136e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001376:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800142c <atan2_approx+0x180>
 800137a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800137e:	eef1 6a67 	vneg.f32	s13, s15
 8001382:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001386:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001430 <atan2_approx+0x184>
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001434 <atan2_approx+0x188>
 8001392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001396:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800139a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 80013ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80013b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd07      	ble.n	80013d0 <atan2_approx+0x124>
 80013c0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001438 <atan2_approx+0x18c>
 80013c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 80013d0:	edd7 7a00 	vldr	s15, [r7]
 80013d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	d507      	bpl.n	80013ee <atan2_approx+0x142>
 80013de:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800143c <atan2_approx+0x190>
 80013e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 80013ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	d505      	bpl.n	8001408 <atan2_approx+0x15c>
 80013fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001400:	eef1 7a67 	vneg.f32	s15, s15
 8001404:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	ee07 3a90 	vmov	s15, r3
}
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	372c      	adds	r7, #44	; 0x2c
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	3d4e0939 	.word	0x3d4e0939
 8001420:	3e9eb5e3 	.word	0x3e9eb5e3
 8001424:	3e16fa88 	.word	0x3e16fa88
 8001428:	3f7ffe45 	.word	0x3f7ffe45
 800142c:	34a8dfa7 	.word	0x34a8dfa7
 8001430:	3f24fb99 	.word	0x3f24fb99
 8001434:	3e16a269 	.word	0x3e16a269
 8001438:	3fc90fdb 	.word	0x3fc90fdb
 800143c:	40490fdb 	.word	0x40490fdb

08001440 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e054      	b.n	80014fa <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <rotateVector+0xd0>)
 8001456:	fb83 3102 	smull	r3, r1, r3, r2
 800145a:	17d3      	asrs	r3, r2, #31
 800145c:	1ac9      	subs	r1, r1, r3
 800145e:	460b      	mov	r3, r1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1c9a      	adds	r2, r3, #2
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <rotateVector+0xd0>)
 800146e:	fb83 3102 	smull	r3, r1, r3, r2
 8001472:	17d3      	asrs	r3, r2, #31
 8001474:	1ac9      	subs	r1, r1, r3
 8001476:	460b      	mov	r3, r1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	440b      	add	r3, r1
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	edd3 6a00 	vldr	s13, [r3]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	edd3 6a00 	vldr	s13, [r3]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e4:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	dda7      	ble.n	8001450 <rotateVector+0x10>
    }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	55555556 	.word	0x55555556

08001514 <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	f7ff fe54 	bl	80011d4 <cos_approx>
 800152c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	f7ff fda1 	bl	8001080 <sin_approx>
 800153e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	edd3 7a01 	vldr	s15, [r3, #4]
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	f7ff fe42 	bl	80011d4 <cos_approx>
 8001550:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a01 	vldr	s15, [r3, #4]
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f7ff fd8f 	bl	8001080 <sin_approx>
 8001562:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a02 	vldr	s15, [r3, #8]
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	f7ff fe30 	bl	80011d4 <cos_approx>
 8001574:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	edd3 7a02 	vldr	s15, [r3, #8]
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f7ff fd7d 	bl	8001080 <sin_approx>
 8001586:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 800158a:	ed97 7a07 	vldr	s14, [r7, #28]
 800158e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 800159a:	ed97 7a06 	vldr	s14, [r7, #24]
 800159e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a6:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 80015aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 80015ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015be:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 80015ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80015ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 80015dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015e0:	eeb1 7a67 	vneg.f32	s14, s15
 80015e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 80015f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80015fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001604:	edd7 7a04 	vldr	s15, [r7, #16]
 8001608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 8001612:	ed97 7a02 	vldr	s14, [r7, #8]
 8001616:	edd7 7a08 	vldr	s15, [r7, #32]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 800162c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001630:	eeb1 7a67 	vneg.f32	s14, s15
 8001634:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 8001642:	ed97 7a05 	vldr	s14, [r7, #20]
 8001646:	edd7 7a08 	vldr	s15, [r7, #32]
 800164a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 800165c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001660:	edd7 7a08 	vldr	s15, [r7, #32]
 8001664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001668:	edd7 7a03 	vldr	s15, [r7, #12]
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 8001676:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800167a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	ee07 3a90 	vmov	s15, r3
 80016a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80016bc <degreesToRadians+0x2c>
 80016aa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	3c8efa35 	.word	0x3c8efa35

080016c0 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 80016ca:	4a21      	ldr	r2, [pc, #132]	; (8001750 <gyroSetTargetLooptime+0x90>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <gyroSetTargetLooptime+0x94>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d028      	beq.n	800172a <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <gyroSetTargetLooptime+0x94>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016e4:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001748 <gyroSetTargetLooptime+0x88>
 80016e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016f0:	ee17 2a90 	vmov	r2, s15
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <gyroSetTargetLooptime+0x94>)
 80016f6:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <gyroSetTargetLooptime+0x90>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001704:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001748 <gyroSetTargetLooptime+0x88>
 8001708:	ee27 5b06 	vmul.f64	d5, d7, d6
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <gyroSetTargetLooptime+0x94>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001718:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800171c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001720:	ee17 2a90 	vmov	r2, s15
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <gyroSetTargetLooptime+0x94>)
 8001726:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8001728:	e005      	b.n	8001736 <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <gyroSetTargetLooptime+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <gyroSetTargetLooptime+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	00000000 	.word	0x00000000
 800174c:	412e8480 	.word	0x412e8480
 8001750:	20000000 	.word	0x20000000
 8001754:	20000280 	.word	0x20000280

08001758 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2204      	movs	r2, #4
 8001764:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 8001768:	f641 2308 	movw	r3, #6664	; 0x1a08
 800176c:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 800176e:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001772:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	89ba      	ldrh	r2, [r7, #12]
 8001780:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 8001784:	89fb      	ldrh	r3, [r7, #14]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e009      	b.n	80017b4 <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	332a      	adds	r3, #42	; 0x2a
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	ddf2      	ble.n	80017a0 <gyroInitSlewLimiter+0xe>
    }
}
 80017ba:	bf00      	nop
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffde 	bl	8001792 <gyroInitSlewLimiter>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fbc0 	bl	8004f88 <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fb73 	bl	8004f00 <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff93 	bl	8001758 <gyroSetSampleRate>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4610      	mov	r0, r2
 8001844:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffba 	bl	80017c8 <gyroInitSensorFilters>
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	80fb      	strh	r3, [r7, #6]
 8001868:	4613      	mov	r3, r2
 800186a:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <calculateNyquistAdjustedNotchHz+0x44>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <calculateNyquistAdjustedNotchHz+0x48>)
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	d208      	bcs.n	8001892 <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d902      	bls.n	800188e <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	80fb      	strh	r3, [r7, #6]
 800188c:	e001      	b.n	8001892 <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8001892:	88fb      	ldrh	r3, [r7, #6]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	20000280 	.word	0x20000280
 80018a4:	0007a120 	.word	0x0007a120

080018a8 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <gyroInitLowpassFilterLpf+0x22>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <gyroInitLowpassFilterLpf+0x2c>
 80018c8:	e009      	b.n	80018de <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <gyroInitLowpassFilterLpf+0x1b8>)
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <gyroInitLowpassFilterLpf+0x1bc>)
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80018d2:	e006      	b.n	80018e2 <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 80018d4:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <gyroInitLowpassFilterLpf+0x1c0>)
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 80018d8:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <gyroInitLowpassFilterLpf+0x1c4>)
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80018dc:	e001      	b.n	80018e2 <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 80018de:	2300      	movs	r3, #0
 80018e0:	e0b9      	b.n	8001a56 <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 80018e8:	4a61      	ldr	r2, [pc, #388]	; (8001a70 <gyroInitLowpassFilterLpf+0x1c8>)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001a74 <gyroInitLowpassFilterLpf+0x1cc>
 8001900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001904:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001912:	edd7 0a05 	vldr	s1, [r7, #20]
 8001916:	eeb0 0a67 	vmov.f32	s0, s15
 800191a:	f7ff f879 	bl	8000a10 <pt1FilterGain>
 800191e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	4a54      	ldr	r2, [pc, #336]	; (8001a78 <gyroInitLowpassFilterLpf+0x1d0>)
 8001926:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 808e 	beq.w	8001a4c <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	f200 808d 	bhi.w	8001a52 <gyroInitLowpassFilterLpf+0x1aa>
 8001938:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <gyroInitLowpassFilterLpf+0x98>)
 800193a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193e:	bf00      	nop
 8001940:	08001951 	.word	0x08001951
 8001944:	0800198b 	.word	0x0800198b
 8001948:	080019d9 	.word	0x080019d9
 800194c:	08001a13 	.word	0x08001a13
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 8001950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001952:	4a4a      	ldr	r2, [pc, #296]	; (8001a7c <gyroInitLowpassFilterLpf+0x1d4>)
 8001954:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
 800195a:	e00f      	b.n	800197c <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 800195c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	461a      	mov	r2, r3
 8001968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196a:	4413      	add	r3, r2
 800196c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f875 	bl	8000a60 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	3301      	adds	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	2b02      	cmp	r3, #2
 8001980:	ddec      	ble.n	800195c <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001988:	e063      	b.n	8001a52 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	429a      	cmp	r2, r3
 8001990:	d35e      	bcc.n	8001a50 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 8001992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001994:	4a3a      	ldr	r2, [pc, #232]	; (8001a80 <gyroInitLowpassFilterLpf+0x1d8>)
 8001996:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	e015      	b.n	80019ca <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 800199e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a0:	4613      	mov	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	461a      	mov	r2, r3
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	4413      	add	r3, r2
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	ee07 2a90 	vmov	s15, r2
 80019b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b8:	6839      	ldr	r1, [r7, #0]
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8b4 	bl	8000b2c <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	3301      	adds	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	dde6      	ble.n	800199e <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 80019d0:	2301      	movs	r3, #1
 80019d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 80019d6:	e03b      	b.n	8001a50 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 80019d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019da:	4a2a      	ldr	r2, [pc, #168]	; (8001a84 <gyroInitLowpassFilterLpf+0x1dc>)
 80019dc:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	e00f      	b.n	8001a04 <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 80019e4:	6a3a      	ldr	r2, [r7, #32]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	461a      	mov	r2, r3
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	4413      	add	r3, r2
 80019f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fa37 	bl	8000e6c <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	3301      	adds	r3, #1
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	ddec      	ble.n	80019e4 <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001a10:	e01f      	b.n	8001a52 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	4a1c      	ldr	r2, [pc, #112]	; (8001a88 <gyroInitLowpassFilterLpf+0x1e0>)
 8001a16:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	e00f      	b.n	8001a3e <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	4413      	add	r3, r2
 8001a2e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff faba 	bl	8000fac <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	ddec      	ble.n	8001a1e <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001a4a:	e002      	b.n	8001a52 <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 8001a4c:	bf00      	nop
 8001a4e:	e000      	b.n	8001a52 <gyroInitLowpassFilterLpf+0x1aa>
            break;
 8001a50:	bf00      	nop
    return ret;
 8001a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3738      	adds	r7, #56	; 0x38
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000408 	.word	0x20000408
 8001a64:	2000040c 	.word	0x2000040c
 8001a68:	20000484 	.word	0x20000484
 8001a6c:	20000488 	.word	0x20000488
 8001a70:	0007a120 	.word	0x0007a120
 8001a74:	358637bd 	.word	0x358637bd
 8001a78:	080009f1 	.word	0x080009f1
 8001a7c:	08000a87 	.word	0x08000a87
 8001a80:	08000b5d 	.word	0x08000b5d
 8001a84:	08000e9b 	.word	0x08000e9b
 8001a88:	08000fe3 	.word	0x08000fe3

08001a8c <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <gyroInitFilterNotch1+0xb0>)
 8001a9e:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <gyroInitFilterNotch1+0xb4>)
 8001aa0:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001aa4:	88ba      	ldrh	r2, [r7, #4]
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fed6 	bl	800185c <calculateNyquistAdjustedNotchHz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d03c      	beq.n	8001b34 <gyroInitFilterNotch1+0xa8>
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d039      	beq.n	8001b34 <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <gyroInitFilterNotch1+0xb0>)
 8001ac2:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <gyroInitFilterNotch1+0xb8>)
 8001ac4:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad2:	88bb      	ldrh	r3, [r7, #4]
 8001ad4:	ee07 3a10 	vmov	s14, r3
 8001ad8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001adc:	eef0 0a47 	vmov.f32	s1, s14
 8001ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae4:	f7fe ff62 	bl	80009ac <filterGetNotchQ>
 8001ae8:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e01d      	b.n	8001b2e <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b00:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <gyroInitFilterNotch1+0xb0>)
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	88fa      	ldrh	r2, [r7, #6]
 8001b08:	ee07 2a90 	vmov	s15, r2
 8001b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <gyroInitFilterNotch1+0xb0>)
 8001b12:	6851      	ldr	r1, [r2, #4]
 8001b14:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001b18:	2201      	movs	r2, #1
 8001b1a:	edd7 0a02 	vldr	s1, [r7, #8]
 8001b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe ffd4 	bl	8000ad0 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	ddde      	ble.n	8001af2 <gyroInitFilterNotch1+0x66>
        }
    }
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000280 	.word	0x20000280
 8001b40:	080009f1 	.word	0x080009f1
 8001b44:	08000b5d 	.word	0x08000b5d

08001b48 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	80fb      	strh	r3, [r7, #6]
 8001b54:	4613      	mov	r3, r2
 8001b56:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <gyroInitFilterNotch2+0xb0>)
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <gyroInitFilterNotch2+0xb4>)
 8001b5c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fe78 	bl	800185c <calculateNyquistAdjustedNotchHz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d03b      	beq.n	8001bee <gyroInitFilterNotch2+0xa6>
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d038      	beq.n	8001bee <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <gyroInitFilterNotch2+0xb0>)
 8001b7e:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <gyroInitFilterNotch2+0xb8>)
 8001b80:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	ee07 3a10 	vmov	s14, r3
 8001b94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001b98:	eef0 0a47 	vmov.f32	s1, s14
 8001b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba0:	f7fe ff04 	bl	80009ac <filterGetNotchQ>
 8001ba4:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	e01c      	b.n	8001be8 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <gyroInitFilterNotch2+0xb0>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	ee07 2a90 	vmov	s15, r2
 8001bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <gyroInitFilterNotch2+0xb0>)
 8001bcc:	6851      	ldr	r1, [r2, #4]
 8001bce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	edd7 0a02 	vldr	s1, [r7, #8]
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe ff77 	bl	8000ad0 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	dddf      	ble.n	8001bae <gyroInitFilterNotch2+0x66>
        }
    }
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000280 	.word	0x20000280
 8001bfc:	080009f1 	.word	0x080009f1
 8001c00:	08000b5d 	.word	0x08000b5d

08001c04 <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <gyroInitFilters+0x44>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fe48 	bl	80018a8 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <gyroInitFilters+0x44>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c20:	2100      	movs	r1, #0
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fe40 	bl	80018a8 <gyroInitLowpassFilterLpf>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <gyroInitFilters+0x44>)
 8001c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8001c32:	2100      	movs	r1, #0
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff ff29 	bl	8001a8c <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff83 	bl	8001b48 <gyroInitFilterNotch2>
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000280 	.word	0x20000280

08001c4c <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <gyroInit+0xb0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <gyroInit+0xb0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <gyroInit+0xb0>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <gyroInit+0xb0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <gyroInit+0xb0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <gyroInit+0xb0>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <gyroInit+0xb0>)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <gyroInit+0xb0>)
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <gyroInit+0xb4>)
 8001c8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <gyroInit+0xb0>)
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <gyroInit+0xb8>)
 8001c96:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 8001c9a:	481b      	ldr	r0, [pc, #108]	; (8001d08 <gyroInit+0xbc>)
 8001c9c:	f7ff fd9f 	bl	80017de <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <gyroInit+0xb0>)
 8001ca2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <gyroInit+0xb0>)
 8001ca8:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 8001caa:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <gyroInit+0xb0>)
 8001cac:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <gyroInit+0xbc>)
 8001cae:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <gyroInit+0xb0>)
 8001cb4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00f      	beq.n	8001cdc <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <gyroInit+0xb0>)
 8001cbe:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001cc2:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <gyroInit+0xb0>)
 8001cc8:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <gyroInit+0xb0>)
 8001ccc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001cd0:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <gyroInit+0xb0>)
 8001cd6:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 8001cda:	e006      	b.n	8001cea <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <gyroInit+0xb0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <gyroInit+0xb0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff fce8 	bl	80016c0 <gyroSetTargetLooptime>
	gyroInitFilters();
 8001cf0:	f7ff ff88 	bl	8001c04 <gyroInitFilters>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000280 	.word	0x20000280
 8001d00:	2000061c 	.word	0x2000061c
 8001d04:	2000062c 	.word	0x2000062c
 8001d08:	200002bc 	.word	0x200002bc

08001d0c <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4798      	blx	r3
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03b      	beq.n	8001d9c <gyroUpdateSensor+0x90>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADCRaw[X] - gyroSensor->gyroDev.gyroZero[X];
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	; 0xb8
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADCRaw[Y] - gyroSensor->gyroDev.gyroZero[Y];
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADCRaw[Z] - gyroSensor->gyroDev.gyroZero[Z];
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8001d92:	4619      	mov	r1, r3
 8001d94:	4610      	mov	r0, r2
 8001d96:	f003 f945 	bl	8005024 <alignSensorViaRotation>
 8001d9a:	e000      	b.n	8001d9e <gyroUpdateSensor+0x92>
        return;
 8001d9c:	bf00      	nop
}
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <gyroUpdate>:


void gyroUpdate(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 8001da8:	4840      	ldr	r0, [pc, #256]	; (8001eac <gyroUpdate+0x108>)
 8001daa:	f7ff ffaf 	bl	8001d0c <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <gyroUpdate+0x10c>)
 8001db0:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8001db4:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <gyroUpdate+0x10c>)
 8001db6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <gyroUpdate+0x10c>)
 8001dc0:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	; (8001eb0 <gyroUpdate+0x10c>)
 8001dc6:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <gyroUpdate+0x10c>)
 8001dcc:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <gyroUpdate+0x10c>)
 8001dd6:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 8001dda:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <gyroUpdate+0x10c>)
 8001ddc:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <gyroUpdate+0x10c>)
 8001de2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <gyroUpdate+0x10c>)
 8001dec:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <gyroUpdate+0x10c>)
 8001df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d02d      	beq.n	8001e56 <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <gyroUpdate+0x10c>)
 8001dfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e00:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e02:	edd2 7a04 	vldr	s15, [r2, #16]
 8001e06:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0a:	482a      	ldr	r0, [pc, #168]	; (8001eb4 <gyroUpdate+0x110>)
 8001e0c:	4798      	blx	r3
 8001e0e:	eef0 7a40 	vmov.f32	s15, s0
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e14:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e1e:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e20:	edd2 7a05 	vldr	s15, [r2, #20]
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <gyroUpdate+0x114>)
 8001e2a:	4798      	blx	r3
 8001e2c:	eef0 7a40 	vmov.f32	s15, s0
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e32:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e3e:	edd2 7a06 	vldr	s15, [r2, #24]
 8001e42:	eeb0 0a67 	vmov.f32	s0, s15
 8001e46:	481d      	ldr	r0, [pc, #116]	; (8001ebc <gyroUpdate+0x118>)
 8001e48:	4798      	blx	r3
 8001e4a:	eef0 7a40 	vmov.f32	s15, s0
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e50:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleSum[X] += gyro.gyroADC[X];
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
        gyro.sampleCount++;
    }
}
 8001e54:	e028      	b.n	8001ea8 <gyroUpdate+0x104>
        gyro.sampleSum[X] += gyro.gyroADC[X];
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e58:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e68:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e6e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e74:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e7e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e84:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e94:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <gyroUpdate+0x10c>)
 8001e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <gyroUpdate+0x10c>)
 8001ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200002bc 	.word	0x200002bc
 8001eb0:	20000280 	.word	0x20000280
 8001eb4:	20000488 	.word	0x20000488
 8001eb8:	200004b0 	.word	0x200004b0
 8001ebc:	200004d8 	.word	0x200004d8

08001ec0 <gyroFilter>:

void gyroFilter(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	e074      	b.n	8001fb6 <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <gyroFilter+0x10c>)
 8001ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 8001edc:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <gyroFilter+0x10c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	330a      	adds	r3, #10
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	e020      	b.n	8001f30 <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <gyroFilter+0x10c>)
 8001ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 8001ef8:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <gyroFilter+0x10c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	330a      	adds	r3, #10
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3304      	adds	r3, #4
 8001f04:	edd3 6a00 	vldr	s13, [r3]
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <gyroFilter+0x10c>)
 8001f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <gyroFilter+0x10c>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	330a      	adds	r3, #10
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <gyroFilter+0x10c>)
 8001f32:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f44:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <gyroFilter+0x10c>)
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	ed97 0a00 	vldr	s0, [r7]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4788      	blx	r1
 8001f52:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <gyroFilter+0x10c>)
 8001f58:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <gyroFilter+0x10c>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	ed97 0a00 	vldr	s0, [r7]
 8001f72:	4618      	mov	r0, r3
 8001f74:	4788      	blx	r1
 8001f76:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <gyroFilter+0x10c>)
 8001f7c:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <gyroFilter+0x10c>)
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	ed97 0a00 	vldr	s0, [r7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	4788      	blx	r1
 8001f9c:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 8001fa0:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <gyroFilter+0x10c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3304      	adds	r3, #4
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	dd87      	ble.n	8001ecc <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <gyroFilter+0x10c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000280 	.word	0x20000280

08001fd0 <gyroAccumulateMeasurements>:


void gyroAccumulateMeasurements(void) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	e038      	b.n	800204e <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 8001fdc:	4a23      	ldr	r2, [pc, #140]	; (800206c <gyroAccumulateMeasurements+0x9c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	ed93 7a00 	vldr	s14, [r3]
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <gyroAccumulateMeasurements+0xa0>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	edd3 6a00 	vldr	s13, [r3]
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <gyroAccumulateMeasurements+0xa4>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002008:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800200c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <gyroAccumulateMeasurements+0xa4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	4a11      	ldr	r2, [pc, #68]	; (800206c <gyroAccumulateMeasurements+0x9c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 8002030:	4a10      	ldr	r2, [pc, #64]	; (8002074 <gyroAccumulateMeasurements+0xa4>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3306      	adds	r3, #6
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	490c      	ldr	r1, [pc, #48]	; (8002070 <gyroAccumulateMeasurements+0xa0>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3301      	adds	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b02      	cmp	r3, #2
 8002052:	ddc3      	ble.n	8001fdc <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <gyroAccumulateMeasurements+0xa8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <gyroAccumulateMeasurements+0xa8>)
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000600 	.word	0x20000600
 8002070:	2000060c 	.word	0x2000060c
 8002074:	20000280 	.word	0x20000280
 8002078:	20000618 	.word	0x20000618

0800207c <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <gyroGetAccumulationAverage+0x9c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02e      	beq.n	80020ea <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <gyroGetAccumulationAverage+0xa0>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a21      	ldr	r2, [pc, #132]	; (8002118 <gyroGetAccumulationAverage+0x9c>)
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	fb02 f303 	mul.w	r3, r2, r3
 8002098:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e01c      	b.n	80020da <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <gyroGetAccumulationAverage+0xa4>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	edd3 6a00 	vldr	s13, [r3]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c2:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <gyroGetAccumulationAverage+0xa4>)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	dddf      	ble.n	80020a0 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <gyroGetAccumulationAverage+0x9c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
        return true;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e010      	b.n	800210c <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e009      	b.n	8002104 <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	3301      	adds	r3, #1
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	2b02      	cmp	r3, #2
 8002108:	ddf2      	ble.n	80020f0 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 800210a:	2300      	movs	r3, #0
    }
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20000618 	.word	0x20000618
 800211c:	20000280 	.word	0x20000280
 8002120:	20000600 	.word	0x20000600

08002124 <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    return false;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
    return rMat[2][2];
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <getCosTiltAngle+0x18>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	ee07 3a90 	vmov	s15, r3
}
 8002140:	eeb0 0a67 	vmov.f32	s0, s15
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	2000064c 	.word	0x2000064c

08002150 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	edd3 7a01 	vldr	s15, [r3, #4]
 800217c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	ed93 7a00 	vldr	s14, [r3]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edd3 7a03 	vldr	s15, [r3, #12]
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	ed93 7a03 	vldr	s14, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edd3 7a03 	vldr	s15, [r3, #12]
 800222c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 8002248:	4946      	ldr	r1, [pc, #280]	; (8002364 <imuComputeRotationMatrix+0x120>)
 800224a:	4847      	ldr	r0, [pc, #284]	; (8002368 <imuComputeRotationMatrix+0x124>)
 800224c:	f7ff ff80 	bl	8002150 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 8002250:	4b44      	ldr	r3, [pc, #272]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002252:	edd3 7a07 	vldr	s15, [r3, #28]
 8002256:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800225a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800225e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002262:	4b40      	ldr	r3, [pc, #256]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002264:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002268:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800226c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002270:	4b3e      	ldr	r3, [pc, #248]	; (800236c <imuComputeRotationMatrix+0x128>)
 8002272:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002278:	ed93 7a05 	vldr	s14, [r3, #20]
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <imuComputeRotationMatrix+0x120>)
 800227e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002286:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800228a:	4b38      	ldr	r3, [pc, #224]	; (800236c <imuComputeRotationMatrix+0x128>)
 800228c:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 8002290:	4b34      	ldr	r3, [pc, #208]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002292:	ed93 7a06 	vldr	s14, [r3, #24]
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002298:	edd3 7a02 	vldr	s15, [r3, #8]
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022a4:	4b31      	ldr	r3, [pc, #196]	; (800236c <imuComputeRotationMatrix+0x128>)
 80022a6:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 80022aa:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <imuComputeRotationMatrix+0x120>)
 80022ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80022b0:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <imuComputeRotationMatrix+0x120>)
 80022b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80022b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <imuComputeRotationMatrix+0x128>)
 80022c0:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <imuComputeRotationMatrix+0x120>)
 80022c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <imuComputeRotationMatrix+0x120>)
 80022d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80022dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <imuComputeRotationMatrix+0x128>)
 80022e6:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <imuComputeRotationMatrix+0x120>)
 80022ec:	ed93 7a08 	vldr	s14, [r3, #32]
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <imuComputeRotationMatrix+0x120>)
 80022f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <imuComputeRotationMatrix+0x128>)
 8002300:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002306:	ed93 7a06 	vldr	s14, [r3, #24]
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <imuComputeRotationMatrix+0x120>)
 800230c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002314:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <imuComputeRotationMatrix+0x128>)
 800231a:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002320:	ed93 7a08 	vldr	s14, [r3, #32]
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <imuComputeRotationMatrix+0x120>)
 8002326:	edd3 7a01 	vldr	s15, [r3, #4]
 800232a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <imuComputeRotationMatrix+0x128>)
 8002334:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <imuComputeRotationMatrix+0x120>)
 800233a:	edd3 7a04 	vldr	s15, [r3, #16]
 800233e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <imuComputeRotationMatrix+0x120>)
 800234c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002350:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <imuComputeRotationMatrix+0x128>)
 800235a:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000014 	.word	0x20000014
 8002368:	20000004 	.word	0x20000004
 800236c:	2000064c 	.word	0x2000064c

08002370 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 800237a:	edd7 7a01 	vldr	s15, [r7, #4]
 800237e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023a0 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002386:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800238a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800238e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002392:	eeb0 0a67 	vmov.f32	s0, s15
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40490fdb 	.word	0x40490fdb

080023a4 <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80023d8 <calculateThrottleAngleScale+0x34>
 80023bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80023dc <calculateThrottleAngleScale+0x38>
 80023c4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	44610000 	.word	0x44610000
 80023dc:	440f3d4c 	.word	0x440f3d4c

080023e0 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	460a      	mov	r2, r1
 80023ea:	80fb      	strh	r3, [r7, #6]
 80023ec:	4613      	mov	r3, r2
 80023ee:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <imuConfigure+0x70>)
 80023f2:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80023f6:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <imuConfigure+0x70>)
 80023fa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80023fe:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 8002400:	2019      	movs	r0, #25
 8002402:	f7ff f945 	bl	8001690 <degreesToRadians>
 8002406:	eef0 7a40 	vmov.f32	s15, s0
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f7fe fee1 	bl	80011d4 <cos_approx>
 8002412:	eef0 7a40 	vmov.f32	s15, s0
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <imuConfigure+0x74>)
 8002418:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 800241c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002420:	f7ff ffa6 	bl	8002370 <calculateAccZLowPassFilterRCTimeConstant>
 8002424:	eef0 7a40 	vmov.f32	s15, s0
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <imuConfigure+0x78>)
 800242a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ffb7 	bl	80023a4 <calculateThrottleAngleScale>
 8002436:	eef0 7a40 	vmov.f32	s15, s0
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <imuConfigure+0x7c>)
 800243c:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 8002440:	797b      	ldrb	r3, [r7, #5]
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <imuConfigure+0x80>)
 8002444:	6013      	str	r3, [r2, #0]
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000644 	.word	0x20000644
 8002454:	20000688 	.word	0x20000688
 8002458:	20000684 	.word	0x20000684
 800245c:	2000067c 	.word	0x2000067c
 8002460:	20000680 	.word	0x20000680

08002464 <imuInit>:

void imuInit(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 8002468:	210a      	movs	r1, #10
 800246a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800246e:	f7ff ffb7 	bl	80023e0 <imuConfigure>
    canUseGPSHeading = false;
 8002472:	4b03      	ldr	r3, [pc, #12]	; (8002480 <imuInit+0x1c>)
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 8002478:	f7ff fee4 	bl	8002244 <imuComputeRotationMatrix>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000001 	.word	0x20000001

08002484 <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	e012      	b.n	80024be <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 80024a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80024b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b4:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	3301      	adds	r3, #1
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	dde9      	ble.n	8002498 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <imuIsAccelerometerHealthy+0x94>)
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <imuIsAccelerometerHealthy+0x94>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80024d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024dc:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 80024e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024e4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800251c <imuIsAccelerometerHealthy+0x98>
 80024e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd0a      	ble.n	8002508 <imuIsAccelerometerHealthy+0x84>
 80024f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024f6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002520 <imuIsAccelerometerHealthy+0x9c>
 80024fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	d501      	bpl.n	8002508 <imuIsAccelerometerHealthy+0x84>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <imuIsAccelerometerHealthy+0x86>
 8002508:	2300      	movs	r3, #0
 800250a:	b2db      	uxtb	r3, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	200000e4 	.word	0x200000e4
 800251c:	3f4f5c29 	.word	0x3f4f5c29
 8002520:	3f9ae148 	.word	0x3f9ae148

08002524 <invSqrt>:

static float invSqrt(float x)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 800252e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002532:	f005 fee1 	bl	80082f8 <sqrtf>
 8002536:	eef0 7a40 	vmov.f32	s15, s0
 800253a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800253e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002542:	eef0 7a66 	vmov.f32	s15, s13
}
 8002546:	eeb0 0a67 	vmov.f32	s0, s15
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	ed2d 8b02 	vpush	{d8}
 8002556:	b09e      	sub	sp, #120	; 0x78
 8002558:	af00      	add	r7, sp, #0
 800255a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800255e:	edc7 0a08 	vstr	s1, [r7, #32]
 8002562:	ed87 1a07 	vstr	s2, [r7, #28]
 8002566:	edc7 1a06 	vstr	s3, [r7, #24]
 800256a:	4603      	mov	r3, r0
 800256c:	ed87 2a04 	vstr	s4, [r7, #16]
 8002570:	edc7 2a03 	vstr	s5, [r7, #12]
 8002574:	ed87 3a02 	vstr	s6, [r7, #8]
 8002578:	edc7 3a01 	vstr	s7, [r7, #4]
 800257c:	ed87 4a00 	vstr	s8, [r7]
 8002580:	75fb      	strb	r3, [r7, #23]
 8002582:	460b      	mov	r3, r1
 8002584:	75bb      	strb	r3, [r7, #22]
 8002586:	4613      	mov	r3, r2
 8002588:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 800258a:	edd7 7a08 	vldr	s15, [r7, #32]
 800258e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002592:	edd7 7a07 	vldr	s15, [r7, #28]
 8002596:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	eeb0 0a67 	vmov.f32	s0, s15
 80025ae:	f005 fea3 	bl	80082f8 <sqrtf>
 80025b2:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	677b      	str	r3, [r7, #116]	; 0x74
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	673b      	str	r3, [r7, #112]	; 0x70
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 80025c8:	7d7b      	ldrb	r3, [r7, #21]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d060      	beq.n	8002690 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 80025ce:	e007      	b.n	80025e0 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80025f8 <imuMahonyAHRSupdate+0xa8>
 80025d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025dc:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 80025e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80025f4 <imuMahonyAHRSupdate+0xa4>
 80025e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	dcee      	bgt.n	80025d0 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 80025f2:	e00d      	b.n	8002610 <imuMahonyAHRSupdate+0xc0>
 80025f4:	40490fdb 	.word	0x40490fdb
 80025f8:	40c90fdb 	.word	0x40c90fdb
 80025fc:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 8002600:	edd7 7a01 	vldr	s15, [r7, #4]
 8002604:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80025f8 <imuMahonyAHRSupdate+0xa8>
 8002608:	ee77 7a87 	vadd.f32	s15, s15, s14
 800260c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 8002610:	edd7 7a01 	vldr	s15, [r7, #4]
 8002614:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80025fc <imuMahonyAHRSupdate+0xac>
 8002618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800261c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002620:	d4ee      	bmi.n	8002600 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 8002622:	ed97 0a01 	vldr	s0, [r7, #4]
 8002626:	f7fe fd2b 	bl	8001080 <sin_approx>
 800262a:	eef0 7a40 	vmov.f32	s15, s0
 800262e:	eeb1 7a67 	vneg.f32	s14, s15
 8002632:	4bdb      	ldr	r3, [pc, #876]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002634:	edd3 7a00 	vldr	s15, [r3]
 8002638:	ee27 8a27 	vmul.f32	s16, s14, s15
 800263c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002640:	f7fe fdc8 	bl	80011d4 <cos_approx>
 8002644:	eeb0 7a40 	vmov.f32	s14, s0
 8002648:	4bd5      	ldr	r3, [pc, #852]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 800264a:	edd3 7a03 	vldr	s15, [r3, #12]
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002656:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 800265a:	4bd1      	ldr	r3, [pc, #836]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 800265c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002660:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002668:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 800266c:	4bcc      	ldr	r3, [pc, #816]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 800266e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002672:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 800267e:	4bc8      	ldr	r3, [pc, #800]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002680:	edd3 7a08 	vldr	s15, [r3, #32]
 8002684:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 8002690:	4bc4      	ldr	r3, [pc, #784]	; (80029a4 <imuMahonyAHRSupdate+0x454>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 8002696:	4bc3      	ldr	r3, [pc, #780]	; (80029a4 <imuMahonyAHRSupdate+0x454>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 800269c:	4bc1      	ldr	r3, [pc, #772]	; (80029a4 <imuMahonyAHRSupdate+0x454>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 80026a2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80026ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 809f 	beq.w	800280c <imuMahonyAHRSupdate+0x2bc>
 80026ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026d2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80029a8 <imuMahonyAHRSupdate+0x458>
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	f340 8095 	ble.w	800280c <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 80026e2:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80026e6:	f7ff ff1d 	bl	8002524 <invSqrt>
 80026ea:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 80026ee:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80026f2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 80026fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002702:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 800270e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002712:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 800271e:	4ba0      	ldr	r3, [pc, #640]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002720:	ed93 7a00 	vldr	s14, [r3]
 8002724:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	4b9c      	ldr	r3, [pc, #624]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 800272e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002732:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002736:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800273e:	4b98      	ldr	r3, [pc, #608]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002740:	edd3 6a02 	vldr	s13, [r3, #8]
 8002744:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002750:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 8002754:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002756:	ed93 7a03 	vldr	s14, [r3, #12]
 800275a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800275e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002762:	4b8f      	ldr	r3, [pc, #572]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002764:	edd3 6a04 	vldr	s13, [r3, #16]
 8002768:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002774:	4b8a      	ldr	r3, [pc, #552]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002776:	edd3 6a05 	vldr	s13, [r3, #20]
 800277a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800277e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 800278a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800278e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002792:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279e:	eeb0 0a67 	vmov.f32	s0, s15
 80027a2:	f005 fda9 	bl	80082f8 <sqrtf>
 80027a6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 80027aa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	eef1 7a67 	vneg.f32	s15, s15
 80027ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80027c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80027c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027cc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80027d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 80027d8:	4b71      	ldr	r3, [pc, #452]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80027da:	ed93 7a07 	vldr	s14, [r3, #28]
 80027de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 80027f2:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80027f4:	ed93 7a08 	vldr	s14, [r3, #32]
 80027f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002800:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 800280c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002810:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002814:	edd7 7a03 	vldr	s15, [r7, #12]
 8002818:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800281c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002820:	edd7 7a02 	vldr	s15, [r7, #8]
 8002824:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d068      	beq.n	8002908 <imuMahonyAHRSupdate+0x3b8>
 8002836:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800283a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80029a8 <imuMahonyAHRSupdate+0x458>
 800283e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	dd5f      	ble.n	8002908 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 8002848:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800284c:	f7ff fe6a 	bl	8002524 <invSqrt>
 8002850:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 8002854:	ed97 7a04 	vldr	s14, [r7, #16]
 8002858:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800285c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002860:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 8002864:	ed97 7a03 	vldr	s14, [r7, #12]
 8002868:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 8002874:	ed97 7a02 	vldr	s14, [r7, #8]
 8002878:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800287c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002880:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8002884:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002886:	ed93 7a08 	vldr	s14, [r3, #32]
 800288a:	edd7 7a03 	vldr	s15, [r7, #12]
 800288e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002892:	4b43      	ldr	r3, [pc, #268]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 8002894:	edd3 6a07 	vldr	s13, [r3, #28]
 8002898:	edd7 7a02 	vldr	s15, [r7, #8]
 800289c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80028a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ac:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 80028b0:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80028b2:	ed93 7a06 	vldr	s14, [r3, #24]
 80028b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028be:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80028c0:	edd3 6a08 	vldr	s13, [r3, #32]
 80028c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80028d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80028de:	ed93 7a07 	vldr	s14, [r3, #28]
 80028e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ea:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <imuMahonyAHRSupdate+0x450>)
 80028ec:	edd3 6a06 	vldr	s13, [r3, #24]
 80028f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002904:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8002908:	4b28      	ldr	r3, [pc, #160]	; (80029ac <imuMahonyAHRSupdate+0x45c>)
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002916:	dd53      	ble.n	80029c0 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8002918:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800291c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80029b0 <imuMahonyAHRSupdate+0x460>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	d556      	bpl.n	80029d8 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <imuMahonyAHRSupdate+0x45c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 8002930:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002934:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <imuMahonyAHRSupdate+0x464>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <imuMahonyAHRSupdate+0x464>)
 8002950:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 8002954:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002958:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800295c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002960:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <imuMahonyAHRSupdate+0x468>)
 800296a:	edd3 7a00 	vldr	s15, [r3]
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <imuMahonyAHRSupdate+0x468>)
 8002974:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 8002978:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800297c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002984:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002988:	ee27 7a27 	vmul.f32	s14, s14, s15
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <imuMahonyAHRSupdate+0x46c>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <imuMahonyAHRSupdate+0x46c>)
 8002998:	edc3 7a00 	vstr	s15, [r3]
 800299c:	e01c      	b.n	80029d8 <imuMahonyAHRSupdate+0x488>
 800299e:	bf00      	nop
 80029a0:	2000064c 	.word	0x2000064c
 80029a4:	200006ac 	.word	0x200006ac
 80029a8:	3c23d70a 	.word	0x3c23d70a
 80029ac:	20000644 	.word	0x20000644
 80029b0:	3eb2b8c2 	.word	0x3eb2b8c2
 80029b4:	2000068c 	.word	0x2000068c
 80029b8:	20000690 	.word	0x20000690
 80029bc:	20000694 	.word	0x20000694
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 80029c0:	4ba3      	ldr	r3, [pc, #652]	; (8002c50 <imuMahonyAHRSupdate+0x700>)
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 80029c8:	4ba2      	ldr	r3, [pc, #648]	; (8002c54 <imuMahonyAHRSupdate+0x704>)
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 80029d0:	4ba1      	ldr	r3, [pc, #644]	; (8002c58 <imuMahonyAHRSupdate+0x708>)
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 80029d8:	ed97 7a00 	vldr	s14, [r7]
 80029dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	4b9a      	ldr	r3, [pc, #616]	; (8002c50 <imuMahonyAHRSupdate+0x700>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80029f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f6:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 80029fa:	ed97 7a00 	vldr	s14, [r7]
 80029fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a06:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <imuMahonyAHRSupdate+0x704>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a10:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a18:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 8002a1c:	ed97 7a00 	vldr	s14, [r7]
 8002a20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a28:	4b8b      	ldr	r3, [pc, #556]	; (8002c58 <imuMahonyAHRSupdate+0x708>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 8002a3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a52:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 8002a56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a62:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 8002a6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 8002a86:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 8002a8c:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 8002a92:	4b72      	ldr	r3, [pc, #456]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 8002a98:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 8002a9e:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002aa8:	eef1 6a67 	vneg.f32	s13, s15
 8002aac:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ab0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ab4:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002ab8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002abc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ac0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ac4:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002ac8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002acc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ad0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	4b60      	ldr	r3, [pc, #384]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002ada:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002ae0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ae4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002ae8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002aec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002af0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002af4:	edd7 7a06 	vldr	s15, [r7, #24]
 8002af8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002afc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b00:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002b04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b16:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b20:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b2c:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002b30:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b38:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b3c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002b40:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b52:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b58:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002b60:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b68:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002b6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b78:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002b7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8c:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b8e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 8002b92:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b94:	ed93 7a00 	vldr	s14, [r3]
 8002b98:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002ba4:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ba8:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002baa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb6:	4b29      	ldr	r3, [pc, #164]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002bb8:	edd3 6a02 	vldr	s13, [r3, #8]
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002bbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002bcc:	edd3 6a03 	vldr	s13, [r3, #12]
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002bd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	eeb0 0a67 	vmov.f32	s0, s15
 8002be2:	f7ff fc9f 	bl	8002524 <invSqrt>
 8002be6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002bec:	ed93 7a00 	vldr	s14, [r3]
 8002bf0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf8:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002bfa:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 8002bfe:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002c00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c04:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002c0e:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8002c12:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002c14:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c18:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002c22:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002c28:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c2c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <imuMahonyAHRSupdate+0x70c>)
 8002c36:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 8002c3a:	f7ff fb03 	bl	8002244 <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <imuMahonyAHRSupdate+0x710>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	3778      	adds	r7, #120	; 0x78
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	ecbd 8b02 	vpop	{d8}
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	2000068c 	.word	0x2000068c
 8002c54:	20000690 	.word	0x20000690
 8002c58:	20000694 	.word	0x20000694
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	20000642 	.word	0x20000642

08002c64 <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <imuUpdateEulerAngles+0xc8>)
 8002c6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <imuUpdateEulerAngles+0xc8>)
 8002c70:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c74:	eef0 0a47 	vmov.f32	s1, s14
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	f7fe fb16 	bl	80012ac <atan2_approx>
 8002c80:	eef0 7a40 	vmov.f32	s15, s0
 8002c84:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d30 <imuUpdateEulerAngles+0xcc>
 8002c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c90:	f005 f978 	bl	8007f84 <lrintf>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b21a      	sxth	r2, r3
 8002c98:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <imuUpdateEulerAngles+0xd0>)
 8002c9a:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <imuUpdateEulerAngles+0xc8>)
 8002c9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ca2:	eef1 7a67 	vneg.f32	s15, s15
 8002ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8002caa:	f7fe faab 	bl	8001204 <acos_approx>
 8002cae:	eef0 7a40 	vmov.f32	s15, s0
 8002cb2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d38 <imuUpdateEulerAngles+0xd4>
 8002cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002d30 <imuUpdateEulerAngles+0xcc>
 8002cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	f005 f95d 	bl	8007f84 <lrintf>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b21a      	sxth	r2, r3
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <imuUpdateEulerAngles+0xd0>)
 8002cd0:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <imuUpdateEulerAngles+0xc8>)
 8002cd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <imuUpdateEulerAngles+0xc8>)
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	eef0 0a47 	vmov.f32	s1, s14
 8002ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce6:	f7fe fae1 	bl	80012ac <atan2_approx>
 8002cea:	eef0 7a40 	vmov.f32	s15, s0
 8002cee:	eef1 7a67 	vneg.f32	s15, s15
 8002cf2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002d30 <imuUpdateEulerAngles+0xcc>
 8002cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfe:	f005 f941 	bl	8007f84 <lrintf>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b21a      	sxth	r2, r3
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <imuUpdateEulerAngles+0xd0>)
 8002d08:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <imuUpdateEulerAngles+0xd0>)
 8002d0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	da09      	bge.n	8002d28 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <imuUpdateEulerAngles+0xd0>)
 8002d16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b21a      	sxth	r2, r3
 8002d24:	4b03      	ldr	r3, [pc, #12]	; (8002d34 <imuUpdateEulerAngles+0xd0>)
 8002d26:	809a      	strh	r2, [r3, #4]
    }
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000064c 	.word	0x2000064c
 8002d30:	440f3d4c 	.word	0x440f3d4c
 8002d34:	2000063c 	.word	0x2000063c
 8002d38:	3fc90fdb 	.word	0x3fc90fdb

08002d3c <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	460b      	mov	r3, r1
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 8002d52:	7cbb      	ldrb	r3, [r7, #18]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d163      	bne.n	8002e20 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <imuCalcKpGain+0x128>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <imuCalcKpGain+0x34>
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <imuCalcKpGain+0x12c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <imuCalcKpGain+0x34>
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <imuCalcKpGain+0x130>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d030      	beq.n	8002dd2 <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	eef0 7ae7 	vabs.f32	s15, s15
 8002d7a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	dc1c      	bgt.n	8002dc2 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eef0 7ae7 	vabs.f32	s15, s15
 8002d94:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da0:	dc0f      	bgt.n	8002dc2 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3308      	adds	r3, #8
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eef0 7ae7 	vabs.f32	s15, s15
 8002dae:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	dc02      	bgt.n	8002dc2 <imuCalcKpGain+0x86>
                || (!useAcc)) {
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <imuCalcKpGain+0x134>)
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <imuCalcKpGain+0x12c>)
 8002dca:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <imuCalcKpGain+0x128>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <imuCalcKpGain+0x128>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d011      	beq.n	8002dfe <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <imuCalcKpGain+0x128>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d309      	bcc.n	8002df8 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <imuCalcKpGain+0x12c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <imuCalcKpGain+0x128>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <imuCalcKpGain+0x130>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e013      	b.n	8002e20 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	74fb      	strb	r3, [r7, #19]
 8002dfc:	e010      	b.n	8002e20 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <imuCalcKpGain+0x12c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <imuCalcKpGain+0xe4>
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <imuCalcKpGain+0x12c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d307      	bcc.n	8002e20 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <imuCalcKpGain+0x138>)
 8002e14:	4413      	add	r3, r2
 8002e16:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <imuCalcKpGain+0x128>)
 8002e18:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <imuCalcKpGain+0x12c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <imuCalcKpGain+0x13c>)
 8002e22:	7cbb      	ldrb	r3, [r7, #18]
 8002e24:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <imuCalcKpGain+0x140>)
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e00d      	b.n	8002e4e <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <imuCalcKpGain+0x144>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	617b      	str	r3, [r7, #20]
       if (!armState) {
 8002e38:	7cbb      	ldrb	r3, [r7, #18]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d107      	bne.n	8002e4e <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 8002e3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4a:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	ee07 3a90 	vmov	s15, r3
}
 8002e54:	eeb0 0a67 	vmov.f32	s0, s15
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	2000069c 	.word	0x2000069c
 8002e68:	200006a0 	.word	0x200006a0
 8002e6c:	200006a4 	.word	0x200006a4
 8002e70:	0003d090 	.word	0x0003d090
 8002e74:	0007a120 	.word	0x0007a120
 8002e78:	20000698 	.word	0x20000698
 8002e7c:	41c80000 	.word	0x41c80000
 8002e80:	20000644 	.word	0x20000644

08002e84 <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	ed2d 8b08 	vpush	{d8-d11}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 8002e92:	2300      	movs	r3, #0
 8002e94:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 8002e96:	2301      	movs	r3, #1
 8002e98:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 8002e9a:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <imuCalculateEstimatedAttitude+0xec>)
 8002e9c:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 8002e9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ea2:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 8002ea4:	4b33      	ldr	r3, [pc, #204]	; (8002f74 <imuCalculateEstimatedAttitude+0xf0>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4413      	add	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 8002eae:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <imuCalculateEstimatedAttitude+0xf0>)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	6013      	str	r3, [r2, #0]

    useMag = true;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f8de 	bl	800207c <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8002ec0:	482d      	ldr	r0, [pc, #180]	; (8002f78 <imuCalculateEstimatedAttitude+0xf4>)
 8002ec2:	f7fd fcd7 	bl	8000874 <accGetAccumulationAverage>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 8002ecc:	482a      	ldr	r0, [pc, #168]	; (8002f78 <imuCalculateEstimatedAttitude+0xf4>)
 8002ece:	f7ff fad9 	bl	8002484 <imuIsAccelerometerHealthy>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	ee07 3a90 	vmov	s15, r3
 8002edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ee0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002f7c <imuCalculateEstimatedAttitude+0xf8>
 8002ee4:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8002ee8:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8002eec:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002f80 <imuCalculateEstimatedAttitude+0xfc>
 8002ef0:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8002ef4:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8002ef8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002f80 <imuCalculateEstimatedAttitude+0xfc>
 8002efc:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8002f00:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8002f04:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002f80 <imuCalculateEstimatedAttitude+0xfc>
 8002f08:	ee67 9a87 	vmul.f32	s19, s15, s14
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <imuCalculateEstimatedAttitude+0xf4>)
 8002f0e:	ed93 aa00 	vldr	s20, [r3]
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <imuCalculateEstimatedAttitude+0xf4>)
 8002f14:	edd3 aa01 	vldr	s21, [r3, #4]
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <imuCalculateEstimatedAttitude+0xf4>)
 8002f1a:	ed93 ba02 	vldr	s22, [r3, #8]
 8002f1e:	1d3a      	adds	r2, r7, #4
 8002f20:	7ffb      	ldrb	r3, [r7, #31]
 8002f22:	4619      	mov	r1, r3
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	f7ff ff09 	bl	8002d3c <imuCalcKpGain>
 8002f2a:	eef0 7a40 	vmov.f32	s15, s0
 8002f2e:	7f7a      	ldrb	r2, [r7, #29]
 8002f30:	7fb9      	ldrb	r1, [r7, #30]
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	eeb0 4a67 	vmov.f32	s8, s15
 8002f38:	edd7 3a06 	vldr	s7, [r7, #24]
 8002f3c:	eeb0 3a4b 	vmov.f32	s6, s22
 8002f40:	eef0 2a6a 	vmov.f32	s5, s21
 8002f44:	eeb0 2a4a 	vmov.f32	s4, s20
 8002f48:	4618      	mov	r0, r3
 8002f4a:	eef0 1a69 	vmov.f32	s3, s19
 8002f4e:	eeb0 1a49 	vmov.f32	s2, s18
 8002f52:	eef0 0a68 	vmov.f32	s1, s17
 8002f56:	eeb0 0a48 	vmov.f32	s0, s16
 8002f5a:	f7ff faf9 	bl	8002550 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 8002f5e:	f7ff fe81 	bl	8002c64 <imuUpdateEulerAngles>
}
 8002f62:	bf00      	nop
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	ecbd 8b08 	vpop	{d8-d11}
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	42e4c2a3 	.word	0x42e4c2a3
 8002f74:	200006a8 	.word	0x200006a8
 8002f78:	20000670 	.word	0x20000670
 8002f7c:	358637bd 	.word	0x358637bd
 8002f80:	3c8efa35 	.word	0x3c8efa35

08002f84 <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	ed2d 8b02 	vpush	{d8}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 8002f8e:	f7ff f8d1 	bl	8002134 <getCosTiltAngle>
 8002f92:	eef0 7a40 	vmov.f32	s15, s0
 8002f96:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003024 <calculateThrottleAngleCorrection+0xa0>
 8002f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d801      	bhi.n	8002fa8 <calculateThrottleAngleCorrection+0x24>
        return 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e036      	b.n	8003016 <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 8002fa8:	f7ff f8c4 	bl	8002134 <getCosTiltAngle>
 8002fac:	eef0 7a40 	vmov.f32	s15, s0
 8002fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb4:	f7fe f926 	bl	8001204 <acos_approx>
 8002fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <calculateThrottleAngleCorrection+0xa4>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fca:	f004 ffdb 	bl	8007f84 <lrintf>
 8002fce:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002fd6:	dd02      	ble.n	8002fde <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8002fd8:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002fdc:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <calculateThrottleAngleCorrection+0xa8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	ee07 3a90 	vmov	s15, r3
 8002ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003030 <calculateThrottleAngleCorrection+0xac>
 8002ff8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8003000:	f7fe f83e 	bl	8001080 <sin_approx>
 8003004:	eef0 7a40 	vmov.f32	s15, s0
 8003008:	ee68 7a27 	vmul.f32	s15, s16, s15
 800300c:	eeb0 0a67 	vmov.f32	s0, s15
 8003010:	f004 ffb8 	bl	8007f84 <lrintf>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	ecbd 8b02 	vpop	{d8}
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	3c75c28f 	.word	0x3c75c28f
 8003028:	2000067c 	.word	0x2000067c
 800302c:	20000680 	.word	0x20000680
 8003030:	44b0b6ef 	.word	0x44b0b6ef

08003034 <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 800304e:	f7ff ff99 	bl	8002f84 <calculateThrottleAngleCorrection>
 8003052:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ffed 	bl	8003034 <mixerSetThrottleAngleCorrection>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	330c      	adds	r3, #12
 800307c:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <compassDetect+0x8c>)
 800308a:	789b      	ldrb	r3, [r3, #2]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d10f      	bne.n	80030b0 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <compassDetect+0x8c>)
 8003092:	78db      	ldrb	r3, [r3, #3]
 8003094:	4619      	mov	r1, r3
 8003096:	68b8      	ldr	r0, [r7, #8]
 8003098:	f7fd fc4c 	bl	8000934 <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <compassDetect+0x8c>)
 800309e:	791a      	ldrb	r2, [r3, #4]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	711a      	strb	r2, [r3, #4]
        break;
 80030a4:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <compassDetect+0x8c>)
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <compassDetect+0x54>
 80030ae:	e001      	b.n	80030b4 <compassDetect+0x50>
        return false;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e019      	b.n	80030e8 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d10e      	bne.n	80030d6 <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d103      	bne.n	80030ca <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <compassDetect+0x8c>)
 80030c4:	791a      	ldrb	r2, [r3, #4]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2208      	movs	r2, #8
 80030ce:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 80030d0:	2302      	movs	r3, #2
 80030d2:	73fb      	strb	r3, [r7, #15]
        break;
 80030d4:	e002      	b.n	80030dc <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
        break;
 80030da:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <compassDetect+0x82>
        return false;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <compassDetect+0x84>
    }

    return true;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200007a4 	.word	0x200007a4

080030f4 <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 80030fe:	4a16      	ldr	r2, [pc, #88]	; (8003158 <magInit+0x64>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6013      	str	r3, [r2, #0]
	magDev.read = readFn;
 8003104:	4a14      	ldr	r2, [pc, #80]	; (8003158 <magInit+0x64>)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6053      	str	r3, [r2, #4]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 800310a:	f107 030f 	add.w	r3, r7, #15
 800310e:	4619      	mov	r1, r3
 8003110:	4811      	ldr	r0, [pc, #68]	; (8003158 <magInit+0x64>)
 8003112:	f7ff ffa7 	bl	8003064 <compassDetect>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d018      	beq.n	800314e <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <magInit+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	480d      	ldr	r0, [pc, #52]	; (8003158 <magInit+0x64>)
 8003122:	4798      	blx	r3
    doneInit = true;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <magInit+0x68>)
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <magInit+0x64>)
 800312e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <magInit+0x6c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 800313a:	4b09      	ldr	r3, [pc, #36]	; (8003160 <magInit+0x6c>)
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <magInit+0x64>)
 8003140:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 8003144:	4907      	ldr	r1, [pc, #28]	; (8003164 <magInit+0x70>)
 8003146:	4808      	ldr	r0, [pc, #32]	; (8003168 <magInit+0x74>)
 8003148:	f001 feda 	bl	8004f00 <buildRotationMatrixFromAlignment>
 800314c:	e000      	b.n	8003150 <magInit+0x5c>
        return;
 800314e:	bf00      	nop
}
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200006b8 	.word	0x200006b8
 800315c:	200007a2 	.word	0x200007a2
 8003160:	200007a4 	.word	0x200007a4
 8003164:	20000770 	.word	0x20000770
 8003168:	200007b4 	.word	0x200007b4

0800316c <magUpdate>:

void magUpdate(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev, magADCRaw)) {
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <magUpdate+0xc4>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	492f      	ldr	r1, [pc, #188]	; (8003234 <magUpdate+0xc8>)
 8003178:	482d      	ldr	r0, [pc, #180]	; (8003230 <magUpdate+0xc4>)
 800317a:	4798      	blx	r3
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d051      	beq.n	8003226 <magUpdate+0xba>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	e010      	b.n	80031aa <magUpdate+0x3e>
        mag.magADC[axis] = magADCRaw[axis];
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <magUpdate+0xc8>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003190:	ee07 3a90 	vmov	s15, r3
 8003194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <magUpdate+0xcc>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3301      	adds	r3, #1
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	ddeb      	ble.n	8003188 <magUpdate+0x1c>
    }
    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <magUpdate+0xc4>)
 80031b2:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80031b6:	4619      	mov	r1, r3
 80031b8:	481f      	ldr	r0, [pc, #124]	; (8003238 <magUpdate+0xcc>)
 80031ba:	f001 ff33 	bl	8005024 <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <magUpdate+0xd0>)
 80031c0:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 80031c2:	4b1f      	ldr	r3, [pc, #124]	; (8003240 <magUpdate+0xd4>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d02e      	beq.n	8003228 <magUpdate+0xbc>
        mag.magADC[X] -= magZero->raw[X];
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <magUpdate+0xcc>)
 80031cc:	ed93 7a00 	vldr	s14, [r3]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <magUpdate+0xcc>)
 80031e4:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <magUpdate+0xcc>)
 80031ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003200:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <magUpdate+0xcc>)
 8003202:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <magUpdate+0xcc>)
 8003208:	ed93 7a02 	vldr	s14, [r3, #8]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <magUpdate+0xcc>)
 8003220:	edc3 7a02 	vstr	s15, [r3, #8]
 8003224:	e000      	b.n	8003228 <magUpdate+0xbc>
        return;
 8003226:	bf00      	nop
    }
}
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200006b8 	.word	0x200006b8
 8003234:	2000079c 	.word	0x2000079c
 8003238:	200006ac 	.word	0x200006ac
 800323c:	200007ac 	.word	0x200007ac
 8003240:	200007a2 	.word	0x200007a2

08003244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800324a:	f002 f92e 	bl	80054aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800324e:	f000 f827 	bl	80032a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003252:	f000 f8f5 	bl	8003440 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003256:	f000 f895 	bl	8003384 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800325a:	f000 f8c3 	bl	80033e4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  sensorsInit(sensorGyroInit, sensorGyroRead, sensorAccInit, sensorAccRead, sensorMagInit, sensorMagRead);
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <main+0x44>)
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <main+0x48>)
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <main+0x4c>)
 8003268:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <main+0x50>)
 800326a:	490b      	ldr	r1, [pc, #44]	; (8003298 <main+0x54>)
 800326c:	480b      	ldr	r0, [pc, #44]	; (800329c <main+0x58>)
 800326e:	f001 ff93 	bl	8005198 <sensorsInit>
  controlMotorInit();
 8003272:	f7fd fb8b 	bl	800098c <controlMotorInit>
  attitudeInit();
 8003276:	f7fd fb4f 	bl	8000918 <attitudeInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	sensorsUpdate();
 800327a:	f001 ffa4 	bl	80051c6 <sensorsUpdate>
	controlMotorUpdate();
 800327e:	f7fd fb8b 	bl	8000998 <controlMotorUpdate>
	attitudeUpdate();
 8003282:	f7fd fb4f 	bl	8000924 <attitudeUpdate>
	sensorsUpdate();
 8003286:	e7f8      	b.n	800327a <main+0x36>
 8003288:	080036ab 	.word	0x080036ab
 800328c:	08003695 	.word	0x08003695
 8003290:	08003667 	.word	0x08003667
 8003294:	08003653 	.word	0x08003653
 8003298:	08003621 	.word	0x08003621
 800329c:	0800360d 	.word	0x0800360d

080032a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b094      	sub	sp, #80	; 0x50
 80032a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032a6:	f107 031c 	add.w	r3, r7, #28
 80032aa:	2234      	movs	r2, #52	; 0x34
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fe60 	bl	8007f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032b4:	f107 0308 	add.w	r3, r7, #8
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032c4:	f002 fd66 	bl	8005d94 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b2c      	ldr	r3, [pc, #176]	; (800337c <SystemClock_Config+0xdc>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	4a2b      	ldr	r2, [pc, #172]	; (800337c <SystemClock_Config+0xdc>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6413      	str	r3, [r2, #64]	; 0x40
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <SystemClock_Config+0xdc>)
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	607b      	str	r3, [r7, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <SystemClock_Config+0xe0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <SystemClock_Config+0xe0>)
 80032ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <SystemClock_Config+0xe0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003300:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003304:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003306:	2302      	movs	r3, #2
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800330a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003310:	2304      	movs	r3, #4
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003314:	2360      	movs	r3, #96	; 0x60
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003318:	2302      	movs	r3, #2
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800331c:	2304      	movs	r3, #4
 800331e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003320:	2302      	movs	r3, #2
 8003322:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003324:	f107 031c 	add.w	r3, r7, #28
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fd93 	bl	8005e54 <HAL_RCC_OscConfig>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003334:	f000 f9d3 	bl	80036de <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003338:	f002 fd3c 	bl	8005db4 <HAL_PWREx_EnableOverDrive>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003342:	f000 f9cc 	bl	80036de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003346:	230f      	movs	r3, #15
 8003348:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334a:	2302      	movs	r3, #2
 800334c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	2103      	movs	r1, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f003 f824 	bl	80063b0 <HAL_RCC_ClockConfig>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800336e:	f000 f9b6 	bl	80036de <Error_Handler>
  }
}
 8003372:	bf00      	nop
 8003374:	3750      	adds	r7, #80	; 0x50
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40007000 	.word	0x40007000

08003384 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <MX_USART3_UART_Init+0x58>)
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <MX_USART3_UART_Init+0x5c>)
 800338c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <MX_USART3_UART_Init+0x58>)
 8003390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003394:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <MX_USART3_UART_Init+0x58>)
 8003398:	2200      	movs	r2, #0
 800339a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <MX_USART3_UART_Init+0x58>)
 800339e:	2200      	movs	r2, #0
 80033a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033aa:	220c      	movs	r2, #12
 80033ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033bc:	2200      	movs	r2, #0
 80033be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033c6:	4805      	ldr	r0, [pc, #20]	; (80033dc <MX_USART3_UART_Init+0x58>)
 80033c8:	f003 fe40 	bl	800704c <HAL_UART_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80033d2:	f000 f984 	bl	80036de <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200007bc 	.word	0x200007bc
 80033e0:	40004800 	.word	0x40004800

080033e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80033ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033f2:	2206      	movs	r2, #6
 80033f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033f8:	2202      	movs	r2, #2
 80033fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003404:	2202      	movs	r2, #2
 8003406:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800340a:	2201      	movs	r2, #1
 800340c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003410:	2200      	movs	r2, #0
 8003412:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003416:	2200      	movs	r2, #0
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800341c:	2201      	movs	r2, #1
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003428:	f002 fb6b 	bl	8005b02 <HAL_PCD_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003432:	f000 f954 	bl	80036de <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000844 	.word	0x20000844

08003440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003446:	f107 031c 	add.w	r3, r7, #28
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
 8003454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003456:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a61      	ldr	r2, [pc, #388]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b5f      	ldr	r3, [pc, #380]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	4b5c      	ldr	r3, [pc, #368]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800349e:	4b56      	ldr	r3, [pc, #344]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a55      	ldr	r2, [pc, #340]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b6:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034bc:	f043 0308 	orr.w	r3, r3, #8
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a49      	ldr	r2, [pc, #292]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <MX_GPIO_Init+0x1b8>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80034e6:	2200      	movs	r2, #0
 80034e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80034ec:	4843      	ldr	r0, [pc, #268]	; (80035fc <MX_GPIO_Init+0x1bc>)
 80034ee:	f002 faef 	bl	8005ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	4842      	ldr	r0, [pc, #264]	; (8003600 <MX_GPIO_Init+0x1c0>)
 80034f8:	f002 faea 	bl	8005ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80034fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003502:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800350c:	f107 031c 	add.w	r3, r7, #28
 8003510:	4619      	mov	r1, r3
 8003512:	483c      	ldr	r0, [pc, #240]	; (8003604 <MX_GPIO_Init+0x1c4>)
 8003514:	f002 f930 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003518:	2332      	movs	r3, #50	; 0x32
 800351a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003528:	230b      	movs	r3, #11
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	4619      	mov	r1, r3
 8003532:	4834      	ldr	r0, [pc, #208]	; (8003604 <MX_GPIO_Init+0x1c4>)
 8003534:	f002 f920 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003538:	2386      	movs	r3, #134	; 0x86
 800353a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003548:	230b      	movs	r3, #11
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	482d      	ldr	r0, [pc, #180]	; (8003608 <MX_GPIO_Init+0x1c8>)
 8003554:	f002 f910 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003558:	f244 0381 	movw	r3, #16513	; 0x4081
 800355c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355e:	2301      	movs	r3, #1
 8003560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4822      	ldr	r0, [pc, #136]	; (80035fc <MX_GPIO_Init+0x1bc>)
 8003572:	f002 f901 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800357a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003588:	230b      	movs	r3, #11
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	481a      	ldr	r0, [pc, #104]	; (80035fc <MX_GPIO_Init+0x1bc>)
 8003594:	f002 f8f0 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003598:	2340      	movs	r3, #64	; 0x40
 800359a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359c:	2301      	movs	r3, #1
 800359e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	4619      	mov	r1, r3
 80035ae:	4814      	ldr	r0, [pc, #80]	; (8003600 <MX_GPIO_Init+0x1c0>)
 80035b0:	f002 f8e2 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b8:	2300      	movs	r3, #0
 80035ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035c0:	f107 031c 	add.w	r3, r7, #28
 80035c4:	4619      	mov	r1, r3
 80035c6:	480e      	ldr	r0, [pc, #56]	; (8003600 <MX_GPIO_Init+0x1c0>)
 80035c8:	f002 f8d6 	bl	8005778 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80035cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80035d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d2:	2302      	movs	r3, #2
 80035d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035de:	230b      	movs	r3, #11
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	4619      	mov	r1, r3
 80035e8:	4805      	ldr	r0, [pc, #20]	; (8003600 <MX_GPIO_Init+0x1c0>)
 80035ea:	f002 f8c5 	bl	8005778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80035ee:	bf00      	nop
 80035f0:	3730      	adds	r7, #48	; 0x30
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020400 	.word	0x40020400
 8003600:	40021800 	.word	0x40021800
 8003604:	40020800 	.word	0x40020800
 8003608:	40020000 	.word	0x40020000

0800360c <sensorGyroInit>:

/* USER CODE BEGIN 4 */
static void sensorGyroInit(struct gyroDev_s *gyro) { }
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	gyro->gyroADCRaw[0] = 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	gyro->gyroADCRaw[1] = -12345;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f64c 72c7 	movw	r2, #53191	; 0xcfc7
 8003636:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	gyro->gyroADCRaw[2] = -28414;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f249 1202 	movw	r2, #37122	; 0x9102
 8003640:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	return true;
 8003644:	2301      	movs	r3, #1
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
	acc->ADCRaw[0] = -4720;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f64e 5290 	movw	r2, #60816	; 0xed90
 8003674:	81da      	strh	r2, [r3, #14]
	acc->ADCRaw[1] = 5100;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f241 32ec 	movw	r2, #5100	; 0x13ec
 800367c:	821a      	strh	r2, [r3, #16]
	acc->ADCRaw[2] = 9300;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f242 4254 	movw	r2, #9300	; 0x2454
 8003684:	825a      	strh	r2, [r3, #18]
	return true;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <sensorMagInit>:

static bool sensorMagInit(struct magDev_s *magdev) {
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	return true;
 800369c:	2301      	movs	r3, #1
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *magdev, int16_t *data) {
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
	data[0] = 2464;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f44f 621a 	mov.w	r2, #2464	; 0x9a0
 80036ba:	801a      	strh	r2, [r3, #0]
	data[1] = -3257;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	3302      	adds	r3, #2
 80036c0:	f24f 3247 	movw	r2, #62279	; 0xf347
 80036c4:	801a      	strh	r2, [r3, #0]
	data[2] = 1588;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	3304      	adds	r3, #4
 80036ca:	f240 6234 	movw	r2, #1588	; 0x634
 80036ce:	801a      	strh	r2, [r3, #0]
	return true;
 80036d0:	2301      	movs	r3, #1
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036de:	b480      	push	{r7}
 80036e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036e2:	b672      	cpsid	i
}
 80036e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036e6:	e7fe      	b.n	80036e6 <Error_Handler+0x8>

080036e8 <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	da01      	bge.n	8003700 <constrain+0x18>
        return low;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	e006      	b.n	800370e <constrain+0x26>
    else if (amt > high)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	dd01      	ble.n	800370c <constrain+0x24>
        return high;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	e000      	b.n	800370e <constrain+0x26>
    else
        return amt;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	ed87 0a03 	vstr	s0, [r7, #12]
 8003724:	edc7 0a02 	vstr	s1, [r7, #8]
 8003728:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 800372c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003730:	edd7 7a02 	vldr	s15, [r7, #8]
 8003734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d501      	bpl.n	8003742 <constrainf+0x28>
        return low;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	e00b      	b.n	800375a <constrainf+0x40>
    else if (amt > high)
 8003742:	ed97 7a03 	vldr	s14, [r7, #12]
 8003746:	edd7 7a01 	vldr	s15, [r7, #4]
 800374a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	dd01      	ble.n	8003758 <constrainf+0x3e>
        return high;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	e000      	b.n	800375a <constrainf+0x40>
    else
        return amt;
 8003758:	68fb      	ldr	r3, [r7, #12]
}
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eeb0 0a67 	vmov.f32	s0, s15
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
    return true;
 8003770:	2301      	movs	r3, #1
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <pidAntiGravityEnabled+0x14>)
 8003782:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000de4 	.word	0x20000de4

08003794 <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 800379c:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <pidSetTargetLooptime+0x48>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <pidSetTargetLooptime+0x48>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037e0 <pidSetTargetLooptime+0x4c>
 80037b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <pidSetTargetLooptime+0x50>)
 80037b8:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <pidSetTargetLooptime+0x50>)
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <pidSetTargetLooptime+0x50>)
 80037cc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20001030 	.word	0x20001030
 80037e0:	358637bd 	.word	0x358637bd
 80037e4:	20000de4 	.word	0x20000de4

080037e8 <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b091      	sub	sp, #68	; 0x44
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 80037f0:	4bb0      	ldr	r3, [pc, #704]	; (8003ab4 <pidInitFilters+0x2cc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10f      	bne.n	8003818 <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80037f8:	4baf      	ldr	r3, [pc, #700]	; (8003ab8 <pidInitFilters+0x2d0>)
 80037fa:	4ab0      	ldr	r2, [pc, #704]	; (8003abc <pidInitFilters+0x2d4>)
 80037fc:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80037fe:	4bae      	ldr	r3, [pc, #696]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003800:	4aae      	ldr	r2, [pc, #696]	; (8003abc <pidInitFilters+0x2d4>)
 8003802:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8003806:	4bac      	ldr	r3, [pc, #688]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003808:	4aac      	ldr	r2, [pc, #688]	; (8003abc <pidInitFilters+0x2d4>)
 800380a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 800380e:	4baa      	ldr	r3, [pc, #680]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003810:	4aaa      	ldr	r2, [pc, #680]	; (8003abc <pidInitFilters+0x2d4>)
 8003812:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 8003816:	e267      	b.n	8003ce8 <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 8003818:	4ba7      	ldr	r3, [pc, #668]	; (8003ab8 <pidInitFilters+0x2d0>)
 800381a:	ed93 7a01 	vldr	s14, [r3, #4]
 800381e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382a:	ee17 3a90 	vmov	r3, s15
 800382e:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	889b      	ldrh	r3, [r3, #4]
 8003834:	461a      	mov	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	4293      	cmp	r3, r2
 800383a:	d303      	bcc.n	8003844 <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	889b      	ldrh	r3, [r3, #4]
 8003840:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003842:	e00a      	b.n	800385a <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	88db      	ldrh	r3, [r3, #6]
 8003848:	461a      	mov	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4293      	cmp	r3, r2
 800384e:	d902      	bls.n	8003856 <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003854:	e001      	b.n	800385a <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 800385a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03d      	beq.n	80038dc <pidInitFilters+0xf4>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	88db      	ldrh	r3, [r3, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d039      	beq.n	80038dc <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8003868:	4b93      	ldr	r3, [pc, #588]	; (8003ab8 <pidInitFilters+0x2d0>)
 800386a:	4a95      	ldr	r2, [pc, #596]	; (8003ac0 <pidInitFilters+0x2d8>)
 800386c:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 800386e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003870:	ee07 3a90 	vmov	s15, r3
 8003874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	88db      	ldrh	r3, [r3, #6]
 800387c:	ee07 3a10 	vmov	s14, r3
 8003880:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003884:	eef0 0a47 	vmov.f32	s1, s14
 8003888:	eeb0 0a67 	vmov.f32	s0, s15
 800388c:	f7fd f88e 	bl	80009ac <filterGetNotchQ>
 8003890:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003894:	2300      	movs	r3, #0
 8003896:	63bb      	str	r3, [r7, #56]	; 0x38
 8003898:	e01c      	b.n	80038d4 <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 800389a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	3318      	adds	r3, #24
 80038a6:	4a84      	ldr	r2, [pc, #528]	; (8003ab8 <pidInitFilters+0x2d0>)
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80038ae:	ee07 2a90 	vmov	s15, r2
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	4a7f      	ldr	r2, [pc, #508]	; (8003ab4 <pidInitFilters+0x2cc>)
 80038b8:	6811      	ldr	r1, [r2, #0]
 80038ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80038be:	2201      	movs	r2, #1
 80038c0:	edd7 0a04 	vldr	s1, [r7, #16]
 80038c4:	eeb0 0a67 	vmov.f32	s0, s15
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd f901 	bl	8000ad0 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	3301      	adds	r3, #1
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	dddf      	ble.n	800389a <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 80038da:	e002      	b.n	80038e2 <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80038dc:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <pidInitFilters+0x2d0>)
 80038de:	4a77      	ldr	r2, [pc, #476]	; (8003abc <pidInitFilters+0x2d4>)
 80038e0:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	885b      	ldrh	r3, [r3, #2]
 80038e6:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80c6 	beq.w	8003a7c <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	f200 80bb 	bhi.w	8003a72 <pidInitFilters+0x28a>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <pidInitFilters+0x11c>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003915 	.word	0x08003915
 8003908:	0800396b 	.word	0x0800396b
 800390c:	080039c7 	.word	0x080039c7
 8003910:	08003a1d 	.word	0x08003a1d
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8003914:	4b68      	ldr	r3, [pc, #416]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003916:	4a6b      	ldr	r2, [pc, #428]	; (8003ac4 <pidInitFilters+0x2dc>)
 8003918:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800391c:	2300      	movs	r3, #0
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
 8003920:	e01f      	b.n	8003962 <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8003922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	3398      	adds	r3, #152	; 0x98
 800392e:	4a62      	ldr	r2, [pc, #392]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003930:	189c      	adds	r4, r3, r2
 8003932:	89fb      	ldrh	r3, [r7, #14]
 8003934:	ee07 3a90 	vmov	s15, r3
 8003938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393c:	4b5e      	ldr	r3, [pc, #376]	; (8003ab8 <pidInitFilters+0x2d0>)
 800393e:	ed93 7a00 	vldr	s14, [r3]
 8003942:	eef0 0a47 	vmov.f32	s1, s14
 8003946:	eeb0 0a67 	vmov.f32	s0, s15
 800394a:	f7fd f861 	bl	8000a10 <pt1FilterGain>
 800394e:	eef0 7a40 	vmov.f32	s15, s0
 8003952:	eeb0 0a67 	vmov.f32	s0, s15
 8003956:	4620      	mov	r0, r4
 8003958:	f7fd f882 	bl	8000a60 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	3301      	adds	r3, #1
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	2b02      	cmp	r3, #2
 8003966:	dddc      	ble.n	8003922 <pidInitFilters+0x13a>
            }
            break;
 8003968:	e08c      	b.n	8003a84 <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	885b      	ldrh	r3, [r3, #2]
 800396e:	461a      	mov	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4293      	cmp	r3, r2
 8003974:	d922      	bls.n	80039bc <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8003976:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003978:	4a51      	ldr	r2, [pc, #324]	; (8003ac0 <pidInitFilters+0x2d8>)
 800397a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800397e:	2300      	movs	r3, #0
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
 8003982:	e017      	b.n	80039b4 <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 8003984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	3398      	adds	r3, #152	; 0x98
 8003990:	4a49      	ldr	r2, [pc, #292]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003992:	4413      	add	r3, r2
 8003994:	89fa      	ldrh	r2, [r7, #14]
 8003996:	ee07 2a90 	vmov	s15, r2
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	4a45      	ldr	r2, [pc, #276]	; (8003ab4 <pidInitFilters+0x2cc>)
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	4611      	mov	r1, r2
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd f8bf 	bl	8000b2c <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	3301      	adds	r3, #1
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	dde4      	ble.n	8003984 <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 80039ba:	e063      	b.n	8003a84 <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80039bc:	4b3e      	ldr	r3, [pc, #248]	; (8003ab8 <pidInitFilters+0x2d0>)
 80039be:	4a3f      	ldr	r2, [pc, #252]	; (8003abc <pidInitFilters+0x2d4>)
 80039c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 80039c4:	e05e      	b.n	8003a84 <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 80039c6:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <pidInitFilters+0x2d0>)
 80039c8:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <pidInitFilters+0x2e0>)
 80039ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	e01f      	b.n	8003a14 <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80039d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	3398      	adds	r3, #152	; 0x98
 80039e0:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <pidInitFilters+0x2d0>)
 80039e2:	189c      	adds	r4, r3, r2
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <pidInitFilters+0x2d0>)
 80039f0:	ed93 7a00 	vldr	s14, [r3]
 80039f4:	eef0 0a47 	vmov.f32	s1, s14
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	f7fd f9e8 	bl	8000dd0 <pt2FilterGain>
 8003a00:	eef0 7a40 	vmov.f32	s15, s0
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f7fd fa2f 	bl	8000e6c <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	3301      	adds	r3, #1
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	dddc      	ble.n	80039d4 <pidInitFilters+0x1ec>
            }
            break;
 8003a1a:	e033      	b.n	8003a84 <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8003a1c:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003a1e:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <pidInitFilters+0x2e4>)
 8003a20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003a24:	2300      	movs	r3, #0
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a28:	e01f      	b.n	8003a6a <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8003a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	3398      	adds	r3, #152	; 0x98
 8003a36:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003a38:	189c      	adds	r4, r3, r2
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a44:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003a46:	ed93 7a00 	vldr	s14, [r3]
 8003a4a:	eef0 0a47 	vmov.f32	s1, s14
 8003a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a52:	f7fd fa5d 	bl	8000f10 <pt3FilterGain>
 8003a56:	eef0 7a40 	vmov.f32	s15, s0
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f7fd faa4 	bl	8000fac <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	3301      	adds	r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	dddc      	ble.n	8003a2a <pidInitFilters+0x242>
            }
            break;
 8003a70:	e008      	b.n	8003a84 <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003a74:	4a11      	ldr	r2, [pc, #68]	; (8003abc <pidInitFilters+0x2d4>)
 8003a76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8003a7a:	e003      	b.n	8003a84 <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <pidInitFilters+0x2d0>)
 8003a7e:	4a0f      	ldr	r2, [pc, #60]	; (8003abc <pidInitFilters+0x2d4>)
 8003a80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80e5 	beq.w	8003c5a <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	f200 80da 	bhi.w	8003c50 <pidInitFilters+0x468>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <pidInitFilters+0x2bc>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ad1 	.word	0x08003ad1
 8003aa8:	08003b2f 	.word	0x08003b2f
 8003aac:	08003b95 	.word	0x08003b95
 8003ab0:	08003bf3 	.word	0x08003bf3
 8003ab4:	20001030 	.word	0x20001030
 8003ab8:	20000de4 	.word	0x20000de4
 8003abc:	080009f1 	.word	0x080009f1
 8003ac0:	08000b5d 	.word	0x08000b5d
 8003ac4:	08000a87 	.word	0x08000a87
 8003ac8:	08000e9b 	.word	0x08000e9b
 8003acc:	08000fe3 	.word	0x08000fe3
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8003ad0:	4b87      	ldr	r3, [pc, #540]	; (8003cf0 <pidInitFilters+0x508>)
 8003ad2:	4a88      	ldr	r2, [pc, #544]	; (8003cf4 <pidInitFilters+0x50c>)
 8003ad4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	e023      	b.n	8003b26 <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003aec:	4a80      	ldr	r2, [pc, #512]	; (8003cf0 <pidInitFilters+0x508>)
 8003aee:	4413      	add	r3, r2
 8003af0:	1d1c      	adds	r4, r3, #4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b00:	4b7b      	ldr	r3, [pc, #492]	; (8003cf0 <pidInitFilters+0x508>)
 8003b02:	ed93 7a00 	vldr	s14, [r3]
 8003b06:	eef0 0a47 	vmov.f32	s1, s14
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	f7fc ff7f 	bl	8000a10 <pt1FilterGain>
 8003b12:	eef0 7a40 	vmov.f32	s15, s0
 8003b16:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7fc ffa0 	bl	8000a60 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	3301      	adds	r3, #1
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	ddd8      	ble.n	8003ade <pidInitFilters+0x2f6>
            }
            break;
 8003b2c:	e099      	b.n	8003c62 <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003b34:	461a      	mov	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d926      	bls.n	8003b8a <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8003b3c:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <pidInitFilters+0x508>)
 8003b3e:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <pidInitFilters+0x510>)
 8003b40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	e01b      	b.n	8003b82 <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003b58:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <pidInitFilters+0x508>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	1d1a      	adds	r2, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003b64:	ee07 3a90 	vmov	s15, r3
 8003b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6c:	4b63      	ldr	r3, [pc, #396]	; (8003cfc <pidInitFilters+0x514>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4619      	mov	r1, r3
 8003b72:	eeb0 0a67 	vmov.f32	s0, s15
 8003b76:	4610      	mov	r0, r2
 8003b78:	f7fc ffd8 	bl	8000b2c <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	dde0      	ble.n	8003b4a <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8003b88:	e06b      	b.n	8003c62 <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8003b8a:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <pidInitFilters+0x508>)
 8003b8c:	4a5c      	ldr	r2, [pc, #368]	; (8003d00 <pidInitFilters+0x518>)
 8003b8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8003b92:	e066      	b.n	8003c62 <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8003b94:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <pidInitFilters+0x508>)
 8003b96:	4a5b      	ldr	r2, [pc, #364]	; (8003d04 <pidInitFilters+0x51c>)
 8003b98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	e023      	b.n	8003bea <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003bb0:	4a4f      	ldr	r2, [pc, #316]	; (8003cf0 <pidInitFilters+0x508>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	1d1c      	adds	r4, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc4:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <pidInitFilters+0x508>)
 8003bc6:	ed93 7a00 	vldr	s14, [r3]
 8003bca:	eef0 0a47 	vmov.f32	s1, s14
 8003bce:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd2:	f7fd f8fd 	bl	8000dd0 <pt2FilterGain>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	eeb0 0a67 	vmov.f32	s0, s15
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fd f944 	bl	8000e6c <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	ddd8      	ble.n	8003ba2 <pidInitFilters+0x3ba>
            }
            break;
 8003bf0:	e037      	b.n	8003c62 <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8003bf2:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <pidInitFilters+0x508>)
 8003bf4:	4a44      	ldr	r2, [pc, #272]	; (8003d08 <pidInitFilters+0x520>)
 8003bf6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	e023      	b.n	8003c48 <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003c0e:	4a38      	ldr	r2, [pc, #224]	; (8003cf0 <pidInitFilters+0x508>)
 8003c10:	4413      	add	r3, r2
 8003c12:	1d1c      	adds	r4, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <pidInitFilters+0x508>)
 8003c24:	ed93 7a00 	vldr	s14, [r3]
 8003c28:	eef0 0a47 	vmov.f32	s1, s14
 8003c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c30:	f7fd f96e 	bl	8000f10 <pt3FilterGain>
 8003c34:	eef0 7a40 	vmov.f32	s15, s0
 8003c38:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f9b5 	bl	8000fac <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	ddd8      	ble.n	8003c00 <pidInitFilters+0x418>
            }
            break;
 8003c4e:	e008      	b.n	8003c62 <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <pidInitFilters+0x508>)
 8003c52:	4a2b      	ldr	r2, [pc, #172]	; (8003d00 <pidInitFilters+0x518>)
 8003c54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 8003c58:	e003      	b.n	8003c62 <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <pidInitFilters+0x508>)
 8003c5c:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <pidInitFilters+0x518>)
 8003c5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <pidInitFilters+0x508>)
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <pidInitFilters+0x518>)
 8003c6e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8003c72:	e019      	b.n	8003ca8 <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8003c74:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <pidInitFilters+0x508>)
 8003c76:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <pidInitFilters+0x50c>)
 8003c78:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <pidInitFilters+0x508>)
 8003c8a:	ed93 7a00 	vldr	s14, [r3]
 8003c8e:	eef0 0a47 	vmov.f32	s1, s14
 8003c92:	eeb0 0a67 	vmov.f32	s0, s15
 8003c96:	f7fc febb 	bl	8000a10 <pt1FilterGain>
 8003c9a:	eef0 7a40 	vmov.f32	s15, s0
 8003c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca2:	481a      	ldr	r0, [pc, #104]	; (8003d0c <pidInitFilters+0x524>)
 8003ca4:	f7fc fedc 	bl	8000a60 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <pidInitFilters+0x508>)
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	eef0 0a67 	vmov.f32	s1, s15
 8003cb2:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003cb6:	f7fc feab 	bl	8000a10 <pt1FilterGain>
 8003cba:	eef0 7a40 	vmov.f32	s15, s0
 8003cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc2:	4813      	ldr	r0, [pc, #76]	; (8003d10 <pidInitFilters+0x528>)
 8003cc4:	f7fc fecc 	bl	8000a60 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <pidInitFilters+0x508>)
 8003cca:	edd3 7a00 	vldr	s15, [r3]
 8003cce:	eef0 0a67 	vmov.f32	s1, s15
 8003cd2:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003cd6:	f7fc fe9b 	bl	8000a10 <pt1FilterGain>
 8003cda:	eef0 7a40 	vmov.f32	s15, s0
 8003cde:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce2:	480c      	ldr	r0, [pc, #48]	; (8003d14 <pidInitFilters+0x52c>)
 8003ce4:	f7fc febc 	bl	8000a60 <pt1FilterInit>
}
 8003ce8:	3744      	adds	r7, #68	; 0x44
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000de4 	.word	0x20000de4
 8003cf4:	08000a87 	.word	0x08000a87
 8003cf8:	08000b5d 	.word	0x08000b5d
 8003cfc:	20001030 	.word	0x20001030
 8003d00:	080009f1 	.word	0x080009f1
 8003d04:	08000e9b 	.word	0x08000e9b
 8003d08:	08000fe3 	.word	0x08000fe3
 8003d0c:	20000f74 	.word	0x20000f74
 8003d10:	20000f80 	.word	0x20000f80
 8003d14:	20000f88 	.word	0x20000f88

08003d18 <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	e069      	b.n	8003dfa <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	440b      	add	r3, r1
 8003d34:	3308      	adds	r3, #8
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d40:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004074 <pidInitConfig+0x35c>
 8003d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d48:	4acb      	ldr	r2, [pc, #812]	; (8004078 <pidInitConfig+0x360>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	331c      	adds	r3, #28
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	4413      	add	r3, r2
 8003d52:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	440b      	add	r3, r1
 8003d64:	3309      	adds	r3, #9
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	ee07 3a90 	vmov	s15, r3
 8003d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d70:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800407c <pidInitConfig+0x364>
 8003d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d78:	4abf      	ldr	r2, [pc, #764]	; (8004078 <pidInitConfig+0x360>)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	331c      	adds	r3, #28
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4413      	add	r3, r2
 8003d82:	3304      	adds	r3, #4
 8003d84:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	440b      	add	r3, r1
 8003d96:	330a      	adds	r3, #10
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da2:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004080 <pidInitConfig+0x368>
 8003da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003daa:	4ab3      	ldr	r2, [pc, #716]	; (8004078 <pidInitConfig+0x360>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003db6:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	440b      	add	r3, r1
 8003dc8:	330c      	adds	r3, #12
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd4:	eddf 6aab 	vldr	s13, [pc, #684]	; 8004084 <pidInitConfig+0x36c>
 8003dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ddc:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004088 <pidInitConfig+0x370>
 8003de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de4:	4aa4      	ldr	r2, [pc, #656]	; (8004078 <pidInitConfig+0x360>)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8003df0:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	dd92      	ble.n	8003d26 <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 8003e00:	4b9d      	ldr	r3, [pc, #628]	; (8004078 <pidInitConfig+0x360>)
 8003e02:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8003e06:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e0e:	4b9a      	ldr	r3, [pc, #616]	; (8004078 <pidInitConfig+0x360>)
 8003e10:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e9b      	ldrb	r3, [r3, #26]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e20:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e28:	4b93      	ldr	r3, [pc, #588]	; (8004078 <pidInitConfig+0x360>)
 8003e2a:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7edb      	ldrb	r3, [r3, #27]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e3a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e42:	4b8d      	ldr	r3, [pc, #564]	; (8004078 <pidInitConfig+0x360>)
 8003e44:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7f1b      	ldrb	r3, [r3, #28]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e54:	4b88      	ldr	r3, [pc, #544]	; (8004078 <pidInitConfig+0x360>)
 8003e56:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8003e60:	4b85      	ldr	r3, [pc, #532]	; (8004078 <pidInitConfig+0x360>)
 8003e62:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e6c:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 8003e70:	ee07 3a90 	vmov	s15, r3
 8003e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e78:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800408c <pidInitConfig+0x374>
 8003e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e80:	4b7d      	ldr	r3, [pc, #500]	; (8004078 <pidInitConfig+0x360>)
 8003e82:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e8c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e98:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004090 <pidInitConfig+0x378>
 8003e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea0:	4b75      	ldr	r3, [pc, #468]	; (8004078 <pidInitConfig+0x360>)
 8003ea2:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2364      	movs	r3, #100	; 0x64
 8003eae:	fb02 f303 	mul.w	r3, r2, r3
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eba:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <pidInitConfig+0x360>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec4:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <pidInitConfig+0x360>)
 8003ec6:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 8003eca:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <pidInitConfig+0x360>)
 8003ecc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003ed0:	4a69      	ldr	r2, [pc, #420]	; (8004078 <pidInitConfig+0x360>)
 8003ed2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eda:	461a      	mov	r2, r3
 8003edc:	2364      	movs	r3, #100	; 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <pidInitConfig+0x360>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef4:	4b60      	ldr	r3, [pc, #384]	; (8004078 <pidInitConfig+0x360>)
 8003ef6:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 8003efa:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <pidInitConfig+0x360>)
 8003efc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f0a:	2b63      	cmp	r3, #99	; 0x63
 8003f0c:	d819      	bhi.n	8003f42 <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8004084 <pidInitConfig+0x36c>
 8003f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f24:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 8003f28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f3c:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <pidInitConfig+0x360>)
 8003f3e:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8003f46:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <pidInitConfig+0x360>)
 8003f48:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f52:	461a      	mov	r2, r3
 8003f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	4a46      	ldr	r2, [pc, #280]	; (8004078 <pidInitConfig+0x360>)
 8003f5e:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	4a41      	ldr	r2, [pc, #260]	; (8004078 <pidInitConfig+0x360>)
 8003f74:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <pidInitConfig+0x360>)
 8003f8c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9e:	4b36      	ldr	r3, [pc, #216]	; (8004078 <pidInitConfig+0x360>)
 8003fa0:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb0:	4b31      	ldr	r3, [pc, #196]	; (8004078 <pidInitConfig+0x360>)
 8003fb2:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <pidInitConfig+0x360>)
 8003fc4:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <pidInitConfig+0x360>)
 8003fd6:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe0:	ee07 3a90 	vmov	s15, r3
 8003fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <pidInitConfig+0x360>)
 8003fea:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <pidInitConfig+0x360>)
 8003ffe:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <pidInitConfig+0x360>)
 800400a:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004014:	4b18      	ldr	r3, [pc, #96]	; (8004078 <pidInitConfig+0x360>)
 8004016:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <pidInitConfig+0x360>)
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <pidInitConfig+0x360>)
 8004026:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800402a:	2b00      	cmp	r3, #0
 800402c:	d116      	bne.n	800405c <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <pidInitConfig+0x360>)
 8004030:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <pidInitConfig+0x360>)
 8004036:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004042:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004094 <pidInitConfig+0x37c>
 8004046:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800404a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800404e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <pidInitConfig+0x360>)
 8004058:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <pidInitConfig+0x360>)
 8004064:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	3d0330d7 	.word	0x3d0330d7
 8004078:	20000de4 	.word	0x20000de4
 800407c:	3e7a3f03 	.word	0x3e7a3f03
 8004080:	3a0aac97 	.word	0x3a0aac97
 8004084:	42c80000 	.word	0x42c80000
 8004088:	3c615875 	.word	0x3c615875
 800408c:	3fe66666 	.word	0x3fe66666
 8004090:	3c23d70a 	.word	0x3c23d70a
 8004094:	447a0000 	.word	0x447a0000

08004098 <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 80040a0:	2294      	movs	r2, #148	; 0x94
 80040a2:	4907      	ldr	r1, [pc, #28]	; (80040c0 <resetPidProfile+0x28>)
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f003 ff57 	bl	8007f58 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	221e      	movs	r2, #30
 80040ae:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	741a      	strb	r2, [r3, #16]
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	080083e8 	.word	0x080083e8

080040c4 <pidInit>:

void pidInit(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 80040ca:	4b2c      	ldr	r3, [pc, #176]	; (800417c <pidInit+0xb8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ffe2 	bl	8004098 <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <pidInit+0xbc>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fb5b 	bl	8003794 <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <pidInit+0xb8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fb80 	bl	80037e8 <pidInitFilters>
    pidInitConfig(currentPidProfile);
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <pidInit+0xb8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fe13 	bl	8003d18 <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	e038      	b.n	800416a <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 80040f8:	4922      	ldr	r1, [pc, #136]	; (8004184 <pidInit+0xc0>)
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 800410c:	491d      	ldr	r1, [pc, #116]	; (8004184 <pidInit+0xc0>)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3304      	adds	r3, #4
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 8004122:	4918      	ldr	r1, [pc, #96]	; (8004184 <pidInit+0xc0>)
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	3308      	adds	r3, #8
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 8004138:	4912      	ldr	r1, [pc, #72]	; (8004184 <pidInit+0xc0>)
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	330c      	adds	r3, #12
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 800414e:	490d      	ldr	r1, [pc, #52]	; (8004184 <pidInit+0xc0>)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3310      	adds	r3, #16
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3301      	adds	r3, #1
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b02      	cmp	r3, #2
 800416e:	ddc3      	ble.n	80040f8 <pidInit+0x34>
    }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	2000003c 	.word	0x2000003c
 8004180:	20000280 	.word	0x20000280
 8004184:	20001040 	.word	0x20001040

08004188 <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 800418e:	4b35      	ldr	r3, [pc, #212]	; (8004264 <rotateItermAndAxisError+0xdc>)
 8004190:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004194:	2b00      	cmp	r3, #0
 8004196:	d060      	beq.n	800425a <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 8004198:	4b32      	ldr	r3, [pc, #200]	; (8004264 <rotateItermAndAxisError+0xdc>)
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004268 <rotateItermAndAxisError+0xe0>
 80041a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a6:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
 80041ae:	e015      	b.n	80041dc <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 80041b0:	4a2e      	ldr	r2, [pc, #184]	; (800426c <rotateItermAndAxisError+0xe4>)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	3306      	adds	r3, #6
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	3304      	adds	r3, #4
 80041bc:	ed93 7a00 	vldr	s14, [r3]
 80041c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80041c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	3328      	adds	r3, #40	; 0x28
 80041ce:	443b      	add	r3, r7
 80041d0:	3b1c      	subs	r3, #28
 80041d2:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	3301      	adds	r3, #1
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	2b02      	cmp	r3, #2
 80041e0:	dde6      	ble.n	80041b0 <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <rotateItermAndAxisError+0xdc>)
 80041e4:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d036      	beq.n	800425a <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	e011      	b.n	8004216 <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 80041f2:	491f      	ldr	r1, [pc, #124]	; (8004270 <rotateItermAndAxisError+0xe8>)
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3304      	adds	r3, #4
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	443b      	add	r3, r7
 800420c:	3b28      	subs	r3, #40	; 0x28
 800420e:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	3301      	adds	r3, #1
 8004214:	623b      	str	r3, [r7, #32]
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	2b02      	cmp	r3, #2
 800421a:	ddea      	ble.n	80041f2 <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 800421c:	f107 020c 	add.w	r2, r7, #12
 8004220:	463b      	mov	r3, r7
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd f90b 	bl	8001440 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800422a:	2300      	movs	r3, #0
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	e011      	b.n	8004254 <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3328      	adds	r3, #40	; 0x28
 8004236:	443b      	add	r3, r7
 8004238:	3b28      	subs	r3, #40	; 0x28
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	480c      	ldr	r0, [pc, #48]	; (8004270 <rotateItermAndAxisError+0xe8>)
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4403      	add	r3, r0
 800424a:	3304      	adds	r3, #4
 800424c:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3301      	adds	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b02      	cmp	r3, #2
 8004258:	ddea      	ble.n	8004230 <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 800425a:	bf00      	nop
 800425c:	3728      	adds	r7, #40	; 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000de4 	.word	0x20000de4
 8004268:	3c8efa35 	.word	0x3c8efa35
 800426c:	20000280 	.word	0x20000280
 8004270:	20001040 	.word	0x20001040

08004274 <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 800427c:	4a06      	ldr	r2, [pc, #24]	; (8004298 <getSetpointRate+0x24>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	ee07 3a90 	vmov	s15, r3
}
 800428a:	eeb0 0a67 	vmov.f32	s0, s15
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	20001034 	.word	0x20001034

0800429c <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 80042a8:	4a29      	ldr	r2, [pc, #164]	; (8004350 <accelerationLimit+0xb4>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ed97 7a00 	vldr	s14, [r7]
 80042b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042bc:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 80042c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80042c8:	4a22      	ldr	r2, [pc, #136]	; (8004354 <accelerationLimit+0xb8>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3382      	adds	r3, #130	; 0x82
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	edd3 7a00 	vldr	s15, [r3]
 80042d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	dd27      	ble.n	8004330 <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 80042e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	dd0f      	ble.n	800430e <accelerationLimit+0x72>
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <accelerationLimit+0xb4>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	ed93 7a00 	vldr	s14, [r3]
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <accelerationLimit+0xb8>)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3382      	adds	r3, #130	; 0x82
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800430c:	e00e      	b.n	800432c <accelerationLimit+0x90>
 800430e:	4a10      	ldr	r2, [pc, #64]	; (8004350 <accelerationLimit+0xb4>)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	ed93 7a00 	vldr	s14, [r3]
 800431a:	4a0e      	ldr	r2, [pc, #56]	; (8004354 <accelerationLimit+0xb8>)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3382      	adds	r3, #130	; 0x82
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	edd3 7a00 	vldr	s15, [r3]
 8004328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432c:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 8004330:	4a07      	ldr	r2, [pc, #28]	; (8004350 <accelerationLimit+0xb4>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	ee07 3a90 	vmov	s15, r3
}
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	20001128 	.word	0x20001128
 8004354:	20000de4 	.word	0x20000de4

08004358 <pidResetIterm>:

static void pidResetIterm(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 800435e:	2300      	movs	r3, #0
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	e00d      	b.n	8004380 <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8004364:	490b      	ldr	r1, [pc, #44]	; (8004394 <pidResetIterm+0x3c>)
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3304      	adds	r3, #4
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3301      	adds	r3, #1
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	ddee      	ble.n	8004364 <pidResetIterm+0xc>
    }
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	20001040 	.word	0x20001040

08004398 <pidController>:

void pidController(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b09c      	sub	sp, #112	; 0x70
 800439c:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 800439e:	4bbd      	ldr	r3, [pc, #756]	; (8004694 <pidController+0x2fc>)
 80043a0:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80043a4:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 80043ac:	4bb9      	ldr	r3, [pc, #740]	; (8004694 <pidController+0x2fc>)
 80043ae:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d140      	bne.n	8004438 <pidController+0xa0>
 80043b6:	4bb7      	ldr	r3, [pc, #732]	; (8004694 <pidController+0x2fc>)
 80043b8:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03b      	beq.n	8004438 <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 80043c0:	4bb4      	ldr	r3, [pc, #720]	; (8004694 <pidController+0x2fc>)
 80043c2:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80043c6:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8004698 <pidController+0x300>
 80043ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043ce:	4bb1      	ldr	r3, [pc, #708]	; (8004694 <pidController+0x2fc>)
 80043d0:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e0:	4bac      	ldr	r3, [pc, #688]	; (8004694 <pidController+0x2fc>)
 80043e2:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 80043e6:	4bab      	ldr	r3, [pc, #684]	; (8004694 <pidController+0x2fc>)
 80043e8:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 80043ec:	4ba9      	ldr	r3, [pc, #676]	; (8004694 <pidController+0x2fc>)
 80043ee:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	4ba5      	ldr	r3, [pc, #660]	; (8004694 <pidController+0x2fc>)
 8004400:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 8004404:	4ba3      	ldr	r3, [pc, #652]	; (8004694 <pidController+0x2fc>)
 8004406:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 800440a:	4ba2      	ldr	r3, [pc, #648]	; (8004694 <pidController+0x2fc>)
 800440c:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004410:	eddf 6aa2 	vldr	s13, [pc, #648]	; 800469c <pidController+0x304>
 8004414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800441c:	4b9d      	ldr	r3, [pc, #628]	; (8004694 <pidController+0x2fc>)
 800441e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 8004422:	4b9c      	ldr	r3, [pc, #624]	; (8004694 <pidController+0x2fc>)
 8004424:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004428:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80046a0 <pidController+0x308>
 800442c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004430:	4b98      	ldr	r3, [pc, #608]	; (8004694 <pidController+0x2fc>)
 8004432:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 8004436:	e004      	b.n	8004442 <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 8004438:	4b96      	ldr	r3, [pc, #600]	; (8004694 <pidController+0x2fc>)
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 8004442:	4b94      	ldr	r3, [pc, #592]	; (8004694 <pidController+0x2fc>)
 8004444:	ed93 7a00 	vldr	s14, [r3]
 8004448:	4b92      	ldr	r3, [pc, #584]	; (8004694 <pidController+0x2fc>)
 800444a:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80046a4 <pidController+0x30c>
 8004456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800445a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 800445e:	4b8d      	ldr	r3, [pc, #564]	; (8004694 <pidController+0x2fc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8004464:	4b8b      	ldr	r3, [pc, #556]	; (8004694 <pidController+0x2fc>)
 8004466:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 800446a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800446e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	dd1b      	ble.n	80044b0 <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 8004478:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <pidController+0x310>)
 800447a:	edd3 7a00 	vldr	s15, [r3]
 800447e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004486:	4b83      	ldr	r3, [pc, #524]	; (8004694 <pidController+0x2fc>)
 8004488:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 800448c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004490:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004494:	eddf 0a85 	vldr	s1, [pc, #532]	; 80046ac <pidController+0x314>
 8004498:	eeb0 0a67 	vmov.f32	s0, s15
 800449c:	f7ff f93d 	bl	800371a <constrainf>
 80044a0:	eeb0 7a40 	vmov.f32	s14, s0
 80044a4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80044a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044ac:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80044b0:	2300      	movs	r3, #0
 80044b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b4:	e06e      	b.n	8004594 <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 80044b6:	4a7e      	ldr	r2, [pc, #504]	; (80046b0 <pidController+0x318>)
 80044b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ba:	3306      	adds	r3, #6
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	3304      	adds	r3, #4
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	3370      	adds	r3, #112	; 0x70
 80044ca:	443b      	add	r3, r7
 80044cc:	3b6c      	subs	r3, #108	; 0x6c
 80044ce:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 80044d0:	4b70      	ldr	r3, [pc, #448]	; (8004694 <pidController+0x2fc>)
 80044d2:	6999      	ldr	r1, [r3, #24]
 80044d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	3318      	adds	r3, #24
 80044e0:	4a6c      	ldr	r2, [pc, #432]	; (8004694 <pidController+0x2fc>)
 80044e2:	4413      	add	r3, r2
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	3370      	adds	r3, #112	; 0x70
 80044ec:	443b      	add	r3, r7
 80044ee:	3b6c      	subs	r3, #108	; 0x6c
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	eeb0 0a67 	vmov.f32	s0, s15
 80044f8:	4610      	mov	r0, r2
 80044fa:	4788      	blx	r1
 80044fc:	eef0 7a40 	vmov.f32	s15, s0
 8004500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	3370      	adds	r3, #112	; 0x70
 8004506:	443b      	add	r3, r7
 8004508:	3b6c      	subs	r3, #108	; 0x6c
 800450a:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 800450e:	4b61      	ldr	r3, [pc, #388]	; (8004694 <pidController+0x2fc>)
 8004510:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004514:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	3398      	adds	r3, #152	; 0x98
 8004520:	4a5c      	ldr	r2, [pc, #368]	; (8004694 <pidController+0x2fc>)
 8004522:	441a      	add	r2, r3
 8004524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	3370      	adds	r3, #112	; 0x70
 800452a:	443b      	add	r3, r7
 800452c:	3b6c      	subs	r3, #108	; 0x6c
 800452e:	edd3 7a00 	vldr	s15, [r3]
 8004532:	eeb0 0a67 	vmov.f32	s0, s15
 8004536:	4610      	mov	r0, r2
 8004538:	4788      	blx	r1
 800453a:	eef0 7a40 	vmov.f32	s15, s0
 800453e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	3370      	adds	r3, #112	; 0x70
 8004544:	443b      	add	r3, r7
 8004546:	3b6c      	subs	r3, #108	; 0x6c
 8004548:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 800454c:	4b51      	ldr	r3, [pc, #324]	; (8004694 <pidController+0x2fc>)
 800454e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8004552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004560:	4a4c      	ldr	r2, [pc, #304]	; (8004694 <pidController+0x2fc>)
 8004562:	4413      	add	r3, r2
 8004564:	1d1a      	adds	r2, r3, #4
 8004566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	3370      	adds	r3, #112	; 0x70
 800456c:	443b      	add	r3, r7
 800456e:	3b6c      	subs	r3, #108	; 0x6c
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	eeb0 0a67 	vmov.f32	s0, s15
 8004578:	4610      	mov	r0, r2
 800457a:	4788      	blx	r1
 800457c:	eef0 7a40 	vmov.f32	s15, s0
 8004580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	3370      	adds	r3, #112	; 0x70
 8004586:	443b      	add	r3, r7
 8004588:	3b6c      	subs	r3, #108	; 0x6c
 800458a:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 800458e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004590:	3301      	adds	r3, #1
 8004592:	66bb      	str	r3, [r7, #104]	; 0x68
 8004594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004596:	2b02      	cmp	r3, #2
 8004598:	dd8d      	ble.n	80044b6 <pidController+0x11e>
    }

    rotateItermAndAxisError();
 800459a:	f7ff fdf5 	bl	8004188 <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 800459e:	2300      	movs	r3, #0
 80045a0:	667b      	str	r3, [r7, #100]	; 0x64
 80045a2:	e1e4      	b.n	800496e <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 80045a4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80045a6:	f7ff fe65 	bl	8004274 <getSetpointRate>
 80045aa:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 80045ae:	4a39      	ldr	r2, [pc, #228]	; (8004694 <pidController+0x2fc>)
 80045b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045b2:	3382      	adds	r3, #130	; 0x82
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	edd3 7a00 	vldr	s15, [r3]
 80045bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	d006      	beq.n	80045d4 <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 80045c6:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80045ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80045cc:	f7ff fe66 	bl	800429c <accelerationLimit>
 80045d0:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 80045d4:	4a36      	ldr	r2, [pc, #216]	; (80046b0 <pidController+0x318>)
 80045d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045d8:	3306      	adds	r3, #6
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	3304      	adds	r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 80045e4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80045e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80045ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 80045f4:	492f      	ldr	r1, [pc, #188]	; (80046b4 <pidController+0x31c>)
 80045f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3304      	adds	r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <pidController+0x2fc>)
 800460e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004610:	331c      	adds	r3, #28
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	4413      	add	r3, r2
 8004616:	ed93 7a00 	vldr	s14, [r3]
 800461a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800461e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004622:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462a:	4922      	ldr	r1, [pc, #136]	; (80046b4 <pidController+0x31c>)
 800462c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 800463c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800463e:	2b02      	cmp	r3, #2
 8004640:	d11a      	bne.n	8004678 <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 8004642:	4b14      	ldr	r3, [pc, #80]	; (8004694 <pidController+0x2fc>)
 8004644:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8004648:	481a      	ldr	r0, [pc, #104]	; (80046b4 <pidController+0x31c>)
 800464a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	eeb0 0a67 	vmov.f32	s0, s15
 800465e:	4816      	ldr	r0, [pc, #88]	; (80046b8 <pidController+0x320>)
 8004660:	4788      	blx	r1
 8004662:	eef0 7a40 	vmov.f32	s15, s0
 8004666:	4913      	ldr	r1, [pc, #76]	; (80046b4 <pidController+0x31c>)
 8004668:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <pidController+0x2fc>)
 800467a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800467c:	331c      	adds	r3, #28
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 8004688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468a:	2b02      	cmp	r3, #2
 800468c:	d016      	beq.n	80046bc <pidController+0x324>
 800468e:	4b01      	ldr	r3, [pc, #4]	; (8004694 <pidController+0x2fc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	e014      	b.n	80046be <pidController+0x326>
 8004694:	20000de4 	.word	0x20000de4
 8004698:	3c23d70a 	.word	0x3c23d70a
 800469c:	3d4ccccd 	.word	0x3d4ccccd
 80046a0:	3ca3d70a 	.word	0x3ca3d70a
 80046a4:	41acb227 	.word	0x41acb227
 80046a8:	2000107c 	.word	0x2000107c
 80046ac:	00000000 	.word	0x00000000
 80046b0:	20000280 	.word	0x20000280
 80046b4:	20001040 	.word	0x20001040
 80046b8:	20000f74 	.word	0x20000f74
 80046bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 80046c0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80046c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80046c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80046d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046d4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80046d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80046e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e4:	4baa      	ldr	r3, [pc, #680]	; (8004990 <pidController+0x5f8>)
 80046e6:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 80046ea:	eef1 7a67 	vneg.f32	s15, s15
 80046ee:	4ba8      	ldr	r3, [pc, #672]	; (8004990 <pidController+0x5f8>)
 80046f0:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 80046f4:	eeb0 1a66 	vmov.f32	s2, s13
 80046f8:	eef0 0a67 	vmov.f32	s1, s15
 80046fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004700:	f7ff f80b 	bl	800371a <constrainf>
 8004704:	eef0 7a40 	vmov.f32	s15, s0
 8004708:	49a2      	ldr	r1, [pc, #648]	; (8004994 <pidController+0x5fc>)
 800470a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3304      	adds	r3, #4
 8004718:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 8004722:	4a9b      	ldr	r2, [pc, #620]	; (8004990 <pidController+0x5f8>)
 8004724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004726:	3302      	adds	r3, #2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	3304      	adds	r3, #4
 800472e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004730:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 8004732:	4a97      	ldr	r2, [pc, #604]	; (8004990 <pidController+0x5f8>)
 8004734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474a:	dd43      	ble.n	80047d4 <pidController+0x43c>
 800474c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004750:	2b00      	cmp	r3, #0
 8004752:	d13f      	bne.n	80047d4 <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	3370      	adds	r3, #112	; 0x70
 800475a:	443b      	add	r3, r7
 800475c:	3b6c      	subs	r3, #108	; 0x6c
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	4a8d      	ldr	r2, [pc, #564]	; (8004998 <pidController+0x600>)
 8004764:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004772:	eeb1 7a67 	vneg.f32	s14, s15
 8004776:	4b86      	ldr	r3, [pc, #536]	; (8004990 <pidController+0x5f8>)
 8004778:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 800477c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004780:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 8004784:	4a82      	ldr	r2, [pc, #520]	; (8004990 <pidController+0x5f8>)
 8004786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	4413      	add	r3, r2
 800478c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004790:	edd3 7a00 	vldr	s15, [r3]
 8004794:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 80047a0:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <pidController+0x5f8>)
 80047a2:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 80047a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80047aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ae:	4979      	ldr	r1, [pc, #484]	; (8004994 <pidController+0x5fc>)
 80047b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3308      	adds	r3, #8
 80047be:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 80047c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80047c6:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80047ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 80047d2:	e00a      	b.n	80047ea <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 80047d4:	496f      	ldr	r1, [pc, #444]	; (8004994 <pidController+0x5fc>)
 80047d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3308      	adds	r3, #8
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 80047ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	3370      	adds	r3, #112	; 0x70
 80047f0:	443b      	add	r3, r7
 80047f2:	3b6c      	subs	r3, #108	; 0x6c
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4968      	ldr	r1, [pc, #416]	; (8004998 <pidController+0x600>)
 80047f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 8004800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <pidController+0x480>
 8004808:	4a61      	ldr	r2, [pc, #388]	; (8004990 <pidController+0x5f8>)
 800480a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4413      	add	r3, r2
 8004810:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	e001      	b.n	800481c <pidController+0x484>
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 800481e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	dd17      	ble.n	800485c <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 800482c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004830:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004838:	4b55      	ldr	r3, [pc, #340]	; (8004990 <pidController+0x5f8>)
 800483a:	edd3 7a01 	vldr	s15, [r3, #4]
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 8004846:	4953      	ldr	r1, [pc, #332]	; (8004994 <pidController+0x5fc>)
 8004848:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	330c      	adds	r3, #12
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e00a      	b.n	8004872 <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 800485c:	494d      	ldr	r1, [pc, #308]	; (8004994 <pidController+0x5fc>)
 800485e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	330c      	adds	r3, #12
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 8004872:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004876:	eeb0 7ae7 	vabs.f32	s14, s15
 800487a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800499c <pidController+0x604>
 800487e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004882:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	ed97 7a07 	vldr	s14, [r7, #28]
 8004894:	edd7 7a06 	vldr	s15, [r7, #24]
 8004898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	dd01      	ble.n	80048a6 <pidController+0x50e>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	e000      	b.n	80048a8 <pidController+0x510>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 80048aa:	4b39      	ldr	r3, [pc, #228]	; (8004990 <pidController+0x5f8>)
 80048ac:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 80048b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80048b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048c0:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 80048c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d015      	beq.n	80048f6 <pidController+0x55e>
            pidData[axis].P *= agBoost;
 80048ca:	4932      	ldr	r1, [pc, #200]	; (8004994 <pidController+0x5fc>)
 80048cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	ed93 7a00 	vldr	s14, [r3]
 80048dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80048e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e4:	492b      	ldr	r1, [pc, #172]	; (8004994 <pidController+0x5fc>)
 80048e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 80048f6:	4927      	ldr	r1, [pc, #156]	; (8004994 <pidController+0x5fc>)
 80048f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	ed93 7a00 	vldr	s14, [r3]
 8004908:	4922      	ldr	r1, [pc, #136]	; (8004994 <pidController+0x5fc>)
 800490a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	3304      	adds	r3, #4
 8004918:	edd3 7a00 	vldr	s15, [r3]
 800491c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004920:	491c      	ldr	r1, [pc, #112]	; (8004994 <pidController+0x5fc>)
 8004922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	3308      	adds	r3, #8
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004938:	4916      	ldr	r1, [pc, #88]	; (8004994 <pidController+0x5fc>)
 800493a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	330c      	adds	r3, #12
 8004948:	edd3 7a00 	vldr	s15, [r3]
 800494c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004950:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 8004954:	490f      	ldr	r1, [pc, #60]	; (8004994 <pidController+0x5fc>)
 8004956:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	3310      	adds	r3, #16
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800496a:	3301      	adds	r3, #1
 800496c:	667b      	str	r3, [r7, #100]	; 0x64
 800496e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004970:	2b02      	cmp	r3, #2
 8004972:	f77f ae17 	ble.w	80045a4 <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <pidController+0x5f8>)
 8004978:	7a1b      	ldrb	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d004      	beq.n	8004988 <pidController+0x5f0>
 800497e:	f7fd fbd1 	bl	8002124 <gyroOverflowDetected>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d048      	beq.n	8004a1a <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004988:	2300      	movs	r3, #0
 800498a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498c:	e041      	b.n	8004a12 <pidController+0x67a>
 800498e:	bf00      	nop
 8004990:	20000de4 	.word	0x20000de4
 8004994:	20001040 	.word	0x20001040
 8004998:	20001134 	.word	0x20001134
 800499c:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 80049a0:	4924      	ldr	r1, [pc, #144]	; (8004a34 <pidController+0x69c>)
 80049a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 80049b4:	491f      	ldr	r1, [pc, #124]	; (8004a34 <pidController+0x69c>)
 80049b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	3304      	adds	r3, #4
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 80049ca:	491a      	ldr	r1, [pc, #104]	; (8004a34 <pidController+0x69c>)
 80049cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	3308      	adds	r3, #8
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 80049e0:	4914      	ldr	r1, [pc, #80]	; (8004a34 <pidController+0x69c>)
 80049e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	330c      	adds	r3, #12
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 80049f6:	490f      	ldr	r1, [pc, #60]	; (8004a34 <pidController+0x69c>)
 80049f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3310      	adds	r3, #16
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0e:	3301      	adds	r3, #1
 8004a10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	ddc3      	ble.n	80049a0 <pidController+0x608>
 8004a18:	e007      	b.n	8004a2a <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <pidController+0x6a0>)
 8004a1c:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <pidController+0x692>
        pidResetIterm();
 8004a24:	f7ff fc98 	bl	8004358 <pidResetIterm>
    }
}
 8004a28:	e7ff      	b.n	8004a2a <pidController+0x692>
 8004a2a:	bf00      	nop
 8004a2c:	3770      	adds	r7, #112	; 0x70
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20001040 	.word	0x20001040
 8004a38:	20000de4 	.word	0x20000de4

08004a3c <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <pidSetItermAccelerator+0x20>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000de4 	.word	0x20000de4

08004a60 <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 8004a6a:	88fb      	ldrh	r3, [r7, #6]
 8004a6c:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <checkForThrottleErrorResetState+0xe4>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	099b      	lsrs	r3, r3, #6
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 8004a78:	2264      	movs	r2, #100	; 0x64
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a80:	2214      	movs	r2, #20
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fe2f 	bl	80036e8 <constrain>
 8004a8a:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8004a8c:	4b2e      	ldr	r3, [pc, #184]	; (8004b48 <checkForThrottleErrorResetState+0xe8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8004a98:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <checkForThrottleErrorResetState+0xec>)
 8004a9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a9e:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <checkForThrottleErrorResetState+0xf0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	492a      	ldr	r1, [pc, #168]	; (8004b50 <checkForThrottleErrorResetState+0xf0>)
 8004aa6:	600a      	str	r2, [r1, #0]
 8004aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aac:	ee17 2a90 	vmov	r2, s15
 8004ab0:	b211      	sxth	r1, r2
 8004ab2:	4a28      	ldr	r2, [pc, #160]	; (8004b54 <checkForThrottleErrorResetState+0xf4>)
 8004ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <checkForThrottleErrorResetState+0xf0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	dc02      	bgt.n	8004ac8 <checkForThrottleErrorResetState+0x68>
        index = 0;
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <checkForThrottleErrorResetState+0xf0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <checkForThrottleErrorResetState+0xec>)
 8004aca:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <checkForThrottleErrorResetState+0xf0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <checkForThrottleErrorResetState+0xf4>)
 8004ad4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ae8:	ee17 3a90 	vmov	r3, s15
 8004aec:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <checkForThrottleErrorResetState+0xe8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d120      	bne.n	8004b3c <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 8004afa:	89bb      	ldrh	r3, [r7, #12]
 8004afc:	817b      	strh	r3, [r7, #10]
 8004afe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfb8      	it	lt
 8004b06:	425b      	neglt	r3, r3
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	dd0f      	ble.n	8004b34 <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <checkForThrottleErrorResetState+0xe8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b22:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b58 <checkForThrottleErrorResetState+0xf8>
 8004b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b2e:	f7ff ff85 	bl	8004a3c <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 8004b32:	e003      	b.n	8004b3c <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 8004b34:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004b5c <checkForThrottleErrorResetState+0xfc>
 8004b38:	f7ff ff80 	bl	8004a3c <pidSetItermAccelerator>
}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	10624dd3 	.word	0x10624dd3
 8004b48:	2000003c 	.word	0x2000003c
 8004b4c:	20001080 	.word	0x20001080
 8004b50:	20001140 	.word	0x20001140
 8004b54:	20001144 	.word	0x20001144
 8004b58:	3a83126f 	.word	0x3a83126f
 8004b5c:	00000000 	.word	0x00000000

08004b60 <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b6c:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 8004b70:	4b40      	ldr	r3, [pc, #256]	; (8004c74 <applyActualRates+0x114>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	3306      	adds	r3, #6
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b84:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004c78 <applyActualRates+0x118>
 8004b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 8004b90:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004b94:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b98:	f003 fa4e 	bl	8008038 <powf>
 8004b9c:	eeb0 7a40 	vmov.f32	s14, s0
 8004ba0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004bb0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004bb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 8004bcc:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <applyActualRates+0x114>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3303      	adds	r3, #3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	ee07 3a90 	vmov	s15, r3
 8004bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be8:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 8004bec:	2300      	movs	r3, #0
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <applyActualRates+0x114>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3309      	adds	r3, #9
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004c08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c14:	edc7 7a06 	vstr	s15, [r7, #24]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c22:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2e:	d505      	bpl.n	8004c3c <applyActualRates+0xdc>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c3a:	e001      	b.n	8004c40 <applyActualRates+0xe0>
 8004c3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c40:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 8004c44:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8004c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c50:	edd7 6a05 	vldr	s13, [r7, #20]
 8004c54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c60:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	ee07 3a90 	vmov	s15, r3
}
 8004c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6e:	3728      	adds	r7, #40	; 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	2000004c 	.word	0x2000004c
 8004c78:	42c80000 	.word	0x42c80000

08004c7c <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 8004c82:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <scaleRawSetpointToFpvCamAngle+0x90>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8004c88:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <scaleRawSetpointToFpvCamAngle+0x90>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8004c8e:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <scaleRawSetpointToFpvCamAngle+0x94>)
 8004c90:	ed93 7a00 	vldr	s14, [r3]
 8004c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <scaleRawSetpointToFpvCamAngle+0x98>)
 8004c9e:	edd3 6a00 	vldr	s13, [r3]
 8004ca2:	edd7 7a00 	vldr	s15, [r7]
 8004ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cae:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8004d18 <scaleRawSetpointToFpvCamAngle+0x9c>
 8004cb2:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8004d1c <scaleRawSetpointToFpvCamAngle+0xa0>
 8004cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cba:	f7fe fd2e 	bl	800371a <constrainf>
 8004cbe:	eef0 7a40 	vmov.f32	s15, s0
 8004cc2:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <scaleRawSetpointToFpvCamAngle+0x90>)
 8004cc4:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <scaleRawSetpointToFpvCamAngle+0x94>)
 8004cca:	ed93 7a00 	vldr	s14, [r3]
 8004cce:	edd7 7a00 	vldr	s15, [r7]
 8004cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <scaleRawSetpointToFpvCamAngle+0x98>)
 8004cd8:	edd3 6a00 	vldr	s13, [r3]
 8004cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8004d18 <scaleRawSetpointToFpvCamAngle+0x9c>
 8004cec:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004d1c <scaleRawSetpointToFpvCamAngle+0xa0>
 8004cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf4:	f7fe fd11 	bl	800371a <constrainf>
 8004cf8:	eef0 7a40 	vmov.f32	s15, s0
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <scaleRawSetpointToFpvCamAngle+0x90>)
 8004cfe:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20001034 	.word	0x20001034
 8004d10:	20000054 	.word	0x20000054
 8004d14:	2000116c 	.word	0x2000116c
 8004d18:	44f9c000 	.word	0x44f9c000
 8004d1c:	c4f9c000 	.word	0xc4f9c000

08004d20 <resetYawAxis>:

static void resetYawAxis(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <resetYawAxis+0x20>)
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <resetYawAxis+0x24>)
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20001080 	.word	0x20001080
 8004d44:	200010d8 	.word	0x200010d8

08004d48 <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <pidIncUpdateCounter+0x38>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <pidIncUpdateCounter+0x3c>)
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d58:	fb01 f202 	mul.w	r2, r1, r2
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 8004d64:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <pidIncUpdateCounter+0x38>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 8004d6a:	4b05      	ldr	r3, [pc, #20]	; (8004d80 <pidIncUpdateCounter+0x38>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <pidIncUpdateCounter+0x38>)
 8004d74:	701a      	strb	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000d4c 	.word	0x20000d4c
 8004d84:	20000000 	.word	0x20000000

08004d88 <processRcCommand>:


void processRcCommand(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 8004d8e:	f7fe fced 	bl	800376c <isUsingSticksForArming>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <processRcCommand+0x28>
 8004d98:	4b4c      	ldr	r3, [pc, #304]	; (8004ecc <processRcCommand+0x144>)
 8004d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d9e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004ed0 <processRcCommand+0x148>
 8004da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004daa:	d801      	bhi.n	8004db0 <processRcCommand+0x28>
        resetYawAxis();
 8004dac:	f7ff ffb8 	bl	8004d20 <resetYawAxis>
    }

    if (isRxDataNew) {
 8004db0:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <processRcCommand+0x14c>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <processRcCommand+0x36>
        newRxDataForFF = true;
 8004db8:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <processRcCommand+0x150>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 8004dbe:	4b45      	ldr	r3, [pc, #276]	; (8004ed4 <processRcCommand+0x14c>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <processRcCommand+0x52>
 8004dc6:	f7fe fcd9 	bl	800377c <pidAntiGravityEnabled>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 8004dd0:	4b42      	ldr	r3, [pc, #264]	; (8004edc <processRcCommand+0x154>)
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fe43 	bl	8004a60 <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 8004dda:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <processRcCommand+0x14c>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d06c      	beq.n	8004ebc <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e064      	b.n	8004eb2 <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d10d      	bne.n	8004e0a <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 8004dee:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <processRcCommand+0x158>)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	edd3 6a00 	vldr	s13, [r3]
 8004dfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <processRcCommand+0x15c>)
 8004dfc:	ed93 7a00 	vldr	s14, [r3]
 8004e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e04:	edc7 7a02 	vstr	s15, [r7, #8]
 8004e08:	e00c      	b.n	8004e24 <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 8004e0a:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <processRcCommand+0x158>)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	edd3 6a00 	vldr	s13, [r3]
 8004e16:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <processRcCommand+0x160>)
 8004e18:	ed93 7a00 	vldr	s14, [r3]
 8004e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e20:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 8004e24:	4a31      	ldr	r2, [pc, #196]	; (8004eec <processRcCommand+0x164>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 8004e30:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e34:	eef0 7ae7 	vabs.f32	s15, s15
 8004e38:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <processRcCommand+0x168>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 8004e48:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <processRcCommand+0x16c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	edd7 0a01 	vldr	s1, [r7, #4]
 8004e50:	ed97 0a02 	vldr	s0, [r7, #8]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	4798      	blx	r3
 8004e58:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <processRcCommand+0x170>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3308      	adds	r3, #8
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	4413      	add	r3, r2
 8004e68:	885b      	ldrh	r3, [r3, #2]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e72:	eef1 7a67 	vneg.f32	s15, s15
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <processRcCommand+0x170>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3308      	adds	r3, #8
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4413      	add	r3, r2
 8004e82:	885b      	ldrh	r3, [r3, #2]
 8004e84:	ee07 3a10 	vmov	s14, r3
 8004e88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e8c:	eeb0 1a47 	vmov.f32	s2, s14
 8004e90:	eef0 0a67 	vmov.f32	s1, s15
 8004e94:	ed97 0a00 	vldr	s0, [r7]
 8004e98:	f7fe fc3f 	bl	800371a <constrainf>
 8004e9c:	eef0 7a40 	vmov.f32	s15, s0
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <processRcCommand+0x174>)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	dd97      	ble.n	8004de8 <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 8004eb8:	f7ff fee0 	bl	8004c7c <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <processRcCommand+0x14c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20001090 	.word	0x20001090
 8004ed0:	44834000 	.word	0x44834000
 8004ed4:	200010fc 	.word	0x200010fc
 8004ed8:	200010fd 	.word	0x200010fd
 8004edc:	20000048 	.word	0x20000048
 8004ee0:	20001080 	.word	0x20001080
 8004ee4:	20000044 	.word	0x20000044
 8004ee8:	20000040 	.word	0x20000040
 8004eec:	200010e4 	.word	0x200010e4
 8004ef0:	200010f0 	.word	0x200010f0
 8004ef4:	20000050 	.word	0x20000050
 8004ef8:	2000004c 	.word	0x2000004c
 8004efc:	20001034 	.word	0x20001034

08004f00 <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f18:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f20:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004f84 <buildRotationMatrixFromAlignment+0x84>
 8004f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f28:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f3a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f42:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004f84 <buildRotationMatrixFromAlignment+0x84>
 8004f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f4a:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f5c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004f60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f64:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004f84 <buildRotationMatrixFromAlignment+0x84>
 8004f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f6c:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc facc 	bl	8001514 <buildRotationMatrix>
}
 8004f7c:	bf00      	nop
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	3c8efa35 	.word	0x3c8efa35

08004f88 <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	2b09      	cmp	r3, #9
 8004f98:	d03f      	beq.n	800501a <buildAlignmentFromStandardAlignment+0x92>
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03c      	beq.n	800501a <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	b25a      	sxtb	r2, r3
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	b25b      	sxtb	r3, r3
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b25b      	sxtb	r3, r3
 8004fc0:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 8004fc2:	2206      	movs	r2, #6
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f002 ffd4 	bl	8007f74 <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e01f      	b.n	8005012 <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 8004fd2:	7afa      	ldrb	r2, [r7, #11]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f1c3 0302 	rsb	r3, r3, #2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2103      	movs	r1, #3
 8004fde:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f1c3 0302 	rsb	r3, r3, #2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	fa42 f303 	asr.w	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	0112      	lsls	r2, r2, #4
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	0112      	lsls	r2, r2, #4
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	b29b      	uxth	r3, r3
 8005002:	b219      	sxth	r1, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b02      	cmp	r3, #2
 8005016:	dddc      	ble.n	8004fd2 <buildAlignmentFromStandardAlignment+0x4a>
 8005018:	e000      	b.n	800501c <buildAlignmentFromStandardAlignment+0x94>
        return;
 800501a:	bf00      	nop
    }
}
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	3b02      	subs	r3, #2
 8005046:	2b06      	cmp	r3, #6
 8005048:	d810      	bhi.n	800506c <alignSensorViaRotation+0x48>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <alignSensorViaRotation+0x2c>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005085 	.word	0x08005085
 8005054:	080050a5 	.word	0x080050a5
 8005058:	080050cd 	.word	0x080050cd
 800505c:	080050ed 	.word	0x080050ed
 8005060:	08005115 	.word	0x08005115
 8005064:	08005135 	.word	0x08005135
 8005068:	0800515d 	.word	0x0800515d
    default:
    case CW0_DEG:
        dest[X] = x;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3308      	adds	r3, #8
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	601a      	str	r2, [r3, #0]
        break;
 8005082:	e083      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3304      	adds	r3, #4
 800508e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005092:	eef1 7a67 	vneg.f32	s15, s15
 8005096:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3308      	adds	r3, #8
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]
        break;
 80050a2:	e073      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 80050a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80050a8:	eef1 7a67 	vneg.f32	s15, s15
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80050ba:	eef1 7a67 	vneg.f32	s15, s15
 80050be:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3308      	adds	r3, #8
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	601a      	str	r2, [r3, #0]
        break;
 80050ca:	e05f      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 80050cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80050d0:	eef1 7a67 	vneg.f32	s15, s15
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3308      	adds	r3, #8
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	601a      	str	r2, [r3, #0]
        break;
 80050ea:	e04f      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 80050ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80050f0:	eef1 7a67 	vneg.f32	s15, s15
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3308      	adds	r3, #8
 8005106:	edd7 7a03 	vldr	s15, [r7, #12]
 800510a:	eef1 7a67 	vneg.f32	s15, s15
 800510e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005112:	e03b      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3308      	adds	r3, #8
 8005126:	edd7 7a03 	vldr	s15, [r7, #12]
 800512a:	eef1 7a67 	vneg.f32	s15, s15
 800512e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005132:	e02b      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005142:	eef1 7a67 	vneg.f32	s15, s15
 8005146:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3308      	adds	r3, #8
 800514e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005152:	eef1 7a67 	vneg.f32	s15, s15
 8005156:	edc3 7a00 	vstr	s15, [r3]
        break;
 800515a:	e017      	b.n	800518c <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 800515c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005160:	eef1 7a67 	vneg.f32	s15, s15
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005172:	eef1 7a67 	vneg.f32	s15, s15
 8005176:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3308      	adds	r3, #8
 800517e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005182:	eef1 7a67 	vneg.f32	s15, s15
 8005186:	edc3 7a00 	vstr	s15, [r3]
        break;
 800518a:	bf00      	nop
    }
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <sensorsInit>:
 *      Author: pietro
 */

#include "sensors.h"

void sensorsInit(sensorGyroInitFuncPtr initFnGyro, sensorGyroReadFuncPtr readFnGyro, sensorAccInitFuncPtr initFnAcc, sensorAccReadFuncPtr readFnAcc, sensorMagInitFuncPtr initFnMag, sensorMagReadFuncPtr readFnMag) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
	gyroInit(initFnGyro, readFnGyro);
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7fc fd4f 	bl	8001c4c <gyroInit>
	accInit(initFnAcc, readFnAcc);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fb fa73 	bl	800069c <accInit>
	magInit(initFnMag, readFnMag);
 80051b6:	69f9      	ldr	r1, [r7, #28]
 80051b8:	69b8      	ldr	r0, [r7, #24]
 80051ba:	f7fd ff9b 	bl	80030f4 <magInit>
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <sensorsUpdate>:

void sensorsUpdate(void) {
 80051c6:	b580      	push	{r7, lr}
 80051c8:	af00      	add	r7, sp, #0
    gyroUpdate();
 80051ca:	f7fc fdeb 	bl	8001da4 <gyroUpdate>
	gyroFilter();
 80051ce:	f7fc fe77 	bl	8001ec0 <gyroFilter>
	gyroAccumulateMeasurements();
 80051d2:	f7fc fefd 	bl	8001fd0 <gyroAccumulateMeasurements>
	accUpdate();
 80051d6:	f7fb fabb 	bl	8000750 <accUpdate>
	magUpdate();
 80051da:	f7fd ffc7 	bl	800316c <magUpdate>
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <HAL_MspInit+0x44>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a0e      	ldr	r2, [pc, #56]	; (8005228 <HAL_MspInit+0x44>)
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <HAL_MspInit+0x44>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005202:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_MspInit+0x44>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	4a08      	ldr	r2, [pc, #32]	; (8005228 <HAL_MspInit+0x44>)
 8005208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800520c:	6453      	str	r3, [r2, #68]	; 0x44
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_MspInit+0x44>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800

0800522c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ae      	sub	sp, #184	; 0xb8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	2290      	movs	r2, #144	; 0x90
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fe91 	bl	8007f74 <memset>
  if(huart->Instance==USART3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <HAL_UART_MspInit+0xb4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d13c      	bne.n	80052d6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800525c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005260:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005262:	2300      	movs	r3, #0
 8005264:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005266:	f107 0314 	add.w	r3, r7, #20
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fac6 	bl	80067fc <HAL_RCCEx_PeriphCLKConfig>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005276:	f7fe fa32 	bl	80036de <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800527a:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <HAL_UART_MspInit+0xb8>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_UART_MspInit+0xb8>)
 8005280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005284:	6413      	str	r3, [r2, #64]	; 0x40
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_UART_MspInit+0xb8>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <HAL_UART_MspInit+0xb8>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <HAL_UART_MspInit+0xb8>)
 8005298:	f043 0308 	orr.w	r3, r3, #8
 800529c:	6313      	str	r3, [r2, #48]	; 0x30
 800529e:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <HAL_UART_MspInit+0xb8>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80052aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b2:	2302      	movs	r3, #2
 80052b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052be:	2303      	movs	r3, #3
 80052c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052c4:	2307      	movs	r3, #7
 80052c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4805      	ldr	r0, [pc, #20]	; (80052e8 <HAL_UART_MspInit+0xbc>)
 80052d2:	f000 fa51 	bl	8005778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80052d6:	bf00      	nop
 80052d8:	37b8      	adds	r7, #184	; 0xb8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40004800 	.word	0x40004800
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020c00 	.word	0x40020c00

080052ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b0ae      	sub	sp, #184	; 0xb8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	2290      	movs	r2, #144	; 0x90
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f002 fe31 	bl	8007f74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800531a:	d159      	bne.n	80053d0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800531c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005320:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005322:	2300      	movs	r3, #0
 8005324:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fa65 	bl	80067fc <HAL_RCCEx_PeriphCLKConfig>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8005338:	f7fe f9d1 	bl	80036de <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533c:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6313      	str	r3, [r2, #48]	; 0x30
 8005348:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005354:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005368:	2303      	movs	r3, #3
 800536a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800536e:	230a      	movs	r3, #10
 8005370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005374:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005378:	4619      	mov	r1, r3
 800537a:	4818      	ldr	r0, [pc, #96]	; (80053dc <HAL_PCD_MspInit+0xf0>)
 800537c:	f000 f9fc 	bl	8005778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005388:	2300      	movs	r3, #0
 800538a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800538e:	2300      	movs	r3, #0
 8005390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005394:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005398:	4619      	mov	r1, r3
 800539a:	4810      	ldr	r0, [pc, #64]	; (80053dc <HAL_PCD_MspInit+0xf0>)
 800539c:	f000 f9ec 	bl	8005778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80053a0:	4b0d      	ldr	r3, [pc, #52]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 80053a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a4:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 80053a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053aa:	6353      	str	r3, [r2, #52]	; 0x34
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	4a06      	ldr	r2, [pc, #24]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 80053be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053c2:	6453      	str	r3, [r2, #68]	; 0x44
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <HAL_PCD_MspInit+0xec>)
 80053c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80053d0:	bf00      	nop
 80053d2:	37b8      	adds	r7, #184	; 0xb8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40020000 	.word	0x40020000

080053e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053e4:	e7fe      	b.n	80053e4 <NMI_Handler+0x4>

080053e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053ea:	e7fe      	b.n	80053ea <HardFault_Handler+0x4>

080053ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053f0:	e7fe      	b.n	80053f0 <MemManage_Handler+0x4>

080053f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053f2:	b480      	push	{r7}
 80053f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053f6:	e7fe      	b.n	80053f6 <BusFault_Handler+0x4>

080053f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053fc:	e7fe      	b.n	80053fc <UsageFault_Handler+0x4>

080053fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053fe:	b480      	push	{r7}
 8005400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005402:	bf00      	nop
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800541a:	b480      	push	{r7}
 800541c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800542c:	f000 f87a 	bl	8005524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005430:	bf00      	nop
 8005432:	bd80      	pop	{r7, pc}

08005434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <SystemInit+0x20>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	4a05      	ldr	r2, [pc, #20]	; (8005454 <SystemInit+0x20>)
 8005440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <Reset_Handler>:
 8005458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005490 <LoopFillZerobss+0x12>
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <LoopFillZerobss+0x16>)
 800545e:	490e      	ldr	r1, [pc, #56]	; (8005498 <LoopFillZerobss+0x1a>)
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <LoopFillZerobss+0x1e>)
 8005462:	2300      	movs	r3, #0
 8005464:	e002      	b.n	800546c <LoopCopyDataInit>

08005466 <CopyDataInit>:
 8005466:	58d4      	ldr	r4, [r2, r3]
 8005468:	50c4      	str	r4, [r0, r3]
 800546a:	3304      	adds	r3, #4

0800546c <LoopCopyDataInit>:
 800546c:	18c4      	adds	r4, r0, r3
 800546e:	428c      	cmp	r4, r1
 8005470:	d3f9      	bcc.n	8005466 <CopyDataInit>
 8005472:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <LoopFillZerobss+0x22>)
 8005474:	4c0b      	ldr	r4, [pc, #44]	; (80054a4 <LoopFillZerobss+0x26>)
 8005476:	2300      	movs	r3, #0
 8005478:	e001      	b.n	800547e <LoopFillZerobss>

0800547a <FillZerobss>:
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	3204      	adds	r2, #4

0800547e <LoopFillZerobss>:
 800547e:	42a2      	cmp	r2, r4
 8005480:	d3fb      	bcc.n	800547a <FillZerobss>
 8005482:	f7ff ffd7 	bl	8005434 <SystemInit>
 8005486:	f002 fd43 	bl	8007f10 <__libc_init_array>
 800548a:	f7fd fedb 	bl	8003244 <main>
 800548e:	4770      	bx	lr
 8005490:	20080000 	.word	0x20080000
 8005494:	20000000 	.word	0x20000000
 8005498:	200000c8 	.word	0x200000c8
 800549c:	08008720 	.word	0x08008720
 80054a0:	200000c8 	.word	0x200000c8
 80054a4:	20001174 	.word	0x20001174

080054a8 <ADC_IRQHandler>:
 80054a8:	e7fe      	b.n	80054a8 <ADC_IRQHandler>

080054aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ae:	2003      	movs	r0, #3
 80054b0:	f000 f92e 	bl	8005710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f000 f805 	bl	80054c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054ba:	f7ff fe93 	bl	80051e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054cc:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_InitTick+0x54>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <HAL_InitTick+0x58>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054da:	fbb3 f3f1 	udiv	r3, r3, r1
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f93b 	bl	800575e <HAL_SYSTICK_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e00e      	b.n	8005510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d80a      	bhi.n	800550e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f8:	2200      	movs	r2, #0
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	f000 f911 	bl	8005726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005504:	4a06      	ldr	r2, [pc, #24]	; (8005520 <HAL_InitTick+0x5c>)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000058 	.word	0x20000058
 800551c:	20000060 	.word	0x20000060
 8005520:	2000005c 	.word	0x2000005c

08005524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_IncTick+0x20>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_IncTick+0x24>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4413      	add	r3, r2
 8005534:	4a04      	ldr	r2, [pc, #16]	; (8005548 <HAL_IncTick+0x24>)
 8005536:	6013      	str	r3, [r2, #0]
}
 8005538:	bf00      	nop
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000060 	.word	0x20000060
 8005548:	20001170 	.word	0x20001170

0800554c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  return uwTick;
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <HAL_GetTick+0x14>)
 8005552:	681b      	ldr	r3, [r3, #0]
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	20001170 	.word	0x20001170

08005564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800556c:	f7ff ffee 	bl	800554c <HAL_GetTick>
 8005570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800557c:	d005      	beq.n	800558a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_Delay+0x44>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800558a:	bf00      	nop
 800558c:	f7ff ffde 	bl	800554c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	429a      	cmp	r2, r3
 800559a:	d8f7      	bhi.n	800558c <HAL_Delay+0x28>
  {
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000060 	.word	0x20000060

080055ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <__NVIC_SetPriorityGrouping+0x40>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <__NVIC_SetPriorityGrouping+0x44>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055da:	4a04      	ldr	r2, [pc, #16]	; (80055ec <__NVIC_SetPriorityGrouping+0x40>)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	60d3      	str	r3, [r2, #12]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	e000ed00 	.word	0xe000ed00
 80055f0:	05fa0000 	.word	0x05fa0000

080055f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <__NVIC_GetPriorityGrouping+0x18>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 0307 	and.w	r3, r3, #7
}
 8005602:	4618      	mov	r0, r3
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000ed00 	.word	0xe000ed00

08005610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005620:	2b00      	cmp	r3, #0
 8005622:	db0a      	blt.n	800563a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	490c      	ldr	r1, [pc, #48]	; (800565c <__NVIC_SetPriority+0x4c>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	440b      	add	r3, r1
 8005634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005638:	e00a      	b.n	8005650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4908      	ldr	r1, [pc, #32]	; (8005660 <__NVIC_SetPriority+0x50>)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	3b04      	subs	r3, #4
 8005648:	0112      	lsls	r2, r2, #4
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	440b      	add	r3, r1
 800564e:	761a      	strb	r2, [r3, #24]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000e100 	.word	0xe000e100
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	bf28      	it	cs
 8005682:	2304      	movcs	r3, #4
 8005684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3304      	adds	r3, #4
 800568a:	2b06      	cmp	r3, #6
 800568c:	d902      	bls.n	8005694 <NVIC_EncodePriority+0x30>
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3b03      	subs	r3, #3
 8005692:	e000      	b.n	8005696 <NVIC_EncodePriority+0x32>
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43da      	mvns	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	401a      	ands	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	43d9      	mvns	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056bc:	4313      	orrs	r3, r2
         );
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056dc:	d301      	bcc.n	80056e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056de:	2301      	movs	r3, #1
 80056e0:	e00f      	b.n	8005702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <SysTick_Config+0x40>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ea:	210f      	movs	r1, #15
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056f0:	f7ff ff8e 	bl	8005610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <SysTick_Config+0x40>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <SysTick_Config+0x40>)
 80056fc:	2207      	movs	r2, #7
 80056fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	e000e010 	.word	0xe000e010

08005710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff47 	bl	80055ac <__NVIC_SetPriorityGrouping>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005738:	f7ff ff5c 	bl	80055f4 <__NVIC_GetPriorityGrouping>
 800573c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff8e 	bl	8005664 <NVIC_EncodePriority>
 8005748:	4602      	mov	r2, r0
 800574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff5d 	bl	8005610 <__NVIC_SetPriority>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff ffb0 	bl	80056cc <SysTick_Config>
 800576c:	4603      	mov	r3, r0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005778:	b480      	push	{r7}
 800577a:	b089      	sub	sp, #36	; 0x24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800578e:	2300      	movs	r3, #0
 8005790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	e175      	b.n	8005a84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005798:	2201      	movs	r2, #1
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4013      	ands	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	f040 8164 	bne.w	8005a7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d005      	beq.n	80057ce <HAL_GPIO_Init+0x56>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d130      	bne.n	8005830 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	2203      	movs	r2, #3
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43db      	mvns	r3, r3
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4013      	ands	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005804:	2201      	movs	r2, #1
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	f003 0201 	and.w	r2, r3, #1
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d017      	beq.n	800586c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	2203      	movs	r2, #3
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	4313      	orrs	r3, r2
 8005864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d123      	bne.n	80058c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	08da      	lsrs	r2, r3, #3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3208      	adds	r2, #8
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	220f      	movs	r2, #15
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	43db      	mvns	r3, r3
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4013      	ands	r3, r2
 800589a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	08da      	lsrs	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3208      	adds	r2, #8
 80058ba:	69b9      	ldr	r1, [r7, #24]
 80058bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	2203      	movs	r2, #3
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f003 0203 	and.w	r2, r3, #3
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80be 	beq.w	8005a7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005902:	4b66      	ldr	r3, [pc, #408]	; (8005a9c <HAL_GPIO_Init+0x324>)
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	4a65      	ldr	r2, [pc, #404]	; (8005a9c <HAL_GPIO_Init+0x324>)
 8005908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800590c:	6453      	str	r3, [r2, #68]	; 0x44
 800590e:	4b63      	ldr	r3, [pc, #396]	; (8005a9c <HAL_GPIO_Init+0x324>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800591a:	4a61      	ldr	r2, [pc, #388]	; (8005aa0 <HAL_GPIO_Init+0x328>)
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	089b      	lsrs	r3, r3, #2
 8005920:	3302      	adds	r3, #2
 8005922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005926:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	220f      	movs	r2, #15
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a58      	ldr	r2, [pc, #352]	; (8005aa4 <HAL_GPIO_Init+0x32c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d037      	beq.n	80059b6 <HAL_GPIO_Init+0x23e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a57      	ldr	r2, [pc, #348]	; (8005aa8 <HAL_GPIO_Init+0x330>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d031      	beq.n	80059b2 <HAL_GPIO_Init+0x23a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a56      	ldr	r2, [pc, #344]	; (8005aac <HAL_GPIO_Init+0x334>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02b      	beq.n	80059ae <HAL_GPIO_Init+0x236>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a55      	ldr	r2, [pc, #340]	; (8005ab0 <HAL_GPIO_Init+0x338>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d025      	beq.n	80059aa <HAL_GPIO_Init+0x232>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a54      	ldr	r2, [pc, #336]	; (8005ab4 <HAL_GPIO_Init+0x33c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01f      	beq.n	80059a6 <HAL_GPIO_Init+0x22e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a53      	ldr	r2, [pc, #332]	; (8005ab8 <HAL_GPIO_Init+0x340>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d019      	beq.n	80059a2 <HAL_GPIO_Init+0x22a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a52      	ldr	r2, [pc, #328]	; (8005abc <HAL_GPIO_Init+0x344>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_GPIO_Init+0x226>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a51      	ldr	r2, [pc, #324]	; (8005ac0 <HAL_GPIO_Init+0x348>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00d      	beq.n	800599a <HAL_GPIO_Init+0x222>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a50      	ldr	r2, [pc, #320]	; (8005ac4 <HAL_GPIO_Init+0x34c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <HAL_GPIO_Init+0x21e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a4f      	ldr	r2, [pc, #316]	; (8005ac8 <HAL_GPIO_Init+0x350>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_GPIO_Init+0x21a>
 800598e:	2309      	movs	r3, #9
 8005990:	e012      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 8005992:	230a      	movs	r3, #10
 8005994:	e010      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 8005996:	2308      	movs	r3, #8
 8005998:	e00e      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 800599a:	2307      	movs	r3, #7
 800599c:	e00c      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 800599e:	2306      	movs	r3, #6
 80059a0:	e00a      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 80059a2:	2305      	movs	r3, #5
 80059a4:	e008      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 80059a6:	2304      	movs	r3, #4
 80059a8:	e006      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 80059aa:	2303      	movs	r3, #3
 80059ac:	e004      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e002      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_GPIO_Init+0x240>
 80059b6:	2300      	movs	r3, #0
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	f002 0203 	and.w	r2, r2, #3
 80059be:	0092      	lsls	r2, r2, #2
 80059c0:	4093      	lsls	r3, r2
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059c8:	4935      	ldr	r1, [pc, #212]	; (8005aa0 <HAL_GPIO_Init+0x328>)
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	3302      	adds	r3, #2
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059d6:	4b3d      	ldr	r3, [pc, #244]	; (8005acc <HAL_GPIO_Init+0x354>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059fa:	4a34      	ldr	r2, [pc, #208]	; (8005acc <HAL_GPIO_Init+0x354>)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <HAL_GPIO_Init+0x354>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a24:	4a29      	ldr	r2, [pc, #164]	; (8005acc <HAL_GPIO_Init+0x354>)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a2a:	4b28      	ldr	r3, [pc, #160]	; (8005acc <HAL_GPIO_Init+0x354>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	4013      	ands	r3, r2
 8005a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_GPIO_Init+0x354>)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a54:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <HAL_GPIO_Init+0x354>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_GPIO_Init+0x354>)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2b0f      	cmp	r3, #15
 8005a88:	f67f ae86 	bls.w	8005798 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3724      	adds	r7, #36	; 0x24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	40013800 	.word	0x40013800
 8005aa4:	40020000 	.word	0x40020000
 8005aa8:	40020400 	.word	0x40020400
 8005aac:	40020800 	.word	0x40020800
 8005ab0:	40020c00 	.word	0x40020c00
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	40021400 	.word	0x40021400
 8005abc:	40021800 	.word	0x40021800
 8005ac0:	40021c00 	.word	0x40021c00
 8005ac4:	40022000 	.word	0x40022000
 8005ac8:	40022400 	.word	0x40022400
 8005acc:	40013c00 	.word	0x40013c00

08005ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
 8005adc:	4613      	mov	r3, r2
 8005ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ae0:	787b      	ldrb	r3, [r7, #1]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae6:	887a      	ldrh	r2, [r7, #2]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005aec:	e003      	b.n	8005af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005aee:	887b      	ldrh	r3, [r7, #2]
 8005af0:	041a      	lsls	r2, r3, #16
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	619a      	str	r2, [r3, #24]
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b04:	b08f      	sub	sp, #60	; 0x3c
 8005b06:	af0a      	add	r7, sp, #40	; 0x28
 8005b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e116      	b.n	8005d42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fbdc 	bl	80052ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2203      	movs	r2, #3
 8005b38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 ff3a 	bl	80079cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	687e      	ldr	r6, [r7, #4]
 8005b60:	466d      	mov	r5, sp
 8005b62:	f106 0410 	add.w	r4, r6, #16
 8005b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b76:	1d33      	adds	r3, r6, #4
 8005b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7a:	6838      	ldr	r0, [r7, #0]
 8005b7c:	f001 fece 	bl	800791c <USB_CoreInit>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0d7      	b.n	8005d42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 ff28 	bl	80079ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
 8005ba2:	e04a      	b.n	8005c3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	333d      	adds	r3, #61	; 0x3d
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	333c      	adds	r3, #60	; 0x3c
 8005bc8:	7bfa      	ldrb	r2, [r7, #15]
 8005bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bcc:	7bfa      	ldrb	r2, [r7, #15]
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	b298      	uxth	r0, r3
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	3344      	adds	r3, #68	; 0x44
 8005be0:	4602      	mov	r2, r0
 8005be2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005be4:	7bfa      	ldrb	r2, [r7, #15]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3340      	adds	r3, #64	; 0x40
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	3348      	adds	r3, #72	; 0x48
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005c0c:	7bfa      	ldrb	r2, [r7, #15]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	334c      	adds	r3, #76	; 0x4c
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c20:	7bfa      	ldrb	r2, [r7, #15]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	3354      	adds	r3, #84	; 0x54
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	3301      	adds	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3af      	bcc.n	8005ba4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
 8005c48:	e044      	b.n	8005cd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c4a:	7bfa      	ldrb	r2, [r7, #15]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c60:	7bfa      	ldrb	r2, [r7, #15]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005c72:	7bfa      	ldrb	r2, [r7, #15]
 8005c74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c76:	7bfa      	ldrb	r2, [r7, #15]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c8c:	7bfa      	ldrb	r2, [r7, #15]
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4613      	mov	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ca2:	7bfa      	ldrb	r2, [r7, #15]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4413      	add	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005cb8:	7bfa      	ldrb	r2, [r7, #15]
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	7bfa      	ldrb	r2, [r7, #15]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3b5      	bcc.n	8005c4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	687e      	ldr	r6, [r7, #4]
 8005ce6:	466d      	mov	r5, sp
 8005ce8:	f106 0410 	add.w	r4, r6, #16
 8005cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cfc:	1d33      	adds	r3, r6, #4
 8005cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d00:	6838      	ldr	r0, [r7, #0]
 8005d02:	f001 fec1 	bl	8007a88 <USB_DevInit>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e014      	b.n	8005d42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f80b 	bl	8005d4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f002 f87f 	bl	8007e3e <USB_DevDisconnect>

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005d4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <HAL_PCDEx_ActivateLPM+0x44>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	10000003 	.word	0x10000003

08005d94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a04      	ldr	r2, [pc, #16]	; (8005db0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da2:	6013      	str	r3, [r2, #0]
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40007000 	.word	0x40007000

08005db4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005dbe:	4b23      	ldr	r3, [pc, #140]	; (8005e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dca:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <HAL_PWREx_EnableOverDrive+0x98>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005dd6:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1d      	ldr	r2, [pc, #116]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005de2:	f7ff fbb3 	bl	800554c <HAL_GetTick>
 8005de6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005de8:	e009      	b.n	8005dfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005dea:	f7ff fbaf 	bl	800554c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df8:	d901      	bls.n	8005dfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e022      	b.n	8005e44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e0a:	d1ee      	bne.n	8005dea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e0c:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e18:	f7ff fb98 	bl	800554c <HAL_GetTick>
 8005e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e1e:	e009      	b.n	8005e34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e20:	f7ff fb94 	bl	800554c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e2e:	d901      	bls.n	8005e34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e007      	b.n	8005e44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e40:	d1ee      	bne.n	8005e20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40007000 	.word	0x40007000

08005e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e29b      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 8087 	beq.w	8005f86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e78:	4b96      	ldr	r3, [pc, #600]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 030c 	and.w	r3, r3, #12
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d00c      	beq.n	8005e9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e84:	4b93      	ldr	r3, [pc, #588]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d112      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x62>
 8005e90:	4b90      	ldr	r3, [pc, #576]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9c:	d10b      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9e:	4b8d      	ldr	r3, [pc, #564]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d06c      	beq.n	8005f84 <HAL_RCC_OscConfig+0x130>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d168      	bne.n	8005f84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e275      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebe:	d106      	bne.n	8005ece <HAL_RCC_OscConfig+0x7a>
 8005ec0:	4b84      	ldr	r3, [pc, #528]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a83      	ldr	r2, [pc, #524]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	e02e      	b.n	8005f2c <HAL_RCC_OscConfig+0xd8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x9c>
 8005ed6:	4b7f      	ldr	r3, [pc, #508]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a7e      	ldr	r2, [pc, #504]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b7c      	ldr	r3, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a7b      	ldr	r2, [pc, #492]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e01d      	b.n	8005f2c <HAL_RCC_OscConfig+0xd8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef8:	d10c      	bne.n	8005f14 <HAL_RCC_OscConfig+0xc0>
 8005efa:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a75      	ldr	r2, [pc, #468]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	4b73      	ldr	r3, [pc, #460]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a72      	ldr	r2, [pc, #456]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e00b      	b.n	8005f2c <HAL_RCC_OscConfig+0xd8>
 8005f14:	4b6f      	ldr	r3, [pc, #444]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a6e      	ldr	r2, [pc, #440]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4b6c      	ldr	r3, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a6b      	ldr	r2, [pc, #428]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d013      	beq.n	8005f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7ff fb0a 	bl	800554c <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f3c:	f7ff fb06 	bl	800554c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	; 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e229      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4e:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0xe8>
 8005f5a:	e014      	b.n	8005f86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7ff faf6 	bl	800554c <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f64:	f7ff faf2 	bl	800554c <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e215      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f76:	4b57      	ldr	r3, [pc, #348]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f0      	bne.n	8005f64 <HAL_RCC_OscConfig+0x110>
 8005f82:	e000      	b.n	8005f86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d069      	beq.n	8006066 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f92:	4b50      	ldr	r3, [pc, #320]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f9e:	4b4d      	ldr	r3, [pc, #308]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d11c      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x190>
 8005faa:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d116      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fb6:	4b47      	ldr	r3, [pc, #284]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <HAL_RCC_OscConfig+0x17a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d001      	beq.n	8005fce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e1e9      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	493d      	ldr	r1, [pc, #244]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe2:	e040      	b.n	8006066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d023      	beq.n	8006034 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fec:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7ff faa8 	bl	800554c <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006000:	f7ff faa4 	bl	800554c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e1c7      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006012:	4b30      	ldr	r3, [pc, #192]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601e:	4b2d      	ldr	r3, [pc, #180]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4929      	ldr	r1, [pc, #164]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 800602e:	4313      	orrs	r3, r2
 8006030:	600b      	str	r3, [r1, #0]
 8006032:	e018      	b.n	8006066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006034:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a26      	ldr	r2, [pc, #152]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7ff fa84 	bl	800554c <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006048:	f7ff fa80 	bl	800554c <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e1a3      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605a:	4b1e      	ldr	r3, [pc, #120]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d038      	beq.n	80060e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d019      	beq.n	80060ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800607a:	4b16      	ldr	r3, [pc, #88]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 800607c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006086:	f7ff fa61 	bl	800554c <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800608e:	f7ff fa5d 	bl	800554c <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e180      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a0:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 80060a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x23a>
 80060ac:	e01a      	b.n	80060e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <HAL_RCC_OscConfig+0x280>)
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7ff fa47 	bl	800554c <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c2:	f7ff fa43 	bl	800554c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d903      	bls.n	80060d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e166      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
 80060d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d8:	4b92      	ldr	r3, [pc, #584]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80060da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ee      	bne.n	80060c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80a4 	beq.w	800623a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060f2:	4b8c      	ldr	r3, [pc, #560]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fe:	4b89      	ldr	r3, [pc, #548]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	4a88      	ldr	r2, [pc, #544]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006108:	6413      	str	r3, [r2, #64]	; 0x40
 800610a:	4b86      	ldr	r3, [pc, #536]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611a:	4b83      	ldr	r3, [pc, #524]	; (8006328 <HAL_RCC_OscConfig+0x4d4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d118      	bne.n	8006158 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006126:	4b80      	ldr	r3, [pc, #512]	; (8006328 <HAL_RCC_OscConfig+0x4d4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a7f      	ldr	r2, [pc, #508]	; (8006328 <HAL_RCC_OscConfig+0x4d4>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006132:	f7ff fa0b 	bl	800554c <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613a:	f7ff fa07 	bl	800554c <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b64      	cmp	r3, #100	; 0x64
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e12a      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800614c:	4b76      	ldr	r3, [pc, #472]	; (8006328 <HAL_RCC_OscConfig+0x4d4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d106      	bne.n	800616e <HAL_RCC_OscConfig+0x31a>
 8006160:	4b70      	ldr	r3, [pc, #448]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006164:	4a6f      	ldr	r2, [pc, #444]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6713      	str	r3, [r2, #112]	; 0x70
 800616c:	e02d      	b.n	80061ca <HAL_RCC_OscConfig+0x376>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10c      	bne.n	8006190 <HAL_RCC_OscConfig+0x33c>
 8006176:	4b6b      	ldr	r3, [pc, #428]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	4a6a      	ldr	r2, [pc, #424]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	6713      	str	r3, [r2, #112]	; 0x70
 8006182:	4b68      	ldr	r3, [pc, #416]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	4a67      	ldr	r2, [pc, #412]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	6713      	str	r3, [r2, #112]	; 0x70
 800618e:	e01c      	b.n	80061ca <HAL_RCC_OscConfig+0x376>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b05      	cmp	r3, #5
 8006196:	d10c      	bne.n	80061b2 <HAL_RCC_OscConfig+0x35e>
 8006198:	4b62      	ldr	r3, [pc, #392]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800619a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619c:	4a61      	ldr	r2, [pc, #388]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800619e:	f043 0304 	orr.w	r3, r3, #4
 80061a2:	6713      	str	r3, [r2, #112]	; 0x70
 80061a4:	4b5f      	ldr	r3, [pc, #380]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	4a5e      	ldr	r2, [pc, #376]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6713      	str	r3, [r2, #112]	; 0x70
 80061b0:	e00b      	b.n	80061ca <HAL_RCC_OscConfig+0x376>
 80061b2:	4b5c      	ldr	r3, [pc, #368]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	4a5b      	ldr	r2, [pc, #364]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6713      	str	r3, [r2, #112]	; 0x70
 80061be:	4b59      	ldr	r3, [pc, #356]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	4a58      	ldr	r2, [pc, #352]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061c4:	f023 0304 	bic.w	r3, r3, #4
 80061c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d015      	beq.n	80061fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d2:	f7ff f9bb 	bl	800554c <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7ff f9b7 	bl	800554c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0d8      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f0:	4b4c      	ldr	r3, [pc, #304]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80061f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ee      	beq.n	80061da <HAL_RCC_OscConfig+0x386>
 80061fc:	e014      	b.n	8006228 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fe:	f7ff f9a5 	bl	800554c <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006204:	e00a      	b.n	800621c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006206:	f7ff f9a1 	bl	800554c <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f241 3288 	movw	r2, #5000	; 0x1388
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e0c2      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800621c:	4b41      	ldr	r3, [pc, #260]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ee      	bne.n	8006206 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	4a3c      	ldr	r2, [pc, #240]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80ae 	beq.w	80063a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006244:	4b37      	ldr	r3, [pc, #220]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 030c 	and.w	r3, r3, #12
 800624c:	2b08      	cmp	r3, #8
 800624e:	d06d      	beq.n	800632c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d14b      	bne.n	80062f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006258:	4b32      	ldr	r3, [pc, #200]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a31      	ldr	r2, [pc, #196]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 800625e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7ff f972 	bl	800554c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626c:	f7ff f96e 	bl	800554c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e091      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627e:	4b29      	ldr	r3, [pc, #164]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69da      	ldr	r2, [r3, #28]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	3b01      	subs	r3, #1
 80062a4:	041b      	lsls	r3, r3, #16
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	061b      	lsls	r3, r3, #24
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	071b      	lsls	r3, r3, #28
 80062b6:	491b      	ldr	r1, [pc, #108]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80062c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7ff f940 	bl	800554c <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d0:	f7ff f93c 	bl	800554c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e05f      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0x47c>
 80062ee:	e057      	b.n	80063a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a0b      	ldr	r2, [pc, #44]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 80062f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7ff f926 	bl	800554c <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006304:	f7ff f922 	bl	800554c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e045      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006316:	4b03      	ldr	r3, [pc, #12]	; (8006324 <HAL_RCC_OscConfig+0x4d0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x4b0>
 8006322:	e03d      	b.n	80063a0 <HAL_RCC_OscConfig+0x54c>
 8006324:	40023800 	.word	0x40023800
 8006328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800632c:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <HAL_RCC_OscConfig+0x558>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d030      	beq.n	800639c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006344:	429a      	cmp	r2, r3
 8006346:	d129      	bne.n	800639c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d122      	bne.n	800639c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800635c:	4013      	ands	r3, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006364:	4293      	cmp	r3, r2
 8006366:	d119      	bne.n	800639c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	3b01      	subs	r3, #1
 8006376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d10f      	bne.n	800639c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006388:	429a      	cmp	r2, r3
 800638a:	d107      	bne.n	800639c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40023800 	.word	0x40023800

080063b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0d0      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063c8:	4b6a      	ldr	r3, [pc, #424]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d910      	bls.n	80063f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b67      	ldr	r3, [pc, #412]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f023 020f 	bic.w	r2, r3, #15
 80063de:	4965      	ldr	r1, [pc, #404]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e6:	4b63      	ldr	r3, [pc, #396]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e0b8      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d020      	beq.n	8006446 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d005      	beq.n	800641c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006410:	4b59      	ldr	r3, [pc, #356]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	4a58      	ldr	r2, [pc, #352]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800641a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006428:	4b53      	ldr	r3, [pc, #332]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	4a52      	ldr	r2, [pc, #328]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 800642e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006434:	4b50      	ldr	r3, [pc, #320]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	494d      	ldr	r1, [pc, #308]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	d040      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d107      	bne.n	800646a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645a:	4b47      	ldr	r3, [pc, #284]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d115      	bne.n	8006492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e07f      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d107      	bne.n	8006482 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006472:	4b41      	ldr	r3, [pc, #260]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e073      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006482:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e06b      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006492:	4b39      	ldr	r3, [pc, #228]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f023 0203 	bic.w	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4936      	ldr	r1, [pc, #216]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a4:	f7ff f852 	bl	800554c <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064aa:	e00a      	b.n	80064c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ac:	f7ff f84e 	bl	800554c <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e053      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c2:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 020c 	and.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1eb      	bne.n	80064ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064d4:	4b27      	ldr	r3, [pc, #156]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d210      	bcs.n	8006504 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e2:	4b24      	ldr	r3, [pc, #144]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f023 020f 	bic.w	r2, r3, #15
 80064ea:	4922      	ldr	r1, [pc, #136]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f2:	4b20      	ldr	r3, [pc, #128]	; (8006574 <HAL_RCC_ClockConfig+0x1c4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d001      	beq.n	8006504 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e032      	b.n	800656a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006510:	4b19      	ldr	r3, [pc, #100]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4916      	ldr	r1, [pc, #88]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	490e      	ldr	r1, [pc, #56]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006542:	f000 f821 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8006546:	4602      	mov	r2, r0
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <HAL_RCC_ClockConfig+0x1c8>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	091b      	lsrs	r3, r3, #4
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	490a      	ldr	r1, [pc, #40]	; (800657c <HAL_RCC_ClockConfig+0x1cc>)
 8006554:	5ccb      	ldrb	r3, [r1, r3]
 8006556:	fa22 f303 	lsr.w	r3, r2, r3
 800655a:	4a09      	ldr	r2, [pc, #36]	; (8006580 <HAL_RCC_ClockConfig+0x1d0>)
 800655c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <HAL_RCC_ClockConfig+0x1d4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe ffae 	bl	80054c4 <HAL_InitTick>

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40023c00 	.word	0x40023c00
 8006578:	40023800 	.word	0x40023800
 800657c:	0800847c 	.word	0x0800847c
 8006580:	20000058 	.word	0x20000058
 8006584:	2000005c 	.word	0x2000005c

08006588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800658c:	b094      	sub	sp, #80	; 0x50
 800658e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	647b      	str	r3, [r7, #68]	; 0x44
 8006594:	2300      	movs	r3, #0
 8006596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006598:	2300      	movs	r3, #0
 800659a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065a0:	4b79      	ldr	r3, [pc, #484]	; (8006788 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 030c 	and.w	r3, r3, #12
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d00d      	beq.n	80065c8 <HAL_RCC_GetSysClockFreq+0x40>
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	f200 80e1 	bhi.w	8006774 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <HAL_RCC_GetSysClockFreq+0x34>
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d003      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ba:	e0db      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065bc:	4b73      	ldr	r3, [pc, #460]	; (800678c <HAL_RCC_GetSysClockFreq+0x204>)
 80065be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c0:	e0db      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065c2:	4b73      	ldr	r3, [pc, #460]	; (8006790 <HAL_RCC_GetSysClockFreq+0x208>)
 80065c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065c6:	e0d8      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065c8:	4b6f      	ldr	r3, [pc, #444]	; (8006788 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80065d2:	4b6d      	ldr	r3, [pc, #436]	; (8006788 <HAL_RCC_GetSysClockFreq+0x200>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d063      	beq.n	80066a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065de:	4b6a      	ldr	r3, [pc, #424]	; (8006788 <HAL_RCC_GetSysClockFreq+0x200>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	099b      	lsrs	r3, r3, #6
 80065e4:	2200      	movs	r2, #0
 80065e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f0:	633b      	str	r3, [r7, #48]	; 0x30
 80065f2:	2300      	movs	r3, #0
 80065f4:	637b      	str	r3, [r7, #52]	; 0x34
 80065f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065fa:	4622      	mov	r2, r4
 80065fc:	462b      	mov	r3, r5
 80065fe:	f04f 0000 	mov.w	r0, #0
 8006602:	f04f 0100 	mov.w	r1, #0
 8006606:	0159      	lsls	r1, r3, #5
 8006608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800660c:	0150      	lsls	r0, r2, #5
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
 8006612:	4621      	mov	r1, r4
 8006614:	1a51      	subs	r1, r2, r1
 8006616:	6139      	str	r1, [r7, #16]
 8006618:	4629      	mov	r1, r5
 800661a:	eb63 0301 	sbc.w	r3, r3, r1
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800662c:	4659      	mov	r1, fp
 800662e:	018b      	lsls	r3, r1, #6
 8006630:	4651      	mov	r1, sl
 8006632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006636:	4651      	mov	r1, sl
 8006638:	018a      	lsls	r2, r1, #6
 800663a:	4651      	mov	r1, sl
 800663c:	ebb2 0801 	subs.w	r8, r2, r1
 8006640:	4659      	mov	r1, fp
 8006642:	eb63 0901 	sbc.w	r9, r3, r1
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800665a:	4690      	mov	r8, r2
 800665c:	4699      	mov	r9, r3
 800665e:	4623      	mov	r3, r4
 8006660:	eb18 0303 	adds.w	r3, r8, r3
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	462b      	mov	r3, r5
 8006668:	eb49 0303 	adc.w	r3, r9, r3
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800667a:	4629      	mov	r1, r5
 800667c:	024b      	lsls	r3, r1, #9
 800667e:	4621      	mov	r1, r4
 8006680:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006684:	4621      	mov	r1, r4
 8006686:	024a      	lsls	r2, r1, #9
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	2200      	movs	r2, #0
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
 8006692:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006698:	f7f9 fdce 	bl	8000238 <__aeabi_uldivmod>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4613      	mov	r3, r2
 80066a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a4:	e058      	b.n	8006758 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066a6:	4b38      	ldr	r3, [pc, #224]	; (8006788 <HAL_RCC_GetSysClockFreq+0x200>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	099b      	lsrs	r3, r3, #6
 80066ac:	2200      	movs	r2, #0
 80066ae:	4618      	mov	r0, r3
 80066b0:	4611      	mov	r1, r2
 80066b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066b6:	623b      	str	r3, [r7, #32]
 80066b8:	2300      	movs	r3, #0
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
 80066bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	f04f 0000 	mov.w	r0, #0
 80066c8:	f04f 0100 	mov.w	r1, #0
 80066cc:	0159      	lsls	r1, r3, #5
 80066ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066d2:	0150      	lsls	r0, r2, #5
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4641      	mov	r1, r8
 80066da:	ebb2 0a01 	subs.w	sl, r2, r1
 80066de:	4649      	mov	r1, r9
 80066e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066f8:	ebb2 040a 	subs.w	r4, r2, sl
 80066fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	00eb      	lsls	r3, r5, #3
 800670a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800670e:	00e2      	lsls	r2, r4, #3
 8006710:	4614      	mov	r4, r2
 8006712:	461d      	mov	r5, r3
 8006714:	4643      	mov	r3, r8
 8006716:	18e3      	adds	r3, r4, r3
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	464b      	mov	r3, r9
 800671c:	eb45 0303 	adc.w	r3, r5, r3
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800672e:	4629      	mov	r1, r5
 8006730:	028b      	lsls	r3, r1, #10
 8006732:	4621      	mov	r1, r4
 8006734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006738:	4621      	mov	r1, r4
 800673a:	028a      	lsls	r2, r1, #10
 800673c:	4610      	mov	r0, r2
 800673e:	4619      	mov	r1, r3
 8006740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006742:	2200      	movs	r2, #0
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	61fa      	str	r2, [r7, #28]
 8006748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800674c:	f7f9 fd74 	bl	8000238 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4613      	mov	r3, r2
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <HAL_RCC_GetSysClockFreq+0x200>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	3301      	adds	r3, #1
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800676a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006772:	e002      	b.n	800677a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006774:	4b05      	ldr	r3, [pc, #20]	; (800678c <HAL_RCC_GetSysClockFreq+0x204>)
 8006776:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800677a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800677c:	4618      	mov	r0, r3
 800677e:	3750      	adds	r7, #80	; 0x50
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006786:	bf00      	nop
 8006788:	40023800 	.word	0x40023800
 800678c:	00f42400 	.word	0x00f42400
 8006790:	007a1200 	.word	0x007a1200

08006794 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800679a:	681b      	ldr	r3, [r3, #0]
}
 800679c:	4618      	mov	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000058 	.word	0x20000058

080067ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80067b0:	f7ff fff0 	bl	8006794 <HAL_RCC_GetHCLKFreq>
 80067b4:	4602      	mov	r2, r0
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	0a9b      	lsrs	r3, r3, #10
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	4903      	ldr	r1, [pc, #12]	; (80067d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067c2:	5ccb      	ldrb	r3, [r1, r3]
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40023800 	.word	0x40023800
 80067d0:	0800848c 	.word	0x0800848c

080067d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067d8:	f7ff ffdc 	bl	8006794 <HAL_RCC_GetHCLKFreq>
 80067dc:	4602      	mov	r2, r0
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	0b5b      	lsrs	r3, r3, #13
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	4903      	ldr	r1, [pc, #12]	; (80067f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067ea:	5ccb      	ldrb	r3, [r1, r3]
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40023800 	.word	0x40023800
 80067f8:	0800848c 	.word	0x0800848c

080067fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006824:	4b69      	ldr	r3, [pc, #420]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4a68      	ldr	r2, [pc, #416]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800682a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800682e:	6093      	str	r3, [r2, #8]
 8006830:	4b66      	ldr	r3, [pc, #408]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	4964      	ldr	r1, [pc, #400]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800683a:	4313      	orrs	r3, r2
 800683c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006846:	2301      	movs	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d017      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006856:	4b5d      	ldr	r3, [pc, #372]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800685c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	4959      	ldr	r1, [pc, #356]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006874:	d101      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006876:	2301      	movs	r3, #1
 8006878:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006882:	2301      	movs	r3, #1
 8006884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d017      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006892:	4b4e      	ldr	r3, [pc, #312]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	494a      	ldr	r1, [pc, #296]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b0:	d101      	bne.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80068b2:	2301      	movs	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80068be:	2301      	movs	r3, #1
 80068c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80068ce:	2301      	movs	r3, #1
 80068d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 808b 	beq.w	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068e0:	4b3a      	ldr	r3, [pc, #232]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	4a39      	ldr	r2, [pc, #228]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ea:	6413      	str	r3, [r2, #64]	; 0x40
 80068ec:	4b37      	ldr	r3, [pc, #220]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f4:	60bb      	str	r3, [r7, #8]
 80068f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068f8:	4b35      	ldr	r3, [pc, #212]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a34      	ldr	r2, [pc, #208]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006904:	f7fe fe22 	bl	800554c <HAL_GetTick>
 8006908:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800690a:	e008      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800690c:	f7fe fe1e 	bl	800554c <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e38f      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800691e:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800692a:	4b28      	ldr	r3, [pc, #160]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006932:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d035      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	429a      	cmp	r2, r3
 8006946:	d02e      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006948:	4b20      	ldr	r3, [pc, #128]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006950:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006952:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	4a1d      	ldr	r2, [pc, #116]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800695c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800695e:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a1a      	ldr	r2, [pc, #104]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006968:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006970:	4b16      	ldr	r3, [pc, #88]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d114      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fe fde6 	bl	800554c <HAL_GetTick>
 8006980:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006982:	e00a      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006984:	f7fe fde2 	bl	800554c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e351      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0ee      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069b2:	d111      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80069c2:	400b      	ands	r3, r1
 80069c4:	4901      	ldr	r1, [pc, #4]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
 80069ca:	e00b      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40007000 	.word	0x40007000
 80069d4:	0ffffcff 	.word	0x0ffffcff
 80069d8:	4bac      	ldr	r3, [pc, #688]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4aab      	ldr	r2, [pc, #684]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069e2:	6093      	str	r3, [r2, #8]
 80069e4:	4ba9      	ldr	r3, [pc, #676]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	49a6      	ldr	r1, [pc, #664]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a02:	4ba2      	ldr	r3, [pc, #648]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a08:	4aa0      	ldr	r2, [pc, #640]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a12:	4b9e      	ldr	r3, [pc, #632]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	499b      	ldr	r1, [pc, #620]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a30:	4b96      	ldr	r3, [pc, #600]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a3e:	4993      	ldr	r1, [pc, #588]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a52:	4b8e      	ldr	r3, [pc, #568]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a60:	498a      	ldr	r1, [pc, #552]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a74:	4b85      	ldr	r3, [pc, #532]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a82:	4982      	ldr	r1, [pc, #520]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a96:	4b7d      	ldr	r3, [pc, #500]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	4979      	ldr	r1, [pc, #484]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ab8:	4b74      	ldr	r3, [pc, #464]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	4971      	ldr	r1, [pc, #452]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ada:	4b6c      	ldr	r3, [pc, #432]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae0:	f023 020c 	bic.w	r2, r3, #12
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	4968      	ldr	r1, [pc, #416]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006afc:	4b63      	ldr	r3, [pc, #396]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	4960      	ldr	r1, [pc, #384]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b1e:	4b5b      	ldr	r3, [pc, #364]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	4957      	ldr	r1, [pc, #348]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b40:	4b52      	ldr	r3, [pc, #328]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	494f      	ldr	r1, [pc, #316]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006b62:	4b4a      	ldr	r3, [pc, #296]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b70:	4946      	ldr	r1, [pc, #280]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b84:	4b41      	ldr	r3, [pc, #260]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b92:	493e      	ldr	r1, [pc, #248]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ba6:	4b39      	ldr	r3, [pc, #228]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb4:	4935      	ldr	r1, [pc, #212]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bc8:	4b30      	ldr	r3, [pc, #192]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bd6:	492d      	ldr	r1, [pc, #180]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006bea:	4b28      	ldr	r3, [pc, #160]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bf8:	4924      	ldr	r1, [pc, #144]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c08:	d101      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c2a:	4b18      	ldr	r3, [pc, #96]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c38:	4914      	ldr	r1, [pc, #80]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5c:	490b      	ldr	r1, [pc, #44]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c80:	4902      	ldr	r1, [pc, #8]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c88:	e002      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006c8a:	bf00      	nop
 8006c8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c9c:	4b8a      	ldr	r3, [pc, #552]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	4986      	ldr	r1, [pc, #536]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006cc0:	4b81      	ldr	r3, [pc, #516]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cd0:	497d      	ldr	r1, [pc, #500]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d006      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80d6 	beq.w	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cec:	4b76      	ldr	r3, [pc, #472]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a75      	ldr	r2, [pc, #468]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006cf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf8:	f7fe fc28 	bl	800554c <HAL_GetTick>
 8006cfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d00:	f7fe fc24 	bl	800554c <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b64      	cmp	r3, #100	; 0x64
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e195      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d12:	4b6d      	ldr	r3, [pc, #436]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f0      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d021      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d11d      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d32:	4b65      	ldr	r3, [pc, #404]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d40:	4b61      	ldr	r3, [pc, #388]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d46:	0e1b      	lsrs	r3, r3, #24
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	019a      	lsls	r2, r3, #6
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	061b      	lsls	r3, r3, #24
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	071b      	lsls	r3, r3, #28
 8006d66:	4958      	ldr	r1, [pc, #352]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d82:	d00a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d02e      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d98:	d129      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d9a:	4b4b      	ldr	r3, [pc, #300]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006da8:	4b47      	ldr	r3, [pc, #284]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dae:	0f1b      	lsrs	r3, r3, #28
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	019a      	lsls	r2, r3, #6
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	041b      	lsls	r3, r3, #16
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	061b      	lsls	r3, r3, #24
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	071b      	lsls	r3, r3, #28
 8006dce:	493e      	ldr	r1, [pc, #248]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dd6:	4b3c      	ldr	r3, [pc, #240]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ddc:	f023 021f 	bic.w	r2, r3, #31
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4938      	ldr	r1, [pc, #224]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01d      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dfa:	4b33      	ldr	r3, [pc, #204]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e00:	0e1b      	lsrs	r3, r3, #24
 8006e02:	f003 030f 	and.w	r3, r3, #15
 8006e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e08:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e0e:	0f1b      	lsrs	r3, r3, #28
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	019a      	lsls	r2, r3, #6
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	431a      	orrs	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	061b      	lsls	r3, r3, #24
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	071b      	lsls	r3, r3, #28
 8006e2e:	4926      	ldr	r1, [pc, #152]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d011      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	019a      	lsls	r2, r3, #6
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	071b      	lsls	r3, r3, #28
 8006e5e:	491a      	ldr	r1, [pc, #104]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e72:	f7fe fb6b 	bl	800554c <HAL_GetTick>
 8006e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e78:	e008      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e7a:	f7fe fb67 	bl	800554c <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b64      	cmp	r3, #100	; 0x64
 8006e86:	d901      	bls.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e0d8      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	f040 80ce 	bne.w	800703c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ea0:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a08      	ldr	r2, [pc, #32]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eac:	f7fe fb4e 	bl	800554c <HAL_GetTick>
 8006eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006eb2:	e00b      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006eb4:	f7fe fb4a 	bl	800554c <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b64      	cmp	r3, #100	; 0x64
 8006ec0:	d904      	bls.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e0bb      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006ec6:	bf00      	nop
 8006ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ecc:	4b5e      	ldr	r3, [pc, #376]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed8:	d0ec      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02e      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d12a      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f02:	4b51      	ldr	r3, [pc, #324]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f08:	0c1b      	lsrs	r3, r3, #16
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f10:	4b4d      	ldr	r3, [pc, #308]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	0f1b      	lsrs	r3, r3, #28
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	019a      	lsls	r2, r3, #6
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	061b      	lsls	r3, r3, #24
 8006f30:	431a      	orrs	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	071b      	lsls	r3, r3, #28
 8006f36:	4944      	ldr	r1, [pc, #272]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f3e:	4b42      	ldr	r3, [pc, #264]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	021b      	lsls	r3, r3, #8
 8006f50:	493d      	ldr	r1, [pc, #244]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d022      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f6c:	d11d      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f6e:	4b36      	ldr	r3, [pc, #216]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f74:	0e1b      	lsrs	r3, r3, #24
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f82:	0f1b      	lsrs	r3, r3, #28
 8006f84:	f003 0307 	and.w	r3, r3, #7
 8006f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	019a      	lsls	r2, r3, #6
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	431a      	orrs	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	071b      	lsls	r3, r3, #28
 8006fa2:	4929      	ldr	r1, [pc, #164]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d028      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fb6:	4b24      	ldr	r3, [pc, #144]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbc:	0e1b      	lsrs	r3, r3, #24
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fc4:	4b20      	ldr	r3, [pc, #128]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fca:	0c1b      	lsrs	r3, r3, #16
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	019a      	lsls	r2, r3, #6
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	071b      	lsls	r3, r3, #28
 8006fea:	4917      	ldr	r1, [pc, #92]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ff2:	4b15      	ldr	r3, [pc, #84]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	4911      	ldr	r1, [pc, #68]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007002:	4313      	orrs	r3, r2
 8007004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007008:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a0e      	ldr	r2, [pc, #56]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800700e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007014:	f7fe fa9a 	bl	800554c <HAL_GetTick>
 8007018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800701a:	e008      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800701c:	f7fe fa96 	bl	800554c <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e007      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703a:	d1ef      	bne.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800

0800704c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e040      	b.n	80070e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe f8dc 	bl	800522c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2224      	movs	r2, #36	; 0x24
 8007078:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0201 	bic.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f82c 	bl	80070e8 <UART_SetConfig>
 8007090:	4603      	mov	r3, r0
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e022      	b.n	80070e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa84 	bl	80075b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb0b 	bl	80076f4 <UART_CheckIdleState>
 80070de:	4603      	mov	r3, r0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4ba6      	ldr	r3, [pc, #664]	; (80073ac <UART_SetConfig+0x2c4>)
 8007114:	4013      	ands	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	6812      	ldr	r2, [r2, #0]
 800711a:	6979      	ldr	r1, [r7, #20]
 800711c:	430b      	orrs	r3, r1
 800711e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	430a      	orrs	r2, r1
 8007158:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a94      	ldr	r2, [pc, #592]	; (80073b0 <UART_SetConfig+0x2c8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d120      	bne.n	80071a6 <UART_SetConfig+0xbe>
 8007164:	4b93      	ldr	r3, [pc, #588]	; (80073b4 <UART_SetConfig+0x2cc>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	2b03      	cmp	r3, #3
 8007170:	d816      	bhi.n	80071a0 <UART_SetConfig+0xb8>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0x90>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007189 	.word	0x08007189
 800717c:	08007195 	.word	0x08007195
 8007180:	0800718f 	.word	0x0800718f
 8007184:	0800719b 	.word	0x0800719b
 8007188:	2301      	movs	r3, #1
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e150      	b.n	8007430 <UART_SetConfig+0x348>
 800718e:	2302      	movs	r3, #2
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e14d      	b.n	8007430 <UART_SetConfig+0x348>
 8007194:	2304      	movs	r3, #4
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e14a      	b.n	8007430 <UART_SetConfig+0x348>
 800719a:	2308      	movs	r3, #8
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e147      	b.n	8007430 <UART_SetConfig+0x348>
 80071a0:	2310      	movs	r3, #16
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e144      	b.n	8007430 <UART_SetConfig+0x348>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a83      	ldr	r2, [pc, #524]	; (80073b8 <UART_SetConfig+0x2d0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d132      	bne.n	8007216 <UART_SetConfig+0x12e>
 80071b0:	4b80      	ldr	r3, [pc, #512]	; (80073b4 <UART_SetConfig+0x2cc>)
 80071b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b6:	f003 030c 	and.w	r3, r3, #12
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	d828      	bhi.n	8007210 <UART_SetConfig+0x128>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <UART_SetConfig+0xdc>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071f9 	.word	0x080071f9
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007211 	.word	0x08007211
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007205 	.word	0x08007205
 80071d8:	08007211 	.word	0x08007211
 80071dc:	08007211 	.word	0x08007211
 80071e0:	08007211 	.word	0x08007211
 80071e4:	080071ff 	.word	0x080071ff
 80071e8:	08007211 	.word	0x08007211
 80071ec:	08007211 	.word	0x08007211
 80071f0:	08007211 	.word	0x08007211
 80071f4:	0800720b 	.word	0x0800720b
 80071f8:	2300      	movs	r3, #0
 80071fa:	77fb      	strb	r3, [r7, #31]
 80071fc:	e118      	b.n	8007430 <UART_SetConfig+0x348>
 80071fe:	2302      	movs	r3, #2
 8007200:	77fb      	strb	r3, [r7, #31]
 8007202:	e115      	b.n	8007430 <UART_SetConfig+0x348>
 8007204:	2304      	movs	r3, #4
 8007206:	77fb      	strb	r3, [r7, #31]
 8007208:	e112      	b.n	8007430 <UART_SetConfig+0x348>
 800720a:	2308      	movs	r3, #8
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e10f      	b.n	8007430 <UART_SetConfig+0x348>
 8007210:	2310      	movs	r3, #16
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e10c      	b.n	8007430 <UART_SetConfig+0x348>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a68      	ldr	r2, [pc, #416]	; (80073bc <UART_SetConfig+0x2d4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d120      	bne.n	8007262 <UART_SetConfig+0x17a>
 8007220:	4b64      	ldr	r3, [pc, #400]	; (80073b4 <UART_SetConfig+0x2cc>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800722a:	2b30      	cmp	r3, #48	; 0x30
 800722c:	d013      	beq.n	8007256 <UART_SetConfig+0x16e>
 800722e:	2b30      	cmp	r3, #48	; 0x30
 8007230:	d814      	bhi.n	800725c <UART_SetConfig+0x174>
 8007232:	2b20      	cmp	r3, #32
 8007234:	d009      	beq.n	800724a <UART_SetConfig+0x162>
 8007236:	2b20      	cmp	r3, #32
 8007238:	d810      	bhi.n	800725c <UART_SetConfig+0x174>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <UART_SetConfig+0x15c>
 800723e:	2b10      	cmp	r3, #16
 8007240:	d006      	beq.n	8007250 <UART_SetConfig+0x168>
 8007242:	e00b      	b.n	800725c <UART_SetConfig+0x174>
 8007244:	2300      	movs	r3, #0
 8007246:	77fb      	strb	r3, [r7, #31]
 8007248:	e0f2      	b.n	8007430 <UART_SetConfig+0x348>
 800724a:	2302      	movs	r3, #2
 800724c:	77fb      	strb	r3, [r7, #31]
 800724e:	e0ef      	b.n	8007430 <UART_SetConfig+0x348>
 8007250:	2304      	movs	r3, #4
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	e0ec      	b.n	8007430 <UART_SetConfig+0x348>
 8007256:	2308      	movs	r3, #8
 8007258:	77fb      	strb	r3, [r7, #31]
 800725a:	e0e9      	b.n	8007430 <UART_SetConfig+0x348>
 800725c:	2310      	movs	r3, #16
 800725e:	77fb      	strb	r3, [r7, #31]
 8007260:	e0e6      	b.n	8007430 <UART_SetConfig+0x348>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a56      	ldr	r2, [pc, #344]	; (80073c0 <UART_SetConfig+0x2d8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d120      	bne.n	80072ae <UART_SetConfig+0x1c6>
 800726c:	4b51      	ldr	r3, [pc, #324]	; (80073b4 <UART_SetConfig+0x2cc>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007276:	2bc0      	cmp	r3, #192	; 0xc0
 8007278:	d013      	beq.n	80072a2 <UART_SetConfig+0x1ba>
 800727a:	2bc0      	cmp	r3, #192	; 0xc0
 800727c:	d814      	bhi.n	80072a8 <UART_SetConfig+0x1c0>
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d009      	beq.n	8007296 <UART_SetConfig+0x1ae>
 8007282:	2b80      	cmp	r3, #128	; 0x80
 8007284:	d810      	bhi.n	80072a8 <UART_SetConfig+0x1c0>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <UART_SetConfig+0x1a8>
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d006      	beq.n	800729c <UART_SetConfig+0x1b4>
 800728e:	e00b      	b.n	80072a8 <UART_SetConfig+0x1c0>
 8007290:	2300      	movs	r3, #0
 8007292:	77fb      	strb	r3, [r7, #31]
 8007294:	e0cc      	b.n	8007430 <UART_SetConfig+0x348>
 8007296:	2302      	movs	r3, #2
 8007298:	77fb      	strb	r3, [r7, #31]
 800729a:	e0c9      	b.n	8007430 <UART_SetConfig+0x348>
 800729c:	2304      	movs	r3, #4
 800729e:	77fb      	strb	r3, [r7, #31]
 80072a0:	e0c6      	b.n	8007430 <UART_SetConfig+0x348>
 80072a2:	2308      	movs	r3, #8
 80072a4:	77fb      	strb	r3, [r7, #31]
 80072a6:	e0c3      	b.n	8007430 <UART_SetConfig+0x348>
 80072a8:	2310      	movs	r3, #16
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e0c0      	b.n	8007430 <UART_SetConfig+0x348>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a44      	ldr	r2, [pc, #272]	; (80073c4 <UART_SetConfig+0x2dc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d125      	bne.n	8007304 <UART_SetConfig+0x21c>
 80072b8:	4b3e      	ldr	r3, [pc, #248]	; (80073b4 <UART_SetConfig+0x2cc>)
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c6:	d017      	beq.n	80072f8 <UART_SetConfig+0x210>
 80072c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072cc:	d817      	bhi.n	80072fe <UART_SetConfig+0x216>
 80072ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d2:	d00b      	beq.n	80072ec <UART_SetConfig+0x204>
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d8:	d811      	bhi.n	80072fe <UART_SetConfig+0x216>
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <UART_SetConfig+0x1fe>
 80072de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e2:	d006      	beq.n	80072f2 <UART_SetConfig+0x20a>
 80072e4:	e00b      	b.n	80072fe <UART_SetConfig+0x216>
 80072e6:	2300      	movs	r3, #0
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e0a1      	b.n	8007430 <UART_SetConfig+0x348>
 80072ec:	2302      	movs	r3, #2
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e09e      	b.n	8007430 <UART_SetConfig+0x348>
 80072f2:	2304      	movs	r3, #4
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e09b      	b.n	8007430 <UART_SetConfig+0x348>
 80072f8:	2308      	movs	r3, #8
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e098      	b.n	8007430 <UART_SetConfig+0x348>
 80072fe:	2310      	movs	r3, #16
 8007300:	77fb      	strb	r3, [r7, #31]
 8007302:	e095      	b.n	8007430 <UART_SetConfig+0x348>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a2f      	ldr	r2, [pc, #188]	; (80073c8 <UART_SetConfig+0x2e0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d125      	bne.n	800735a <UART_SetConfig+0x272>
 800730e:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <UART_SetConfig+0x2cc>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800731c:	d017      	beq.n	800734e <UART_SetConfig+0x266>
 800731e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007322:	d817      	bhi.n	8007354 <UART_SetConfig+0x26c>
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007328:	d00b      	beq.n	8007342 <UART_SetConfig+0x25a>
 800732a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732e:	d811      	bhi.n	8007354 <UART_SetConfig+0x26c>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <UART_SetConfig+0x254>
 8007334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007338:	d006      	beq.n	8007348 <UART_SetConfig+0x260>
 800733a:	e00b      	b.n	8007354 <UART_SetConfig+0x26c>
 800733c:	2301      	movs	r3, #1
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e076      	b.n	8007430 <UART_SetConfig+0x348>
 8007342:	2302      	movs	r3, #2
 8007344:	77fb      	strb	r3, [r7, #31]
 8007346:	e073      	b.n	8007430 <UART_SetConfig+0x348>
 8007348:	2304      	movs	r3, #4
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e070      	b.n	8007430 <UART_SetConfig+0x348>
 800734e:	2308      	movs	r3, #8
 8007350:	77fb      	strb	r3, [r7, #31]
 8007352:	e06d      	b.n	8007430 <UART_SetConfig+0x348>
 8007354:	2310      	movs	r3, #16
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e06a      	b.n	8007430 <UART_SetConfig+0x348>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <UART_SetConfig+0x2e4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d138      	bne.n	80073d6 <UART_SetConfig+0x2ee>
 8007364:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <UART_SetConfig+0x2cc>)
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800736e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007372:	d017      	beq.n	80073a4 <UART_SetConfig+0x2bc>
 8007374:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007378:	d82a      	bhi.n	80073d0 <UART_SetConfig+0x2e8>
 800737a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737e:	d00b      	beq.n	8007398 <UART_SetConfig+0x2b0>
 8007380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007384:	d824      	bhi.n	80073d0 <UART_SetConfig+0x2e8>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <UART_SetConfig+0x2aa>
 800738a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738e:	d006      	beq.n	800739e <UART_SetConfig+0x2b6>
 8007390:	e01e      	b.n	80073d0 <UART_SetConfig+0x2e8>
 8007392:	2300      	movs	r3, #0
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e04b      	b.n	8007430 <UART_SetConfig+0x348>
 8007398:	2302      	movs	r3, #2
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e048      	b.n	8007430 <UART_SetConfig+0x348>
 800739e:	2304      	movs	r3, #4
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e045      	b.n	8007430 <UART_SetConfig+0x348>
 80073a4:	2308      	movs	r3, #8
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e042      	b.n	8007430 <UART_SetConfig+0x348>
 80073aa:	bf00      	nop
 80073ac:	efff69f3 	.word	0xefff69f3
 80073b0:	40011000 	.word	0x40011000
 80073b4:	40023800 	.word	0x40023800
 80073b8:	40004400 	.word	0x40004400
 80073bc:	40004800 	.word	0x40004800
 80073c0:	40004c00 	.word	0x40004c00
 80073c4:	40005000 	.word	0x40005000
 80073c8:	40011400 	.word	0x40011400
 80073cc:	40007800 	.word	0x40007800
 80073d0:	2310      	movs	r3, #16
 80073d2:	77fb      	strb	r3, [r7, #31]
 80073d4:	e02c      	b.n	8007430 <UART_SetConfig+0x348>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a72      	ldr	r2, [pc, #456]	; (80075a4 <UART_SetConfig+0x4bc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d125      	bne.n	800742c <UART_SetConfig+0x344>
 80073e0:	4b71      	ldr	r3, [pc, #452]	; (80075a8 <UART_SetConfig+0x4c0>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073ee:	d017      	beq.n	8007420 <UART_SetConfig+0x338>
 80073f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073f4:	d817      	bhi.n	8007426 <UART_SetConfig+0x33e>
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fa:	d00b      	beq.n	8007414 <UART_SetConfig+0x32c>
 80073fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007400:	d811      	bhi.n	8007426 <UART_SetConfig+0x33e>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <UART_SetConfig+0x326>
 8007406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800740a:	d006      	beq.n	800741a <UART_SetConfig+0x332>
 800740c:	e00b      	b.n	8007426 <UART_SetConfig+0x33e>
 800740e:	2300      	movs	r3, #0
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e00d      	b.n	8007430 <UART_SetConfig+0x348>
 8007414:	2302      	movs	r3, #2
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e00a      	b.n	8007430 <UART_SetConfig+0x348>
 800741a:	2304      	movs	r3, #4
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e007      	b.n	8007430 <UART_SetConfig+0x348>
 8007420:	2308      	movs	r3, #8
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e004      	b.n	8007430 <UART_SetConfig+0x348>
 8007426:	2310      	movs	r3, #16
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e001      	b.n	8007430 <UART_SetConfig+0x348>
 800742c:	2310      	movs	r3, #16
 800742e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007438:	d15b      	bne.n	80074f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800743a:	7ffb      	ldrb	r3, [r7, #31]
 800743c:	2b08      	cmp	r3, #8
 800743e:	d828      	bhi.n	8007492 <UART_SetConfig+0x3aa>
 8007440:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x360>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007475 	.word	0x08007475
 8007450:	0800747d 	.word	0x0800747d
 8007454:	08007493 	.word	0x08007493
 8007458:	08007483 	.word	0x08007483
 800745c:	08007493 	.word	0x08007493
 8007460:	08007493 	.word	0x08007493
 8007464:	08007493 	.word	0x08007493
 8007468:	0800748b 	.word	0x0800748b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800746c:	f7ff f99e 	bl	80067ac <HAL_RCC_GetPCLK1Freq>
 8007470:	61b8      	str	r0, [r7, #24]
        break;
 8007472:	e013      	b.n	800749c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007474:	f7ff f9ae 	bl	80067d4 <HAL_RCC_GetPCLK2Freq>
 8007478:	61b8      	str	r0, [r7, #24]
        break;
 800747a:	e00f      	b.n	800749c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800747c:	4b4b      	ldr	r3, [pc, #300]	; (80075ac <UART_SetConfig+0x4c4>)
 800747e:	61bb      	str	r3, [r7, #24]
        break;
 8007480:	e00c      	b.n	800749c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007482:	f7ff f881 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8007486:	61b8      	str	r0, [r7, #24]
        break;
 8007488:	e008      	b.n	800749c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800748a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748e:	61bb      	str	r3, [r7, #24]
        break;
 8007490:	e004      	b.n	800749c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	77bb      	strb	r3, [r7, #30]
        break;
 800749a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d074      	beq.n	800758c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	005a      	lsls	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	441a      	add	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b0f      	cmp	r3, #15
 80074bc:	d916      	bls.n	80074ec <UART_SetConfig+0x404>
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c4:	d212      	bcs.n	80074ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f023 030f 	bic.w	r3, r3, #15
 80074ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	b29a      	uxth	r2, r3
 80074dc:	89fb      	ldrh	r3, [r7, #14]
 80074de:	4313      	orrs	r3, r2
 80074e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	89fa      	ldrh	r2, [r7, #14]
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e04f      	b.n	800758c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	77bb      	strb	r3, [r7, #30]
 80074f0:	e04c      	b.n	800758c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d828      	bhi.n	800754a <UART_SetConfig+0x462>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <UART_SetConfig+0x418>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007525 	.word	0x08007525
 8007504:	0800752d 	.word	0x0800752d
 8007508:	08007535 	.word	0x08007535
 800750c:	0800754b 	.word	0x0800754b
 8007510:	0800753b 	.word	0x0800753b
 8007514:	0800754b 	.word	0x0800754b
 8007518:	0800754b 	.word	0x0800754b
 800751c:	0800754b 	.word	0x0800754b
 8007520:	08007543 	.word	0x08007543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007524:	f7ff f942 	bl	80067ac <HAL_RCC_GetPCLK1Freq>
 8007528:	61b8      	str	r0, [r7, #24]
        break;
 800752a:	e013      	b.n	8007554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800752c:	f7ff f952 	bl	80067d4 <HAL_RCC_GetPCLK2Freq>
 8007530:	61b8      	str	r0, [r7, #24]
        break;
 8007532:	e00f      	b.n	8007554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007534:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <UART_SetConfig+0x4c4>)
 8007536:	61bb      	str	r3, [r7, #24]
        break;
 8007538:	e00c      	b.n	8007554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753a:	f7ff f825 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 800753e:	61b8      	str	r0, [r7, #24]
        break;
 8007540:	e008      	b.n	8007554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	61bb      	str	r3, [r7, #24]
        break;
 8007548:	e004      	b.n	8007554 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	77bb      	strb	r3, [r7, #30]
        break;
 8007552:	bf00      	nop
    }

    if (pclk != 0U)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d018      	beq.n	800758c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	085a      	lsrs	r2, r3, #1
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	441a      	add	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	fbb2 f3f3 	udiv	r3, r2, r3
 800756c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d909      	bls.n	8007588 <UART_SetConfig+0x4a0>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757a:	d205      	bcs.n	8007588 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60da      	str	r2, [r3, #12]
 8007586:	e001      	b.n	800758c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007598:	7fbb      	ldrb	r3, [r7, #30]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40007c00 	.word	0x40007c00
 80075a8:	40023800 	.word	0x40023800
 80075ac:	00f42400 	.word	0x00f42400

080075b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01a      	beq.n	80076c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ae:	d10a      	bne.n	80076c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	605a      	str	r2, [r3, #4]
  }
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007704:	f7fd ff22 	bl	800554c <HAL_GetTick>
 8007708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b08      	cmp	r3, #8
 8007716:	d10e      	bne.n	8007736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f831 	bl	800778e <UART_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e027      	b.n	8007786 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b04      	cmp	r3, #4
 8007742:	d10e      	bne.n	8007762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f81b 	bl	800778e <UART_WaitOnFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e011      	b.n	8007786 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b09c      	sub	sp, #112	; 0x70
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800779e:	e0a7      	b.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a6:	f000 80a3 	beq.w	80078f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077aa:	f7fd fecf 	bl	800554c <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d302      	bcc.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80077ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d13f      	bne.n	8007840 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077d4:	667b      	str	r3, [r7, #100]	; 0x64
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e6      	bne.n	80077c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	663b      	str	r3, [r7, #96]	; 0x60
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007812:	64ba      	str	r2, [r7, #72]	; 0x48
 8007814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e5      	bne.n	80077f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e068      	b.n	8007912 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d050      	beq.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800785c:	d148      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007866:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800787c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
 8007888:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800788c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e6      	bne.n	8007868 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3308      	adds	r3, #8
 80078a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f023 0301 	bic.w	r3, r3, #1
 80078b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078ba:	623a      	str	r2, [r7, #32]
 80078bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e5      	bne.n	800789a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e010      	b.n	8007912 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69da      	ldr	r2, [r3, #28]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4013      	ands	r3, r2
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	461a      	mov	r2, r3
 8007908:	79fb      	ldrb	r3, [r7, #7]
 800790a:	429a      	cmp	r2, r3
 800790c:	f43f af48 	beq.w	80077a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3770      	adds	r7, #112	; 0x70
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800791c:	b084      	sub	sp, #16
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	f107 001c 	add.w	r0, r7, #28
 800792a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b01      	cmp	r3, #1
 8007932:	d120      	bne.n	8007976 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <USB_CoreInit+0xac>)
 8007946:	4013      	ands	r3, r2
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d105      	bne.n	800796a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa96 	bl	8007e9c <USB_CoreReset>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]
 8007974:	e010      	b.n	8007998 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa8a 	bl	8007e9c <USB_CoreReset>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	2b01      	cmp	r3, #1
 800799c:	d10b      	bne.n	80079b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f043 0206 	orr.w	r2, r3, #6
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079c2:	b004      	add	sp, #16
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	ffbdffbf 	.word	0xffbdffbf

080079cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f023 0201 	bic.w	r2, r3, #1
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d115      	bne.n	8007a3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	f7fd fda1 	bl	8005564 <HAL_Delay>
      ms++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	3301      	adds	r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fa29 	bl	8007e80 <USB_GetMode>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d01e      	beq.n	8007a72 <USB_SetCurrentMode+0x84>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b31      	cmp	r3, #49	; 0x31
 8007a38:	d9f0      	bls.n	8007a1c <USB_SetCurrentMode+0x2e>
 8007a3a:	e01a      	b.n	8007a72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d115      	bne.n	8007a6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a4e:	2001      	movs	r0, #1
 8007a50:	f7fd fd88 	bl	8005564 <HAL_Delay>
      ms++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3301      	adds	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa10 	bl	8007e80 <USB_GetMode>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <USB_SetCurrentMode+0x84>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b31      	cmp	r3, #49	; 0x31
 8007a6a:	d9f0      	bls.n	8007a4e <USB_SetCurrentMode+0x60>
 8007a6c:	e001      	b.n	8007a72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e005      	b.n	8007a7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b32      	cmp	r3, #50	; 0x32
 8007a76:	d101      	bne.n	8007a7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a88:	b084      	sub	sp, #16
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	e009      	b.n	8007abc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	3340      	adds	r3, #64	; 0x40
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b0e      	cmp	r3, #14
 8007ac0:	d9f2      	bls.n	8007aa8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11c      	bne.n	8007b02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ad6:	f043 0302 	orr.w	r3, r3, #2
 8007ada:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e005      	b.n	8007b0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b14:	461a      	mov	r2, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b20:	4619      	mov	r1, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b28:	461a      	mov	r2, r3
 8007b2a:	680b      	ldr	r3, [r1, #0]
 8007b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d10c      	bne.n	8007b4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f965 	bl	8007e0c <USB_SetDevSpeed>
 8007b42:	e008      	b.n	8007b56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b44:	2101      	movs	r1, #1
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f960 	bl	8007e0c <USB_SetDevSpeed>
 8007b4c:	e003      	b.n	8007b56 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b4e:	2103      	movs	r1, #3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f95b 	bl	8007e0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b56:	2110      	movs	r1, #16
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f8f3 	bl	8007d44 <USB_FlushTxFifo>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f91f 	bl	8007dac <USB_FlushRxFifo>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2300      	movs	r3, #0
 8007b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b96:	461a      	mov	r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e043      	b.n	8007c2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb8:	d118      	bne.n	8007bec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10a      	bne.n	8007bd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e013      	b.n	8007bfe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be2:	461a      	mov	r2, r3
 8007be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	e008      	b.n	8007bfe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	3301      	adds	r3, #1
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d3b7      	bcc.n	8007ba2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	e043      	b.n	8007cc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c4e:	d118      	bne.n	8007c82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	461a      	mov	r2, r3
 8007c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	e013      	b.n	8007c94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	461a      	mov	r2, r3
 8007c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	e008      	b.n	8007c94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d3b7      	bcc.n	8007c38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f043 0210 	orr.w	r2, r3, #16
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	699a      	ldr	r2, [r3, #24]
 8007d00:	4b0e      	ldr	r3, [pc, #56]	; (8007d3c <USB_DevInit+0x2b4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f043 0208 	orr.w	r2, r3, #8
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d105      	bne.n	8007d2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699a      	ldr	r2, [r3, #24]
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <USB_DevInit+0x2b8>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d38:	b004      	add	sp, #16
 8007d3a:	4770      	bx	lr
 8007d3c:	803c3800 	.word	0x803c3800
 8007d40:	40000004 	.word	0x40000004

08007d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3301      	adds	r3, #1
 8007d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <USB_FlushTxFifo+0x64>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d901      	bls.n	8007d64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e01b      	b.n	8007d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	daf2      	bge.n	8007d52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	019b      	lsls	r3, r3, #6
 8007d74:	f043 0220 	orr.w	r2, r3, #32
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <USB_FlushTxFifo+0x64>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e006      	b.n	8007d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d0f0      	beq.n	8007d7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr
 8007da8:	00030d40 	.word	0x00030d40

08007dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	4a11      	ldr	r2, [pc, #68]	; (8007e08 <USB_FlushRxFifo+0x5c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d901      	bls.n	8007dca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e018      	b.n	8007dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	daf2      	bge.n	8007db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2210      	movs	r2, #16
 8007dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4a08      	ldr	r2, [pc, #32]	; (8007e08 <USB_FlushRxFifo+0x5c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d901      	bls.n	8007dee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e006      	b.n	8007dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d0f0      	beq.n	8007ddc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	00030d40 	.word	0x00030d40

08007e0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	68f9      	ldr	r1, [r7, #12]
 8007e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b085      	sub	sp, #20
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6c:	f043 0302 	orr.w	r3, r3, #2
 8007e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4a13      	ldr	r2, [pc, #76]	; (8007f00 <USB_CoreReset+0x64>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d901      	bls.n	8007eba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e01b      	b.n	8007ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	daf2      	bge.n	8007ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f043 0201 	orr.w	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <USB_CoreReset+0x64>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d901      	bls.n	8007ee4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e006      	b.n	8007ef2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d0f0      	beq.n	8007ed2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	00030d40 	.word	0x00030d40

08007f04 <__errno>:
 8007f04:	4b01      	ldr	r3, [pc, #4]	; (8007f0c <__errno+0x8>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000064 	.word	0x20000064

08007f10 <__libc_init_array>:
 8007f10:	b570      	push	{r4, r5, r6, lr}
 8007f12:	4d0d      	ldr	r5, [pc, #52]	; (8007f48 <__libc_init_array+0x38>)
 8007f14:	4c0d      	ldr	r4, [pc, #52]	; (8007f4c <__libc_init_array+0x3c>)
 8007f16:	1b64      	subs	r4, r4, r5
 8007f18:	10a4      	asrs	r4, r4, #2
 8007f1a:	2600      	movs	r6, #0
 8007f1c:	42a6      	cmp	r6, r4
 8007f1e:	d109      	bne.n	8007f34 <__libc_init_array+0x24>
 8007f20:	4d0b      	ldr	r5, [pc, #44]	; (8007f50 <__libc_init_array+0x40>)
 8007f22:	4c0c      	ldr	r4, [pc, #48]	; (8007f54 <__libc_init_array+0x44>)
 8007f24:	f000 fa52 	bl	80083cc <_init>
 8007f28:	1b64      	subs	r4, r4, r5
 8007f2a:	10a4      	asrs	r4, r4, #2
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	42a6      	cmp	r6, r4
 8007f30:	d105      	bne.n	8007f3e <__libc_init_array+0x2e>
 8007f32:	bd70      	pop	{r4, r5, r6, pc}
 8007f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f38:	4798      	blx	r3
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7ee      	b.n	8007f1c <__libc_init_array+0xc>
 8007f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f42:	4798      	blx	r3
 8007f44:	3601      	adds	r6, #1
 8007f46:	e7f2      	b.n	8007f2e <__libc_init_array+0x1e>
 8007f48:	08008718 	.word	0x08008718
 8007f4c:	08008718 	.word	0x08008718
 8007f50:	08008718 	.word	0x08008718
 8007f54:	0800871c 	.word	0x0800871c

08007f58 <memcpy>:
 8007f58:	440a      	add	r2, r1
 8007f5a:	4291      	cmp	r1, r2
 8007f5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f60:	d100      	bne.n	8007f64 <memcpy+0xc>
 8007f62:	4770      	bx	lr
 8007f64:	b510      	push	{r4, lr}
 8007f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f6e:	4291      	cmp	r1, r2
 8007f70:	d1f9      	bne.n	8007f66 <memcpy+0xe>
 8007f72:	bd10      	pop	{r4, pc}

08007f74 <memset>:
 8007f74:	4402      	add	r2, r0
 8007f76:	4603      	mov	r3, r0
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d100      	bne.n	8007f7e <memset+0xa>
 8007f7c:	4770      	bx	lr
 8007f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f82:	e7f9      	b.n	8007f78 <memset+0x4>

08007f84 <lrintf>:
 8007f84:	ee10 3a10 	vmov	r3, s0
 8007f88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f8c:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8007f90:	281e      	cmp	r0, #30
 8007f92:	b082      	sub	sp, #8
 8007f94:	dc2e      	bgt.n	8007ff4 <lrintf+0x70>
 8007f96:	1c41      	adds	r1, r0, #1
 8007f98:	da02      	bge.n	8007fa0 <lrintf+0x1c>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	b002      	add	sp, #8
 8007f9e:	4770      	bx	lr
 8007fa0:	2816      	cmp	r0, #22
 8007fa2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8007fa6:	dd09      	ble.n	8007fbc <lrintf+0x38>
 8007fa8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007fb0:	3a96      	subs	r2, #150	; 0x96
 8007fb2:	4090      	lsls	r0, r2
 8007fb4:	2900      	cmp	r1, #0
 8007fb6:	d0f1      	beq.n	8007f9c <lrintf+0x18>
 8007fb8:	4240      	negs	r0, r0
 8007fba:	e7ef      	b.n	8007f9c <lrintf+0x18>
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <lrintf+0x7c>)
 8007fbe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007fc2:	ed93 7a00 	vldr	s14, [r3]
 8007fc6:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007fca:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007fce:	eddd 7a01 	vldr	s15, [sp, #4]
 8007fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fd6:	ee17 3a90 	vmov	r3, s15
 8007fda:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007fde:	d0dc      	beq.n	8007f9a <lrintf+0x16>
 8007fe0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007fe4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007fe8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007fec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007ff0:	40d8      	lsrs	r0, r3
 8007ff2:	e7df      	b.n	8007fb4 <lrintf+0x30>
 8007ff4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ff8:	ee17 0a90 	vmov	r0, s15
 8007ffc:	e7ce      	b.n	8007f9c <lrintf+0x18>
 8007ffe:	bf00      	nop
 8008000:	08008494 	.word	0x08008494

08008004 <checkint>:
 8008004:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008008:	2b7e      	cmp	r3, #126	; 0x7e
 800800a:	dd10      	ble.n	800802e <checkint+0x2a>
 800800c:	2b96      	cmp	r3, #150	; 0x96
 800800e:	dc0c      	bgt.n	800802a <checkint+0x26>
 8008010:	2201      	movs	r2, #1
 8008012:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	1e5a      	subs	r2, r3, #1
 800801c:	4202      	tst	r2, r0
 800801e:	d106      	bne.n	800802e <checkint+0x2a>
 8008020:	4203      	tst	r3, r0
 8008022:	bf0c      	ite	eq
 8008024:	2002      	moveq	r0, #2
 8008026:	2001      	movne	r0, #1
 8008028:	4770      	bx	lr
 800802a:	2002      	movs	r0, #2
 800802c:	4770      	bx	lr
 800802e:	2000      	movs	r0, #0
 8008030:	4770      	bx	lr
 8008032:	0000      	movs	r0, r0
 8008034:	0000      	movs	r0, r0
	...

08008038 <powf>:
 8008038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800803a:	ee10 1a10 	vmov	r1, s0
 800803e:	ee10 4a90 	vmov	r4, s1
 8008042:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8008046:	0062      	lsls	r2, r4, #1
 8008048:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800804c:	eef0 7a40 	vmov.f32	s15, s0
 8008050:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8008054:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8008058:	d252      	bcs.n	8008100 <powf+0xc8>
 800805a:	4298      	cmp	r0, r3
 800805c:	d252      	bcs.n	8008104 <powf+0xcc>
 800805e:	2000      	movs	r0, #0
 8008060:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8008064:	4ca0      	ldr	r4, [pc, #640]	; (80082e8 <powf+0x2b0>)
 8008066:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800806a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800806e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8008072:	0dd2      	lsrs	r2, r2, #23
 8008074:	05d2      	lsls	r2, r2, #23
 8008076:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800807a:	1a8b      	subs	r3, r1, r2
 800807c:	ed95 6b00 	vldr	d6, [r5]
 8008080:	ee07 3a90 	vmov	s15, r3
 8008084:	15d2      	asrs	r2, r2, #23
 8008086:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800808a:	eea6 5b07 	vfma.f64	d5, d6, d7
 800808e:	ed95 6b02 	vldr	d6, [r5, #8]
 8008092:	ee25 2b05 	vmul.f64	d2, d5, d5
 8008096:	ee22 1b02 	vmul.f64	d1, d2, d2
 800809a:	ee07 2a90 	vmov	s15, r2
 800809e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80080a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80080aa:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 80080ae:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 80080b2:	eea5 3b06 	vfma.f64	d3, d5, d6
 80080b6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 80080ba:	eea5 6b04 	vfma.f64	d6, d5, d4
 80080be:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 80080c2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 80080c6:	eea5 7b04 	vfma.f64	d7, d5, d4
 80080ca:	eea2 7b06 	vfma.f64	d7, d2, d6
 80080ce:	eea3 7b01 	vfma.f64	d7, d3, d1
 80080d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80080d6:	ee10 3a90 	vmov	r3, s1
 80080da:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80080de:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80080e2:	429a      	cmp	r2, r3
 80080e4:	f0c0 80b1 	bcc.w	800824a <powf+0x212>
 80080e8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 80082c8 <powf+0x290>
 80080ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80080f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f4:	dd79      	ble.n	80081ea <powf+0x1b2>
 80080f6:	b003      	add	sp, #12
 80080f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080fc:	f000 b940 	b.w	8008380 <__math_oflowf>
 8008100:	4298      	cmp	r0, r3
 8008102:	d32d      	bcc.n	8008160 <powf+0x128>
 8008104:	b952      	cbnz	r2, 800811c <powf+0xe4>
 8008106:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8008110:	f240 80c9 	bls.w	80082a6 <powf+0x26e>
 8008114:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8008118:	b003      	add	sp, #12
 800811a:	bd30      	pop	{r4, r5, pc}
 800811c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008120:	d105      	bne.n	800812e <powf+0xf6>
 8008122:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8008126:	0064      	lsls	r4, r4, #1
 8008128:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800812c:	e7f0      	b.n	8008110 <powf+0xd8>
 800812e:	004b      	lsls	r3, r1, #1
 8008130:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8008134:	d8ee      	bhi.n	8008114 <powf+0xdc>
 8008136:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800813a:	d1eb      	bne.n	8008114 <powf+0xdc>
 800813c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008140:	f000 80b1 	beq.w	80082a6 <powf+0x26e>
 8008144:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008148:	ea6f 0404 	mvn.w	r4, r4
 800814c:	bf34      	ite	cc
 800814e:	2300      	movcc	r3, #0
 8008150:	2301      	movcs	r3, #1
 8008152:	0fe4      	lsrs	r4, r4, #31
 8008154:	42a3      	cmp	r3, r4
 8008156:	f040 80a9 	bne.w	80082ac <powf+0x274>
 800815a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800815e:	e7db      	b.n	8008118 <powf+0xe0>
 8008160:	004d      	lsls	r5, r1, #1
 8008162:	1e6a      	subs	r2, r5, #1
 8008164:	429a      	cmp	r2, r3
 8008166:	d31c      	bcc.n	80081a2 <powf+0x16a>
 8008168:	2900      	cmp	r1, #0
 800816a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800816e:	da0f      	bge.n	8008190 <powf+0x158>
 8008170:	ee10 0a90 	vmov	r0, s1
 8008174:	f7ff ff46 	bl	8008004 <checkint>
 8008178:	2801      	cmp	r0, #1
 800817a:	d109      	bne.n	8008190 <powf+0x158>
 800817c:	eeb1 0a40 	vneg.f32	s0, s0
 8008180:	b945      	cbnz	r5, 8008194 <powf+0x15c>
 8008182:	2c00      	cmp	r4, #0
 8008184:	dac8      	bge.n	8008118 <powf+0xe0>
 8008186:	b003      	add	sp, #12
 8008188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800818c:	f000 b8fe 	b.w	800838c <__math_divzerof>
 8008190:	2000      	movs	r0, #0
 8008192:	e7f5      	b.n	8008180 <powf+0x148>
 8008194:	2c00      	cmp	r4, #0
 8008196:	dabf      	bge.n	8008118 <powf+0xe0>
 8008198:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800819c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80081a0:	e7ba      	b.n	8008118 <powf+0xe0>
 80081a2:	2900      	cmp	r1, #0
 80081a4:	da1f      	bge.n	80081e6 <powf+0x1ae>
 80081a6:	ee10 0a90 	vmov	r0, s1
 80081aa:	f7ff ff2b 	bl	8008004 <checkint>
 80081ae:	b920      	cbnz	r0, 80081ba <powf+0x182>
 80081b0:	b003      	add	sp, #12
 80081b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081b6:	f000 b8f9 	b.w	80083ac <__math_invalidf>
 80081ba:	2801      	cmp	r0, #1
 80081bc:	bf14      	ite	ne
 80081be:	2000      	movne	r0, #0
 80081c0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80081c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80081c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80081cc:	f4bf af48 	bcs.w	8008060 <powf+0x28>
 80081d0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80082ec <powf+0x2b4>
 80081d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081d8:	ee10 3a10 	vmov	r3, s0
 80081dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081e0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80081e4:	e73c      	b.n	8008060 <powf+0x28>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e7ee      	b.n	80081c8 <powf+0x190>
 80081ea:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80082d0 <powf+0x298>
 80081ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80081f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f6:	dd10      	ble.n	800821a <powf+0x1e2>
 80081f8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d158      	bne.n	80082b2 <powf+0x27a>
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	eddd 7a00 	vldr	s15, [sp]
 8008206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800820a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800820e:	eef4 7a47 	vcmp.f32	s15, s14
 8008212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008216:	f47f af6e 	bne.w	80080f6 <powf+0xbe>
 800821a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80082d8 <powf+0x2a0>
 800821e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008226:	d804      	bhi.n	8008232 <powf+0x1fa>
 8008228:	b003      	add	sp, #12
 800822a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800822e:	f000 b89b 	b.w	8008368 <__math_uflowf>
 8008232:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80082e0 <powf+0x2a8>
 8008236:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800823a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823e:	d504      	bpl.n	800824a <powf+0x212>
 8008240:	b003      	add	sp, #12
 8008242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008246:	f000 b895 	b.w	8008374 <__math_may_uflowf>
 800824a:	4b29      	ldr	r3, [pc, #164]	; (80082f0 <powf+0x2b8>)
 800824c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8008250:	ee30 6b07 	vadd.f64	d6, d0, d7
 8008254:	ee16 2a10 	vmov	r2, s12
 8008258:	ee36 7b47 	vsub.f64	d7, d6, d7
 800825c:	f002 011f 	and.w	r1, r2, #31
 8008260:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8008264:	ee30 7b47 	vsub.f64	d7, d0, d7
 8008268:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800826c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8008270:	ee27 4b07 	vmul.f64	d4, d7, d7
 8008274:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8008278:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800827c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008280:	686d      	ldr	r5, [r5, #4]
 8008282:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8008286:	1882      	adds	r2, r0, r2
 8008288:	2300      	movs	r3, #0
 800828a:	1918      	adds	r0, r3, r4
 800828c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8008290:	eea7 0b05 	vfma.f64	d0, d7, d5
 8008294:	ec41 0b17 	vmov	d7, r0, r1
 8008298:	eea6 0b04 	vfma.f64	d0, d6, d4
 800829c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80082a0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80082a4:	e738      	b.n	8008118 <powf+0xe0>
 80082a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082aa:	e735      	b.n	8008118 <powf+0xe0>
 80082ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80082f4 <powf+0x2bc>
 80082b0:	e732      	b.n	8008118 <powf+0xe0>
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	eddd 7a01 	vldr	s15, [sp, #4]
 80082b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80082bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082c0:	e7a5      	b.n	800820e <powf+0x1d6>
 80082c2:	bf00      	nop
 80082c4:	f3af 8000 	nop.w
 80082c8:	ffd1d571 	.word	0xffd1d571
 80082cc:	405fffff 	.word	0x405fffff
 80082d0:	ffa3aae2 	.word	0xffa3aae2
 80082d4:	405fffff 	.word	0x405fffff
 80082d8:	00000000 	.word	0x00000000
 80082dc:	c062c000 	.word	0xc062c000
 80082e0:	00000000 	.word	0x00000000
 80082e4:	c062a000 	.word	0xc062a000
 80082e8:	080084a0 	.word	0x080084a0
 80082ec:	4b000000 	.word	0x4b000000
 80082f0:	080085c8 	.word	0x080085c8
 80082f4:	00000000 	.word	0x00000000

080082f8 <sqrtf>:
 80082f8:	b508      	push	{r3, lr}
 80082fa:	ed2d 8b02 	vpush	{d8}
 80082fe:	eeb0 8a40 	vmov.f32	s16, s0
 8008302:	f000 f817 	bl	8008334 <__ieee754_sqrtf>
 8008306:	eeb4 8a48 	vcmp.f32	s16, s16
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	d60c      	bvs.n	800832a <sqrtf+0x32>
 8008310:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008330 <sqrtf+0x38>
 8008314:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831c:	d505      	bpl.n	800832a <sqrtf+0x32>
 800831e:	f7ff fdf1 	bl	8007f04 <__errno>
 8008322:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008326:	2321      	movs	r3, #33	; 0x21
 8008328:	6003      	str	r3, [r0, #0]
 800832a:	ecbd 8b02 	vpop	{d8}
 800832e:	bd08      	pop	{r3, pc}
 8008330:	00000000 	.word	0x00000000

08008334 <__ieee754_sqrtf>:
 8008334:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008338:	4770      	bx	lr

0800833a <with_errnof>:
 800833a:	b513      	push	{r0, r1, r4, lr}
 800833c:	4604      	mov	r4, r0
 800833e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008342:	f7ff fddf 	bl	8007f04 <__errno>
 8008346:	ed9d 0a01 	vldr	s0, [sp, #4]
 800834a:	6004      	str	r4, [r0, #0]
 800834c:	b002      	add	sp, #8
 800834e:	bd10      	pop	{r4, pc}

08008350 <xflowf>:
 8008350:	b130      	cbz	r0, 8008360 <xflowf+0x10>
 8008352:	eef1 7a40 	vneg.f32	s15, s0
 8008356:	ee27 0a80 	vmul.f32	s0, s15, s0
 800835a:	2022      	movs	r0, #34	; 0x22
 800835c:	f7ff bfed 	b.w	800833a <with_errnof>
 8008360:	eef0 7a40 	vmov.f32	s15, s0
 8008364:	e7f7      	b.n	8008356 <xflowf+0x6>
	...

08008368 <__math_uflowf>:
 8008368:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008370 <__math_uflowf+0x8>
 800836c:	f7ff bff0 	b.w	8008350 <xflowf>
 8008370:	10000000 	.word	0x10000000

08008374 <__math_may_uflowf>:
 8008374:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800837c <__math_may_uflowf+0x8>
 8008378:	f7ff bfea 	b.w	8008350 <xflowf>
 800837c:	1a200000 	.word	0x1a200000

08008380 <__math_oflowf>:
 8008380:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008388 <__math_oflowf+0x8>
 8008384:	f7ff bfe4 	b.w	8008350 <xflowf>
 8008388:	70000000 	.word	0x70000000

0800838c <__math_divzerof>:
 800838c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008390:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8008394:	2800      	cmp	r0, #0
 8008396:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800839a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80083a8 <__math_divzerof+0x1c>
 800839e:	2022      	movs	r0, #34	; 0x22
 80083a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80083a4:	f7ff bfc9 	b.w	800833a <with_errnof>
 80083a8:	00000000 	.word	0x00000000

080083ac <__math_invalidf>:
 80083ac:	eef0 7a40 	vmov.f32	s15, s0
 80083b0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80083b4:	eef4 7a67 	vcmp.f32	s15, s15
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80083c0:	d602      	bvs.n	80083c8 <__math_invalidf+0x1c>
 80083c2:	2021      	movs	r0, #33	; 0x21
 80083c4:	f7ff bfb9 	b.w	800833a <with_errnof>
 80083c8:	4770      	bx	lr
	...

080083cc <_init>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr

080083d8 <_fini>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	bf00      	nop
 80083dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083de:	bc08      	pop	{r3}
 80083e0:	469e      	mov	lr, r3
 80083e2:	4770      	bx	lr
