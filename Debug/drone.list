
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f5c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08014160  08014160  00024160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147e0  080147e0  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  080147e0  080147e0  000247e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147e8  080147e8  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147e8  080147e8  000247e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147ec  080147ec  000247ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  080147f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e2c  20000224  08014a14  00030224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006050  08014a14  00036050  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f8b7  00000000  00000000  00030252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000781c  00000000  00000000  0007fb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003988  00000000  00000000  00087328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003670  00000000  00000000  0008acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f796  00000000  00000000  0008e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000368d8  00000000  00000000  000bdab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ddc3  00000000  00000000  000f438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00212151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ff28  00000000  00000000  002121a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000224 	.word	0x20000224
 800021c:	00000000 	.word	0x00000000
 8000220:	08014144 	.word	0x08014144

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000228 	.word	0x20000228
 800023c:	08014144 	.word	0x08014144

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <applyAccelerationTrims+0x70>)
 80005ee:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <applyAccelerationTrims+0x70>)
 8000606:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <applyAccelerationTrims+0x70>)
 800060c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000616:	ee07 3a90 	vmov	s15, r3
 800061a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800061e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <applyAccelerationTrims+0x70>)
 8000624:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <applyAccelerationTrims+0x70>)
 800062a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000634:	ee07 3a90 	vmov	s15, r3
 8000638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <applyAccelerationTrims+0x70>)
 8000642:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000240 	.word	0x20000240

08000658 <accInitFilters>:


static void accInitFilters(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <accInitFilters+0xc0>)
 8000660:	2232      	movs	r2, #50	; 0x32
 8000662:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 8000664:	4b2d      	ldr	r3, [pc, #180]	; (800071c <accInitFilters+0xc4>)
 8000666:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800066a:	2b00      	cmp	r3, #0
 800066c:	d002      	beq.n	8000674 <accInitFilters+0x1c>
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <accInitFilters+0xc0>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	e000      	b.n	8000676 <accInitFilters+0x1e>
 8000674:	2300      	movs	r3, #0
 8000676:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <accInitFilters+0xc8>)
 8000678:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <accInitFilters+0xc8>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d02c      	beq.n	80006dc <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <accInitFilters+0xc4>)
 8000684:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000688:	ee07 3a90 	vmov	s15, r3
 800068c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000690:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000710 <accInitFilters+0xb8>
 8000694:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000698:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800069c:	ee17 3a90 	vmov	r3, s15
 80006a0:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	e016      	b.n	80006d6 <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4613      	mov	r3, r2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <accInitFilters+0xc8>)
 80006b4:	4413      	add	r3, r2
 80006b6:	3304      	adds	r3, #4
 80006b8:	4a19      	ldr	r2, [pc, #100]	; (8000720 <accInitFilters+0xc8>)
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	ee07 2a90 	vmov	s15, r2
 80006c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006c4:	6839      	ldr	r1, [r7, #0]
 80006c6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fbe2 	bl	8000e94 <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	dde5      	ble.n	80006a8 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <accInitFilters+0xc8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <accInitFilters+0xc8>)
 80006e6:	f04f 0200 	mov.w	r2, #0
 80006ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <accInitFilters+0xc8>)
 80006f0:	f04f 0200 	mov.w	r2, #0
 80006f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <accInitFilters+0xc8>)
 80006fa:	f04f 0200 	mov.w	r2, #0
 80006fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	f3af 8000 	nop.w
 8000710:	00000000 	.word	0x00000000
 8000714:	412e8480 	.word	0x412e8480
 8000718:	20000334 	.word	0x20000334
 800071c:	20000240 	.word	0x20000240
 8000720:	200002a0 	.word	0x200002a0

08000724 <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <setAccelerationTrims+0x1c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	200002a0 	.word	0x200002a0

08000744 <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 800074e:	2260      	movs	r2, #96	; 0x60
 8000750:	2100      	movs	r1, #0
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <accInit+0xa0>)
 8000754:	f012 fb53 	bl	8012dfe <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <accInit+0xa0>)
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <accInit+0xa4>)
 800075c:	621a      	str	r2, [r3, #32]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <accInit+0xa8>)
 8000760:	78da      	ldrb	r2, [r3, #3]
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <accInit+0xa0>)
 8000764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 8000768:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <accInit+0xac>)
 800076a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800076e:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 8000770:	7bfa      	ldrb	r2, [r7, #15]
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f005 f8f9 	bl	8005970 <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <accInit+0xa0>)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	7793      	strb	r3, [r2, #30]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	491a      	ldr	r1, [pc, #104]	; (80007f4 <accInit+0xb0>)
 800078a:	4618      	mov	r0, r3
 800078c:	f005 f8ac 	bl	80058e8 <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <accInit+0xa0>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <accInit+0xa0>)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <accInit+0xa0>)
 800079e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a2:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <accInit+0xa0>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	480e      	ldr	r0, [pc, #56]	; (80007e4 <accInit+0xa0>)
 80007aa:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <accInit+0xa0>)
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	ee07 3a90 	vmov	s15, r3
 80007b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <accInit+0xa0>)
 80007c2:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <accInit+0xa0>)
 80007c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	setAccelerationTrims(&accelerometerConfig.accZero);
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <accInit+0xb4>)
 80007d2:	f7ff ffa7 	bl	8000724 <setAccelerationTrims>

	accInitFilters();
 80007d6:	f7ff ff3f 	bl	8000658 <accInitFilters>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000240 	.word	0x20000240
 80007e8:	200004e0 	.word	0x200004e0
 80007ec:	20000334 	.word	0x20000334
 80007f0:	200004a4 	.word	0x200004a4
 80007f4:	20000268 	.word	0x20000268
 80007f8:	20000338 	.word	0x20000338

080007fc <accUpdate>:

void accUpdate(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <accUpdate+0x10c>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	4840      	ldr	r0, [pc, #256]	; (8000908 <accUpdate+0x10c>)
 8000808:	4798      	blx	r3
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d077      	beq.n	8000900 <accUpdate+0x104>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000810:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <accUpdate+0x10c>)
 8000812:	2201      	movs	r2, #1
 8000814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e00e      	b.n	800083c <accUpdate+0x40>
        acc.accADC[axis] = acc.dev.accADC[axis];
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <accUpdate+0x10c>)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3304      	adds	r3, #4
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4937      	ldr	r1, [pc, #220]	; (8000908 <accUpdate+0x10c>)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	3314      	adds	r3, #20
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	440b      	add	r3, r1
 8000834:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b02      	cmp	r3, #2
 8000840:	dded      	ble.n	800081e <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <accUpdate+0x110>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d025      	beq.n	8000896 <accUpdate+0x9a>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	e01f      	b.n	8000890 <accUpdate+0x94>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	4a2c      	ldr	r2, [pc, #176]	; (800090c <accUpdate+0x110>)
 800085c:	4413      	add	r3, r2
 800085e:	1d1a      	adds	r2, r3, #4
 8000860:	4929      	ldr	r1, [pc, #164]	; (8000908 <accUpdate+0x10c>)
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3314      	adds	r3, #20
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	eeb0 0a67 	vmov.f32	s0, s15
 8000872:	4610      	mov	r0, r2
 8000874:	f000 fb26 	bl	8000ec4 <biquadFilterApply>
 8000878:	eef0 7a40 	vmov.f32	s15, s0
 800087c:	4a22      	ldr	r2, [pc, #136]	; (8000908 <accUpdate+0x10c>)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	3314      	adds	r3, #20
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3301      	adds	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	2b02      	cmp	r3, #2
 8000894:	dddc      	ble.n	8000850 <accUpdate+0x54>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <accUpdate+0x10c>)
 8000898:	7f9b      	ldrb	r3, [r3, #30]
 800089a:	4619      	mov	r1, r3
 800089c:	481c      	ldr	r0, [pc, #112]	; (8000910 <accUpdate+0x114>)
 800089e:	f005 f8b5 	bl	8005a0c <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <accUpdate+0x110>)
 80008a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe9c 	bl	80005e4 <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <accUpdate+0x110>)
 80008ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a15      	ldr	r2, [pc, #84]	; (800090c <accUpdate+0x110>)
 80008b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	e01b      	b.n	80008f8 <accUpdate+0xfc>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <accUpdate+0x110>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3320      	adds	r3, #32
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	ed93 7a00 	vldr	s14, [r3]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <accUpdate+0x10c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3314      	adds	r3, #20
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	edd3 7a00 	vldr	s15, [r3]
 80008de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <accUpdate+0x110>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3320      	adds	r3, #32
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	3304      	adds	r3, #4
 80008ee:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3301      	adds	r3, #1
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	dde0      	ble.n	80008c0 <accUpdate+0xc4>
 80008fe:	e000      	b.n	8000902 <accUpdate+0x106>
        return;
 8000900:	bf00      	nop
    }
}
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000240 	.word	0x20000240
 800090c:	200002a0 	.word	0x200002a0
 8000910:	20000290 	.word	0x20000290

08000914 <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <accGetAccumulationAverage+0xa0>)
 800091e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000922:	2b00      	cmp	r3, #0
 8000924:	dd2e      	ble.n	8000984 <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	e022      	b.n	8000972 <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <accGetAccumulationAverage+0xa0>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3320      	adds	r3, #32
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3304      	adds	r3, #4
 8000938:	edd3 6a00 	vldr	s13, [r3]
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <accGetAccumulationAverage+0xa0>)
 800093e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000956:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <accGetAccumulationAverage+0xa0>)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3320      	adds	r3, #32
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	3304      	adds	r3, #4
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	2b02      	cmp	r3, #2
 8000976:	ddd9      	ble.n	800092c <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <accGetAccumulationAverage+0xa0>)
 800097a:	2200      	movs	r2, #0
 800097c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 8000980:	2301      	movs	r3, #1
 8000982:	e010      	b.n	80009a6 <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	e009      	b.n	800099e <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	f04f 0200 	mov.w	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	3301      	adds	r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	ddf2      	ble.n	800098a <accGetAccumulationAverage+0x76>
        }
        return false;
 80009a4:	2300      	movs	r3, #0
    }
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200002a0 	.word	0x200002a0

080009b8 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	imuInit();
 80009bc:	f001 fefe 	bl	80027bc <imuInit>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <attitudeUpdate>:

void attitudeUpdate(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 80009c8:	f002 fc08 	bl	80031dc <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 80009cc:	f002 fce8 	bl	80033a0 <imuCalculateThrottleAngleCorrection>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <barometerConfig>:
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

barometerConfig_t barometerConfig_System;

static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; }
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <barometerConfig+0x10>)
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	200003fc 	.word	0x200003fc

080009e8 <pgResetFn_barometerConfig>:

static void pgResetFn_barometerConfig(barometerConfig_t *barometerConfig)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    barometerConfig->baro_hardware = BARO_LPS;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2205      	movs	r2, #5
 80009f4:	715a      	strb	r2, [r3, #5]
    barometerConfig->baro_busType = BUS_TYPE_I2C;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
    barometerConfig->baro_i2c_device = I2C_DEV_TO_CFG(BARO_I2C_INSTANCE);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	70da      	strb	r2, [r3, #3]
    barometerConfig->baro_i2c_address = DEFAULT_BARO_I2C_ADDRESS;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	711a      	strb	r2, [r3, #4]
    barometerConfig->baro_spi_device = SPI_DEV_TO_CFG(SPIINVALID);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	705a      	strb	r2, [r3, #1]
    barometerConfig->baro_spi_csn = IO_TAG_NONE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	709a      	strb	r2, [r3, #2]
    barometerConfig->baro_eoc_tag = IO_TAG(BARO_EOC_PIN);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	719a      	strb	r2, [r3, #6]
    barometerConfig->baro_xclr_tag = IO_TAG(BARO_XCLR_PIN);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	71da      	strb	r2, [r3, #7]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <lpsNothing>:

static void lpsNothing(baroDev_t *baro)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    (void)(baro);
    return;
 8000a34:	bf00      	nop
}
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <lpsNothingBool>:

static bool lpsNothingBool(baroDev_t *baro)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	(void)(baro);
    return true;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <lpsNothingCalculate>:

static void lpsNothingCalculate(int32_t *pressure, int32_t *temperature)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	(void)(*pressure);
	(void)(*temperature);
    return;
 8000a60:	bf00      	nop
}
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <lpsDetect>:

static bool lpsDetect(baroDev_t *baro)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    baro->combined_read = true;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    baro->ut_delay = 1;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    baro->up_delay = 1000000 / 24;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f24a 22c2 	movw	r2, #41666	; 0xa2c2
 8000a8a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    baro->start_ut = lpsNothing;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <lpsDetect+0x68>)
 8000a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    baro->get_ut = lpsNothingBool;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <lpsDetect+0x6c>)
 8000a9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    baro->read_ut = lpsNothingBool;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <lpsDetect+0x6c>)
 8000aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    baro->start_up = lpsNothing;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <lpsDetect+0x68>)
 8000aaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    baro->get_up = lpsNothingBool;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <lpsDetect+0x6c>)
 8000ab2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    baro->read_up = lpsNothingBool;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <lpsDetect+0x6c>)
 8000aba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    baro->calculate = lpsNothingCalculate;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a06      	ldr	r2, [pc, #24]	; (8000adc <lpsDetect+0x70>)
 8000ac2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return true;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	08000a2d 	.word	0x08000a2d
 8000ad8:	08000a41 	.word	0x08000a41
 8000adc:	08000a57 	.word	0x08000a57

08000ae0 <baroDetect>:

static bool baroDetect(baroDev_t *baroDev, baroSensor_e baroHardwareToUse)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
    extDevice_t *dev = &baroDev->dev;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	60bb      	str	r3, [r7, #8]

    // Detect what pressure sensors are available. baro->update() is set to sensor-specific update function

    baroSensor_e baroHardware = baroHardwareToUse;
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	73fb      	strb	r3, [r7, #15]

    switch (barometerConfig()->baro_busType) {
 8000af4:	f7ff ff6e 	bl	80009d4 <barometerConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d12b      	bne.n	8000b58 <baroDetect+0x78>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, barometerConfig()->baro_i2c_device);
 8000b00:	f7ff ff68 	bl	80009d4 <barometerConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	68b8      	ldr	r0, [r7, #8]
 8000b0c:	f000 f8c6 	bl	8000c9c <i2cBusSetInstance>
        dev->busType_u.i2c.address = barometerConfig()->baro_i2c_address;
 8000b10:	f7ff ff60 	bl	80009d4 <barometerConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	791a      	ldrb	r2, [r3, #4]
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	711a      	strb	r2, [r3, #4]
        break;
 8000b1c:	bf00      	nop
    default:
        return false;
    }

    switch (baroHardware) {
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b0a      	cmp	r3, #10
 8000b22:	d827      	bhi.n	8000b74 <baroDetect+0x94>
 8000b24:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <baroDetect+0x4c>)
 8000b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2a:	bf00      	nop
 8000b2c:	08000b5d 	.word	0x08000b5d
 8000b30:	08000b6f 	.word	0x08000b6f
 8000b34:	08000b5d 	.word	0x08000b5d
 8000b38:	08000b5d 	.word	0x08000b5d
 8000b3c:	08000b6f 	.word	0x08000b6f
 8000b40:	08000b5d 	.word	0x08000b5d
 8000b44:	08000b6f 	.word	0x08000b6f
 8000b48:	08000b6f 	.word	0x08000b6f
 8000b4c:	08000b6f 	.word	0x08000b6f
 8000b50:	08000b6f 	.word	0x08000b6f
 8000b54:	08000b6f 	.word	0x08000b6f
        return false;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e011      	b.n	8000b80 <baroDetect+0xa0>
    case BARO_DEFAULT:
    case BARO_BMP085:
    case BARO_MS5611:
    case BARO_LPS:
        if (lpsDetect(baroDev)) {
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff ff85 	bl	8000a6c <lpsDetect>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d002      	beq.n	8000b6e <baroDetect+0x8e>
            baroHardware = BARO_LPS;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	73fb      	strb	r3, [r7, #15]
            break;
 8000b6c:	e002      	b.n	8000b74 <baroDetect+0x94>
    case BARO_BMP280:
    case BARO_QMP6988:
    case BARO_2SMPB_02B:
    case BARO_VIRTUAL:
    case BARO_NONE:
        baroHardware = BARO_NONE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
        break;
 8000b72:	bf00      	nop
    }

    if (baroHardware == BARO_NONE) {
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d101      	bne.n	8000b7e <baroDetect+0x9e>
        return false;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <baroDetect+0xa0>
    }

    return true;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 8000b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b96:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000bc8 <pressureToAltitude+0x40>
 8000b9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b9e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000bcc <pressureToAltitude+0x44>
 8000ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ba6:	f013 f903 	bl	8013db0 <powf>
 8000baa:	eef0 7a40 	vmov.f32	s15, s0
 8000bae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000bd0 <pressureToAltitude+0x48>
 8000bba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	47c5e680 	.word	0x47c5e680
 8000bcc:	3e42dcb1 	.word	0x3e42dcb1
 8000bd0:	4a8748d0 	.word	0x4a8748d0

08000bd4 <baroInit>:

void baroInit(sensorBaroInitFuncPtr initFn, sensorBaroReadFuncPtr readFn)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	pgResetFn_barometerConfig(&barometerConfig_System);
 8000bde:	4818      	ldr	r0, [pc, #96]	; (8000c40 <baroInit+0x6c>)
 8000be0:	f7ff ff02 	bl	80009e8 <pgResetFn_barometerConfig>
    baroDetect(&baro.dev, barometerConfig()->baro_hardware);
 8000be4:	f7ff fef6 	bl	80009d4 <barometerConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	795b      	ldrb	r3, [r3, #5]
 8000bec:	4619      	mov	r1, r3
 8000bee:	4815      	ldr	r0, [pc, #84]	; (8000c44 <baroInit+0x70>)
 8000bf0:	f7ff ff76 	bl	8000ae0 <baroDetect>
    baro.dev.read_ut = readFn;
 8000bf4:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <baroInit+0x70>)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    initFn(&baro.dev);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <baroInit+0x70>)
 8000c00:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <baroInit+0x70>)
 8000c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd10      	ble.n	8000c2e <baroInit+0x5a>
    	baro.ground_altitude = pressureToAltitude(baro.dev.baroADC);
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <baroInit+0x70>)
 8000c0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c1e:	f7ff ffb3 	bl	8000b88 <pressureToAltitude>
 8000c22:	eef0 7a40 	vmov.f32	s15, s0
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <baroInit+0x70>)
 8000c28:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    } else {
    	baro.ground_altitude = 0;
    }
}
 8000c2c:	e004      	b.n	8000c38 <baroInit+0x64>
    	baro.ground_altitude = 0;
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <baroInit+0x70>)
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200003fc 	.word	0x200003fc
 8000c44:	20000344 	.word	0x20000344

08000c48 <baroUpdate>:

void baroUpdate(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
    baro.dev.read_ut(&baro.dev);
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <baroUpdate+0x50>)
 8000c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c54:	4810      	ldr	r0, [pc, #64]	; (8000c98 <baroUpdate+0x50>)
 8000c56:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <baroUpdate+0x50>)
 8000c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	dd16      	ble.n	8000c90 <baroUpdate+0x48>
        const float altitude = pressureToAltitude(baro.dev.baroADC);
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <baroUpdate+0x50>)
 8000c64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c70:	eeb0 0a67 	vmov.f32	s0, s15
 8000c74:	f7ff ff88 	bl	8000b88 <pressureToAltitude>
 8000c78:	ed87 0a01 	vstr	s0, [r7, #4]
        baro.altitude = altitude - baro.ground_altitude;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <baroUpdate+0x50>)
 8000c7e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8000c82:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c8a:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <baroUpdate+0x50>)
 8000c8c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    }
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000344 	.word	0x20000344

08000c9c <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <i2cBusSetInstance+0x16>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d901      	bls.n	8000cb6 <i2cBusSetInstance+0x1a>
        return false;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e016      	b.n	8000ce4 <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <i2cBusSetInstance+0x54>)
 8000cc4:	441a      	add	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	b252      	sxtb	r2, r2
 8000ce0:	711a      	strb	r2, [r3, #4]

    return true;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	20000404 	.word	0x20000404

08000cf4 <controlMotorInit>:

#include "control_motor.h"

#include "pid.h"

void controlMotorInit(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	pidInit();
 8000cf8:	f003 fed8 	bl	8004aac <pidInit>
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 8000d04:	f004 fd14 	bl	8005730 <pidIncUpdateCounter>
    processRcCommand();
 8000d08:	f004 fd32 	bl	8005770 <processRcCommand>
    pidController();
 8000d0c:	f004 f838 	bl	8004d80 <pidController>
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d1e:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 8000d22:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d26:	edd7 7a00 	vldr	s15, [r7]
 8000d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d32:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000d36:	edd7 7a00 	vldr	s15, [r7]
 8000d3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d46:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	ed87 0a00 	vstr	s0, [r7]
    return input;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	ee07 3a90 	vmov	s15, r3
}
 8000d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d82:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8000d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000dc4 <pt1FilterGain+0x4c>
 8000d8e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9a:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8000d9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000da2:	edd7 7a00 	vldr	s15, [r7]
 8000da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000daa:	ed97 7a00 	vldr	s14, [r7]
 8000dae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000db2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000db6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40c90fdb 	.word	0x40c90fdb

08000dc8 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    filter->k = k;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	605a      	str	r2, [r3, #4]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	ed93 7a00 	vldr	s14, [r3]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	ed97 6a00 	vldr	s12, [r7]
 8000e10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	ee07 3a90 	vmov	s15, r3
}
 8000e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6178      	str	r0, [r7, #20]
 8000e40:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e44:	60f9      	str	r1, [r7, #12]
 8000e46:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	ed87 1a00 	vstr	s2, [r7]
 8000e50:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	ed97 1a00 	vldr	s2, [r7]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f000 f877 	bl	8000f58 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	6a1a      	ldr	r2, [r3, #32]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	61da      	str	r2, [r3, #28]
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ea0:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 8000ea2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000ec0 <biquadFilterInitLPF+0x2c>
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	ed97 0a02 	vldr	s0, [r7, #8]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff ffc0 	bl	8000e38 <biquadFilterInit>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	3f3504f3 	.word	0x3f3504f3

08000ec4 <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	ed93 7a00 	vldr	s14, [r3]
 8000ed6:	edd7 7a00 	vldr	s15, [r7]
 8000eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee8:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ef2:	edd7 7a00 	vldr	s15, [r7]
 8000ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f22:	edd7 7a00 	vldr	s15, [r7]
 8000f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	ee07 3a90 	vmov	s15, r3
}
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6178      	str	r0, [r7, #20]
 8000f60:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f64:	60f9      	str	r1, [r7, #12]
 8000f66:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	ed87 1a00 	vstr	s2, [r7]
 8000f70:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 8000f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f76:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001130 <biquadFilterUpdate+0x1d8>
 8000f7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001134 <biquadFilterUpdate+0x1dc>
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8000f98:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000f9c:	f000 fa24 	bl	80013e8 <sin_approx>
 8000fa0:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8000fa4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000fa8:	f000 fac8 	bl	800153c <cos_approx>
 8000fac:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8000fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc0:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d04f      	beq.n	800106a <biquadFilterUpdate+0x112>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	dc6e      	bgt.n	80010ac <biquadFilterUpdate+0x154>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <biquadFilterUpdate+0x80>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d02a      	beq.n	800102c <biquadFilterUpdate+0xd4>
 8000fd6:	e069      	b.n	80010ac <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 8000fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ff0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 8001006:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800100a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800100e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800101c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800102a:	e03f      	b.n	80010ac <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001032:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 8001034:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001038:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800103c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800104c:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 8001056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800105a:	edd7 7a08 	vldr	s15, [r7, #32]
 800105e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001068:	e020      	b.n	80010ac <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	6a3a      	ldr	r2, [r7, #32]
 800106e:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8001078:	edd7 7a08 	vldr	s15, [r7, #32]
 800107c:	eef1 7a67 	vneg.f32	s15, s15
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 8001086:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800108a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800108e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800109c:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 80010aa:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 80010ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	edd3 6a00 	vldr	s13, [r3]
 80010c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80010da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80010ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	edd3 6a03 	vldr	s13, [r3, #12]
 80010fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001112:	ed97 7a07 	vldr	s14, [r7, #28]
 8001116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001126:	bf00      	nop
 8001128:	3730      	adds	r7, #48	; 0x30
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40c90fdb 	.word	0x40c90fdb
 8001134:	358637bd 	.word	0x358637bd

08001138 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001142:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 8001146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114a:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 800114c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001150:	edd7 7a05 	vldr	s15, [r7, #20]
 8001154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001158:	eef0 0a47 	vmov.f32	s1, s14
 800115c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001160:	f012 fe26 	bl	8013db0 <powf>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800116c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	f012 ff7c 	bl	8014070 <sqrtf>
 8001178:	eeb0 7a40 	vmov.f32	s14, s0
 800117c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001184:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8001188:	edd7 7a04 	vldr	s15, [r7, #16]
 800118c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001190:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80011d0 <pt2FilterGain+0x98>
 8001194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001198:	edd7 7a01 	vldr	s15, [r7, #4]
 800119c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a8:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 80011ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80011b0:	edd7 7a00 	vldr	s15, [r7]
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	ed97 7a00 	vldr	s14, [r7]
 80011bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011c0:	eef0 7a66 	vmov.f32	s15, s13
}
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40490fdb 	.word	0x40490fdb

080011d4 <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
    filter->k = k;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	609a      	str	r2, [r3, #8]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	ed93 7a01 	vldr	s14, [r3, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 6a02 	vldr	s13, [r3, #8]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001220:	ed97 6a00 	vldr	s12, [r7]
 8001224:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	ed93 7a00 	vldr	s14, [r3]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	ed93 6a01 	vldr	s12, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001282:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <pt3FilterGain+0x94>)
 8001288:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 800128a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800128e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001296:	eef0 0a47 	vmov.f32	s1, s14
 800129a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800129e:	f012 fd87 	bl	8013db0 <powf>
 80012a2:	eef0 7a40 	vmov.f32	s15, s0
 80012a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	f012 fedd 	bl	8014070 <sqrtf>
 80012b6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 80012c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012ce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001310 <pt3FilterGain+0x98>
 80012d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e6:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 80012ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ee:	edd7 7a00 	vldr	s15, [r7]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	ed97 7a00 	vldr	s14, [r7]
 80012fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40400000 	.word	0x40400000
 8001310:	40490fdb 	.word	0x40490fdb

08001314 <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	60da      	str	r2, [r3, #12]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	ed93 7a01 	vldr	s14, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edd3 7a01 	vldr	s15, [r3, #4]
 8001368:	ed97 6a00 	vldr	s12, [r7]
 800136c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	ed93 7a02 	vldr	s14, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	edd3 6a03 	vldr	s13, [r3, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	ed93 6a01 	vldr	s12, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edd3 7a02 	vldr	s15, [r3, #8]
 8001396:	ee76 7a67 	vsub.f32	s15, s12, s15
 800139a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edd3 6a03 	vldr	s13, [r3, #12]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	ed93 6a02 	vldr	s12, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	ee07 3a90 	vmov	s15, r3
}
 80013da:	eeb0 0a67 	vmov.f32	s0, s15
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 80013f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 3a90 	vmov	r3, s15
 80013fe:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f113 0f20 	cmn.w	r3, #32
 8001406:	db02      	blt.n	800140e <sin_approx+0x26>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b20      	cmp	r3, #32
 800140c:	dd0a      	ble.n	8001424 <sin_approx+0x3c>
 800140e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001518 <sin_approx+0x130>
 8001412:	e079      	b.n	8001508 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8001414:	edd7 7a01 	vldr	s15, [r7, #4]
 8001418:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800151c <sin_approx+0x134>
 800141c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001420:	edc7 7a01 	vstr	s15, [r7, #4]
 8001424:	edd7 7a01 	vldr	s15, [r7, #4]
 8001428:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001520 <sin_approx+0x138>
 800142c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	dcee      	bgt.n	8001414 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8001436:	e007      	b.n	8001448 <sin_approx+0x60>
 8001438:	edd7 7a01 	vldr	s15, [r7, #4]
 800143c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800151c <sin_approx+0x134>
 8001440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001444:	edc7 7a01 	vstr	s15, [r7, #4]
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001524 <sin_approx+0x13c>
 8001450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d4ee      	bmi.n	8001438 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800145a:	edd7 7a01 	vldr	s15, [r7, #4]
 800145e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001528 <sin_approx+0x140>
 8001462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	dd0c      	ble.n	8001486 <sin_approx+0x9e>
 800146c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001470:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001528 <sin_approx+0x140>
 8001474:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001478:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001528 <sin_approx+0x140>
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	edc7 7a01 	vstr	s15, [r7, #4]
 8001484:	e014      	b.n	80014b0 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8001486:	edd7 7a01 	vldr	s15, [r7, #4]
 800148a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800152c <sin_approx+0x144>
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d50b      	bpl.n	80014b0 <sin_approx+0xc8>
 8001498:	edd7 7a01 	vldr	s15, [r7, #4]
 800149c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001528 <sin_approx+0x140>
 80014a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800152c <sin_approx+0x144>
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 80014b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b8:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80014bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014cc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001518 <sin_approx+0x130>
 80014d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014d4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001530 <sin_approx+0x148>
 80014d8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80014dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001534 <sin_approx+0x14c>
 80014e8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001538 <sin_approx+0x150>
 80014f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80014fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001500:	edd7 7a01 	vldr	s15, [r7, #4]
 8001504:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	00000000 	.word	0x00000000
 800151c:	40c90fdb 	.word	0x40c90fdb
 8001520:	40490fdb 	.word	0x40490fdb
 8001524:	c0490fdb 	.word	0xc0490fdb
 8001528:	3fc90fdb 	.word	0x3fc90fdb
 800152c:	bfc90fdb 	.word	0xbfc90fdb
 8001530:	3941e792 	.word	0x3941e792
 8001534:	3c083097 	.word	0x3c083097
 8001538:	3e2aa815 	.word	0x3e2aa815

0800153c <cos_approx>:

float cos_approx(float x)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 8001546:	edd7 7a01 	vldr	s15, [r7, #4]
 800154a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001568 <cos_approx+0x2c>
 800154e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f7ff ff47 	bl	80013e8 <sin_approx>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
}
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	3fc90fdb 	.word	0x3fc90fdb

0800156c <acos_approx>:

float acos_approx(float x)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 8001576:	edd7 7a01 	vldr	s15, [r7, #4]
 800157a:	eef0 7ae7 	vabs.f32	s15, s15
 800157e:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 8001582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001586:	edd7 7a03 	vldr	s15, [r7, #12]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f012 fd6d 	bl	8014070 <sqrtf>
 8001596:	eef0 6a40 	vmov.f32	s13, s0
 800159a:	edd7 7a03 	vldr	s15, [r7, #12]
 800159e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001600 <acos_approx+0x94>
 80015a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001604 <acos_approx+0x98>
 80015aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001608 <acos_approx+0x9c>
 80015ba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800160c <acos_approx+0xa0>
 80015ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 80015d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	d506      	bpl.n	80015f2 <acos_approx+0x86>
        return M_PIf - result;
 80015e4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001610 <acos_approx+0xa4>
 80015e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f0:	e001      	b.n	80015f6 <acos_approx+0x8a>
    else
        return result;
 80015f2:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	bc996e30 	.word	0xbc996e30
 8001604:	3d981627 	.word	0x3d981627
 8001608:	3e593484 	.word	0x3e593484
 800160c:	3fc90da4 	.word	0x3fc90da4
 8001610:	40490fdb 	.word	0x40490fdb

08001614 <atan2_approx>:

float atan2_approx(float y, float x)
{
 8001614:	b480      	push	{r7}
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	af00      	add	r7, sp, #0
 800161a:	ed87 0a01 	vstr	s0, [r7, #4]
 800161e:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001622:	edd7 7a00 	vldr	s15, [r7]
 8001626:	eef0 7ae7 	vabs.f32	s15, s15
 800162a:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 800162e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001632:	eef0 7ae7 	vabs.f32	s15, s15
 8001636:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	ed97 7a06 	vldr	s14, [r7, #24]
 8001646:	edd7 7a05 	vldr	s15, [r7, #20]
 800164a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd01      	ble.n	8001658 <atan2_approx+0x44>
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	e000      	b.n	800165a <atan2_approx+0x46>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 800165c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001660:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d018      	beq.n	800169c <atan2_approx+0x88>
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	ed97 7a04 	vldr	s14, [r7, #16]
 8001676:	edd7 7a03 	vldr	s15, [r7, #12]
 800167a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d502      	bpl.n	800168a <atan2_approx+0x76>
 8001684:	edd7 7a04 	vldr	s15, [r7, #16]
 8001688:	e001      	b.n	800168e <atan2_approx+0x7a>
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001696:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800169a:	e002      	b.n	80016a2 <atan2_approx+0x8e>
    else res = 0.0f;
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80016a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016a6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001784 <atan2_approx+0x170>
 80016aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ae:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001788 <atan2_approx+0x174>
 80016b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016be:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800178c <atan2_approx+0x178>
 80016c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001790 <atan2_approx+0x17c>
 80016d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016de:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001794 <atan2_approx+0x180>
 80016e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016e6:	eef1 6a67 	vneg.f32	s13, s15
 80016ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ee:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001798 <atan2_approx+0x184>
 80016f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800179c <atan2_approx+0x188>
 80016fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800170a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001716:	ed97 7a07 	vldr	s14, [r7, #28]
 800171a:	edd7 7a08 	vldr	s15, [r7, #32]
 800171e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	dd07      	ble.n	8001738 <atan2_approx+0x124>
 8001728:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80017a0 <atan2_approx+0x18c>
 800172c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001738:	edd7 7a00 	vldr	s15, [r7]
 800173c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d507      	bpl.n	8001756 <atan2_approx+0x142>
 8001746:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80017a4 <atan2_approx+0x190>
 800174a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800174e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001756:	edd7 7a01 	vldr	s15, [r7, #4]
 800175a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d505      	bpl.n	8001770 <atan2_approx+0x15c>
 8001764:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001768:	eef1 7a67 	vneg.f32	s15, s15
 800176c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	ee07 3a90 	vmov	s15, r3
}
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	372c      	adds	r7, #44	; 0x2c
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	3d4e0939 	.word	0x3d4e0939
 8001788:	3e9eb5e3 	.word	0x3e9eb5e3
 800178c:	3e16fa88 	.word	0x3e16fa88
 8001790:	3f7ffe45 	.word	0x3f7ffe45
 8001794:	34a8dfa7 	.word	0x34a8dfa7
 8001798:	3f24fb99 	.word	0x3f24fb99
 800179c:	3e16a269 	.word	0x3e16a269
 80017a0:	3fc90fdb 	.word	0x3fc90fdb
 80017a4:	40490fdb 	.word	0x40490fdb

080017a8 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e054      	b.n	8001862 <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <rotateVector+0xd0>)
 80017be:	fb83 3102 	smull	r3, r1, r3, r2
 80017c2:	17d3      	asrs	r3, r2, #31
 80017c4:	1ac9      	subs	r1, r1, r3
 80017c6:	460b      	mov	r3, r1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	1c9a      	adds	r2, r3, #2
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <rotateVector+0xd0>)
 80017d6:	fb83 3102 	smull	r3, r1, r3, r2
 80017da:	17d3      	asrs	r3, r2, #31
 80017dc:	1ac9      	subs	r1, r1, r3
 80017de:	460b      	mov	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	edd3 6a00 	vldr	s13, [r3]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4413      	add	r3, r2
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4413      	add	r3, r2
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184c:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b02      	cmp	r3, #2
 8001866:	dda7      	ble.n	80017b8 <rotateVector+0x10>
    }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	55555556 	.word	0x55555556

0800187c <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	; 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeb0 0a67 	vmov.f32	s0, s15
 8001890:	f7ff fe54 	bl	800153c <cos_approx>
 8001894:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb0 0a67 	vmov.f32	s0, s15
 80018a2:	f7ff fda1 	bl	80013e8 <sin_approx>
 80018a6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	f7ff fe42 	bl	800153c <cos_approx>
 80018b8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	f7ff fd8f 	bl	80013e8 <sin_approx>
 80018ca:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	f7ff fe30 	bl	800153c <cos_approx>
 80018dc:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	f7ff fd7d 	bl	80013e8 <sin_approx>
 80018ee:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 80018f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80018f6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fe:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 8001902:	ed97 7a06 	vldr	s14, [r7, #24]
 8001906:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 8001912:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001916:	edd7 7a07 	vldr	s15, [r7, #28]
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 8001922:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001926:	edd7 7a06 	vldr	s15, [r7, #24]
 800192a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192e:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 8001932:	ed97 7a07 	vldr	s14, [r7, #28]
 8001936:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 8001944:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001948:	eeb1 7a67 	vneg.f32	s14, s15
 800194c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 8001960:	ed97 7a03 	vldr	s14, [r7, #12]
 8001964:	edd7 7a08 	vldr	s15, [r7, #32]
 8001968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 800197a:	ed97 7a02 	vldr	s14, [r7, #8]
 800197e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001986:	ed97 7a05 	vldr	s14, [r7, #20]
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 8001994:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001998:	eeb1 7a67 	vneg.f32	s14, s15
 800199c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 80019aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80019ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 80019c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 80019de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 8001a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001a24 <degreesToRadians+0x2c>
 8001a12:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	3c8efa35 	.word	0x3c8efa35

08001a28 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <gyroSetTargetLooptime+0x90>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d028      	beq.n	8001a92 <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a4c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001ab0 <gyroSetTargetLooptime+0x88>
 8001a50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a54:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a58:	ee17 2a90 	vmov	r2, s15
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a5e:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <gyroSetTargetLooptime+0x90>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a6c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001ab0 <gyroSetTargetLooptime+0x88>
 8001a70:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a88:	ee17 2a90 	vmov	r2, s15
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a8e:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8001a90:	e005      	b.n	8001a9e <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <gyroSetTargetLooptime+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	f3af 8000 	nop.w
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	412e8480 	.word	0x412e8480
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	200004a4 	.word	0x200004a4

08001ac0 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2204      	movs	r2, #4
 8001acc:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 8001ad0:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ad4:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 8001ad6:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ada:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	89ba      	ldrh	r2, [r7, #12]
 8001ae8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 8001aec:	89fb      	ldrh	r3, [r7, #14]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e009      	b.n	8001b1c <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	332a      	adds	r3, #42	; 0x2a
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	ddf2      	ble.n	8001b08 <gyroInitSlewLimiter+0xe>
    }
}
 8001b22:	bf00      	nop
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffde 	bl	8001afa <gyroInitSlewLimiter>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8001b64:	f107 0308 	add.w	r3, r7, #8
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 ff00 	bl	8005970 <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 feb3 	bl	80058e8 <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff93 	bl	8001ac0 <gyroSetSampleRate>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4610      	mov	r0, r2
 8001bac:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffba 	bl	8001b30 <gyroInitSensorFilters>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	80fb      	strh	r3, [r7, #6]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <calculateNyquistAdjustedNotchHz+0x44>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <calculateNyquistAdjustedNotchHz+0x48>)
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d208      	bcs.n	8001bfa <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d902      	bls.n	8001bf6 <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	80fb      	strh	r3, [r7, #6]
 8001bf4:	e001      	b.n	8001bfa <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200004a4 	.word	0x200004a4
 8001c0c:	0007a120 	.word	0x0007a120

08001c10 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08e      	sub	sp, #56	; 0x38
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <gyroInitLowpassFilterLpf+0x22>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <gyroInitLowpassFilterLpf+0x2c>
 8001c30:	e009      	b.n	8001c46 <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <gyroInitLowpassFilterLpf+0x1b8>)
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 8001c36:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <gyroInitLowpassFilterLpf+0x1bc>)
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8001c3a:	e006      	b.n	8001c4a <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <gyroInitLowpassFilterLpf+0x1c0>)
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8001c40:	4b64      	ldr	r3, [pc, #400]	; (8001dd4 <gyroInitLowpassFilterLpf+0x1c4>)
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8001c44:	e001      	b.n	8001c4a <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e0b9      	b.n	8001dbe <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8001c50:	4a61      	ldr	r2, [pc, #388]	; (8001dd8 <gyroInitLowpassFilterLpf+0x1c8>)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c64:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001ddc <gyroInitLowpassFilterLpf+0x1cc>
 8001c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c6c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7a:	edd7 0a05 	vldr	s1, [r7, #20]
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	f7ff f879 	bl	8000d78 <pt1FilterGain>
 8001c86:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8001c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <gyroInitLowpassFilterLpf+0x1d0>)
 8001c8e:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 808e 	beq.w	8001db4 <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	f200 808d 	bhi.w	8001dba <gyroInitLowpassFilterLpf+0x1aa>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <gyroInitLowpassFilterLpf+0x98>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cb9 	.word	0x08001cb9
 8001cac:	08001cf3 	.word	0x08001cf3
 8001cb0:	08001d41 	.word	0x08001d41
 8001cb4:	08001d7b 	.word	0x08001d7b
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 8001cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cba:	4a4a      	ldr	r2, [pc, #296]	; (8001de4 <gyroInitLowpassFilterLpf+0x1d4>)
 8001cbc:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc2:	e00f      	b.n	8001ce4 <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 8001cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	4413      	add	r3, r2
 8001cd4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f875 	bl	8000dc8 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	ddec      	ble.n	8001cc4 <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001cf0:	e063      	b.n	8001dba <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d35e      	bcc.n	8001db8 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	4a3a      	ldr	r2, [pc, #232]	; (8001de8 <gyroInitLowpassFilterLpf+0x1d8>)
 8001cfe:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
 8001d04:	e015      	b.n	8001d32 <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 8001d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	461a      	mov	r2, r3
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	4413      	add	r3, r2
 8001d16:	88fa      	ldrh	r2, [r7, #6]
 8001d18:	ee07 2a90 	vmov	s15, r2
 8001d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d20:	6839      	ldr	r1, [r7, #0]
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8b4 	bl	8000e94 <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	dde6      	ble.n	8001d06 <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8001d3e:	e03b      	b.n	8001db8 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8001d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <gyroInitLowpassFilterLpf+0x1dc>)
 8001d44:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
 8001d4a:	e00f      	b.n	8001d6c <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8001d4c:	6a3a      	ldr	r2, [r7, #32]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	461a      	mov	r2, r3
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	4413      	add	r3, r2
 8001d5c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fa37 	bl	80011d4 <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	ddec      	ble.n	8001d4c <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001d78:	e01f      	b.n	8001dba <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <gyroInitLowpassFilterLpf+0x1e0>)
 8001d7e:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	e00f      	b.n	8001da6 <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	461a      	mov	r2, r3
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	4413      	add	r3, r2
 8001d96:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff faba 	bl	8001314 <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3301      	adds	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	ddec      	ble.n	8001d86 <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001db2:	e002      	b.n	8001dba <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 8001db4:	bf00      	nop
 8001db6:	e000      	b.n	8001dba <gyroInitLowpassFilterLpf+0x1aa>
            break;
 8001db8:	bf00      	nop
    return ret;
 8001dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3738      	adds	r7, #56	; 0x38
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000062c 	.word	0x2000062c
 8001dcc:	20000630 	.word	0x20000630
 8001dd0:	200006a8 	.word	0x200006a8
 8001dd4:	200006ac 	.word	0x200006ac
 8001dd8:	0007a120 	.word	0x0007a120
 8001ddc:	358637bd 	.word	0x358637bd
 8001de0:	08000d59 	.word	0x08000d59
 8001de4:	08000def 	.word	0x08000def
 8001de8:	08000ec5 	.word	0x08000ec5
 8001dec:	08001203 	.word	0x08001203
 8001df0:	0800134b 	.word	0x0800134b

08001df4 <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	460a      	mov	r2, r1
 8001dfe:	80fb      	strh	r3, [r7, #6]
 8001e00:	4613      	mov	r3, r2
 8001e02:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <gyroInitFilterNotch1+0xb0>)
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <gyroInitFilterNotch1+0xb4>)
 8001e08:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001e0c:	88ba      	ldrh	r2, [r7, #4]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fed6 	bl	8001bc4 <calculateNyquistAdjustedNotchHz>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03c      	beq.n	8001e9c <gyroInitFilterNotch1+0xa8>
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d039      	beq.n	8001e9c <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <gyroInitFilterNotch1+0xb0>)
 8001e2a:	4a20      	ldr	r2, [pc, #128]	; (8001eac <gyroInitFilterNotch1+0xb8>)
 8001e2c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e3a:	88bb      	ldrh	r3, [r7, #4]
 8001e3c:	ee07 3a10 	vmov	s14, r3
 8001e40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e44:	eef0 0a47 	vmov.f32	s1, s14
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	f7fe ff62 	bl	8000d14 <filterGetNotchQ>
 8001e50:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e01d      	b.n	8001e96 <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e68:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <gyroInitFilterNotch1+0xb0>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	ee07 2a90 	vmov	s15, r2
 8001e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <gyroInitFilterNotch1+0xb0>)
 8001e7a:	6851      	ldr	r1, [r2, #4]
 8001e7c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e80:	2201      	movs	r2, #1
 8001e82:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe ffd4 	bl	8000e38 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	ddde      	ble.n	8001e5a <gyroInitFilterNotch1+0x66>
        }
    }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200004a4 	.word	0x200004a4
 8001ea8:	08000d59 	.word	0x08000d59
 8001eac:	08000ec5 	.word	0x08000ec5

08001eb0 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460a      	mov	r2, r1
 8001eba:	80fb      	strh	r3, [r7, #6]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <gyroInitFilterNotch2+0xb0>)
 8001ec2:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <gyroInitFilterNotch2+0xb4>)
 8001ec4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001ec8:	88ba      	ldrh	r2, [r7, #4]
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fe78 	bl	8001bc4 <calculateNyquistAdjustedNotchHz>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d03b      	beq.n	8001f56 <gyroInitFilterNotch2+0xa6>
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d038      	beq.n	8001f56 <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <gyroInitFilterNotch2+0xb0>)
 8001ee6:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <gyroInitFilterNotch2+0xb8>)
 8001ee8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef6:	88bb      	ldrh	r3, [r7, #4]
 8001ef8:	ee07 3a10 	vmov	s14, r3
 8001efc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f00:	eef0 0a47 	vmov.f32	s1, s14
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	f7fe ff04 	bl	8000d14 <filterGetNotchQ>
 8001f0c:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e01c      	b.n	8001f50 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <gyroInitFilterNotch2+0xb0>)
 8001f26:	4413      	add	r3, r2
 8001f28:	88fa      	ldrh	r2, [r7, #6]
 8001f2a:	ee07 2a90 	vmov	s15, r2
 8001f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <gyroInitFilterNotch2+0xb0>)
 8001f34:	6851      	ldr	r1, [r2, #4]
 8001f36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe ff77 	bl	8000e38 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	dddf      	ble.n	8001f16 <gyroInitFilterNotch2+0x66>
        }
    }
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200004a4 	.word	0x200004a4
 8001f64:	08000d59 	.word	0x08000d59
 8001f68:	08000ec5 	.word	0x08000ec5

08001f6c <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <gyroInitFilters+0x44>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fe48 	bl	8001c10 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <gyroInitFilters+0x44>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f7ff fe40 	bl	8001c10 <gyroInitLowpassFilterLpf>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <gyroInitFilters+0x44>)
 8001f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff ff29 	bl	8001df4 <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f7ff ff83 	bl	8001eb0 <gyroInitFilterNotch2>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200004a4 	.word	0x200004a4

08001fb4 <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <gyroInit+0xb0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <gyroInit+0xb0>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <gyroInit+0xb0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <gyroInit+0xb0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <gyroInit+0xb0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <gyroInit+0xb0>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <gyroInit+0xb0>)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <gyroInit+0xb0>)
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <gyroInit+0xb4>)
 8001ff6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	; (8002064 <gyroInit+0xb0>)
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <gyroInit+0xb8>)
 8001ffe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 8002002:	481b      	ldr	r0, [pc, #108]	; (8002070 <gyroInit+0xbc>)
 8002004:	f7ff fd9f 	bl	8001b46 <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <gyroInit+0xb0>)
 800200a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800200e:	4a15      	ldr	r2, [pc, #84]	; (8002064 <gyroInit+0xb0>)
 8002010:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <gyroInit+0xb0>)
 8002014:	4a16      	ldr	r2, [pc, #88]	; (8002070 <gyroInit+0xbc>)
 8002016:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <gyroInit+0xb0>)
 800201c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00f      	beq.n	8002044 <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <gyroInit+0xb0>)
 8002026:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800202a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <gyroInit+0xb0>)
 8002030:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 8002032:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <gyroInit+0xb0>)
 8002034:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002038:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <gyroInit+0xb0>)
 800203e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 8002042:	e006      	b.n	8002052 <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <gyroInit+0xb0>)
 8002046:	2200      	movs	r2, #0
 8002048:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <gyroInit+0xb0>)
 800204c:	2200      	movs	r2, #0
 800204e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff fce8 	bl	8001a28 <gyroSetTargetLooptime>
	gyroInitFilters();
 8002058:	f7ff ff88 	bl	8001f6c <gyroInitFilters>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200004a4 	.word	0x200004a4
 8002068:	20000840 	.word	0x20000840
 800206c:	20000850 	.word	0x20000850
 8002070:	200004e0 	.word	0x200004e0

08002074 <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4610      	mov	r0, r2
 8002084:	4798      	blx	r3
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d02f      	beq.n	80020ec <gyroUpdateSensor+0x78>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADC[X] - gyroSensor->gyroDev.gyroZero[X];
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80020a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADC[Y] - gyroSensor->gyroDev.gyroZero[Y];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADC[Z] - gyroSensor->gyroDev.gyroZero[Z];
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80020cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80020e2:	4619      	mov	r1, r3
 80020e4:	4610      	mov	r0, r2
 80020e6:	f003 fc91 	bl	8005a0c <alignSensorViaRotation>
 80020ea:	e000      	b.n	80020ee <gyroUpdateSensor+0x7a>
        return;
 80020ec:	bf00      	nop
}
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <gyroFilter>:


static void gyroFilter(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e074      	b.n	80021ea <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 8002106:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <gyroFilter+0x10c>)
 8002108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 8002110:	4a3b      	ldr	r2, [pc, #236]	; (8002200 <gyroFilter+0x10c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	330a      	adds	r3, #10
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3304      	adds	r3, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	e020      	b.n	8002164 <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <gyroFilter+0x10c>)
 8002124:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 800212c:	4a34      	ldr	r2, [pc, #208]	; (8002200 <gyroFilter+0x10c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	330a      	adds	r3, #10
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	edd3 6a00 	vldr	s13, [r3]
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <gyroFilter+0x10c>)
 800213e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214e:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 8002152:	4a2b      	ldr	r2, [pc, #172]	; (8002200 <gyroFilter+0x10c>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	330a      	adds	r3, #10
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <gyroFilter+0x10c>)
 8002166:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002178:	4a21      	ldr	r2, [pc, #132]	; (8002200 <gyroFilter+0x10c>)
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	ed97 0a00 	vldr	s0, [r7]
 8002182:	4618      	mov	r0, r3
 8002184:	4788      	blx	r1
 8002186:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <gyroFilter+0x10c>)
 800218c:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <gyroFilter+0x10c>)
 80021a0:	4413      	add	r3, r2
 80021a2:	ed97 0a00 	vldr	s0, [r7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	4788      	blx	r1
 80021aa:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 80021ae:	4b14      	ldr	r3, [pc, #80]	; (8002200 <gyroFilter+0x10c>)
 80021b0:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021c2:	4a0f      	ldr	r2, [pc, #60]	; (8002200 <gyroFilter+0x10c>)
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	ed97 0a00 	vldr	s0, [r7]
 80021cc:	4618      	mov	r0, r3
 80021ce:	4788      	blx	r1
 80021d0:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <gyroFilter+0x10c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3306      	adds	r3, #6
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	dd87      	ble.n	8002100 <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <gyroFilter+0x10c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200004a4 	.word	0x200004a4

08002204 <gyroAccumulateMeasurements>:

static void gyroAccumulateMeasurements(void) {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	e038      	b.n	8002282 <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 8002210:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <gyroAccumulateMeasurements+0x9c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	ed93 7a00 	vldr	s14, [r3]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <gyroAccumulateMeasurements+0xa0>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	edd3 6a00 	vldr	s13, [r3]
 8002228:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <gyroAccumulateMeasurements+0xa4>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3306      	adds	r3, #6
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800223c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002240:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <gyroAccumulateMeasurements+0xa4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <gyroAccumulateMeasurements+0x9c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 8002264:	4a10      	ldr	r2, [pc, #64]	; (80022a8 <gyroAccumulateMeasurements+0xa4>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3306      	adds	r3, #6
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	490c      	ldr	r1, [pc, #48]	; (80022a4 <gyroAccumulateMeasurements+0xa0>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3301      	adds	r3, #1
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b02      	cmp	r3, #2
 8002286:	ddc3      	ble.n	8002210 <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <gyroAccumulateMeasurements+0xa8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <gyroAccumulateMeasurements+0xa8>)
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000824 	.word	0x20000824
 80022a4:	20000830 	.word	0x20000830
 80022a8:	200004a4 	.word	0x200004a4
 80022ac:	2000083c 	.word	0x2000083c

080022b0 <gyroUpdate>:

void gyroUpdate(void) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 80022b4:	4842      	ldr	r0, [pc, #264]	; (80023c0 <gyroUpdate+0x110>)
 80022b6:	f7ff fedd 	bl	8002074 <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 80022ba:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <gyroUpdate+0x114>)
 80022bc:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80022c0:	4b40      	ldr	r3, [pc, #256]	; (80023c4 <gyroUpdate+0x114>)
 80022c2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <gyroUpdate+0x114>)
 80022cc:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 80022d0:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <gyroUpdate+0x114>)
 80022d2:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <gyroUpdate+0x114>)
 80022d8:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80022dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e0:	4b38      	ldr	r3, [pc, #224]	; (80023c4 <gyroUpdate+0x114>)
 80022e2:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 80022e6:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <gyroUpdate+0x114>)
 80022e8:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <gyroUpdate+0x114>)
 80022ee:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <gyroUpdate+0x114>)
 80022f8:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <gyroUpdate+0x114>)
 80022fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02d      	beq.n	8002362 <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <gyroUpdate+0x114>)
 8002308:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800230c:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <gyroUpdate+0x114>)
 800230e:	edd2 7a04 	vldr	s15, [r2, #16]
 8002312:	eeb0 0a67 	vmov.f32	s0, s15
 8002316:	482c      	ldr	r0, [pc, #176]	; (80023c8 <gyroUpdate+0x118>)
 8002318:	4798      	blx	r3
 800231a:	eef0 7a40 	vmov.f32	s15, s0
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <gyroUpdate+0x114>)
 8002320:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <gyroUpdate+0x114>)
 8002326:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800232a:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <gyroUpdate+0x114>)
 800232c:	edd2 7a05 	vldr	s15, [r2, #20]
 8002330:	eeb0 0a67 	vmov.f32	s0, s15
 8002334:	4825      	ldr	r0, [pc, #148]	; (80023cc <gyroUpdate+0x11c>)
 8002336:	4798      	blx	r3
 8002338:	eef0 7a40 	vmov.f32	s15, s0
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <gyroUpdate+0x114>)
 800233e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <gyroUpdate+0x114>)
 8002344:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002348:	4a1e      	ldr	r2, [pc, #120]	; (80023c4 <gyroUpdate+0x114>)
 800234a:	edd2 7a06 	vldr	s15, [r2, #24]
 800234e:	eeb0 0a67 	vmov.f32	s0, s15
 8002352:	481f      	ldr	r0, [pc, #124]	; (80023d0 <gyroUpdate+0x120>)
 8002354:	4798      	blx	r3
 8002356:	eef0 7a40 	vmov.f32	s15, s0
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <gyroUpdate+0x114>)
 800235c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002360:	e028      	b.n	80023b4 <gyroUpdate+0x104>
    } else {
        // using simple averaging for downsampling
        gyro.sampleSum[X] += gyro.gyroADC[X];
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <gyroUpdate+0x114>)
 8002364:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <gyroUpdate+0x114>)
 800236a:	edd3 7a04 	vldr	s15, [r3, #16]
 800236e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <gyroUpdate+0x114>)
 8002374:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <gyroUpdate+0x114>)
 800237a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <gyroUpdate+0x114>)
 8002380:	edd3 7a05 	vldr	s15, [r3, #20]
 8002384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <gyroUpdate+0x114>)
 800238a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <gyroUpdate+0x114>)
 8002390:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <gyroUpdate+0x114>)
 8002396:	edd3 7a06 	vldr	s15, [r3, #24]
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <gyroUpdate+0x114>)
 80023a0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <gyroUpdate+0x114>)
 80023a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <gyroUpdate+0x114>)
 80023b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    gyroFilter();
 80023b4:	f7ff fe9e 	bl	80020f4 <gyroFilter>
	gyroAccumulateMeasurements();
 80023b8:	f7ff ff24 	bl	8002204 <gyroAccumulateMeasurements>
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200004e0 	.word	0x200004e0
 80023c4:	200004a4 	.word	0x200004a4
 80023c8:	200006ac 	.word	0x200006ac
 80023cc:	200006d4 	.word	0x200006d4
 80023d0:	200006fc 	.word	0x200006fc

080023d4 <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <gyroGetAccumulationAverage+0x9c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02e      	beq.n	8002442 <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 80023e4:	4b23      	ldr	r3, [pc, #140]	; (8002474 <gyroGetAccumulationAverage+0xa0>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a21      	ldr	r2, [pc, #132]	; (8002470 <gyroGetAccumulationAverage+0x9c>)
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e01c      	b.n	8002432 <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 80023f8:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <gyroGetAccumulationAverage+0xa4>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	edd3 6a00 	vldr	s13, [r3]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241a:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <gyroGetAccumulationAverage+0xa4>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b02      	cmp	r3, #2
 8002436:	dddf      	ble.n	80023f8 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <gyroGetAccumulationAverage+0x9c>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
        return true;
 800243e:	2301      	movs	r3, #1
 8002440:	e010      	b.n	8002464 <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	e009      	b.n	800245c <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	3301      	adds	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	2b02      	cmp	r3, #2
 8002460:	ddf2      	ble.n	8002448 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 8002462:	2300      	movs	r3, #0
    }
}
 8002464:	4618      	mov	r0, r3
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	2000083c 	.word	0x2000083c
 8002474:	200004a4 	.word	0x200004a4
 8002478:	20000824 	.word	0x20000824

0800247c <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
    return false;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
    return rMat[2][2];
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <getCosTiltAngle+0x18>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	ee07 3a90 	vmov	s15, r3
}
 8002498:	eeb0 0a67 	vmov.f32	s0, s15
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	20000870 	.word	0x20000870

080024a8 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	ed93 7a00 	vldr	s14, [r3]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	edd3 7a01 	vldr	s15, [r3, #4]
 8002516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	ed93 7a01 	vldr	s14, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edd3 7a02 	vldr	s15, [r3, #8]
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	ed93 7a01 	vldr	s14, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	edd3 7a02 	vldr	s15, [r3, #8]
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	ed93 7a02 	vldr	s14, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	edd3 7a03 	vldr	s15, [r3, #12]
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	ed93 7a03 	vldr	s14, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	edd3 7a03 	vldr	s15, [r3, #12]
 8002584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 80025a0:	4946      	ldr	r1, [pc, #280]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025a2:	4847      	ldr	r0, [pc, #284]	; (80026c0 <imuComputeRotationMatrix+0x124>)
 80025a4:	f7ff ff80 	bl	80024a8 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 80025a8:	4b44      	ldr	r3, [pc, #272]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80025ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ba:	4b40      	ldr	r3, [pc, #256]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 80025ca:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 80025ce:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025d0:	ed93 7a05 	vldr	s14, [r3, #20]
 80025d4:	4b39      	ldr	r3, [pc, #228]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80025da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025e2:	4b38      	ldr	r3, [pc, #224]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 80025e4:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025ea:	ed93 7a06 	vldr	s14, [r3, #24]
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80025f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 80025fe:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 8002602:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <imuComputeRotationMatrix+0x120>)
 8002604:	ed93 7a05 	vldr	s14, [r3, #20]
 8002608:	4b2c      	ldr	r3, [pc, #176]	; (80026bc <imuComputeRotationMatrix+0x120>)
 800260a:	edd3 7a03 	vldr	s15, [r3, #12]
 800260e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002612:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 8002618:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <imuComputeRotationMatrix+0x120>)
 800261e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002622:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800262a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <imuComputeRotationMatrix+0x120>)
 8002630:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002634:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263c:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 800263e:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <imuComputeRotationMatrix+0x120>)
 8002644:	ed93 7a08 	vldr	s14, [r3, #32]
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <imuComputeRotationMatrix+0x120>)
 800264a:	edd3 7a01 	vldr	s15, [r3, #4]
 800264e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 8002658:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <imuComputeRotationMatrix+0x120>)
 800265e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <imuComputeRotationMatrix+0x120>)
 8002664:	edd3 7a02 	vldr	s15, [r3, #8]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 8002672:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <imuComputeRotationMatrix+0x120>)
 8002678:	ed93 7a08 	vldr	s14, [r3, #32]
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <imuComputeRotationMatrix+0x120>)
 800267e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 800268c:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <imuComputeRotationMatrix+0x120>)
 8002692:	edd3 7a04 	vldr	s15, [r3, #16]
 8002696:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800269a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800269e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <imuComputeRotationMatrix+0x120>)
 80026a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80026a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <imuComputeRotationMatrix+0x128>)
 80026b2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000014 	.word	0x20000014
 80026c0:	20000004 	.word	0x20000004
 80026c4:	20000870 	.word	0x20000870

080026c8 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 80026d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80026f8 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 80026da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80026ea:	eeb0 0a67 	vmov.f32	s0, s15
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40490fdb 	.word	0x40490fdb

080026fc <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002710:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002730 <calculateThrottleAngleScale+0x34>
 8002714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002718:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002734 <calculateThrottleAngleScale+0x38>
 800271c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002720:	eeb0 0a67 	vmov.f32	s0, s15
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	44610000 	.word	0x44610000
 8002734:	440f3d4c 	.word	0x440f3d4c

08002738 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	80fb      	strh	r3, [r7, #6]
 8002744:	4613      	mov	r3, r2
 8002746:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <imuConfigure+0x70>)
 800274a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800274e:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <imuConfigure+0x70>)
 8002752:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002756:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 8002758:	2019      	movs	r0, #25
 800275a:	f7ff f94d 	bl	80019f8 <degreesToRadians>
 800275e:	eef0 7a40 	vmov.f32	s15, s0
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	f7fe fee9 	bl	800153c <cos_approx>
 800276a:	eef0 7a40 	vmov.f32	s15, s0
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <imuConfigure+0x74>)
 8002770:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 8002774:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002778:	f7ff ffa6 	bl	80026c8 <calculateAccZLowPassFilterRCTimeConstant>
 800277c:	eef0 7a40 	vmov.f32	s15, s0
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <imuConfigure+0x78>)
 8002782:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ffb7 	bl	80026fc <calculateThrottleAngleScale>
 800278e:	eef0 7a40 	vmov.f32	s15, s0
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <imuConfigure+0x7c>)
 8002794:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 8002798:	797b      	ldrb	r3, [r7, #5]
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <imuConfigure+0x80>)
 800279c:	6013      	str	r3, [r2, #0]
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000868 	.word	0x20000868
 80027ac:	200008ac 	.word	0x200008ac
 80027b0:	200008a8 	.word	0x200008a8
 80027b4:	200008a0 	.word	0x200008a0
 80027b8:	200008a4 	.word	0x200008a4

080027bc <imuInit>:

void imuInit(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 80027c0:	210a      	movs	r1, #10
 80027c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80027c6:	f7ff ffb7 	bl	8002738 <imuConfigure>
    canUseGPSHeading = false;
 80027ca:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <imuInit+0x1c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 80027d0:	f7ff fee4 	bl	800259c <imuComputeRotationMatrix>
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000001 	.word	0x20000001

080027dc <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	e012      	b.n	8002816 <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 80027fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002800:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002804:	ed97 7a05 	vldr	s14, [r7, #20]
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	3301      	adds	r3, #1
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b02      	cmp	r3, #2
 800281a:	dde9      	ble.n	80027f0 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <imuIsAccelerometerHealthy+0x94>)
 800281e:	ed93 7a00 	vldr	s14, [r3]
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <imuIsAccelerometerHealthy+0x94>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002834:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 8002838:	edd7 7a05 	vldr	s15, [r7, #20]
 800283c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002874 <imuIsAccelerometerHealthy+0x98>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	dd0a      	ble.n	8002860 <imuIsAccelerometerHealthy+0x84>
 800284a:	edd7 7a05 	vldr	s15, [r7, #20]
 800284e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002878 <imuIsAccelerometerHealthy+0x9c>
 8002852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	d501      	bpl.n	8002860 <imuIsAccelerometerHealthy+0x84>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <imuIsAccelerometerHealthy+0x86>
 8002860:	2300      	movs	r3, #0
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20000240 	.word	0x20000240
 8002874:	3f4f5c29 	.word	0x3f4f5c29
 8002878:	3f9ae148 	.word	0x3f9ae148

0800287c <invSqrt>:

static float invSqrt(float x)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 8002886:	ed97 0a01 	vldr	s0, [r7, #4]
 800288a:	f011 fbf1 	bl	8014070 <sqrtf>
 800288e:	eef0 7a40 	vmov.f32	s15, s0
 8002892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002896:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800289a:	eef0 7a66 	vmov.f32	s15, s13
}
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	ed2d 8b02 	vpush	{d8}
 80028ae:	b09e      	sub	sp, #120	; 0x78
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80028b6:	edc7 0a08 	vstr	s1, [r7, #32]
 80028ba:	ed87 1a07 	vstr	s2, [r7, #28]
 80028be:	edc7 1a06 	vstr	s3, [r7, #24]
 80028c2:	4603      	mov	r3, r0
 80028c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80028c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80028cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80028d0:	edc7 3a01 	vstr	s7, [r7, #4]
 80028d4:	ed87 4a00 	vstr	s8, [r7]
 80028d8:	75fb      	strb	r3, [r7, #23]
 80028da:	460b      	mov	r3, r1
 80028dc:	75bb      	strb	r3, [r7, #22]
 80028de:	4613      	mov	r3, r2
 80028e0:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 80028e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80028e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	f011 fbb3 	bl	8014070 <sqrtf>
 800290a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	677b      	str	r3, [r7, #116]	; 0x74
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	673b      	str	r3, [r7, #112]	; 0x70
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 8002920:	7d7b      	ldrb	r3, [r7, #21]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d060      	beq.n	80029e8 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 8002926:	e007      	b.n	8002938 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 8002928:	edd7 7a01 	vldr	s15, [r7, #4]
 800292c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002950 <imuMahonyAHRSupdate+0xa8>
 8002930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002934:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 8002938:	edd7 7a01 	vldr	s15, [r7, #4]
 800293c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800294c <imuMahonyAHRSupdate+0xa4>
 8002940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	dcee      	bgt.n	8002928 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 800294a:	e00d      	b.n	8002968 <imuMahonyAHRSupdate+0xc0>
 800294c:	40490fdb 	.word	0x40490fdb
 8002950:	40c90fdb 	.word	0x40c90fdb
 8002954:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 8002958:	edd7 7a01 	vldr	s15, [r7, #4]
 800295c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002950 <imuMahonyAHRSupdate+0xa8>
 8002960:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002964:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 8002968:	edd7 7a01 	vldr	s15, [r7, #4]
 800296c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002954 <imuMahonyAHRSupdate+0xac>
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d4ee      	bmi.n	8002958 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 800297a:	ed97 0a01 	vldr	s0, [r7, #4]
 800297e:	f7fe fd33 	bl	80013e8 <sin_approx>
 8002982:	eef0 7a40 	vmov.f32	s15, s0
 8002986:	eeb1 7a67 	vneg.f32	s14, s15
 800298a:	4bdb      	ldr	r3, [pc, #876]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002994:	ed97 0a01 	vldr	s0, [r7, #4]
 8002998:	f7fe fdd0 	bl	800153c <cos_approx>
 800299c:	eeb0 7a40 	vmov.f32	s14, s0
 80029a0:	4bd5      	ldr	r3, [pc, #852]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 80029a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029aa:	ee78 7a67 	vsub.f32	s15, s16, s15
 80029ae:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 80029b2:	4bd1      	ldr	r3, [pc, #836]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 80029b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80029bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 80029c4:	4bcc      	ldr	r3, [pc, #816]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 80029c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80029ca:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 80029d6:	4bc8      	ldr	r3, [pc, #800]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 80029d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80029dc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80029e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 80029e8:	4bc4      	ldr	r3, [pc, #784]	; (8002cfc <imuMahonyAHRSupdate+0x454>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 80029ee:	4bc3      	ldr	r3, [pc, #780]	; (8002cfc <imuMahonyAHRSupdate+0x454>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 80029f4:	4bc1      	ldr	r3, [pc, #772]	; (8002cfc <imuMahonyAHRSupdate+0x454>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 80029fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80029fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 8002a1e:	7dbb      	ldrb	r3, [r7, #22]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 809f 	beq.w	8002b64 <imuMahonyAHRSupdate+0x2bc>
 8002a26:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a2a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002d00 <imuMahonyAHRSupdate+0x458>
 8002a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	f340 8095 	ble.w	8002b64 <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 8002a3a:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a3e:	f7ff ff1d 	bl	800287c <invSqrt>
 8002a42:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 8002a46:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a4a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a52:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 8002a56:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a5a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 8002a66:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 8002a76:	4ba0      	ldr	r3, [pc, #640]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002a78:	ed93 7a00 	vldr	s14, [r3]
 8002a7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a84:	4b9c      	ldr	r3, [pc, #624]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002a86:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a96:	4b98      	ldr	r3, [pc, #608]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002a98:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a9c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 8002aac:	4b92      	ldr	r3, [pc, #584]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002aae:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ab2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aba:	4b8f      	ldr	r3, [pc, #572]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002abc:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ac0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002acc:	4b8a      	ldr	r3, [pc, #552]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002ace:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ad2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ade:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 8002ae2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ae6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002aea:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002aee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	f011 fab9 	bl	8014070 <sqrtf>
 8002afe:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 8002b02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b06:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0e:	eef1 7a67 	vneg.f32	s15, s15
 8002b12:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 8002b16:	4b78      	ldr	r3, [pc, #480]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002b18:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b24:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 8002b30:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002b32:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 8002b4a:	4b6b      	ldr	r3, [pc, #428]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002b4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b50:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b58:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 8002b64:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b68:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002b6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b84:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d068      	beq.n	8002c60 <imuMahonyAHRSupdate+0x3b8>
 8002b8e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b92:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002d00 <imuMahonyAHRSupdate+0x458>
 8002b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	dd5f      	ble.n	8002c60 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 8002ba0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002ba4:	f7ff fe6a 	bl	800287c <invSqrt>
 8002ba8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 8002bac:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bb0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb8:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 8002bbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bc0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc8:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 8002bcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bd0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd8:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8002bdc:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002bde:	ed93 7a08 	vldr	s14, [r3, #32]
 8002be2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002bec:	edd3 6a07 	vldr	s13, [r3, #28]
 8002bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfc:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c04:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 8002c08:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002c0a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002c18:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c28:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c30:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002c36:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c42:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <imuMahonyAHRSupdate+0x450>)
 8002c44:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c54:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <imuMahonyAHRSupdate+0x45c>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6e:	dd53      	ble.n	8002d18 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8002c70:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002c74:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002d08 <imuMahonyAHRSupdate+0x460>
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	d556      	bpl.n	8002d30 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <imuMahonyAHRSupdate+0x45c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 8002c88:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <imuMahonyAHRSupdate+0x464>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca6:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <imuMahonyAHRSupdate+0x464>)
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 8002cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002cb0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <imuMahonyAHRSupdate+0x468>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <imuMahonyAHRSupdate+0x468>)
 8002ccc:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 8002cd0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002cd4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <imuMahonyAHRSupdate+0x46c>)
 8002ce6:	edd3 7a00 	vldr	s15, [r3]
 8002cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <imuMahonyAHRSupdate+0x46c>)
 8002cf0:	edc3 7a00 	vstr	s15, [r3]
 8002cf4:	e01c      	b.n	8002d30 <imuMahonyAHRSupdate+0x488>
 8002cf6:	bf00      	nop
 8002cf8:	20000870 	.word	0x20000870
 8002cfc:	200008d0 	.word	0x200008d0
 8002d00:	3c23d70a 	.word	0x3c23d70a
 8002d04:	20000868 	.word	0x20000868
 8002d08:	3eb2b8c2 	.word	0x3eb2b8c2
 8002d0c:	200008b0 	.word	0x200008b0
 8002d10:	200008b4 	.word	0x200008b4
 8002d14:	200008b8 	.word	0x200008b8
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 8002d18:	4ba3      	ldr	r3, [pc, #652]	; (8002fa8 <imuMahonyAHRSupdate+0x700>)
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 8002d20:	4ba2      	ldr	r3, [pc, #648]	; (8002fac <imuMahonyAHRSupdate+0x704>)
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 8002d28:	4ba1      	ldr	r3, [pc, #644]	; (8002fb0 <imuMahonyAHRSupdate+0x708>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 8002d30:	ed97 7a00 	vldr	s14, [r7]
 8002d34:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d3c:	4b9a      	ldr	r3, [pc, #616]	; (8002fa8 <imuMahonyAHRSupdate+0x700>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d46:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4e:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 8002d52:	ed97 7a00 	vldr	s14, [r7]
 8002d56:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5e:	4b93      	ldr	r3, [pc, #588]	; (8002fac <imuMahonyAHRSupdate+0x704>)
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d70:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 8002d74:	ed97 7a00 	vldr	s14, [r7]
 8002d78:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d80:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <imuMahonyAHRSupdate+0x708>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d92:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 8002d96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002daa:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 8002dae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002db2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dba:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc2:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 8002dc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 8002dde:	4b75      	ldr	r3, [pc, #468]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 8002de4:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 8002dea:	4b72      	ldr	r3, [pc, #456]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 8002df0:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 8002df6:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e00:	eef1 6a67 	vneg.f32	s13, s15
 8002e04:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e0c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002e10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e1c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002e20:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	4b60      	ldr	r3, [pc, #384]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 8002e36:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e3c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002e40:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e48:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e58:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002e6e:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002e74:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e78:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002e7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e84:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e90:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e94:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002e98:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002eaa:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002eb0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eb4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002eb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ebc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ec0:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ec8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ecc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ed0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002ed4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ed8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002edc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee4:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002ee6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002eec:	ed93 7a00 	vldr	s14, [r3]
 8002ef0:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002ef2:	edd3 7a00 	vldr	s15, [r3]
 8002ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002efa:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002efc:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f10:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f14:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f22:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f24:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f28:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	f7ff fc9f 	bl	800287c <invSqrt>
 8002f3e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 8002f42:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f44:	ed93 7a00 	vldr	s14, [r3]
 8002f48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 8002f56:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f58:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f64:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f66:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f70:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f7a:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f80:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <imuMahonyAHRSupdate+0x70c>)
 8002f8e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 8002f92:	f7ff fb03 	bl	800259c <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <imuMahonyAHRSupdate+0x710>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	3778      	adds	r7, #120	; 0x78
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	ecbd 8b02 	vpop	{d8}
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200008b0 	.word	0x200008b0
 8002fac:	200008b4 	.word	0x200008b4
 8002fb0:	200008b8 	.word	0x200008b8
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000866 	.word	0x20000866

08002fbc <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <imuUpdateEulerAngles+0xc8>)
 8002fc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <imuUpdateEulerAngles+0xc8>)
 8002fc8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fcc:	eef0 0a47 	vmov.f32	s1, s14
 8002fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd4:	f7fe fb1e 	bl	8001614 <atan2_approx>
 8002fd8:	eef0 7a40 	vmov.f32	s15, s0
 8002fdc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003088 <imuUpdateEulerAngles+0xcc>
 8002fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe8:	f010 fe88 	bl	8013cfc <lrintf>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <imuUpdateEulerAngles+0xd0>)
 8002ff2:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <imuUpdateEulerAngles+0xc8>)
 8002ff6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ffa:	eef1 7a67 	vneg.f32	s15, s15
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	f7fe fab3 	bl	800156c <acos_approx>
 8003006:	eef0 7a40 	vmov.f32	s15, s0
 800300a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003090 <imuUpdateEulerAngles+0xd4>
 800300e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003012:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003088 <imuUpdateEulerAngles+0xcc>
 8003016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	f010 fe6d 	bl	8013cfc <lrintf>
 8003022:	4603      	mov	r3, r0
 8003024:	b21a      	sxth	r2, r3
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <imuUpdateEulerAngles+0xd0>)
 8003028:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 800302a:	4b16      	ldr	r3, [pc, #88]	; (8003084 <imuUpdateEulerAngles+0xc8>)
 800302c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003030:	4b14      	ldr	r3, [pc, #80]	; (8003084 <imuUpdateEulerAngles+0xc8>)
 8003032:	ed93 7a00 	vldr	s14, [r3]
 8003036:	eef0 0a47 	vmov.f32	s1, s14
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	f7fe fae9 	bl	8001614 <atan2_approx>
 8003042:	eef0 7a40 	vmov.f32	s15, s0
 8003046:	eef1 7a67 	vneg.f32	s15, s15
 800304a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003088 <imuUpdateEulerAngles+0xcc>
 800304e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	f010 fe51 	bl	8013cfc <lrintf>
 800305a:	4603      	mov	r3, r0
 800305c:	b21a      	sxth	r2, r3
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <imuUpdateEulerAngles+0xd0>)
 8003060:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <imuUpdateEulerAngles+0xd0>)
 8003064:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	da09      	bge.n	8003080 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 800306c:	4b07      	ldr	r3, [pc, #28]	; (800308c <imuUpdateEulerAngles+0xd0>)
 800306e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8003078:	b29b      	uxth	r3, r3
 800307a:	b21a      	sxth	r2, r3
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <imuUpdateEulerAngles+0xd0>)
 800307e:	809a      	strh	r2, [r3, #4]
    }
}
 8003080:	bf00      	nop
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000870 	.word	0x20000870
 8003088:	440f3d4c 	.word	0x440f3d4c
 800308c:	20000860 	.word	0x20000860
 8003090:	3fc90fdb 	.word	0x3fc90fdb

08003094 <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	460b      	mov	r3, r1
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 80030a2:	2300      	movs	r3, #0
 80030a4:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 80030aa:	7cbb      	ldrb	r3, [r7, #18]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d163      	bne.n	8003178 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <imuCalcKpGain+0x128>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <imuCalcKpGain+0x34>
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <imuCalcKpGain+0x12c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <imuCalcKpGain+0x34>
 80030c0:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <imuCalcKpGain+0x130>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d030      	beq.n	800312a <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	eef0 7ae7 	vabs.f32	s15, s15
 80030d2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030de:	dc1c      	bgt.n	800311a <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eef0 7ae7 	vabs.f32	s15, s15
 80030ec:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	dc0f      	bgt.n	800311a <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3308      	adds	r3, #8
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	eef0 7ae7 	vabs.f32	s15, s15
 8003106:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800310a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	dc02      	bgt.n	800311a <imuCalcKpGain+0x86>
                || (!useAcc)) {
 8003114:	7afb      	ldrb	r3, [r7, #11]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <imuCalcKpGain+0x134>)
 800311e:	4413      	add	r3, r2
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <imuCalcKpGain+0x12c>)
 8003122:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <imuCalcKpGain+0x128>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <imuCalcKpGain+0x128>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d011      	beq.n	8003156 <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <imuCalcKpGain+0x128>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	429a      	cmp	r2, r3
 800313a:	d309      	bcc.n	8003150 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 800313c:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <imuCalcKpGain+0x12c>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <imuCalcKpGain+0x128>)
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 8003148:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <imuCalcKpGain+0x130>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e013      	b.n	8003178 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 8003150:	2301      	movs	r3, #1
 8003152:	74fb      	strb	r3, [r7, #19]
 8003154:	e010      	b.n	8003178 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <imuCalcKpGain+0x12c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <imuCalcKpGain+0xe4>
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <imuCalcKpGain+0x12c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d307      	bcc.n	8003178 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <imuCalcKpGain+0x138>)
 800316c:	4413      	add	r3, r2
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <imuCalcKpGain+0x128>)
 8003170:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <imuCalcKpGain+0x12c>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 8003178:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <imuCalcKpGain+0x13c>)
 800317a:	7cbb      	ldrb	r3, [r7, #18]
 800317c:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 800317e:	7cfb      	ldrb	r3, [r7, #19]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <imuCalcKpGain+0x140>)
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e00d      	b.n	80031a6 <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <imuCalcKpGain+0x144>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	617b      	str	r3, [r7, #20]
       if (!armState) {
 8003190:	7cbb      	ldrb	r3, [r7, #18]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 8003196:	edd7 7a05 	vldr	s15, [r7, #20]
 800319a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800319e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a2:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	ee07 3a90 	vmov	s15, r3
}
 80031ac:	eeb0 0a67 	vmov.f32	s0, s15
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200008c0 	.word	0x200008c0
 80031c0:	200008c4 	.word	0x200008c4
 80031c4:	200008c8 	.word	0x200008c8
 80031c8:	0003d090 	.word	0x0003d090
 80031cc:	0007a120 	.word	0x0007a120
 80031d0:	200008bc 	.word	0x200008bc
 80031d4:	41c80000 	.word	0x41c80000
 80031d8:	20000868 	.word	0x20000868

080031dc <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	ed2d 8b08 	vpush	{d8-d11}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 80031e6:	2300      	movs	r3, #0
 80031e8:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 80031ea:	2300      	movs	r3, #0
 80031ec:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 80031ee:	2301      	movs	r3, #1
 80031f0:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 80031f2:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <imuCalculateEstimatedAttitude+0xec>)
 80031f4:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 80031f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80031fa:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 80031fc:	4b33      	ldr	r3, [pc, #204]	; (80032cc <imuCalculateEstimatedAttitude+0xf0>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4413      	add	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <imuCalculateEstimatedAttitude+0xf0>)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	6013      	str	r3, [r2, #0]

    useMag = true;
 800320c:	2301      	movs	r3, #1
 800320e:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff f8de 	bl	80023d4 <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8003218:	482d      	ldr	r0, [pc, #180]	; (80032d0 <imuCalculateEstimatedAttitude+0xf4>)
 800321a:	f7fd fb7b 	bl	8000914 <accGetAccumulationAverage>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 8003224:	482a      	ldr	r0, [pc, #168]	; (80032d0 <imuCalculateEstimatedAttitude+0xf4>)
 8003226:	f7ff fad9 	bl	80027dc <imuIsAccelerometerHealthy>
 800322a:	4603      	mov	r3, r0
 800322c:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003238:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80032d4 <imuCalculateEstimatedAttitude+0xf8>
 800323c:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003240:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003244:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80032d8 <imuCalculateEstimatedAttitude+0xfc>
 8003248:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 800324c:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003250:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80032d8 <imuCalculateEstimatedAttitude+0xfc>
 8003254:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003258:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800325c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80032d8 <imuCalculateEstimatedAttitude+0xfc>
 8003260:	ee67 9a87 	vmul.f32	s19, s15, s14
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <imuCalculateEstimatedAttitude+0xf4>)
 8003266:	ed93 aa00 	vldr	s20, [r3]
 800326a:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <imuCalculateEstimatedAttitude+0xf4>)
 800326c:	edd3 aa01 	vldr	s21, [r3, #4]
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <imuCalculateEstimatedAttitude+0xf4>)
 8003272:	ed93 ba02 	vldr	s22, [r3, #8]
 8003276:	1d3a      	adds	r2, r7, #4
 8003278:	7ffb      	ldrb	r3, [r7, #31]
 800327a:	4619      	mov	r1, r3
 800327c:	6938      	ldr	r0, [r7, #16]
 800327e:	f7ff ff09 	bl	8003094 <imuCalcKpGain>
 8003282:	eef0 7a40 	vmov.f32	s15, s0
 8003286:	7f7a      	ldrb	r2, [r7, #29]
 8003288:	7fb9      	ldrb	r1, [r7, #30]
 800328a:	7ffb      	ldrb	r3, [r7, #31]
 800328c:	eeb0 4a67 	vmov.f32	s8, s15
 8003290:	edd7 3a06 	vldr	s7, [r7, #24]
 8003294:	eeb0 3a4b 	vmov.f32	s6, s22
 8003298:	eef0 2a6a 	vmov.f32	s5, s21
 800329c:	eeb0 2a4a 	vmov.f32	s4, s20
 80032a0:	4618      	mov	r0, r3
 80032a2:	eef0 1a69 	vmov.f32	s3, s19
 80032a6:	eeb0 1a49 	vmov.f32	s2, s18
 80032aa:	eef0 0a68 	vmov.f32	s1, s17
 80032ae:	eeb0 0a48 	vmov.f32	s0, s16
 80032b2:	f7ff faf9 	bl	80028a8 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 80032b6:	f7ff fe81 	bl	8002fbc <imuUpdateEulerAngles>
}
 80032ba:	bf00      	nop
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	ecbd 8b08 	vpop	{d8-d11}
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	42e4c2a3 	.word	0x42e4c2a3
 80032cc:	200008cc 	.word	0x200008cc
 80032d0:	20000894 	.word	0x20000894
 80032d4:	358637bd 	.word	0x358637bd
 80032d8:	3c8efa35 	.word	0x3c8efa35

080032dc <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	ed2d 8b02 	vpush	{d8}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 80032e6:	f7ff f8d1 	bl	800248c <getCosTiltAngle>
 80032ea:	eef0 7a40 	vmov.f32	s15, s0
 80032ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800337c <calculateThrottleAngleCorrection+0xa0>
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d801      	bhi.n	8003300 <calculateThrottleAngleCorrection+0x24>
        return 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e036      	b.n	800336e <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 8003300:	f7ff f8c4 	bl	800248c <getCosTiltAngle>
 8003304:	eef0 7a40 	vmov.f32	s15, s0
 8003308:	eeb0 0a67 	vmov.f32	s0, s15
 800330c:	f7fe f92e 	bl	800156c <acos_approx>
 8003310:	eeb0 7a40 	vmov.f32	s14, s0
 8003314:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <calculateThrottleAngleCorrection+0xa4>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	f010 fceb 	bl	8013cfc <lrintf>
 8003326:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800332e:	dd02      	ble.n	8003336 <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8003330:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003334:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <calculateThrottleAngleCorrection+0xa8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	ee07 3a90 	vmov	s15, r3
 8003348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800334c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003388 <calculateThrottleAngleCorrection+0xac>
 8003350:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003354:	eeb0 0a47 	vmov.f32	s0, s14
 8003358:	f7fe f846 	bl	80013e8 <sin_approx>
 800335c:	eef0 7a40 	vmov.f32	s15, s0
 8003360:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003364:	eeb0 0a67 	vmov.f32	s0, s15
 8003368:	f010 fcc8 	bl	8013cfc <lrintf>
 800336c:	4603      	mov	r3, r0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	ecbd 8b02 	vpop	{d8}
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	3c75c28f 	.word	0x3c75c28f
 8003380:	200008a0 	.word	0x200008a0
 8003384:	200008a4 	.word	0x200008a4
 8003388:	44b0b6ef 	.word	0x44b0b6ef

0800338c <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 80033a6:	f7ff ff99 	bl	80032dc <calculateThrottleAngleCorrection>
 80033aa:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffed 	bl	800338c <mixerSetThrottleAngleCorrection>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3318      	adds	r3, #24
 80033d4:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <compassDetect+0x8c>)
 80033e2:	789b      	ldrb	r3, [r3, #2]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d10f      	bne.n	8003408 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <compassDetect+0x8c>)
 80033ea:	78db      	ldrb	r3, [r3, #3]
 80033ec:	4619      	mov	r1, r3
 80033ee:	68b8      	ldr	r0, [r7, #8]
 80033f0:	f7fd fc54 	bl	8000c9c <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <compassDetect+0x8c>)
 80033f6:	791a      	ldrb	r2, [r3, #4]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	711a      	strb	r2, [r3, #4]
        break;
 80033fc:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <compassDetect+0x8c>)
 8003400:	785b      	ldrb	r3, [r3, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <compassDetect+0x54>
 8003406:	e001      	b.n	800340c <compassDetect+0x50>
        return false;
 8003408:	2300      	movs	r3, #0
 800340a:	e019      	b.n	8003440 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 800340c:	2b02      	cmp	r3, #2
 800340e:	d10e      	bne.n	800342e <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d103      	bne.n	8003422 <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <compassDetect+0x8c>)
 800341c:	791a      	ldrb	r2, [r3, #4]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2208      	movs	r2, #8
 8003426:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 8003428:	2302      	movs	r3, #2
 800342a:	73fb      	strb	r3, [r7, #15]
        break;
 800342c:	e002      	b.n	8003434 <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
        break;
 8003432:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <compassDetect+0x82>
        return false;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <compassDetect+0x84>
    }

    return true;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200009d0 	.word	0x200009d0

0800344c <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 8003456:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <magInit+0x64>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60d3      	str	r3, [r2, #12]
	magDev.read = readFn;
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <magInit+0x64>)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6113      	str	r3, [r2, #16]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 8003462:	f107 030f 	add.w	r3, r7, #15
 8003466:	4619      	mov	r1, r3
 8003468:	4811      	ldr	r0, [pc, #68]	; (80034b0 <magInit+0x64>)
 800346a:	f7ff ffa7 	bl	80033bc <compassDetect>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d018      	beq.n	80034a6 <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <magInit+0x64>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	480d      	ldr	r0, [pc, #52]	; (80034b0 <magInit+0x64>)
 800347a:	4798      	blx	r3
    doneInit = true;
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <magInit+0x68>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <magInit+0x64>)
 8003486:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <magInit+0x6c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <magInit+0x6c>)
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <magInit+0x64>)
 8003498:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <magInit+0x70>)
 800349e:	4808      	ldr	r0, [pc, #32]	; (80034c0 <magInit+0x74>)
 80034a0:	f002 fa22 	bl	80058e8 <buildRotationMatrixFromAlignment>
 80034a4:	e000      	b.n	80034a8 <magInit+0x5c>
        return;
 80034a6:	bf00      	nop
}
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200008dc 	.word	0x200008dc
 80034b4:	200009cc 	.word	0x200009cc
 80034b8:	200009d0 	.word	0x200009d0
 80034bc:	200009a0 	.word	0x200009a0
 80034c0:	200009e0 	.word	0x200009e0

080034c4 <magUpdate>:

void magUpdate(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev)) {
 80034ca:	4b2c      	ldr	r3, [pc, #176]	; (800357c <magUpdate+0xb8>)
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	482b      	ldr	r0, [pc, #172]	; (800357c <magUpdate+0xb8>)
 80034d0:	4798      	blx	r3
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d04d      	beq.n	8003574 <magUpdate+0xb0>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80034d8:	2300      	movs	r3, #0
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	e00c      	b.n	80034f8 <magUpdate+0x34>
    	mag.magADC[axis] = magDev.magADC[axis];
 80034de:	4a27      	ldr	r2, [pc, #156]	; (800357c <magUpdate+0xb8>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4925      	ldr	r1, [pc, #148]	; (8003580 <magUpdate+0xbc>)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3301      	adds	r3, #1
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	ddef      	ble.n	80034de <magUpdate+0x1a>
    }

    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <magUpdate+0xb8>)
 8003500:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003504:	4619      	mov	r1, r3
 8003506:	481e      	ldr	r0, [pc, #120]	; (8003580 <magUpdate+0xbc>)
 8003508:	f002 fa80 	bl	8005a0c <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <magUpdate+0xc0>)
 800350e:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <magUpdate+0xc4>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d02e      	beq.n	8003576 <magUpdate+0xb2>
        mag.magADC[X] -= magZero->raw[X];
 8003518:	4b19      	ldr	r3, [pc, #100]	; (8003580 <magUpdate+0xbc>)
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <magUpdate+0xbc>)
 8003532:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <magUpdate+0xbc>)
 8003538:	ed93 7a01 	vldr	s14, [r3, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003542:	ee07 3a90 	vmov	s15, r3
 8003546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <magUpdate+0xbc>)
 8003550:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <magUpdate+0xbc>)
 8003556:	ed93 7a02 	vldr	s14, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <magUpdate+0xbc>)
 800356e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003572:	e000      	b.n	8003576 <magUpdate+0xb2>
        return;
 8003574:	bf00      	nop
    }
}
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	200008dc 	.word	0x200008dc
 8003580:	200008d0 	.word	0x200008d0
 8003584:	200009d8 	.word	0x200009d8
 8003588:	200009cc 	.word	0x200009cc

0800358c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80035a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80035a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80035ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80035b4:	e000      	b.n	80035b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80035b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80035b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f9      	beq.n	80035b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80035c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <_write>:
static bool sensorBaroRead(struct baroDev_s *baro);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80035da:	b580      	push	{r7, lr}
 80035dc:	b086      	sub	sp, #24
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
 for (int i = 0; i < len; ++i) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e009      	b.n	8003600 <_write+0x26>
 ITM_SendChar(*ptr++);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	60ba      	str	r2, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ffc9 	bl	800358c <ITM_SendChar>
 for (int i = 0; i < len; ++i) {
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	dbf1      	blt.n	80035ec <_write+0x12>
 }
 return len;
 8003608:	687b      	ldr	r3, [r7, #4]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003618:	f007 ffb6 	bl	800b588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800361c:	f000 f916 	bl	800384c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003620:	f000 f9e4 	bl	80039ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003624:	f000 f984 	bl	8003930 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003628:	f000 f9b2 	bl	8003990 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* initialization of control task */
  gyroInit(sensorGyroInit, sensorGyroRead);
 800362c:	4958      	ldr	r1, [pc, #352]	; (8003790 <main+0x17c>)
 800362e:	4859      	ldr	r0, [pc, #356]	; (8003794 <main+0x180>)
 8003630:	f7fe fcc0 	bl	8001fb4 <gyroInit>
  controlMotorInit();
 8003634:	f7fd fb5e 	bl	8000cf4 <controlMotorInit>

  /* initialization of attitude task */
  accInit(sensorAccInit, sensorAccRead);
 8003638:	4957      	ldr	r1, [pc, #348]	; (8003798 <main+0x184>)
 800363a:	4858      	ldr	r0, [pc, #352]	; (800379c <main+0x188>)
 800363c:	f7fd f882 	bl	8000744 <accInit>
  magInit(sensorMagInit, sensorMagRead);
 8003640:	4957      	ldr	r1, [pc, #348]	; (80037a0 <main+0x18c>)
 8003642:	4858      	ldr	r0, [pc, #352]	; (80037a4 <main+0x190>)
 8003644:	f7ff ff02 	bl	800344c <magInit>
  attitudeInit();
 8003648:	f7fd f9b6 	bl	80009b8 <attitudeInit>

  /* initialization of altitude task */
  baroInit(sensorBaroInit, sensorBaroRead);
 800364c:	4956      	ldr	r1, [pc, #344]	; (80037a8 <main+0x194>)
 800364e:	4857      	ldr	r0, [pc, #348]	; (80037ac <main+0x198>)
 8003650:	f7fd fac0 	bl	8000bd4 <baroInit>

  /* initialization of sensors */
  	  /* initialization of sensor LSM6DSL*/
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 8003654:	2103      	movs	r1, #3
 8003656:	2000      	movs	r0, #0
 8003658:	f007 fc10 	bl	800ae7c <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 800365c:	2103      	movs	r1, #3
 800365e:	2000      	movs	r0, #0
 8003660:	f007 fd08 	bl	800b074 <IKS01A2_MOTION_SENSOR_Enable>

  	  /* initialization of sensor LSM303AGR*/
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 8003664:	2102      	movs	r1, #2
 8003666:	2001      	movs	r0, #1
 8003668:	f007 fc08 	bl	800ae7c <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800366c:	2104      	movs	r1, #4
 800366e:	2002      	movs	r0, #2
 8003670:	f007 fc04 	bl	800ae7c <IKS01A2_MOTION_SENSOR_Init>

  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 8003674:	2102      	movs	r1, #2
 8003676:	2001      	movs	r0, #1
 8003678:	f007 fcfc 	bl	800b074 <IKS01A2_MOTION_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800367c:	2104      	movs	r1, #4
 800367e:	2002      	movs	r0, #2
 8003680:	f007 fcf8 	bl	800b074 <IKS01A2_MOTION_SENSOR_Enable>
  	  /* initialization of pressure sensor LPS22HB*/
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8003684:	2102      	movs	r1, #2
 8003686:	2001      	movs	r0, #1
 8003688:	f007 f93c 	bl	800a904 <IKS01A2_ENV_SENSOR_Init>
  IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 800368c:	2102      	movs	r1, #2
 800368e:	2001      	movs	r0, #1
 8003690:	f007 f9f8 	bl	800aa84 <IKS01A2_ENV_SENSOR_Enable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003694:	f00b fee6 	bl	800f464 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semPressLPS22HB */
  semPressLPS22HBHandle = osSemaphoreNew(1, 1, &semPressLPS22HB_attributes);
 8003698:	4a45      	ldr	r2, [pc, #276]	; (80037b0 <main+0x19c>)
 800369a:	2101      	movs	r1, #1
 800369c:	2001      	movs	r0, #1
 800369e:	f00c f81f 	bl	800f6e0 <osSemaphoreNew>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4a43      	ldr	r2, [pc, #268]	; (80037b4 <main+0x1a0>)
 80036a6:	6013      	str	r3, [r2, #0]

  /* creation of semAccLSM303AGR */
  semAccLSM303AGRHandle = osSemaphoreNew(1, 1, &semAccLSM303AGR_attributes);
 80036a8:	4a43      	ldr	r2, [pc, #268]	; (80037b8 <main+0x1a4>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2001      	movs	r0, #1
 80036ae:	f00c f817 	bl	800f6e0 <osSemaphoreNew>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4a41      	ldr	r2, [pc, #260]	; (80037bc <main+0x1a8>)
 80036b6:	6013      	str	r3, [r2, #0]

  /* creation of semAccLSM6DSL */
  semAccLSM6DSLHandle = osSemaphoreNew(1, 1, &semAccLSM6DSL_attributes);
 80036b8:	4a41      	ldr	r2, [pc, #260]	; (80037c0 <main+0x1ac>)
 80036ba:	2101      	movs	r1, #1
 80036bc:	2001      	movs	r0, #1
 80036be:	f00c f80f 	bl	800f6e0 <osSemaphoreNew>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4a3f      	ldr	r2, [pc, #252]	; (80037c4 <main+0x1b0>)
 80036c6:	6013      	str	r3, [r2, #0]

  /* creation of semMagnetLSM303AGR */
  semMagnetLSM303AGRHandle = osSemaphoreNew(1, 1, &semMagnetLSM303AGR_attributes);
 80036c8:	4a3f      	ldr	r2, [pc, #252]	; (80037c8 <main+0x1b4>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	2001      	movs	r0, #1
 80036ce:	f00c f807 	bl	800f6e0 <osSemaphoreNew>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4a3d      	ldr	r2, [pc, #244]	; (80037cc <main+0x1b8>)
 80036d6:	6013      	str	r3, [r2, #0]

  /* creation of semGyrLSM6DSL */
  semGyrLSM6DSLHandle = osSemaphoreNew(1, 1, &semGyrLSM6DSL_attributes);
 80036d8:	4a3d      	ldr	r2, [pc, #244]	; (80037d0 <main+0x1bc>)
 80036da:	2101      	movs	r1, #1
 80036dc:	2001      	movs	r0, #1
 80036de:	f00b ffff 	bl	800f6e0 <osSemaphoreNew>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4a3b      	ldr	r2, [pc, #236]	; (80037d4 <main+0x1c0>)
 80036e6:	6013      	str	r3, [r2, #0]

  /* creation of semI2CInUse */
  semI2CInUseHandle = osSemaphoreNew(1, 1, &semI2CInUse_attributes);
 80036e8:	4a3b      	ldr	r2, [pc, #236]	; (80037d8 <main+0x1c4>)
 80036ea:	2101      	movs	r1, #1
 80036ec:	2001      	movs	r0, #1
 80036ee:	f00b fff7 	bl	800f6e0 <osSemaphoreNew>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4a39      	ldr	r2, [pc, #228]	; (80037dc <main+0x1c8>)
 80036f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tControlMotor */
  tControlMotorHandle = osThreadNew(startTaskControlMotor, NULL, &tControlMotor_attributes);
 80036f8:	4a39      	ldr	r2, [pc, #228]	; (80037e0 <main+0x1cc>)
 80036fa:	2100      	movs	r1, #0
 80036fc:	4839      	ldr	r0, [pc, #228]	; (80037e4 <main+0x1d0>)
 80036fe:	f00b ff1b 	bl	800f538 <osThreadNew>
 8003702:	4603      	mov	r3, r0
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <main+0x1d4>)
 8003706:	6013      	str	r3, [r2, #0]

  /* creation of tAttitude */
  tAttitudeHandle = osThreadNew(startTaskAttitude, NULL, &tAttitude_attributes);
 8003708:	4a38      	ldr	r2, [pc, #224]	; (80037ec <main+0x1d8>)
 800370a:	2100      	movs	r1, #0
 800370c:	4838      	ldr	r0, [pc, #224]	; (80037f0 <main+0x1dc>)
 800370e:	f00b ff13 	bl	800f538 <osThreadNew>
 8003712:	4603      	mov	r3, r0
 8003714:	4a37      	ldr	r2, [pc, #220]	; (80037f4 <main+0x1e0>)
 8003716:	6013      	str	r3, [r2, #0]

  /* creation of tAltitude */
  tAltitudeHandle = osThreadNew(startTaskAltitude, NULL, &tAltitude_attributes);
 8003718:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <main+0x1e4>)
 800371a:	2100      	movs	r1, #0
 800371c:	4837      	ldr	r0, [pc, #220]	; (80037fc <main+0x1e8>)
 800371e:	f00b ff0b 	bl	800f538 <osThreadNew>
 8003722:	4603      	mov	r3, r0
 8003724:	4a36      	ldr	r2, [pc, #216]	; (8003800 <main+0x1ec>)
 8003726:	6013      	str	r3, [r2, #0]

  /* creation of tGetAccLSM6DSL */
  tGetAccLSM6DSLHandle = osThreadNew(StartTaskGetAccLSM6DSL, NULL, &tGetAccLSM6DSL_attributes);
 8003728:	4a36      	ldr	r2, [pc, #216]	; (8003804 <main+0x1f0>)
 800372a:	2100      	movs	r1, #0
 800372c:	4836      	ldr	r0, [pc, #216]	; (8003808 <main+0x1f4>)
 800372e:	f00b ff03 	bl	800f538 <osThreadNew>
 8003732:	4603      	mov	r3, r0
 8003734:	4a35      	ldr	r2, [pc, #212]	; (800380c <main+0x1f8>)
 8003736:	6013      	str	r3, [r2, #0]

  /* creation of tGetAccLSM303AG */
  tGetAccLSM303AGHandle = osThreadNew(StartTaskGetAccLSM303AGR, NULL, &tGetAccLSM303AG_attributes);
 8003738:	4a35      	ldr	r2, [pc, #212]	; (8003810 <main+0x1fc>)
 800373a:	2100      	movs	r1, #0
 800373c:	4835      	ldr	r0, [pc, #212]	; (8003814 <main+0x200>)
 800373e:	f00b fefb 	bl	800f538 <osThreadNew>
 8003742:	4603      	mov	r3, r0
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <main+0x204>)
 8003746:	6013      	str	r3, [r2, #0]

  /* creation of tGetGyrLSM6DSL */
  tGetGyrLSM6DSLHandle = osThreadNew(StartTaskGetGyrLSM6DSL, NULL, &tGetGyrLSM6DSL_attributes);
 8003748:	4a34      	ldr	r2, [pc, #208]	; (800381c <main+0x208>)
 800374a:	2100      	movs	r1, #0
 800374c:	4834      	ldr	r0, [pc, #208]	; (8003820 <main+0x20c>)
 800374e:	f00b fef3 	bl	800f538 <osThreadNew>
 8003752:	4603      	mov	r3, r0
 8003754:	4a33      	ldr	r2, [pc, #204]	; (8003824 <main+0x210>)
 8003756:	6013      	str	r3, [r2, #0]

  /* creation of tGetMagnetLSM30 */
  tGetMagnetLSM30Handle = osThreadNew(StartTaskGetMagnetLSM303AGR, NULL, &tGetMagnetLSM30_attributes);
 8003758:	4a33      	ldr	r2, [pc, #204]	; (8003828 <main+0x214>)
 800375a:	2100      	movs	r1, #0
 800375c:	4833      	ldr	r0, [pc, #204]	; (800382c <main+0x218>)
 800375e:	f00b feeb 	bl	800f538 <osThreadNew>
 8003762:	4603      	mov	r3, r0
 8003764:	4a32      	ldr	r2, [pc, #200]	; (8003830 <main+0x21c>)
 8003766:	6013      	str	r3, [r2, #0]

  /* creation of tGetPressLPS22H */
  tGetPressLPS22HHandle = osThreadNew(StartTaskGetPressLPS22HB, NULL, &tGetPressLPS22H_attributes);
 8003768:	4a32      	ldr	r2, [pc, #200]	; (8003834 <main+0x220>)
 800376a:	2100      	movs	r1, #0
 800376c:	4832      	ldr	r0, [pc, #200]	; (8003838 <main+0x224>)
 800376e:	f00b fee3 	bl	800f538 <osThreadNew>
 8003772:	4603      	mov	r3, r0
 8003774:	4a31      	ldr	r2, [pc, #196]	; (800383c <main+0x228>)
 8003776:	6013      	str	r3, [r2, #0]

  /* creation of tPrintUART */
  tPrintUARTHandle = osThreadNew(StartTaskPrintUART, NULL, &tPrintUART_attributes);
 8003778:	4a31      	ldr	r2, [pc, #196]	; (8003840 <main+0x22c>)
 800377a:	2100      	movs	r1, #0
 800377c:	4831      	ldr	r0, [pc, #196]	; (8003844 <main+0x230>)
 800377e:	f00b fedb 	bl	800f538 <osThreadNew>
 8003782:	4603      	mov	r3, r0
 8003784:	4a30      	ldr	r2, [pc, #192]	; (8003848 <main+0x234>)
 8003786:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003788:	f00b fea0 	bl	800f4cc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800378c:	e7fe      	b.n	800378c <main+0x178>
 800378e:	bf00      	nop
 8003790:	08003bcd 	.word	0x08003bcd
 8003794:	08003bb9 	.word	0x08003bb9
 8003798:	08003c51 	.word	0x08003c51
 800379c:	08003c3d 	.word	0x08003c3d
 80037a0:	08003d25 	.word	0x08003d25
 80037a4:	08003d11 	.word	0x08003d11
 80037a8:	08003db1 	.word	0x08003db1
 80037ac:	08003d95 	.word	0x08003d95
 80037b0:	080143c4 	.word	0x080143c4
 80037b4:	20000f9c 	.word	0x20000f9c
 80037b8:	080143d4 	.word	0x080143d4
 80037bc:	20000fa0 	.word	0x20000fa0
 80037c0:	080143e4 	.word	0x080143e4
 80037c4:	20000fa4 	.word	0x20000fa4
 80037c8:	080143f4 	.word	0x080143f4
 80037cc:	20000fa8 	.word	0x20000fa8
 80037d0:	08014404 	.word	0x08014404
 80037d4:	20000fac 	.word	0x20000fac
 80037d8:	08014414 	.word	0x08014414
 80037dc:	20000fb0 	.word	0x20000fb0
 80037e0:	08014280 	.word	0x08014280
 80037e4:	08003df9 	.word	0x08003df9
 80037e8:	20000f78 	.word	0x20000f78
 80037ec:	080142a4 	.word	0x080142a4
 80037f0:	08003e11 	.word	0x08003e11
 80037f4:	20000f7c 	.word	0x20000f7c
 80037f8:	080142c8 	.word	0x080142c8
 80037fc:	08003e2d 	.word	0x08003e2d
 8003800:	20000f80 	.word	0x20000f80
 8003804:	080142ec 	.word	0x080142ec
 8003808:	08003e41 	.word	0x08003e41
 800380c:	20000f84 	.word	0x20000f84
 8003810:	08014310 	.word	0x08014310
 8003814:	08003ead 	.word	0x08003ead
 8003818:	20000f88 	.word	0x20000f88
 800381c:	08014334 	.word	0x08014334
 8003820:	08003f19 	.word	0x08003f19
 8003824:	20000f8c 	.word	0x20000f8c
 8003828:	08014358 	.word	0x08014358
 800382c:	08003f85 	.word	0x08003f85
 8003830:	20000f90 	.word	0x20000f90
 8003834:	0801437c 	.word	0x0801437c
 8003838:	08003ff1 	.word	0x08003ff1
 800383c:	20000f94 	.word	0x20000f94
 8003840:	080143a0 	.word	0x080143a0
 8003844:	08004051 	.word	0x08004051
 8003848:	20000f98 	.word	0x20000f98

0800384c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b094      	sub	sp, #80	; 0x50
 8003850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	2234      	movs	r2, #52	; 0x34
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f00f facf 	bl	8012dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003870:	f009 fa26 	bl	800ccc0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <SystemClock_Config+0xdc>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <SystemClock_Config+0xdc>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <SystemClock_Config+0xdc>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800388c:	4b27      	ldr	r3, [pc, #156]	; (800392c <SystemClock_Config+0xe0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003894:	4a25      	ldr	r2, [pc, #148]	; (800392c <SystemClock_Config+0xe0>)
 8003896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b23      	ldr	r3, [pc, #140]	; (800392c <SystemClock_Config+0xe0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80038ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80038b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b2:	2302      	movs	r3, #2
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038bc:	2304      	movs	r3, #4
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80038c0:	2360      	movs	r3, #96	; 0x60
 80038c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038c4:	2302      	movs	r3, #2
 80038c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038c8:	2304      	movs	r3, #4
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	4618      	mov	r0, r3
 80038d6:	f009 fa53 	bl	800cd80 <HAL_RCC_OscConfig>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80038e0:	f000 fbf0 	bl	80040c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038e4:	f009 f9fc 	bl	800cce0 <HAL_PWREx_EnableOverDrive>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80038ee:	f000 fbe9 	bl	80040c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038f2:	230f      	movs	r3, #15
 80038f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f6:	2302      	movs	r3, #2
 80038f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003908:	f107 0308 	add.w	r3, r7, #8
 800390c:	2103      	movs	r1, #3
 800390e:	4618      	mov	r0, r3
 8003910:	f009 fce4 	bl	800d2dc <HAL_RCC_ClockConfig>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800391a:	f000 fbd3 	bl	80040c4 <Error_Handler>
  }
}
 800391e:	bf00      	nop
 8003920:	3750      	adds	r7, #80	; 0x50
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	40007000 	.word	0x40007000

08003930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <MX_USART3_UART_Init+0x5c>)
 8003938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <MX_USART3_UART_Init+0x58>)
 800393c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003942:	4b11      	ldr	r3, [pc, #68]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <MX_USART3_UART_Init+0x58>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800394e:	4b0e      	ldr	r3, [pc, #56]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003956:	220c      	movs	r2, #12
 8003958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <MX_USART3_UART_Init+0x58>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003968:	2200      	movs	r2, #0
 800396a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <MX_USART3_UART_Init+0x58>)
 800396e:	2200      	movs	r2, #0
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003972:	4805      	ldr	r0, [pc, #20]	; (8003988 <MX_USART3_UART_Init+0x58>)
 8003974:	f00a fe12 	bl	800e59c <HAL_UART_Init>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800397e:	f000 fba1 	bl	80040c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200009e8 	.word	0x200009e8
 800398c:	40004800 	.word	0x40004800

08003990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003994:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800399a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800399e:	2206      	movs	r2, #6
 80039a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039a4:	2202      	movs	r2, #2
 80039a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b0:	2202      	movs	r2, #2
 80039b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039bc:	2200      	movs	r2, #0
 80039be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80039d2:	4805      	ldr	r0, [pc, #20]	; (80039e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039d4:	f009 f82b 	bl	800ca2e <HAL_PCD_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80039de:	f000 fb71 	bl	80040c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000a70 	.word	0x20000a70

080039ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	; 0x30
 80039f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f2:	f107 031c 	add.w	r3, r7, #28
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	60da      	str	r2, [r3, #12]
 8003a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a02:	4b68      	ldr	r3, [pc, #416]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a67      	ldr	r2, [pc, #412]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a61      	ldr	r2, [pc, #388]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a5b      	ldr	r2, [pc, #364]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	4a55      	ldr	r2, [pc, #340]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a50:	f043 0302 	orr.w	r3, r3, #2
 8003a54:	6313      	str	r3, [r2, #48]	; 0x30
 8003a56:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a62:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a4f      	ldr	r2, [pc, #316]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a68:	f043 0308 	orr.w	r3, r3, #8
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b4d      	ldr	r3, [pc, #308]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	4a49      	ldr	r2, [pc, #292]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a84:	6313      	str	r3, [r2, #48]	; 0x30
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <MX_GPIO_Init+0x1b8>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	607b      	str	r3, [r7, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003a92:	2200      	movs	r2, #0
 8003a94:	f244 0181 	movw	r1, #16513	; 0x4081
 8003a98:	4843      	ldr	r0, [pc, #268]	; (8003ba8 <MX_GPIO_Init+0x1bc>)
 8003a9a:	f008 f961 	bl	800bd60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2140      	movs	r1, #64	; 0x40
 8003aa2:	4842      	ldr	r0, [pc, #264]	; (8003bac <MX_GPIO_Init+0x1c0>)
 8003aa4:	f008 f95c 	bl	800bd60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003ab8:	f107 031c 	add.w	r3, r7, #28
 8003abc:	4619      	mov	r1, r3
 8003abe:	483c      	ldr	r0, [pc, #240]	; (8003bb0 <MX_GPIO_Init+0x1c4>)
 8003ac0:	f007 fe96 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003ac4:	2332      	movs	r3, #50	; 0x32
 8003ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ad4:	230b      	movs	r3, #11
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	4834      	ldr	r0, [pc, #208]	; (8003bb0 <MX_GPIO_Init+0x1c4>)
 8003ae0:	f007 fe86 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ae4:	2386      	movs	r3, #134	; 0x86
 8003ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003af4:	230b      	movs	r3, #11
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af8:	f107 031c 	add.w	r3, r7, #28
 8003afc:	4619      	mov	r1, r3
 8003afe:	482d      	ldr	r0, [pc, #180]	; (8003bb4 <MX_GPIO_Init+0x1c8>)
 8003b00:	f007 fe76 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003b04:	f244 0381 	movw	r3, #16513	; 0x4081
 8003b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4822      	ldr	r0, [pc, #136]	; (8003ba8 <MX_GPIO_Init+0x1bc>)
 8003b1e:	f007 fe67 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b30:	2303      	movs	r3, #3
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b34:	230b      	movs	r3, #11
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	481a      	ldr	r0, [pc, #104]	; (8003ba8 <MX_GPIO_Init+0x1bc>)
 8003b40:	f007 fe56 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4814      	ldr	r0, [pc, #80]	; (8003bac <MX_GPIO_Init+0x1c0>)
 8003b5c:	f007 fe48 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	480e      	ldr	r0, [pc, #56]	; (8003bac <MX_GPIO_Init+0x1c0>)
 8003b74:	f007 fe3c 	bl	800b7f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003b78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b86:	2303      	movs	r3, #3
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b8a:	230b      	movs	r3, #11
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	4805      	ldr	r0, [pc, #20]	; (8003bac <MX_GPIO_Init+0x1c0>)
 8003b96:	f007 fe2b 	bl	800b7f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b9a:	bf00      	nop
 8003b9c:	3730      	adds	r7, #48	; 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40020400 	.word	0x40020400
 8003bac:	40021800 	.word	0x40021800
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <sensorGyroInit>:

/* USER CODE BEGIN 4 */
static void sensorGyroInit(struct gyroDev_s *gyro) { }
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM6DSL;
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semGyrLSM6DSLHandle, osWaitForever );
 8003bd4:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <sensorGyroRead+0x68>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f00b fe1b 	bl	800f818 <osSemaphoreAcquire>
	axes_LSM6DSL = axesGyr_LSM6DSL;
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <sensorGyroRead+0x6c>)
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semGyrLSM6DSLHandle);
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <sensorGyroRead+0x68>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f00b fe76 	bl	800f8e4 <osSemaphoreRelease>
	gyro->gyroADC[0] = axes_LSM6DSL.x;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	gyro->gyroADC[1] = axes_LSM6DSL.y;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	ee07 3a90 	vmov	s15, r3
 8003c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	gyro->gyroADC[2] = axes_LSM6DSL.z;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	return true;
 8003c28:	2301      	movs	r3, #1
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000fac 	.word	0x20000fac
 8003c38:	20000fd0 	.word	0x20000fd0

08003c3c <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM303AG;
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM6DSL;

	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <sensorAccRead+0xb0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	4618      	mov	r0, r3
 8003c62:	f00b fdd9 	bl	800f818 <osSemaphoreAcquire>
	axes_LSM303AG = axesAcc_LSM303AG;
 8003c66:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <sensorAccRead+0xb4>)
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 8003c72:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <sensorAccRead+0xb0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00b fe34 	bl	800f8e4 <osSemaphoreRelease>
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 8003c7c:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <sensorAccRead+0xb8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f04f 31ff 	mov.w	r1, #4294967295
 8003c84:	4618      	mov	r0, r3
 8003c86:	f00b fdc7 	bl	800f818 <osSemaphoreAcquire>
	axes_LSM6DSL = axesAcc_LSM6DSL;
 8003c8a:	4a20      	ldr	r2, [pc, #128]	; (8003d0c <sensorAccRead+0xbc>)
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <sensorAccRead+0xb8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f00b fe22 	bl	800f8e4 <osSemaphoreRelease>

	acc->accADC[0] = (axes_LSM303AG.x + axes_LSM6DSL.x ) / 2;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	da00      	bge.n	8003cac <sensorAccRead+0x5c>
 8003caa:	3301      	adds	r3, #1
 8003cac:	105b      	asrs	r3, r3, #1
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	edc3 7a04 	vstr	s15, [r3, #16]
	acc->accADC[1] = (axes_LSM303AG.y + axes_LSM6DSL.y ) / 2;
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	da00      	bge.n	8003cc8 <sensorAccRead+0x78>
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	105b      	asrs	r3, r3, #1
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	edc3 7a05 	vstr	s15, [r3, #20]
	acc->accADC[2] = (axes_LSM303AG.z + axes_LSM6DSL.z ) / 2;
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	da00      	bge.n	8003ce4 <sensorAccRead+0x94>
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	105b      	asrs	r3, r3, #1
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	edc3 7a06 	vstr	s15, [r3, #24]
	return true;
 8003cf4:	2301      	movs	r3, #1
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000fa0 	.word	0x20000fa0
 8003d04:	20000fb8 	.word	0x20000fb8
 8003d08:	20000fa4 	.word	0x20000fa4
 8003d0c:	20000fc4 	.word	0x20000fc4

08003d10 <sensorMagInit>:

static void sensorMagInit(struct magDev_s *mag) { }
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *mag) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	//LSM303AGR sensor magnetometer
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM303AGR;
	osSemaphoreAcquire(semMagnetLSM303AGRHandle, osWaitForever );
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <sensorMagRead+0x68>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f04f 31ff 	mov.w	r1, #4294967295
 8003d34:	4618      	mov	r0, r3
 8003d36:	f00b fd6f 	bl	800f818 <osSemaphoreAcquire>
	axes_LSM303AGR = axesMag_LSM303AGR;
 8003d3a:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <sensorMagRead+0x6c>)
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semMagnetLSM303AGRHandle);
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <sensorMagRead+0x68>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f00b fdca 	bl	800f8e4 <osSemaphoreRelease>

	mag->magADC[0] = axes_LSM303AGR.x;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	edc3 7a00 	vstr	s15, [r3]
	mag->magADC[1] = axes_LSM303AGR.y;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	edc3 7a01 	vstr	s15, [r3, #4]
	mag->magADC[2] = axes_LSM303AGR.z;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	edc3 7a02 	vstr	s15, [r3, #8]
	return true;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000fa8 	.word	0x20000fa8
 8003d90:	20000fdc 	.word	0x20000fdc

08003d94 <sensorBaroInit>:

static void sensorBaroInit(struct baroDev_s *baro) {
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	baro->baroADC = 0;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <sensorBaroRead>:

static bool sensorBaroRead(struct baroDev_s *baro) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	//baro->baroADC = 12000;
	osSemaphoreAcquire(semPressLPS22HBHandle, osWaitForever );
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <sensorBaroRead+0x40>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f00b fd29 	bl	800f818 <osSemaphoreAcquire>
	baro->baroADC = pressure_LPS22HB;
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <sensorBaroRead+0x44>)
 8003dc8:	edd3 7a00 	vldr	s15, [r3]
 8003dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dd0:	ee17 2a90 	vmov	r2, s15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	//LPS22HB_Pressure = pressure;
	osSemaphoreRelease(semPressLPS22HBHandle);
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <sensorBaroRead+0x40>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f00b fd80 	bl	800f8e4 <osSemaphoreRelease>
	return true;
 8003de4:	2301      	movs	r3, #1
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000f9c 	.word	0x20000f9c
 8003df4:	20000fb4 	.word	0x20000fb4

08003df8 <startTaskControlMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskControlMotor */
void startTaskControlMotor(void *argument)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	gyroUpdate();
 8003e00:	f7fe fa56 	bl	80022b0 <gyroUpdate>
	controlMotorUpdate();
 8003e04:	f7fc ff7c 	bl	8000d00 <controlMotorUpdate>
    osDelay(1);
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f00b fc3b 	bl	800f684 <osDelay>
	gyroUpdate();
 8003e0e:	e7f7      	b.n	8003e00 <startTaskControlMotor+0x8>

08003e10 <startTaskAttitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAttitude */
void startTaskAttitude(void *argument)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAttitude */
  /* Infinite loop */
  for(;;)
  {
    accUpdate();
 8003e18:	f7fc fcf0 	bl	80007fc <accUpdate>
    magUpdate();
 8003e1c:	f7ff fb52 	bl	80034c4 <magUpdate>
    attitudeUpdate();
 8003e20:	f7fc fdd0 	bl	80009c4 <attitudeUpdate>
    osDelay(1);
 8003e24:	2001      	movs	r0, #1
 8003e26:	f00b fc2d 	bl	800f684 <osDelay>
    accUpdate();
 8003e2a:	e7f5      	b.n	8003e18 <startTaskAttitude+0x8>

08003e2c <startTaskAltitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAltitude */
void startTaskAltitude(void *argument)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAltitude */
  /* Infinite loop */
  for(;;)
  {
    baroUpdate();
 8003e34:	f7fc ff08 	bl	8000c48 <baroUpdate>
    osDelay(1);
 8003e38:	2001      	movs	r0, #1
 8003e3a:	f00b fc23 	bl	800f684 <osDelay>
    baroUpdate();
 8003e3e:	e7f9      	b.n	8003e34 <startTaskAltitude+0x8>

08003e40 <StartTaskGetAccLSM6DSL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetAccLSM6DSL */
void StartTaskGetAccLSM6DSL(void *argument)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetAccLSM6DSL */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <StartTaskGetAccLSM6DSL+0x60>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00b fce1 	bl	800f818 <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &axes);
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f007 f94a 	bl	800b0f8 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <StartTaskGetAccLSM6DSL+0x60>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f00b fd3b 	bl	800f8e4 <osSemaphoreRelease>

	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <StartTaskGetAccLSM6DSL+0x64>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f04f 31ff 	mov.w	r1, #4294967295
 8003e76:	4618      	mov	r0, r3
 8003e78:	f00b fcce 	bl	800f818 <osSemaphoreAcquire>
	axesAcc_LSM6DSL = axes;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <StartTaskGetAccLSM6DSL+0x68>)
 8003e7e:	461c      	mov	r4, r3
 8003e80:	f107 030c 	add.w	r3, r7, #12
 8003e84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <StartTaskGetAccLSM6DSL+0x64>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00b fd27 	bl	800f8e4 <osSemaphoreRelease>
	osDelay(100);
 8003e96:	2064      	movs	r0, #100	; 0x64
 8003e98:	f00b fbf4 	bl	800f684 <osDelay>
  {
 8003e9c:	e7d4      	b.n	8003e48 <StartTaskGetAccLSM6DSL+0x8>
 8003e9e:	bf00      	nop
 8003ea0:	20000fb0 	.word	0x20000fb0
 8003ea4:	20000fa4 	.word	0x20000fa4
 8003ea8:	20000fc4 	.word	0x20000fc4

08003eac <StartTaskGetAccLSM303AGR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetAccLSM303AGR */
void StartTaskGetAccLSM303AGR(void *argument)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetAccLSM303AGR */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8003eb4:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <StartTaskGetAccLSM303AGR+0x60>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f00b fcab 	bl	800f818 <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO, &axes);
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2102      	movs	r1, #2
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f007 f914 	bl	800b0f8 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <StartTaskGetAccLSM303AGR+0x60>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00b fd05 	bl	800f8e4 <osSemaphoreRelease>

	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 8003eda:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <StartTaskGetAccLSM303AGR+0x64>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f00b fc98 	bl	800f818 <osSemaphoreAcquire>
    axesAcc_LSM303AG = axes;
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <StartTaskGetAccLSM303AGR+0x68>)
 8003eea:	461c      	mov	r4, r3
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <StartTaskGetAccLSM303AGR+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f00b fcf1 	bl	800f8e4 <osSemaphoreRelease>
	osDelay(100);
 8003f02:	2064      	movs	r0, #100	; 0x64
 8003f04:	f00b fbbe 	bl	800f684 <osDelay>
  {
 8003f08:	e7d4      	b.n	8003eb4 <StartTaskGetAccLSM303AGR+0x8>
 8003f0a:	bf00      	nop
 8003f0c:	20000fb0 	.word	0x20000fb0
 8003f10:	20000fa0 	.word	0x20000fa0
 8003f14:	20000fb8 	.word	0x20000fb8

08003f18 <StartTaskGetGyrLSM6DSL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetGyrLSM6DSL */
void StartTaskGetGyrLSM6DSL(void *argument)
{
 8003f18:	b590      	push	{r4, r7, lr}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetGyrLSM6DSL */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <StartTaskGetGyrLSM6DSL+0x60>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f00b fc75 	bl	800f818 <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_GYRO, &axes);
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	461a      	mov	r2, r3
 8003f34:	2101      	movs	r1, #1
 8003f36:	2002      	movs	r0, #2
 8003f38:	f007 f8de 	bl	800b0f8 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <StartTaskGetGyrLSM6DSL+0x60>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f00b fccf 	bl	800f8e4 <osSemaphoreRelease>

	osSemaphoreAcquire(semGyrLSM6DSLHandle, osWaitForever );
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <StartTaskGetGyrLSM6DSL+0x64>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00b fc62 	bl	800f818 <osSemaphoreAcquire>
	axesGyr_LSM6DSL = axes;
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <StartTaskGetGyrLSM6DSL+0x68>)
 8003f56:	461c      	mov	r4, r3
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semGyrLSM6DSLHandle);
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <StartTaskGetGyrLSM6DSL+0x64>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f00b fcbb 	bl	800f8e4 <osSemaphoreRelease>
    osDelay(500);
 8003f6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f72:	f00b fb87 	bl	800f684 <osDelay>
  {
 8003f76:	e7d3      	b.n	8003f20 <StartTaskGetGyrLSM6DSL+0x8>
 8003f78:	20000fb0 	.word	0x20000fb0
 8003f7c:	20000fac 	.word	0x20000fac
 8003f80:	20000fd0 	.word	0x20000fd0

08003f84 <StartTaskGetMagnetLSM303AGR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetMagnetLSM303AGR */
void StartTaskGetMagnetLSM303AGR(void *argument)
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetMagnetLSM303AGR */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <StartTaskGetMagnetLSM303AGR+0x60>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f04f 31ff 	mov.w	r1, #4294967295
 8003f94:	4618      	mov	r0, r3
 8003f96:	f00b fc3f 	bl	800f818 <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, &axes);
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	2002      	movs	r0, #2
 8003fa4:	f007 f8a8 	bl	800b0f8 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <StartTaskGetMagnetLSM303AGR+0x60>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f00b fc99 	bl	800f8e4 <osSemaphoreRelease>

	osSemaphoreAcquire(semMagnetLSM303AGRHandle, osWaitForever );
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <StartTaskGetMagnetLSM303AGR+0x64>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f00b fc2c 	bl	800f818 <osSemaphoreAcquire>
	axesMag_LSM303AGR = axes;
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <StartTaskGetMagnetLSM303AGR+0x68>)
 8003fc2:	461c      	mov	r4, r3
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003fcc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semMagnetLSM303AGRHandle);
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <StartTaskGetMagnetLSM303AGR+0x64>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f00b fc85 	bl	800f8e4 <osSemaphoreRelease>
    osDelay(10);
 8003fda:	200a      	movs	r0, #10
 8003fdc:	f00b fb52 	bl	800f684 <osDelay>
  {
 8003fe0:	e7d4      	b.n	8003f8c <StartTaskGetMagnetLSM303AGR+0x8>
 8003fe2:	bf00      	nop
 8003fe4:	20000fb0 	.word	0x20000fb0
 8003fe8:	20000fa8 	.word	0x20000fa8
 8003fec:	20000fdc 	.word	0x20000fdc

08003ff0 <StartTaskGetPressLPS22HB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetPressLPS22HB */
void StartTaskGetPressLPS22HB(void *argument)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	float pressure;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8003ff8:	4b12      	ldr	r3, [pc, #72]	; (8004044 <StartTaskGetPressLPS22HB+0x54>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8004000:	4618      	mov	r0, r3
 8004002:	f00b fc09 	bl	800f818 <osSemaphoreAcquire>
	IKS01A2_ENV_SENSOR_GetValue(IKS01A2_HTS221_0, ENV_PRESSURE, &pressure);
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	461a      	mov	r2, r3
 800400c:	2102      	movs	r1, #2
 800400e:	2000      	movs	r0, #0
 8004010:	f006 fd7a 	bl	800ab08 <IKS01A2_ENV_SENSOR_GetValue>
	osSemaphoreRelease(semI2CInUseHandle);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <StartTaskGetPressLPS22HB+0x54>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f00b fc63 	bl	800f8e4 <osSemaphoreRelease>

	osSemaphoreAcquire(semPressLPS22HBHandle, osWaitForever );
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <StartTaskGetPressLPS22HB+0x58>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f04f 31ff 	mov.w	r1, #4294967295
 8004026:	4618      	mov	r0, r3
 8004028:	f00b fbf6 	bl	800f818 <osSemaphoreAcquire>
	pressure_LPS22HB = pressure;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a07      	ldr	r2, [pc, #28]	; (800404c <StartTaskGetPressLPS22HB+0x5c>)
 8004030:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(semPressLPS22HBHandle);
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <StartTaskGetPressLPS22HB+0x58>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f00b fc54 	bl	800f8e4 <osSemaphoreRelease>
    osDelay(20);
 800403c:	2014      	movs	r0, #20
 800403e:	f00b fb21 	bl	800f684 <osDelay>
  {
 8004042:	e7d9      	b.n	8003ff8 <StartTaskGetPressLPS22HB+0x8>
 8004044:	20000fb0 	.word	0x20000fb0
 8004048:	20000f9c 	.word	0x20000f9c
 800404c:	20000fb4 	.word	0x20000fb4

08004050 <StartTaskPrintUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPrintUART */
void StartTaskPrintUART(void *argument)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPrintUART */
  /* Infinite loop */
  for(;;)
  {
	printf("Magnet: \n");
 8004058:	480c      	ldr	r0, [pc, #48]	; (800408c <StartTaskPrintUART+0x3c>)
 800405a:	f00e fff3 	bl	8013044 <puts>
	printf("x:%d\n", (int)axesMag_LSM303AGR.x);
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <StartTaskPrintUART+0x40>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <StartTaskPrintUART+0x44>)
 8004066:	f00e ff67 	bl	8012f38 <iprintf>
	printf("y:%d\n", (int)axesMag_LSM303AGR.y);
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <StartTaskPrintUART+0x40>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4619      	mov	r1, r3
 8004070:	4809      	ldr	r0, [pc, #36]	; (8004098 <StartTaskPrintUART+0x48>)
 8004072:	f00e ff61 	bl	8012f38 <iprintf>
	printf("z:%d\n", (int)axesMag_LSM303AGR.z);
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <StartTaskPrintUART+0x40>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	4619      	mov	r1, r3
 800407c:	4807      	ldr	r0, [pc, #28]	; (800409c <StartTaskPrintUART+0x4c>)
 800407e:	f00e ff5b 	bl	8012f38 <iprintf>
    osDelay(2000);
 8004082:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004086:	f00b fafd 	bl	800f684 <osDelay>
	printf("Magnet: \n");
 800408a:	e7e5      	b.n	8004058 <StartTaskPrintUART+0x8>
 800408c:	08014244 	.word	0x08014244
 8004090:	20000fdc 	.word	0x20000fdc
 8004094:	08014250 	.word	0x08014250
 8004098:	08014258 	.word	0x08014258
 800409c:	08014260 	.word	0x08014260

080040a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	; (80040c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040b2:	f007 fa77 	bl	800b5a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000

080040c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040c8:	b672      	cpsid	i
}
 80040ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040cc:	e7fe      	b.n	80040cc <Error_Handler+0x8>

080040ce <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
    if (amt < low)
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	429a      	cmp	r2, r3
 80040e0:	da01      	bge.n	80040e6 <constrain+0x18>
        return low;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	e006      	b.n	80040f4 <constrain+0x26>
    else if (amt > high)
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	dd01      	ble.n	80040f2 <constrain+0x24>
        return high;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	e000      	b.n	80040f4 <constrain+0x26>
    else
        return amt;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	ed87 0a03 	vstr	s0, [r7, #12]
 800410a:	edc7 0a02 	vstr	s1, [r7, #8]
 800410e:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 8004112:	ed97 7a03 	vldr	s14, [r7, #12]
 8004116:	edd7 7a02 	vldr	s15, [r7, #8]
 800411a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004122:	d501      	bpl.n	8004128 <constrainf+0x28>
        return low;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	e00b      	b.n	8004140 <constrainf+0x40>
    else if (amt > high)
 8004128:	ed97 7a03 	vldr	s14, [r7, #12]
 800412c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004138:	dd01      	ble.n	800413e <constrainf+0x3e>
        return high;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	e000      	b.n	8004140 <constrainf+0x40>
    else
        return amt;
 800413e:	68fb      	ldr	r3, [r7, #12]
}
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eeb0 0a67 	vmov.f32	s0, s15
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
    return true;
 8004156:	2301      	movs	r3, #1
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <pidAntiGravityEnabled+0x14>)
 800416a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 800416e:	4618      	mov	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20001080 	.word	0x20001080

0800417c <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 8004184:	4a0f      	ldr	r2, [pc, #60]	; (80041c4 <pidSetTargetLooptime+0x48>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <pidSetTargetLooptime+0x48>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80041c8 <pidSetTargetLooptime+0x4c>
 800419a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <pidSetTargetLooptime+0x50>)
 80041a0:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <pidSetTargetLooptime+0x50>)
 80041a6:	ed93 7a00 	vldr	s14, [r3]
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <pidSetTargetLooptime+0x50>)
 80041b4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	200012cc 	.word	0x200012cc
 80041c8:	358637bd 	.word	0x358637bd
 80041cc:	20001080 	.word	0x20001080

080041d0 <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b091      	sub	sp, #68	; 0x44
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 80041d8:	4bb0      	ldr	r3, [pc, #704]	; (800449c <pidInitFilters+0x2cc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10f      	bne.n	8004200 <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80041e0:	4baf      	ldr	r3, [pc, #700]	; (80044a0 <pidInitFilters+0x2d0>)
 80041e2:	4ab0      	ldr	r2, [pc, #704]	; (80044a4 <pidInitFilters+0x2d4>)
 80041e4:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80041e6:	4bae      	ldr	r3, [pc, #696]	; (80044a0 <pidInitFilters+0x2d0>)
 80041e8:	4aae      	ldr	r2, [pc, #696]	; (80044a4 <pidInitFilters+0x2d4>)
 80041ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 80041ee:	4bac      	ldr	r3, [pc, #688]	; (80044a0 <pidInitFilters+0x2d0>)
 80041f0:	4aac      	ldr	r2, [pc, #688]	; (80044a4 <pidInitFilters+0x2d4>)
 80041f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 80041f6:	4baa      	ldr	r3, [pc, #680]	; (80044a0 <pidInitFilters+0x2d0>)
 80041f8:	4aaa      	ldr	r2, [pc, #680]	; (80044a4 <pidInitFilters+0x2d4>)
 80041fa:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 80041fe:	e267      	b.n	80046d0 <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 8004200:	4ba7      	ldr	r3, [pc, #668]	; (80044a0 <pidInitFilters+0x2d0>)
 8004202:	ed93 7a01 	vldr	s14, [r3, #4]
 8004206:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800420a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800420e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004212:	ee17 3a90 	vmov	r3, s15
 8004216:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	889b      	ldrh	r3, [r3, #4]
 800421c:	461a      	mov	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	4293      	cmp	r3, r2
 8004222:	d303      	bcc.n	800422c <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	889b      	ldrh	r3, [r3, #4]
 8004228:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800422a:	e00a      	b.n	8004242 <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	88db      	ldrh	r3, [r3, #6]
 8004230:	461a      	mov	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	4293      	cmp	r3, r2
 8004236:	d902      	bls.n	800423e <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800423c:	e001      	b.n	8004242 <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 8004242:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004244:	2b00      	cmp	r3, #0
 8004246:	d03d      	beq.n	80042c4 <pidInitFilters+0xf4>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	88db      	ldrh	r3, [r3, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d039      	beq.n	80042c4 <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004250:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <pidInitFilters+0x2d0>)
 8004252:	4a95      	ldr	r2, [pc, #596]	; (80044a8 <pidInitFilters+0x2d8>)
 8004254:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 8004256:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	88db      	ldrh	r3, [r3, #6]
 8004264:	ee07 3a10 	vmov	s14, r3
 8004268:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800426c:	eef0 0a47 	vmov.f32	s1, s14
 8004270:	eeb0 0a67 	vmov.f32	s0, s15
 8004274:	f7fc fd4e 	bl	8000d14 <filterGetNotchQ>
 8004278:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800427c:	2300      	movs	r3, #0
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004280:	e01c      	b.n	80042bc <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8004282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	3318      	adds	r3, #24
 800428e:	4a84      	ldr	r2, [pc, #528]	; (80044a0 <pidInitFilters+0x2d0>)
 8004290:	4413      	add	r3, r2
 8004292:	3304      	adds	r3, #4
 8004294:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004296:	ee07 2a90 	vmov	s15, r2
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	4a7f      	ldr	r2, [pc, #508]	; (800449c <pidInitFilters+0x2cc>)
 80042a0:	6811      	ldr	r1, [r2, #0]
 80042a2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80042a6:	2201      	movs	r2, #1
 80042a8:	edd7 0a04 	vldr	s1, [r7, #16]
 80042ac:	eeb0 0a67 	vmov.f32	s0, s15
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc fdc1 	bl	8000e38 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	3301      	adds	r3, #1
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	2b02      	cmp	r3, #2
 80042c0:	dddf      	ble.n	8004282 <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 80042c2:	e002      	b.n	80042ca <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 80042c4:	4b76      	ldr	r3, [pc, #472]	; (80044a0 <pidInitFilters+0x2d0>)
 80042c6:	4a77      	ldr	r2, [pc, #476]	; (80044a4 <pidInitFilters+0x2d4>)
 80042c8:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	885b      	ldrh	r3, [r3, #2]
 80042ce:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 80042d0:	89fb      	ldrh	r3, [r7, #14]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80c6 	beq.w	8004464 <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80042de:	2b03      	cmp	r3, #3
 80042e0:	f200 80bb 	bhi.w	800445a <pidInitFilters+0x28a>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <pidInitFilters+0x11c>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	08004353 	.word	0x08004353
 80042f4:	080043af 	.word	0x080043af
 80042f8:	08004405 	.word	0x08004405
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 80042fc:	4b68      	ldr	r3, [pc, #416]	; (80044a0 <pidInitFilters+0x2d0>)
 80042fe:	4a6b      	ldr	r2, [pc, #428]	; (80044ac <pidInitFilters+0x2dc>)
 8004300:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004304:	2300      	movs	r3, #0
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
 8004308:	e01f      	b.n	800434a <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 800430a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	3398      	adds	r3, #152	; 0x98
 8004316:	4a62      	ldr	r2, [pc, #392]	; (80044a0 <pidInitFilters+0x2d0>)
 8004318:	189c      	adds	r4, r3, r2
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004324:	4b5e      	ldr	r3, [pc, #376]	; (80044a0 <pidInitFilters+0x2d0>)
 8004326:	ed93 7a00 	vldr	s14, [r3]
 800432a:	eef0 0a47 	vmov.f32	s1, s14
 800432e:	eeb0 0a67 	vmov.f32	s0, s15
 8004332:	f7fc fd21 	bl	8000d78 <pt1FilterGain>
 8004336:	eef0 7a40 	vmov.f32	s15, s0
 800433a:	eeb0 0a67 	vmov.f32	s0, s15
 800433e:	4620      	mov	r0, r4
 8004340:	f7fc fd42 	bl	8000dc8 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004346:	3301      	adds	r3, #1
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	2b02      	cmp	r3, #2
 800434e:	dddc      	ble.n	800430a <pidInitFilters+0x13a>
            }
            break;
 8004350:	e08c      	b.n	800446c <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	885b      	ldrh	r3, [r3, #2]
 8004356:	461a      	mov	r2, r3
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4293      	cmp	r3, r2
 800435c:	d922      	bls.n	80043a4 <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 800435e:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <pidInitFilters+0x2d0>)
 8004360:	4a51      	ldr	r2, [pc, #324]	; (80044a8 <pidInitFilters+0x2d8>)
 8004362:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004366:	2300      	movs	r3, #0
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
 800436a:	e017      	b.n	800439c <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 800436c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	3398      	adds	r3, #152	; 0x98
 8004378:	4a49      	ldr	r2, [pc, #292]	; (80044a0 <pidInitFilters+0x2d0>)
 800437a:	4413      	add	r3, r2
 800437c:	89fa      	ldrh	r2, [r7, #14]
 800437e:	ee07 2a90 	vmov	s15, r2
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	4a45      	ldr	r2, [pc, #276]	; (800449c <pidInitFilters+0x2cc>)
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	4611      	mov	r1, r2
 800438c:	eeb0 0a67 	vmov.f32	s0, s15
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc fd7f 	bl	8000e94 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	3301      	adds	r3, #1
 800439a:	633b      	str	r3, [r7, #48]	; 0x30
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	2b02      	cmp	r3, #2
 80043a0:	dde4      	ble.n	800436c <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 80043a2:	e063      	b.n	800446c <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80043a4:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <pidInitFilters+0x2d0>)
 80043a6:	4a3f      	ldr	r2, [pc, #252]	; (80044a4 <pidInitFilters+0x2d4>)
 80043a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 80043ac:	e05e      	b.n	800446c <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 80043ae:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <pidInitFilters+0x2d0>)
 80043b0:	4a3f      	ldr	r2, [pc, #252]	; (80044b0 <pidInitFilters+0x2e0>)
 80043b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80043b6:	2300      	movs	r3, #0
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ba:	e01f      	b.n	80043fc <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80043bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	3398      	adds	r3, #152	; 0x98
 80043c8:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <pidInitFilters+0x2d0>)
 80043ca:	189c      	adds	r4, r3, r2
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <pidInitFilters+0x2d0>)
 80043d8:	ed93 7a00 	vldr	s14, [r3]
 80043dc:	eef0 0a47 	vmov.f32	s1, s14
 80043e0:	eeb0 0a67 	vmov.f32	s0, s15
 80043e4:	f7fc fea8 	bl	8001138 <pt2FilterGain>
 80043e8:	eef0 7a40 	vmov.f32	s15, s0
 80043ec:	eeb0 0a67 	vmov.f32	s0, s15
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7fc feef 	bl	80011d4 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	3301      	adds	r3, #1
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	2b02      	cmp	r3, #2
 8004400:	dddc      	ble.n	80043bc <pidInitFilters+0x1ec>
            }
            break;
 8004402:	e033      	b.n	800446c <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8004404:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <pidInitFilters+0x2d0>)
 8004406:	4a2b      	ldr	r2, [pc, #172]	; (80044b4 <pidInitFilters+0x2e4>)
 8004408:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800440c:	2300      	movs	r3, #0
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004410:	e01f      	b.n	8004452 <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3398      	adds	r3, #152	; 0x98
 800441e:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <pidInitFilters+0x2d0>)
 8004420:	189c      	adds	r4, r3, r2
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <pidInitFilters+0x2d0>)
 800442e:	ed93 7a00 	vldr	s14, [r3]
 8004432:	eef0 0a47 	vmov.f32	s1, s14
 8004436:	eeb0 0a67 	vmov.f32	s0, s15
 800443a:	f7fc ff1d 	bl	8001278 <pt3FilterGain>
 800443e:	eef0 7a40 	vmov.f32	s15, s0
 8004442:	eeb0 0a67 	vmov.f32	s0, s15
 8004446:	4620      	mov	r0, r4
 8004448:	f7fc ff64 	bl	8001314 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	3301      	adds	r3, #1
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	2b02      	cmp	r3, #2
 8004456:	dddc      	ble.n	8004412 <pidInitFilters+0x242>
            }
            break;
 8004458:	e008      	b.n	800446c <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <pidInitFilters+0x2d0>)
 800445c:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <pidInitFilters+0x2d4>)
 800445e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004462:	e003      	b.n	800446c <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004464:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <pidInitFilters+0x2d0>)
 8004466:	4a0f      	ldr	r2, [pc, #60]	; (80044a4 <pidInitFilters+0x2d4>)
 8004468:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80e5 	beq.w	8004642 <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800447e:	2b03      	cmp	r3, #3
 8004480:	f200 80da 	bhi.w	8004638 <pidInitFilters+0x468>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <pidInitFilters+0x2bc>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	080044b9 	.word	0x080044b9
 8004490:	08004517 	.word	0x08004517
 8004494:	0800457d 	.word	0x0800457d
 8004498:	080045db 	.word	0x080045db
 800449c:	200012cc 	.word	0x200012cc
 80044a0:	20001080 	.word	0x20001080
 80044a4:	08000d59 	.word	0x08000d59
 80044a8:	08000ec5 	.word	0x08000ec5
 80044ac:	08000def 	.word	0x08000def
 80044b0:	08001203 	.word	0x08001203
 80044b4:	0800134b 	.word	0x0800134b
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 80044b8:	4b87      	ldr	r3, [pc, #540]	; (80046d8 <pidInitFilters+0x508>)
 80044ba:	4a88      	ldr	r2, [pc, #544]	; (80046dc <pidInitFilters+0x50c>)
 80044bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e023      	b.n	800450e <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80044d4:	4a80      	ldr	r2, [pc, #512]	; (80046d8 <pidInitFilters+0x508>)
 80044d6:	4413      	add	r3, r2
 80044d8:	1d1c      	adds	r4, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <pidInitFilters+0x508>)
 80044ea:	ed93 7a00 	vldr	s14, [r3]
 80044ee:	eef0 0a47 	vmov.f32	s1, s14
 80044f2:	eeb0 0a67 	vmov.f32	s0, s15
 80044f6:	f7fc fc3f 	bl	8000d78 <pt1FilterGain>
 80044fa:	eef0 7a40 	vmov.f32	s15, s0
 80044fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004502:	4620      	mov	r0, r4
 8004504:	f7fc fc60 	bl	8000dc8 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	3301      	adds	r3, #1
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2b02      	cmp	r3, #2
 8004512:	ddd8      	ble.n	80044c6 <pidInitFilters+0x2f6>
            }
            break;
 8004514:	e099      	b.n	800464a <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800451c:	461a      	mov	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	4293      	cmp	r3, r2
 8004522:	d926      	bls.n	8004572 <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004524:	4b6c      	ldr	r3, [pc, #432]	; (80046d8 <pidInitFilters+0x508>)
 8004526:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <pidInitFilters+0x510>)
 8004528:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	e01b      	b.n	800456a <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 8004532:	6a3a      	ldr	r2, [r7, #32]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004540:	4a65      	ldr	r2, [pc, #404]	; (80046d8 <pidInitFilters+0x508>)
 8004542:	4413      	add	r3, r2
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004554:	4b63      	ldr	r3, [pc, #396]	; (80046e4 <pidInitFilters+0x514>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	eeb0 0a67 	vmov.f32	s0, s15
 800455e:	4610      	mov	r0, r2
 8004560:	f7fc fc98 	bl	8000e94 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	3301      	adds	r3, #1
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2b02      	cmp	r3, #2
 800456e:	dde0      	ble.n	8004532 <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004570:	e06b      	b.n	800464a <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004572:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <pidInitFilters+0x508>)
 8004574:	4a5c      	ldr	r2, [pc, #368]	; (80046e8 <pidInitFilters+0x518>)
 8004576:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 800457a:	e066      	b.n	800464a <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 800457c:	4b56      	ldr	r3, [pc, #344]	; (80046d8 <pidInitFilters+0x508>)
 800457e:	4a5b      	ldr	r2, [pc, #364]	; (80046ec <pidInitFilters+0x51c>)
 8004580:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	e023      	b.n	80045d2 <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004598:	4a4f      	ldr	r2, [pc, #316]	; (80046d8 <pidInitFilters+0x508>)
 800459a:	4413      	add	r3, r2
 800459c:	1d1c      	adds	r4, r3, #4
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80045a4:	ee07 3a90 	vmov	s15, r3
 80045a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ac:	4b4a      	ldr	r3, [pc, #296]	; (80046d8 <pidInitFilters+0x508>)
 80045ae:	ed93 7a00 	vldr	s14, [r3]
 80045b2:	eef0 0a47 	vmov.f32	s1, s14
 80045b6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ba:	f7fc fdbd 	bl	8001138 <pt2FilterGain>
 80045be:	eef0 7a40 	vmov.f32	s15, s0
 80045c2:	eeb0 0a67 	vmov.f32	s0, s15
 80045c6:	4620      	mov	r0, r4
 80045c8:	f7fc fe04 	bl	80011d4 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	ddd8      	ble.n	800458a <pidInitFilters+0x3ba>
            }
            break;
 80045d8:	e037      	b.n	800464a <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 80045da:	4b3f      	ldr	r3, [pc, #252]	; (80046d8 <pidInitFilters+0x508>)
 80045dc:	4a44      	ldr	r2, [pc, #272]	; (80046f0 <pidInitFilters+0x520>)
 80045de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80045e2:	2300      	movs	r3, #0
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e023      	b.n	8004630 <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80045f6:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <pidInitFilters+0x508>)
 80045f8:	4413      	add	r3, r2
 80045fa:	1d1c      	adds	r4, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <pidInitFilters+0x508>)
 800460c:	ed93 7a00 	vldr	s14, [r3]
 8004610:	eef0 0a47 	vmov.f32	s1, s14
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	f7fc fe2e 	bl	8001278 <pt3FilterGain>
 800461c:	eef0 7a40 	vmov.f32	s15, s0
 8004620:	eeb0 0a67 	vmov.f32	s0, s15
 8004624:	4620      	mov	r0, r4
 8004626:	f7fc fe75 	bl	8001314 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3301      	adds	r3, #1
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b02      	cmp	r3, #2
 8004634:	ddd8      	ble.n	80045e8 <pidInitFilters+0x418>
            }
            break;
 8004636:	e008      	b.n	800464a <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004638:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <pidInitFilters+0x508>)
 800463a:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <pidInitFilters+0x518>)
 800463c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 8004640:	e003      	b.n	800464a <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <pidInitFilters+0x508>)
 8004644:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <pidInitFilters+0x518>)
 8004646:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8004652:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <pidInitFilters+0x508>)
 8004654:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <pidInitFilters+0x518>)
 8004656:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 800465a:	e019      	b.n	8004690 <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <pidInitFilters+0x508>)
 800465e:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <pidInitFilters+0x50c>)
 8004660:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <pidInitFilters+0x508>)
 8004672:	ed93 7a00 	vldr	s14, [r3]
 8004676:	eef0 0a47 	vmov.f32	s1, s14
 800467a:	eeb0 0a67 	vmov.f32	s0, s15
 800467e:	f7fc fb7b 	bl	8000d78 <pt1FilterGain>
 8004682:	eef0 7a40 	vmov.f32	s15, s0
 8004686:	eeb0 0a67 	vmov.f32	s0, s15
 800468a:	481a      	ldr	r0, [pc, #104]	; (80046f4 <pidInitFilters+0x524>)
 800468c:	f7fc fb9c 	bl	8000dc8 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <pidInitFilters+0x508>)
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	eef0 0a67 	vmov.f32	s1, s15
 800469a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800469e:	f7fc fb6b 	bl	8000d78 <pt1FilterGain>
 80046a2:	eef0 7a40 	vmov.f32	s15, s0
 80046a6:	eeb0 0a67 	vmov.f32	s0, s15
 80046aa:	4813      	ldr	r0, [pc, #76]	; (80046f8 <pidInitFilters+0x528>)
 80046ac:	f7fc fb8c 	bl	8000dc8 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <pidInitFilters+0x508>)
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eef0 0a67 	vmov.f32	s1, s15
 80046ba:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80046be:	f7fc fb5b 	bl	8000d78 <pt1FilterGain>
 80046c2:	eef0 7a40 	vmov.f32	s15, s0
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	480c      	ldr	r0, [pc, #48]	; (80046fc <pidInitFilters+0x52c>)
 80046cc:	f7fc fb7c 	bl	8000dc8 <pt1FilterInit>
}
 80046d0:	3744      	adds	r7, #68	; 0x44
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd90      	pop	{r4, r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20001080 	.word	0x20001080
 80046dc:	08000def 	.word	0x08000def
 80046e0:	08000ec5 	.word	0x08000ec5
 80046e4:	200012cc 	.word	0x200012cc
 80046e8:	08000d59 	.word	0x08000d59
 80046ec:	08001203 	.word	0x08001203
 80046f0:	0800134b 	.word	0x0800134b
 80046f4:	20001210 	.word	0x20001210
 80046f8:	2000121c 	.word	0x2000121c
 80046fc:	20001224 	.word	0x20001224

08004700 <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e069      	b.n	80047e2 <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	440b      	add	r3, r1
 800471c:	3308      	adds	r3, #8
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004728:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004a5c <pidInitConfig+0x35c>
 800472c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004730:	4acb      	ldr	r2, [pc, #812]	; (8004a60 <pidInitConfig+0x360>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	331c      	adds	r3, #28
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4613      	mov	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	440b      	add	r3, r1
 800474c:	3309      	adds	r3, #9
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	ee07 3a90 	vmov	s15, r3
 8004754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004758:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 8004a64 <pidInitConfig+0x364>
 800475c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004760:	4abf      	ldr	r2, [pc, #764]	; (8004a60 <pidInitConfig+0x360>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	331c      	adds	r3, #28
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	4413      	add	r3, r2
 800476a:	3304      	adds	r3, #4
 800476c:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	440b      	add	r3, r1
 800477e:	330a      	adds	r3, #10
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004a68 <pidInitConfig+0x368>
 800478e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004792:	4ab3      	ldr	r2, [pc, #716]	; (8004a60 <pidInitConfig+0x360>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800479e:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	440b      	add	r3, r1
 80047b0:	330c      	adds	r3, #12
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047bc:	eddf 6aab 	vldr	s13, [pc, #684]	; 8004a6c <pidInitConfig+0x36c>
 80047c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047c4:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004a70 <pidInitConfig+0x370>
 80047c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047cc:	4aa4      	ldr	r2, [pc, #656]	; (8004a60 <pidInitConfig+0x360>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80047d8:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	dd92      	ble.n	800470e <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 80047e8:	4b9d      	ldr	r3, [pc, #628]	; (8004a60 <pidInitConfig+0x360>)
 80047ea:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80047ee:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80047f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047f6:	4b9a      	ldr	r3, [pc, #616]	; (8004a60 <pidInitConfig+0x360>)
 80047f8:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7e9b      	ldrb	r3, [r3, #26]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004808:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800480c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004810:	4b93      	ldr	r3, [pc, #588]	; (8004a60 <pidInitConfig+0x360>)
 8004812:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7edb      	ldrb	r3, [r3, #27]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004822:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800482a:	4b8d      	ldr	r3, [pc, #564]	; (8004a60 <pidInitConfig+0x360>)
 800482c:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	7f1b      	ldrb	r3, [r3, #28]
 8004834:	ee07 3a90 	vmov	s15, r3
 8004838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483c:	4b88      	ldr	r3, [pc, #544]	; (8004a60 <pidInitConfig+0x360>)
 800483e:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004848:	4b85      	ldr	r3, [pc, #532]	; (8004a60 <pidInitConfig+0x360>)
 800484a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004854:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004860:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004a74 <pidInitConfig+0x374>
 8004864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004868:	4b7d      	ldr	r3, [pc, #500]	; (8004a60 <pidInitConfig+0x360>)
 800486a:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004874:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004880:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004a78 <pidInitConfig+0x378>
 8004884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004888:	4b75      	ldr	r3, [pc, #468]	; (8004a60 <pidInitConfig+0x360>)
 800488a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004892:	461a      	mov	r2, r3
 8004894:	2364      	movs	r3, #100	; 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048a2:	4b6f      	ldr	r3, [pc, #444]	; (8004a60 <pidInitConfig+0x360>)
 80048a4:	edd3 7a00 	vldr	s15, [r3]
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	4b6c      	ldr	r3, [pc, #432]	; (8004a60 <pidInitConfig+0x360>)
 80048ae:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 80048b2:	4b6b      	ldr	r3, [pc, #428]	; (8004a60 <pidInitConfig+0x360>)
 80048b4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80048b8:	4a69      	ldr	r2, [pc, #420]	; (8004a60 <pidInitConfig+0x360>)
 80048ba:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c2:	461a      	mov	r2, r3
 80048c4:	2364      	movs	r3, #100	; 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048d2:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <pidInitConfig+0x360>)
 80048d4:	edd3 7a00 	vldr	s15, [r3]
 80048d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048dc:	4b60      	ldr	r3, [pc, #384]	; (8004a60 <pidInitConfig+0x360>)
 80048de:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 80048e2:	4b5f      	ldr	r3, [pc, #380]	; (8004a60 <pidInitConfig+0x360>)
 80048e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80048f2:	2b63      	cmp	r3, #99	; 0x63
 80048f4:	d819      	bhi.n	800492a <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004904:	eddf 6a59 	vldr	s13, [pc, #356]	; 8004a6c <pidInitConfig+0x36c>
 8004908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490c:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 8004910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004914:	edd7 7a02 	vldr	s15, [r7, #8]
 8004918:	ee37 7a67 	vsub.f32	s14, s14, s15
 800491c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <pidInitConfig+0x360>)
 8004926:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800492e:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <pidInitConfig+0x360>)
 8004930:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800493a:	461a      	mov	r2, r3
 800493c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004940:	fb02 f303 	mul.w	r3, r2, r3
 8004944:	4a46      	ldr	r2, [pc, #280]	; (8004a60 <pidInitConfig+0x360>)
 8004946:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004950:	461a      	mov	r2, r3
 8004952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <pidInitConfig+0x360>)
 800495c:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004966:	461a      	mov	r2, r3
 8004968:	4613      	mov	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	461a      	mov	r2, r3
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <pidInitConfig+0x360>)
 8004974:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <pidInitConfig+0x360>)
 8004988:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <pidInitConfig+0x360>)
 800499a:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <pidInitConfig+0x360>)
 80049ac:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	4b28      	ldr	r3, [pc, #160]	; (8004a60 <pidInitConfig+0x360>)
 80049be:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d0:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <pidInitConfig+0x360>)
 80049d2:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	4b1e      	ldr	r3, [pc, #120]	; (8004a60 <pidInitConfig+0x360>)
 80049e6:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <pidInitConfig+0x360>)
 80049f2:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80049fc:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <pidInitConfig+0x360>)
 80049fe:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <pidInitConfig+0x360>)
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <pidInitConfig+0x360>)
 8004a0e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d116      	bne.n	8004a44 <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 8004a16:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <pidInitConfig+0x360>)
 8004a18:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <pidInitConfig+0x360>)
 8004a1e:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004a2a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004a7c <pidInitConfig+0x37c>
 8004a2e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004a32:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8004a36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3e:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <pidInitConfig+0x360>)
 8004a40:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <pidInitConfig+0x360>)
 8004a4c:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	3d0330d7 	.word	0x3d0330d7
 8004a60:	20001080 	.word	0x20001080
 8004a64:	3e7a3f03 	.word	0x3e7a3f03
 8004a68:	3a0aac97 	.word	0x3a0aac97
 8004a6c:	42c80000 	.word	0x42c80000
 8004a70:	3c615875 	.word	0x3c615875
 8004a74:	3fe66666 	.word	0x3fe66666
 8004a78:	3c23d70a 	.word	0x3c23d70a
 8004a7c:	447a0000 	.word	0x447a0000

08004a80 <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 8004a88:	2294      	movs	r2, #148	; 0x94
 8004a8a:	4907      	ldr	r1, [pc, #28]	; (8004aa8 <resetPidProfile+0x28>)
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f00e f9a8 	bl	8012de2 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	221e      	movs	r2, #30
 8004a96:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	741a      	strb	r2, [r3, #16]
}
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	08014424 	.word	0x08014424

08004aac <pidInit>:

void pidInit(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <pidInit+0xb8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff ffe2 	bl	8004a80 <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <pidInit+0xbc>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fb5b 	bl	800417c <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 8004ac6:	4b27      	ldr	r3, [pc, #156]	; (8004b64 <pidInit+0xb8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fb80 	bl	80041d0 <pidInitFilters>
    pidInitConfig(currentPidProfile);
 8004ad0:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <pidInit+0xb8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fe13 	bl	8004700 <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	e038      	b.n	8004b52 <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 8004ae0:	4922      	ldr	r1, [pc, #136]	; (8004b6c <pidInit+0xc0>)
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 8004af4:	491d      	ldr	r1, [pc, #116]	; (8004b6c <pidInit+0xc0>)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	3304      	adds	r3, #4
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 8004b0a:	4918      	ldr	r1, [pc, #96]	; (8004b6c <pidInit+0xc0>)
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3308      	adds	r3, #8
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 8004b20:	4912      	ldr	r1, [pc, #72]	; (8004b6c <pidInit+0xc0>)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	330c      	adds	r3, #12
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 8004b36:	490d      	ldr	r1, [pc, #52]	; (8004b6c <pidInit+0xc0>)
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	3310      	adds	r3, #16
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	ddc3      	ble.n	8004ae0 <pidInit+0x34>
    }
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000003c 	.word	0x2000003c
 8004b68:	200004a4 	.word	0x200004a4
 8004b6c:	200012dc 	.word	0x200012dc

08004b70 <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	; 0x28
 8004b74:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 8004b76:	4b35      	ldr	r3, [pc, #212]	; (8004c4c <rotateItermAndAxisError+0xdc>)
 8004b78:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d060      	beq.n	8004c42 <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 8004b80:	4b32      	ldr	r3, [pc, #200]	; (8004c4c <rotateItermAndAxisError+0xdc>)
 8004b82:	edd3 7a00 	vldr	s15, [r3]
 8004b86:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004c50 <rotateItermAndAxisError+0xe0>
 8004b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b8e:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
 8004b96:	e015      	b.n	8004bc4 <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 8004b98:	4a2e      	ldr	r2, [pc, #184]	; (8004c54 <rotateItermAndAxisError+0xe4>)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	3306      	adds	r3, #6
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	ed93 7a00 	vldr	s14, [r3]
 8004ba8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	3328      	adds	r3, #40	; 0x28
 8004bb6:	443b      	add	r3, r7
 8004bb8:	3b1c      	subs	r3, #28
 8004bba:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	dde6      	ble.n	8004b98 <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <rotateItermAndAxisError+0xdc>)
 8004bcc:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d036      	beq.n	8004c42 <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
 8004bd8:	e011      	b.n	8004bfe <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 8004bda:	491f      	ldr	r1, [pc, #124]	; (8004c58 <rotateItermAndAxisError+0xe8>)
 8004bdc:	6a3a      	ldr	r2, [r7, #32]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3304      	adds	r3, #4
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	3328      	adds	r3, #40	; 0x28
 8004bf2:	443b      	add	r3, r7
 8004bf4:	3b28      	subs	r3, #40	; 0x28
 8004bf6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	ddea      	ble.n	8004bda <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 8004c04:	f107 020c 	add.w	r2, r7, #12
 8004c08:	463b      	mov	r3, r7
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fc fdcb 	bl	80017a8 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	e011      	b.n	8004c3c <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	3328      	adds	r3, #40	; 0x28
 8004c1e:	443b      	add	r3, r7
 8004c20:	3b28      	subs	r3, #40	; 0x28
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <rotateItermAndAxisError+0xe8>)
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4403      	add	r3, r0
 8004c32:	3304      	adds	r3, #4
 8004c34:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	ddea      	ble.n	8004c18 <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 8004c42:	bf00      	nop
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20001080 	.word	0x20001080
 8004c50:	3c8efa35 	.word	0x3c8efa35
 8004c54:	200004a4 	.word	0x200004a4
 8004c58:	200012dc 	.word	0x200012dc

08004c5c <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 8004c64:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <getSetpointRate+0x24>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	ee07 3a90 	vmov	s15, r3
}
 8004c72:	eeb0 0a67 	vmov.f32	s0, s15
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	200012d0 	.word	0x200012d0

08004c84 <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 8004c90:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <accelerationLimit+0xb4>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	edd3 7a00 	vldr	s15, [r3]
 8004c9c:	ed97 7a00 	vldr	s14, [r7]
 8004ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca4:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 8004ca8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cac:	eeb0 7ae7 	vabs.f32	s14, s15
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <accelerationLimit+0xb8>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3382      	adds	r3, #130	; 0x82
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	edd3 7a00 	vldr	s15, [r3]
 8004cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	dd27      	ble.n	8004d18 <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 8004cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd4:	dd0f      	ble.n	8004cf6 <accelerationLimit+0x72>
 8004cd6:	4a18      	ldr	r2, [pc, #96]	; (8004d38 <accelerationLimit+0xb4>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	ed93 7a00 	vldr	s14, [r3]
 8004ce2:	4a16      	ldr	r2, [pc, #88]	; (8004d3c <accelerationLimit+0xb8>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3382      	adds	r3, #130	; 0x82
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	edd3 7a00 	vldr	s15, [r3]
 8004cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf4:	e00e      	b.n	8004d14 <accelerationLimit+0x90>
 8004cf6:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <accelerationLimit+0xb4>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	ed93 7a00 	vldr	s14, [r3]
 8004d02:	4a0e      	ldr	r2, [pc, #56]	; (8004d3c <accelerationLimit+0xb8>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3382      	adds	r3, #130	; 0x82
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	edd3 7a00 	vldr	s15, [r3]
 8004d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d14:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 8004d18:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <accelerationLimit+0xb4>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	ee07 3a90 	vmov	s15, r3
}
 8004d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	200013c4 	.word	0x200013c4
 8004d3c:	20001080 	.word	0x20001080

08004d40 <pidResetIterm>:

static void pidResetIterm(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e00d      	b.n	8004d68 <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8004d4c:	490b      	ldr	r1, [pc, #44]	; (8004d7c <pidResetIterm+0x3c>)
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3301      	adds	r3, #1
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	ddee      	ble.n	8004d4c <pidResetIterm+0xc>
    }
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	200012dc 	.word	0x200012dc

08004d80 <pidController>:

void pidController(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09c      	sub	sp, #112	; 0x70
 8004d84:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 8004d86:	4bbd      	ldr	r3, [pc, #756]	; (800507c <pidController+0x2fc>)
 8004d88:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8004d8c:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 8004d94:	4bb9      	ldr	r3, [pc, #740]	; (800507c <pidController+0x2fc>)
 8004d96:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d140      	bne.n	8004e20 <pidController+0xa0>
 8004d9e:	4bb7      	ldr	r3, [pc, #732]	; (800507c <pidController+0x2fc>)
 8004da0:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03b      	beq.n	8004e20 <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 8004da8:	4bb4      	ldr	r3, [pc, #720]	; (800507c <pidController+0x2fc>)
 8004daa:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8004dae:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8005080 <pidController+0x300>
 8004db2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004db6:	4bb1      	ldr	r3, [pc, #708]	; (800507c <pidController+0x2fc>)
 8004db8:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc8:	4bac      	ldr	r3, [pc, #688]	; (800507c <pidController+0x2fc>)
 8004dca:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 8004dce:	4bab      	ldr	r3, [pc, #684]	; (800507c <pidController+0x2fc>)
 8004dd0:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 8004dd4:	4ba9      	ldr	r3, [pc, #676]	; (800507c <pidController+0x2fc>)
 8004dd6:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	4ba5      	ldr	r3, [pc, #660]	; (800507c <pidController+0x2fc>)
 8004de8:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 8004dec:	4ba3      	ldr	r3, [pc, #652]	; (800507c <pidController+0x2fc>)
 8004dee:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 8004df2:	4ba2      	ldr	r3, [pc, #648]	; (800507c <pidController+0x2fc>)
 8004df4:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004df8:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8005084 <pidController+0x304>
 8004dfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e04:	4b9d      	ldr	r3, [pc, #628]	; (800507c <pidController+0x2fc>)
 8004e06:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 8004e0a:	4b9c      	ldr	r3, [pc, #624]	; (800507c <pidController+0x2fc>)
 8004e0c:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004e10:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005088 <pidController+0x308>
 8004e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e18:	4b98      	ldr	r3, [pc, #608]	; (800507c <pidController+0x2fc>)
 8004e1a:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 8004e1e:	e004      	b.n	8004e2a <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 8004e20:	4b96      	ldr	r3, [pc, #600]	; (800507c <pidController+0x2fc>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 8004e2a:	4b94      	ldr	r3, [pc, #592]	; (800507c <pidController+0x2fc>)
 8004e2c:	ed93 7a00 	vldr	s14, [r3]
 8004e30:	4b92      	ldr	r3, [pc, #584]	; (800507c <pidController+0x2fc>)
 8004e32:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800508c <pidController+0x30c>
 8004e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e42:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 8004e46:	4b8d      	ldr	r3, [pc, #564]	; (800507c <pidController+0x2fc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8004e4c:	4b8b      	ldr	r3, [pc, #556]	; (800507c <pidController+0x2fc>)
 8004e4e:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8004e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	dd1b      	ble.n	8004e98 <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 8004e60:	4b8b      	ldr	r3, [pc, #556]	; (8005090 <pidController+0x310>)
 8004e62:	edd3 7a00 	vldr	s15, [r3]
 8004e66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e6e:	4b83      	ldr	r3, [pc, #524]	; (800507c <pidController+0x2fc>)
 8004e70:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8004e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004e7c:	eddf 0a85 	vldr	s1, [pc, #532]	; 8005094 <pidController+0x314>
 8004e80:	eeb0 0a67 	vmov.f32	s0, s15
 8004e84:	f7ff f93c 	bl	8004100 <constrainf>
 8004e88:	eeb0 7a40 	vmov.f32	s14, s0
 8004e8c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e94:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004e98:	2300      	movs	r3, #0
 8004e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e9c:	e06e      	b.n	8004f7c <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	; (8005098 <pidController+0x318>)
 8004ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea2:	3306      	adds	r3, #6
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	3370      	adds	r3, #112	; 0x70
 8004eb2:	443b      	add	r3, r7
 8004eb4:	3b6c      	subs	r3, #108	; 0x6c
 8004eb6:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 8004eb8:	4b70      	ldr	r3, [pc, #448]	; (800507c <pidController+0x2fc>)
 8004eba:	6999      	ldr	r1, [r3, #24]
 8004ebc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	3318      	adds	r3, #24
 8004ec8:	4a6c      	ldr	r2, [pc, #432]	; (800507c <pidController+0x2fc>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	1d1a      	adds	r2, r3, #4
 8004ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	3370      	adds	r3, #112	; 0x70
 8004ed4:	443b      	add	r3, r7
 8004ed6:	3b6c      	subs	r3, #108	; 0x6c
 8004ed8:	edd3 7a00 	vldr	s15, [r3]
 8004edc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4788      	blx	r1
 8004ee4:	eef0 7a40 	vmov.f32	s15, s0
 8004ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	3370      	adds	r3, #112	; 0x70
 8004eee:	443b      	add	r3, r7
 8004ef0:	3b6c      	subs	r3, #108	; 0x6c
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 8004ef6:	4b61      	ldr	r3, [pc, #388]	; (800507c <pidController+0x2fc>)
 8004ef8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004efc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	3398      	adds	r3, #152	; 0x98
 8004f08:	4a5c      	ldr	r2, [pc, #368]	; (800507c <pidController+0x2fc>)
 8004f0a:	441a      	add	r2, r3
 8004f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3370      	adds	r3, #112	; 0x70
 8004f12:	443b      	add	r3, r7
 8004f14:	3b6c      	subs	r3, #108	; 0x6c
 8004f16:	edd3 7a00 	vldr	s15, [r3]
 8004f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4788      	blx	r1
 8004f22:	eef0 7a40 	vmov.f32	s15, s0
 8004f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3370      	adds	r3, #112	; 0x70
 8004f2c:	443b      	add	r3, r7
 8004f2e:	3b6c      	subs	r3, #108	; 0x6c
 8004f30:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 8004f34:	4b51      	ldr	r3, [pc, #324]	; (800507c <pidController+0x2fc>)
 8004f36:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8004f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004f48:	4a4c      	ldr	r2, [pc, #304]	; (800507c <pidController+0x2fc>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	3370      	adds	r3, #112	; 0x70
 8004f54:	443b      	add	r3, r7
 8004f56:	3b6c      	subs	r3, #108	; 0x6c
 8004f58:	edd3 7a00 	vldr	s15, [r3]
 8004f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f60:	4610      	mov	r0, r2
 8004f62:	4788      	blx	r1
 8004f64:	eef0 7a40 	vmov.f32	s15, s0
 8004f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	3370      	adds	r3, #112	; 0x70
 8004f6e:	443b      	add	r3, r7
 8004f70:	3b6c      	subs	r3, #108	; 0x6c
 8004f72:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f78:	3301      	adds	r3, #1
 8004f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	dd8d      	ble.n	8004e9e <pidController+0x11e>
    }

    rotateItermAndAxisError();
 8004f82:	f7ff fdf5 	bl	8004b70 <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004f86:	2300      	movs	r3, #0
 8004f88:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8a:	e1e4      	b.n	8005356 <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 8004f8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004f8e:	f7ff fe65 	bl	8004c5c <getSetpointRate>
 8004f92:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 8004f96:	4a39      	ldr	r2, [pc, #228]	; (800507c <pidController+0x2fc>)
 8004f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9a:	3382      	adds	r3, #130	; 0x82
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	edd3 7a00 	vldr	s15, [r3]
 8004fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	d006      	beq.n	8004fbc <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 8004fae:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004fb2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004fb4:	f7ff fe66 	bl	8004c84 <accelerationLimit>
 8004fb8:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 8004fbc:	4a36      	ldr	r2, [pc, #216]	; (8005098 <pidController+0x318>)
 8004fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc0:	3306      	adds	r3, #6
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 8004fcc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004fd0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fd8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 8004fdc:	492f      	ldr	r1, [pc, #188]	; (800509c <pidController+0x31c>)
 8004fde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3304      	adds	r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 8004ff4:	4a21      	ldr	r2, [pc, #132]	; (800507c <pidController+0x2fc>)
 8004ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff8:	331c      	adds	r3, #28
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	4413      	add	r3, r2
 8004ffe:	ed93 7a00 	vldr	s14, [r3]
 8005002:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800500a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800500e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005012:	4922      	ldr	r1, [pc, #136]	; (800509c <pidController+0x31c>)
 8005014:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 8005024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005026:	2b02      	cmp	r3, #2
 8005028:	d11a      	bne.n	8005060 <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <pidController+0x2fc>)
 800502c:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8005030:	481a      	ldr	r0, [pc, #104]	; (800509c <pidController+0x31c>)
 8005032:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4403      	add	r3, r0
 800503e:	edd3 7a00 	vldr	s15, [r3]
 8005042:	eeb0 0a67 	vmov.f32	s0, s15
 8005046:	4816      	ldr	r0, [pc, #88]	; (80050a0 <pidController+0x320>)
 8005048:	4788      	blx	r1
 800504a:	eef0 7a40 	vmov.f32	s15, s0
 800504e:	4913      	ldr	r1, [pc, #76]	; (800509c <pidController+0x31c>)
 8005050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 8005060:	4a06      	ldr	r2, [pc, #24]	; (800507c <pidController+0x2fc>)
 8005062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005064:	331c      	adds	r3, #28
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 8005070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005072:	2b02      	cmp	r3, #2
 8005074:	d016      	beq.n	80050a4 <pidController+0x324>
 8005076:	4b01      	ldr	r3, [pc, #4]	; (800507c <pidController+0x2fc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	e014      	b.n	80050a6 <pidController+0x326>
 800507c:	20001080 	.word	0x20001080
 8005080:	3c23d70a 	.word	0x3c23d70a
 8005084:	3d4ccccd 	.word	0x3d4ccccd
 8005088:	3ca3d70a 	.word	0x3ca3d70a
 800508c:	41acb227 	.word	0x41acb227
 8005090:	20001318 	.word	0x20001318
 8005094:	00000000 	.word	0x00000000
 8005098:	200004a4 	.word	0x200004a4
 800509c:	200012dc 	.word	0x200012dc
 80050a0:	20001210 	.word	0x20001210
 80050a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 80050a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80050ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80050b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80050b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050bc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80050c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80050c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050cc:	4baa      	ldr	r3, [pc, #680]	; (8005378 <pidController+0x5f8>)
 80050ce:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 80050d2:	eef1 7a67 	vneg.f32	s15, s15
 80050d6:	4ba8      	ldr	r3, [pc, #672]	; (8005378 <pidController+0x5f8>)
 80050d8:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 80050dc:	eeb0 1a66 	vmov.f32	s2, s13
 80050e0:	eef0 0a67 	vmov.f32	s1, s15
 80050e4:	eeb0 0a47 	vmov.f32	s0, s14
 80050e8:	f7ff f80a 	bl	8004100 <constrainf>
 80050ec:	eef0 7a40 	vmov.f32	s15, s0
 80050f0:	49a2      	ldr	r1, [pc, #648]	; (800537c <pidController+0x5fc>)
 80050f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	3304      	adds	r3, #4
 8005100:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 800510a:	4a9b      	ldr	r2, [pc, #620]	; (8005378 <pidController+0x5f8>)
 800510c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800510e:	3302      	adds	r3, #2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	3304      	adds	r3, #4
 8005116:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005118:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 800511a:	4a97      	ldr	r2, [pc, #604]	; (8005378 <pidController+0x5f8>)
 800511c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005126:	edd3 7a00 	vldr	s15, [r3]
 800512a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005132:	dd43      	ble.n	80051bc <pidController+0x43c>
 8005134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005138:	2b00      	cmp	r3, #0
 800513a:	d13f      	bne.n	80051bc <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 800513c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3370      	adds	r3, #112	; 0x70
 8005142:	443b      	add	r3, r7
 8005144:	3b6c      	subs	r3, #108	; 0x6c
 8005146:	ed93 7a00 	vldr	s14, [r3]
 800514a:	4a8d      	ldr	r2, [pc, #564]	; (8005380 <pidController+0x600>)
 800514c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	edd3 7a00 	vldr	s15, [r3]
 8005156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800515a:	eeb1 7a67 	vneg.f32	s14, s15
 800515e:	4b86      	ldr	r3, [pc, #536]	; (8005378 <pidController+0x5f8>)
 8005160:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 8005164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005168:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 800516c:	4a82      	ldr	r2, [pc, #520]	; (8005378 <pidController+0x5f8>)
 800516e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	4413      	add	r3, r2
 8005174:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005178:	edd3 7a00 	vldr	s15, [r3]
 800517c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005184:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 8005188:	4b7b      	ldr	r3, [pc, #492]	; (8005378 <pidController+0x5f8>)
 800518a:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 800518e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	4979      	ldr	r1, [pc, #484]	; (800537c <pidController+0x5fc>)
 8005198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3308      	adds	r3, #8
 80051a6:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 80051aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80051ae:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 80051b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051b6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 80051ba:	e00a      	b.n	80051d2 <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 80051bc:	496f      	ldr	r1, [pc, #444]	; (800537c <pidController+0x5fc>)
 80051be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3308      	adds	r3, #8
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 80051d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	3370      	adds	r3, #112	; 0x70
 80051d8:	443b      	add	r3, r7
 80051da:	3b6c      	subs	r3, #108	; 0x6c
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4968      	ldr	r1, [pc, #416]	; (8005380 <pidController+0x600>)
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 80051e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <pidController+0x480>
 80051f0:	4a61      	ldr	r2, [pc, #388]	; (8005378 <pidController+0x5f8>)
 80051f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	e001      	b.n	8005204 <pidController+0x484>
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 8005206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800520a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800520e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005212:	dd17      	ble.n	8005244 <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 8005214:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005218:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800521c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005220:	4b55      	ldr	r3, [pc, #340]	; (8005378 <pidController+0x5f8>)
 8005222:	edd3 7a01 	vldr	s15, [r3, #4]
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 800522e:	4953      	ldr	r1, [pc, #332]	; (800537c <pidController+0x5fc>)
 8005230:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	330c      	adds	r3, #12
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e00a      	b.n	800525a <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 8005244:	494d      	ldr	r1, [pc, #308]	; (800537c <pidController+0x5fc>)
 8005246:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	330c      	adds	r3, #12
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 800525a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800525e:	eeb0 7ae7 	vabs.f32	s14, s15
 8005262:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005384 <pidController+0x604>
 8005266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800526a:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	ed97 7a07 	vldr	s14, [r7, #28]
 800527c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	dd01      	ble.n	800528e <pidController+0x50e>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	e000      	b.n	8005290 <pidController+0x510>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 8005292:	4b39      	ldr	r3, [pc, #228]	; (8005378 <pidController+0x5f8>)
 8005294:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 8005298:	ed97 7a08 	vldr	s14, [r7, #32]
 800529c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052a8:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 80052ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d015      	beq.n	80052de <pidController+0x55e>
            pidData[axis].P *= agBoost;
 80052b2:	4932      	ldr	r1, [pc, #200]	; (800537c <pidController+0x5fc>)
 80052b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	ed93 7a00 	vldr	s14, [r3]
 80052c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80052c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052cc:	492b      	ldr	r1, [pc, #172]	; (800537c <pidController+0x5fc>)
 80052ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 80052de:	4927      	ldr	r1, [pc, #156]	; (800537c <pidController+0x5fc>)
 80052e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	ed93 7a00 	vldr	s14, [r3]
 80052f0:	4922      	ldr	r1, [pc, #136]	; (800537c <pidController+0x5fc>)
 80052f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	3304      	adds	r3, #4
 8005300:	edd3 7a00 	vldr	s15, [r3]
 8005304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005308:	491c      	ldr	r1, [pc, #112]	; (800537c <pidController+0x5fc>)
 800530a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	3308      	adds	r3, #8
 8005318:	edd3 7a00 	vldr	s15, [r3]
 800531c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005320:	4916      	ldr	r1, [pc, #88]	; (800537c <pidController+0x5fc>)
 8005322:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	330c      	adds	r3, #12
 8005330:	edd3 7a00 	vldr	s15, [r3]
 8005334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005338:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 800533c:	490f      	ldr	r1, [pc, #60]	; (800537c <pidController+0x5fc>)
 800533e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005340:	4613      	mov	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	3310      	adds	r3, #16
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005352:	3301      	adds	r3, #1
 8005354:	667b      	str	r3, [r7, #100]	; 0x64
 8005356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005358:	2b02      	cmp	r3, #2
 800535a:	f77f ae17 	ble.w	8004f8c <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <pidController+0x5f8>)
 8005360:	7a1b      	ldrb	r3, [r3, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <pidController+0x5f0>
 8005366:	f7fd f889 	bl	800247c <gyroOverflowDetected>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d048      	beq.n	8005402 <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005370:	2300      	movs	r3, #0
 8005372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005374:	e041      	b.n	80053fa <pidController+0x67a>
 8005376:	bf00      	nop
 8005378:	20001080 	.word	0x20001080
 800537c:	200012dc 	.word	0x200012dc
 8005380:	200013d0 	.word	0x200013d0
 8005384:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 8005388:	4924      	ldr	r1, [pc, #144]	; (800541c <pidController+0x69c>)
 800538a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 800539c:	491f      	ldr	r1, [pc, #124]	; (800541c <pidController+0x69c>)
 800539e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053a0:	4613      	mov	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3304      	adds	r3, #4
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 80053b2:	491a      	ldr	r1, [pc, #104]	; (800541c <pidController+0x69c>)
 80053b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3308      	adds	r3, #8
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 80053c8:	4914      	ldr	r1, [pc, #80]	; (800541c <pidController+0x69c>)
 80053ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	330c      	adds	r3, #12
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 80053de:	490f      	ldr	r1, [pc, #60]	; (800541c <pidController+0x69c>)
 80053e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	3310      	adds	r3, #16
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80053f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f6:	3301      	adds	r3, #1
 80053f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	ddc3      	ble.n	8005388 <pidController+0x608>
 8005400:	e007      	b.n	8005412 <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <pidController+0x6a0>)
 8005404:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <pidController+0x692>
        pidResetIterm();
 800540c:	f7ff fc98 	bl	8004d40 <pidResetIterm>
    }
}
 8005410:	e7ff      	b.n	8005412 <pidController+0x692>
 8005412:	bf00      	nop
 8005414:	3770      	adds	r7, #112	; 0x70
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200012dc 	.word	0x200012dc
 8005420:	20001080 	.word	0x20001080

08005424 <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <pidSetItermAccelerator+0x20>)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20001080 	.word	0x20001080

08005448 <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	4a35      	ldr	r2, [pc, #212]	; (800552c <checkForThrottleErrorResetState+0xe4>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	099b      	lsrs	r3, r3, #6
 800545c:	b29b      	uxth	r3, r3
 800545e:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 8005460:	2264      	movs	r2, #100	; 0x64
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	fb92 f3f3 	sdiv	r3, r2, r3
 8005468:	2214      	movs	r2, #20
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fe2e 	bl	80040ce <constrain>
 8005472:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <checkForThrottleErrorResetState+0xe8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800547a:	085b      	lsrs	r3, r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8005480:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <checkForThrottleErrorResetState+0xec>)
 8005482:	edd3 7a03 	vldr	s15, [r3, #12]
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <checkForThrottleErrorResetState+0xf0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	492a      	ldr	r1, [pc, #168]	; (8005538 <checkForThrottleErrorResetState+0xf0>)
 800548e:	600a      	str	r2, [r1, #0]
 8005490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005494:	ee17 2a90 	vmov	r2, s15
 8005498:	b211      	sxth	r1, r2
 800549a:	4a28      	ldr	r2, [pc, #160]	; (800553c <checkForThrottleErrorResetState+0xf4>)
 800549c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <checkForThrottleErrorResetState+0xf0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	dc02      	bgt.n	80054b0 <checkForThrottleErrorResetState+0x68>
        index = 0;
 80054aa:	4b23      	ldr	r3, [pc, #140]	; (8005538 <checkForThrottleErrorResetState+0xf0>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <checkForThrottleErrorResetState+0xec>)
 80054b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <checkForThrottleErrorResetState+0xf0>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a20      	ldr	r2, [pc, #128]	; (800553c <checkForThrottleErrorResetState+0xf4>)
 80054bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054d0:	ee17 3a90 	vmov	r3, s15
 80054d4:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 80054d6:	4b16      	ldr	r3, [pc, #88]	; (8005530 <checkForThrottleErrorResetState+0xe8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d120      	bne.n	8005524 <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 80054e2:	89bb      	ldrh	r3, [r7, #12]
 80054e4:	817b      	strh	r3, [r7, #10]
 80054e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfb8      	it	lt
 80054ee:	425b      	neglt	r3, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	dd0f      	ble.n	800551c <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <checkForThrottleErrorResetState+0xe8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005540 <checkForThrottleErrorResetState+0xf8>
 800550e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005512:	eeb0 0a67 	vmov.f32	s0, s15
 8005516:	f7ff ff85 	bl	8005424 <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 800551a:	e003      	b.n	8005524 <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 800551c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005544 <checkForThrottleErrorResetState+0xfc>
 8005520:	f7ff ff80 	bl	8005424 <pidSetItermAccelerator>
}
 8005524:	bf00      	nop
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	10624dd3 	.word	0x10624dd3
 8005530:	2000003c 	.word	0x2000003c
 8005534:	2000131c 	.word	0x2000131c
 8005538:	200013dc 	.word	0x200013dc
 800553c:	200013e0 	.word	0x200013e0
 8005540:	3a83126f 	.word	0x3a83126f
 8005544:	00000000 	.word	0x00000000

08005548 <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	ed87 0a02 	vstr	s0, [r7, #8]
 8005554:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 8005558:	4b40      	ldr	r3, [pc, #256]	; (800565c <applyActualRates+0x114>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	3306      	adds	r3, #6
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800556c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005660 <applyActualRates+0x118>
 8005570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005574:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 8005578:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800557c:	ed97 0a02 	vldr	s0, [r7, #8]
 8005580:	f00e fc16 	bl	8013db0 <powf>
 8005584:	eeb0 7a40 	vmov.f32	s14, s0
 8005588:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800558c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005594:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005598:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800559c:	edd7 7a02 	vldr	s15, [r7, #8]
 80055a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80055ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 80055b4:	4b29      	ldr	r3, [pc, #164]	; (800565c <applyActualRates+0x114>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	3303      	adds	r3, #3
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055d0:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	4b20      	ldr	r3, [pc, #128]	; (800565c <applyActualRates+0x114>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	3309      	adds	r3, #9
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80055f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80055f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055fc:	edc7 7a06 	vstr	s15, [r7, #24]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800560a:	ed97 7a06 	vldr	s14, [r7, #24]
 800560e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005616:	d505      	bpl.n	8005624 <applyActualRates+0xdc>
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005622:	e001      	b.n	8005628 <applyActualRates+0xe0>
 8005624:	edd7 7a06 	vldr	s15, [r7, #24]
 8005628:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 800562c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005630:	edd7 7a08 	vldr	s15, [r7, #32]
 8005634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005638:	edd7 6a05 	vldr	s13, [r7, #20]
 800563c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005648:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	ee07 3a90 	vmov	s15, r3
}
 8005652:	eeb0 0a67 	vmov.f32	s0, s15
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	2000004c 	.word	0x2000004c
 8005660:	42c80000 	.word	0x42c80000

08005664 <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <scaleRawSetpointToFpvCamAngle+0x90>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8005670:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005676:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <scaleRawSetpointToFpvCamAngle+0x94>)
 8005678:	ed93 7a00 	vldr	s14, [r3]
 800567c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005684:	4b1d      	ldr	r3, [pc, #116]	; (80056fc <scaleRawSetpointToFpvCamAngle+0x98>)
 8005686:	edd3 6a00 	vldr	s13, [r3]
 800568a:	edd7 7a00 	vldr	s15, [r7]
 800568e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005696:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005700 <scaleRawSetpointToFpvCamAngle+0x9c>
 800569a:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005704 <scaleRawSetpointToFpvCamAngle+0xa0>
 800569e:	eeb0 0a67 	vmov.f32	s0, s15
 80056a2:	f7fe fd2d 	bl	8004100 <constrainf>
 80056a6:	eef0 7a40 	vmov.f32	s15, s0
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <scaleRawSetpointToFpvCamAngle+0x90>)
 80056ac:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <scaleRawSetpointToFpvCamAngle+0x94>)
 80056b2:	ed93 7a00 	vldr	s14, [r3]
 80056b6:	edd7 7a00 	vldr	s15, [r7]
 80056ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <scaleRawSetpointToFpvCamAngle+0x98>)
 80056c0:	edd3 6a00 	vldr	s13, [r3]
 80056c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80056c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056d0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8005700 <scaleRawSetpointToFpvCamAngle+0x9c>
 80056d4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8005704 <scaleRawSetpointToFpvCamAngle+0xa0>
 80056d8:	eeb0 0a67 	vmov.f32	s0, s15
 80056dc:	f7fe fd10 	bl	8004100 <constrainf>
 80056e0:	eef0 7a40 	vmov.f32	s15, s0
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <scaleRawSetpointToFpvCamAngle+0x90>)
 80056e6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80056ea:	bf00      	nop
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200012d0 	.word	0x200012d0
 80056f8:	20000054 	.word	0x20000054
 80056fc:	20001408 	.word	0x20001408
 8005700:	44f9c000 	.word	0x44f9c000
 8005704:	c4f9c000 	.word	0xc4f9c000

08005708 <resetYawAxis>:

static void resetYawAxis(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <resetYawAxis+0x20>)
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <resetYawAxis+0x24>)
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	609a      	str	r2, [r3, #8]
}
 800571c:	bf00      	nop
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	2000131c 	.word	0x2000131c
 800572c:	20001374 	.word	0x20001374

08005730 <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <pidIncUpdateCounter+0x38>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	4a0c      	ldr	r2, [pc, #48]	; (800576c <pidIncUpdateCounter+0x3c>)
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005740:	fb01 f202 	mul.w	r2, r1, r2
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <pidIncUpdateCounter+0x38>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <pidIncUpdateCounter+0x38>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	b2da      	uxtb	r2, r3
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <pidIncUpdateCounter+0x38>)
 800575c:	701a      	strb	r2, [r3, #0]
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	20000fe8 	.word	0x20000fe8
 800576c:	20000000 	.word	0x20000000

08005770 <processRcCommand>:


void processRcCommand(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 8005776:	f7fe fcec 	bl	8004152 <isUsingSticksForArming>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <processRcCommand+0x28>
 8005780:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <processRcCommand+0x144>)
 8005782:	edd3 7a03 	vldr	s15, [r3, #12]
 8005786:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80058b8 <processRcCommand+0x148>
 800578a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005792:	d801      	bhi.n	8005798 <processRcCommand+0x28>
        resetYawAxis();
 8005794:	f7ff ffb8 	bl	8005708 <resetYawAxis>
    }

    if (isRxDataNew) {
 8005798:	4b48      	ldr	r3, [pc, #288]	; (80058bc <processRcCommand+0x14c>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <processRcCommand+0x36>
        newRxDataForFF = true;
 80057a0:	4b47      	ldr	r3, [pc, #284]	; (80058c0 <processRcCommand+0x150>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 80057a6:	4b45      	ldr	r3, [pc, #276]	; (80058bc <processRcCommand+0x14c>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <processRcCommand+0x52>
 80057ae:	f7fe fcd9 	bl	8004164 <pidAntiGravityEnabled>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 80057b8:	4b42      	ldr	r3, [pc, #264]	; (80058c4 <processRcCommand+0x154>)
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fe43 	bl	8005448 <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 80057c2:	4b3e      	ldr	r3, [pc, #248]	; (80058bc <processRcCommand+0x14c>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d06c      	beq.n	80058a4 <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e064      	b.n	800589a <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d10d      	bne.n	80057f2 <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 80057d6:	4a3c      	ldr	r2, [pc, #240]	; (80058c8 <processRcCommand+0x158>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	edd3 6a00 	vldr	s13, [r3]
 80057e2:	4b3a      	ldr	r3, [pc, #232]	; (80058cc <processRcCommand+0x15c>)
 80057e4:	ed93 7a00 	vldr	s14, [r3]
 80057e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ec:	edc7 7a02 	vstr	s15, [r7, #8]
 80057f0:	e00c      	b.n	800580c <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 80057f2:	4a35      	ldr	r2, [pc, #212]	; (80058c8 <processRcCommand+0x158>)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	edd3 6a00 	vldr	s13, [r3]
 80057fe:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <processRcCommand+0x160>)
 8005800:	ed93 7a00 	vldr	s14, [r3]
 8005804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005808:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 800580c:	4a31      	ldr	r2, [pc, #196]	; (80058d4 <processRcCommand+0x164>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 8005818:	edd7 7a02 	vldr	s15, [r7, #8]
 800581c:	eef0 7ae7 	vabs.f32	s15, s15
 8005820:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 8005824:	4a2c      	ldr	r2, [pc, #176]	; (80058d8 <processRcCommand+0x168>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 8005830:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <processRcCommand+0x16c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	edd7 0a01 	vldr	s1, [r7, #4]
 8005838:	ed97 0a02 	vldr	s0, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	4798      	blx	r3
 8005840:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 8005844:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <processRcCommand+0x170>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3308      	adds	r3, #8
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	885b      	ldrh	r3, [r3, #2]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800585a:	eef1 7a67 	vneg.f32	s15, s15
 800585e:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <processRcCommand+0x170>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3308      	adds	r3, #8
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	885b      	ldrh	r3, [r3, #2]
 800586c:	ee07 3a10 	vmov	s14, r3
 8005870:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005874:	eeb0 1a47 	vmov.f32	s2, s14
 8005878:	eef0 0a67 	vmov.f32	s1, s15
 800587c:	ed97 0a00 	vldr	s0, [r7]
 8005880:	f7fe fc3e 	bl	8004100 <constrainf>
 8005884:	eef0 7a40 	vmov.f32	s15, s0
 8005888:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <processRcCommand+0x174>)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b02      	cmp	r3, #2
 800589e:	dd97      	ble.n	80057d0 <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 80058a0:	f7ff fee0 	bl	8005664 <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <processRcCommand+0x14c>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	701a      	strb	r2, [r3, #0]
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	2000132c 	.word	0x2000132c
 80058b8:	44834000 	.word	0x44834000
 80058bc:	20001398 	.word	0x20001398
 80058c0:	20001399 	.word	0x20001399
 80058c4:	20000048 	.word	0x20000048
 80058c8:	2000131c 	.word	0x2000131c
 80058cc:	20000044 	.word	0x20000044
 80058d0:	20000040 	.word	0x20000040
 80058d4:	20001380 	.word	0x20001380
 80058d8:	2000138c 	.word	0x2000138c
 80058dc:	20000050 	.word	0x20000050
 80058e0:	2000004c 	.word	0x2000004c
 80058e4:	200012d0 	.word	0x200012d0

080058e8 <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005900:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005904:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005908:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800596c <buildRotationMatrixFromAlignment+0x84>
 800590c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005910:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005922:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800592a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800596c <buildRotationMatrixFromAlignment+0x84>
 800592e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005932:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005944:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800594c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800596c <buildRotationMatrixFromAlignment+0x84>
 8005950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005954:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7fb ff8c 	bl	800187c <buildRotationMatrix>
}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	3c8efa35 	.word	0x3c8efa35

08005970 <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b09      	cmp	r3, #9
 8005980:	d03f      	beq.n	8005a02 <buildAlignmentFromStandardAlignment+0x92>
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d03c      	beq.n	8005a02 <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	3b01      	subs	r3, #1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	b25a      	sxtb	r2, r3
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	3b01      	subs	r3, #1
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	b25b      	sxtb	r3, r3
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	4313      	orrs	r3, r2
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 80059aa:	2206      	movs	r2, #6
 80059ac:	2100      	movs	r1, #0
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f00d fa25 	bl	8012dfe <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e01f      	b.n	80059fa <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 80059ba:	7afa      	ldrb	r2, [r7, #11]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f1c3 0302 	rsb	r3, r3, #2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2103      	movs	r1, #3
 80059c6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ca:	401a      	ands	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f1c3 0302 	rsb	r3, r3, #2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa42 f303 	asr.w	r3, r2, r3
 80059d8:	b29b      	uxth	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	0112      	lsls	r2, r2, #4
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	b219      	sxth	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	dddc      	ble.n	80059ba <buildAlignmentFromStandardAlignment+0x4a>
 8005a00:	e000      	b.n	8005a04 <buildAlignmentFromStandardAlignment+0x94>
        return;
 8005a02:	bf00      	nop
    }
}
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	3b02      	subs	r3, #2
 8005a2e:	2b06      	cmp	r3, #6
 8005a30:	d810      	bhi.n	8005a54 <alignSensorViaRotation+0x48>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <alignSensorViaRotation+0x2c>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005a8d 	.word	0x08005a8d
 8005a40:	08005ab5 	.word	0x08005ab5
 8005a44:	08005ad5 	.word	0x08005ad5
 8005a48:	08005afd 	.word	0x08005afd
 8005a4c:	08005b1d 	.word	0x08005b1d
 8005a50:	08005b45 	.word	0x08005b45
    default:
    case CW0_DEG:
        dest[X] = x;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	3308      	adds	r3, #8
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]
        break;
 8005a6a:	e083      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a7a:	eef1 7a67 	vneg.f32	s15, s15
 8005a7e:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3308      	adds	r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	601a      	str	r2, [r3, #0]
        break;
 8005a8a:	e073      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 8005a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a90:	eef1 7a67 	vneg.f32	s15, s15
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005aa2:	eef1 7a67 	vneg.f32	s15, s15
 8005aa6:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	3308      	adds	r3, #8
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]
        break;
 8005ab2:	e05f      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 8005ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ab8:	eef1 7a67 	vneg.f32	s15, s15
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3308      	adds	r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	601a      	str	r2, [r3, #0]
        break;
 8005ad2:	e04f      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 8005ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ad8:	eef1 7a67 	vneg.f32	s15, s15
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3308      	adds	r3, #8
 8005aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8005af2:	eef1 7a67 	vneg.f32	s15, s15
 8005af6:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005afa:	e03b      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b12:	eef1 7a67 	vneg.f32	s15, s15
 8005b16:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005b1a:	e02b      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3304      	adds	r3, #4
 8005b26:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b2a:	eef1 7a67 	vneg.f32	s15, s15
 8005b2e:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3308      	adds	r3, #8
 8005b36:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b3a:	eef1 7a67 	vneg.f32	s15, s15
 8005b3e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005b42:	e017      	b.n	8005b74 <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 8005b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b48:	eef1 7a67 	vneg.f32	s15, s15
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b5a:	eef1 7a67 	vneg.f32	s15, s15
 8005b5e:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3308      	adds	r3, #8
 8005b66:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b6a:	eef1 7a67 	vneg.f32	s15, s15
 8005b6e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005b72:	bf00      	nop
    }
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <HAL_MspInit+0x4c>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <HAL_MspInit+0x4c>)
 8005b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b90:	6413      	str	r3, [r2, #64]	; 0x40
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <HAL_MspInit+0x4c>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	607b      	str	r3, [r7, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_MspInit+0x4c>)
 8005ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <HAL_MspInit+0x4c>)
 8005ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_MspInit+0x4c>)
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	210f      	movs	r1, #15
 8005bba:	f06f 0001 	mvn.w	r0, #1
 8005bbe:	f005 fded 	bl	800b79c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800

08005bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b0ae      	sub	sp, #184	; 0xb8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	609a      	str	r2, [r3, #8]
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	2290      	movs	r2, #144	; 0x90
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f00d f904 	bl	8012dfe <memset>
  if(huart->Instance==USART3)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a22      	ldr	r2, [pc, #136]	; (8005c84 <HAL_UART_MspInit+0xb4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d13c      	bne.n	8005c7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005c06:	2300      	movs	r3, #0
 8005c08:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c0a:	f107 0314 	add.w	r3, r7, #20
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f007 fdbc 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c1a:	f7fe fa53 	bl	80040c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <HAL_UART_MspInit+0xb8>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <HAL_UART_MspInit+0xb8>)
 8005c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c28:	6413      	str	r3, [r2, #64]	; 0x40
 8005c2a:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <HAL_UART_MspInit+0xb8>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c36:	4b14      	ldr	r3, [pc, #80]	; (8005c88 <HAL_UART_MspInit+0xb8>)
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	4a13      	ldr	r2, [pc, #76]	; (8005c88 <HAL_UART_MspInit+0xb8>)
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	6313      	str	r3, [r2, #48]	; 0x30
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <HAL_UART_MspInit+0xb8>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005c4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c56:	2302      	movs	r3, #2
 8005c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c62:	2303      	movs	r3, #3
 8005c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c68:	2307      	movs	r3, #7
 8005c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4805      	ldr	r0, [pc, #20]	; (8005c8c <HAL_UART_MspInit+0xbc>)
 8005c76:	f005 fdbb 	bl	800b7f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c7a:	bf00      	nop
 8005c7c:	37b8      	adds	r7, #184	; 0xb8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40004800 	.word	0x40004800
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	40020c00 	.word	0x40020c00

08005c90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b0ae      	sub	sp, #184	; 0xb8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	2290      	movs	r2, #144	; 0x90
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f00d f8a4 	bl	8012dfe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cbe:	d159      	bne.n	8005d74 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8005cc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cc4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f007 fd5b 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8005cdc:	f7fe f9f2 	bl	80040c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce0:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	4a25      	ldr	r2, [pc, #148]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6313      	str	r3, [r2, #48]	; 0x30
 8005cec:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005cf8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d00:	2302      	movs	r3, #2
 8005d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005d12:	230a      	movs	r3, #10
 8005d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4818      	ldr	r0, [pc, #96]	; (8005d80 <HAL_PCD_MspInit+0xf0>)
 8005d20:	f005 fd66 	bl	800b7f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005d38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4810      	ldr	r0, [pc, #64]	; (8005d80 <HAL_PCD_MspInit+0xf0>)
 8005d40:	f005 fd56 	bl	800b7f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d48:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	6353      	str	r3, [r2, #52]	; 0x34
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	4a06      	ldr	r2, [pc, #24]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d66:	6453      	str	r3, [r2, #68]	; 0x44
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <HAL_PCD_MspInit+0xec>)
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005d74:	bf00      	nop
 8005d76:	37b8      	adds	r7, #184	; 0xb8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	40020000 	.word	0x40020000

08005d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08c      	sub	sp, #48	; 0x30
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005d94:	4b2e      	ldr	r3, [pc, #184]	; (8005e50 <HAL_InitTick+0xcc>)
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <HAL_InitTick+0xcc>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_InitTick+0xcc>)
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005dac:	f107 020c 	add.w	r2, r7, #12
 8005db0:	f107 0310 	add.w	r3, r7, #16
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f007 fcb6 	bl	800d728 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005dbc:	f007 fca0 	bl	800d700 <HAL_RCC_GetPCLK2Freq>
 8005dc0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	4a23      	ldr	r2, [pc, #140]	; (8005e54 <HAL_InitTick+0xd0>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	0c9b      	lsrs	r3, r3, #18
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <HAL_InitTick+0xd4>)
 8005dd2:	4a22      	ldr	r2, [pc, #136]	; (8005e5c <HAL_InitTick+0xd8>)
 8005dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005dd6:	4b20      	ldr	r3, [pc, #128]	; (8005e58 <HAL_InitTick+0xd4>)
 8005dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005dde:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <HAL_InitTick+0xd4>)
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005de4:	4b1c      	ldr	r3, [pc, #112]	; (8005e58 <HAL_InitTick+0xd4>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dea:	4b1b      	ldr	r3, [pc, #108]	; (8005e58 <HAL_InitTick+0xd4>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005df0:	4b19      	ldr	r3, [pc, #100]	; (8005e58 <HAL_InitTick+0xd4>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005df6:	4818      	ldr	r0, [pc, #96]	; (8005e58 <HAL_InitTick+0xd4>)
 8005df8:	f008 f8f0 	bl	800dfdc <HAL_TIM_Base_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11b      	bne.n	8005e42 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005e0a:	4813      	ldr	r0, [pc, #76]	; (8005e58 <HAL_InitTick+0xd4>)
 8005e0c:	f008 f948 	bl	800e0a0 <HAL_TIM_Base_Start_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005e16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d111      	bne.n	8005e42 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e1e:	2019      	movs	r0, #25
 8005e20:	f005 fcd8 	bl	800b7d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d808      	bhi.n	8005e3c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	2019      	movs	r0, #25
 8005e30:	f005 fcb4 	bl	800b79c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e34:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <HAL_InitTick+0xdc>)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e002      	b.n	8005e42 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3730      	adds	r7, #48	; 0x30
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40023800 	.word	0x40023800
 8005e54:	431bde83 	.word	0x431bde83
 8005e58:	2000140c 	.word	0x2000140c
 8005e5c:	40010000 	.word	0x40010000
 8005e60:	200001b4 	.word	0x200001b4

08005e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e68:	e7fe      	b.n	8005e68 <NMI_Handler+0x4>

08005e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e6e:	e7fe      	b.n	8005e6e <HardFault_Handler+0x4>

08005e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e74:	e7fe      	b.n	8005e74 <MemManage_Handler+0x4>

08005e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e76:	b480      	push	{r7}
 8005e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e7a:	e7fe      	b.n	8005e7a <BusFault_Handler+0x4>

08005e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e80:	e7fe      	b.n	8005e80 <UsageFault_Handler+0x4>

08005e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e82:	b480      	push	{r7}
 8005e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e86:	bf00      	nop
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e94:	4802      	ldr	r0, [pc, #8]	; (8005ea0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005e96:	f008 f97b 	bl	800e190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005e9a:	bf00      	nop
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	2000140c 	.word	0x2000140c

08005ea4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <BSP_I2C1_Init+0x70>)
 8005eb0:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <BSP_I2C1_Init+0x74>)
 8005eb2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8005eb4:	4b19      	ldr	r3, [pc, #100]	; (8005f1c <BSP_I2C1_Init+0x78>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	4918      	ldr	r1, [pc, #96]	; (8005f1c <BSP_I2C1_Init+0x78>)
 8005ebc:	600a      	str	r2, [r1, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d122      	bne.n	8005f08 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8005ec2:	4814      	ldr	r0, [pc, #80]	; (8005f14 <BSP_I2C1_Init+0x70>)
 8005ec4:	f006 fa68 	bl	800c398 <HAL_I2C_GetState>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d11c      	bne.n	8005f08 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8005ece:	4811      	ldr	r0, [pc, #68]	; (8005f14 <BSP_I2C1_Init+0x70>)
 8005ed0:	f000 f8fe 	bl	80060d0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d116      	bne.n	8005f08 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005eda:	480e      	ldr	r0, [pc, #56]	; (8005f14 <BSP_I2C1_Init+0x70>)
 8005edc:	f000 f8b4 	bl	8006048 <MX_I2C1_Init>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005ee6:	f06f 0307 	mvn.w	r3, #7
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e00c      	b.n	8005f08 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4808      	ldr	r0, [pc, #32]	; (8005f14 <BSP_I2C1_Init+0x70>)
 8005ef2:	f006 fd05 	bl	800c900 <HAL_I2CEx_ConfigAnalogFilter>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005efc:	f06f 0307 	mvn.w	r3, #7
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	e001      	b.n	8005f08 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005f08:	687b      	ldr	r3, [r7, #4]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20001458 	.word	0x20001458
 8005f18:	40005400 	.word	0x40005400
 8005f1c:	200014ac 	.word	0x200014ac

08005f20 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8005f2a:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <BSP_I2C1_DeInit+0x48>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d014      	beq.n	8005f5c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <BSP_I2C1_DeInit+0x48>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	4a0b      	ldr	r2, [pc, #44]	; (8005f68 <BSP_I2C1_DeInit+0x48>)
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <BSP_I2C1_DeInit+0x48>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10b      	bne.n	8005f5c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8005f44:	4809      	ldr	r0, [pc, #36]	; (8005f6c <BSP_I2C1_DeInit+0x4c>)
 8005f46:	f000 f925 	bl	8006194 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8005f4a:	4808      	ldr	r0, [pc, #32]	; (8005f6c <BSP_I2C1_DeInit+0x4c>)
 8005f4c:	f005 ffb2 	bl	800beb4 <HAL_I2C_DeInit>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005f56:	f06f 0307 	mvn.w	r3, #7
 8005f5a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8005f5c:	687b      	ldr	r3, [r7, #4]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200014ac 	.word	0x200014ac
 8005f6c:	20001458 	.word	0x20001458

08005f70 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	60ba      	str	r2, [r7, #8]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	81fb      	strh	r3, [r7, #14]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	81bb      	strh	r3, [r7, #12]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005f8a:	89ba      	ldrh	r2, [r7, #12]
 8005f8c:	89f9      	ldrh	r1, [r7, #14]
 8005f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f92:	9302      	str	r3, [sp, #8]
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	480c      	ldr	r0, [pc, #48]	; (8005fd0 <BSP_I2C1_WriteReg+0x60>)
 8005fa0:	f005 ffcc 	bl	800bf3c <HAL_I2C_Mem_Write>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8005faa:	4809      	ldr	r0, [pc, #36]	; (8005fd0 <BSP_I2C1_WriteReg+0x60>)
 8005fac:	f006 fa02 	bl	800c3b4 <HAL_I2C_GetError>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d103      	bne.n	8005fbe <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005fb6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e002      	b.n	8005fc4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005fbe:	f06f 0303 	mvn.w	r3, #3
 8005fc2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005fc4:	697b      	ldr	r3, [r7, #20]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20001458 	.word	0x20001458

08005fd4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af04      	add	r7, sp, #16
 8005fda:	60ba      	str	r2, [r7, #8]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	81fb      	strh	r3, [r7, #14]
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	81bb      	strh	r3, [r7, #12]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005fee:	89ba      	ldrh	r2, [r7, #12]
 8005ff0:	89f9      	ldrh	r1, [r7, #14]
 8005ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ff6:	9302      	str	r3, [sp, #8]
 8005ff8:	88fb      	ldrh	r3, [r7, #6]
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2301      	movs	r3, #1
 8006002:	480c      	ldr	r0, [pc, #48]	; (8006034 <BSP_I2C1_ReadReg+0x60>)
 8006004:	f006 f8ae 	bl	800c164 <HAL_I2C_Mem_Read>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800600e:	4809      	ldr	r0, [pc, #36]	; (8006034 <BSP_I2C1_ReadReg+0x60>)
 8006010:	f006 f9d0 	bl	800c3b4 <HAL_I2C_GetError>
 8006014:	4603      	mov	r3, r0
 8006016:	2b04      	cmp	r3, #4
 8006018:	d103      	bne.n	8006022 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800601a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	e002      	b.n	8006028 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006022:	f06f 0303 	mvn.w	r3, #3
 8006026:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8006028:	697b      	ldr	r3, [r7, #20]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20001458 	.word	0x20001458

08006038 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800603c:	f005 fac6 	bl	800b5cc <HAL_GetTick>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <MX_I2C1_Init+0x80>)
 8006058:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x20303E5D;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <MX_I2C1_Init+0x84>)
 800605e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f005 fe82 	bl	800bd94 <HAL_I2C_Init>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800609a:	2100      	movs	r1, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f006 fc2f 	bl	800c900 <HAL_I2CEx_ConfigAnalogFilter>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80060ac:	2100      	movs	r1, #0
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f006 fc71 	bl	800c996 <HAL_I2CEx_ConfigDigitalFilter>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40005400 	.word	0x40005400
 80060cc:	20303e5d 	.word	0x20303e5d

080060d0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b0ae      	sub	sp, #184	; 0xb8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	2290      	movs	r2, #144	; 0x90
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f00c fe8c 	bl	8012dfe <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80060e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060ea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80060ec:	2300      	movs	r3, #0
 80060ee:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	4618      	mov	r0, r3
 80060f6:	f007 fb49 	bl	800d78c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060fa:	4b24      	ldr	r3, [pc, #144]	; (800618c <I2C1_MspInit+0xbc>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	4a23      	ldr	r2, [pc, #140]	; (800618c <I2C1_MspInit+0xbc>)
 8006100:	f043 0302 	orr.w	r3, r3, #2
 8006104:	6313      	str	r3, [r2, #48]	; 0x30
 8006106:	4b21      	ldr	r3, [pc, #132]	; (800618c <I2C1_MspInit+0xbc>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8006112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800611a:	2312      	movs	r3, #18
 800611c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006126:	2303      	movs	r3, #3
 8006128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800612c:	2304      	movs	r3, #4
 800612e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8006132:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006136:	4619      	mov	r1, r3
 8006138:	4815      	ldr	r0, [pc, #84]	; (8006190 <I2C1_MspInit+0xc0>)
 800613a:	f005 fb59 	bl	800b7f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800613e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006146:	2312      	movs	r3, #18
 8006148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614c:	2300      	movs	r3, #0
 800614e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006152:	2303      	movs	r3, #3
 8006154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8006158:	2304      	movs	r3, #4
 800615a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800615e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006162:	4619      	mov	r1, r3
 8006164:	480a      	ldr	r0, [pc, #40]	; (8006190 <I2C1_MspInit+0xc0>)
 8006166:	f005 fb43 	bl	800b7f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <I2C1_MspInit+0xbc>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	4a07      	ldr	r2, [pc, #28]	; (800618c <I2C1_MspInit+0xbc>)
 8006170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006174:	6413      	str	r3, [r2, #64]	; 0x40
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <I2C1_MspInit+0xbc>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8006182:	bf00      	nop
 8006184:	37b8      	adds	r7, #184	; 0xb8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800
 8006190:	40020400 	.word	0x40020400

08006194 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <I2C1_MspDeInit+0x30>)
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <I2C1_MspDeInit+0x30>)
 80061a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a6:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80061a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061ac:	4806      	ldr	r0, [pc, #24]	; (80061c8 <I2C1_MspDeInit+0x34>)
 80061ae:	f005 fccb 	bl	800bb48 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80061b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061b6:	4804      	ldr	r0, [pc, #16]	; (80061c8 <I2C1_MspDeInit+0x34>)
 80061b8:	f005 fcc6 	bl	800bb48 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40020400 	.word	0x40020400

080061cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	e00a      	b.n	80061f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80061de:	f3af 8000 	nop.w
 80061e2:	4601      	mov	r1, r0
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	60ba      	str	r2, [r7, #8]
 80061ea:	b2ca      	uxtb	r2, r1
 80061ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	3301      	adds	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	dbf0      	blt.n	80061de <_read+0x12>
	}

return len;
 80061fc:	687b      	ldr	r3, [r7, #4]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
	return -1;
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800622e:	605a      	str	r2, [r3, #4]
	return 0;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <_isatty>:

int _isatty(int file)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
	return 1;
 8006246:	2301      	movs	r3, #1
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
	return 0;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <_sbrk+0x5c>)
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <_sbrk+0x60>)
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006284:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <_sbrk+0x64>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <_sbrk+0x64>)
 800628e:	4a12      	ldr	r2, [pc, #72]	; (80062d8 <_sbrk+0x68>)
 8006290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006292:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <_sbrk+0x64>)
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	429a      	cmp	r2, r3
 800629e:	d207      	bcs.n	80062b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062a0:	f00c fc7c 	bl	8012b9c <__errno>
 80062a4:	4603      	mov	r3, r0
 80062a6:	220c      	movs	r2, #12
 80062a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
 80062ae:	e009      	b.n	80062c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062b0:	4b08      	ldr	r3, [pc, #32]	; (80062d4 <_sbrk+0x64>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <_sbrk+0x64>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4413      	add	r3, r2
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <_sbrk+0x64>)
 80062c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062c2:	68fb      	ldr	r3, [r7, #12]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20080000 	.word	0x20080000
 80062d0:	00000400 	.word	0x00000400
 80062d4:	200014b0 	.word	0x200014b0
 80062d8:	20006050 	.word	0x20006050

080062dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80062e0:	4b06      	ldr	r3, [pc, #24]	; (80062fc <SystemInit+0x20>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	4a05      	ldr	r2, [pc, #20]	; (80062fc <SystemInit+0x20>)
 80062e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e000ed00 	.word	0xe000ed00

08006300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006338 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006304:	480d      	ldr	r0, [pc, #52]	; (800633c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006306:	490e      	ldr	r1, [pc, #56]	; (8006340 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006308:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800630a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800630c:	e002      	b.n	8006314 <LoopCopyDataInit>

0800630e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800630e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006312:	3304      	adds	r3, #4

08006314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006318:	d3f9      	bcc.n	800630e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800631a:	4a0b      	ldr	r2, [pc, #44]	; (8006348 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800631c:	4c0b      	ldr	r4, [pc, #44]	; (800634c <LoopFillZerobss+0x26>)
  movs r3, #0
 800631e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006320:	e001      	b.n	8006326 <LoopFillZerobss>

08006322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006324:	3204      	adds	r2, #4

08006326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006328:	d3fb      	bcc.n	8006322 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800632a:	f7ff ffd7 	bl	80062dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800632e:	f00c fd31 	bl	8012d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006332:	f7fd f96f 	bl	8003614 <main>
  bx  lr    
 8006336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006338:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800633c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006340:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8006344:	080147f0 	.word	0x080147f0
  ldr r2, =_sbss
 8006348:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 800634c:	20006050 	.word	0x20006050

08006350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006350:	e7fe      	b.n	8006350 <ADC_IRQHandler>
	...

08006354 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d103      	bne.n	800636c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e034      	b.n	80063d6 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	7b1a      	ldrb	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0e      	ldr	r2, [pc, #56]	; (80063e0 <HTS221_RegisterBusIO+0x8c>)
 80063a8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a0d      	ldr	r2, [pc, #52]	; (80063e4 <HTS221_RegisterBusIO+0x90>)
 80063ae:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4798      	blx	r3
 80063cc:	60f8      	str	r0, [r7, #12]
 80063ce:	e002      	b.n	80063d6 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80063d0:	f04f 33ff 	mov.w	r3, #4294967295
 80063d4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80063d6:	68fb      	ldr	r3, [r7, #12]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	08006a13 	.word	0x08006a13
 80063e4:	08006a75 	.word	0x08006a75

080063e8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d108      	bne.n	800640c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 faa4 	bl	8006948 <HTS221_Initialize>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	e004      	b.n	8006416 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b082      	sub	sp, #8
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	d111      	bne.n	8006454 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f878 	bl	8006526 <HTS221_HUM_Disable>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d002      	beq.n	8006442 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 800643c:	f04f 33ff 	mov.w	r3, #4294967295
 8006440:	e00d      	b.n	800645e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f95f 	bl	8006706 <HTS221_TEMP_Disable>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	e004      	b.n	800645e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3320      	adds	r3, #32
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fc28 	bl	8006ccc <hts221_device_id_get>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	e000      	b.n	800648a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2201      	movs	r2, #1
 80064a2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	2201      	movs	r2, #1
 80064ae:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2200      	movs	r2, #0
 80064b4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	4a07      	ldr	r2, [pc, #28]	; (80064d8 <HTS221_GetCapabilities+0x44>)
 80064ba:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4a06      	ldr	r2, [pc, #24]	; (80064d8 <HTS221_GetCapabilities+0x44>)
 80064c0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	41480000 	.word	0x41480000

080064dc <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	e015      	b.n	800651e <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3320      	adds	r3, #32
 8006500:	2101      	movs	r1, #1
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fbf3 	bl	8006cee <hts221_power_on_set>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	e004      	b.n	800651e <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e015      	b.n	8006568 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3320      	adds	r3, #32
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fbce 	bl	8006cee <hts221_power_on_set>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	e004      	b.n	8006568 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f96f 	bl	8006860 <HTS221_GetOutputDataRate>
 8006582:	4603      	mov	r3, r0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006598:	ed97 0a00 	vldr	s0, [r7]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9a3 	bl	80068e8 <HTS221_SetOutputDataRate>
 80065a2:	4603      	mov	r3, r0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3320      	adds	r3, #32
 80065ba:	f107 020c 	add.w	r2, r7, #12
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fc58 	bl	8006e76 <hts221_hum_adc_point_0_get>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	e06b      	b.n	80066aa <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f103 0220 	add.w	r2, r3, #32
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f000 fbaa 	bl	8006d3a <hts221_hum_rh_point_0_get>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295
 80065f0:	e05b      	b.n	80066aa <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f103 0220 	add.w	r2, r3, #32
 80065f8:	f107 030c 	add.w	r3, r7, #12
 80065fc:	3308      	adds	r3, #8
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f000 fc5c 	bl	8006ebe <hts221_hum_adc_point_1_get>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 800660c:	f04f 33ff 	mov.w	r3, #4294967295
 8006610:	e04b      	b.n	80066aa <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f103 0220 	add.w	r2, r3, #32
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	330c      	adds	r3, #12
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f000 fba8 	bl	8006d76 <hts221_hum_rh_point_1_get>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	e03b      	b.n	80066aa <HTS221_HUM_GetHumidity+0xfe>
 8006632:	2300      	movs	r3, #0
 8006634:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3320      	adds	r3, #32
 800663a:	f107 021c 	add.w	r2, r7, #28
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fafd 	bl	8006c40 <hts221_humidity_raw_get>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 800664c:	f04f 33ff 	mov.w	r3, #4294967295
 8006650:	e02b      	b.n	80066aa <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8006652:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800665e:	f107 030c 	add.w	r3, r7, #12
 8006662:	eeb0 0a67 	vmov.f32	s0, s15
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f99a 	bl	80069a0 <Linear_Interpolation>
 800666c:	eef0 7a40 	vmov.f32	s15, s0
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	edd3 7a00 	vldr	s15, [r3]
 800667c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006684:	d503      	bpl.n	800668e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	edd3 7a00 	vldr	s15, [r3]
 8006694:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80066b4 <HTS221_HUM_GetHumidity+0x108>
 8006698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800669c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a0:	dd02      	ble.n	80066a8 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <HTS221_HUM_GetHumidity+0x10c>)
 80066a6:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	42c80000 	.word	0x42c80000
 80066b8:	42c80000 	.word	0x42c80000

080066bc <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e015      	b.n	80066fe <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3320      	adds	r3, #32
 80066e0:	2101      	movs	r1, #1
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 fb03 	bl	8006cee <hts221_power_on_set>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80066ee:	f04f 33ff 	mov.w	r3, #4294967295
 80066f2:	e004      	b.n	80066fe <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e015      	b.n	8006748 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3320      	adds	r3, #32
 800672a:	2100      	movs	r1, #0
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fade 	bl	8006cee <hts221_power_on_set>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8006738:	f04f 33ff 	mov.w	r3, #4294967295
 800673c:	e004      	b.n	8006748 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f87f 	bl	8006860 <HTS221_GetOutputDataRate>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006778:	ed97 0a00 	vldr	s0, [r7]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8b3 	bl	80068e8 <HTS221_SetOutputDataRate>
 8006782:	4603      	mov	r3, r0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3320      	adds	r3, #32
 800679a:	f107 020c 	add.w	r2, r7, #12
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fbb0 	bl	8006f06 <hts221_temp_adc_point_0_get>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	e052      	b.n	8006858 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f103 0220 	add.w	r2, r3, #32
 80067b8:	f107 030c 	add.w	r3, r7, #12
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f000 faf6 	bl	8006db2 <hts221_temp_deg_point_0_get>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295
 80067d0:	e042      	b.n	8006858 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f103 0220 	add.w	r2, r3, #32
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	3308      	adds	r3, #8
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f000 fbb4 	bl	8006f4e <hts221_temp_adc_point_1_get>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80067ec:	f04f 33ff 	mov.w	r3, #4294967295
 80067f0:	e032      	b.n	8006858 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f103 0220 	add.w	r2, r3, #32
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	330c      	adds	r3, #12
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f000 fb07 	bl	8006e14 <hts221_temp_deg_point_1_get>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	e022      	b.n	8006858 <HTS221_TEMP_GetTemperature+0xcc>
 8006812:	2300      	movs	r3, #0
 8006814:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3320      	adds	r3, #32
 800681a:	f107 021c 	add.w	r2, r7, #28
 800681e:	4611      	mov	r1, r2
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fa30 	bl	8006c86 <hts221_temperature_raw_get>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 800682c:	f04f 33ff 	mov.w	r3, #4294967295
 8006830:	e012      	b.n	8006858 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8006832:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800683e:	f107 030c 	add.w	r3, r7, #12
 8006842:	eeb0 0a67 	vmov.f32	s0, s15
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f8aa 	bl	80069a0 <Linear_Interpolation>
 800684c:	eef0 7a40 	vmov.f32	s15, s0
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3320      	adds	r3, #32
 8006872:	f107 020b 	add.w	r2, r7, #11
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f983 	bl	8006b84 <hts221_data_rate_get>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	e025      	b.n	80068d6 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	2b03      	cmp	r3, #3
 800688e:	d81d      	bhi.n	80068cc <HTS221_GetOutputDataRate+0x6c>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <HTS221_GetOutputDataRate+0x38>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068a9 	.word	0x080068a9
 800689c:	080068b3 	.word	0x080068b3
 80068a0:	080068bd 	.word	0x080068bd
 80068a4:	080068c5 	.word	0x080068c5
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
      break;
 80068b0:	e010      	b.n	80068d4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80068b8:	601a      	str	r2, [r3, #0]
      break;
 80068ba:	e00b      	b.n	80068d4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	4a08      	ldr	r2, [pc, #32]	; (80068e0 <HTS221_GetOutputDataRate+0x80>)
 80068c0:	601a      	str	r2, [r3, #0]
      break;
 80068c2:	e007      	b.n	80068d4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	4a07      	ldr	r2, [pc, #28]	; (80068e4 <HTS221_GetOutputDataRate+0x84>)
 80068c8:	601a      	str	r2, [r3, #0]
      break;
 80068ca:	e003      	b.n	80068d4 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80068cc:	f04f 33ff 	mov.w	r3, #4294967295
 80068d0:	60fb      	str	r3, [r7, #12]
      break;
 80068d2:	bf00      	nop
  }

  return ret;
 80068d4:	68fb      	ldr	r3, [r7, #12]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40e00000 	.word	0x40e00000
 80068e4:	41480000 	.word	0x41480000

080068e8 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80068f4:	edd7 7a00 	vldr	s15, [r7]
 80068f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006904:	d801      	bhi.n	800690a <HTS221_SetOutputDataRate+0x22>
 8006906:	2301      	movs	r3, #1
 8006908:	e00b      	b.n	8006922 <HTS221_SetOutputDataRate+0x3a>
 800690a:	edd7 7a00 	vldr	s15, [r7]
 800690e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8006912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691a:	d801      	bhi.n	8006920 <HTS221_SetOutputDataRate+0x38>
 800691c:	2302      	movs	r3, #2
 800691e:	e000      	b.n	8006922 <HTS221_SetOutputDataRate+0x3a>
 8006920:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8006922:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3320      	adds	r3, #32
 8006928:	7bfa      	ldrb	r2, [r7, #15]
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f000 f902 	bl	8006b36 <hts221_data_rate_set>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	e000      	b.n	8006940 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3320      	adds	r3, #32
 8006954:	2100      	movs	r1, #0
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f9c9 	bl	8006cee <hts221_power_on_set>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	e017      	b.n	8006998 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3320      	adds	r3, #32
 800696c:	2101      	movs	r1, #1
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f940 	bl	8006bf4 <hts221_block_data_update_set>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800697a:	f04f 33ff 	mov.w	r3, #4294967295
 800697e:	e00b      	b.n	8006998 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8006980:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ffaf 	bl	80068e8 <HTS221_SetOutputDataRate>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	e000      	b.n	8006998 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80069b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069bc:	edd7 7a00 	vldr	s15, [r7]
 80069c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80069d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	ed93 6a00 	vldr	s12, [r3]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80069e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80069e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	edd3 7a00 	vldr	s15, [r3]
 80069f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a00:	eef0 7a66 	vmov.f32	s15, s13
}
 8006a04:	eeb0 0a67 	vmov.f32	s0, s15
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006a12:	b590      	push	{r4, r7, lr}
 8006a14:	b087      	sub	sp, #28
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	460b      	mov	r3, r1
 8006a20:	72fb      	strb	r3, [r7, #11]
 8006a22:	4613      	mov	r3, r2
 8006a24:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10e      	bne.n	8006a50 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	695c      	ldr	r4, [r3, #20]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	7b1b      	ldrb	r3, [r3, #12]
 8006a3a:	b298      	uxth	r0, r3
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
 8006a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	b299      	uxth	r1, r3
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	47a0      	blx	r4
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	e00d      	b.n	8006a6c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	695c      	ldr	r4, [r3, #20]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	7b1b      	ldrb	r3, [r3, #12]
 8006a58:	b298      	uxth	r0, r3
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	b299      	uxth	r1, r3
 8006a64:	893b      	ldrh	r3, [r7, #8]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	47a0      	blx	r4
 8006a6a:	4603      	mov	r3, r0
  }
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd90      	pop	{r4, r7, pc}

08006a74 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006a74:	b590      	push	{r4, r7, lr}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	460b      	mov	r3, r1
 8006a82:	72fb      	strb	r3, [r7, #11]
 8006a84:	4613      	mov	r3, r2
 8006a86:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10e      	bne.n	8006ab2 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	691c      	ldr	r4, [r3, #16]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	7b1b      	ldrb	r3, [r3, #12]
 8006a9c:	b298      	uxth	r0, r3
 8006a9e:	7afb      	ldrb	r3, [r7, #11]
 8006aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	b299      	uxth	r1, r3
 8006aa8:	893b      	ldrh	r3, [r7, #8]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	47a0      	blx	r4
 8006aae:	4603      	mov	r3, r0
 8006ab0:	e00d      	b.n	8006ace <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	691c      	ldr	r4, [r3, #16]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	7b1b      	ldrb	r3, [r3, #12]
 8006aba:	b298      	uxth	r0, r3
 8006abc:	7afb      	ldrb	r3, [r7, #11]
 8006abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	b299      	uxth	r1, r3
 8006ac6:	893b      	ldrh	r3, [r7, #8]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	47a0      	blx	r4
 8006acc:	4603      	mov	r3, r0
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}

08006ad6 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8006ad6:	b590      	push	{r4, r7, lr}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	72fb      	strb	r3, [r7, #11]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685c      	ldr	r4, [r3, #4]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	68d8      	ldr	r0, [r3, #12]
 8006af2:	893b      	ldrh	r3, [r7, #8]
 8006af4:	7af9      	ldrb	r1, [r7, #11]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	47a0      	blx	r4
 8006afa:	6178      	str	r0, [r7, #20]

  return ret;
 8006afc:	697b      	ldr	r3, [r7, #20]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	371c      	adds	r7, #28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd90      	pop	{r4, r7, pc}

08006b06 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8006b06:	b590      	push	{r4, r7, lr}
 8006b08:	b087      	sub	sp, #28
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	461a      	mov	r2, r3
 8006b12:	460b      	mov	r3, r1
 8006b14:	72fb      	strb	r3, [r7, #11]
 8006b16:	4613      	mov	r3, r2
 8006b18:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681c      	ldr	r4, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68d8      	ldr	r0, [r3, #12]
 8006b22:	893b      	ldrh	r3, [r7, #8]
 8006b24:	7af9      	ldrb	r1, [r7, #11]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	47a0      	blx	r4
 8006b2a:	6178      	str	r0, [r7, #20]

  return ret;
 8006b2c:	697b      	ldr	r3, [r7, #20]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}

08006b36 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b42:	f107 0208 	add.w	r2, r7, #8
 8006b46:	2301      	movs	r3, #1
 8006b48:	2120      	movs	r1, #32
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff ffc3 	bl	8006ad6 <hts221_read_reg>
 8006b50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10f      	bne.n	8006b78 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	7a3b      	ldrb	r3, [r7, #8]
 8006b62:	f362 0301 	bfi	r3, r2, #0, #2
 8006b66:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b68:	f107 0208 	add.w	r2, r7, #8
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	2120      	movs	r1, #32
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff ffc8 	bl	8006b06 <hts221_write_reg>
 8006b76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b78:	68fb      	ldr	r3, [r7, #12]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b8e:	f107 0208 	add.w	r2, r7, #8
 8006b92:	2301      	movs	r3, #1
 8006b94:	2120      	movs	r1, #32
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ff9d 	bl	8006ad6 <hts221_read_reg>
 8006b9c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8006b9e:	7a3b      	ldrb	r3, [r7, #8]
 8006ba0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d81a      	bhi.n	8006be0 <hts221_data_rate_get+0x5c>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <hts221_data_rate_get+0x2c>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006bc9 	.word	0x08006bc9
 8006bb8:	08006bd1 	.word	0x08006bd1
 8006bbc:	08006bd9 	.word	0x08006bd9
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
      break;
 8006bc6:	e00f      	b.n	8006be8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	701a      	strb	r2, [r3, #0]
      break;
 8006bce:	e00b      	b.n	8006be8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	701a      	strb	r2, [r3, #0]
      break;
 8006bd6:	e007      	b.n	8006be8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2203      	movs	r2, #3
 8006bdc:	701a      	strb	r2, [r3, #0]
      break;
 8006bde:	e003      	b.n	8006be8 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2204      	movs	r2, #4
 8006be4:	701a      	strb	r2, [r3, #0]
      break;
 8006be6:	bf00      	nop
  }

  return ret;
 8006be8:	68fb      	ldr	r3, [r7, #12]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop

08006bf4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006c00:	f107 0208 	add.w	r2, r7, #8
 8006c04:	2301      	movs	r3, #1
 8006c06:	2120      	movs	r1, #32
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff64 	bl	8006ad6 <hts221_read_reg>
 8006c0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10f      	bne.n	8006c36 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	7a3b      	ldrb	r3, [r7, #8]
 8006c20:	f362 0382 	bfi	r3, r2, #2, #1
 8006c24:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006c26:	f107 0208 	add.w	r2, r7, #8
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	2120      	movs	r1, #32
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff69 	bl	8006b06 <hts221_write_reg>
 8006c34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c36:	68fb      	ldr	r3, [r7, #12]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8006c4a:	f107 0208 	add.w	r2, r7, #8
 8006c4e:	2302      	movs	r3, #2
 8006c50:	2128      	movs	r1, #40	; 0x28
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff ff3f 	bl	8006ad6 <hts221_read_reg>
 8006c58:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006c5a:	7a7b      	ldrb	r3, [r7, #9]
 8006c5c:	b21a      	sxth	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	021b      	lsls	r3, r3, #8
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	7a3b      	ldrb	r3, [r7, #8]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b21a      	sxth	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	801a      	strh	r2, [r3, #0]

  return ret;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8006c90:	f107 0208 	add.w	r2, r7, #8
 8006c94:	2302      	movs	r3, #2
 8006c96:	212a      	movs	r1, #42	; 0x2a
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff ff1c 	bl	8006ad6 <hts221_read_reg>
 8006c9e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006ca0:	7a7b      	ldrb	r3, [r7, #9]
 8006ca2:	b21a      	sxth	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	7a3b      	ldrb	r3, [r7, #8]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4413      	add	r3, r2
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	b21a      	sxth	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	801a      	strh	r2, [r3, #0]

  return ret;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	210f      	movs	r1, #15
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff fefa 	bl	8006ad6 <hts221_read_reg>
 8006ce2:	60f8      	str	r0, [r7, #12]

  return ret;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006cfa:	f107 0208 	add.w	r2, r7, #8
 8006cfe:	2301      	movs	r3, #1
 8006d00:	2120      	movs	r1, #32
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fee7 	bl	8006ad6 <hts221_read_reg>
 8006d08:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10f      	bne.n	8006d30 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	7a3b      	ldrb	r3, [r7, #8]
 8006d1a:	f362 13c7 	bfi	r3, r2, #7, #1
 8006d1e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006d20:	f107 0208 	add.w	r2, r7, #8
 8006d24:	2301      	movs	r3, #1
 8006d26:	2120      	movs	r1, #32
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff feec 	bl	8006b06 <hts221_write_reg>
 8006d2e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8006d44:	f107 020b 	add.w	r2, r7, #11
 8006d48:	2301      	movs	r3, #1
 8006d4a:	2130      	movs	r1, #48	; 0x30
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff fec2 	bl	8006ad6 <hts221_read_reg>
 8006d52:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006d54:	7afb      	ldrb	r3, [r7, #11]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8006d80:	f107 020b 	add.w	r2, r7, #11
 8006d84:	2301      	movs	r3, #1
 8006d86:	2131      	movs	r1, #49	; 0x31
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fea4 	bl	8006ad6 <hts221_read_reg>
 8006d8e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006d9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006da8:	68fb      	ldr	r3, [r7, #12]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8006dbc:	f107 020f 	add.w	r2, r7, #15
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	2132      	movs	r1, #50	; 0x32
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fe86 	bl	8006ad6 <hts221_read_reg>
 8006dca:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11b      	bne.n	8006e0a <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006dd2:	f107 0210 	add.w	r2, r7, #16
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	2135      	movs	r1, #53	; 0x35
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fe7b 	bl	8006ad6 <hts221_read_reg>
 8006de0:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8006de2:	7c3b      	ldrb	r3, [r7, #16]
 8006de4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8006dec:	7cfb      	ldrb	r3, [r7, #19]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	7bfa      	ldrb	r2, [r7, #15]
 8006df2:	4413      	add	r3, r2
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dfc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006e0a:	697b      	ldr	r3, [r7, #20]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8006e1e:	f107 020f 	add.w	r2, r7, #15
 8006e22:	2301      	movs	r3, #1
 8006e24:	2133      	movs	r1, #51	; 0x33
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fe55 	bl	8006ad6 <hts221_read_reg>
 8006e2c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11b      	bne.n	8006e6c <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006e34:	f107 0210 	add.w	r2, r7, #16
 8006e38:	2301      	movs	r3, #1
 8006e3a:	2135      	movs	r1, #53	; 0x35
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff fe4a 	bl	8006ad6 <hts221_read_reg>
 8006e42:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8006e44:	7c3b      	ldrb	r3, [r7, #16]
 8006e46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8006e4e:	7cfb      	ldrb	r3, [r7, #19]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	7bfa      	ldrb	r2, [r7, #15]
 8006e54:	4413      	add	r3, r2
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e5e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006e6c:	697b      	ldr	r3, [r7, #20]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8006e80:	f107 0208 	add.w	r2, r7, #8
 8006e84:	2302      	movs	r3, #2
 8006e86:	2136      	movs	r1, #54	; 0x36
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff fe24 	bl	8006ad6 <hts221_read_reg>
 8006e8e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006e90:	7a7b      	ldrb	r3, [r7, #9]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	7a3b      	ldrb	r3, [r7, #8]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006ea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8006ec8:	f107 0208 	add.w	r2, r7, #8
 8006ecc:	2302      	movs	r3, #2
 8006ece:	213a      	movs	r1, #58	; 0x3a
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff fe00 	bl	8006ad6 <hts221_read_reg>
 8006ed6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006ed8:	7a7b      	ldrb	r3, [r7, #9]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	7a3b      	ldrb	r3, [r7, #8]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8006f10:	f107 0208 	add.w	r2, r7, #8
 8006f14:	2302      	movs	r3, #2
 8006f16:	213c      	movs	r1, #60	; 0x3c
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fddc 	bl	8006ad6 <hts221_read_reg>
 8006f1e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006f20:	7a7b      	ldrb	r3, [r7, #9]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	7a3b      	ldrb	r3, [r7, #8]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006f32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006f44:	68fb      	ldr	r3, [r7, #12]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8006f58:	f107 0208 	add.w	r2, r7, #8
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	213e      	movs	r1, #62	; 0x3e
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f7ff fdb8 	bl	8006ad6 <hts221_read_reg>
 8006f66:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006f68:	7a7b      	ldrb	r3, [r7, #9]
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	7a3b      	ldrb	r3, [r7, #8]
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4413      	add	r3, r2
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006f7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d103      	bne.n	8006fb4 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e051      	b.n	8007058 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	7b1a      	ldrb	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <LPS22HB_RegisterBusIO+0xcc>)
 8006ff0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <LPS22HB_RegisterBusIO+0xd0>)
 8006ff6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 800700e:	f04f 33ff 	mov.w	r3, #4294967295
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	e020      	b.n	8007058 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4798      	blx	r3
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8007022:	f04f 33ff 	mov.w	r3, #4294967295
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e016      	b.n	8007058 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d112      	bne.n	8007058 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800703c:	2301      	movs	r3, #1
 800703e:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	461a      	mov	r2, r3
 8007044:	2110      	movs	r1, #16
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f9df 	bl	800740a <LPS22HB_Write_Reg>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007058:	68fb      	ldr	r3, [r7, #12]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	080076cb 	.word	0x080076cb
 8007068:	08007751 	.word	0x08007751

0800706c <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800707a:	2b00      	cmp	r3, #0
 800707c:	d108      	bne.n	8007090 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 faca 	bl	8007618 <LPS22HB_Initialize>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 800708a:	f04f 33ff 	mov.w	r3, #4294967295
 800708e:	e004      	b.n	800709a <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <LPS22HB_DeInit>:
  * @brief  Deinitialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d111      	bne.n	80070d8 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f877 	bl	80071a8 <LPS22HB_PRESS_Disable>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
 80070c4:	e00d      	b.n	80070e2 <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f918 	bl	80072fc <LPS22HB_TEMP_Disable>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	e004      	b.n	80070e2 <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <LPS22HB_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3320      	adds	r3, #32
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fcd0 	bl	8007aa0 <lps22hb_device_id_get>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	e000      	b.n	800710e <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <LPS22HB_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HB sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2200      	movs	r2, #0
 8007126:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2201      	movs	r2, #1
 800712c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2201      	movs	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	4a05      	ldr	r2, [pc, #20]	; (800715c <LPS22HB_GetCapabilities+0x44>)
 8007146:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	4a04      	ldr	r2, [pc, #16]	; (800715c <LPS22HB_GetCapabilities+0x44>)
 800714c:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	42960000 	.word	0x42960000

08007160 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e014      	b.n	80071a0 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f103 0220 	add.w	r2, r3, #32
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f000 fbd5 	bl	8007934 <lps22hb_data_rate_set>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8007190:	f04f 33ff 	mov.w	r3, #4294967295
 8007194:	e004      	b.n	80071a0 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <LPS22HB_PRESS_Disable>:
  * @brief  Disable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e024      	b.n	8007208 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11a      	bne.n	80071fe <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f103 0220 	add.w	r2, r3, #32
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3333      	adds	r3, #51	; 0x33
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f000 fbd3 	bl	8007980 <lps22hb_data_rate_get>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	e010      	b.n	8007208 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3320      	adds	r3, #32
 80071ea:	2100      	movs	r1, #0
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fba1 	bl	8007934 <lps22hb_data_rate_set>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	e004      	b.n	8007208 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <LPS22HB_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f90f 	bl	8007440 <LPS22HB_GetOutputDataRate>
 8007222:	4603      	mov	r3, r0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <LPS22HB_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800723e:	2b01      	cmp	r3, #1
 8007240:	d106      	bne.n	8007250 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007242:	ed97 0a00 	vldr	s0, [r7]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f94e 	bl	80074e8 <LPS22HB_SetOutputDataRate_When_Enabled>
 800724c:	4603      	mov	r3, r0
 800724e:	e005      	b.n	800725c <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007250:	ed97 0a00 	vldr	s0, [r7]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f99f 	bl	8007598 <LPS22HB_SetOutputDataRate_When_Disabled>
 800725a:	4603      	mov	r3, r0
  }
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800726e:	f107 030c 	add.w	r3, r7, #12
 8007272:	2204      	movs	r2, #4
 8007274:	2100      	movs	r1, #0
 8007276:	4618      	mov	r0, r3
 8007278:	f00b fdc1 	bl	8012dfe <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3320      	adds	r3, #32
 8007280:	f107 020c 	add.w	r2, r7, #12
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fbbe 	bl	8007a08 <lps22hb_pressure_raw_get>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8007292:	f04f 33ff 	mov.w	r3, #4294967295
 8007296:	e009      	b.n	80072ac <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 facc 	bl	8007838 <lps22hb_from_lsb_to_hpa>
 80072a0:	eef0 7a40 	vmov.f32	s15, s0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <LPS22HB_TEMP_Enable>:
  * @brief  Enable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e014      	b.n	80072f4 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f103 0220 	add.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f000 fb2b 	bl	8007934 <lps22hb_data_rate_set>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295
 80072e8:	e004      	b.n	80072f4 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <LPS22HB_TEMP_Disable>:
  * @brief  Disable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	e024      	b.n	800735c <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11a      	bne.n	8007352 <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f103 0220 	add.w	r2, r3, #32
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3333      	adds	r3, #51	; 0x33
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f000 fb29 	bl	8007980 <lps22hb_data_rate_get>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	e010      	b.n	800735c <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3320      	adds	r3, #32
 800733e:	2100      	movs	r1, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f000 faf7 	bl	8007934 <lps22hb_data_rate_set>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	e004      	b.n	800735c <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <LPS22HB_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f865 	bl	8007440 <LPS22HB_GetOutputDataRate>
 8007376:	4603      	mov	r3, r0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <LPS22HB_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007392:	2b01      	cmp	r3, #1
 8007394:	d106      	bne.n	80073a4 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007396:	ed97 0a00 	vldr	s0, [r7]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f8a4 	bl	80074e8 <LPS22HB_SetOutputDataRate_When_Enabled>
 80073a0:	4603      	mov	r3, r0
 80073a2:	e005      	b.n	80073b0 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80073a4:	ed97 0a00 	vldr	s0, [r7]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8f5 	bl	8007598 <LPS22HB_SetOutputDataRate_When_Disabled>
 80073ae:	4603      	mov	r3, r0
  }
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <LPS22HB_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80073c2:	f107 030c 	add.w	r3, r7, #12
 80073c6:	2202      	movs	r2, #2
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f00b fd17 	bl	8012dfe <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3320      	adds	r3, #32
 80073d4:	f107 020c 	add.w	r2, r7, #12
 80073d8:	4611      	mov	r1, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fb3d 	bl	8007a5a <lps22hb_temperature_raw_get>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 80073e6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ea:	e00a      	b.n	8007402 <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 80073ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fa39 	bl	8007868 <lps22hb_from_lsb_to_degc>
 80073f6:	eef0 7a40 	vmov.f32	s15, s0
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	460b      	mov	r3, r1
 8007414:	70fb      	strb	r3, [r7, #3]
 8007416:	4613      	mov	r3, r2
 8007418:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f103 0020 	add.w	r0, r3, #32
 8007420:	1cba      	adds	r2, r7, #2
 8007422:	78f9      	ldrb	r1, [r7, #3]
 8007424:	2301      	movs	r3, #1
 8007426:	f000 f9ee 	bl	8007806 <lps22hb_write_reg>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8007430:	f04f 33ff 	mov.w	r3, #4294967295
 8007434:	e000      	b.n	8007438 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <LPS22HB_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3320      	adds	r3, #32
 8007452:	f107 020b 	add.w	r2, r7, #11
 8007456:	4611      	mov	r1, r2
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fa91 	bl	8007980 <lps22hb_data_rate_get>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8007464:	f04f 33ff 	mov.w	r3, #4294967295
 8007468:	e031      	b.n	80074ce <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 800746a:	7afb      	ldrb	r3, [r7, #11]
 800746c:	2b05      	cmp	r3, #5
 800746e:	d829      	bhi.n	80074c4 <LPS22HB_GetOutputDataRate+0x84>
 8007470:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <LPS22HB_GetOutputDataRate+0x38>)
 8007472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007476:	bf00      	nop
 8007478:	08007491 	.word	0x08007491
 800747c:	0800749b 	.word	0x0800749b
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074b5 	.word	0x080074b5
 800748c:	080074bd 	.word	0x080074bd
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
      break;
 8007498:	e018      	b.n	80074cc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80074a0:	601a      	str	r2, [r3, #0]
      break;
 80074a2:	e013      	b.n	80074cc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <LPS22HB_GetOutputDataRate+0x98>)
 80074a8:	601a      	str	r2, [r3, #0]
      break;
 80074aa:	e00f      	b.n	80074cc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	4a0b      	ldr	r2, [pc, #44]	; (80074dc <LPS22HB_GetOutputDataRate+0x9c>)
 80074b0:	601a      	str	r2, [r3, #0]
      break;
 80074b2:	e00b      	b.n	80074cc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	4a0a      	ldr	r2, [pc, #40]	; (80074e0 <LPS22HB_GetOutputDataRate+0xa0>)
 80074b8:	601a      	str	r2, [r3, #0]
      break;
 80074ba:	e007      	b.n	80074cc <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	4a09      	ldr	r2, [pc, #36]	; (80074e4 <LPS22HB_GetOutputDataRate+0xa4>)
 80074c0:	601a      	str	r2, [r3, #0]
      break;
 80074c2:	e003      	b.n	80074cc <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80074c4:	f04f 33ff 	mov.w	r3, #4294967295
 80074c8:	60fb      	str	r3, [r7, #12]
      break;
 80074ca:	bf00      	nop
  }

  return ret;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	41200000 	.word	0x41200000
 80074dc:	41c80000 	.word	0x41c80000
 80074e0:	42480000 	.word	0x42480000
 80074e4:	42960000 	.word	0x42960000

080074e8 <LPS22HB_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80074f4:	edd7 7a00 	vldr	s15, [r7]
 80074f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007504:	d801      	bhi.n	800750a <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8007506:	2301      	movs	r3, #1
 8007508:	e021      	b.n	800754e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800750a:	edd7 7a00 	vldr	s15, [r7]
 800750e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751a:	d801      	bhi.n	8007520 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 800751c:	2302      	movs	r3, #2
 800751e:	e016      	b.n	800754e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007520:	edd7 7a00 	vldr	s15, [r7]
 8007524:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800752c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007530:	d801      	bhi.n	8007536 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8007532:	2303      	movs	r3, #3
 8007534:	e00b      	b.n	800754e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007536:	edd7 7a00 	vldr	s15, [r7]
 800753a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007594 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 800753e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007546:	d801      	bhi.n	800754c <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8007548:	2304      	movs	r3, #4
 800754a:	e000      	b.n	800754e <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800754c:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 800754e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3320      	adds	r3, #32
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	4611      	mov	r1, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f9eb 	bl	8007934 <lps22hb_data_rate_set>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8007564:	f04f 33ff 	mov.w	r3, #4294967295
 8007568:	e00f      	b.n	800758a <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f103 0220 	add.w	r2, r3, #32
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3333      	adds	r3, #51	; 0x33
 8007574:	4619      	mov	r1, r3
 8007576:	4610      	mov	r0, r2
 8007578:	f000 fa02 	bl	8007980 <lps22hb_data_rate_get>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8007582:	f04f 33ff 	mov.w	r3, #4294967295
 8007586:	e000      	b.n	800758a <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	42480000 	.word	0x42480000

08007598 <LPS22HB_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80075a4:	edd7 7a00 	vldr	s15, [r7]
 80075a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b4:	d801      	bhi.n	80075ba <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e021      	b.n	80075fe <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80075ba:	edd7 7a00 	vldr	s15, [r7]
 80075be:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80075c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ca:	d801      	bhi.n	80075d0 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e016      	b.n	80075fe <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80075d0:	edd7 7a00 	vldr	s15, [r7]
 80075d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80075d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	d801      	bhi.n	80075e6 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80075e2:	2303      	movs	r3, #3
 80075e4:	e00b      	b.n	80075fe <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80075e6:	edd7 7a00 	vldr	s15, [r7]
 80075ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007614 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80075ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f6:	d801      	bhi.n	80075fc <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80075f8:	2304      	movs	r3, #4
 80075fa:	e000      	b.n	80075fe <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80075fc:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	42480000 	.word	0x42480000

08007618 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3320      	adds	r3, #32
 8007624:	2101      	movs	r1, #1
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fa4b 	bl	8007ac2 <lps22hb_low_power_set>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8007632:	f04f 33ff 	mov.w	r3, #4294967295
 8007636:	e044      	b.n	80076c2 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3320      	adds	r3, #32
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f000 f978 	bl	8007934 <lps22hb_data_rate_set>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 800764a:	f04f 33ff 	mov.w	r3, #4294967295
 800764e:	e038      	b.n	80076c2 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3320      	adds	r3, #32
 8007654:	2102      	movs	r1, #2
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f946 	bl	80078e8 <lps22hb_low_pass_filter_mode_set>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	e02c      	b.n	80076c2 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3320      	adds	r3, #32
 800766c:	2101      	movs	r1, #1
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f914 	bl	800789c <lps22hb_block_data_update_set>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	e020      	b.n	80076c2 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3320      	adds	r3, #32
 800768c:	2100      	movs	r1, #0
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fa3d 	bl	8007b0e <lps22hb_auto_add_inc_set>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800769a:	f04f 33ff 	mov.w	r3, #4294967295
 800769e:	e010      	b.n	80076c2 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3320      	adds	r3, #32
 80076a4:	2101      	movs	r1, #1
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fa31 	bl	8007b0e <lps22hb_auto_add_inc_set>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80076b2:	f04f 33ff 	mov.w	r3, #4294967295
 80076b6:	e004      	b.n	80076c2 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2203      	movs	r2, #3
 80076bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80076ca:	b590      	push	{r4, r7, lr}
 80076cc:	b089      	sub	sp, #36	; 0x24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	461a      	mov	r2, r3
 80076d6:	460b      	mov	r3, r1
 80076d8:	72fb      	strb	r3, [r7, #11]
 80076da:	4613      	mov	r3, r2
 80076dc:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d121      	bne.n	8007732 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	83fb      	strh	r3, [r7, #30]
 80076f2:	e018      	b.n	8007726 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	695c      	ldr	r4, [r3, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	7b1b      	ldrb	r3, [r3, #12]
 80076fc:	b298      	uxth	r0, r3
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	b29a      	uxth	r2, r3
 8007702:	8bfb      	ldrh	r3, [r7, #30]
 8007704:	4413      	add	r3, r2
 8007706:	b299      	uxth	r1, r3
 8007708:	8bfb      	ldrh	r3, [r7, #30]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	441a      	add	r2, r3
 800770e:	2301      	movs	r3, #1
 8007710:	47a0      	blx	r4
 8007712:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	e013      	b.n	8007748 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8007720:	8bfb      	ldrh	r3, [r7, #30]
 8007722:	3301      	adds	r3, #1
 8007724:	83fb      	strh	r3, [r7, #30]
 8007726:	8bfa      	ldrh	r2, [r7, #30]
 8007728:	893b      	ldrh	r3, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d3e2      	bcc.n	80076f4 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	e00a      	b.n	8007748 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	695c      	ldr	r4, [r3, #20]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	7b1b      	ldrb	r3, [r3, #12]
 800773a:	b298      	uxth	r0, r3
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	b299      	uxth	r1, r3
 8007740:	893b      	ldrh	r3, [r7, #8]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	47a0      	blx	r4
 8007746:	4603      	mov	r3, r0
  }
}
 8007748:	4618      	mov	r0, r3
 800774a:	3724      	adds	r7, #36	; 0x24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd90      	pop	{r4, r7, pc}

08007750 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b089      	sub	sp, #36	; 0x24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	461a      	mov	r2, r3
 800775c:	460b      	mov	r3, r1
 800775e:	72fb      	strb	r3, [r7, #11]
 8007760:	4613      	mov	r3, r2
 8007762:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d121      	bne.n	80077b8 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8007774:	2300      	movs	r3, #0
 8007776:	83fb      	strh	r3, [r7, #30]
 8007778:	e018      	b.n	80077ac <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	691c      	ldr	r4, [r3, #16]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	7b1b      	ldrb	r3, [r3, #12]
 8007782:	b298      	uxth	r0, r3
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	b29a      	uxth	r2, r3
 8007788:	8bfb      	ldrh	r3, [r7, #30]
 800778a:	4413      	add	r3, r2
 800778c:	b299      	uxth	r1, r3
 800778e:	8bfb      	ldrh	r3, [r7, #30]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	441a      	add	r2, r3
 8007794:	2301      	movs	r3, #1
 8007796:	47a0      	blx	r4
 8007798:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
 80077a4:	e013      	b.n	80077ce <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80077a6:	8bfb      	ldrh	r3, [r7, #30]
 80077a8:	3301      	adds	r3, #1
 80077aa:	83fb      	strh	r3, [r7, #30]
 80077ac:	8bfa      	ldrh	r2, [r7, #30]
 80077ae:	893b      	ldrh	r3, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d3e2      	bcc.n	800777a <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	e00a      	b.n	80077ce <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	691c      	ldr	r4, [r3, #16]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	7b1b      	ldrb	r3, [r3, #12]
 80077c0:	b298      	uxth	r0, r3
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	b299      	uxth	r1, r3
 80077c6:	893b      	ldrh	r3, [r7, #8]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	47a0      	blx	r4
 80077cc:	4603      	mov	r3, r0
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3724      	adds	r7, #36	; 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd90      	pop	{r4, r7, pc}

080077d6 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80077d6:	b590      	push	{r4, r7, lr}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	461a      	mov	r2, r3
 80077e2:	460b      	mov	r3, r1
 80077e4:	72fb      	strb	r3, [r7, #11]
 80077e6:	4613      	mov	r3, r2
 80077e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685c      	ldr	r4, [r3, #4]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68d8      	ldr	r0, [r3, #12]
 80077f2:	893b      	ldrh	r3, [r7, #8]
 80077f4:	7af9      	ldrb	r1, [r7, #11]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	47a0      	blx	r4
 80077fa:	6178      	str	r0, [r7, #20]

  return ret;
 80077fc:	697b      	ldr	r3, [r7, #20]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd90      	pop	{r4, r7, pc}

08007806 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007806:	b590      	push	{r4, r7, lr}
 8007808:	b087      	sub	sp, #28
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	461a      	mov	r2, r3
 8007812:	460b      	mov	r3, r1
 8007814:	72fb      	strb	r3, [r7, #11]
 8007816:	4613      	mov	r3, r2
 8007818:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681c      	ldr	r4, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	68d8      	ldr	r0, [r3, #12]
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	7af9      	ldrb	r1, [r7, #11]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	47a0      	blx	r4
 800782a:	6178      	str	r0, [r7, #20]

  return ret;
 800782c:	697b      	ldr	r3, [r7, #20]
}
 800782e:	4618      	mov	r0, r3
 8007830:	371c      	adds	r7, #28
 8007832:	46bd      	mov	sp, r7
 8007834:	bd90      	pop	{r4, r7, pc}
	...

08007838 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800784a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007864 <lps22hb_from_lsb_to_hpa+0x2c>
 800784e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007852:	eef0 7a66 	vmov.f32	s15, s13
}
 8007856:	eeb0 0a67 	vmov.f32	s0, s15
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	49800000 	.word	0x49800000

08007868 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8007872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007898 <lps22hb_from_lsb_to_degc+0x30>
 8007882:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007886:	eef0 7a66 	vmov.f32	s15, s13
}
 800788a:	eeb0 0a67 	vmov.f32	s0, s15
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	42c80000 	.word	0x42c80000

0800789c <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80078a8:	f107 0208 	add.w	r2, r7, #8
 80078ac:	2301      	movs	r3, #1
 80078ae:	2110      	movs	r1, #16
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff ff90 	bl	80077d6 <lps22hb_read_reg>
 80078b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	7a3b      	ldrb	r3, [r7, #8]
 80078c8:	f362 0341 	bfi	r3, r2, #1, #1
 80078cc:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80078ce:	f107 0208 	add.w	r2, r7, #8
 80078d2:	2301      	movs	r3, #1
 80078d4:	2110      	movs	r1, #16
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff ff95 	bl	8007806 <lps22hb_write_reg>
 80078dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078de:	68fb      	ldr	r3, [r7, #12]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80078f4:	f107 0208 	add.w	r2, r7, #8
 80078f8:	2301      	movs	r3, #1
 80078fa:	2110      	movs	r1, #16
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff ff6a 	bl	80077d6 <lps22hb_read_reg>
 8007902:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10f      	bne.n	800792a <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	b2da      	uxtb	r2, r3
 8007912:	7a3b      	ldrb	r3, [r7, #8]
 8007914:	f362 0383 	bfi	r3, r2, #2, #2
 8007918:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800791a:	f107 0208 	add.w	r2, r7, #8
 800791e:	2301      	movs	r3, #1
 8007920:	2110      	movs	r1, #16
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ff6f 	bl	8007806 <lps22hb_write_reg>
 8007928:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007940:	f107 0208 	add.w	r2, r7, #8
 8007944:	2301      	movs	r3, #1
 8007946:	2110      	movs	r1, #16
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ff44 	bl	80077d6 <lps22hb_read_reg>
 800794e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10f      	bne.n	8007976 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	b2da      	uxtb	r2, r3
 800795e:	7a3b      	ldrb	r3, [r7, #8]
 8007960:	f362 1306 	bfi	r3, r2, #4, #3
 8007964:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007966:	f107 0208 	add.w	r2, r7, #8
 800796a:	2301      	movs	r3, #1
 800796c:	2110      	movs	r1, #16
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff ff49 	bl	8007806 <lps22hb_write_reg>
 8007974:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800798a:	f107 0208 	add.w	r2, r7, #8
 800798e:	2301      	movs	r3, #1
 8007990:	2110      	movs	r1, #16
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff ff1f 	bl	80077d6 <lps22hb_read_reg>
 8007998:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.odr)
 800799a:	7a3b      	ldrb	r3, [r7, #8]
 800799c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	d826      	bhi.n	80079f4 <lps22hb_data_rate_get+0x74>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <lps22hb_data_rate_get+0x2c>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079c5 	.word	0x080079c5
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	080079d5 	.word	0x080079d5
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079e5 	.word	0x080079e5
 80079c0:	080079ed 	.word	0x080079ed
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2200      	movs	r2, #0
 80079c8:	701a      	strb	r2, [r3, #0]
      break;
 80079ca:	e017      	b.n	80079fc <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2201      	movs	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
      break;
 80079d2:	e013      	b.n	80079fc <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2202      	movs	r2, #2
 80079d8:	701a      	strb	r2, [r3, #0]
      break;
 80079da:	e00f      	b.n	80079fc <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2203      	movs	r2, #3
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e00b      	b.n	80079fc <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2204      	movs	r2, #4
 80079e8:	701a      	strb	r2, [r3, #0]
      break;
 80079ea:	e007      	b.n	80079fc <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2205      	movs	r2, #5
 80079f0:	701a      	strb	r2, [r3, #0]
      break;
 80079f2:	e003      	b.n	80079fc <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
      break;
 80079fa:	bf00      	nop
  }

  return ret;
 80079fc:	68fb      	ldr	r3, [r7, #12]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop

08007a08 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8007a12:	f107 0208 	add.w	r2, r7, #8
 8007a16:	2303      	movs	r3, #3
 8007a18:	2128      	movs	r1, #40	; 0x28
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff fedb 	bl	80077d6 <lps22hb_read_reg>
 8007a20:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8007a22:	7abb      	ldrb	r3, [r7, #10]
 8007a24:	461a      	mov	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	7a7a      	ldrb	r2, [r7, #9]
 8007a32:	441a      	add	r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	021b      	lsls	r3, r3, #8
 8007a3e:	7a3a      	ldrb	r2, [r7, #8]
 8007a40:	441a      	add	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	021a      	lsls	r2, r3, #8
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	601a      	str	r2, [r3, #0]

  return ret;
 8007a50:	68fb      	ldr	r3, [r7, #12]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8007a64:	f107 0208 	add.w	r2, r7, #8
 8007a68:	2302      	movs	r3, #2
 8007a6a:	212b      	movs	r1, #43	; 0x2b
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff feb2 	bl	80077d6 <lps22hb_read_reg>
 8007a72:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8007a74:	7a7b      	ldrb	r3, [r7, #9]
 8007a76:	b21a      	sxth	r2, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	7a3b      	ldrb	r3, [r7, #8]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	b21a      	sxth	r2, r3
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	801a      	strh	r2, [r3, #0]

  return ret;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8007aaa:	2301      	movs	r3, #1
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	210f      	movs	r1, #15
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fe90 	bl	80077d6 <lps22hb_read_reg>
 8007ab6:	60f8      	str	r0, [r7, #12]

  return ret;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8007ace:	f107 0208 	add.w	r2, r7, #8
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	211a      	movs	r1, #26
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fe7d 	bl	80077d6 <lps22hb_read_reg>
 8007adc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10f      	bne.n	8007b04 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	7a3b      	ldrb	r3, [r7, #8]
 8007aee:	f362 0300 	bfi	r3, r2, #0, #1
 8007af2:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8007af4:	f107 0208 	add.w	r2, r7, #8
 8007af8:	2301      	movs	r3, #1
 8007afa:	211a      	movs	r1, #26
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff fe82 	bl	8007806 <lps22hb_write_reg>
 8007b02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007b1a:	f107 0208 	add.w	r2, r7, #8
 8007b1e:	2301      	movs	r3, #1
 8007b20:	2111      	movs	r1, #17
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff fe57 	bl	80077d6 <lps22hb_read_reg>
 8007b28:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10f      	bne.n	8007b50 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	7a3b      	ldrb	r3, [r7, #8]
 8007b3a:	f362 1304 	bfi	r3, r2, #4, #1
 8007b3e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007b40:	f107 0208 	add.w	r2, r7, #8
 8007b44:	2301      	movs	r3, #1
 8007b46:	2111      	movs	r1, #17
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fe5c 	bl	8007806 <lps22hb_write_reg>
 8007b4e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b50:	68fb      	ldr	r3, [r7, #12]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8007b70:	f04f 33ff 	mov.w	r3, #4294967295
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e051      	b.n	8007c1c <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689a      	ldr	r2, [r3, #8]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	7b1a      	ldrb	r2, [r3, #12]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	695a      	ldr	r2, [r3, #20]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	699a      	ldr	r2, [r3, #24]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a1d      	ldr	r2, [pc, #116]	; (8007c28 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8007bba:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d103      	bne.n	8007bda <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8007bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e020      	b.n	8007c1c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4798      	blx	r3
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e016      	b.n	8007c1c <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d112      	bne.n	8007c1c <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10d      	bne.n	8007c1c <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8007c00:	2301      	movs	r3, #1
 8007c02:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8007c04:	7afb      	ldrb	r3, [r7, #11]
 8007c06:	461a      	mov	r2, r3
 8007c08:	2123      	movs	r1, #35	; 0x23
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fb55 	bl	80082ba <LSM303AGR_ACC_Write_Reg>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8007c16:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1a:	e000      	b.n	8007c1e <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	08008ac9 	.word	0x08008ac9
 8007c2c:	08008b2b 	.word	0x08008b2b

08007c30 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3320      	adds	r3, #32
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 f94a 	bl	8008ed8 <lsm303agr_xl_block_data_update_set>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8007c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4e:	e02c      	b.n	8007caa <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3320      	adds	r3, #32
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f001 faed 	bl	8009236 <lsm303agr_xl_fifo_mode_set>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8007c62:	f04f 33ff 	mov.w	r3, #4294967295
 8007c66:	e020      	b.n	8007caa <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3320      	adds	r3, #32
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f84e 	bl	8008d18 <lsm303agr_xl_data_rate_set>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
 8007c86:	e010      	b.n	8007caa <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3320      	adds	r3, #32
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 f8c4 	bl	8008e1c <lsm303agr_xl_full_scale_set>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8007c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9e:	e004      	b.n	8007caa <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f87c 	bl	8007db8 <LSM303AGR_ACC_Disable>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	e008      	b.n	8007cde <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3320      	adds	r3, #32
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 fa55 	bl	80091a6 <lsm303agr_xl_device_id_get>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
 8007d06:	e000      	b.n	8007d0a <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2201      	movs	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2200      	movs	r2, #0
 8007d46:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	4a06      	ldr	r2, [pc, #24]	; (8007d6c <LSM303AGR_ACC_GetCapabilities+0x58>)
 8007d54:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	43c80000 	.word	0x43c80000

08007d70 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e014      	b.n	8007db0 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f103 0220 	add.w	r2, r3, #32
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f000 ffbf 	bl	8008d18 <lsm303agr_xl_data_rate_set>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d002      	beq.n	8007da6 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295
 8007da4:	e004      	b.n	8007db0 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e01f      	b.n	8007e0e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f103 0220 	add.w	r2, r3, #32
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3332      	adds	r3, #50	; 0x32
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f000 ffc2 	bl	8008d64 <lsm303agr_xl_data_rate_get>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8007de6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dea:	e010      	b.n	8007e0e <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3320      	adds	r3, #32
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 ff90 	bl	8008d18 <lsm303agr_xl_data_rate_set>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8007dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007e02:	e004      	b.n	8007e0e <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3320      	adds	r3, #32
 8007e28:	f107 020b 	add.w	r2, r7, #11
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 ff3e 	bl	8008cb0 <lsm303agr_xl_operating_mode_get>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8007e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e3e:	e031      	b.n	8007ea4 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8007e40:	7afb      	ldrb	r3, [r7, #11]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d01a      	beq.n	8007e7c <LSM303AGR_ACC_GetSensitivity+0x66>
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	dc22      	bgt.n	8007e90 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d00a      	beq.n	8007e68 <LSM303AGR_ACC_GetSensitivity+0x52>
 8007e52:	e01d      	b.n	8007e90 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fca8 	bl	80087ac <LSM303AGR_ACC_GetSensitivityHR>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d01a      	beq.n	8007e98 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8007e62:	f04f 33ff 	mov.w	r3, #4294967295
 8007e66:	e01d      	b.n	8007ea4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fce4 	bl	8008838 <LSM303AGR_ACC_GetSensitivityNM>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d012      	beq.n	8007e9c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8007e76:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7a:	e013      	b.n	8007ea4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fd20 	bl	80088c4 <LSM303AGR_ACC_GetSensitivityLP>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8007e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8e:	e009      	b.n	8007ea4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8007e90:	f04f 33ff 	mov.w	r3, #4294967295
 8007e94:	60fb      	str	r3, [r7, #12]
      break;
 8007e96:	e004      	b.n	8007ea2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e002      	b.n	8007ea2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e000      	b.n	8007ea2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007ea0:	bf00      	nop
  }

  return ret;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3320      	adds	r3, #32
 8007ebe:	f107 020b 	add.w	r2, r7, #11
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fef3 	bl	8008cb0 <lsm303agr_xl_operating_mode_get>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	e09d      	b.n	8008012 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3320      	adds	r3, #32
 8007eda:	f107 020a 	add.w	r2, r7, #10
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 ff3f 	bl	8008d64 <lsm303agr_xl_data_rate_get>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef0:	e08f      	b.n	8008012 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d147      	bne.n	8007f88 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8007ef8:	7abb      	ldrb	r3, [r7, #10]
 8007efa:	2b09      	cmp	r3, #9
 8007efc:	d840      	bhi.n	8007f80 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8007efe:	a201      	add	r2, pc, #4	; (adr r2, 8007f04 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8007f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f04:	08007f2d 	.word	0x08007f2d
 8007f08:	08007f37 	.word	0x08007f37
 8007f0c:	08007f41 	.word	0x08007f41
 8007f10:	08007f49 	.word	0x08007f49
 8007f14:	08007f51 	.word	0x08007f51
 8007f18:	08007f59 	.word	0x08007f59
 8007f1c:	08007f61 	.word	0x08007f61
 8007f20:	08007f69 	.word	0x08007f69
 8007f24:	08007f71 	.word	0x08007f71
 8007f28:	08007f79 	.word	0x08007f79
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]
        break;
 8007f34:	e06c      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007f3c:	601a      	str	r2, [r3, #0]
        break;
 8007f3e:	e067      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	4a36      	ldr	r2, [pc, #216]	; (800801c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8007f44:	601a      	str	r2, [r3, #0]
        break;
 8007f46:	e063      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	4a35      	ldr	r2, [pc, #212]	; (8008020 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8007f4c:	601a      	str	r2, [r3, #0]
        break;
 8007f4e:	e05f      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	4a34      	ldr	r2, [pc, #208]	; (8008024 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8007f54:	601a      	str	r2, [r3, #0]
        break;
 8007f56:	e05b      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	4a33      	ldr	r2, [pc, #204]	; (8008028 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8007f5c:	601a      	str	r2, [r3, #0]
        break;
 8007f5e:	e057      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	4a32      	ldr	r2, [pc, #200]	; (800802c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8007f64:	601a      	str	r2, [r3, #0]
        break;
 8007f66:	e053      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	4a31      	ldr	r2, [pc, #196]	; (8008030 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8007f6c:	601a      	str	r2, [r3, #0]
        break;
 8007f6e:	e04f      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	4a30      	ldr	r2, [pc, #192]	; (8008034 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8007f74:	601a      	str	r2, [r3, #0]
        break;
 8007f76:	e04b      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	4a2f      	ldr	r2, [pc, #188]	; (8008038 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8007f7c:	601a      	str	r2, [r3, #0]
        break;
 8007f7e:	e047      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8007f80:	f04f 33ff 	mov.w	r3, #4294967295
 8007f84:	60fb      	str	r3, [r7, #12]
        break;
 8007f86:	e043      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8007f88:	7abb      	ldrb	r3, [r7, #10]
 8007f8a:	2b09      	cmp	r3, #9
 8007f8c:	d83c      	bhi.n	8008008 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fbd 	.word	0x08007fbd
 8007f98:	08007fc7 	.word	0x08007fc7
 8007f9c:	08007fd1 	.word	0x08007fd1
 8007fa0:	08007fd9 	.word	0x08007fd9
 8007fa4:	08007fe1 	.word	0x08007fe1
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007ff1 	.word	0x08007ff1
 8007fb0:	08007ff9 	.word	0x08007ff9
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08008001 	.word	0x08008001
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
        break;
 8007fc4:	e024      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007fcc:	601a      	str	r2, [r3, #0]
        break;
 8007fce:	e01f      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	4a12      	ldr	r2, [pc, #72]	; (800801c <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8007fd4:	601a      	str	r2, [r3, #0]
        break;
 8007fd6:	e01b      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	4a11      	ldr	r2, [pc, #68]	; (8008020 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8007fdc:	601a      	str	r2, [r3, #0]
        break;
 8007fde:	e017      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	4a10      	ldr	r2, [pc, #64]	; (8008024 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8007fe4:	601a      	str	r2, [r3, #0]
        break;
 8007fe6:	e013      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	4a0f      	ldr	r2, [pc, #60]	; (8008028 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8007fec:	601a      	str	r2, [r3, #0]
        break;
 8007fee:	e00f      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	4a0e      	ldr	r2, [pc, #56]	; (800802c <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8007ff4:	601a      	str	r2, [r3, #0]
        break;
 8007ff6:	e00b      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8007ffc:	601a      	str	r2, [r3, #0]
        break;
 8007ffe:	e007      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4a0e      	ldr	r2, [pc, #56]	; (800803c <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8008004:	601a      	str	r2, [r3, #0]
        break;
 8008006:	e003      	b.n	8008010 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8008008:	f04f 33ff 	mov.w	r3, #4294967295
 800800c:	60fb      	str	r3, [r7, #12]
        break;
 800800e:	bf00      	nop
    }
  }

  return ret;
 8008010:	68fb      	ldr	r3, [r7, #12]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	41200000 	.word	0x41200000
 8008020:	41c80000 	.word	0x41c80000
 8008024:	42480000 	.word	0x42480000
 8008028:	42c80000 	.word	0x42c80000
 800802c:	43480000 	.word	0x43480000
 8008030:	43c80000 	.word	0x43c80000
 8008034:	44ca8000 	.word	0x44ca8000
 8008038:	45a80000 	.word	0x45a80000
 800803c:	44a80000 	.word	0x44a80000

08008040 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008052:	2b01      	cmp	r3, #1
 8008054:	d106      	bne.n	8008064 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008056:	ed97 0a00 	vldr	s0, [r7]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fc78 	bl	8008950 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8008060:	4603      	mov	r3, r0
 8008062:	e005      	b.n	8008070 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008064:	ed97 0a00 	vldr	s0, [r7]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fcd3 	bl	8008a14 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800806e:	4603      	mov	r3, r0
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3320      	adds	r3, #32
 800808a:	f107 020b 	add.w	r2, r7, #11
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f000 fee9 	bl	8008e68 <lsm303agr_xl_full_scale_get>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 800809c:	f04f 33ff 	mov.w	r3, #4294967295
 80080a0:	e023      	b.n	80080ea <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80080a2:	7afb      	ldrb	r3, [r7, #11]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d81b      	bhi.n	80080e0 <LSM303AGR_ACC_GetFullScale+0x68>
 80080a8:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <LSM303AGR_ACC_GetFullScale+0x38>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080c9 	.word	0x080080c9
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080d9 	.word	0x080080d9
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2202      	movs	r2, #2
 80080c4:	601a      	str	r2, [r3, #0]
      break;
 80080c6:	e00f      	b.n	80080e8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2204      	movs	r2, #4
 80080cc:	601a      	str	r2, [r3, #0]
      break;
 80080ce:	e00b      	b.n	80080e8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2208      	movs	r2, #8
 80080d4:	601a      	str	r2, [r3, #0]
      break;
 80080d6:	e007      	b.n	80080e8 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2210      	movs	r2, #16
 80080dc:	601a      	str	r2, [r3, #0]
      break;
 80080de:	e003      	b.n	80080e8 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	60fb      	str	r3, [r7, #12]
      break;
 80080e6:	bf00      	nop
  }

  return ret;
 80080e8:	68fb      	ldr	r3, [r7, #12]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop

080080f4 <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b02      	cmp	r3, #2
 8008102:	dd0b      	ble.n	800811c <LSM303AGR_ACC_SetFullScale+0x28>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b04      	cmp	r3, #4
 8008108:	dd06      	ble.n	8008118 <LSM303AGR_ACC_SetFullScale+0x24>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b08      	cmp	r3, #8
 800810e:	dc01      	bgt.n	8008114 <LSM303AGR_ACC_SetFullScale+0x20>
 8008110:	2302      	movs	r3, #2
 8008112:	e004      	b.n	800811e <LSM303AGR_ACC_SetFullScale+0x2a>
 8008114:	2303      	movs	r3, #3
 8008116:	e002      	b.n	800811e <LSM303AGR_ACC_SetFullScale+0x2a>
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <LSM303AGR_ACC_SetFullScale+0x2a>
 800811c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800811e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3320      	adds	r3, #32
 8008124:	7bfa      	ldrb	r2, [r7, #15]
 8008126:	4611      	mov	r1, r2
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fe77 	bl	8008e1c <lsm303agr_xl_full_scale_set>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8008134:	f04f 33ff 	mov.w	r3, #4294967295
 8008138:	e000      	b.n	800813c <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800814e:	2301      	movs	r3, #1
 8008150:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3320      	adds	r3, #32
 800815a:	f107 020f 	add.w	r2, r7, #15
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fda5 	bl	8008cb0 <lsm303agr_xl_operating_mode_get>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	e04a      	b.n	8008208 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d00c      	beq.n	8008192 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8008178:	2b02      	cmp	r3, #2
 800817a:	dc0e      	bgt.n	800819a <LSM303AGR_ACC_GetAxesRaw+0x56>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8008180:	2b01      	cmp	r3, #1
 8008182:	d003      	beq.n	800818c <LSM303AGR_ACC_GetAxesRaw+0x48>
 8008184:	e009      	b.n	800819a <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8008186:	2310      	movs	r3, #16
 8008188:	83fb      	strh	r3, [r7, #30]
      break;
 800818a:	e00a      	b.n	80081a2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	83fb      	strh	r3, [r7, #30]
      break;
 8008190:	e007      	b.n	80081a2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8008192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008196:	83fb      	strh	r3, [r7, #30]
      break;
 8008198:	e003      	b.n	80081a2 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	61bb      	str	r3, [r7, #24]
      break;
 80081a0:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a8:	d101      	bne.n	80081ae <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	e02c      	b.n	8008208 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3320      	adds	r3, #32
 80081b2:	f107 0210 	add.w	r2, r7, #16
 80081b6:	4611      	mov	r1, r2
 80081b8:	4618      	mov	r0, r3
 80081ba:	f000 feb3 	bl	8008f24 <lsm303agr_acceleration_raw_get>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80081c4:	f04f 33ff 	mov.w	r3, #4294967295
 80081c8:	e01e      	b.n	8008208 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80081ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80081d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80081d8:	b21a      	sxth	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80081de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80081e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80081ec:	b21a      	sxth	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80081f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80081fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8008200:	b21a      	sxth	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	809a      	strh	r2, [r3, #4]

  return ret;
 8008206:	69bb      	ldr	r3, [r7, #24]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8008220:	f107 0310 	add.w	r3, r7, #16
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff ff8c 	bl	8008144 <LSM303AGR_ACC_GetAxesRaw>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	e03c      	b.n	80082b2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff fde9 	bl	8007e16 <LSM303AGR_ACC_GetSensitivity>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	e030      	b.n	80082b2 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8008250:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800825c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008268:	ee17 2a90 	vmov	r2, s15
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8008270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008274:	ee07 3a90 	vmov	s15, r3
 8008278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800827c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008288:	ee17 2a90 	vmov	r2, s15
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8008290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800829c:	edd7 7a03 	vldr	s15, [r7, #12]
 80082a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082a8:	ee17 2a90 	vmov	r2, s15
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
 80082c6:	4613      	mov	r3, r2
 80082c8:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f103 0020 	add.w	r0, r3, #32
 80082d0:	1cba      	adds	r2, r7, #2
 80082d2:	78f9      	ldrb	r1, [r7, #3]
 80082d4:	2301      	movs	r3, #1
 80082d6:	f000 fcd3 	bl	8008c80 <lsm303agr_write_reg>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	e000      	b.n	80082e8 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d103      	bne.n	800830c <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8008304:	f04f 33ff 	mov.w	r3, #4294967295
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e04b      	b.n	80083a4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	7b1a      	ldrb	r2, [r3, #12]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	691a      	ldr	r2, [r3, #16]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8008348:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a19      	ldr	r2, [pc, #100]	; (80083b4 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800834e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800835e:	f04f 33ff 	mov.w	r3, #4294967295
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e01e      	b.n	80083a4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4798      	blx	r3
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8008372:	f04f 33ff 	mov.w	r3, #4294967295
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e014      	b.n	80083a4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10b      	bne.n	80083a4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	3320      	adds	r3, #32
 8008390:	2101      	movs	r1, #1
 8008392:	4618      	mov	r0, r3
 8008394:	f000 ff75 	bl	8009282 <lsm303agr_mag_i2c_interface_set>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	e000      	b.n	80083a6 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	08008b8d 	.word	0x08008b8d
 80083b4:	08008bef 	.word	0x08008bef

080083b8 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3320      	adds	r3, #32
 80083c4:	2101      	movs	r1, #1
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fe7c 	bl	80090c4 <lsm303agr_mag_block_data_update_set>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80083d2:	f04f 33ff 	mov.w	r3, #4294967295
 80083d6:	e028      	b.n	800842a <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3320      	adds	r3, #32
 80083dc:	2102      	movs	r1, #2
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fdeb 	bl	8008fba <lsm303agr_mag_operating_mode_set>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80083ea:	f04f 33ff 	mov.w	r3, #4294967295
 80083ee:	e01c      	b.n	800842a <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3320      	adds	r3, #32
 80083f4:	2103      	movs	r1, #3
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fe05 	bl	8009006 <lsm303agr_mag_data_rate_set>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8008402:	f04f 33ff 	mov.w	r3, #4294967295
 8008406:	e010      	b.n	800842a <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3320      	adds	r3, #32
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f000 feeb 	bl	80091ea <lsm303agr_mag_self_test_set>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	e004      	b.n	800842a <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b082      	sub	sp, #8
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f874 	bl	8008528 <LSM303AGR_MAG_Disable>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8008446:	f04f 33ff 	mov.w	r3, #4294967295
 800844a:	e004      	b.n	8008456 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3320      	adds	r3, #32
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 feaa 	bl	80091c8 <lsm303agr_mag_device_id_get>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800847a:	f04f 33ff 	mov.w	r3, #4294967295
 800847e:	e000      	b.n	8008482 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2200      	movs	r2, #0
 800849a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2200      	movs	r2, #0
 80084a0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2201      	movs	r2, #1
 80084a6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2200      	movs	r2, #0
 80084ac:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2200      	movs	r2, #0
 80084b2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2200      	movs	r2, #0
 80084b8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2232      	movs	r2, #50	; 0x32
 80084be:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	f04f 0200 	mov.w	r2, #0
 80084c6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	f04f 0200 	mov.w	r2, #0
 80084ce:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	4a04      	ldr	r2, [pc, #16]	; (80084e4 <LSM303AGR_MAG_GetCapabilities+0x58>)
 80084d4:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	42c80000 	.word	0x42c80000

080084e8 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e010      	b.n	8008520 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3320      	adds	r3, #32
 8008502:	2100      	movs	r1, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fd58 	bl	8008fba <lsm303agr_mag_operating_mode_set>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	e004      	b.n	8008520 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	e010      	b.n	8008560 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	3320      	adds	r3, #32
 8008542:	2102      	movs	r1, #2
 8008544:	4618      	mov	r0, r3
 8008546:	f000 fd38 	bl	8008fba <lsm303agr_mag_operating_mode_set>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008550:	f04f 33ff 	mov.w	r3, #4294967295
 8008554:	e004      	b.n	8008560 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008578:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3320      	adds	r3, #32
 800859a:	f107 020b 	add.w	r2, r7, #11
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fd57 	bl	8009054 <lsm303agr_mag_data_rate_get>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80085ac:	f04f 33ff 	mov.w	r3, #4294967295
 80085b0:	e023      	b.n	80085fa <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d81b      	bhi.n	80085f0 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085d1 	.word	0x080085d1
 80085c4:	080085d9 	.word	0x080085d9
 80085c8:	080085e1 	.word	0x080085e1
 80085cc:	080085e9 	.word	0x080085e9
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80085d4:	601a      	str	r2, [r3, #0]
      break;
 80085d6:	e00f      	b.n	80085f8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	4a0b      	ldr	r2, [pc, #44]	; (8008608 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80085dc:	601a      	str	r2, [r3, #0]
      break;
 80085de:	e00b      	b.n	80085f8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	4a0a      	ldr	r2, [pc, #40]	; (800860c <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80085e4:	601a      	str	r2, [r3, #0]
      break;
 80085e6:	e007      	b.n	80085f8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	4a09      	ldr	r2, [pc, #36]	; (8008610 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80085ec:	601a      	str	r2, [r3, #0]
      break;
 80085ee:	e003      	b.n	80085f8 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80085f0:	f04f 33ff 	mov.w	r3, #4294967295
 80085f4:	60fb      	str	r3, [r7, #12]
      break;
 80085f6:	bf00      	nop
  }

  return ret;
 80085f8:	68fb      	ldr	r3, [r7, #12]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	41200000 	.word	0x41200000
 8008608:	41a00000 	.word	0x41a00000
 800860c:	42480000 	.word	0x42480000
 8008610:	42c80000 	.word	0x42c80000

08008614 <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8008620:	edd7 7a00 	vldr	s15, [r7]
 8008624:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008630:	d801      	bhi.n	8008636 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8008632:	2300      	movs	r3, #0
 8008634:	e016      	b.n	8008664 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008636:	edd7 7a00 	vldr	s15, [r7]
 800863a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800863e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	d801      	bhi.n	800864c <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8008648:	2301      	movs	r3, #1
 800864a:	e00b      	b.n	8008664 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800864c:	edd7 7a00 	vldr	s15, [r7]
 8008650:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800868c <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8008654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865c:	d801      	bhi.n	8008662 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800865e:	2302      	movs	r3, #2
 8008660:	e000      	b.n	8008664 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008662:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8008664:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3320      	adds	r3, #32
 800866a:	7bfa      	ldrb	r2, [r7, #15]
 800866c:	4611      	mov	r1, r2
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fcc9 	bl	8009006 <lsm303agr_mag_data_rate_set>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 800867a:	f04f 33ff 	mov.w	r3, #4294967295
 800867e:	e000      	b.n	8008682 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	42480000 	.word	0x42480000

08008690 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2232      	movs	r2, #50	; 0x32
 800869e:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3320      	adds	r3, #32
 80086d4:	f107 0208 	add.w	r2, r7, #8
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fd18 	bl	8009110 <lsm303agr_magnetic_raw_get>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ea:	e00c      	b.n	8008706 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80086ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80086f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80086fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3320      	adds	r3, #32
 800871c:	f107 0210 	add.w	r2, r7, #16
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fcf4 	bl	8009110 <lsm303agr_magnetic_raw_get>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800872e:	f04f 33ff 	mov.w	r3, #4294967295
 8008732:	e036      	b.n	80087a2 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8008734:	f107 030c 	add.w	r3, r7, #12
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ff14 	bl	8008568 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008740:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008744:	ee07 3a90 	vmov	s15, r3
 8008748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800874c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008758:	ee17 2a90 	vmov	r2, s15
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008760:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800876c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008778:	ee17 2a90 	vmov	r2, s15
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008780:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800878c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008798:	ee17 2a90 	vmov	r2, s15
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3320      	adds	r3, #32
 80087be:	f107 020b 	add.w	r2, r7, #11
 80087c2:	4611      	mov	r1, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fb4f 	bl	8008e68 <lsm303agr_xl_full_scale_get>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80087d0:	f04f 33ff 	mov.w	r3, #4294967295
 80087d4:	e023      	b.n	800881e <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d81b      	bhi.n	8008814 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	080087fd 	.word	0x080087fd
 80087ec:	08008805 	.word	0x08008805
 80087f0:	0800880d 	.word	0x0800880d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80087f8:	601a      	str	r2, [r3, #0]
      break;
 80087fa:	e00f      	b.n	800881c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	4a0b      	ldr	r2, [pc, #44]	; (800882c <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8008800:	601a      	str	r2, [r3, #0]
      break;
 8008802:	e00b      	b.n	800881c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8008808:	601a      	str	r2, [r3, #0]
      break;
 800880a:	e007      	b.n	800881c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	4a09      	ldr	r2, [pc, #36]	; (8008834 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8008810:	601a      	str	r2, [r3, #0]
      break;
 8008812:	e003      	b.n	800881c <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295
 8008818:	60fb      	str	r3, [r7, #12]
      break;
 800881a:	bf00      	nop
  }

  return ret;
 800881c:	68fb      	ldr	r3, [r7, #12]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	3f7ae148 	.word	0x3f7ae148
 800882c:	3ff9999a 	.word	0x3ff9999a
 8008830:	4079999a 	.word	0x4079999a
 8008834:	413b851f 	.word	0x413b851f

08008838 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3320      	adds	r3, #32
 800884a:	f107 020b 	add.w	r2, r7, #11
 800884e:	4611      	mov	r1, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fb09 	bl	8008e68 <lsm303agr_xl_full_scale_get>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 800885c:	f04f 33ff 	mov.w	r3, #4294967295
 8008860:	e023      	b.n	80088aa <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	2b03      	cmp	r3, #3
 8008866:	d81b      	bhi.n	80088a0 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008881 	.word	0x08008881
 8008874:	08008889 	.word	0x08008889
 8008878:	08008891 	.word	0x08008891
 800887c:	08008899 	.word	0x08008899
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	4a0c      	ldr	r2, [pc, #48]	; (80088b4 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8008884:	601a      	str	r2, [r3, #0]
      break;
 8008886:	e00f      	b.n	80088a8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	4a0b      	ldr	r2, [pc, #44]	; (80088b8 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 800888c:	601a      	str	r2, [r3, #0]
      break;
 800888e:	e00b      	b.n	80088a8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8008894:	601a      	str	r2, [r3, #0]
      break;
 8008896:	e007      	b.n	80088a8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 800889c:	601a      	str	r2, [r3, #0]
      break;
 800889e:	e003      	b.n	80088a8 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80088a0:	f04f 33ff 	mov.w	r3, #4294967295
 80088a4:	60fb      	str	r3, [r7, #12]
      break;
 80088a6:	bf00      	nop
  }

  return ret;
 80088a8:	68fb      	ldr	r3, [r7, #12]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	4079999a 	.word	0x4079999a
 80088b8:	40fa3d71 	.word	0x40fa3d71
 80088bc:	417a147b 	.word	0x417a147b
 80088c0:	423b999a 	.word	0x423b999a

080088c4 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3320      	adds	r3, #32
 80088d6:	f107 020b 	add.w	r2, r7, #11
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 fac3 	bl	8008e68 <lsm303agr_xl_full_scale_get>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d002      	beq.n	80088ee <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80088e8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ec:	e023      	b.n	8008936 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d81b      	bhi.n	800892c <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	0800890d 	.word	0x0800890d
 8008900:	08008915 	.word	0x08008915
 8008904:	0800891d 	.word	0x0800891d
 8008908:	08008925 	.word	0x08008925
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	4a0c      	ldr	r2, [pc, #48]	; (8008940 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8008910:	601a      	str	r2, [r3, #0]
      break;
 8008912:	e00f      	b.n	8008934 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	4a0b      	ldr	r2, [pc, #44]	; (8008944 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8008918:	601a      	str	r2, [r3, #0]
      break;
 800891a:	e00b      	b.n	8008934 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8008920:	601a      	str	r2, [r3, #0]
      break;
 8008922:	e007      	b.n	8008934 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	4a09      	ldr	r2, [pc, #36]	; (800894c <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8008928:	601a      	str	r2, [r3, #0]
      break;
 800892a:	e003      	b.n	8008934 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800892c:	f04f 33ff 	mov.w	r3, #4294967295
 8008930:	60fb      	str	r3, [r7, #12]
      break;
 8008932:	bf00      	nop
  }

  return ret;
 8008934:	68fb      	ldr	r3, [r7, #12]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	417a147b 	.word	0x417a147b
 8008944:	41fa147b 	.word	0x41fa147b
 8008948:	427a147b 	.word	0x427a147b
 800894c:	433b947b 	.word	0x433b947b

08008950 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800895c:	edd7 7a00 	vldr	s15, [r7]
 8008960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896c:	d801      	bhi.n	8008972 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800896e:	2301      	movs	r3, #1
 8008970:	e037      	b.n	80089e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008972:	edd7 7a00 	vldr	s15, [r7]
 8008976:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800897a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800897e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008982:	d801      	bhi.n	8008988 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008984:	2302      	movs	r3, #2
 8008986:	e02c      	b.n	80089e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008988:	edd7 7a00 	vldr	s15, [r7]
 800898c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008990:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008998:	d801      	bhi.n	800899e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800899a:	2303      	movs	r3, #3
 800899c:	e021      	b.n	80089e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800899e:	edd7 7a00 	vldr	s15, [r7]
 80089a2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8008a08 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80089a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ae:	d801      	bhi.n	80089b4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80089b0:	2304      	movs	r3, #4
 80089b2:	e016      	b.n	80089e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80089b4:	edd7 7a00 	vldr	s15, [r7]
 80089b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008a0c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80089bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c4:	d801      	bhi.n	80089ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80089c6:	2305      	movs	r3, #5
 80089c8:	e00b      	b.n	80089e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80089ca:	edd7 7a00 	vldr	s15, [r7]
 80089ce:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008a10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80089d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089da:	d801      	bhi.n	80089e0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80089dc:	2306      	movs	r3, #6
 80089de:	e000      	b.n	80089e2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80089e0:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80089e2:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3320      	adds	r3, #32
 80089e8:	7bfa      	ldrb	r2, [r7, #15]
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f993 	bl	8008d18 <lsm303agr_xl_data_rate_set>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80089f8:	f04f 33ff 	mov.w	r3, #4294967295
 80089fc:	e000      	b.n	8008a00 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	42480000 	.word	0x42480000
 8008a0c:	42c80000 	.word	0x42c80000
 8008a10:	43480000 	.word	0x43480000

08008a14 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8008a20:	edd7 7a00 	vldr	s15, [r7]
 8008a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a30:	d801      	bhi.n	8008a36 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e037      	b.n	8008aa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008a36:	edd7 7a00 	vldr	s15, [r7]
 8008a3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	d801      	bhi.n	8008a4c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e02c      	b.n	8008aa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008a4c:	edd7 7a00 	vldr	s15, [r7]
 8008a50:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5c:	d801      	bhi.n	8008a62 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e021      	b.n	8008aa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008a62:	edd7 7a00 	vldr	s15, [r7]
 8008a66:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008abc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8008a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a72:	d801      	bhi.n	8008a78 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008a74:	2304      	movs	r3, #4
 8008a76:	e016      	b.n	8008aa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008a78:	edd7 7a00 	vldr	s15, [r7]
 8008a7c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008ac0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a88:	d801      	bhi.n	8008a8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008a8a:	2305      	movs	r3, #5
 8008a8c:	e00b      	b.n	8008aa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008a8e:	edd7 7a00 	vldr	s15, [r7]
 8008a92:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008ac4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8008a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9e:	d801      	bhi.n	8008aa4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008aa0:	2306      	movs	r3, #6
 8008aa2:	e000      	b.n	8008aa6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008aa4:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	42480000 	.word	0x42480000
 8008ac0:	42c80000 	.word	0x42c80000
 8008ac4:	43480000 	.word	0x43480000

08008ac8 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ac8:	b590      	push	{r4, r7, lr}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	607a      	str	r2, [r7, #4]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	72fb      	strb	r3, [r7, #11]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10e      	bne.n	8008b06 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	695c      	ldr	r4, [r3, #20]
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	7b1b      	ldrb	r3, [r3, #12]
 8008af0:	b298      	uxth	r0, r3
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	b299      	uxth	r1, r3
 8008afc:	893b      	ldrh	r3, [r7, #8]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	47a0      	blx	r4
 8008b02:	4603      	mov	r3, r0
 8008b04:	e00d      	b.n	8008b22 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	695c      	ldr	r4, [r3, #20]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	7b1b      	ldrb	r3, [r3, #12]
 8008b0e:	b298      	uxth	r0, r3
 8008b10:	7afb      	ldrb	r3, [r7, #11]
 8008b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	b299      	uxth	r1, r3
 8008b1a:	893b      	ldrh	r3, [r7, #8]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	47a0      	blx	r4
 8008b20:	4603      	mov	r3, r0
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd90      	pop	{r4, r7, pc}

08008b2a <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008b2a:	b590      	push	{r4, r7, lr}
 8008b2c:	b087      	sub	sp, #28
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	461a      	mov	r2, r3
 8008b36:	460b      	mov	r3, r1
 8008b38:	72fb      	strb	r3, [r7, #11]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10e      	bne.n	8008b68 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	691c      	ldr	r4, [r3, #16]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	7b1b      	ldrb	r3, [r3, #12]
 8008b52:	b298      	uxth	r0, r3
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	b299      	uxth	r1, r3
 8008b5e:	893b      	ldrh	r3, [r7, #8]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	47a0      	blx	r4
 8008b64:	4603      	mov	r3, r0
 8008b66:	e00d      	b.n	8008b84 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	691c      	ldr	r4, [r3, #16]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	7b1b      	ldrb	r3, [r3, #12]
 8008b70:	b298      	uxth	r0, r3
 8008b72:	7afb      	ldrb	r3, [r7, #11]
 8008b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	b299      	uxth	r1, r3
 8008b7c:	893b      	ldrh	r3, [r7, #8]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	47a0      	blx	r4
 8008b82:	4603      	mov	r3, r0
  }
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	371c      	adds	r7, #28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd90      	pop	{r4, r7, pc}

08008b8c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008b8c:	b590      	push	{r4, r7, lr}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	607a      	str	r2, [r7, #4]
 8008b96:	461a      	mov	r2, r3
 8008b98:	460b      	mov	r3, r1
 8008b9a:	72fb      	strb	r3, [r7, #11]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10e      	bne.n	8008bca <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	695c      	ldr	r4, [r3, #20]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	7b1b      	ldrb	r3, [r3, #12]
 8008bb4:	b298      	uxth	r0, r3
 8008bb6:	7afb      	ldrb	r3, [r7, #11]
 8008bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	b299      	uxth	r1, r3
 8008bc0:	893b      	ldrh	r3, [r7, #8]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	47a0      	blx	r4
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	e00d      	b.n	8008be6 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	695c      	ldr	r4, [r3, #20]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	7b1b      	ldrb	r3, [r3, #12]
 8008bd2:	b298      	uxth	r0, r3
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	b299      	uxth	r1, r3
 8008bde:	893b      	ldrh	r3, [r7, #8]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	47a0      	blx	r4
 8008be4:	4603      	mov	r3, r0
  }
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}

08008bee <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008bee:	b590      	push	{r4, r7, lr}
 8008bf0:	b087      	sub	sp, #28
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	72fb      	strb	r3, [r7, #11]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10e      	bne.n	8008c2c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	691c      	ldr	r4, [r3, #16]
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	7b1b      	ldrb	r3, [r3, #12]
 8008c16:	b298      	uxth	r0, r3
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	b299      	uxth	r1, r3
 8008c22:	893b      	ldrh	r3, [r7, #8]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	47a0      	blx	r4
 8008c28:	4603      	mov	r3, r0
 8008c2a:	e00d      	b.n	8008c48 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	691c      	ldr	r4, [r3, #16]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	7b1b      	ldrb	r3, [r3, #12]
 8008c34:	b298      	uxth	r0, r3
 8008c36:	7afb      	ldrb	r3, [r7, #11]
 8008c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	b299      	uxth	r1, r3
 8008c40:	893b      	ldrh	r3, [r7, #8]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	47a0      	blx	r4
 8008c46:	4603      	mov	r3, r0
  }
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd90      	pop	{r4, r7, pc}

08008c50 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	72fb      	strb	r3, [r7, #11]
 8008c60:	4613      	mov	r3, r2
 8008c62:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685c      	ldr	r4, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68d8      	ldr	r0, [r3, #12]
 8008c6c:	893b      	ldrh	r3, [r7, #8]
 8008c6e:	7af9      	ldrb	r1, [r7, #11]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	47a0      	blx	r4
 8008c74:	6178      	str	r0, [r7, #20]

  return ret;
 8008c76:	697b      	ldr	r3, [r7, #20]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd90      	pop	{r4, r7, pc}

08008c80 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8008c80:	b590      	push	{r4, r7, lr}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	72fb      	strb	r3, [r7, #11]
 8008c90:	4613      	mov	r3, r2
 8008c92:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681c      	ldr	r4, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68d8      	ldr	r0, [r3, #12]
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	7af9      	ldrb	r1, [r7, #11]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	47a0      	blx	r4
 8008ca4:	6178      	str	r0, [r7, #20]

  return ret;
 8008ca6:	697b      	ldr	r3, [r7, #20]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd90      	pop	{r4, r7, pc}

08008cb0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008cba:	f107 020c 	add.w	r2, r7, #12
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	2120      	movs	r1, #32
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff ffc4 	bl	8008c50 <lsm303agr_read_reg>
 8008cc8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d107      	bne.n	8008ce0 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008cd0:	f107 0210 	add.w	r2, r7, #16
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	2123      	movs	r1, #35	; 0x23
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ffb9 	bl	8008c50 <lsm303agr_read_reg>
 8008cde:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8008ce0:	7b3b      	ldrb	r3, [r7, #12]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	701a      	strb	r2, [r3, #0]
 8008cf2:	e00c      	b.n	8008d0e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8008cf4:	7c3b      	ldrb	r3, [r7, #16]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e002      	b.n	8008d0e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008d0e:	697b      	ldr	r3, [r7, #20]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008d24:	f107 0208 	add.w	r2, r7, #8
 8008d28:	2301      	movs	r3, #1
 8008d2a:	2120      	movs	r1, #32
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff ff8f 	bl	8008c50 <lsm303agr_read_reg>
 8008d32:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10f      	bne.n	8008d5a <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	7a3b      	ldrb	r3, [r7, #8]
 8008d44:	f362 1307 	bfi	r3, r2, #4, #4
 8008d48:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008d4a:	f107 0208 	add.w	r2, r7, #8
 8008d4e:	2301      	movs	r3, #1
 8008d50:	2120      	movs	r1, #32
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff ff94 	bl	8008c80 <lsm303agr_write_reg>
 8008d58:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008d6e:	f107 0208 	add.w	r2, r7, #8
 8008d72:	2301      	movs	r3, #1
 8008d74:	2120      	movs	r1, #32
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff ff6a 	bl	8008c50 <lsm303agr_read_reg>
 8008d7c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 8008d7e:	7a3b      	ldrb	r3, [r7, #8]
 8008d80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b09      	cmp	r3, #9
 8008d88:	d83e      	bhi.n	8008e08 <lsm303agr_xl_data_rate_get+0xa4>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <lsm303agr_xl_data_rate_get+0x2c>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	08008dc9 	.word	0x08008dc9
 8008d9c:	08008dd1 	.word	0x08008dd1
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008de1 	.word	0x08008de1
 8008da8:	08008de9 	.word	0x08008de9
 8008dac:	08008df1 	.word	0x08008df1
 8008db0:	08008df9 	.word	0x08008df9
 8008db4:	08008e01 	.word	0x08008e01
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
      break;
 8008dbe:	e027      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	701a      	strb	r2, [r3, #0]
      break;
 8008dc6:	e023      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	701a      	strb	r2, [r3, #0]
      break;
 8008dce:	e01f      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	701a      	strb	r2, [r3, #0]
      break;
 8008dd6:	e01b      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	701a      	strb	r2, [r3, #0]
      break;
 8008dde:	e017      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2205      	movs	r2, #5
 8008de4:	701a      	strb	r2, [r3, #0]
      break;
 8008de6:	e013      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2206      	movs	r2, #6
 8008dec:	701a      	strb	r2, [r3, #0]
      break;
 8008dee:	e00f      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2207      	movs	r2, #7
 8008df4:	701a      	strb	r2, [r3, #0]
      break;
 8008df6:	e00b      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	701a      	strb	r2, [r3, #0]
      break;
 8008dfe:	e007      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2209      	movs	r2, #9
 8008e04:	701a      	strb	r2, [r3, #0]
      break;
 8008e06:	e003      	b.n	8008e10 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
      break;
 8008e0e:	bf00      	nop
  }

  return ret;
 8008e10:	68fb      	ldr	r3, [r7, #12]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop

08008e1c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008e28:	f107 0208 	add.w	r2, r7, #8
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	2123      	movs	r1, #35	; 0x23
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff ff0d 	bl	8008c50 <lsm303agr_read_reg>
 8008e36:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10f      	bne.n	8008e5e <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	7a3b      	ldrb	r3, [r7, #8]
 8008e48:	f362 1305 	bfi	r3, r2, #4, #2
 8008e4c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008e4e:	f107 0208 	add.w	r2, r7, #8
 8008e52:	2301      	movs	r3, #1
 8008e54:	2123      	movs	r1, #35	; 0x23
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7ff ff12 	bl	8008c80 <lsm303agr_write_reg>
 8008e5c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008e72:	f107 0208 	add.w	r2, r7, #8
 8008e76:	2301      	movs	r3, #1
 8008e78:	2123      	movs	r1, #35	; 0x23
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fee8 	bl	8008c50 <lsm303agr_read_reg>
 8008e80:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8008e82:	7a3b      	ldrb	r3, [r7, #8]
 8008e84:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d81a      	bhi.n	8008ec4 <lsm303agr_xl_full_scale_get+0x5c>
 8008e8e:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <lsm303agr_xl_full_scale_get+0x2c>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ea5 	.word	0x08008ea5
 8008e98:	08008ead 	.word	0x08008ead
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ebd 	.word	0x08008ebd
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
      break;
 8008eaa:	e00f      	b.n	8008ecc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
      break;
 8008eb2:	e00b      	b.n	8008ecc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	701a      	strb	r2, [r3, #0]
      break;
 8008eba:	e007      	b.n	8008ecc <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	701a      	strb	r2, [r3, #0]
      break;
 8008ec2:	e003      	b.n	8008ecc <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
      break;
 8008eca:	bf00      	nop
  }

  return ret;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop

08008ed8 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008ee4:	f107 0208 	add.w	r2, r7, #8
 8008ee8:	2301      	movs	r3, #1
 8008eea:	2123      	movs	r1, #35	; 0x23
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff feaf 	bl	8008c50 <lsm303agr_read_reg>
 8008ef2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10f      	bne.n	8008f1a <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	7a3b      	ldrb	r3, [r7, #8]
 8008f04:	f362 13c7 	bfi	r3, r2, #7, #1
 8008f08:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008f0a:	f107 0208 	add.w	r2, r7, #8
 8008f0e:	2301      	movs	r3, #1
 8008f10:	2123      	movs	r1, #35	; 0x23
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff feb4 	bl	8008c80 <lsm303agr_write_reg>
 8008f18:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8008f2e:	f107 020c 	add.w	r2, r7, #12
 8008f32:	2306      	movs	r3, #6
 8008f34:	2128      	movs	r1, #40	; 0x28
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff fe8a 	bl	8008c50 <lsm303agr_read_reg>
 8008f3c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008f3e:	7b7b      	ldrb	r3, [r7, #13]
 8008f40:	b21a      	sxth	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	7b3b      	ldrb	r3, [r7, #12]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	b21a      	sxth	r2, r3
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008f60:	7bfa      	ldrb	r2, [r7, #15]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	3302      	adds	r3, #2
 8008f66:	b212      	sxth	r2, r2
 8008f68:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	3302      	adds	r3, #2
 8008f84:	b212      	sxth	r2, r2
 8008f86:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008f88:	7c7a      	ldrb	r2, [r7, #17]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	b212      	sxth	r2, r2
 8008f90:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	3304      	adds	r3, #4
 8008f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	7c3b      	ldrb	r3, [r7, #16]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	3304      	adds	r3, #4
 8008fac:	b212      	sxth	r2, r2
 8008fae:	801a      	strh	r2, [r3, #0]

  return ret;
 8008fb0:	697b      	ldr	r3, [r7, #20]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008fc6:	f107 0208 	add.w	r2, r7, #8
 8008fca:	2301      	movs	r3, #1
 8008fcc:	2160      	movs	r1, #96	; 0x60
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff fe3e 	bl	8008c50 <lsm303agr_read_reg>
 8008fd4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10f      	bne.n	8008ffc <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	7a3b      	ldrb	r3, [r7, #8]
 8008fe6:	f362 0301 	bfi	r3, r2, #0, #2
 8008fea:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008fec:	f107 0208 	add.w	r2, r7, #8
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	2160      	movs	r1, #96	; 0x60
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff fe43 	bl	8008c80 <lsm303agr_write_reg>
 8008ffa:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8009012:	f107 0208 	add.w	r2, r7, #8
 8009016:	2301      	movs	r3, #1
 8009018:	2160      	movs	r1, #96	; 0x60
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fe18 	bl	8008c50 <lsm303agr_read_reg>
 8009020:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10f      	bne.n	8009048 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	b2da      	uxtb	r2, r3
 8009030:	7a3b      	ldrb	r3, [r7, #8]
 8009032:	f362 0383 	bfi	r3, r2, #2, #2
 8009036:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8009038:	f107 0208 	add.w	r2, r7, #8
 800903c:	2301      	movs	r3, #1
 800903e:	2160      	movs	r1, #96	; 0x60
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fe1d 	bl	8008c80 <lsm303agr_write_reg>
 8009046:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8009048:	68fb      	ldr	r3, [r7, #12]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
	...

08009054 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800905e:	f107 0208 	add.w	r2, r7, #8
 8009062:	2301      	movs	r3, #1
 8009064:	2160      	movs	r1, #96	; 0x60
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fdf2 	bl	8008c50 <lsm303agr_read_reg>
 800906c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 800906e:	7a3b      	ldrb	r3, [r7, #8]
 8009070:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b03      	cmp	r3, #3
 8009078:	d81a      	bhi.n	80090b0 <lsm303agr_mag_data_rate_get+0x5c>
 800907a:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <lsm303agr_mag_data_rate_get+0x2c>)
 800907c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009080:	08009091 	.word	0x08009091
 8009084:	08009099 	.word	0x08009099
 8009088:	080090a1 	.word	0x080090a1
 800908c:	080090a9 	.word	0x080090a9
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
      break;
 8009096:	e00f      	b.n	80090b8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	2201      	movs	r2, #1
 800909c:	701a      	strb	r2, [r3, #0]
      break;
 800909e:	e00b      	b.n	80090b8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	2202      	movs	r2, #2
 80090a4:	701a      	strb	r2, [r3, #0]
      break;
 80090a6:	e007      	b.n	80090b8 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2203      	movs	r2, #3
 80090ac:	701a      	strb	r2, [r3, #0]
      break;
 80090ae:	e003      	b.n	80090b8 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
      break;
 80090b6:	bf00      	nop
  }

  return ret;
 80090b8:	68fb      	ldr	r3, [r7, #12]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop

080090c4 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80090d0:	f107 0208 	add.w	r2, r7, #8
 80090d4:	2301      	movs	r3, #1
 80090d6:	2162      	movs	r1, #98	; 0x62
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fdb9 	bl	8008c50 <lsm303agr_read_reg>
 80090de:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10f      	bne.n	8009106 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	7a3b      	ldrb	r3, [r7, #8]
 80090f0:	f362 1304 	bfi	r3, r2, #4, #1
 80090f4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80090f6:	f107 0208 	add.w	r2, r7, #8
 80090fa:	2301      	movs	r3, #1
 80090fc:	2162      	movs	r1, #98	; 0x62
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7ff fdbe 	bl	8008c80 <lsm303agr_write_reg>
 8009104:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009106:	68fb      	ldr	r3, [r7, #12]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800911a:	f107 020c 	add.w	r2, r7, #12
 800911e:	2306      	movs	r3, #6
 8009120:	2168      	movs	r1, #104	; 0x68
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7ff fd94 	bl	8008c50 <lsm303agr_read_reg>
 8009128:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800912a:	7b7b      	ldrb	r3, [r7, #13]
 800912c:	b21a      	sxth	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009138:	b29b      	uxth	r3, r3
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	b29a      	uxth	r2, r3
 800913e:	7b3b      	ldrb	r3, [r7, #12]
 8009140:	b29b      	uxth	r3, r3
 8009142:	4413      	add	r3, r2
 8009144:	b29b      	uxth	r3, r3
 8009146:	b21a      	sxth	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800914c:	7bfa      	ldrb	r2, [r7, #15]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	3302      	adds	r3, #2
 8009152:	b212      	sxth	r2, r2
 8009154:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	3302      	adds	r3, #2
 800915a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800915e:	b29b      	uxth	r3, r3
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	b29a      	uxth	r2, r3
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	b29b      	uxth	r3, r3
 8009168:	4413      	add	r3, r2
 800916a:	b29a      	uxth	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	3302      	adds	r3, #2
 8009170:	b212      	sxth	r2, r2
 8009172:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009174:	7c7a      	ldrb	r2, [r7, #17]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	3304      	adds	r3, #4
 800917a:	b212      	sxth	r2, r2
 800917c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	3304      	adds	r3, #4
 8009182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009186:	b29b      	uxth	r3, r3
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	b29a      	uxth	r2, r3
 800918c:	7c3b      	ldrb	r3, [r7, #16]
 800918e:	b29b      	uxth	r3, r3
 8009190:	4413      	add	r3, r2
 8009192:	b29a      	uxth	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	3304      	adds	r3, #4
 8009198:	b212      	sxth	r2, r2
 800919a:	801a      	strh	r2, [r3, #0]

  return ret;
 800919c:	697b      	ldr	r3, [r7, #20]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80091b0:	2301      	movs	r3, #1
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	210f      	movs	r1, #15
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fd4a 	bl	8008c50 <lsm303agr_read_reg>
 80091bc:	60f8      	str	r0, [r7, #12]

  return ret;
 80091be:	68fb      	ldr	r3, [r7, #12]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80091d2:	2301      	movs	r3, #1
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	214f      	movs	r1, #79	; 0x4f
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff fd39 	bl	8008c50 <lsm303agr_read_reg>
 80091de:	60f8      	str	r0, [r7, #12]

  return ret;
 80091e0:	68fb      	ldr	r3, [r7, #12]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80091f6:	f107 0208 	add.w	r2, r7, #8
 80091fa:	2301      	movs	r3, #1
 80091fc:	2162      	movs	r1, #98	; 0x62
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fd26 	bl	8008c50 <lsm303agr_read_reg>
 8009204:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10f      	bne.n	800922c <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	7a3b      	ldrb	r3, [r7, #8]
 8009216:	f362 0341 	bfi	r3, r2, #1, #1
 800921a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800921c:	f107 0208 	add.w	r2, r7, #8
 8009220:	2301      	movs	r3, #1
 8009222:	2162      	movs	r1, #98	; 0x62
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff fd2b 	bl	8008c80 <lsm303agr_write_reg>
 800922a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800922c:	68fb      	ldr	r3, [r7, #12]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	460b      	mov	r3, r1
 8009240:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8009242:	f107 0208 	add.w	r2, r7, #8
 8009246:	2301      	movs	r3, #1
 8009248:	212e      	movs	r1, #46	; 0x2e
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7ff fd00 	bl	8008c50 <lsm303agr_read_reg>
 8009250:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10f      	bne.n	8009278 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	b2da      	uxtb	r2, r3
 8009260:	7a3b      	ldrb	r3, [r7, #8]
 8009262:	f362 1387 	bfi	r3, r2, #6, #2
 8009266:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8009268:	f107 0208 	add.w	r2, r7, #8
 800926c:	2301      	movs	r3, #1
 800926e:	212e      	movs	r1, #46	; 0x2e
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff fd05 	bl	8008c80 <lsm303agr_write_reg>
 8009276:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8009278:	68fb      	ldr	r3, [r7, #12]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	460b      	mov	r3, r1
 800928c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800928e:	f107 0208 	add.w	r2, r7, #8
 8009292:	2301      	movs	r3, #1
 8009294:	2162      	movs	r1, #98	; 0x62
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff fcda 	bl	8008c50 <lsm303agr_read_reg>
 800929c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10f      	bne.n	80092c4 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	f003 0301 	and.w	r3, r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	7a3b      	ldrb	r3, [r7, #8]
 80092ae:	f362 1345 	bfi	r3, r2, #5, #1
 80092b2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80092b4:	f107 0208 	add.w	r2, r7, #8
 80092b8:	2301      	movs	r3, #1
 80092ba:	2162      	movs	r1, #98	; 0x62
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff fcdf 	bl	8008c80 <lsm303agr_write_reg>
 80092c2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80092c4:	68fb      	ldr	r3, [r7, #12]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d103      	bne.n	80092ec <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	e051      	b.n	8009390 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	7b1a      	ldrb	r2, [r3, #12]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	699a      	ldr	r2, [r3, #24]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a1d      	ldr	r2, [pc, #116]	; (800939c <LSM6DSL_RegisterBusIO+0xcc>)
 8009328:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a1c      	ldr	r2, [pc, #112]	; (80093a0 <LSM6DSL_RegisterBusIO+0xd0>)
 800932e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8009346:	f04f 33ff 	mov.w	r3, #4294967295
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	e020      	b.n	8009390 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4798      	blx	r3
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 800935a:	f04f 33ff 	mov.w	r3, #4294967295
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e016      	b.n	8009390 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	2b02      	cmp	r3, #2
 8009368:	d112      	bne.n	8009390 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10d      	bne.n	8009390 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8009374:	230c      	movs	r3, #12
 8009376:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	461a      	mov	r2, r3
 800937c:	2112      	movs	r1, #18
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fd2d 	bl	8009dde <LSM6DSL_Write_Reg>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d002      	beq.n	8009390 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800938a:	f04f 33ff 	mov.w	r3, #4294967295
 800938e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8009390:	68fb      	ldr	r3, [r7, #12]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	0800a24d 	.word	0x0800a24d
 80093a0:	0800a283 	.word	0x0800a283

080093a4 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3320      	adds	r3, #32
 80093b0:	2101      	movs	r1, #1
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 fa59 	bl	800a86a <lsm6dsl_auto_increment_set>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295
 80093c2:	e054      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3320      	adds	r3, #32
 80093c8:	2101      	movs	r1, #1
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 f980 	bl	800a6d0 <lsm6dsl_block_data_update_set>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d002      	beq.n	80093dc <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	e048      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3320      	adds	r3, #32
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 fa67 	bl	800a8b6 <lsm6dsl_fifo_mode_set>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e03c      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2204      	movs	r2, #4
 80093f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3320      	adds	r3, #32
 8009400:	2100      	movs	r1, #0
 8009402:	4618      	mov	r0, r3
 8009404:	f000 ffe6 	bl	800a3d4 <lsm6dsl_xl_data_rate_set>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800940e:	f04f 33ff 	mov.w	r3, #4294967295
 8009412:	e02c      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3320      	adds	r3, #32
 8009418:	2100      	movs	r1, #0
 800941a:	4618      	mov	r0, r3
 800941c:	f000 ff7c 	bl	800a318 <lsm6dsl_xl_full_scale_set>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8009426:	f04f 33ff 	mov.w	r3, #4294967295
 800942a:	e020      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2204      	movs	r2, #4
 8009430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3320      	adds	r3, #32
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f001 f8c0 	bl	800a5c0 <lsm6dsl_gy_data_rate_set>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	e010      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3320      	adds	r3, #32
 8009450:	2106      	movs	r1, #6
 8009452:	4618      	mov	r0, r3
 8009454:	f001 f84c 	bl	800a4f0 <lsm6dsl_gy_full_scale_set>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800945e:	f04f 33ff 	mov.w	r3, #4294967295
 8009462:	e004      	b.n	800946e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f888 	bl	8009594 <LSM6DSL_ACC_Disable>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800948a:	f04f 33ff 	mov.w	r3, #4294967295
 800948e:	e015      	b.n	80094bc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fa9a 	bl	80099ca <LSM6DSL_GYRO_Disable>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 800949c:	f04f 33ff 	mov.w	r3, #4294967295
 80094a0:	e00c      	b.n	80094bc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3320      	adds	r3, #32
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 f9b7 	bl	800a848 <lsm6dsl_device_id_get>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295
 80094e4:	e000      	b.n	80094e8 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2201      	movs	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2201      	movs	r2, #1
 8009504:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2200      	movs	r2, #0
 800950a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2200      	movs	r2, #0
 8009510:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009518:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2210      	movs	r2, #16
 800951e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	4a07      	ldr	r2, [pc, #28]	; (8009548 <LSM6DSL_GetCapabilities+0x58>)
 800952a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	4a06      	ldr	r2, [pc, #24]	; (8009548 <LSM6DSL_GetCapabilities+0x58>)
 8009530:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	45d02000 	.word	0x45d02000

0800954c <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e014      	b.n	800958c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f103 0220 	add.w	r2, r3, #32
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800956e:	4619      	mov	r1, r3
 8009570:	4610      	mov	r0, r2
 8009572:	f000 ff2f 	bl	800a3d4 <lsm6dsl_xl_data_rate_set>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800957c:	f04f 33ff 	mov.w	r3, #4294967295
 8009580:	e004      	b.n	800958c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e01f      	b.n	80095ea <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f103 0220 	add.w	r2, r3, #32
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3333      	adds	r3, #51	; 0x33
 80095b4:	4619      	mov	r1, r3
 80095b6:	4610      	mov	r0, r2
 80095b8:	f000 ff32 	bl	800a420 <lsm6dsl_xl_data_rate_get>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80095c2:	f04f 33ff 	mov.w	r3, #4294967295
 80095c6:	e010      	b.n	80095ea <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3320      	adds	r3, #32
 80095cc:	2100      	movs	r1, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 ff00 	bl	800a3d4 <lsm6dsl_xl_data_rate_set>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80095da:	f04f 33ff 	mov.w	r3, #4294967295
 80095de:	e004      	b.n	80095ea <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3320      	adds	r3, #32
 8009606:	f107 020b 	add.w	r2, r7, #11
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fea9 	bl	800a364 <lsm6dsl_xl_full_scale_get>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8009618:	f04f 33ff 	mov.w	r3, #4294967295
 800961c:	e023      	b.n	8009666 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	2b03      	cmp	r3, #3
 8009622:	d81b      	bhi.n	800965c <LSM6DSL_ACC_GetSensitivity+0x68>
 8009624:	a201      	add	r2, pc, #4	; (adr r2, 800962c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8009626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962a:	bf00      	nop
 800962c:	0800963d 	.word	0x0800963d
 8009630:	08009655 	.word	0x08009655
 8009634:	08009645 	.word	0x08009645
 8009638:	0800964d 	.word	0x0800964d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	4a0c      	ldr	r2, [pc, #48]	; (8009670 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8009640:	601a      	str	r2, [r3, #0]
      break;
 8009642:	e00f      	b.n	8009664 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	4a0b      	ldr	r2, [pc, #44]	; (8009674 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8009648:	601a      	str	r2, [r3, #0]
      break;
 800964a:	e00b      	b.n	8009664 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	4a0a      	ldr	r2, [pc, #40]	; (8009678 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8009650:	601a      	str	r2, [r3, #0]
      break;
 8009652:	e007      	b.n	8009664 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	4a09      	ldr	r2, [pc, #36]	; (800967c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8009658:	601a      	str	r2, [r3, #0]
      break;
 800965a:	e003      	b.n	8009664 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800965c:	f04f 33ff 	mov.w	r3, #4294967295
 8009660:	60fb      	str	r3, [r7, #12]
      break;
 8009662:	bf00      	nop
  }

  return ret;
 8009664:	68fb      	ldr	r3, [r7, #12]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	3d79db23 	.word	0x3d79db23
 8009674:	3df9db23 	.word	0x3df9db23
 8009678:	3e79db23 	.word	0x3e79db23
 800967c:	3ef9db23 	.word	0x3ef9db23

08009680 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3320      	adds	r3, #32
 8009692:	f107 020b 	add.w	r2, r7, #11
 8009696:	4611      	mov	r1, r2
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fec1 	bl	800a420 <lsm6dsl_xl_data_rate_get>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80096a4:	f04f 33ff 	mov.w	r3, #4294967295
 80096a8:	e054      	b.n	8009754 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	2b0b      	cmp	r3, #11
 80096ae:	d84c      	bhi.n	800974a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80096b0:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80096b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b6:	bf00      	nop
 80096b8:	080096e9 	.word	0x080096e9
 80096bc:	080096fb 	.word	0x080096fb
 80096c0:	08009703 	.word	0x08009703
 80096c4:	0800970b 	.word	0x0800970b
 80096c8:	08009713 	.word	0x08009713
 80096cc:	0800971b 	.word	0x0800971b
 80096d0:	08009723 	.word	0x08009723
 80096d4:	0800972b 	.word	0x0800972b
 80096d8:	08009733 	.word	0x08009733
 80096dc:	0800973b 	.word	0x0800973b
 80096e0:	08009743 	.word	0x08009743
 80096e4:	080096f3 	.word	0x080096f3
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
      break;
 80096f0:	e02f      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	4a19      	ldr	r2, [pc, #100]	; (800975c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80096f6:	601a      	str	r2, [r3, #0]
      break;
 80096f8:	e02b      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	4a18      	ldr	r2, [pc, #96]	; (8009760 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80096fe:	601a      	str	r2, [r3, #0]
      break;
 8009700:	e027      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	4a17      	ldr	r2, [pc, #92]	; (8009764 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8009706:	601a      	str	r2, [r3, #0]
      break;
 8009708:	e023      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	4a16      	ldr	r2, [pc, #88]	; (8009768 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800970e:	601a      	str	r2, [r3, #0]
      break;
 8009710:	e01f      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	4a15      	ldr	r2, [pc, #84]	; (800976c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8009716:	601a      	str	r2, [r3, #0]
      break;
 8009718:	e01b      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	4a14      	ldr	r2, [pc, #80]	; (8009770 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800971e:	601a      	str	r2, [r3, #0]
      break;
 8009720:	e017      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	4a13      	ldr	r2, [pc, #76]	; (8009774 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8009726:	601a      	str	r2, [r3, #0]
      break;
 8009728:	e013      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	4a12      	ldr	r2, [pc, #72]	; (8009778 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800972e:	601a      	str	r2, [r3, #0]
      break;
 8009730:	e00f      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	4a11      	ldr	r2, [pc, #68]	; (800977c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8009736:	601a      	str	r2, [r3, #0]
      break;
 8009738:	e00b      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	4a10      	ldr	r2, [pc, #64]	; (8009780 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800973e:	601a      	str	r2, [r3, #0]
      break;
 8009740:	e007      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	4a0f      	ldr	r2, [pc, #60]	; (8009784 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8009746:	601a      	str	r2, [r3, #0]
      break;
 8009748:	e003      	b.n	8009752 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	60fb      	str	r3, [r7, #12]
      break;
 8009750:	bf00      	nop
  }

  return ret;
 8009752:	68fb      	ldr	r3, [r7, #12]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	3fcccccd 	.word	0x3fcccccd
 8009760:	41480000 	.word	0x41480000
 8009764:	41d00000 	.word	0x41d00000
 8009768:	42500000 	.word	0x42500000
 800976c:	42d00000 	.word	0x42d00000
 8009770:	43500000 	.word	0x43500000
 8009774:	43d00000 	.word	0x43d00000
 8009778:	44504000 	.word	0x44504000
 800977c:	44cf8000 	.word	0x44cf8000
 8009780:	45502000 	.word	0x45502000
 8009784:	45d02000 	.word	0x45d02000

08009788 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800979a:	2b01      	cmp	r3, #1
 800979c:	d106      	bne.n	80097ac <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800979e:	ed97 0a00 	vldr	s0, [r7]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fb36 	bl	8009e14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80097a8:	4603      	mov	r3, r0
 80097aa:	e005      	b.n	80097b8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80097ac:	ed97 0a00 	vldr	s0, [r7]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fbbb 	bl	8009f2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80097b6:	4603      	mov	r3, r0
  }
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3320      	adds	r3, #32
 80097d2:	f107 020b 	add.w	r2, r7, #11
 80097d6:	4611      	mov	r1, r2
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fdc3 	bl	800a364 <lsm6dsl_xl_full_scale_get>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80097e4:	f04f 33ff 	mov.w	r3, #4294967295
 80097e8:	e023      	b.n	8009832 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80097ea:	7afb      	ldrb	r3, [r7, #11]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d81b      	bhi.n	8009828 <LSM6DSL_ACC_GetFullScale+0x68>
 80097f0:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <LSM6DSL_ACC_GetFullScale+0x38>)
 80097f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f6:	bf00      	nop
 80097f8:	08009809 	.word	0x08009809
 80097fc:	08009821 	.word	0x08009821
 8009800:	08009811 	.word	0x08009811
 8009804:	08009819 	.word	0x08009819
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	2202      	movs	r2, #2
 800980c:	601a      	str	r2, [r3, #0]
      break;
 800980e:	e00f      	b.n	8009830 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2204      	movs	r2, #4
 8009814:	601a      	str	r2, [r3, #0]
      break;
 8009816:	e00b      	b.n	8009830 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2208      	movs	r2, #8
 800981c:	601a      	str	r2, [r3, #0]
      break;
 800981e:	e007      	b.n	8009830 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	2210      	movs	r2, #16
 8009824:	601a      	str	r2, [r3, #0]
      break;
 8009826:	e003      	b.n	8009830 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8009828:	f04f 33ff 	mov.w	r3, #4294967295
 800982c:	60fb      	str	r3, [r7, #12]
      break;
 800982e:	bf00      	nop
  }

  return ret;
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop

0800983c <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b02      	cmp	r3, #2
 800984a:	dd0b      	ble.n	8009864 <LSM6DSL_ACC_SetFullScale+0x28>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b04      	cmp	r3, #4
 8009850:	dd06      	ble.n	8009860 <LSM6DSL_ACC_SetFullScale+0x24>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b08      	cmp	r3, #8
 8009856:	dc01      	bgt.n	800985c <LSM6DSL_ACC_SetFullScale+0x20>
 8009858:	2303      	movs	r3, #3
 800985a:	e004      	b.n	8009866 <LSM6DSL_ACC_SetFullScale+0x2a>
 800985c:	2301      	movs	r3, #1
 800985e:	e002      	b.n	8009866 <LSM6DSL_ACC_SetFullScale+0x2a>
 8009860:	2302      	movs	r3, #2
 8009862:	e000      	b.n	8009866 <LSM6DSL_ACC_SetFullScale+0x2a>
 8009864:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8009866:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3320      	adds	r3, #32
 800986c:	7bfa      	ldrb	r2, [r7, #15]
 800986e:	4611      	mov	r1, r2
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fd51 	bl	800a318 <lsm6dsl_xl_full_scale_set>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 800987c:	f04f 33ff 	mov.w	r3, #4294967295
 8009880:	e000      	b.n	8009884 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3320      	adds	r3, #32
 800989a:	f107 0208 	add.w	r2, r7, #8
 800989e:	4611      	mov	r1, r2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 ff86 	bl	800a7b2 <lsm6dsl_acceleration_raw_get>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	e00c      	b.n	80098cc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80098b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80098ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80098c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80098de:	f04f 0300 	mov.w	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3320      	adds	r3, #32
 80098e8:	f107 0210 	add.w	r2, r7, #16
 80098ec:	4611      	mov	r1, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 ff5f 	bl	800a7b2 <lsm6dsl_acceleration_raw_get>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80098fa:	f04f 33ff 	mov.w	r3, #4294967295
 80098fe:	e03c      	b.n	800997a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8009900:	f107 030c 	add.w	r3, r7, #12
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7ff fe74 	bl	80095f4 <LSM6DSL_ACC_GetSensitivity>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8009912:	f04f 33ff 	mov.w	r3, #4294967295
 8009916:	e030      	b.n	800997a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009918:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009924:	edd7 7a03 	vldr	s15, [r7, #12]
 8009928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009930:	ee17 2a90 	vmov	r2, s15
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009944:	edd7 7a03 	vldr	s15, [r7, #12]
 8009948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009950:	ee17 2a90 	vmov	r2, s15
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8009958:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800995c:	ee07 3a90 	vmov	s15, r3
 8009960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009964:	edd7 7a03 	vldr	s15, [r7, #12]
 8009968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009970:	ee17 2a90 	vmov	r2, s15
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	e014      	b.n	80099c2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f103 0220 	add.w	r2, r3, #32
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f000 fe0a 	bl	800a5c0 <lsm6dsl_gy_data_rate_set>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80099b2:	f04f 33ff 	mov.w	r3, #4294967295
 80099b6:	e004      	b.n	80099c2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	e01f      	b.n	8009a20 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f103 0220 	add.w	r2, r3, #32
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3334      	adds	r3, #52	; 0x34
 80099ea:	4619      	mov	r1, r3
 80099ec:	4610      	mov	r0, r2
 80099ee:	f000 fe0d 	bl	800a60c <lsm6dsl_gy_data_rate_get>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295
 80099fc:	e010      	b.n	8009a20 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	3320      	adds	r3, #32
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fddb 	bl	800a5c0 <lsm6dsl_gy_data_rate_set>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8009a10:	f04f 33ff 	mov.w	r3, #4294967295
 8009a14:	e004      	b.n	8009a20 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3320      	adds	r3, #32
 8009a3a:	f107 020b 	add.w	r2, r7, #11
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fd7b 	bl	800a53c <lsm6dsl_gy_full_scale_get>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8009a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a50:	e02d      	b.n	8009aae <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8009a52:	7afb      	ldrb	r3, [r7, #11]
 8009a54:	2b06      	cmp	r3, #6
 8009a56:	d825      	bhi.n	8009aa4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8009a58:	a201      	add	r2, pc, #4	; (adr r2, 8009a60 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8009a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009a85 	.word	0x08009a85
 8009a64:	08009a7d 	.word	0x08009a7d
 8009a68:	08009a8d 	.word	0x08009a8d
 8009a6c:	08009aa5 	.word	0x08009aa5
 8009a70:	08009a95 	.word	0x08009a95
 8009a74:	08009aa5 	.word	0x08009aa5
 8009a78:	08009a9d 	.word	0x08009a9d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	4a0e      	ldr	r2, [pc, #56]	; (8009ab8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8009a80:	601a      	str	r2, [r3, #0]
      break;
 8009a82:	e013      	b.n	8009aac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	4a0d      	ldr	r2, [pc, #52]	; (8009abc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8009a88:	601a      	str	r2, [r3, #0]
      break;
 8009a8a:	e00f      	b.n	8009aac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	4a0c      	ldr	r2, [pc, #48]	; (8009ac0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8009a90:	601a      	str	r2, [r3, #0]
      break;
 8009a92:	e00b      	b.n	8009aac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	4a0b      	ldr	r2, [pc, #44]	; (8009ac4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8009a98:	601a      	str	r2, [r3, #0]
      break;
 8009a9a:	e007      	b.n	8009aac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	4a0a      	ldr	r2, [pc, #40]	; (8009ac8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8009aa0:	601a      	str	r2, [r3, #0]
      break;
 8009aa2:	e003      	b.n	8009aac <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	60fb      	str	r3, [r7, #12]
      break;
 8009aaa:	bf00      	nop
  }

  return ret;
 8009aac:	68fb      	ldr	r3, [r7, #12]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	408c0000 	.word	0x408c0000
 8009abc:	410c0000 	.word	0x410c0000
 8009ac0:	418c0000 	.word	0x418c0000
 8009ac4:	420c0000 	.word	0x420c0000
 8009ac8:	428c0000 	.word	0x428c0000

08009acc <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3320      	adds	r3, #32
 8009ade:	f107 020b 	add.w	r2, r7, #11
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fd91 	bl	800a60c <lsm6dsl_gy_data_rate_get>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8009af0:	f04f 33ff 	mov.w	r3, #4294967295
 8009af4:	e04e      	b.n	8009b94 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8009af6:	7afb      	ldrb	r3, [r7, #11]
 8009af8:	2b0a      	cmp	r3, #10
 8009afa:	d846      	bhi.n	8009b8a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8009afc:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	08009b3b 	.word	0x08009b3b
 8009b0c:	08009b43 	.word	0x08009b43
 8009b10:	08009b4b 	.word	0x08009b4b
 8009b14:	08009b53 	.word	0x08009b53
 8009b18:	08009b5b 	.word	0x08009b5b
 8009b1c:	08009b63 	.word	0x08009b63
 8009b20:	08009b6b 	.word	0x08009b6b
 8009b24:	08009b73 	.word	0x08009b73
 8009b28:	08009b7b 	.word	0x08009b7b
 8009b2c:	08009b83 	.word	0x08009b83
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]
      break;
 8009b38:	e02b      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	4a17      	ldr	r2, [pc, #92]	; (8009b9c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8009b3e:	601a      	str	r2, [r3, #0]
      break;
 8009b40:	e027      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	4a16      	ldr	r2, [pc, #88]	; (8009ba0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8009b46:	601a      	str	r2, [r3, #0]
      break;
 8009b48:	e023      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8009b4e:	601a      	str	r2, [r3, #0]
      break;
 8009b50:	e01f      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	4a14      	ldr	r2, [pc, #80]	; (8009ba8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8009b56:	601a      	str	r2, [r3, #0]
      break;
 8009b58:	e01b      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	4a13      	ldr	r2, [pc, #76]	; (8009bac <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8009b5e:	601a      	str	r2, [r3, #0]
      break;
 8009b60:	e017      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	4a12      	ldr	r2, [pc, #72]	; (8009bb0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8009b66:	601a      	str	r2, [r3, #0]
      break;
 8009b68:	e013      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	4a11      	ldr	r2, [pc, #68]	; (8009bb4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8009b6e:	601a      	str	r2, [r3, #0]
      break;
 8009b70:	e00f      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	4a10      	ldr	r2, [pc, #64]	; (8009bb8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8009b76:	601a      	str	r2, [r3, #0]
      break;
 8009b78:	e00b      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	4a0f      	ldr	r2, [pc, #60]	; (8009bbc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8009b7e:	601a      	str	r2, [r3, #0]
      break;
 8009b80:	e007      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	4a0e      	ldr	r2, [pc, #56]	; (8009bc0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8009b86:	601a      	str	r2, [r3, #0]
      break;
 8009b88:	e003      	b.n	8009b92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8e:	60fb      	str	r3, [r7, #12]
      break;
 8009b90:	bf00      	nop
  }

  return ret;
 8009b92:	68fb      	ldr	r3, [r7, #12]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	41480000 	.word	0x41480000
 8009ba0:	41d00000 	.word	0x41d00000
 8009ba4:	42500000 	.word	0x42500000
 8009ba8:	42d00000 	.word	0x42d00000
 8009bac:	43500000 	.word	0x43500000
 8009bb0:	43d00000 	.word	0x43d00000
 8009bb4:	44504000 	.word	0x44504000
 8009bb8:	44cf8000 	.word	0x44cf8000
 8009bbc:	45502000 	.word	0x45502000
 8009bc0:	45d02000 	.word	0x45d02000

08009bc4 <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d106      	bne.n	8009be8 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009bda:	ed97 0a00 	vldr	s0, [r7]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fa26 	bl	800a030 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8009be4:	4603      	mov	r3, r0
 8009be6:	e005      	b.n	8009bf4 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009be8:	ed97 0a00 	vldr	s0, [r7]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 faab 	bl	800a148 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8009bf2:	4603      	mov	r3, r0
  }
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3320      	adds	r3, #32
 8009c0e:	f107 020b 	add.w	r2, r7, #11
 8009c12:	4611      	mov	r1, r2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 fc91 	bl	800a53c <lsm6dsl_gy_full_scale_get>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8009c20:	f04f 33ff 	mov.w	r3, #4294967295
 8009c24:	e030      	b.n	8009c88 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8009c26:	7afb      	ldrb	r3, [r7, #11]
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	d828      	bhi.n	8009c7e <LSM6DSL_GYRO_GetFullScale+0x82>
 8009c2c:	a201      	add	r2, pc, #4	; (adr r2, 8009c34 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c51 	.word	0x08009c51
 8009c3c:	08009c61 	.word	0x08009c61
 8009c40:	08009c7f 	.word	0x08009c7f
 8009c44:	08009c6b 	.word	0x08009c6b
 8009c48:	08009c7f 	.word	0x08009c7f
 8009c4c:	08009c75 	.word	0x08009c75
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	227d      	movs	r2, #125	; 0x7d
 8009c54:	601a      	str	r2, [r3, #0]
      break;
 8009c56:	e016      	b.n	8009c86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	22fa      	movs	r2, #250	; 0xfa
 8009c5c:	601a      	str	r2, [r3, #0]
      break;
 8009c5e:	e012      	b.n	8009c86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009c66:	601a      	str	r2, [r3, #0]
      break;
 8009c68:	e00d      	b.n	8009c86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c70:	601a      	str	r2, [r3, #0]
      break;
 8009c72:	e008      	b.n	8009c86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009c7a:	601a      	str	r2, [r3, #0]
      break;
 8009c7c:	e003      	b.n	8009c86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	60fb      	str	r3, [r7, #12]
      break;
 8009c84:	bf00      	nop
  }

  return ret;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b7d      	cmp	r3, #125	; 0x7d
 8009c9e:	dd12      	ble.n	8009cc6 <LSM6DSL_GYRO_SetFullScale+0x36>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2bfa      	cmp	r3, #250	; 0xfa
 8009ca4:	dd0d      	ble.n	8009cc2 <LSM6DSL_GYRO_SetFullScale+0x32>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009cac:	dd07      	ble.n	8009cbe <LSM6DSL_GYRO_SetFullScale+0x2e>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cb4:	dc01      	bgt.n	8009cba <LSM6DSL_GYRO_SetFullScale+0x2a>
 8009cb6:	2304      	movs	r3, #4
 8009cb8:	e006      	b.n	8009cc8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009cba:	2306      	movs	r3, #6
 8009cbc:	e004      	b.n	8009cc8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e002      	b.n	8009cc8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e000      	b.n	8009cc8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009cc6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8009cc8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3320      	adds	r3, #32
 8009cce:	7bfa      	ldrb	r2, [r7, #15]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fc0c 	bl	800a4f0 <lsm6dsl_gy_full_scale_set>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d002      	beq.n	8009ce4 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8009cde:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce2:	e000      	b.n	8009ce6 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3320      	adds	r3, #32
 8009cfc:	f107 0208 	add.w	r2, r7, #8
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fd0a 	bl	800a71c <lsm6dsl_angular_rate_raw_get>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	e00c      	b.n	8009d2e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8009d14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8009d1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8009d24:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b086      	sub	sp, #24
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3320      	adds	r3, #32
 8009d44:	f107 0210 	add.w	r2, r7, #16
 8009d48:	4611      	mov	r1, r2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fce6 	bl	800a71c <lsm6dsl_angular_rate_raw_get>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5a:	e03c      	b.n	8009dd6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8009d5c:	f107 030c 	add.w	r3, r7, #12
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fe60 	bl	8009a28 <LSM6DSL_GYRO_GetSensitivity>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	e030      	b.n	8009dd6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009d74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d8c:	ee17 2a90 	vmov	r2, s15
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d98:	ee07 3a90 	vmov	s15, r3
 8009d9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dac:	ee17 2a90 	vmov	r2, s15
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8009db4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dcc:	ee17 2a90 	vmov	r2, s15
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
 8009dea:	4613      	mov	r3, r2
 8009dec:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f103 0020 	add.w	r0, r3, #32
 8009df4:	1cba      	adds	r2, r7, #2
 8009df6:	78f9      	ldrb	r1, [r7, #3]
 8009df8:	2301      	movs	r3, #1
 8009dfa:	f000 fa75 	bl	800a2e8 <lsm6dsl_write_reg>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8009e04:	f04f 33ff 	mov.w	r3, #4294967295
 8009e08:	e000      	b.n	8009e0c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8009e20:	edd7 7a00 	vldr	s15, [r7]
 8009e24:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	d801      	bhi.n	8009e36 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e058      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e36:	edd7 7a00 	vldr	s15, [r7]
 8009e3a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e46:	d801      	bhi.n	8009e4c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	e04d      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e4c:	edd7 7a00 	vldr	s15, [r7]
 8009e50:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009f10 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8009e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5c:	d801      	bhi.n	8009e62 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e042      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e62:	edd7 7a00 	vldr	s15, [r7]
 8009e66:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009f14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e72:	d801      	bhi.n	8009e78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009e74:	2304      	movs	r3, #4
 8009e76:	e037      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e78:	edd7 7a00 	vldr	s15, [r7]
 8009e7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009f18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8009e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e88:	d801      	bhi.n	8009e8e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8009e8a:	2305      	movs	r3, #5
 8009e8c:	e02c      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e8e:	edd7 7a00 	vldr	s15, [r7]
 8009e92:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009f1c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8009e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9e:	d801      	bhi.n	8009ea4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009ea0:	2306      	movs	r3, #6
 8009ea2:	e021      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009ea4:	edd7 7a00 	vldr	s15, [r7]
 8009ea8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009f20 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8009eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eb4:	d801      	bhi.n	8009eba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8009eb6:	2307      	movs	r3, #7
 8009eb8:	e016      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009eba:	edd7 7a00 	vldr	s15, [r7]
 8009ebe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009f24 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8009ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eca:	d801      	bhi.n	8009ed0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	e00b      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009ed0:	edd7 7a00 	vldr	s15, [r7]
 8009ed4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009f28 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8009ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee0:	d801      	bhi.n	8009ee6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8009ee2:	2309      	movs	r3, #9
 8009ee4:	e000      	b.n	8009ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009ee6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8009ee8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3320      	adds	r3, #32
 8009eee:	7bfa      	ldrb	r2, [r7, #15]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fa6e 	bl	800a3d4 <lsm6dsl_xl_data_rate_set>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295
 8009f02:	e000      	b.n	8009f06 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	42500000 	.word	0x42500000
 8009f14:	42d00000 	.word	0x42d00000
 8009f18:	43500000 	.word	0x43500000
 8009f1c:	43d00000 	.word	0x43d00000
 8009f20:	44504000 	.word	0x44504000
 8009f24:	44cf8000 	.word	0x44cf8000
 8009f28:	45502000 	.word	0x45502000

08009f2c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8009f38:	edd7 7a00 	vldr	s15, [r7]
 8009f3c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f48:	d801      	bhi.n	8009f4e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e058      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f4e:	edd7 7a00 	vldr	s15, [r7]
 8009f52:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5e:	d801      	bhi.n	8009f64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009f60:	2302      	movs	r3, #2
 8009f62:	e04d      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f64:	edd7 7a00 	vldr	s15, [r7]
 8009f68:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a014 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f74:	d801      	bhi.n	8009f7a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009f76:	2303      	movs	r3, #3
 8009f78:	e042      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f7a:	edd7 7a00 	vldr	s15, [r7]
 8009f7e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a018 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8009f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8a:	d801      	bhi.n	8009f90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	e037      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f90:	edd7 7a00 	vldr	s15, [r7]
 8009f94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a01c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8009f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa0:	d801      	bhi.n	8009fa6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009fa2:	2305      	movs	r3, #5
 8009fa4:	e02c      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009fa6:	edd7 7a00 	vldr	s15, [r7]
 8009faa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a020 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8009fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb6:	d801      	bhi.n	8009fbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8009fb8:	2306      	movs	r3, #6
 8009fba:	e021      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009fbc:	edd7 7a00 	vldr	s15, [r7]
 8009fc0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a024 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8009fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fcc:	d801      	bhi.n	8009fd2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8009fce:	2307      	movs	r3, #7
 8009fd0:	e016      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009fd2:	edd7 7a00 	vldr	s15, [r7]
 8009fd6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a028 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8009fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe2:	d801      	bhi.n	8009fe8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009fe4:	2308      	movs	r3, #8
 8009fe6:	e00b      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009fe8:	edd7 7a00 	vldr	s15, [r7]
 8009fec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a02c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff8:	d801      	bhi.n	8009ffe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8009ffa:	2309      	movs	r3, #9
 8009ffc:	e000      	b.n	800a000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009ffe:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	42500000 	.word	0x42500000
 800a018:	42d00000 	.word	0x42d00000
 800a01c:	43500000 	.word	0x43500000
 800a020:	43d00000 	.word	0x43d00000
 800a024:	44504000 	.word	0x44504000
 800a028:	44cf8000 	.word	0x44cf8000
 800a02c:	45502000 	.word	0x45502000

0800a030 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a03c:	edd7 7a00 	vldr	s15, [r7]
 800a040:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a044:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04c:	d801      	bhi.n	800a052 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800a04e:	2301      	movs	r3, #1
 800a050:	e058      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a052:	edd7 7a00 	vldr	s15, [r7]
 800a056:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a05a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a062:	d801      	bhi.n	800a068 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800a064:	2302      	movs	r3, #2
 800a066:	e04d      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a068:	edd7 7a00 	vldr	s15, [r7]
 800a06c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a12c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800a070:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a078:	d801      	bhi.n	800a07e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800a07a:	2303      	movs	r3, #3
 800a07c:	e042      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a07e:	edd7 7a00 	vldr	s15, [r7]
 800a082:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a130 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800a086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08e:	d801      	bhi.n	800a094 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800a090:	2304      	movs	r3, #4
 800a092:	e037      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a094:	edd7 7a00 	vldr	s15, [r7]
 800a098:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a134 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800a09c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a4:	d801      	bhi.n	800a0aa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800a0a6:	2305      	movs	r3, #5
 800a0a8:	e02c      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a0aa:	edd7 7a00 	vldr	s15, [r7]
 800a0ae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a138 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800a0b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ba:	d801      	bhi.n	800a0c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800a0bc:	2306      	movs	r3, #6
 800a0be:	e021      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a0c0:	edd7 7a00 	vldr	s15, [r7]
 800a0c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a13c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800a0c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0d0:	d801      	bhi.n	800a0d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800a0d2:	2307      	movs	r3, #7
 800a0d4:	e016      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a0d6:	edd7 7a00 	vldr	s15, [r7]
 800a0da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a140 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800a0de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e6:	d801      	bhi.n	800a0ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	e00b      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a0ec:	edd7 7a00 	vldr	s15, [r7]
 800a0f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a144 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800a0f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fc:	d801      	bhi.n	800a102 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800a0fe:	2309      	movs	r3, #9
 800a100:	e000      	b.n	800a104 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a102:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a104:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3320      	adds	r3, #32
 800a10a:	7bfa      	ldrb	r2, [r7, #15]
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 fa56 	bl	800a5c0 <lsm6dsl_gy_data_rate_set>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800a11a:	f04f 33ff 	mov.w	r3, #4294967295
 800a11e:	e000      	b.n	800a122 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	42500000 	.word	0x42500000
 800a130:	42d00000 	.word	0x42d00000
 800a134:	43500000 	.word	0x43500000
 800a138:	43d00000 	.word	0x43d00000
 800a13c:	44504000 	.word	0x44504000
 800a140:	44cf8000 	.word	0x44cf8000
 800a144:	45502000 	.word	0x45502000

0800a148 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a154:	edd7 7a00 	vldr	s15, [r7]
 800a158:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	d801      	bhi.n	800a16a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800a166:	2301      	movs	r3, #1
 800a168:	e058      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a16a:	edd7 7a00 	vldr	s15, [r7]
 800a16e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a172:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17a:	d801      	bhi.n	800a180 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e04d      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a180:	edd7 7a00 	vldr	s15, [r7]
 800a184:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a230 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800a188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a190:	d801      	bhi.n	800a196 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800a192:	2303      	movs	r3, #3
 800a194:	e042      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a196:	edd7 7a00 	vldr	s15, [r7]
 800a19a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a234 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800a19e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a6:	d801      	bhi.n	800a1ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	e037      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a1ac:	edd7 7a00 	vldr	s15, [r7]
 800a1b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a238 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800a1b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1bc:	d801      	bhi.n	800a1c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800a1be:	2305      	movs	r3, #5
 800a1c0:	e02c      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a1c2:	edd7 7a00 	vldr	s15, [r7]
 800a1c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a23c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800a1ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d2:	d801      	bhi.n	800a1d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800a1d4:	2306      	movs	r3, #6
 800a1d6:	e021      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a1d8:	edd7 7a00 	vldr	s15, [r7]
 800a1dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a240 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800a1e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e8:	d801      	bhi.n	800a1ee <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800a1ea:	2307      	movs	r3, #7
 800a1ec:	e016      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a1ee:	edd7 7a00 	vldr	s15, [r7]
 800a1f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a244 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800a1f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fe:	d801      	bhi.n	800a204 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800a200:	2308      	movs	r3, #8
 800a202:	e00b      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a204:	edd7 7a00 	vldr	s15, [r7]
 800a208:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a248 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800a20c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a214:	d801      	bhi.n	800a21a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800a216:	2309      	movs	r3, #9
 800a218:	e000      	b.n	800a21c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a21a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	42500000 	.word	0x42500000
 800a234:	42d00000 	.word	0x42d00000
 800a238:	43500000 	.word	0x43500000
 800a23c:	43d00000 	.word	0x43d00000
 800a240:	44504000 	.word	0x44504000
 800a244:	44cf8000 	.word	0x44cf8000
 800a248:	45502000 	.word	0x45502000

0800a24c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a24c:	b590      	push	{r4, r7, lr}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	461a      	mov	r2, r3
 800a258:	460b      	mov	r3, r1
 800a25a:	72fb      	strb	r3, [r7, #11]
 800a25c:	4613      	mov	r3, r2
 800a25e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	695c      	ldr	r4, [r3, #20]
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	7b1b      	ldrb	r3, [r3, #12]
 800a26c:	b298      	uxth	r0, r3
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	b299      	uxth	r1, r3
 800a272:	893b      	ldrh	r3, [r7, #8]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	47a0      	blx	r4
 800a278:	4603      	mov	r3, r0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd90      	pop	{r4, r7, pc}

0800a282 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a282:	b590      	push	{r4, r7, lr}
 800a284:	b087      	sub	sp, #28
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	461a      	mov	r2, r3
 800a28e:	460b      	mov	r3, r1
 800a290:	72fb      	strb	r3, [r7, #11]
 800a292:	4613      	mov	r3, r2
 800a294:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	691c      	ldr	r4, [r3, #16]
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	7b1b      	ldrb	r3, [r3, #12]
 800a2a2:	b298      	uxth	r0, r3
 800a2a4:	7afb      	ldrb	r3, [r7, #11]
 800a2a6:	b299      	uxth	r1, r3
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	47a0      	blx	r4
 800a2ae:	4603      	mov	r3, r0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	371c      	adds	r7, #28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}

0800a2b8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800a2b8:	b590      	push	{r4, r7, lr}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	607a      	str	r2, [r7, #4]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	72fb      	strb	r3, [r7, #11]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	685c      	ldr	r4, [r3, #4]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68d8      	ldr	r0, [r3, #12]
 800a2d4:	893b      	ldrh	r3, [r7, #8]
 800a2d6:	7af9      	ldrb	r1, [r7, #11]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	47a0      	blx	r4
 800a2dc:	6178      	str	r0, [r7, #20]

  return ret;
 800a2de:	697b      	ldr	r3, [r7, #20]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd90      	pop	{r4, r7, pc}

0800a2e8 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800a2e8:	b590      	push	{r4, r7, lr}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	607a      	str	r2, [r7, #4]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	72fb      	strb	r3, [r7, #11]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681c      	ldr	r4, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	68d8      	ldr	r0, [r3, #12]
 800a304:	893b      	ldrh	r3, [r7, #8]
 800a306:	7af9      	ldrb	r1, [r7, #11]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	47a0      	blx	r4
 800a30c:	6178      	str	r0, [r7, #20]

  return ret;
 800a30e:	697b      	ldr	r3, [r7, #20]
}
 800a310:	4618      	mov	r0, r3
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	bd90      	pop	{r4, r7, pc}

0800a318 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a324:	f107 0208 	add.w	r2, r7, #8
 800a328:	2301      	movs	r3, #1
 800a32a:	2110      	movs	r1, #16
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff ffc3 	bl	800a2b8 <lsm6dsl_read_reg>
 800a332:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10f      	bne.n	800a35a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	f003 0303 	and.w	r3, r3, #3
 800a340:	b2da      	uxtb	r2, r3
 800a342:	7a3b      	ldrb	r3, [r7, #8]
 800a344:	f362 0383 	bfi	r3, r2, #2, #2
 800a348:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a34a:	f107 0208 	add.w	r2, r7, #8
 800a34e:	2301      	movs	r3, #1
 800a350:	2110      	movs	r1, #16
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff ffc8 	bl	800a2e8 <lsm6dsl_write_reg>
 800a358:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a35a:	68fb      	ldr	r3, [r7, #12]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a36e:	f107 0208 	add.w	r2, r7, #8
 800a372:	2301      	movs	r3, #1
 800a374:	2110      	movs	r1, #16
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff ff9e 	bl	800a2b8 <lsm6dsl_read_reg>
 800a37c:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 800a37e:	7a3b      	ldrb	r3, [r7, #8]
 800a380:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b03      	cmp	r3, #3
 800a388:	d81a      	bhi.n	800a3c0 <lsm6dsl_xl_full_scale_get+0x5c>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <lsm6dsl_xl_full_scale_get+0x2c>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3a1 	.word	0x0800a3a1
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3b1 	.word	0x0800a3b1
 800a39c:	0800a3b9 	.word	0x0800a3b9
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
      break;
 800a3a6:	e00f      	b.n	800a3c8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	701a      	strb	r2, [r3, #0]
      break;
 800a3ae:	e00b      	b.n	800a3c8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	701a      	strb	r2, [r3, #0]
      break;
 800a3b6:	e007      	b.n	800a3c8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2203      	movs	r2, #3
 800a3bc:	701a      	strb	r2, [r3, #0]
      break;
 800a3be:	e003      	b.n	800a3c8 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	701a      	strb	r2, [r3, #0]
      break;
 800a3c6:	bf00      	nop
  }

  return ret;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop

0800a3d4 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a3e0:	f107 0208 	add.w	r2, r7, #8
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	2110      	movs	r1, #16
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ff65 	bl	800a2b8 <lsm6dsl_read_reg>
 800a3ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10f      	bne.n	800a416 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800a3f6:	78fb      	ldrb	r3, [r7, #3]
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	7a3b      	ldrb	r3, [r7, #8]
 800a400:	f362 1307 	bfi	r3, r2, #4, #4
 800a404:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a406:	f107 0208 	add.w	r2, r7, #8
 800a40a:	2301      	movs	r3, #1
 800a40c:	2110      	movs	r1, #16
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff ff6a 	bl	800a2e8 <lsm6dsl_write_reg>
 800a414:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a416:	68fb      	ldr	r3, [r7, #12]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a42a:	f107 0208 	add.w	r2, r7, #8
 800a42e:	2301      	movs	r3, #1
 800a430:	2110      	movs	r1, #16
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7ff ff40 	bl	800a2b8 <lsm6dsl_read_reg>
 800a438:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800a43a:	7a3b      	ldrb	r3, [r7, #8]
 800a43c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b0b      	cmp	r3, #11
 800a444:	d84a      	bhi.n	800a4dc <lsm6dsl_xl_data_rate_get+0xbc>
 800a446:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <lsm6dsl_xl_data_rate_get+0x2c>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a47d 	.word	0x0800a47d
 800a450:	0800a485 	.word	0x0800a485
 800a454:	0800a48d 	.word	0x0800a48d
 800a458:	0800a495 	.word	0x0800a495
 800a45c:	0800a49d 	.word	0x0800a49d
 800a460:	0800a4a5 	.word	0x0800a4a5
 800a464:	0800a4ad 	.word	0x0800a4ad
 800a468:	0800a4b5 	.word	0x0800a4b5
 800a46c:	0800a4bd 	.word	0x0800a4bd
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a4cd 	.word	0x0800a4cd
 800a478:	0800a4d5 	.word	0x0800a4d5
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
      break;
 800a482:	e02f      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	2201      	movs	r2, #1
 800a488:	701a      	strb	r2, [r3, #0]
      break;
 800a48a:	e02b      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2202      	movs	r2, #2
 800a490:	701a      	strb	r2, [r3, #0]
      break;
 800a492:	e027      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	2203      	movs	r2, #3
 800a498:	701a      	strb	r2, [r3, #0]
      break;
 800a49a:	e023      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2204      	movs	r2, #4
 800a4a0:	701a      	strb	r2, [r3, #0]
      break;
 800a4a2:	e01f      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2205      	movs	r2, #5
 800a4a8:	701a      	strb	r2, [r3, #0]
      break;
 800a4aa:	e01b      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	2206      	movs	r2, #6
 800a4b0:	701a      	strb	r2, [r3, #0]
      break;
 800a4b2:	e017      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2207      	movs	r2, #7
 800a4b8:	701a      	strb	r2, [r3, #0]
      break;
 800a4ba:	e013      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2208      	movs	r2, #8
 800a4c0:	701a      	strb	r2, [r3, #0]
      break;
 800a4c2:	e00f      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2209      	movs	r2, #9
 800a4c8:	701a      	strb	r2, [r3, #0]
      break;
 800a4ca:	e00b      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	701a      	strb	r2, [r3, #0]
      break;
 800a4d2:	e007      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	220b      	movs	r2, #11
 800a4d8:	701a      	strb	r2, [r3, #0]
      break;
 800a4da:	e003      	b.n	800a4e4 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	220c      	movs	r2, #12
 800a4e0:	701a      	strb	r2, [r3, #0]
      break;
 800a4e2:	bf00      	nop
  }

  return ret;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop

0800a4f0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a4fc:	f107 0208 	add.w	r2, r7, #8
 800a500:	2301      	movs	r3, #1
 800a502:	2111      	movs	r1, #17
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff fed7 	bl	800a2b8 <lsm6dsl_read_reg>
 800a50a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10f      	bne.n	800a532 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	f003 0307 	and.w	r3, r3, #7
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	7a3b      	ldrb	r3, [r7, #8]
 800a51c:	f362 0343 	bfi	r3, r2, #1, #3
 800a520:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a522:	f107 0208 	add.w	r2, r7, #8
 800a526:	2301      	movs	r3, #1
 800a528:	2111      	movs	r1, #17
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff fedc 	bl	800a2e8 <lsm6dsl_write_reg>
 800a530:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a532:	68fb      	ldr	r3, [r7, #12]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a546:	f107 0208 	add.w	r2, r7, #8
 800a54a:	2301      	movs	r3, #1
 800a54c:	2111      	movs	r1, #17
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff feb2 	bl	800a2b8 <lsm6dsl_read_reg>
 800a554:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 800a556:	7a3b      	ldrb	r3, [r7, #8]
 800a558:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b06      	cmp	r3, #6
 800a560:	d824      	bhi.n	800a5ac <lsm6dsl_gy_full_scale_get+0x70>
 800a562:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <lsm6dsl_gy_full_scale_get+0x2c>)
 800a564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a568:	0800a585 	.word	0x0800a585
 800a56c:	0800a58d 	.word	0x0800a58d
 800a570:	0800a595 	.word	0x0800a595
 800a574:	0800a5ad 	.word	0x0800a5ad
 800a578:	0800a59d 	.word	0x0800a59d
 800a57c:	0800a5ad 	.word	0x0800a5ad
 800a580:	0800a5a5 	.word	0x0800a5a5
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	701a      	strb	r2, [r3, #0]
      break;
 800a58a:	e013      	b.n	800a5b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2201      	movs	r2, #1
 800a590:	701a      	strb	r2, [r3, #0]
      break;
 800a592:	e00f      	b.n	800a5b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2202      	movs	r2, #2
 800a598:	701a      	strb	r2, [r3, #0]
      break;
 800a59a:	e00b      	b.n	800a5b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	2204      	movs	r2, #4
 800a5a0:	701a      	strb	r2, [r3, #0]
      break;
 800a5a2:	e007      	b.n	800a5b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	701a      	strb	r2, [r3, #0]
      break;
 800a5aa:	e003      	b.n	800a5b4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2207      	movs	r2, #7
 800a5b0:	701a      	strb	r2, [r3, #0]
      break;
 800a5b2:	bf00      	nop
  }

  return ret;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop

0800a5c0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a5cc:	f107 0208 	add.w	r2, r7, #8
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	2111      	movs	r1, #17
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff fe6f 	bl	800a2b8 <lsm6dsl_read_reg>
 800a5da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10f      	bne.n	800a602 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800a5e2:	78fb      	ldrb	r3, [r7, #3]
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	7a3b      	ldrb	r3, [r7, #8]
 800a5ec:	f362 1307 	bfi	r3, r2, #4, #4
 800a5f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a5f2:	f107 0208 	add.w	r2, r7, #8
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	2111      	movs	r1, #17
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff fe74 	bl	800a2e8 <lsm6dsl_write_reg>
 800a600:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a602:	68fb      	ldr	r3, [r7, #12]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a616:	f107 0208 	add.w	r2, r7, #8
 800a61a:	2301      	movs	r3, #1
 800a61c:	2111      	movs	r1, #17
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe4a 	bl	800a2b8 <lsm6dsl_read_reg>
 800a624:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 800a626:	7a3b      	ldrb	r3, [r7, #8]
 800a628:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b0a      	cmp	r3, #10
 800a630:	d844      	bhi.n	800a6bc <lsm6dsl_gy_data_rate_get+0xb0>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <lsm6dsl_gy_data_rate_get+0x2c>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a665 	.word	0x0800a665
 800a63c:	0800a66d 	.word	0x0800a66d
 800a640:	0800a675 	.word	0x0800a675
 800a644:	0800a67d 	.word	0x0800a67d
 800a648:	0800a685 	.word	0x0800a685
 800a64c:	0800a68d 	.word	0x0800a68d
 800a650:	0800a695 	.word	0x0800a695
 800a654:	0800a69d 	.word	0x0800a69d
 800a658:	0800a6a5 	.word	0x0800a6a5
 800a65c:	0800a6ad 	.word	0x0800a6ad
 800a660:	0800a6b5 	.word	0x0800a6b5
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
      break;
 800a66a:	e02b      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2201      	movs	r2, #1
 800a670:	701a      	strb	r2, [r3, #0]
      break;
 800a672:	e027      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2202      	movs	r2, #2
 800a678:	701a      	strb	r2, [r3, #0]
      break;
 800a67a:	e023      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2203      	movs	r2, #3
 800a680:	701a      	strb	r2, [r3, #0]
      break;
 800a682:	e01f      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2204      	movs	r2, #4
 800a688:	701a      	strb	r2, [r3, #0]
      break;
 800a68a:	e01b      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2205      	movs	r2, #5
 800a690:	701a      	strb	r2, [r3, #0]
      break;
 800a692:	e017      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2206      	movs	r2, #6
 800a698:	701a      	strb	r2, [r3, #0]
      break;
 800a69a:	e013      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	2207      	movs	r2, #7
 800a6a0:	701a      	strb	r2, [r3, #0]
      break;
 800a6a2:	e00f      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	2208      	movs	r2, #8
 800a6a8:	701a      	strb	r2, [r3, #0]
      break;
 800a6aa:	e00b      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2209      	movs	r2, #9
 800a6b0:	701a      	strb	r2, [r3, #0]
      break;
 800a6b2:	e007      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	220a      	movs	r2, #10
 800a6b8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ba:	e003      	b.n	800a6c4 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	220b      	movs	r2, #11
 800a6c0:	701a      	strb	r2, [r3, #0]
      break;
 800a6c2:	bf00      	nop
  }

  return ret;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop

0800a6d0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a6dc:	f107 0208 	add.w	r2, r7, #8
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	2112      	movs	r1, #18
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff fde7 	bl	800a2b8 <lsm6dsl_read_reg>
 800a6ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10f      	bne.n	800a712 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	7a3b      	ldrb	r3, [r7, #8]
 800a6fc:	f362 1386 	bfi	r3, r2, #6, #1
 800a700:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a702:	f107 0208 	add.w	r2, r7, #8
 800a706:	2301      	movs	r3, #1
 800a708:	2112      	movs	r1, #18
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fdec 	bl	800a2e8 <lsm6dsl_write_reg>
 800a710:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a712:	68fb      	ldr	r3, [r7, #12]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800a726:	f107 020c 	add.w	r2, r7, #12
 800a72a:	2306      	movs	r3, #6
 800a72c:	2122      	movs	r1, #34	; 0x22
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fdc2 	bl	800a2b8 <lsm6dsl_read_reg>
 800a734:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a736:	7b7b      	ldrb	r3, [r7, #13]
 800a738:	b21a      	sxth	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a744:	b29b      	uxth	r3, r3
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	b29a      	uxth	r2, r3
 800a74a:	7b3b      	ldrb	r3, [r7, #12]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	4413      	add	r3, r2
 800a750:	b29b      	uxth	r3, r3
 800a752:	b21a      	sxth	r2, r3
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a758:	7bfa      	ldrb	r2, [r7, #15]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	3302      	adds	r3, #2
 800a75e:	b212      	sxth	r2, r2
 800a760:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	3302      	adds	r3, #2
 800a766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	b29a      	uxth	r2, r3
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	b29b      	uxth	r3, r3
 800a774:	4413      	add	r3, r2
 800a776:	b29a      	uxth	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	3302      	adds	r3, #2
 800a77c:	b212      	sxth	r2, r2
 800a77e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a780:	7c7a      	ldrb	r2, [r7, #17]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	3304      	adds	r3, #4
 800a786:	b212      	sxth	r2, r2
 800a788:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	3304      	adds	r3, #4
 800a78e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a792:	b29b      	uxth	r3, r3
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	b29a      	uxth	r2, r3
 800a798:	7c3b      	ldrb	r3, [r7, #16]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4413      	add	r3, r2
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	b212      	sxth	r2, r2
 800a7a6:	801a      	strh	r2, [r3, #0]

  return ret;
 800a7a8:	697b      	ldr	r3, [r7, #20]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800a7bc:	f107 020c 	add.w	r2, r7, #12
 800a7c0:	2306      	movs	r3, #6
 800a7c2:	2128      	movs	r1, #40	; 0x28
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7ff fd77 	bl	800a2b8 <lsm6dsl_read_reg>
 800a7ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a7cc:	7b7b      	ldrb	r3, [r7, #13]
 800a7ce:	b21a      	sxth	r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	7b3b      	ldrb	r3, [r7, #12]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	b21a      	sxth	r2, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a7ee:	7bfa      	ldrb	r2, [r7, #15]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	b212      	sxth	r2, r2
 800a7f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	3302      	adds	r3, #2
 800a7fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a800:	b29b      	uxth	r3, r3
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	b29a      	uxth	r2, r3
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	4413      	add	r3, r2
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	3302      	adds	r3, #2
 800a812:	b212      	sxth	r2, r2
 800a814:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a816:	7c7a      	ldrb	r2, [r7, #17]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	3304      	adds	r3, #4
 800a81c:	b212      	sxth	r2, r2
 800a81e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	3304      	adds	r3, #4
 800a824:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	021b      	lsls	r3, r3, #8
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	7c3b      	ldrb	r3, [r7, #16]
 800a830:	b29b      	uxth	r3, r3
 800a832:	4413      	add	r3, r2
 800a834:	b29a      	uxth	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	3304      	adds	r3, #4
 800a83a:	b212      	sxth	r2, r2
 800a83c:	801a      	strh	r2, [r3, #0]

  return ret;
 800a83e:	697b      	ldr	r3, [r7, #20]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3718      	adds	r7, #24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800a852:	2301      	movs	r3, #1
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	210f      	movs	r1, #15
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f7ff fd2d 	bl	800a2b8 <lsm6dsl_read_reg>
 800a85e:	60f8      	str	r0, [r7, #12]

  return ret;
 800a860:	68fb      	ldr	r3, [r7, #12]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a876:	f107 0208 	add.w	r2, r7, #8
 800a87a:	2301      	movs	r3, #1
 800a87c:	2112      	movs	r1, #18
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fd1a 	bl	800a2b8 <lsm6dsl_read_reg>
 800a884:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10f      	bne.n	800a8ac <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800a88c:	78fb      	ldrb	r3, [r7, #3]
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	b2da      	uxtb	r2, r3
 800a894:	7a3b      	ldrb	r3, [r7, #8]
 800a896:	f362 0382 	bfi	r3, r2, #2, #1
 800a89a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a89c:	f107 0208 	add.w	r2, r7, #8
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	2112      	movs	r1, #18
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff fd1f 	bl	800a2e8 <lsm6dsl_write_reg>
 800a8aa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800a8c2:	f107 0208 	add.w	r2, r7, #8
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	210a      	movs	r1, #10
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fcf4 	bl	800a2b8 <lsm6dsl_read_reg>
 800a8d0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10f      	bne.n	800a8f8 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	7a3b      	ldrb	r3, [r7, #8]
 800a8e2:	f362 0302 	bfi	r3, r2, #0, #3
 800a8e6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800a8e8:	f107 0208 	add.w	r2, r7, #8
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	210a      	movs	r1, #10
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff fcf9 	bl	800a2e8 <lsm6dsl_write_reg>
 800a8f6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <IKS01A2_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08a      	sub	sp, #40	; 0x28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a90e:	2300      	movs	r3, #0
 800a910:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800a912:	2301      	movs	r3, #1
 800a914:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <IKS01A2_ENV_SENSOR_Init+0x24>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b01      	cmp	r3, #1
 800a924:	d032      	beq.n	800a98c <IKS01A2_ENV_SENSOR_Init+0x88>
 800a926:	e063      	b.n	800a9f0 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800a928:	6838      	ldr	r0, [r7, #0]
 800a92a:	f000 f931 	bl	800ab90 <HTS221_0_Probe>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800a934:	f04f 33ff 	mov.w	r3, #4294967295
 800a938:	e098      	b.n	800aa6c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a93a:	4a4e      	ldr	r2, [pc, #312]	; (800aa74 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	494c      	ldr	r1, [pc, #304]	; (800aa78 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a94c:	f107 0108 	add.w	r1, r7, #8
 800a950:	4610      	mov	r0, r2
 800a952:	4798      	blx	r3
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a95a:	f06f 0306 	mvn.w	r3, #6
 800a95e:	e085      	b.n	800aa6c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800a960:	7a3b      	ldrb	r3, [r7, #8]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d103      	bne.n	800a96e <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f043 0301 	orr.w	r3, r3, #1
 800a96c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a96e:	7abb      	ldrb	r3, [r7, #10]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d103      	bne.n	800a97c <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	f043 0304 	orr.w	r3, r3, #4
 800a97a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a97c:	7a7b      	ldrb	r3, [r7, #9]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d13a      	bne.n	800a9f8 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	f043 0302 	orr.w	r3, r3, #2
 800a988:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a98a:	e035      	b.n	800a9f8 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800a98c:	6838      	ldr	r0, [r7, #0]
 800a98e:	f000 f9b9 	bl	800ad04 <LPS22HB_0_Probe>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800a998:	f04f 33ff 	mov.w	r3, #4294967295
 800a99c:	e066      	b.n	800aa6c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a99e:	4a35      	ldr	r2, [pc, #212]	; (800aa74 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4933      	ldr	r1, [pc, #204]	; (800aa78 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a9b0:	f107 0108 	add.w	r1, r7, #8
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	4798      	blx	r3
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a9be:	f06f 0306 	mvn.w	r3, #6
 800a9c2:	e053      	b.n	800aa6c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800a9c4:	7a3b      	ldrb	r3, [r7, #8]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d103      	bne.n	800a9d2 <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	f043 0301 	orr.w	r3, r3, #1
 800a9d0:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a9d2:	7abb      	ldrb	r3, [r7, #10]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d103      	bne.n	800a9e0 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f043 0304 	orr.w	r3, r3, #4
 800a9de:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a9e0:	7a7b      	ldrb	r3, [r7, #9]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d10a      	bne.n	800a9fc <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	f043 0302 	orr.w	r3, r3, #2
 800a9ec:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a9ee:	e005      	b.n	800a9fc <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a9f0:	f06f 0301 	mvn.w	r3, #1
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9f6:	e002      	b.n	800a9fe <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800a9f8:	bf00      	nop
 800a9fa:	e000      	b.n	800a9fe <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800a9fc:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	e031      	b.n	800aa6c <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	e02a      	b.n	800aa64 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	4013      	ands	r3, r2
 800aa14:	6a3a      	ldr	r2, [r7, #32]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d11e      	bne.n	800aa58 <IKS01A2_ENV_SENSOR_Init+0x154>
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	6a3a      	ldr	r2, [r7, #32]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d118      	bne.n	800aa58 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800aa26:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <IKS01A2_ENV_SENSOR_Init+0x178>)
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aa2e:	4814      	ldr	r0, [pc, #80]	; (800aa80 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	4413      	add	r3, r2
 800aa38:	440b      	add	r3, r1
 800aa3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	490d      	ldr	r1, [pc, #52]	; (800aa78 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aa48:	4610      	mov	r0, r2
 800aa4a:	4798      	blx	r3
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800aa52:	f06f 0304 	mvn.w	r3, #4
 800aa56:	e009      	b.n	800aa6c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	3301      	adds	r3, #1
 800aa62:	61fb      	str	r3, [r7, #28]
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d9d1      	bls.n	800aa0e <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3728      	adds	r7, #40	; 0x28
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	200014d4 	.word	0x200014d4
 800aa78:	200014b4 	.word	0x200014b4
 800aa7c:	2000018c 	.word	0x2000018c
 800aa80:	200014bc 	.word	0x200014bc

0800aa84 <IKS01A2_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d903      	bls.n	800aa9c <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aa94:	f06f 0301 	mvn.w	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
 800aa9a:	e028      	b.n	800aaee <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aa9c:	4a16      	ldr	r2, [pc, #88]	; (800aaf8 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d11c      	bne.n	800aae8 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800aaae:	4a13      	ldr	r2, [pc, #76]	; (800aafc <IKS01A2_ENV_SENSOR_Enable+0x78>)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aab6:	4812      	ldr	r0, [pc, #72]	; (800ab00 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	4613      	mov	r3, r2
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	4413      	add	r3, r2
 800aac0:	440b      	add	r3, r1
 800aac2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	490e      	ldr	r1, [pc, #56]	; (800ab04 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aada:	f06f 0304 	mvn.w	r3, #4
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e005      	b.n	800aaee <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	e002      	b.n	800aaee <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800aae8:	f06f 0301 	mvn.w	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800aaee:	68fb      	ldr	r3, [r7, #12]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	200014dc 	.word	0x200014dc
 800aafc:	2000018c 	.word	0x2000018c
 800ab00:	200014bc 	.word	0x200014bc
 800ab04:	200014b4 	.word	0x200014b4

0800ab08 <IKS01A2_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d903      	bls.n	800ab22 <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab1a:	f06f 0301 	mvn.w	r3, #1
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e029      	b.n	800ab76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800ab22:	4a17      	ldr	r2, [pc, #92]	; (800ab80 <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	4013      	ands	r3, r2
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d11d      	bne.n	800ab70 <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800ab34:	4a13      	ldr	r2, [pc, #76]	; (800ab84 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ab3c:	4812      	ldr	r0, [pc, #72]	; (800ab88 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4613      	mov	r3, r2
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	440b      	add	r3, r1
 800ab48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	490f      	ldr	r1, [pc, #60]	; (800ab8c <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab62:	f06f 0304 	mvn.w	r3, #4
 800ab66:	617b      	str	r3, [r7, #20]
 800ab68:	e005      	b.n	800ab76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	617b      	str	r3, [r7, #20]
 800ab6e:	e002      	b.n	800ab76 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ab70:	f06f 0301 	mvn.w	r3, #1
 800ab74:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ab76:	697b      	ldr	r3, [r7, #20]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	200014dc 	.word	0x200014dc
 800ab84:	2000018c 	.word	0x2000018c
 800ab88:	200014bc 	.word	0x200014bc
 800ab8c:	200014b4 	.word	0x200014b4

0800ab90 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b090      	sub	sp, #64	; 0x40
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800aba0:	23bf      	movs	r3, #191	; 0xbf
 800aba2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800aba6:	4b49      	ldr	r3, [pc, #292]	; (800accc <HTS221_0_Probe+0x13c>)
 800aba8:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800abaa:	4b49      	ldr	r3, [pc, #292]	; (800acd0 <HTS221_0_Probe+0x140>)
 800abac:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800abae:	4b49      	ldr	r3, [pc, #292]	; (800acd4 <HTS221_0_Probe+0x144>)
 800abb0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800abb2:	4b49      	ldr	r3, [pc, #292]	; (800acd8 <HTS221_0_Probe+0x148>)
 800abb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800abb6:	4b49      	ldr	r3, [pc, #292]	; (800acdc <HTS221_0_Probe+0x14c>)
 800abb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800abba:	f107 031c 	add.w	r3, r7, #28
 800abbe:	4619      	mov	r1, r3
 800abc0:	4847      	ldr	r0, [pc, #284]	; (800ace0 <HTS221_0_Probe+0x150>)
 800abc2:	f7fb fbc7 	bl	8006354 <HTS221_RegisterBusIO>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abcc:	f06f 0306 	mvn.w	r3, #6
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd2:	e076      	b.n	800acc2 <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800abd4:	f107 031b 	add.w	r3, r7, #27
 800abd8:	4619      	mov	r1, r3
 800abda:	4841      	ldr	r0, [pc, #260]	; (800ace0 <HTS221_0_Probe+0x150>)
 800abdc:	f7fb fc43 	bl	8006466 <HTS221_ReadID>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abe6:	f06f 0306 	mvn.w	r3, #6
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abec:	e069      	b.n	800acc2 <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800abee:	7efb      	ldrb	r3, [r7, #27]
 800abf0:	2bbc      	cmp	r3, #188	; 0xbc
 800abf2:	d003      	beq.n	800abfc <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800abf4:	f06f 0306 	mvn.w	r3, #6
 800abf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abfa:	e062      	b.n	800acc2 <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800abfc:	f107 0308 	add.w	r3, r7, #8
 800ac00:	4619      	mov	r1, r3
 800ac02:	4837      	ldr	r0, [pc, #220]	; (800ace0 <HTS221_0_Probe+0x150>)
 800ac04:	f7fb fc46 	bl	8006494 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ac08:	7a3b      	ldrb	r3, [r7, #8]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	7a7b      	ldrb	r3, [r7, #9]
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800ac12:	7abb      	ldrb	r3, [r7, #10]
 800ac14:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ac16:	4313      	orrs	r3, r2
 800ac18:	4a32      	ldr	r2, [pc, #200]	; (800ace4 <HTS221_0_Probe+0x154>)
 800ac1a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800ac1c:	4b32      	ldr	r3, [pc, #200]	; (800ace8 <HTS221_0_Probe+0x158>)
 800ac1e:	4a30      	ldr	r2, [pc, #192]	; (800ace0 <HTS221_0_Probe+0x150>)
 800ac20:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800ac22:	4b32      	ldr	r3, [pc, #200]	; (800acec <HTS221_0_Probe+0x15c>)
 800ac24:	4a32      	ldr	r2, [pc, #200]	; (800acf0 <HTS221_0_Probe+0x160>)
 800ac26:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800ac28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d11d      	bne.n	800ac6a <HTS221_0_Probe+0xda>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d018      	beq.n	800ac6a <HTS221_0_Probe+0xda>
 800ac38:	7a3b      	ldrb	r3, [r7, #8]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d115      	bne.n	800ac6a <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800ac3e:	4b2d      	ldr	r3, [pc, #180]	; (800acf4 <HTS221_0_Probe+0x164>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	4a2d      	ldr	r2, [pc, #180]	; (800acf8 <HTS221_0_Probe+0x168>)
 800ac44:	492d      	ldr	r1, [pc, #180]	; (800acfc <HTS221_0_Probe+0x16c>)
 800ac46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800ac4a:	4b28      	ldr	r3, [pc, #160]	; (800acec <HTS221_0_Probe+0x15c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a25      	ldr	r2, [pc, #148]	; (800ace8 <HTS221_0_Probe+0x158>)
 800ac52:	6812      	ldr	r2, [r2, #0]
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac5e:	f06f 0304 	mvn.w	r3, #4
 800ac62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac64:	e001      	b.n	800ac6a <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ac66:	2300      	movs	r3, #0
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800ac6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d11d      	bne.n	800acac <HTS221_0_Probe+0x11c>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f003 0304 	and.w	r3, r3, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d018      	beq.n	800acac <HTS221_0_Probe+0x11c>
 800ac7a:	7abb      	ldrb	r3, [r7, #10]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d115      	bne.n	800acac <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800ac80:	4b1c      	ldr	r3, [pc, #112]	; (800acf4 <HTS221_0_Probe+0x164>)
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	4a1c      	ldr	r2, [pc, #112]	; (800acf8 <HTS221_0_Probe+0x168>)
 800ac86:	491e      	ldr	r1, [pc, #120]	; (800ad00 <HTS221_0_Probe+0x170>)
 800ac88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800ac8c:	4b17      	ldr	r3, [pc, #92]	; (800acec <HTS221_0_Probe+0x15c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a15      	ldr	r2, [pc, #84]	; (800ace8 <HTS221_0_Probe+0x158>)
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	4610      	mov	r0, r2
 800ac98:	4798      	blx	r3
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aca0:	f06f 0304 	mvn.w	r3, #4
 800aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca6:	e001      	b.n	800acac <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aca8:	2300      	movs	r3, #0
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d107      	bne.n	800acc2 <HTS221_0_Probe+0x132>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800acbc:	f06f 0304 	mvn.w	r3, #4
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800acc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3740      	adds	r7, #64	; 0x40
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	08005ea5 	.word	0x08005ea5
 800acd0:	08005f21 	.word	0x08005f21
 800acd4:	08005fd5 	.word	0x08005fd5
 800acd8:	08005f71 	.word	0x08005f71
 800acdc:	08006039 	.word	0x08006039
 800ace0:	200014e4 	.word	0x200014e4
 800ace4:	200014dc 	.word	0x200014dc
 800ace8:	200014b4 	.word	0x200014b4
 800acec:	200014d4 	.word	0x200014d4
 800acf0:	2000005c 	.word	0x2000005c
 800acf4:	2000018c 	.word	0x2000018c
 800acf8:	200014bc 	.word	0x200014bc
 800acfc:	20000080 	.word	0x20000080
 800ad00:	2000006c 	.word	0x2000006c

0800ad04 <LPS22HB_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b090      	sub	sp, #64	; 0x40
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800ad10:	2300      	movs	r3, #0
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800ad14:	23bb      	movs	r3, #187	; 0xbb
 800ad16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800ad1a:	4b4a      	ldr	r3, [pc, #296]	; (800ae44 <LPS22HB_0_Probe+0x140>)
 800ad1c:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800ad1e:	4b4a      	ldr	r3, [pc, #296]	; (800ae48 <LPS22HB_0_Probe+0x144>)
 800ad20:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800ad22:	4b4a      	ldr	r3, [pc, #296]	; (800ae4c <LPS22HB_0_Probe+0x148>)
 800ad24:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800ad26:	4b4a      	ldr	r3, [pc, #296]	; (800ae50 <LPS22HB_0_Probe+0x14c>)
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800ad2a:	4b4a      	ldr	r3, [pc, #296]	; (800ae54 <LPS22HB_0_Probe+0x150>)
 800ad2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800ad2e:	f107 031c 	add.w	r3, r7, #28
 800ad32:	4619      	mov	r1, r3
 800ad34:	4848      	ldr	r0, [pc, #288]	; (800ae58 <LPS22HB_0_Probe+0x154>)
 800ad36:	f7fc f92f 	bl	8006f98 <LPS22HB_RegisterBusIO>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad40:	f06f 0306 	mvn.w	r3, #6
 800ad44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad46:	e078      	b.n	800ae3a <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800ad48:	f107 031b 	add.w	r3, r7, #27
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4842      	ldr	r0, [pc, #264]	; (800ae58 <LPS22HB_0_Probe+0x154>)
 800ad50:	f7fc f9cb 	bl	80070ea <LPS22HB_ReadID>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad5a:	f06f 0306 	mvn.w	r3, #6
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad60:	e06b      	b.n	800ae3a <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800ad62:	7efb      	ldrb	r3, [r7, #27]
 800ad64:	2bb1      	cmp	r3, #177	; 0xb1
 800ad66:	d003      	beq.n	800ad70 <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad68:	f06f 0306 	mvn.w	r3, #6
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad6e:	e064      	b.n	800ae3a <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800ad70:	f107 0308 	add.w	r3, r7, #8
 800ad74:	4619      	mov	r1, r3
 800ad76:	4838      	ldr	r0, [pc, #224]	; (800ae58 <LPS22HB_0_Probe+0x154>)
 800ad78:	f7fc f9ce 	bl	8007118 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ad7c:	7a3b      	ldrb	r3, [r7, #8]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	7a7b      	ldrb	r3, [r7, #9]
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800ad86:	7abb      	ldrb	r3, [r7, #10]
 800ad88:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	4a33      	ldr	r2, [pc, #204]	; (800ae5c <LPS22HB_0_Probe+0x158>)
 800ad8e:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800ad90:	4b33      	ldr	r3, [pc, #204]	; (800ae60 <LPS22HB_0_Probe+0x15c>)
 800ad92:	4a31      	ldr	r2, [pc, #196]	; (800ae58 <LPS22HB_0_Probe+0x154>)
 800ad94:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800ad96:	4b33      	ldr	r3, [pc, #204]	; (800ae64 <LPS22HB_0_Probe+0x160>)
 800ad98:	4a33      	ldr	r2, [pc, #204]	; (800ae68 <LPS22HB_0_Probe+0x164>)
 800ad9a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d11e      	bne.n	800ade0 <LPS22HB_0_Probe+0xdc>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d019      	beq.n	800ade0 <LPS22HB_0_Probe+0xdc>
 800adac:	7a3b      	ldrb	r3, [r7, #8]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d116      	bne.n	800ade0 <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800adb2:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <LPS22HB_0_Probe+0x168>)
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	4a2e      	ldr	r2, [pc, #184]	; (800ae70 <LPS22HB_0_Probe+0x16c>)
 800adb8:	3303      	adds	r3, #3
 800adba:	492e      	ldr	r1, [pc, #184]	; (800ae74 <LPS22HB_0_Probe+0x170>)
 800adbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800adc0:	4b28      	ldr	r3, [pc, #160]	; (800ae64 <LPS22HB_0_Probe+0x160>)
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a26      	ldr	r2, [pc, #152]	; (800ae60 <LPS22HB_0_Probe+0x15c>)
 800adc8:	6852      	ldr	r2, [r2, #4]
 800adca:	4610      	mov	r0, r2
 800adcc:	4798      	blx	r3
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d003      	beq.n	800addc <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800add4:	f06f 0304 	mvn.w	r3, #4
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adda:	e001      	b.n	800ade0 <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800ade0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d11e      	bne.n	800ae24 <LPS22HB_0_Probe+0x120>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f003 0302 	and.w	r3, r3, #2
 800adec:	2b00      	cmp	r3, #0
 800adee:	d019      	beq.n	800ae24 <LPS22HB_0_Probe+0x120>
 800adf0:	7a7b      	ldrb	r3, [r7, #9]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d116      	bne.n	800ae24 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800adf6:	4b1d      	ldr	r3, [pc, #116]	; (800ae6c <LPS22HB_0_Probe+0x168>)
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4a1d      	ldr	r2, [pc, #116]	; (800ae70 <LPS22HB_0_Probe+0x16c>)
 800adfc:	3303      	adds	r3, #3
 800adfe:	491e      	ldr	r1, [pc, #120]	; (800ae78 <LPS22HB_0_Probe+0x174>)
 800ae00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800ae04:	4b17      	ldr	r3, [pc, #92]	; (800ae64 <LPS22HB_0_Probe+0x160>)
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a15      	ldr	r2, [pc, #84]	; (800ae60 <LPS22HB_0_Probe+0x15c>)
 800ae0c:	6852      	ldr	r2, [r2, #4]
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4798      	blx	r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae18:	f06f 0304 	mvn.w	r3, #4
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae1e:	e001      	b.n	800ae24 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800ae24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d107      	bne.n	800ae3a <LPS22HB_0_Probe+0x136>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae34:	f06f 0304 	mvn.w	r3, #4
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800ae3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3740      	adds	r7, #64	; 0x40
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	08005ea5 	.word	0x08005ea5
 800ae48:	08005f21 	.word	0x08005f21
 800ae4c:	08005fd5 	.word	0x08005fd5
 800ae50:	08005f71 	.word	0x08005f71
 800ae54:	08006039 	.word	0x08006039
 800ae58:	20001518 	.word	0x20001518
 800ae5c:	200014dc 	.word	0x200014dc
 800ae60:	200014b4 	.word	0x200014b4
 800ae64:	200014d4 	.word	0x200014d4
 800ae68:	20000094 	.word	0x20000094
 800ae6c:	2000018c 	.word	0x2000018c
 800ae70:	200014bc 	.word	0x200014bc
 800ae74:	200000b8 	.word	0x200000b8
 800ae78:	200000a4 	.word	0x200000a4

0800ae7c <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08e      	sub	sp, #56	; 0x38
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ae86:	2300      	movs	r3, #0
 800ae88:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d06e      	beq.n	800af76 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	f200 809d 	bhi.w	800afda <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <IKS01A2_MOTION_SENSOR_Init+0x32>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d032      	beq.n	800af12 <IKS01A2_MOTION_SENSOR_Init+0x96>
 800aeac:	e095      	b.n	800afda <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800aeae:	6838      	ldr	r0, [r7, #0]
 800aeb0:	f000 f966 	bl	800b180 <LSM6DSL_0_Probe>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800aeba:	f04f 33ff 	mov.w	r3, #4294967295
 800aebe:	e0cc      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aec0:	4a68      	ldr	r2, [pc, #416]	; (800b064 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	4967      	ldr	r1, [pc, #412]	; (800b068 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aed2:	f107 010c 	add.w	r1, r7, #12
 800aed6:	4610      	mov	r0, r2
 800aed8:	4798      	blx	r3
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d002      	beq.n	800aee6 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800aee0:	f06f 0306 	mvn.w	r3, #6
 800aee4:	e0b9      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800aee6:	7b3b      	ldrb	r3, [r7, #12]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d103      	bne.n	800aef4 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	f043 0302 	orr.w	r3, r3, #2
 800aef2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800aef4:	7b7b      	ldrb	r3, [r7, #13]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d103      	bne.n	800af02 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d16c      	bne.n	800afe2 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0a:	f043 0304 	orr.w	r3, r3, #4
 800af0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800af10:	e067      	b.n	800afe2 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800af12:	6838      	ldr	r0, [r7, #0]
 800af14:	f000 f9f0 	bl	800b2f8 <LSM303AGR_ACC_0_Probe>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800af1e:	f04f 33ff 	mov.w	r3, #4294967295
 800af22:	e09a      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af24:	4a4f      	ldr	r2, [pc, #316]	; (800b064 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	494e      	ldr	r1, [pc, #312]	; (800b068 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af36:	f107 010c 	add.w	r1, r7, #12
 800af3a:	4610      	mov	r0, r2
 800af3c:	4798      	blx	r3
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af44:	f06f 0306 	mvn.w	r3, #6
 800af48:	e087      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800af4a:	7b3b      	ldrb	r3, [r7, #12]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d103      	bne.n	800af58 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	f043 0302 	orr.w	r3, r3, #2
 800af56:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800af58:	7b7b      	ldrb	r3, [r7, #13]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d103      	bne.n	800af66 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	f043 0301 	orr.w	r3, r3, #1
 800af64:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d13c      	bne.n	800afe6 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	f043 0304 	orr.w	r3, r3, #4
 800af72:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800af74:	e037      	b.n	800afe6 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800af76:	6838      	ldr	r0, [r7, #0]
 800af78:	f000 fa62 	bl	800b440 <LSM303AGR_MAG_0_Probe>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800af82:	f04f 33ff 	mov.w	r3, #4294967295
 800af86:	e068      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af88:	4a36      	ldr	r2, [pc, #216]	; (800b064 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	4935      	ldr	r1, [pc, #212]	; (800b068 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af9a:	f107 010c 	add.w	r1, r7, #12
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800afa8:	f06f 0306 	mvn.w	r3, #6
 800afac:	e055      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800afae:	7b3b      	ldrb	r3, [r7, #12]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d103      	bne.n	800afbc <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	f043 0302 	orr.w	r3, r3, #2
 800afba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800afbc:	7b7b      	ldrb	r3, [r7, #13]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d103      	bne.n	800afca <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800afc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800afca:	7bbb      	ldrb	r3, [r7, #14]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d10c      	bne.n	800afea <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	f043 0304 	orr.w	r3, r3, #4
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800afd8:	e007      	b.n	800afea <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800afda:	f06f 0301 	mvn.w	r3, #1
 800afde:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800afe0:	e004      	b.n	800afec <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800afe2:	bf00      	nop
 800afe4:	e002      	b.n	800afec <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800afe6:	bf00      	nop
 800afe8:	e000      	b.n	800afec <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800afea:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800afec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800aff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff4:	e031      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800aff6:	2300      	movs	r3, #0
 800aff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800affa:	e02a      	b.n	800b052 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	4013      	ands	r3, r2
 800b002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b004:	429a      	cmp	r2, r3
 800b006:	d11e      	bne.n	800b046 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 800b008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	4013      	ands	r3, r2
 800b00e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b010:	429a      	cmp	r2, r3
 800b012:	d118      	bne.n	800b046 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b014:	4a15      	ldr	r2, [pc, #84]	; (800b06c <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b01c:	4814      	ldr	r0, [pc, #80]	; (800b070 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	4613      	mov	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	440b      	add	r3, r1
 800b028:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	490e      	ldr	r1, [pc, #56]	; (800b068 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b036:	4610      	mov	r0, r2
 800b038:	4798      	blx	r3
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d002      	beq.n	800b046 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b040:	f06f 0304 	mvn.w	r3, #4
 800b044:	e009      	b.n	800b05a <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04e:	3301      	adds	r3, #1
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	2b02      	cmp	r3, #2
 800b056:	d9d1      	bls.n	800affc <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3738      	adds	r7, #56	; 0x38
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	2000157c 	.word	0x2000157c
 800b068:	2000154c 	.word	0x2000154c
 800b06c:	200001a0 	.word	0x200001a0
 800b070:	20001558 	.word	0x20001558

0800b074 <IKS01A2_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d903      	bls.n	800b08c <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b084:	f06f 0301 	mvn.w	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	e028      	b.n	800b0de <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b08c:	4a16      	ldr	r2, [pc, #88]	; (800b0e8 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	4013      	ands	r3, r2
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d11c      	bne.n	800b0d8 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b09e:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b0a6:	4812      	ldr	r0, [pc, #72]	; (800b0f0 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	490e      	ldr	r1, [pc, #56]	; (800b0f4 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0ca:	f06f 0304 	mvn.w	r3, #4
 800b0ce:	60fb      	str	r3, [r7, #12]
 800b0d0:	e005      	b.n	800b0de <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	e002      	b.n	800b0de <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b0d8:	f06f 0301 	mvn.w	r3, #1
 800b0dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b0de:	68fb      	ldr	r3, [r7, #12]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	20001588 	.word	0x20001588
 800b0ec:	200001a0 	.word	0x200001a0
 800b0f0:	20001558 	.word	0x20001558
 800b0f4:	2000154c 	.word	0x2000154c

0800b0f8 <IKS01A2_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2b02      	cmp	r3, #2
 800b108:	d903      	bls.n	800b112 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b10a:	f06f 0301 	mvn.w	r3, #1
 800b10e:	617b      	str	r3, [r7, #20]
 800b110:	e029      	b.n	800b166 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b112:	4a17      	ldr	r2, [pc, #92]	; (800b170 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	4013      	ands	r3, r2
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	429a      	cmp	r2, r3
 800b122:	d11d      	bne.n	800b160 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b124:	4a13      	ldr	r2, [pc, #76]	; (800b174 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b12c:	4812      	ldr	r0, [pc, #72]	; (800b178 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4613      	mov	r3, r2
 800b132:	005b      	lsls	r3, r3, #1
 800b134:	4413      	add	r3, r2
 800b136:	440b      	add	r3, r1
 800b138:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	490f      	ldr	r1, [pc, #60]	; (800b17c <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4610      	mov	r0, r2
 800b14a:	4798      	blx	r3
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b152:	f06f 0304 	mvn.w	r3, #4
 800b156:	617b      	str	r3, [r7, #20]
 800b158:	e005      	b.n	800b166 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	617b      	str	r3, [r7, #20]
 800b15e:	e002      	b.n	800b166 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b160:	f06f 0301 	mvn.w	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b166:	697b      	ldr	r3, [r7, #20]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20001588 	.word	0x20001588
 800b174:	200001a0 	.word	0x200001a0
 800b178:	20001558 	.word	0x20001558
 800b17c:	2000154c 	.word	0x2000154c

0800b180 <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b094      	sub	sp, #80	; 0x50
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b188:	2300      	movs	r3, #0
 800b18a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800b18c:	2300      	movs	r3, #0
 800b18e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800b190:	23d7      	movs	r3, #215	; 0xd7
 800b192:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b196:	4b4a      	ldr	r3, [pc, #296]	; (800b2c0 <LSM6DSL_0_Probe+0x140>)
 800b198:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b19a:	4b4a      	ldr	r3, [pc, #296]	; (800b2c4 <LSM6DSL_0_Probe+0x144>)
 800b19c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b19e:	4b4a      	ldr	r3, [pc, #296]	; (800b2c8 <LSM6DSL_0_Probe+0x148>)
 800b1a0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b1a2:	4b4a      	ldr	r3, [pc, #296]	; (800b2cc <LSM6DSL_0_Probe+0x14c>)
 800b1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b1a6:	4b4a      	ldr	r3, [pc, #296]	; (800b2d0 <LSM6DSL_0_Probe+0x150>)
 800b1a8:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800b1aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4848      	ldr	r0, [pc, #288]	; (800b2d4 <LSM6DSL_0_Probe+0x154>)
 800b1b2:	f7fe f88d 	bl	80092d0 <LSM6DSL_RegisterBusIO>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1bc:	f06f 0306 	mvn.w	r3, #6
 800b1c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c2:	e077      	b.n	800b2b4 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800b1c4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4842      	ldr	r0, [pc, #264]	; (800b2d4 <LSM6DSL_0_Probe+0x154>)
 800b1cc:	f7fe f97a 	bl	80094c4 <LSM6DSL_ReadID>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1d6:	f06f 0306 	mvn.w	r3, #6
 800b1da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1dc:	e06a      	b.n	800b2b4 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800b1de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1e2:	2b6a      	cmp	r3, #106	; 0x6a
 800b1e4:	d003      	beq.n	800b1ee <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1e6:	f06f 0306 	mvn.w	r3, #6
 800b1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1ec:	e062      	b.n	800b2b4 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800b1ee:	f107 030c 	add.w	r3, r7, #12
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4837      	ldr	r0, [pc, #220]	; (800b2d4 <LSM6DSL_0_Probe+0x154>)
 800b1f6:	f7fe f97b 	bl	80094f0 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b1fa:	7b7b      	ldrb	r3, [r7, #13]
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	7b3b      	ldrb	r3, [r7, #12]
 800b200:	005b      	lsls	r3, r3, #1
 800b202:	431a      	orrs	r2, r3
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4313      	orrs	r3, r2
 800b20a:	4a33      	ldr	r2, [pc, #204]	; (800b2d8 <LSM6DSL_0_Probe+0x158>)
 800b20c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800b20e:	4b33      	ldr	r3, [pc, #204]	; (800b2dc <LSM6DSL_0_Probe+0x15c>)
 800b210:	4a30      	ldr	r2, [pc, #192]	; (800b2d4 <LSM6DSL_0_Probe+0x154>)
 800b212:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800b214:	4b32      	ldr	r3, [pc, #200]	; (800b2e0 <LSM6DSL_0_Probe+0x160>)
 800b216:	4a33      	ldr	r2, [pc, #204]	; (800b2e4 <LSM6DSL_0_Probe+0x164>)
 800b218:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d11d      	bne.n	800b25c <LSM6DSL_0_Probe+0xdc>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	2b00      	cmp	r3, #0
 800b228:	d018      	beq.n	800b25c <LSM6DSL_0_Probe+0xdc>
 800b22a:	7b7b      	ldrb	r3, [r7, #13]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d115      	bne.n	800b25c <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800b230:	4b2d      	ldr	r3, [pc, #180]	; (800b2e8 <LSM6DSL_0_Probe+0x168>)
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	4a2d      	ldr	r2, [pc, #180]	; (800b2ec <LSM6DSL_0_Probe+0x16c>)
 800b236:	492e      	ldr	r1, [pc, #184]	; (800b2f0 <LSM6DSL_0_Probe+0x170>)
 800b238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800b23c:	4b28      	ldr	r3, [pc, #160]	; (800b2e0 <LSM6DSL_0_Probe+0x160>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a26      	ldr	r2, [pc, #152]	; (800b2dc <LSM6DSL_0_Probe+0x15c>)
 800b244:	6812      	ldr	r2, [r2, #0]
 800b246:	4610      	mov	r0, r2
 800b248:	4798      	blx	r3
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b250:	f06f 0304 	mvn.w	r3, #4
 800b254:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b256:	e001      	b.n	800b25c <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b258:	2300      	movs	r3, #0
 800b25a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d11d      	bne.n	800b29e <LSM6DSL_0_Probe+0x11e>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d018      	beq.n	800b29e <LSM6DSL_0_Probe+0x11e>
 800b26c:	7b3b      	ldrb	r3, [r7, #12]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d115      	bne.n	800b29e <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b272:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <LSM6DSL_0_Probe+0x168>)
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	4a1d      	ldr	r2, [pc, #116]	; (800b2ec <LSM6DSL_0_Probe+0x16c>)
 800b278:	491e      	ldr	r1, [pc, #120]	; (800b2f4 <LSM6DSL_0_Probe+0x174>)
 800b27a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800b27e:	4b18      	ldr	r3, [pc, #96]	; (800b2e0 <LSM6DSL_0_Probe+0x160>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a15      	ldr	r2, [pc, #84]	; (800b2dc <LSM6DSL_0_Probe+0x15c>)
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	4610      	mov	r0, r2
 800b28a:	4798      	blx	r3
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b292:	f06f 0304 	mvn.w	r3, #4
 800b296:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b298:	e001      	b.n	800b29e <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b29a:	2300      	movs	r3, #0
 800b29c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d107      	bne.n	800b2b4 <LSM6DSL_0_Probe+0x134>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f003 0304 	and.w	r3, r3, #4
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2ae:	f06f 0304 	mvn.w	r3, #4
 800b2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800b2b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3750      	adds	r7, #80	; 0x50
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	08005ea5 	.word	0x08005ea5
 800b2c4:	08005f21 	.word	0x08005f21
 800b2c8:	08005fd5 	.word	0x08005fd5
 800b2cc:	08005f71 	.word	0x08005f71
 800b2d0:	08006039 	.word	0x08006039
 800b2d4:	20001594 	.word	0x20001594
 800b2d8:	20001588 	.word	0x20001588
 800b2dc:	2000154c 	.word	0x2000154c
 800b2e0:	2000157c 	.word	0x2000157c
 800b2e4:	20000134 	.word	0x20000134
 800b2e8:	200001a0 	.word	0x200001a0
 800b2ec:	20001558 	.word	0x20001558
 800b2f0:	20000168 	.word	0x20000168
 800b2f4:	20000144 	.word	0x20000144

0800b2f8 <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b094      	sub	sp, #80	; 0x50
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800b304:	2300      	movs	r3, #0
 800b306:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800b308:	2333      	movs	r3, #51	; 0x33
 800b30a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b30e:	4b3f      	ldr	r3, [pc, #252]	; (800b40c <LSM303AGR_ACC_0_Probe+0x114>)
 800b310:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b312:	4b3f      	ldr	r3, [pc, #252]	; (800b410 <LSM303AGR_ACC_0_Probe+0x118>)
 800b314:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b316:	4b3f      	ldr	r3, [pc, #252]	; (800b414 <LSM303AGR_ACC_0_Probe+0x11c>)
 800b318:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b31a:	4b3f      	ldr	r3, [pc, #252]	; (800b418 <LSM303AGR_ACC_0_Probe+0x120>)
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b31e:	4b3f      	ldr	r3, [pc, #252]	; (800b41c <LSM303AGR_ACC_0_Probe+0x124>)
 800b320:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800b322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b326:	4619      	mov	r1, r3
 800b328:	483d      	ldr	r0, [pc, #244]	; (800b420 <LSM303AGR_ACC_0_Probe+0x128>)
 800b32a:	f7fc fc17 	bl	8007b5c <LSM303AGR_ACC_RegisterBusIO>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b334:	f06f 0306 	mvn.w	r3, #6
 800b338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b33a:	e062      	b.n	800b402 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800b33c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b340:	4619      	mov	r1, r3
 800b342:	4837      	ldr	r0, [pc, #220]	; (800b420 <LSM303AGR_ACC_0_Probe+0x128>)
 800b344:	f7fc fccf 	bl	8007ce6 <LSM303AGR_ACC_ReadID>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b34e:	f06f 0306 	mvn.w	r3, #6
 800b352:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b354:	e055      	b.n	800b402 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800b356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b35a:	2b33      	cmp	r3, #51	; 0x33
 800b35c:	d003      	beq.n	800b366 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b35e:	f06f 0306 	mvn.w	r3, #6
 800b362:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b364:	e04d      	b.n	800b402 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	4619      	mov	r1, r3
 800b36c:	482c      	ldr	r0, [pc, #176]	; (800b420 <LSM303AGR_ACC_0_Probe+0x128>)
 800b36e:	f7fc fcd1 	bl	8007d14 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b372:	7b7b      	ldrb	r3, [r7, #13]
 800b374:	461a      	mov	r2, r3
 800b376:	7b3b      	ldrb	r3, [r7, #12]
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b380:	4313      	orrs	r3, r2
 800b382:	4a28      	ldr	r2, [pc, #160]	; (800b424 <LSM303AGR_ACC_0_Probe+0x12c>)
 800b384:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800b386:	4b28      	ldr	r3, [pc, #160]	; (800b428 <LSM303AGR_ACC_0_Probe+0x130>)
 800b388:	4a25      	ldr	r2, [pc, #148]	; (800b420 <LSM303AGR_ACC_0_Probe+0x128>)
 800b38a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800b38c:	4b27      	ldr	r3, [pc, #156]	; (800b42c <LSM303AGR_ACC_0_Probe+0x134>)
 800b38e:	4a28      	ldr	r2, [pc, #160]	; (800b430 <LSM303AGR_ACC_0_Probe+0x138>)
 800b390:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d11e      	bne.n	800b3d6 <LSM303AGR_ACC_0_Probe+0xde>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f003 0302 	and.w	r3, r3, #2
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d019      	beq.n	800b3d6 <LSM303AGR_ACC_0_Probe+0xde>
 800b3a2:	7b3b      	ldrb	r3, [r7, #12]
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d116      	bne.n	800b3d6 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b3a8:	4b22      	ldr	r3, [pc, #136]	; (800b434 <LSM303AGR_ACC_0_Probe+0x13c>)
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	4a22      	ldr	r2, [pc, #136]	; (800b438 <LSM303AGR_ACC_0_Probe+0x140>)
 800b3ae:	3303      	adds	r3, #3
 800b3b0:	4922      	ldr	r1, [pc, #136]	; (800b43c <LSM303AGR_ACC_0_Probe+0x144>)
 800b3b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800b3b6:	4b1d      	ldr	r3, [pc, #116]	; (800b42c <LSM303AGR_ACC_0_Probe+0x134>)
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a1a      	ldr	r2, [pc, #104]	; (800b428 <LSM303AGR_ACC_0_Probe+0x130>)
 800b3be:	6852      	ldr	r2, [r2, #4]
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	4798      	blx	r3
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ca:	f06f 0304 	mvn.w	r3, #4
 800b3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3d0:	e001      	b.n	800b3d6 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d107      	bne.n	800b3ec <LSM303AGR_ACC_0_Probe+0xf4>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3e6:	f06f 0304 	mvn.w	r3, #4
 800b3ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b3ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d107      	bne.n	800b402 <LSM303AGR_ACC_0_Probe+0x10a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3fc:	f06f 0304 	mvn.w	r3, #4
 800b400:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800b402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b404:	4618      	mov	r0, r3
 800b406:	3750      	adds	r7, #80	; 0x50
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	08005ea5 	.word	0x08005ea5
 800b410:	08005f21 	.word	0x08005f21
 800b414:	08005fd5 	.word	0x08005fd5
 800b418:	08005f71 	.word	0x08005f71
 800b41c:	08006039 	.word	0x08006039
 800b420:	200015cc 	.word	0x200015cc
 800b424:	20001588 	.word	0x20001588
 800b428:	2000154c 	.word	0x2000154c
 800b42c:	2000157c 	.word	0x2000157c
 800b430:	200000cc 	.word	0x200000cc
 800b434:	200001a0 	.word	0x200001a0
 800b438:	20001558 	.word	0x20001558
 800b43c:	200000dc 	.word	0x200000dc

0800b440 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b094      	sub	sp, #80	; 0x50
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800b448:	2300      	movs	r3, #0
 800b44a:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800b44c:	2300      	movs	r3, #0
 800b44e:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800b450:	233d      	movs	r3, #61	; 0x3d
 800b452:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b456:	4b3f      	ldr	r3, [pc, #252]	; (800b554 <LSM303AGR_MAG_0_Probe+0x114>)
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b45a:	4b3f      	ldr	r3, [pc, #252]	; (800b558 <LSM303AGR_MAG_0_Probe+0x118>)
 800b45c:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b45e:	4b3f      	ldr	r3, [pc, #252]	; (800b55c <LSM303AGR_MAG_0_Probe+0x11c>)
 800b460:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b462:	4b3f      	ldr	r3, [pc, #252]	; (800b560 <LSM303AGR_MAG_0_Probe+0x120>)
 800b464:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b466:	4b3f      	ldr	r3, [pc, #252]	; (800b564 <LSM303AGR_MAG_0_Probe+0x124>)
 800b468:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800b46a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b46e:	4619      	mov	r1, r3
 800b470:	483d      	ldr	r0, [pc, #244]	; (800b568 <LSM303AGR_MAG_0_Probe+0x128>)
 800b472:	f7fc ff3d 	bl	80082f0 <LSM303AGR_MAG_RegisterBusIO>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b47c:	f06f 0306 	mvn.w	r3, #6
 800b480:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b482:	e062      	b.n	800b54a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800b484:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b488:	4619      	mov	r1, r3
 800b48a:	4837      	ldr	r0, [pc, #220]	; (800b568 <LSM303AGR_MAG_0_Probe+0x128>)
 800b48c:	f7fc ffe7 	bl	800845e <LSM303AGR_MAG_ReadID>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b496:	f06f 0306 	mvn.w	r3, #6
 800b49a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b49c:	e055      	b.n	800b54a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800b49e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b4a2:	2b40      	cmp	r3, #64	; 0x40
 800b4a4:	d003      	beq.n	800b4ae <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b4a6:	f06f 0306 	mvn.w	r3, #6
 800b4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4ac:	e04d      	b.n	800b54a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800b4ae:	f107 030c 	add.w	r3, r7, #12
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	482c      	ldr	r0, [pc, #176]	; (800b568 <LSM303AGR_MAG_0_Probe+0x128>)
 800b4b6:	f7fc ffe9 	bl	800848c <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b4ba:	7b7b      	ldrb	r3, [r7, #13]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	7b3b      	ldrb	r3, [r7, #12]
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
 800b4c6:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	4a28      	ldr	r2, [pc, #160]	; (800b56c <LSM303AGR_MAG_0_Probe+0x12c>)
 800b4cc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800b4ce:	4b28      	ldr	r3, [pc, #160]	; (800b570 <LSM303AGR_MAG_0_Probe+0x130>)
 800b4d0:	4a25      	ldr	r2, [pc, #148]	; (800b568 <LSM303AGR_MAG_0_Probe+0x128>)
 800b4d2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800b4d4:	4b27      	ldr	r3, [pc, #156]	; (800b574 <LSM303AGR_MAG_0_Probe+0x134>)
 800b4d6:	4a28      	ldr	r2, [pc, #160]	; (800b578 <LSM303AGR_MAG_0_Probe+0x138>)
 800b4d8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d11e      	bne.n	800b51e <LSM303AGR_MAG_0_Probe+0xde>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f003 0304 	and.w	r3, r3, #4
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d019      	beq.n	800b51e <LSM303AGR_MAG_0_Probe+0xde>
 800b4ea:	7bbb      	ldrb	r3, [r7, #14]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d116      	bne.n	800b51e <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b4f0:	4b22      	ldr	r3, [pc, #136]	; (800b57c <LSM303AGR_MAG_0_Probe+0x13c>)
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	4a22      	ldr	r2, [pc, #136]	; (800b580 <LSM303AGR_MAG_0_Probe+0x140>)
 800b4f6:	3306      	adds	r3, #6
 800b4f8:	4922      	ldr	r1, [pc, #136]	; (800b584 <LSM303AGR_MAG_0_Probe+0x144>)
 800b4fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800b4fe:	4b1d      	ldr	r3, [pc, #116]	; (800b574 <LSM303AGR_MAG_0_Probe+0x134>)
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a1a      	ldr	r2, [pc, #104]	; (800b570 <LSM303AGR_MAG_0_Probe+0x130>)
 800b506:	6892      	ldr	r2, [r2, #8]
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b512:	f06f 0304 	mvn.w	r3, #4
 800b516:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b518:	e001      	b.n	800b51e <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b51a:	2300      	movs	r3, #0
 800b51c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d107      	bne.n	800b534 <LSM303AGR_MAG_0_Probe+0xf4>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f003 0302 	and.w	r3, r3, #2
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d002      	beq.n	800b534 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b52e:	f06f 0304 	mvn.w	r3, #4
 800b532:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d107      	bne.n	800b54a <LSM303AGR_MAG_0_Probe+0x10a>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b544:	f06f 0304 	mvn.w	r3, #4
 800b548:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800b54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3750      	adds	r7, #80	; 0x50
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	08005ea5 	.word	0x08005ea5
 800b558:	08005f21 	.word	0x08005f21
 800b55c:	08005fd5 	.word	0x08005fd5
 800b560:	08005f71 	.word	0x08005f71
 800b564:	08006039 	.word	0x08006039
 800b568:	20001600 	.word	0x20001600
 800b56c:	20001588 	.word	0x20001588
 800b570:	2000154c 	.word	0x2000154c
 800b574:	2000157c 	.word	0x2000157c
 800b578:	20000100 	.word	0x20000100
 800b57c:	200001a0 	.word	0x200001a0
 800b580:	20001558 	.word	0x20001558
 800b584:	20000110 	.word	0x20000110

0800b588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b58c:	2003      	movs	r0, #3
 800b58e:	f000 f8fa 	bl	800b786 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b592:	200f      	movs	r0, #15
 800b594:	f7fa fbf6 	bl	8005d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b598:	f7fa faf2 	bl	8005b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	bd80      	pop	{r7, pc}
	...

0800b5a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b5a8:	4b06      	ldr	r3, [pc, #24]	; (800b5c4 <HAL_IncTick+0x20>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <HAL_IncTick+0x24>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	4a04      	ldr	r2, [pc, #16]	; (800b5c8 <HAL_IncTick+0x24>)
 800b5b6:	6013      	str	r3, [r2, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	200001b8 	.word	0x200001b8
 800b5c8:	20001634 	.word	0x20001634

0800b5cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
  return uwTick;
 800b5d0:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <HAL_GetTick+0x14>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	20001634 	.word	0x20001634

0800b5e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b5ec:	f7ff ffee 	bl	800b5cc <HAL_GetTick>
 800b5f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fc:	d005      	beq.n	800b60a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b5fe:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <HAL_Delay+0x44>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4413      	add	r3, r2
 800b608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b60a:	bf00      	nop
 800b60c:	f7ff ffde 	bl	800b5cc <HAL_GetTick>
 800b610:	4602      	mov	r2, r0
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d8f7      	bhi.n	800b60c <HAL_Delay+0x28>
  {
  }
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	200001b8 	.word	0x200001b8

0800b62c <__NVIC_SetPriorityGrouping>:
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b63c:	4b0b      	ldr	r3, [pc, #44]	; (800b66c <__NVIC_SetPriorityGrouping+0x40>)
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b648:	4013      	ands	r3, r2
 800b64a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b654:	4b06      	ldr	r3, [pc, #24]	; (800b670 <__NVIC_SetPriorityGrouping+0x44>)
 800b656:	4313      	orrs	r3, r2
 800b658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b65a:	4a04      	ldr	r2, [pc, #16]	; (800b66c <__NVIC_SetPriorityGrouping+0x40>)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	60d3      	str	r3, [r2, #12]
}
 800b660:	bf00      	nop
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	e000ed00 	.word	0xe000ed00
 800b670:	05fa0000 	.word	0x05fa0000

0800b674 <__NVIC_GetPriorityGrouping>:
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b678:	4b04      	ldr	r3, [pc, #16]	; (800b68c <__NVIC_GetPriorityGrouping+0x18>)
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	0a1b      	lsrs	r3, r3, #8
 800b67e:	f003 0307 	and.w	r3, r3, #7
}
 800b682:	4618      	mov	r0, r3
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	e000ed00 	.word	0xe000ed00

0800b690 <__NVIC_EnableIRQ>:
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b69a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db0b      	blt.n	800b6ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b6a2:	79fb      	ldrb	r3, [r7, #7]
 800b6a4:	f003 021f 	and.w	r2, r3, #31
 800b6a8:	4907      	ldr	r1, [pc, #28]	; (800b6c8 <__NVIC_EnableIRQ+0x38>)
 800b6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ae:	095b      	lsrs	r3, r3, #5
 800b6b0:	2001      	movs	r0, #1
 800b6b2:	fa00 f202 	lsl.w	r2, r0, r2
 800b6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b6ba:	bf00      	nop
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	e000e100 	.word	0xe000e100

0800b6cc <__NVIC_SetPriority>:
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	db0a      	blt.n	800b6f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	490c      	ldr	r1, [pc, #48]	; (800b718 <__NVIC_SetPriority+0x4c>)
 800b6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6ea:	0112      	lsls	r2, r2, #4
 800b6ec:	b2d2      	uxtb	r2, r2
 800b6ee:	440b      	add	r3, r1
 800b6f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b6f4:	e00a      	b.n	800b70c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	4908      	ldr	r1, [pc, #32]	; (800b71c <__NVIC_SetPriority+0x50>)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	f003 030f 	and.w	r3, r3, #15
 800b702:	3b04      	subs	r3, #4
 800b704:	0112      	lsls	r2, r2, #4
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	440b      	add	r3, r1
 800b70a:	761a      	strb	r2, [r3, #24]
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	e000e100 	.word	0xe000e100
 800b71c:	e000ed00 	.word	0xe000ed00

0800b720 <NVIC_EncodePriority>:
{
 800b720:	b480      	push	{r7}
 800b722:	b089      	sub	sp, #36	; 0x24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f1c3 0307 	rsb	r3, r3, #7
 800b73a:	2b04      	cmp	r3, #4
 800b73c:	bf28      	it	cs
 800b73e:	2304      	movcs	r3, #4
 800b740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	3304      	adds	r3, #4
 800b746:	2b06      	cmp	r3, #6
 800b748:	d902      	bls.n	800b750 <NVIC_EncodePriority+0x30>
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	3b03      	subs	r3, #3
 800b74e:	e000      	b.n	800b752 <NVIC_EncodePriority+0x32>
 800b750:	2300      	movs	r3, #0
 800b752:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b754:	f04f 32ff 	mov.w	r2, #4294967295
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	fa02 f303 	lsl.w	r3, r2, r3
 800b75e:	43da      	mvns	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	401a      	ands	r2, r3
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b768:	f04f 31ff 	mov.w	r1, #4294967295
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	fa01 f303 	lsl.w	r3, r1, r3
 800b772:	43d9      	mvns	r1, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b778:	4313      	orrs	r3, r2
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3724      	adds	r7, #36	; 0x24
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff ff4c 	bl	800b62c <__NVIC_SetPriorityGrouping>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b7ae:	f7ff ff61 	bl	800b674 <__NVIC_GetPriorityGrouping>
 800b7b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	6978      	ldr	r0, [r7, #20]
 800b7ba:	f7ff ffb1 	bl	800b720 <NVIC_EncodePriority>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff ff80 	bl	800b6cc <__NVIC_SetPriority>
}
 800b7cc:	bf00      	nop
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff ff54 	bl	800b690 <__NVIC_EnableIRQ>
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b089      	sub	sp, #36	; 0x24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b806:	2300      	movs	r3, #0
 800b808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
 800b80e:	e175      	b.n	800bafc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b810:	2201      	movs	r2, #1
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	fa02 f303 	lsl.w	r3, r2, r3
 800b818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	4013      	ands	r3, r2
 800b822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	429a      	cmp	r2, r3
 800b82a:	f040 8164 	bne.w	800baf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f003 0303 	and.w	r3, r3, #3
 800b836:	2b01      	cmp	r3, #1
 800b838:	d005      	beq.n	800b846 <HAL_GPIO_Init+0x56>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	f003 0303 	and.w	r3, r3, #3
 800b842:	2b02      	cmp	r3, #2
 800b844:	d130      	bne.n	800b8a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	2203      	movs	r2, #3
 800b852:	fa02 f303 	lsl.w	r3, r2, r3
 800b856:	43db      	mvns	r3, r3
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	4013      	ands	r3, r2
 800b85c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	fa02 f303 	lsl.w	r3, r2, r3
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b87c:	2201      	movs	r2, #1
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	fa02 f303 	lsl.w	r3, r2, r3
 800b884:	43db      	mvns	r3, r3
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	4013      	ands	r3, r2
 800b88a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	091b      	lsrs	r3, r3, #4
 800b892:	f003 0201 	and.w	r2, r3, #1
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	fa02 f303 	lsl.w	r3, r2, r3
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	69ba      	ldr	r2, [r7, #24]
 800b8a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	f003 0303 	and.w	r3, r3, #3
 800b8b0:	2b03      	cmp	r3, #3
 800b8b2:	d017      	beq.n	800b8e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	2203      	movs	r2, #3
 800b8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c4:	43db      	mvns	r3, r3
 800b8c6:	69ba      	ldr	r2, [r7, #24]
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	69ba      	ldr	r2, [r7, #24]
 800b8e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	f003 0303 	and.w	r3, r3, #3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d123      	bne.n	800b938 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	08da      	lsrs	r2, r3, #3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3208      	adds	r2, #8
 800b8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	f003 0307 	and.w	r3, r3, #7
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	220f      	movs	r2, #15
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	43db      	mvns	r3, r3
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	4013      	ands	r3, r2
 800b912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	691a      	ldr	r2, [r3, #16]
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	fa02 f303 	lsl.w	r3, r2, r3
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	4313      	orrs	r3, r2
 800b928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	08da      	lsrs	r2, r3, #3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	3208      	adds	r2, #8
 800b932:	69b9      	ldr	r1, [r7, #24]
 800b934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	2203      	movs	r2, #3
 800b944:	fa02 f303 	lsl.w	r3, r2, r3
 800b948:	43db      	mvns	r3, r3
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	4013      	ands	r3, r2
 800b94e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	f003 0203 	and.w	r2, r3, #3
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	fa02 f303 	lsl.w	r3, r2, r3
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	4313      	orrs	r3, r2
 800b964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 80be 	beq.w	800baf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b97a:	4b66      	ldr	r3, [pc, #408]	; (800bb14 <HAL_GPIO_Init+0x324>)
 800b97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97e:	4a65      	ldr	r2, [pc, #404]	; (800bb14 <HAL_GPIO_Init+0x324>)
 800b980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b984:	6453      	str	r3, [r2, #68]	; 0x44
 800b986:	4b63      	ldr	r3, [pc, #396]	; (800bb14 <HAL_GPIO_Init+0x324>)
 800b988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b98e:	60fb      	str	r3, [r7, #12]
 800b990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800b992:	4a61      	ldr	r2, [pc, #388]	; (800bb18 <HAL_GPIO_Init+0x328>)
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	089b      	lsrs	r3, r3, #2
 800b998:	3302      	adds	r3, #2
 800b99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b99e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	220f      	movs	r2, #15
 800b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ae:	43db      	mvns	r3, r3
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a58      	ldr	r2, [pc, #352]	; (800bb1c <HAL_GPIO_Init+0x32c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d037      	beq.n	800ba2e <HAL_GPIO_Init+0x23e>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a57      	ldr	r2, [pc, #348]	; (800bb20 <HAL_GPIO_Init+0x330>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d031      	beq.n	800ba2a <HAL_GPIO_Init+0x23a>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a56      	ldr	r2, [pc, #344]	; (800bb24 <HAL_GPIO_Init+0x334>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d02b      	beq.n	800ba26 <HAL_GPIO_Init+0x236>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a55      	ldr	r2, [pc, #340]	; (800bb28 <HAL_GPIO_Init+0x338>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d025      	beq.n	800ba22 <HAL_GPIO_Init+0x232>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a54      	ldr	r2, [pc, #336]	; (800bb2c <HAL_GPIO_Init+0x33c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d01f      	beq.n	800ba1e <HAL_GPIO_Init+0x22e>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a53      	ldr	r2, [pc, #332]	; (800bb30 <HAL_GPIO_Init+0x340>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d019      	beq.n	800ba1a <HAL_GPIO_Init+0x22a>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a52      	ldr	r2, [pc, #328]	; (800bb34 <HAL_GPIO_Init+0x344>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d013      	beq.n	800ba16 <HAL_GPIO_Init+0x226>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a51      	ldr	r2, [pc, #324]	; (800bb38 <HAL_GPIO_Init+0x348>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00d      	beq.n	800ba12 <HAL_GPIO_Init+0x222>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a50      	ldr	r2, [pc, #320]	; (800bb3c <HAL_GPIO_Init+0x34c>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d007      	beq.n	800ba0e <HAL_GPIO_Init+0x21e>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a4f      	ldr	r2, [pc, #316]	; (800bb40 <HAL_GPIO_Init+0x350>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d101      	bne.n	800ba0a <HAL_GPIO_Init+0x21a>
 800ba06:	2309      	movs	r3, #9
 800ba08:	e012      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba0a:	230a      	movs	r3, #10
 800ba0c:	e010      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba0e:	2308      	movs	r3, #8
 800ba10:	e00e      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba12:	2307      	movs	r3, #7
 800ba14:	e00c      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba16:	2306      	movs	r3, #6
 800ba18:	e00a      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba1a:	2305      	movs	r3, #5
 800ba1c:	e008      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba1e:	2304      	movs	r3, #4
 800ba20:	e006      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba22:	2303      	movs	r3, #3
 800ba24:	e004      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba26:	2302      	movs	r3, #2
 800ba28:	e002      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <HAL_GPIO_Init+0x240>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	69fa      	ldr	r2, [r7, #28]
 800ba32:	f002 0203 	and.w	r2, r2, #3
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	4093      	lsls	r3, r2
 800ba3a:	69ba      	ldr	r2, [r7, #24]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800ba40:	4935      	ldr	r1, [pc, #212]	; (800bb18 <HAL_GPIO_Init+0x328>)
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	089b      	lsrs	r3, r3, #2
 800ba46:	3302      	adds	r3, #2
 800ba48:	69ba      	ldr	r2, [r7, #24]
 800ba4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ba4e:	4b3d      	ldr	r3, [pc, #244]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	43db      	mvns	r3, r3
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ba6a:	69ba      	ldr	r2, [r7, #24]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ba72:	4a34      	ldr	r2, [pc, #208]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ba78:	4b32      	ldr	r3, [pc, #200]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	43db      	mvns	r3, r3
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	4013      	ands	r3, r2
 800ba86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d003      	beq.n	800ba9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ba9c:	4a29      	ldr	r2, [pc, #164]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800baa2:	4b28      	ldr	r3, [pc, #160]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	43db      	mvns	r3, r3
 800baac:	69ba      	ldr	r2, [r7, #24]
 800baae:	4013      	ands	r3, r2
 800bab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800babe:	69ba      	ldr	r2, [r7, #24]
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bac6:	4a1f      	ldr	r2, [pc, #124]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800bac8:	69bb      	ldr	r3, [r7, #24]
 800baca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bacc:	4b1d      	ldr	r3, [pc, #116]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	43db      	mvns	r3, r3
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	4013      	ands	r3, r2
 800bada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bae8:	69ba      	ldr	r2, [r7, #24]
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800baf0:	4a14      	ldr	r2, [pc, #80]	; (800bb44 <HAL_GPIO_Init+0x354>)
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	3301      	adds	r3, #1
 800bafa:	61fb      	str	r3, [r7, #28]
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	2b0f      	cmp	r3, #15
 800bb00:	f67f ae86 	bls.w	800b810 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop
 800bb08:	3724      	adds	r7, #36	; 0x24
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	40023800 	.word	0x40023800
 800bb18:	40013800 	.word	0x40013800
 800bb1c:	40020000 	.word	0x40020000
 800bb20:	40020400 	.word	0x40020400
 800bb24:	40020800 	.word	0x40020800
 800bb28:	40020c00 	.word	0x40020c00
 800bb2c:	40021000 	.word	0x40021000
 800bb30:	40021400 	.word	0x40021400
 800bb34:	40021800 	.word	0x40021800
 800bb38:	40021c00 	.word	0x40021c00
 800bb3c:	40022000 	.word	0x40022000
 800bb40:	40022400 	.word	0x40022400
 800bb44:	40013c00 	.word	0x40013c00

0800bb48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800bb52:	2300      	movs	r3, #0
 800bb54:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800bb56:	2300      	movs	r3, #0
 800bb58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]
 800bb62:	e0d9      	b.n	800bd18 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bb64:	2201      	movs	r2, #1
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	fa02 f303 	lsl.w	r3, r2, r3
 800bb6c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4013      	ands	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	f040 80c9 	bne.w	800bd12 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800bb80:	4a6b      	ldr	r2, [pc, #428]	; (800bd30 <HAL_GPIO_DeInit+0x1e8>)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	089b      	lsrs	r3, r3, #2
 800bb86:	3302      	adds	r3, #2
 800bb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb8c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f003 0303 	and.w	r3, r3, #3
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	220f      	movs	r2, #15
 800bb98:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	4013      	ands	r3, r2
 800bba0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a63      	ldr	r2, [pc, #396]	; (800bd34 <HAL_GPIO_DeInit+0x1ec>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d037      	beq.n	800bc1a <HAL_GPIO_DeInit+0xd2>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a62      	ldr	r2, [pc, #392]	; (800bd38 <HAL_GPIO_DeInit+0x1f0>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d031      	beq.n	800bc16 <HAL_GPIO_DeInit+0xce>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a61      	ldr	r2, [pc, #388]	; (800bd3c <HAL_GPIO_DeInit+0x1f4>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d02b      	beq.n	800bc12 <HAL_GPIO_DeInit+0xca>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a60      	ldr	r2, [pc, #384]	; (800bd40 <HAL_GPIO_DeInit+0x1f8>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d025      	beq.n	800bc0e <HAL_GPIO_DeInit+0xc6>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a5f      	ldr	r2, [pc, #380]	; (800bd44 <HAL_GPIO_DeInit+0x1fc>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d01f      	beq.n	800bc0a <HAL_GPIO_DeInit+0xc2>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a5e      	ldr	r2, [pc, #376]	; (800bd48 <HAL_GPIO_DeInit+0x200>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d019      	beq.n	800bc06 <HAL_GPIO_DeInit+0xbe>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a5d      	ldr	r2, [pc, #372]	; (800bd4c <HAL_GPIO_DeInit+0x204>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d013      	beq.n	800bc02 <HAL_GPIO_DeInit+0xba>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a5c      	ldr	r2, [pc, #368]	; (800bd50 <HAL_GPIO_DeInit+0x208>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d00d      	beq.n	800bbfe <HAL_GPIO_DeInit+0xb6>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a5b      	ldr	r2, [pc, #364]	; (800bd54 <HAL_GPIO_DeInit+0x20c>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d007      	beq.n	800bbfa <HAL_GPIO_DeInit+0xb2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a5a      	ldr	r2, [pc, #360]	; (800bd58 <HAL_GPIO_DeInit+0x210>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d101      	bne.n	800bbf6 <HAL_GPIO_DeInit+0xae>
 800bbf2:	2309      	movs	r3, #9
 800bbf4:	e012      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bbf6:	230a      	movs	r3, #10
 800bbf8:	e010      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bbfa:	2308      	movs	r3, #8
 800bbfc:	e00e      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bbfe:	2307      	movs	r3, #7
 800bc00:	e00c      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc02:	2306      	movs	r3, #6
 800bc04:	e00a      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc06:	2305      	movs	r3, #5
 800bc08:	e008      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc0a:	2304      	movs	r3, #4
 800bc0c:	e006      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e004      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc12:	2302      	movs	r3, #2
 800bc14:	e002      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e000      	b.n	800bc1c <HAL_GPIO_DeInit+0xd4>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	f002 0203 	and.w	r2, r2, #3
 800bc22:	0092      	lsls	r2, r2, #2
 800bc24:	4093      	lsls	r3, r2
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d132      	bne.n	800bc92 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bc2c:	4b4b      	ldr	r3, [pc, #300]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	43db      	mvns	r3, r3
 800bc34:	4949      	ldr	r1, [pc, #292]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc36:	4013      	ands	r3, r2
 800bc38:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bc3a:	4b48      	ldr	r3, [pc, #288]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	43db      	mvns	r3, r3
 800bc42:	4946      	ldr	r1, [pc, #280]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bc48:	4b44      	ldr	r3, [pc, #272]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	43db      	mvns	r3, r3
 800bc50:	4942      	ldr	r1, [pc, #264]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc52:	4013      	ands	r3, r2
 800bc54:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bc56:	4b41      	ldr	r3, [pc, #260]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc58:	689a      	ldr	r2, [r3, #8]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	43db      	mvns	r3, r3
 800bc5e:	493f      	ldr	r1, [pc, #252]	; (800bd5c <HAL_GPIO_DeInit+0x214>)
 800bc60:	4013      	ands	r3, r2
 800bc62:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	f003 0303 	and.w	r3, r3, #3
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	220f      	movs	r2, #15
 800bc6e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc72:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800bc74:	4a2e      	ldr	r2, [pc, #184]	; (800bd30 <HAL_GPIO_DeInit+0x1e8>)
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	089b      	lsrs	r3, r3, #2
 800bc7a:	3302      	adds	r3, #2
 800bc7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	43da      	mvns	r2, r3
 800bc84:	482a      	ldr	r0, [pc, #168]	; (800bd30 <HAL_GPIO_DeInit+0x1e8>)
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	089b      	lsrs	r3, r3, #2
 800bc8a:	400a      	ands	r2, r1
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	2103      	movs	r1, #3
 800bc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800bca0:	43db      	mvns	r3, r3
 800bca2:	401a      	ands	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	08da      	lsrs	r2, r3, #3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3208      	adds	r2, #8
 800bcb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	220f      	movs	r2, #15
 800bcbe:	fa02 f303 	lsl.w	r3, r2, r3
 800bcc2:	43db      	mvns	r3, r3
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	08d2      	lsrs	r2, r2, #3
 800bcc8:	4019      	ands	r1, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3208      	adds	r2, #8
 800bcce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68da      	ldr	r2, [r3, #12]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	2103      	movs	r1, #3
 800bcdc:	fa01 f303 	lsl.w	r3, r1, r3
 800bce0:	43db      	mvns	r3, r3
 800bce2:	401a      	ands	r2, r3
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	2101      	movs	r1, #1
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	43db      	mvns	r3, r3
 800bcf6:	401a      	ands	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689a      	ldr	r2, [r3, #8]
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	2103      	movs	r1, #3
 800bd06:	fa01 f303 	lsl.w	r3, r1, r3
 800bd0a:	43db      	mvns	r3, r3
 800bd0c:	401a      	ands	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	3301      	adds	r3, #1
 800bd16:	617b      	str	r3, [r7, #20]
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	f67f af22 	bls.w	800bb64 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800bd20:	bf00      	nop
 800bd22:	bf00      	nop
 800bd24:	371c      	adds	r7, #28
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	40013800 	.word	0x40013800
 800bd34:	40020000 	.word	0x40020000
 800bd38:	40020400 	.word	0x40020400
 800bd3c:	40020800 	.word	0x40020800
 800bd40:	40020c00 	.word	0x40020c00
 800bd44:	40021000 	.word	0x40021000
 800bd48:	40021400 	.word	0x40021400
 800bd4c:	40021800 	.word	0x40021800
 800bd50:	40021c00 	.word	0x40021c00
 800bd54:	40022000 	.word	0x40022000
 800bd58:	40022400 	.word	0x40022400
 800bd5c:	40013c00 	.word	0x40013c00

0800bd60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	460b      	mov	r3, r1
 800bd6a:	807b      	strh	r3, [r7, #2]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bd70:	787b      	ldrb	r3, [r7, #1]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd76:	887a      	ldrh	r2, [r7, #2]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800bd7c:	e003      	b.n	800bd86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bd7e:	887b      	ldrh	r3, [r7, #2]
 800bd80:	041a      	lsls	r2, r3, #16
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	619a      	str	r2, [r3, #24]
}
 800bd86:	bf00      	nop
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
	...

0800bd94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e07f      	b.n	800bea6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d106      	bne.n	800bdc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f8a9 	bl	800bf12 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2224      	movs	r2, #36	; 0x24
 800bdc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f022 0201 	bic.w	r2, r2, #1
 800bdd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bde4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bdf4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d107      	bne.n	800be0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	689a      	ldr	r2, [r3, #8]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be0a:	609a      	str	r2, [r3, #8]
 800be0c:	e006      	b.n	800be1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689a      	ldr	r2, [r3, #8]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800be1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	2b02      	cmp	r3, #2
 800be22:	d104      	bne.n	800be2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	6859      	ldr	r1, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	4b1d      	ldr	r3, [pc, #116]	; (800beb0 <HAL_I2C_Init+0x11c>)
 800be3a:	430b      	orrs	r3, r1
 800be3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68da      	ldr	r2, [r3, #12]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	691a      	ldr	r2, [r3, #16]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	69d9      	ldr	r1, [r3, #28]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a1a      	ldr	r2, [r3, #32]
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0201 	orr.w	r2, r2, #1
 800be86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2220      	movs	r2, #32
 800be92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	02008000 	.word	0x02008000

0800beb4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	e021      	b.n	800bf0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2224      	movs	r2, #36	; 0x24
 800beca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f022 0201 	bic.w	r2, r2, #1
 800bedc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f821 	bl	800bf26 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bf1a:	bf00      	nop
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
	...

0800bf3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	4608      	mov	r0, r1
 800bf46:	4611      	mov	r1, r2
 800bf48:	461a      	mov	r2, r3
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	817b      	strh	r3, [r7, #10]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	813b      	strh	r3, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b20      	cmp	r3, #32
 800bf60:	f040 80f9 	bne.w	800c156 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <HAL_I2C_Mem_Write+0x34>
 800bf6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d105      	bne.n	800bf7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e0ed      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <HAL_I2C_Mem_Write+0x4e>
 800bf86:	2302      	movs	r3, #2
 800bf88:	e0e6      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf92:	f7ff fb1b 	bl	800b5cc <HAL_GetTick>
 800bf96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	9300      	str	r3, [sp, #0]
 800bf9c:	2319      	movs	r3, #25
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 fadd 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e0d1      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2221      	movs	r2, #33	; 0x21
 800bfb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2240      	movs	r2, #64	; 0x40
 800bfc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6a3a      	ldr	r2, [r7, #32]
 800bfce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bfd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bfdc:	88f8      	ldrh	r0, [r7, #6]
 800bfde:	893a      	ldrh	r2, [r7, #8]
 800bfe0:	8979      	ldrh	r1, [r7, #10]
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	4603      	mov	r3, r0
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f000 f9ed 	bl	800c3cc <I2C_RequestMemoryWrite>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d005      	beq.n	800c004 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e0a9      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c008:	b29b      	uxth	r3, r3
 800c00a:	2bff      	cmp	r3, #255	; 0xff
 800c00c:	d90e      	bls.n	800c02c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	22ff      	movs	r2, #255	; 0xff
 800c012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	8979      	ldrh	r1, [r7, #10]
 800c01c:	2300      	movs	r3, #0
 800c01e:	9300      	str	r3, [sp, #0]
 800c020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 fc39 	bl	800c89c <I2C_TransferConfig>
 800c02a:	e00f      	b.n	800c04c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c030:	b29a      	uxth	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	8979      	ldrh	r1, [r7, #10]
 800c03e:	2300      	movs	r3, #0
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f000 fc28 	bl	800c89c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f000 fac7 	bl	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e07b      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c088:	3b01      	subs	r3, #1
 800c08a:	b29a      	uxth	r2, r3
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c094:	b29b      	uxth	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d034      	beq.n	800c104 <HAL_I2C_Mem_Write+0x1c8>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d130      	bne.n	800c104 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2180      	movs	r1, #128	; 0x80
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	f000 fa59 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e04d      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	2bff      	cmp	r3, #255	; 0xff
 800c0c4:	d90e      	bls.n	800c0e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	22ff      	movs	r2, #255	; 0xff
 800c0ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d0:	b2da      	uxtb	r2, r3
 800c0d2:	8979      	ldrh	r1, [r7, #10]
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 fbdd 	bl	800c89c <I2C_TransferConfig>
 800c0e2:	e00f      	b.n	800c104 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	8979      	ldrh	r1, [r7, #10]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f000 fbcc 	bl	800c89c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c108:	b29b      	uxth	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d19e      	bne.n	800c04c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c112:	68f8      	ldr	r0, [r7, #12]
 800c114:	f000 faa6 	bl	800c664 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c11e:	2301      	movs	r3, #1
 800c120:	e01a      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2220      	movs	r2, #32
 800c128:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6859      	ldr	r1, [r3, #4]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <HAL_I2C_Mem_Write+0x224>)
 800c136:	400b      	ands	r3, r1
 800c138:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	e000      	b.n	800c158 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c156:	2302      	movs	r3, #2
  }
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3718      	adds	r7, #24
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	fe00e800 	.word	0xfe00e800

0800c164 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b088      	sub	sp, #32
 800c168:	af02      	add	r7, sp, #8
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	4608      	mov	r0, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	461a      	mov	r2, r3
 800c172:	4603      	mov	r3, r0
 800c174:	817b      	strh	r3, [r7, #10]
 800c176:	460b      	mov	r3, r1
 800c178:	813b      	strh	r3, [r7, #8]
 800c17a:	4613      	mov	r3, r2
 800c17c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b20      	cmp	r3, #32
 800c188:	f040 80fd 	bne.w	800c386 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <HAL_I2C_Mem_Read+0x34>
 800c192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c194:	2b00      	cmp	r3, #0
 800c196:	d105      	bne.n	800c1a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c19e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e0f1      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d101      	bne.n	800c1b2 <HAL_I2C_Mem_Read+0x4e>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e0ea      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c1ba:	f7ff fa07 	bl	800b5cc <HAL_GetTick>
 800c1be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	2319      	movs	r3, #25
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 f9c9 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e0d5      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2222      	movs	r2, #34	; 0x22
 800c1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2240      	movs	r2, #64	; 0x40
 800c1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6a3a      	ldr	r2, [r7, #32]
 800c1f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c1fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c204:	88f8      	ldrh	r0, [r7, #6]
 800c206:	893a      	ldrh	r2, [r7, #8]
 800c208:	8979      	ldrh	r1, [r7, #10]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	4603      	mov	r3, r0
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 f92d 	bl	800c474 <I2C_RequestMemoryRead>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e0ad      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c230:	b29b      	uxth	r3, r3
 800c232:	2bff      	cmp	r3, #255	; 0xff
 800c234:	d90e      	bls.n	800c254 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	22ff      	movs	r2, #255	; 0xff
 800c23a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c240:	b2da      	uxtb	r2, r3
 800c242:	8979      	ldrh	r1, [r7, #10]
 800c244:	4b52      	ldr	r3, [pc, #328]	; (800c390 <HAL_I2C_Mem_Read+0x22c>)
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 fb25 	bl	800c89c <I2C_TransferConfig>
 800c252:	e00f      	b.n	800c274 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c258:	b29a      	uxth	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c262:	b2da      	uxtb	r2, r3
 800c264:	8979      	ldrh	r1, [r7, #10]
 800c266:	4b4a      	ldr	r3, [pc, #296]	; (800c390 <HAL_I2C_Mem_Read+0x22c>)
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 fb14 	bl	800c89c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	2200      	movs	r2, #0
 800c27c:	2104      	movs	r1, #4
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f000 f970 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e07c      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	3b01      	subs	r3, #1
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d034      	beq.n	800c334 <HAL_I2C_Mem_Read+0x1d0>
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d130      	bne.n	800c334 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2180      	movs	r1, #128	; 0x80
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 f941 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e04d      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	2bff      	cmp	r3, #255	; 0xff
 800c2f4:	d90e      	bls.n	800c314 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	22ff      	movs	r2, #255	; 0xff
 800c2fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c300:	b2da      	uxtb	r2, r3
 800c302:	8979      	ldrh	r1, [r7, #10]
 800c304:	2300      	movs	r3, #0
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 fac5 	bl	800c89c <I2C_TransferConfig>
 800c312:	e00f      	b.n	800c334 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c318:	b29a      	uxth	r2, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c322:	b2da      	uxtb	r2, r3
 800c324:	8979      	ldrh	r1, [r7, #10]
 800c326:	2300      	movs	r3, #0
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f000 fab4 	bl	800c89c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c338:	b29b      	uxth	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d19a      	bne.n	800c274 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c33e:	697a      	ldr	r2, [r7, #20]
 800c340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 f98e 	bl	800c664 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e01a      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2220      	movs	r2, #32
 800c358:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6859      	ldr	r1, [r3, #4]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <HAL_I2C_Mem_Read+0x230>)
 800c366:	400b      	ands	r3, r1
 800c368:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2220      	movs	r2, #32
 800c36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c386:	2302      	movs	r3, #2
  }
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	80002400 	.word	0x80002400
 800c394:	fe00e800 	.word	0xfe00e800

0800c398 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3a6:	b2db      	uxtb	r3, r3
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4603      	mov	r3, r0
 800c3dc:	817b      	strh	r3, [r7, #10]
 800c3de:	460b      	mov	r3, r1
 800c3e0:	813b      	strh	r3, [r7, #8]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c3e6:	88fb      	ldrh	r3, [r7, #6]
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	8979      	ldrh	r1, [r7, #10]
 800c3ec:	4b20      	ldr	r3, [pc, #128]	; (800c470 <I2C_RequestMemoryWrite+0xa4>)
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 fa51 	bl	800c89c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	69b9      	ldr	r1, [r7, #24]
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 f8f0 	bl	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e02c      	b.n	800c468 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c40e:	88fb      	ldrh	r3, [r7, #6]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d105      	bne.n	800c420 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c414:	893b      	ldrh	r3, [r7, #8]
 800c416:	b2da      	uxtb	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	629a      	str	r2, [r3, #40]	; 0x28
 800c41e:	e015      	b.n	800c44c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c420:	893b      	ldrh	r3, [r7, #8]
 800c422:	0a1b      	lsrs	r3, r3, #8
 800c424:	b29b      	uxth	r3, r3
 800c426:	b2da      	uxtb	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c42e:	69fa      	ldr	r2, [r7, #28]
 800c430:	69b9      	ldr	r1, [r7, #24]
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f000 f8d6 	bl	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e012      	b.n	800c468 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c442:	893b      	ldrh	r3, [r7, #8]
 800c444:	b2da      	uxtb	r2, r3
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2200      	movs	r2, #0
 800c454:	2180      	movs	r1, #128	; 0x80
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f000 f884 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	80002000 	.word	0x80002000

0800c474 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af02      	add	r7, sp, #8
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	4608      	mov	r0, r1
 800c47e:	4611      	mov	r1, r2
 800c480:	461a      	mov	r2, r3
 800c482:	4603      	mov	r3, r0
 800c484:	817b      	strh	r3, [r7, #10]
 800c486:	460b      	mov	r3, r1
 800c488:	813b      	strh	r3, [r7, #8]
 800c48a:	4613      	mov	r3, r2
 800c48c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	b2da      	uxtb	r2, r3
 800c492:	8979      	ldrh	r1, [r7, #10]
 800c494:	4b20      	ldr	r3, [pc, #128]	; (800c518 <I2C_RequestMemoryRead+0xa4>)
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	2300      	movs	r3, #0
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f9fe 	bl	800c89c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4a0:	69fa      	ldr	r2, [r7, #28]
 800c4a2:	69b9      	ldr	r1, [r7, #24]
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 f89d 	bl	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e02c      	b.n	800c50e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c4b4:	88fb      	ldrh	r3, [r7, #6]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d105      	bne.n	800c4c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c4ba:	893b      	ldrh	r3, [r7, #8]
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	629a      	str	r2, [r3, #40]	; 0x28
 800c4c4:	e015      	b.n	800c4f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c4c6:	893b      	ldrh	r3, [r7, #8]
 800c4c8:	0a1b      	lsrs	r3, r3, #8
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4d4:	69fa      	ldr	r2, [r7, #28]
 800c4d6:	69b9      	ldr	r1, [r7, #24]
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 f883 	bl	800c5e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e012      	b.n	800c50e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c4e8:	893b      	ldrh	r3, [r7, #8]
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2140      	movs	r1, #64	; 0x40
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f000 f831 	bl	800c564 <I2C_WaitOnFlagUntilTimeout>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d001      	beq.n	800c50c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e000      	b.n	800c50e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3710      	adds	r7, #16
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	80002000 	.word	0x80002000

0800c51c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	f003 0302 	and.w	r3, r3, #2
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d103      	bne.n	800c53a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2200      	movs	r2, #0
 800c538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	f003 0301 	and.w	r3, r3, #1
 800c544:	2b01      	cmp	r3, #1
 800c546:	d007      	beq.n	800c558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	699a      	ldr	r2, [r3, #24]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f042 0201 	orr.w	r2, r2, #1
 800c556:	619a      	str	r2, [r3, #24]
  }
}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	603b      	str	r3, [r7, #0]
 800c570:	4613      	mov	r3, r2
 800c572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c574:	e022      	b.n	800c5bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d01e      	beq.n	800c5bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c57e:	f7ff f825 	bl	800b5cc <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d302      	bcc.n	800c594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d113      	bne.n	800c5bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c598:	f043 0220 	orr.w	r2, r3, #32
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e00f      	b.n	800c5dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	699a      	ldr	r2, [r3, #24]
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	bf0c      	ite	eq
 800c5cc:	2301      	moveq	r3, #1
 800c5ce:	2300      	movne	r3, #0
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d0cd      	beq.n	800c576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c5f0:	e02c      	b.n	800c64c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	68b9      	ldr	r1, [r7, #8]
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f000 f870 	bl	800c6dc <I2C_IsErrorOccurred>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	e02a      	b.n	800c65c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60c:	d01e      	beq.n	800c64c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c60e:	f7fe ffdd 	bl	800b5cc <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d302      	bcc.n	800c624 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d113      	bne.n	800c64c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c628:	f043 0220 	orr.w	r2, r3, #32
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2220      	movs	r2, #32
 800c634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e007      	b.n	800c65c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	f003 0302 	and.w	r3, r3, #2
 800c656:	2b02      	cmp	r3, #2
 800c658:	d1cb      	bne.n	800c5f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c670:	e028      	b.n	800c6c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	68b9      	ldr	r1, [r7, #8]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f000 f830 	bl	800c6dc <I2C_IsErrorOccurred>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e026      	b.n	800c6d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c686:	f7fe ffa1 	bl	800b5cc <HAL_GetTick>
 800c68a:	4602      	mov	r2, r0
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	429a      	cmp	r2, r3
 800c694:	d302      	bcc.n	800c69c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d113      	bne.n	800c6c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a0:	f043 0220 	orr.w	r2, r3, #32
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e007      	b.n	800c6d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	699b      	ldr	r3, [r3, #24]
 800c6ca:	f003 0320 	and.w	r3, r3, #32
 800c6ce:	2b20      	cmp	r3, #32
 800c6d0:	d1cf      	bne.n	800c672 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08a      	sub	sp, #40	; 0x28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	f003 0310 	and.w	r3, r3, #16
 800c704:	2b00      	cmp	r3, #0
 800c706:	d068      	beq.n	800c7da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2210      	movs	r2, #16
 800c70e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c710:	e049      	b.n	800c7a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c718:	d045      	beq.n	800c7a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c71a:	f7fe ff57 	bl	800b5cc <HAL_GetTick>
 800c71e:	4602      	mov	r2, r0
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	1ad3      	subs	r3, r2, r3
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	429a      	cmp	r2, r3
 800c728:	d302      	bcc.n	800c730 <I2C_IsErrorOccurred+0x54>
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d13a      	bne.n	800c7a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c73a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c742:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c752:	d121      	bne.n	800c798 <I2C_IsErrorOccurred+0xbc>
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c75a:	d01d      	beq.n	800c798 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c75c:	7cfb      	ldrb	r3, [r7, #19]
 800c75e:	2b20      	cmp	r3, #32
 800c760:	d01a      	beq.n	800c798 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c770:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c772:	f7fe ff2b 	bl	800b5cc <HAL_GetTick>
 800c776:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c778:	e00e      	b.n	800c798 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c77a:	f7fe ff27 	bl	800b5cc <HAL_GetTick>
 800c77e:	4602      	mov	r2, r0
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	2b19      	cmp	r3, #25
 800c786:	d907      	bls.n	800c798 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	f043 0320 	orr.w	r3, r3, #32
 800c78e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c796:	e006      	b.n	800c7a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b20      	cmp	r3, #32
 800c7a4:	d1e9      	bne.n	800c77a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	699b      	ldr	r3, [r3, #24]
 800c7ac:	f003 0320 	and.w	r3, r3, #32
 800c7b0:	2b20      	cmp	r3, #32
 800c7b2:	d003      	beq.n	800c7bc <I2C_IsErrorOccurred+0xe0>
 800c7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0aa      	beq.n	800c712 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d103      	bne.n	800c7cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c7cc:	6a3b      	ldr	r3, [r7, #32]
 800c7ce:	f043 0304 	orr.w	r3, r3, #4
 800c7d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00b      	beq.n	800c804 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	f043 0301 	orr.w	r3, r3, #1
 800c7f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c7fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00b      	beq.n	800c826 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	f043 0308 	orr.w	r3, r3, #8
 800c814:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c81e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00b      	beq.n	800c848 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c830:	6a3b      	ldr	r3, [r7, #32]
 800c832:	f043 0302 	orr.w	r3, r3, #2
 800c836:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01c      	beq.n	800c88a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7ff fe63 	bl	800c51c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6859      	ldr	r1, [r3, #4]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	4b0d      	ldr	r3, [pc, #52]	; (800c898 <I2C_IsErrorOccurred+0x1bc>)
 800c862:	400b      	ands	r3, r1
 800c864:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	431a      	orrs	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2220      	movs	r2, #32
 800c876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c88a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3728      	adds	r7, #40	; 0x28
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	fe00e800 	.word	0xfe00e800

0800c89c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b087      	sub	sp, #28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	817b      	strh	r3, [r7, #10]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c8ae:	897b      	ldrh	r3, [r7, #10]
 800c8b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c8b4:	7a7b      	ldrb	r3, [r7, #9]
 800c8b6:	041b      	lsls	r3, r3, #16
 800c8b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c8bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685a      	ldr	r2, [r3, #4]
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	0d5b      	lsrs	r3, r3, #21
 800c8d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c8da:	4b08      	ldr	r3, [pc, #32]	; (800c8fc <I2C_TransferConfig+0x60>)
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	43db      	mvns	r3, r3
 800c8e0:	ea02 0103 	and.w	r1, r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	697a      	ldr	r2, [r7, #20]
 800c8ea:	430a      	orrs	r2, r1
 800c8ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c8ee:	bf00      	nop
 800c8f0:	371c      	adds	r7, #28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	03ff63ff 	.word	0x03ff63ff

0800c900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c910:	b2db      	uxtb	r3, r3
 800c912:	2b20      	cmp	r3, #32
 800c914:	d138      	bne.n	800c988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d101      	bne.n	800c924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c920:	2302      	movs	r3, #2
 800c922:	e032      	b.n	800c98a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2224      	movs	r2, #36	; 0x24
 800c930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f022 0201 	bic.w	r2, r2, #1
 800c942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6819      	ldr	r1, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	430a      	orrs	r2, r1
 800c962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f042 0201 	orr.w	r2, r2, #1
 800c972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2220      	movs	r2, #32
 800c978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	e000      	b.n	800c98a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c988:	2302      	movs	r3, #2
  }
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c996:	b480      	push	{r7}
 800c998:	b085      	sub	sp, #20
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b20      	cmp	r3, #32
 800c9aa:	d139      	bne.n	800ca20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d101      	bne.n	800c9ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c9b6:	2302      	movs	r3, #2
 800c9b8:	e033      	b.n	800ca22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2224      	movs	r2, #36	; 0x24
 800c9c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f022 0201 	bic.w	r2, r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c9e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	021b      	lsls	r3, r3, #8
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f042 0201 	orr.w	r2, r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2220      	movs	r2, #32
 800ca10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	e000      	b.n	800ca22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ca20:	2302      	movs	r3, #2
  }
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ca2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca30:	b08f      	sub	sp, #60	; 0x3c
 800ca32:	af0a      	add	r7, sp, #40	; 0x28
 800ca34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e116      	b.n	800cc6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d106      	bne.n	800ca60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f9 f918 	bl	8005c90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2203      	movs	r2, #3
 800ca64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d102      	bne.n	800ca7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f002 fa4c 	bl	800ef1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	603b      	str	r3, [r7, #0]
 800ca8a:	687e      	ldr	r6, [r7, #4]
 800ca8c:	466d      	mov	r5, sp
 800ca8e:	f106 0410 	add.w	r4, r6, #16
 800ca92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ca9e:	e885 0003 	stmia.w	r5, {r0, r1}
 800caa2:	1d33      	adds	r3, r6, #4
 800caa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800caa6:	6838      	ldr	r0, [r7, #0]
 800caa8:	f002 f9e0 	bl	800ee6c <USB_CoreInit>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d005      	beq.n	800cabe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2202      	movs	r2, #2
 800cab6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800caba:	2301      	movs	r3, #1
 800cabc:	e0d7      	b.n	800cc6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2100      	movs	r1, #0
 800cac4:	4618      	mov	r0, r3
 800cac6:	f002 fa3a 	bl	800ef3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800caca:	2300      	movs	r3, #0
 800cacc:	73fb      	strb	r3, [r7, #15]
 800cace:	e04a      	b.n	800cb66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cad0:	7bfa      	ldrb	r2, [r7, #15]
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	4613      	mov	r3, r2
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	4413      	add	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	440b      	add	r3, r1
 800cade:	333d      	adds	r3, #61	; 0x3d
 800cae0:	2201      	movs	r2, #1
 800cae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cae4:	7bfa      	ldrb	r2, [r7, #15]
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	333c      	adds	r3, #60	; 0x3c
 800caf4:	7bfa      	ldrb	r2, [r7, #15]
 800caf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800caf8:	7bfa      	ldrb	r2, [r7, #15]
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
 800cafc:	b298      	uxth	r0, r3
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	4613      	mov	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	440b      	add	r3, r1
 800cb0a:	3344      	adds	r3, #68	; 0x44
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cb10:	7bfa      	ldrb	r2, [r7, #15]
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	4613      	mov	r3, r2
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	4413      	add	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	440b      	add	r3, r1
 800cb1e:	3340      	adds	r3, #64	; 0x40
 800cb20:	2200      	movs	r2, #0
 800cb22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cb24:	7bfa      	ldrb	r2, [r7, #15]
 800cb26:	6879      	ldr	r1, [r7, #4]
 800cb28:	4613      	mov	r3, r2
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	440b      	add	r3, r1
 800cb32:	3348      	adds	r3, #72	; 0x48
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cb38:	7bfa      	ldrb	r2, [r7, #15]
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	4413      	add	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	440b      	add	r3, r1
 800cb46:	334c      	adds	r3, #76	; 0x4c
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cb4c:	7bfa      	ldrb	r2, [r7, #15]
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	4613      	mov	r3, r2
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	3354      	adds	r3, #84	; 0x54
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	3301      	adds	r3, #1
 800cb64:	73fb      	strb	r3, [r7, #15]
 800cb66:	7bfa      	ldrb	r2, [r7, #15]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d3af      	bcc.n	800cad0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
 800cb74:	e044      	b.n	800cc00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cb76:	7bfa      	ldrb	r2, [r7, #15]
 800cb78:	6879      	ldr	r1, [r7, #4]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	4413      	add	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800cb88:	2200      	movs	r2, #0
 800cb8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cb8c:	7bfa      	ldrb	r2, [r7, #15]
 800cb8e:	6879      	ldr	r1, [r7, #4]
 800cb90:	4613      	mov	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	4413      	add	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	440b      	add	r3, r1
 800cb9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800cb9e:	7bfa      	ldrb	r2, [r7, #15]
 800cba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cba2:	7bfa      	ldrb	r2, [r7, #15]
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	4613      	mov	r3, r2
 800cba8:	00db      	lsls	r3, r3, #3
 800cbaa:	4413      	add	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	440b      	add	r3, r1
 800cbb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cbb8:	7bfa      	ldrb	r2, [r7, #15]
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	440b      	add	r3, r1
 800cbc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cbce:	7bfa      	ldrb	r2, [r7, #15]
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	4613      	mov	r3, r2
 800cbd4:	00db      	lsls	r3, r3, #3
 800cbd6:	4413      	add	r3, r2
 800cbd8:	009b      	lsls	r3, r3, #2
 800cbda:	440b      	add	r3, r1
 800cbdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cbe4:	7bfa      	ldrb	r2, [r7, #15]
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	4413      	add	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	440b      	add	r3, r1
 800cbf2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	73fb      	strb	r3, [r7, #15]
 800cc00:	7bfa      	ldrb	r2, [r7, #15]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d3b5      	bcc.n	800cb76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	603b      	str	r3, [r7, #0]
 800cc10:	687e      	ldr	r6, [r7, #4]
 800cc12:	466d      	mov	r5, sp
 800cc14:	f106 0410 	add.w	r4, r6, #16
 800cc18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cc20:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cc24:	e885 0003 	stmia.w	r5, {r0, r1}
 800cc28:	1d33      	adds	r3, r6, #4
 800cc2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc2c:	6838      	ldr	r0, [r7, #0]
 800cc2e:	f002 f9d3 	bl	800efd8 <USB_DevInit>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e014      	b.n	800cc6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d102      	bne.n	800cc62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f80b 	bl	800cc78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f002 fb91 	bl	800f38e <USB_DevDisconnect>

  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cc78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	699b      	ldr	r3, [r3, #24]
 800cc9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cca6:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <HAL_PCDEx_ActivateLPM+0x44>)
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	10000003 	.word	0x10000003

0800ccc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ccc4:	4b05      	ldr	r3, [pc, #20]	; (800ccdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a04      	ldr	r2, [pc, #16]	; (800ccdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ccca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccce:	6013      	str	r3, [r2, #0]
}
 800ccd0:	bf00      	nop
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop
 800ccdc:	40007000 	.word	0x40007000

0800cce0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ccea:	4b23      	ldr	r3, [pc, #140]	; (800cd78 <HAL_PWREx_EnableOverDrive+0x98>)
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	4a22      	ldr	r2, [pc, #136]	; (800cd78 <HAL_PWREx_EnableOverDrive+0x98>)
 800ccf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccf4:	6413      	str	r3, [r2, #64]	; 0x40
 800ccf6:	4b20      	ldr	r3, [pc, #128]	; (800cd78 <HAL_PWREx_EnableOverDrive+0x98>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccfe:	603b      	str	r3, [r7, #0]
 800cd00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cd02:	4b1e      	ldr	r3, [pc, #120]	; (800cd7c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a1d      	ldr	r2, [pc, #116]	; (800cd7c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cd08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd0c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd0e:	f7fe fc5d 	bl	800b5cc <HAL_GetTick>
 800cd12:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cd14:	e009      	b.n	800cd2a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cd16:	f7fe fc59 	bl	800b5cc <HAL_GetTick>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd24:	d901      	bls.n	800cd2a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e022      	b.n	800cd70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cd2a:	4b14      	ldr	r3, [pc, #80]	; (800cd7c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd36:	d1ee      	bne.n	800cd16 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cd38:	4b10      	ldr	r3, [pc, #64]	; (800cd7c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a0f      	ldr	r2, [pc, #60]	; (800cd7c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cd3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd42:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd44:	f7fe fc42 	bl	800b5cc <HAL_GetTick>
 800cd48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cd4a:	e009      	b.n	800cd60 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cd4c:	f7fe fc3e 	bl	800b5cc <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd5a:	d901      	bls.n	800cd60 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	e007      	b.n	800cd70 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cd60:	4b06      	ldr	r3, [pc, #24]	; (800cd7c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd6c:	d1ee      	bne.n	800cd4c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	40023800 	.word	0x40023800
 800cd7c:	40007000 	.word	0x40007000

0800cd80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e29b      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 8087 	beq.w	800ceb2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cda4:	4b96      	ldr	r3, [pc, #600]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f003 030c 	and.w	r3, r3, #12
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d00c      	beq.n	800cdca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cdb0:	4b93      	ldr	r3, [pc, #588]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	f003 030c 	and.w	r3, r3, #12
 800cdb8:	2b08      	cmp	r3, #8
 800cdba:	d112      	bne.n	800cde2 <HAL_RCC_OscConfig+0x62>
 800cdbc:	4b90      	ldr	r3, [pc, #576]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cdc8:	d10b      	bne.n	800cde2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cdca:	4b8d      	ldr	r3, [pc, #564]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d06c      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x130>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d168      	bne.n	800ceb0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e275      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdea:	d106      	bne.n	800cdfa <HAL_RCC_OscConfig+0x7a>
 800cdec:	4b84      	ldr	r3, [pc, #528]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a83      	ldr	r2, [pc, #524]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cdf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	e02e      	b.n	800ce58 <HAL_RCC_OscConfig+0xd8>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10c      	bne.n	800ce1c <HAL_RCC_OscConfig+0x9c>
 800ce02:	4b7f      	ldr	r3, [pc, #508]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a7e      	ldr	r2, [pc, #504]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce0c:	6013      	str	r3, [r2, #0]
 800ce0e:	4b7c      	ldr	r3, [pc, #496]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a7b      	ldr	r2, [pc, #492]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	e01d      	b.n	800ce58 <HAL_RCC_OscConfig+0xd8>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce24:	d10c      	bne.n	800ce40 <HAL_RCC_OscConfig+0xc0>
 800ce26:	4b76      	ldr	r3, [pc, #472]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a75      	ldr	r2, [pc, #468]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	4b73      	ldr	r3, [pc, #460]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a72      	ldr	r2, [pc, #456]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce3c:	6013      	str	r3, [r2, #0]
 800ce3e:	e00b      	b.n	800ce58 <HAL_RCC_OscConfig+0xd8>
 800ce40:	4b6f      	ldr	r3, [pc, #444]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a6e      	ldr	r2, [pc, #440]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce4a:	6013      	str	r3, [r2, #0]
 800ce4c:	4b6c      	ldr	r3, [pc, #432]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a6b      	ldr	r2, [pc, #428]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d013      	beq.n	800ce88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce60:	f7fe fbb4 	bl	800b5cc <HAL_GetTick>
 800ce64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce66:	e008      	b.n	800ce7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ce68:	f7fe fbb0 	bl	800b5cc <HAL_GetTick>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	2b64      	cmp	r3, #100	; 0x64
 800ce74:	d901      	bls.n	800ce7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e229      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce7a:	4b61      	ldr	r3, [pc, #388]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0f0      	beq.n	800ce68 <HAL_RCC_OscConfig+0xe8>
 800ce86:	e014      	b.n	800ceb2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce88:	f7fe fba0 	bl	800b5cc <HAL_GetTick>
 800ce8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce8e:	e008      	b.n	800cea2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ce90:	f7fe fb9c 	bl	800b5cc <HAL_GetTick>
 800ce94:	4602      	mov	r2, r0
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	2b64      	cmp	r3, #100	; 0x64
 800ce9c:	d901      	bls.n	800cea2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	e215      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cea2:	4b57      	ldr	r3, [pc, #348]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1f0      	bne.n	800ce90 <HAL_RCC_OscConfig+0x110>
 800ceae:	e000      	b.n	800ceb2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ceb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d069      	beq.n	800cf92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cebe:	4b50      	ldr	r3, [pc, #320]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	f003 030c 	and.w	r3, r3, #12
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00b      	beq.n	800cee2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ceca:	4b4d      	ldr	r3, [pc, #308]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f003 030c 	and.w	r3, r3, #12
 800ced2:	2b08      	cmp	r3, #8
 800ced4:	d11c      	bne.n	800cf10 <HAL_RCC_OscConfig+0x190>
 800ced6:	4b4a      	ldr	r3, [pc, #296]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d116      	bne.n	800cf10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cee2:	4b47      	ldr	r3, [pc, #284]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d005      	beq.n	800cefa <HAL_RCC_OscConfig+0x17a>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d001      	beq.n	800cefa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	e1e9      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cefa:	4b41      	ldr	r3, [pc, #260]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	691b      	ldr	r3, [r3, #16]
 800cf06:	00db      	lsls	r3, r3, #3
 800cf08:	493d      	ldr	r1, [pc, #244]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cf0e:	e040      	b.n	800cf92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d023      	beq.n	800cf60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cf18:	4b39      	ldr	r3, [pc, #228]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a38      	ldr	r2, [pc, #224]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf1e:	f043 0301 	orr.w	r3, r3, #1
 800cf22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf24:	f7fe fb52 	bl	800b5cc <HAL_GetTick>
 800cf28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf2a:	e008      	b.n	800cf3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf2c:	f7fe fb4e 	bl	800b5cc <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d901      	bls.n	800cf3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e1c7      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf3e:	4b30      	ldr	r3, [pc, #192]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d0f0      	beq.n	800cf2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf4a:	4b2d      	ldr	r3, [pc, #180]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	00db      	lsls	r3, r3, #3
 800cf58:	4929      	ldr	r1, [pc, #164]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	600b      	str	r3, [r1, #0]
 800cf5e:	e018      	b.n	800cf92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cf60:	4b27      	ldr	r3, [pc, #156]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a26      	ldr	r2, [pc, #152]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf66:	f023 0301 	bic.w	r3, r3, #1
 800cf6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf6c:	f7fe fb2e 	bl	800b5cc <HAL_GetTick>
 800cf70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf72:	e008      	b.n	800cf86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf74:	f7fe fb2a 	bl	800b5cc <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d901      	bls.n	800cf86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cf82:	2303      	movs	r3, #3
 800cf84:	e1a3      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf86:	4b1e      	ldr	r3, [pc, #120]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0302 	and.w	r3, r3, #2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1f0      	bne.n	800cf74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0308 	and.w	r3, r3, #8
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d038      	beq.n	800d010 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	695b      	ldr	r3, [r3, #20]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d019      	beq.n	800cfda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cfa6:	4b16      	ldr	r3, [pc, #88]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfaa:	4a15      	ldr	r2, [pc, #84]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cfac:	f043 0301 	orr.w	r3, r3, #1
 800cfb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfb2:	f7fe fb0b 	bl	800b5cc <HAL_GetTick>
 800cfb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cfb8:	e008      	b.n	800cfcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfba:	f7fe fb07 	bl	800b5cc <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d901      	bls.n	800cfcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e180      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cfcc:	4b0c      	ldr	r3, [pc, #48]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cfce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfd0:	f003 0302 	and.w	r3, r3, #2
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d0f0      	beq.n	800cfba <HAL_RCC_OscConfig+0x23a>
 800cfd8:	e01a      	b.n	800d010 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfde:	4a08      	ldr	r2, [pc, #32]	; (800d000 <HAL_RCC_OscConfig+0x280>)
 800cfe0:	f023 0301 	bic.w	r3, r3, #1
 800cfe4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfe6:	f7fe faf1 	bl	800b5cc <HAL_GetTick>
 800cfea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cfec:	e00a      	b.n	800d004 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfee:	f7fe faed 	bl	800b5cc <HAL_GetTick>
 800cff2:	4602      	mov	r2, r0
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d903      	bls.n	800d004 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e166      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
 800d000:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d004:	4b92      	ldr	r3, [pc, #584]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1ee      	bne.n	800cfee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 80a4 	beq.w	800d166 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d01e:	4b8c      	ldr	r3, [pc, #560]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10d      	bne.n	800d046 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d02a:	4b89      	ldr	r3, [pc, #548]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02e:	4a88      	ldr	r2, [pc, #544]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d034:	6413      	str	r3, [r2, #64]	; 0x40
 800d036:	4b86      	ldr	r3, [pc, #536]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d03e:	60bb      	str	r3, [r7, #8]
 800d040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d042:	2301      	movs	r3, #1
 800d044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d046:	4b83      	ldr	r3, [pc, #524]	; (800d254 <HAL_RCC_OscConfig+0x4d4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d118      	bne.n	800d084 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d052:	4b80      	ldr	r3, [pc, #512]	; (800d254 <HAL_RCC_OscConfig+0x4d4>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4a7f      	ldr	r2, [pc, #508]	; (800d254 <HAL_RCC_OscConfig+0x4d4>)
 800d058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d05c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d05e:	f7fe fab5 	bl	800b5cc <HAL_GetTick>
 800d062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d064:	e008      	b.n	800d078 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d066:	f7fe fab1 	bl	800b5cc <HAL_GetTick>
 800d06a:	4602      	mov	r2, r0
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	2b64      	cmp	r3, #100	; 0x64
 800d072:	d901      	bls.n	800d078 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e12a      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d078:	4b76      	ldr	r3, [pc, #472]	; (800d254 <HAL_RCC_OscConfig+0x4d4>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0f0      	beq.n	800d066 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d106      	bne.n	800d09a <HAL_RCC_OscConfig+0x31a>
 800d08c:	4b70      	ldr	r3, [pc, #448]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d090:	4a6f      	ldr	r2, [pc, #444]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d092:	f043 0301 	orr.w	r3, r3, #1
 800d096:	6713      	str	r3, [r2, #112]	; 0x70
 800d098:	e02d      	b.n	800d0f6 <HAL_RCC_OscConfig+0x376>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10c      	bne.n	800d0bc <HAL_RCC_OscConfig+0x33c>
 800d0a2:	4b6b      	ldr	r3, [pc, #428]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0a6:	4a6a      	ldr	r2, [pc, #424]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0a8:	f023 0301 	bic.w	r3, r3, #1
 800d0ac:	6713      	str	r3, [r2, #112]	; 0x70
 800d0ae:	4b68      	ldr	r3, [pc, #416]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0b2:	4a67      	ldr	r2, [pc, #412]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0b4:	f023 0304 	bic.w	r3, r3, #4
 800d0b8:	6713      	str	r3, [r2, #112]	; 0x70
 800d0ba:	e01c      	b.n	800d0f6 <HAL_RCC_OscConfig+0x376>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	2b05      	cmp	r3, #5
 800d0c2:	d10c      	bne.n	800d0de <HAL_RCC_OscConfig+0x35e>
 800d0c4:	4b62      	ldr	r3, [pc, #392]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c8:	4a61      	ldr	r2, [pc, #388]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0ca:	f043 0304 	orr.w	r3, r3, #4
 800d0ce:	6713      	str	r3, [r2, #112]	; 0x70
 800d0d0:	4b5f      	ldr	r3, [pc, #380]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d4:	4a5e      	ldr	r2, [pc, #376]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0d6:	f043 0301 	orr.w	r3, r3, #1
 800d0da:	6713      	str	r3, [r2, #112]	; 0x70
 800d0dc:	e00b      	b.n	800d0f6 <HAL_RCC_OscConfig+0x376>
 800d0de:	4b5c      	ldr	r3, [pc, #368]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0e2:	4a5b      	ldr	r2, [pc, #364]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0e4:	f023 0301 	bic.w	r3, r3, #1
 800d0e8:	6713      	str	r3, [r2, #112]	; 0x70
 800d0ea:	4b59      	ldr	r3, [pc, #356]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ee:	4a58      	ldr	r2, [pc, #352]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d0f0:	f023 0304 	bic.w	r3, r3, #4
 800d0f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d015      	beq.n	800d12a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0fe:	f7fe fa65 	bl	800b5cc <HAL_GetTick>
 800d102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d104:	e00a      	b.n	800d11c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d106:	f7fe fa61 	bl	800b5cc <HAL_GetTick>
 800d10a:	4602      	mov	r2, r0
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	f241 3288 	movw	r2, #5000	; 0x1388
 800d114:	4293      	cmp	r3, r2
 800d116:	d901      	bls.n	800d11c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d118:	2303      	movs	r3, #3
 800d11a:	e0d8      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d11c:	4b4c      	ldr	r3, [pc, #304]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d120:	f003 0302 	and.w	r3, r3, #2
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0ee      	beq.n	800d106 <HAL_RCC_OscConfig+0x386>
 800d128:	e014      	b.n	800d154 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d12a:	f7fe fa4f 	bl	800b5cc <HAL_GetTick>
 800d12e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d130:	e00a      	b.n	800d148 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d132:	f7fe fa4b 	bl	800b5cc <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d140:	4293      	cmp	r3, r2
 800d142:	d901      	bls.n	800d148 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d144:	2303      	movs	r3, #3
 800d146:	e0c2      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d148:	4b41      	ldr	r3, [pc, #260]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1ee      	bne.n	800d132 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d154:	7dfb      	ldrb	r3, [r7, #23]
 800d156:	2b01      	cmp	r3, #1
 800d158:	d105      	bne.n	800d166 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d15a:	4b3d      	ldr	r3, [pc, #244]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15e:	4a3c      	ldr	r2, [pc, #240]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 80ae 	beq.w	800d2cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d170:	4b37      	ldr	r3, [pc, #220]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f003 030c 	and.w	r3, r3, #12
 800d178:	2b08      	cmp	r3, #8
 800d17a:	d06d      	beq.n	800d258 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d14b      	bne.n	800d21c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d184:	4b32      	ldr	r3, [pc, #200]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a31      	ldr	r2, [pc, #196]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d18a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d18e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d190:	f7fe fa1c 	bl	800b5cc <HAL_GetTick>
 800d194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d196:	e008      	b.n	800d1aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d198:	f7fe fa18 	bl	800b5cc <HAL_GetTick>
 800d19c:	4602      	mov	r2, r0
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d901      	bls.n	800d1aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d1a6:	2303      	movs	r3, #3
 800d1a8:	e091      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d1aa:	4b29      	ldr	r3, [pc, #164]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1f0      	bne.n	800d198 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	69da      	ldr	r2, [r3, #28]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	431a      	orrs	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c4:	019b      	lsls	r3, r3, #6
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1cc:	085b      	lsrs	r3, r3, #1
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	041b      	lsls	r3, r3, #16
 800d1d2:	431a      	orrs	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d8:	061b      	lsls	r3, r3, #24
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e0:	071b      	lsls	r3, r3, #28
 800d1e2:	491b      	ldr	r1, [pc, #108]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d1e8:	4b19      	ldr	r3, [pc, #100]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a18      	ldr	r2, [pc, #96]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d1ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f4:	f7fe f9ea 	bl	800b5cc <HAL_GetTick>
 800d1f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d1fa:	e008      	b.n	800d20e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1fc:	f7fe f9e6 	bl	800b5cc <HAL_GetTick>
 800d200:	4602      	mov	r2, r0
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	2b02      	cmp	r3, #2
 800d208:	d901      	bls.n	800d20e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800d20a:	2303      	movs	r3, #3
 800d20c:	e05f      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d20e:	4b10      	ldr	r3, [pc, #64]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d216:	2b00      	cmp	r3, #0
 800d218:	d0f0      	beq.n	800d1fc <HAL_RCC_OscConfig+0x47c>
 800d21a:	e057      	b.n	800d2cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d21c:	4b0c      	ldr	r3, [pc, #48]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a0b      	ldr	r2, [pc, #44]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d228:	f7fe f9d0 	bl	800b5cc <HAL_GetTick>
 800d22c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d22e:	e008      	b.n	800d242 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d230:	f7fe f9cc 	bl	800b5cc <HAL_GetTick>
 800d234:	4602      	mov	r2, r0
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d901      	bls.n	800d242 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800d23e:	2303      	movs	r3, #3
 800d240:	e045      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d242:	4b03      	ldr	r3, [pc, #12]	; (800d250 <HAL_RCC_OscConfig+0x4d0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1f0      	bne.n	800d230 <HAL_RCC_OscConfig+0x4b0>
 800d24e:	e03d      	b.n	800d2cc <HAL_RCC_OscConfig+0x54c>
 800d250:	40023800 	.word	0x40023800
 800d254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d258:	4b1f      	ldr	r3, [pc, #124]	; (800d2d8 <HAL_RCC_OscConfig+0x558>)
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	2b01      	cmp	r3, #1
 800d264:	d030      	beq.n	800d2c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d270:	429a      	cmp	r2, r3
 800d272:	d129      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d27e:	429a      	cmp	r2, r3
 800d280:	d122      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d288:	4013      	ands	r3, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d28e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d290:	4293      	cmp	r3, r2
 800d292:	d119      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29e:	085b      	lsrs	r3, r3, #1
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d10f      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d107      	bne.n	800d2c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d001      	beq.n	800d2cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e000      	b.n	800d2ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3718      	adds	r7, #24
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	40023800 	.word	0x40023800

0800d2dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e0d0      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d2f4:	4b6a      	ldr	r3, [pc, #424]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f003 030f 	and.w	r3, r3, #15
 800d2fc:	683a      	ldr	r2, [r7, #0]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d910      	bls.n	800d324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d302:	4b67      	ldr	r3, [pc, #412]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f023 020f 	bic.w	r2, r3, #15
 800d30a:	4965      	ldr	r1, [pc, #404]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	4313      	orrs	r3, r2
 800d310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d312:	4b63      	ldr	r3, [pc, #396]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f003 030f 	and.w	r3, r3, #15
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d001      	beq.n	800d324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	e0b8      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d020      	beq.n	800d372 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0304 	and.w	r3, r3, #4
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d33c:	4b59      	ldr	r3, [pc, #356]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	4a58      	ldr	r2, [pc, #352]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d346:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0308 	and.w	r3, r3, #8
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d354:	4b53      	ldr	r3, [pc, #332]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	4a52      	ldr	r2, [pc, #328]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d35a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d35e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d360:	4b50      	ldr	r3, [pc, #320]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	494d      	ldr	r1, [pc, #308]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d36e:	4313      	orrs	r3, r2
 800d370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f003 0301 	and.w	r3, r3, #1
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d040      	beq.n	800d400 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d107      	bne.n	800d396 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d386:	4b47      	ldr	r3, [pc, #284]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d115      	bne.n	800d3be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e07f      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d107      	bne.n	800d3ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d39e:	4b41      	ldr	r3, [pc, #260]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d109      	bne.n	800d3be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e073      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d3ae:	4b3d      	ldr	r3, [pc, #244]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e06b      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d3be:	4b39      	ldr	r3, [pc, #228]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f023 0203 	bic.w	r2, r3, #3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	4936      	ldr	r1, [pc, #216]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3d0:	f7fe f8fc 	bl	800b5cc <HAL_GetTick>
 800d3d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3d6:	e00a      	b.n	800d3ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d3d8:	f7fe f8f8 	bl	800b5cc <HAL_GetTick>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d901      	bls.n	800d3ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	e053      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3ee:	4b2d      	ldr	r3, [pc, #180]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f003 020c 	and.w	r2, r3, #12
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d1eb      	bne.n	800d3d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d400:	4b27      	ldr	r3, [pc, #156]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 030f 	and.w	r3, r3, #15
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d210      	bcs.n	800d430 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d40e:	4b24      	ldr	r3, [pc, #144]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f023 020f 	bic.w	r2, r3, #15
 800d416:	4922      	ldr	r1, [pc, #136]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	4313      	orrs	r3, r2
 800d41c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d41e:	4b20      	ldr	r3, [pc, #128]	; (800d4a0 <HAL_RCC_ClockConfig+0x1c4>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 030f 	and.w	r3, r3, #15
 800d426:	683a      	ldr	r2, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d001      	beq.n	800d430 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e032      	b.n	800d496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f003 0304 	and.w	r3, r3, #4
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d008      	beq.n	800d44e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d43c:	4b19      	ldr	r3, [pc, #100]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	4916      	ldr	r1, [pc, #88]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d44a:	4313      	orrs	r3, r2
 800d44c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f003 0308 	and.w	r3, r3, #8
 800d456:	2b00      	cmp	r3, #0
 800d458:	d009      	beq.n	800d46e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d45a:	4b12      	ldr	r3, [pc, #72]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	691b      	ldr	r3, [r3, #16]
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	490e      	ldr	r1, [pc, #56]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d46a:	4313      	orrs	r3, r2
 800d46c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d46e:	f000 f821 	bl	800d4b4 <HAL_RCC_GetSysClockFreq>
 800d472:	4602      	mov	r2, r0
 800d474:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <HAL_RCC_ClockConfig+0x1c8>)
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	091b      	lsrs	r3, r3, #4
 800d47a:	f003 030f 	and.w	r3, r3, #15
 800d47e:	490a      	ldr	r1, [pc, #40]	; (800d4a8 <HAL_RCC_ClockConfig+0x1cc>)
 800d480:	5ccb      	ldrb	r3, [r1, r3]
 800d482:	fa22 f303 	lsr.w	r3, r2, r3
 800d486:	4a09      	ldr	r2, [pc, #36]	; (800d4ac <HAL_RCC_ClockConfig+0x1d0>)
 800d488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d48a:	4b09      	ldr	r3, [pc, #36]	; (800d4b0 <HAL_RCC_ClockConfig+0x1d4>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4618      	mov	r0, r3
 800d490:	f7f8 fc78 	bl	8005d84 <HAL_InitTick>

  return HAL_OK;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	40023c00 	.word	0x40023c00
 800d4a4:	40023800 	.word	0x40023800
 800d4a8:	080144b8 	.word	0x080144b8
 800d4ac:	20000058 	.word	0x20000058
 800d4b0:	200001b4 	.word	0x200001b4

0800d4b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4b8:	b094      	sub	sp, #80	; 0x50
 800d4ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	647b      	str	r3, [r7, #68]	; 0x44
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d4cc:	4b79      	ldr	r3, [pc, #484]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	f003 030c 	and.w	r3, r3, #12
 800d4d4:	2b08      	cmp	r3, #8
 800d4d6:	d00d      	beq.n	800d4f4 <HAL_RCC_GetSysClockFreq+0x40>
 800d4d8:	2b08      	cmp	r3, #8
 800d4da:	f200 80e1 	bhi.w	800d6a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d002      	beq.n	800d4e8 <HAL_RCC_GetSysClockFreq+0x34>
 800d4e2:	2b04      	cmp	r3, #4
 800d4e4:	d003      	beq.n	800d4ee <HAL_RCC_GetSysClockFreq+0x3a>
 800d4e6:	e0db      	b.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d4e8:	4b73      	ldr	r3, [pc, #460]	; (800d6b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d4ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d4ec:	e0db      	b.n	800d6a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d4ee:	4b73      	ldr	r3, [pc, #460]	; (800d6bc <HAL_RCC_GetSysClockFreq+0x208>)
 800d4f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d4f2:	e0d8      	b.n	800d6a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d4f4:	4b6f      	ldr	r3, [pc, #444]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d4fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d4fe:	4b6d      	ldr	r3, [pc, #436]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d063      	beq.n	800d5d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d50a:	4b6a      	ldr	r3, [pc, #424]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	099b      	lsrs	r3, r3, #6
 800d510:	2200      	movs	r2, #0
 800d512:	63bb      	str	r3, [r7, #56]	; 0x38
 800d514:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d51c:	633b      	str	r3, [r7, #48]	; 0x30
 800d51e:	2300      	movs	r3, #0
 800d520:	637b      	str	r3, [r7, #52]	; 0x34
 800d522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d526:	4622      	mov	r2, r4
 800d528:	462b      	mov	r3, r5
 800d52a:	f04f 0000 	mov.w	r0, #0
 800d52e:	f04f 0100 	mov.w	r1, #0
 800d532:	0159      	lsls	r1, r3, #5
 800d534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d538:	0150      	lsls	r0, r2, #5
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	4621      	mov	r1, r4
 800d540:	1a51      	subs	r1, r2, r1
 800d542:	6139      	str	r1, [r7, #16]
 800d544:	4629      	mov	r1, r5
 800d546:	eb63 0301 	sbc.w	r3, r3, r1
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	f04f 0200 	mov.w	r2, #0
 800d550:	f04f 0300 	mov.w	r3, #0
 800d554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d558:	4659      	mov	r1, fp
 800d55a:	018b      	lsls	r3, r1, #6
 800d55c:	4651      	mov	r1, sl
 800d55e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d562:	4651      	mov	r1, sl
 800d564:	018a      	lsls	r2, r1, #6
 800d566:	4651      	mov	r1, sl
 800d568:	ebb2 0801 	subs.w	r8, r2, r1
 800d56c:	4659      	mov	r1, fp
 800d56e:	eb63 0901 	sbc.w	r9, r3, r1
 800d572:	f04f 0200 	mov.w	r2, #0
 800d576:	f04f 0300 	mov.w	r3, #0
 800d57a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d57e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d586:	4690      	mov	r8, r2
 800d588:	4699      	mov	r9, r3
 800d58a:	4623      	mov	r3, r4
 800d58c:	eb18 0303 	adds.w	r3, r8, r3
 800d590:	60bb      	str	r3, [r7, #8]
 800d592:	462b      	mov	r3, r5
 800d594:	eb49 0303 	adc.w	r3, r9, r3
 800d598:	60fb      	str	r3, [r7, #12]
 800d59a:	f04f 0200 	mov.w	r2, #0
 800d59e:	f04f 0300 	mov.w	r3, #0
 800d5a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	024b      	lsls	r3, r1, #9
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d5b0:	4621      	mov	r1, r4
 800d5b2:	024a      	lsls	r2, r1, #9
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d5c4:	f7f2 fe8c 	bl	80002e0 <__aeabi_uldivmod>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5d0:	e058      	b.n	800d684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5d2:	4b38      	ldr	r3, [pc, #224]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	099b      	lsrs	r3, r3, #6
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4618      	mov	r0, r3
 800d5dc:	4611      	mov	r1, r2
 800d5de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d5e2:	623b      	str	r3, [r7, #32]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	464b      	mov	r3, r9
 800d5f0:	f04f 0000 	mov.w	r0, #0
 800d5f4:	f04f 0100 	mov.w	r1, #0
 800d5f8:	0159      	lsls	r1, r3, #5
 800d5fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d5fe:	0150      	lsls	r0, r2, #5
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4641      	mov	r1, r8
 800d606:	ebb2 0a01 	subs.w	sl, r2, r1
 800d60a:	4649      	mov	r1, r9
 800d60c:	eb63 0b01 	sbc.w	fp, r3, r1
 800d610:	f04f 0200 	mov.w	r2, #0
 800d614:	f04f 0300 	mov.w	r3, #0
 800d618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d61c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d624:	ebb2 040a 	subs.w	r4, r2, sl
 800d628:	eb63 050b 	sbc.w	r5, r3, fp
 800d62c:	f04f 0200 	mov.w	r2, #0
 800d630:	f04f 0300 	mov.w	r3, #0
 800d634:	00eb      	lsls	r3, r5, #3
 800d636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d63a:	00e2      	lsls	r2, r4, #3
 800d63c:	4614      	mov	r4, r2
 800d63e:	461d      	mov	r5, r3
 800d640:	4643      	mov	r3, r8
 800d642:	18e3      	adds	r3, r4, r3
 800d644:	603b      	str	r3, [r7, #0]
 800d646:	464b      	mov	r3, r9
 800d648:	eb45 0303 	adc.w	r3, r5, r3
 800d64c:	607b      	str	r3, [r7, #4]
 800d64e:	f04f 0200 	mov.w	r2, #0
 800d652:	f04f 0300 	mov.w	r3, #0
 800d656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d65a:	4629      	mov	r1, r5
 800d65c:	028b      	lsls	r3, r1, #10
 800d65e:	4621      	mov	r1, r4
 800d660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d664:	4621      	mov	r1, r4
 800d666:	028a      	lsls	r2, r1, #10
 800d668:	4610      	mov	r0, r2
 800d66a:	4619      	mov	r1, r3
 800d66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d66e:	2200      	movs	r2, #0
 800d670:	61bb      	str	r3, [r7, #24]
 800d672:	61fa      	str	r2, [r7, #28]
 800d674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d678:	f7f2 fe32 	bl	80002e0 <__aeabi_uldivmod>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	4613      	mov	r3, r2
 800d682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d684:	4b0b      	ldr	r3, [pc, #44]	; (800d6b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	0c1b      	lsrs	r3, r3, #16
 800d68a:	f003 0303 	and.w	r3, r3, #3
 800d68e:	3301      	adds	r3, #1
 800d690:	005b      	lsls	r3, r3, #1
 800d692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800d694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d698:	fbb2 f3f3 	udiv	r3, r2, r3
 800d69c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d69e:	e002      	b.n	800d6a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d6a0:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d6a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d6a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3750      	adds	r7, #80	; 0x50
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6b2:	bf00      	nop
 800d6b4:	40023800 	.word	0x40023800
 800d6b8:	00f42400 	.word	0x00f42400
 800d6bc:	007a1200 	.word	0x007a1200

0800d6c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d6c4:	4b03      	ldr	r3, [pc, #12]	; (800d6d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr
 800d6d2:	bf00      	nop
 800d6d4:	20000058 	.word	0x20000058

0800d6d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d6dc:	f7ff fff0 	bl	800d6c0 <HAL_RCC_GetHCLKFreq>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	0a9b      	lsrs	r3, r3, #10
 800d6e8:	f003 0307 	and.w	r3, r3, #7
 800d6ec:	4903      	ldr	r1, [pc, #12]	; (800d6fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6ee:	5ccb      	ldrb	r3, [r1, r3]
 800d6f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	40023800 	.word	0x40023800
 800d6fc:	080144c8 	.word	0x080144c8

0800d700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d704:	f7ff ffdc 	bl	800d6c0 <HAL_RCC_GetHCLKFreq>
 800d708:	4602      	mov	r2, r0
 800d70a:	4b05      	ldr	r3, [pc, #20]	; (800d720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	0b5b      	lsrs	r3, r3, #13
 800d710:	f003 0307 	and.w	r3, r3, #7
 800d714:	4903      	ldr	r1, [pc, #12]	; (800d724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d716:	5ccb      	ldrb	r3, [r1, r3]
 800d718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	40023800 	.word	0x40023800
 800d724:	080144c8 	.word	0x080144c8

0800d728 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	220f      	movs	r2, #15
 800d736:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d738:	4b12      	ldr	r3, [pc, #72]	; (800d784 <HAL_RCC_GetClockConfig+0x5c>)
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f003 0203 	and.w	r2, r3, #3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d744:	4b0f      	ldr	r3, [pc, #60]	; (800d784 <HAL_RCC_GetClockConfig+0x5c>)
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d750:	4b0c      	ldr	r3, [pc, #48]	; (800d784 <HAL_RCC_GetClockConfig+0x5c>)
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <HAL_RCC_GetClockConfig+0x5c>)
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	08db      	lsrs	r3, r3, #3
 800d762:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <HAL_RCC_GetClockConfig+0x60>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f003 020f 	and.w	r2, r3, #15
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	601a      	str	r2, [r3, #0]
}
 800d776:	bf00      	nop
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	40023800 	.word	0x40023800
 800d788:	40023c00 	.word	0x40023c00

0800d78c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d794:	2300      	movs	r3, #0
 800d796:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d798:	2300      	movs	r3, #0
 800d79a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f003 0301 	and.w	r3, r3, #1
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d012      	beq.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d7b4:	4b69      	ldr	r3, [pc, #420]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	4a68      	ldr	r2, [pc, #416]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d7be:	6093      	str	r3, [r2, #8]
 800d7c0:	4b66      	ldr	r3, [pc, #408]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7c2:	689a      	ldr	r2, [r3, #8]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c8:	4964      	ldr	r1, [pc, #400]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d017      	beq.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d7e6:	4b5d      	ldr	r3, [pc, #372]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f4:	4959      	ldr	r1, [pc, #356]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d804:	d101      	bne.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d806:	2301      	movs	r3, #1
 800d808:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d101      	bne.n	800d816 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d812:	2301      	movs	r3, #1
 800d814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d017      	beq.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d822:	4b4e      	ldr	r3, [pc, #312]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d828:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d830:	494a      	ldr	r1, [pc, #296]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d832:	4313      	orrs	r3, r2
 800d834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d83c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d840:	d101      	bne.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d842:	2301      	movs	r3, #1
 800d844:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d101      	bne.n	800d852 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d84e:	2301      	movs	r3, #1
 800d850:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d85e:	2301      	movs	r3, #1
 800d860:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0320 	and.w	r3, r3, #32
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f000 808b 	beq.w	800d986 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d870:	4b3a      	ldr	r3, [pc, #232]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d874:	4a39      	ldr	r2, [pc, #228]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d87a:	6413      	str	r3, [r2, #64]	; 0x40
 800d87c:	4b37      	ldr	r3, [pc, #220]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d884:	60bb      	str	r3, [r7, #8]
 800d886:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d888:	4b35      	ldr	r3, [pc, #212]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a34      	ldr	r2, [pc, #208]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d88e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d894:	f7fd fe9a 	bl	800b5cc <HAL_GetTick>
 800d898:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d89a:	e008      	b.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d89c:	f7fd fe96 	bl	800b5cc <HAL_GetTick>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	1ad3      	subs	r3, r2, r3
 800d8a6:	2b64      	cmp	r3, #100	; 0x64
 800d8a8:	d901      	bls.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d8aa:	2303      	movs	r3, #3
 800d8ac:	e38f      	b.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d8ae:	4b2c      	ldr	r3, [pc, #176]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d0f0      	beq.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d8ba:	4b28      	ldr	r3, [pc, #160]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d035      	beq.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d02e      	beq.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d8d8:	4b20      	ldr	r3, [pc, #128]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d8e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d8e2:	4b1e      	ldr	r3, [pc, #120]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e6:	4a1d      	ldr	r2, [pc, #116]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d8ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d8ee:	4b1b      	ldr	r3, [pc, #108]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f2:	4a1a      	ldr	r2, [pc, #104]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d8fa:	4a18      	ldr	r2, [pc, #96]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d900:	4b16      	ldr	r3, [pc, #88]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d114      	bne.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d90c:	f7fd fe5e 	bl	800b5cc <HAL_GetTick>
 800d910:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d912:	e00a      	b.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d914:	f7fd fe5a 	bl	800b5cc <HAL_GetTick>
 800d918:	4602      	mov	r2, r0
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	1ad3      	subs	r3, r2, r3
 800d91e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d922:	4293      	cmp	r3, r2
 800d924:	d901      	bls.n	800d92a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d926:	2303      	movs	r3, #3
 800d928:	e351      	b.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d92a:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d92e:	f003 0302 	and.w	r3, r3, #2
 800d932:	2b00      	cmp	r3, #0
 800d934:	d0ee      	beq.n	800d914 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d93e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d942:	d111      	bne.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d944:	4b05      	ldr	r3, [pc, #20]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d950:	4b04      	ldr	r3, [pc, #16]	; (800d964 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d952:	400b      	ands	r3, r1
 800d954:	4901      	ldr	r1, [pc, #4]	; (800d95c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d956:	4313      	orrs	r3, r2
 800d958:	608b      	str	r3, [r1, #8]
 800d95a:	e00b      	b.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d95c:	40023800 	.word	0x40023800
 800d960:	40007000 	.word	0x40007000
 800d964:	0ffffcff 	.word	0x0ffffcff
 800d968:	4bac      	ldr	r3, [pc, #688]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	4aab      	ldr	r2, [pc, #684]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d96e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d972:	6093      	str	r3, [r2, #8]
 800d974:	4ba9      	ldr	r3, [pc, #676]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d980:	49a6      	ldr	r1, [pc, #664]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d982:	4313      	orrs	r3, r2
 800d984:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0310 	and.w	r3, r3, #16
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d010      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d992:	4ba2      	ldr	r3, [pc, #648]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d998:	4aa0      	ldr	r2, [pc, #640]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d99a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d99e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d9a2:	4b9e      	ldr	r3, [pc, #632]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	499b      	ldr	r1, [pc, #620]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00a      	beq.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d9c0:	4b96      	ldr	r3, [pc, #600]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ce:	4993      	ldr	r1, [pc, #588]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00a      	beq.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d9e2:	4b8e      	ldr	r3, [pc, #568]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f0:	498a      	ldr	r1, [pc, #552]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00a      	beq.n	800da1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800da04:	4b85      	ldr	r3, [pc, #532]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da12:	4982      	ldr	r1, [pc, #520]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da14:	4313      	orrs	r3, r2
 800da16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800da26:	4b7d      	ldr	r3, [pc, #500]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da34:	4979      	ldr	r1, [pc, #484]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da36:	4313      	orrs	r3, r2
 800da38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00a      	beq.n	800da5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800da48:	4b74      	ldr	r3, [pc, #464]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da4e:	f023 0203 	bic.w	r2, r3, #3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da56:	4971      	ldr	r1, [pc, #452]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da58:	4313      	orrs	r3, r2
 800da5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800da6a:	4b6c      	ldr	r3, [pc, #432]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da70:	f023 020c 	bic.w	r2, r3, #12
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da78:	4968      	ldr	r1, [pc, #416]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da7a:	4313      	orrs	r3, r2
 800da7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d00a      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800da8c:	4b63      	ldr	r3, [pc, #396]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da9a:	4960      	ldr	r1, [pc, #384]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da9c:	4313      	orrs	r3, r2
 800da9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00a      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800daae:	4b5b      	ldr	r3, [pc, #364]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dab4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dabc:	4957      	ldr	r1, [pc, #348]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dabe:	4313      	orrs	r3, r2
 800dac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00a      	beq.n	800dae6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dad0:	4b52      	ldr	r3, [pc, #328]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dade:	494f      	ldr	r1, [pc, #316]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dae0:	4313      	orrs	r3, r2
 800dae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800daf2:	4b4a      	ldr	r3, [pc, #296]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800daf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daf8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db00:	4946      	ldr	r1, [pc, #280]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db02:	4313      	orrs	r3, r2
 800db04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800db14:	4b41      	ldr	r3, [pc, #260]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db22:	493e      	ldr	r1, [pc, #248]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db24:	4313      	orrs	r3, r2
 800db26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00a      	beq.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800db36:	4b39      	ldr	r3, [pc, #228]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db44:	4935      	ldr	r1, [pc, #212]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db46:	4313      	orrs	r3, r2
 800db48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00a      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800db58:	4b30      	ldr	r3, [pc, #192]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db66:	492d      	ldr	r1, [pc, #180]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db68:	4313      	orrs	r3, r2
 800db6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db76:	2b00      	cmp	r3, #0
 800db78:	d011      	beq.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800db7a:	4b28      	ldr	r3, [pc, #160]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db80:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db88:	4924      	ldr	r1, [pc, #144]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db98:	d101      	bne.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800db9a:	2301      	movs	r3, #1
 800db9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f003 0308 	and.w	r3, r3, #8
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00a      	beq.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dbba:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbc0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbc8:	4914      	ldr	r1, [pc, #80]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00b      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dbdc:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbec:	490b      	ldr	r1, [pc, #44]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00f      	beq.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800dc00:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc10:	4902      	ldr	r1, [pc, #8]	; (800dc1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dc12:	4313      	orrs	r3, r2
 800dc14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800dc18:	e002      	b.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800dc1a:	bf00      	nop
 800dc1c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00b      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dc2c:	4b8a      	ldr	r3, [pc, #552]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc3c:	4986      	ldr	r1, [pc, #536]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00b      	beq.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dc50:	4b81      	ldr	r3, [pc, #516]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc60:	497d      	ldr	r1, [pc, #500]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d006      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f000 80d6 	beq.w	800de28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dc7c:	4b76      	ldr	r3, [pc, #472]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a75      	ldr	r2, [pc, #468]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dc86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc88:	f7fd fca0 	bl	800b5cc <HAL_GetTick>
 800dc8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dc8e:	e008      	b.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dc90:	f7fd fc9c 	bl	800b5cc <HAL_GetTick>
 800dc94:	4602      	mov	r2, r0
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	2b64      	cmp	r3, #100	; 0x64
 800dc9c:	d901      	bls.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	e195      	b.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dca2:	4b6d      	ldr	r3, [pc, #436]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d1f0      	bne.n	800dc90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f003 0301 	and.w	r3, r3, #1
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d021      	beq.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x572>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d11d      	bne.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dcc2:	4b65      	ldr	r3, [pc, #404]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dcc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcc8:	0c1b      	lsrs	r3, r3, #16
 800dcca:	f003 0303 	and.w	r3, r3, #3
 800dcce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dcd0:	4b61      	ldr	r3, [pc, #388]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dcd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcd6:	0e1b      	lsrs	r3, r3, #24
 800dcd8:	f003 030f 	and.w	r3, r3, #15
 800dcdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	019a      	lsls	r2, r3, #6
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	041b      	lsls	r3, r3, #16
 800dce8:	431a      	orrs	r2, r3
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	061b      	lsls	r3, r3, #24
 800dcee:	431a      	orrs	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	071b      	lsls	r3, r3, #28
 800dcf6:	4958      	ldr	r1, [pc, #352]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d004      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd12:	d00a      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d02e      	beq.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd28:	d129      	bne.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dd2a:	4b4b      	ldr	r3, [pc, #300]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd30:	0c1b      	lsrs	r3, r3, #16
 800dd32:	f003 0303 	and.w	r3, r3, #3
 800dd36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dd38:	4b47      	ldr	r3, [pc, #284]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd3e:	0f1b      	lsrs	r3, r3, #28
 800dd40:	f003 0307 	and.w	r3, r3, #7
 800dd44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	019a      	lsls	r2, r3, #6
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	041b      	lsls	r3, r3, #16
 800dd50:	431a      	orrs	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	061b      	lsls	r3, r3, #24
 800dd58:	431a      	orrs	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	071b      	lsls	r3, r3, #28
 800dd5e:	493e      	ldr	r1, [pc, #248]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd60:	4313      	orrs	r3, r2
 800dd62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800dd66:	4b3c      	ldr	r3, [pc, #240]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd6c:	f023 021f 	bic.w	r2, r3, #31
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd74:	3b01      	subs	r3, #1
 800dd76:	4938      	ldr	r1, [pc, #224]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d01d      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd8a:	4b33      	ldr	r3, [pc, #204]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd90:	0e1b      	lsrs	r3, r3, #24
 800dd92:	f003 030f 	and.w	r3, r3, #15
 800dd96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dd98:	4b2f      	ldr	r3, [pc, #188]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dd9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd9e:	0f1b      	lsrs	r3, r3, #28
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	019a      	lsls	r2, r3, #6
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	041b      	lsls	r3, r3, #16
 800ddb2:	431a      	orrs	r2, r3
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	061b      	lsls	r3, r3, #24
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	071b      	lsls	r3, r3, #28
 800ddbe:	4926      	ldr	r1, [pc, #152]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d011      	beq.n	800ddf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	019a      	lsls	r2, r3, #6
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	041b      	lsls	r3, r3, #16
 800ddde:	431a      	orrs	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	061b      	lsls	r3, r3, #24
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	071b      	lsls	r3, r3, #28
 800ddee:	491a      	ldr	r1, [pc, #104]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ddf6:	4b18      	ldr	r3, [pc, #96]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a17      	ldr	r2, [pc, #92]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800ddfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de02:	f7fd fbe3 	bl	800b5cc <HAL_GetTick>
 800de06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800de08:	e008      	b.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800de0a:	f7fd fbdf 	bl	800b5cc <HAL_GetTick>
 800de0e:	4602      	mov	r2, r0
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	2b64      	cmp	r3, #100	; 0x64
 800de16:	d901      	bls.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800de18:	2303      	movs	r3, #3
 800de1a:	e0d8      	b.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800de1c:	4b0e      	ldr	r3, [pc, #56]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de24:	2b00      	cmp	r3, #0
 800de26:	d0f0      	beq.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	f040 80ce 	bne.w	800dfcc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800de30:	4b09      	ldr	r3, [pc, #36]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a08      	ldr	r2, [pc, #32]	; (800de58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800de36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de3c:	f7fd fbc6 	bl	800b5cc <HAL_GetTick>
 800de40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800de42:	e00b      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800de44:	f7fd fbc2 	bl	800b5cc <HAL_GetTick>
 800de48:	4602      	mov	r2, r0
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	1ad3      	subs	r3, r2, r3
 800de4e:	2b64      	cmp	r3, #100	; 0x64
 800de50:	d904      	bls.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800de52:	2303      	movs	r3, #3
 800de54:	e0bb      	b.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x842>
 800de56:	bf00      	nop
 800de58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800de5c:	4b5e      	ldr	r3, [pc, #376]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de68:	d0ec      	beq.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d003      	beq.n	800de7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d009      	beq.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800de86:	2b00      	cmp	r3, #0
 800de88:	d02e      	beq.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d12a      	bne.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800de92:	4b51      	ldr	r3, [pc, #324]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800de94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de98:	0c1b      	lsrs	r3, r3, #16
 800de9a:	f003 0303 	and.w	r3, r3, #3
 800de9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dea0:	4b4d      	ldr	r3, [pc, #308]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dea6:	0f1b      	lsrs	r3, r3, #28
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	695b      	ldr	r3, [r3, #20]
 800deb2:	019a      	lsls	r2, r3, #6
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	041b      	lsls	r3, r3, #16
 800deb8:	431a      	orrs	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	061b      	lsls	r3, r3, #24
 800dec0:	431a      	orrs	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	071b      	lsls	r3, r3, #28
 800dec6:	4944      	ldr	r1, [pc, #272]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dec8:	4313      	orrs	r3, r2
 800deca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800dece:	4b42      	ldr	r3, [pc, #264]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ded0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ded4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dedc:	3b01      	subs	r3, #1
 800dede:	021b      	lsls	r3, r3, #8
 800dee0:	493d      	ldr	r1, [pc, #244]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dee2:	4313      	orrs	r3, r2
 800dee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800def0:	2b00      	cmp	r3, #0
 800def2:	d022      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800def8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800defc:	d11d      	bne.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800defe:	4b36      	ldr	r3, [pc, #216]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df04:	0e1b      	lsrs	r3, r3, #24
 800df06:	f003 030f 	and.w	r3, r3, #15
 800df0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800df0c:	4b32      	ldr	r3, [pc, #200]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df12:	0f1b      	lsrs	r3, r3, #28
 800df14:	f003 0307 	and.w	r3, r3, #7
 800df18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	019a      	lsls	r2, r3, #6
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	041b      	lsls	r3, r3, #16
 800df26:	431a      	orrs	r2, r3
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	061b      	lsls	r3, r3, #24
 800df2c:	431a      	orrs	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	071b      	lsls	r3, r3, #28
 800df32:	4929      	ldr	r1, [pc, #164]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df34:	4313      	orrs	r3, r2
 800df36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f003 0308 	and.w	r3, r3, #8
 800df42:	2b00      	cmp	r3, #0
 800df44:	d028      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800df46:	4b24      	ldr	r3, [pc, #144]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df4c:	0e1b      	lsrs	r3, r3, #24
 800df4e:	f003 030f 	and.w	r3, r3, #15
 800df52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800df54:	4b20      	ldr	r3, [pc, #128]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df5a:	0c1b      	lsrs	r3, r3, #16
 800df5c:	f003 0303 	and.w	r3, r3, #3
 800df60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	019a      	lsls	r2, r3, #6
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	041b      	lsls	r3, r3, #16
 800df6c:	431a      	orrs	r2, r3
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	061b      	lsls	r3, r3, #24
 800df72:	431a      	orrs	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	69db      	ldr	r3, [r3, #28]
 800df78:	071b      	lsls	r3, r3, #28
 800df7a:	4917      	ldr	r1, [pc, #92]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df7c:	4313      	orrs	r3, r2
 800df7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800df82:	4b15      	ldr	r3, [pc, #84]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df90:	4911      	ldr	r1, [pc, #68]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df92:	4313      	orrs	r3, r2
 800df94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800df98:	4b0f      	ldr	r3, [pc, #60]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a0e      	ldr	r2, [pc, #56]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800df9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfa4:	f7fd fb12 	bl	800b5cc <HAL_GetTick>
 800dfa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800dfaa:	e008      	b.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dfac:	f7fd fb0e 	bl	800b5cc <HAL_GetTick>
 800dfb0:	4602      	mov	r2, r0
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	2b64      	cmp	r3, #100	; 0x64
 800dfb8:	d901      	bls.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dfba:	2303      	movs	r3, #3
 800dfbc:	e007      	b.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800dfbe:	4b06      	ldr	r3, [pc, #24]	; (800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfca:	d1ef      	bne.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3720      	adds	r7, #32
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	40023800 	.word	0x40023800

0800dfdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
 800dfec:	e049      	b.n	800e082 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d106      	bne.n	800e008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f841 	bl	800e08a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2202      	movs	r2, #2
 800e00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3304      	adds	r3, #4
 800e018:	4619      	mov	r1, r3
 800e01a:	4610      	mov	r0, r2
 800e01c:	f000 fa00 	bl	800e420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}

0800e08a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e08a:	b480      	push	{r7}
 800e08c:	b083      	sub	sp, #12
 800e08e:	af00      	add	r7, sp, #0
 800e090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e092:	bf00      	nop
 800e094:	370c      	adds	r7, #12
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
	...

0800e0a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d001      	beq.n	800e0b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e054      	b.n	800e162 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68da      	ldr	r2, [r3, #12]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f042 0201 	orr.w	r2, r2, #1
 800e0ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a26      	ldr	r2, [pc, #152]	; (800e170 <HAL_TIM_Base_Start_IT+0xd0>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d022      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0e2:	d01d      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a22      	ldr	r2, [pc, #136]	; (800e174 <HAL_TIM_Base_Start_IT+0xd4>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d018      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a21      	ldr	r2, [pc, #132]	; (800e178 <HAL_TIM_Base_Start_IT+0xd8>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d013      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a1f      	ldr	r2, [pc, #124]	; (800e17c <HAL_TIM_Base_Start_IT+0xdc>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d00e      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a1e      	ldr	r2, [pc, #120]	; (800e180 <HAL_TIM_Base_Start_IT+0xe0>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d009      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a1c      	ldr	r2, [pc, #112]	; (800e184 <HAL_TIM_Base_Start_IT+0xe4>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d004      	beq.n	800e120 <HAL_TIM_Base_Start_IT+0x80>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a1b      	ldr	r2, [pc, #108]	; (800e188 <HAL_TIM_Base_Start_IT+0xe8>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d115      	bne.n	800e14c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	689a      	ldr	r2, [r3, #8]
 800e126:	4b19      	ldr	r3, [pc, #100]	; (800e18c <HAL_TIM_Base_Start_IT+0xec>)
 800e128:	4013      	ands	r3, r2
 800e12a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2b06      	cmp	r3, #6
 800e130:	d015      	beq.n	800e15e <HAL_TIM_Base_Start_IT+0xbe>
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e138:	d011      	beq.n	800e15e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f042 0201 	orr.w	r2, r2, #1
 800e148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e14a:	e008      	b.n	800e15e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f042 0201 	orr.w	r2, r2, #1
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	e000      	b.n	800e160 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e15e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3714      	adds	r7, #20
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
 800e16e:	bf00      	nop
 800e170:	40010000 	.word	0x40010000
 800e174:	40000400 	.word	0x40000400
 800e178:	40000800 	.word	0x40000800
 800e17c:	40000c00 	.word	0x40000c00
 800e180:	40010400 	.word	0x40010400
 800e184:	40014000 	.word	0x40014000
 800e188:	40001800 	.word	0x40001800
 800e18c:	00010007 	.word	0x00010007

0800e190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d122      	bne.n	800e1ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	f003 0302 	and.w	r3, r3, #2
 800e1b0:	2b02      	cmp	r3, #2
 800e1b2:	d11b      	bne.n	800e1ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f06f 0202 	mvn.w	r2, #2
 800e1bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	699b      	ldr	r3, [r3, #24]
 800e1ca:	f003 0303 	and.w	r3, r3, #3
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d003      	beq.n	800e1da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f905 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800e1d8:	e005      	b.n	800e1e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 f8f7 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f908 	bl	800e3f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	f003 0304 	and.w	r3, r3, #4
 800e1f6:	2b04      	cmp	r3, #4
 800e1f8:	d122      	bne.n	800e240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	f003 0304 	and.w	r3, r3, #4
 800e204:	2b04      	cmp	r3, #4
 800e206:	d11b      	bne.n	800e240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f06f 0204 	mvn.w	r2, #4
 800e210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2202      	movs	r2, #2
 800e216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 f8db 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800e22c:	e005      	b.n	800e23a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f8cd 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 f8de 	bl	800e3f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	691b      	ldr	r3, [r3, #16]
 800e246:	f003 0308 	and.w	r3, r3, #8
 800e24a:	2b08      	cmp	r3, #8
 800e24c:	d122      	bne.n	800e294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	f003 0308 	and.w	r3, r3, #8
 800e258:	2b08      	cmp	r3, #8
 800e25a:	d11b      	bne.n	800e294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f06f 0208 	mvn.w	r2, #8
 800e264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2204      	movs	r2, #4
 800e26a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	69db      	ldr	r3, [r3, #28]
 800e272:	f003 0303 	and.w	r3, r3, #3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d003      	beq.n	800e282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 f8b1 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800e280:	e005      	b.n	800e28e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f8a3 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 f8b4 	bl	800e3f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	f003 0310 	and.w	r3, r3, #16
 800e29e:	2b10      	cmp	r3, #16
 800e2a0:	d122      	bne.n	800e2e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	f003 0310 	and.w	r3, r3, #16
 800e2ac:	2b10      	cmp	r3, #16
 800e2ae:	d11b      	bne.n	800e2e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f06f 0210 	mvn.w	r2, #16
 800e2b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2208      	movs	r2, #8
 800e2be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d003      	beq.n	800e2d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f887 	bl	800e3e2 <HAL_TIM_IC_CaptureCallback>
 800e2d4:	e005      	b.n	800e2e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f879 	bl	800e3ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 f88a 	bl	800e3f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d10e      	bne.n	800e314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	f003 0301 	and.w	r3, r3, #1
 800e300:	2b01      	cmp	r3, #1
 800e302:	d107      	bne.n	800e314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f06f 0201 	mvn.w	r2, #1
 800e30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7f5 fec6 	bl	80040a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e31e:	2b80      	cmp	r3, #128	; 0x80
 800e320:	d10e      	bne.n	800e340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e32c:	2b80      	cmp	r3, #128	; 0x80
 800e32e:	d107      	bne.n	800e340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f91a 	bl	800e574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e34a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e34e:	d10e      	bne.n	800e36e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e35a:	2b80      	cmp	r3, #128	; 0x80
 800e35c:	d107      	bne.n	800e36e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f90d 	bl	800e588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e378:	2b40      	cmp	r3, #64	; 0x40
 800e37a:	d10e      	bne.n	800e39a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b40      	cmp	r3, #64	; 0x40
 800e388:	d107      	bne.n	800e39a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 f838 	bl	800e40a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	f003 0320 	and.w	r3, r3, #32
 800e3a4:	2b20      	cmp	r3, #32
 800e3a6:	d10e      	bne.n	800e3c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	f003 0320 	and.w	r3, r3, #32
 800e3b2:	2b20      	cmp	r3, #32
 800e3b4:	d107      	bne.n	800e3c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f06f 0220 	mvn.w	r2, #32
 800e3be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 f8cd 	bl	800e560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3c6:	bf00      	nop
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e3d6:	bf00      	nop
 800e3d8:	370c      	adds	r7, #12
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr

0800e3e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b083      	sub	sp, #12
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e3ea:	bf00      	nop
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e3f6:	b480      	push	{r7}
 800e3f8:	b083      	sub	sp, #12
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e3fe:	bf00      	nop
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr

0800e40a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e412:	bf00      	nop
 800e414:	370c      	adds	r7, #12
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
	...

0800e420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	4a40      	ldr	r2, [pc, #256]	; (800e534 <TIM_Base_SetConfig+0x114>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d013      	beq.n	800e460 <TIM_Base_SetConfig+0x40>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e43e:	d00f      	beq.n	800e460 <TIM_Base_SetConfig+0x40>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4a3d      	ldr	r2, [pc, #244]	; (800e538 <TIM_Base_SetConfig+0x118>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d00b      	beq.n	800e460 <TIM_Base_SetConfig+0x40>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a3c      	ldr	r2, [pc, #240]	; (800e53c <TIM_Base_SetConfig+0x11c>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d007      	beq.n	800e460 <TIM_Base_SetConfig+0x40>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	4a3b      	ldr	r2, [pc, #236]	; (800e540 <TIM_Base_SetConfig+0x120>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d003      	beq.n	800e460 <TIM_Base_SetConfig+0x40>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	4a3a      	ldr	r2, [pc, #232]	; (800e544 <TIM_Base_SetConfig+0x124>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d108      	bne.n	800e472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	4313      	orrs	r3, r2
 800e470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4a2f      	ldr	r2, [pc, #188]	; (800e534 <TIM_Base_SetConfig+0x114>)
 800e476:	4293      	cmp	r3, r2
 800e478:	d02b      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e480:	d027      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	4a2c      	ldr	r2, [pc, #176]	; (800e538 <TIM_Base_SetConfig+0x118>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d023      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a2b      	ldr	r2, [pc, #172]	; (800e53c <TIM_Base_SetConfig+0x11c>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d01f      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4a2a      	ldr	r2, [pc, #168]	; (800e540 <TIM_Base_SetConfig+0x120>)
 800e496:	4293      	cmp	r3, r2
 800e498:	d01b      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4a29      	ldr	r2, [pc, #164]	; (800e544 <TIM_Base_SetConfig+0x124>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d017      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4a28      	ldr	r2, [pc, #160]	; (800e548 <TIM_Base_SetConfig+0x128>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d013      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4a27      	ldr	r2, [pc, #156]	; (800e54c <TIM_Base_SetConfig+0x12c>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d00f      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4a26      	ldr	r2, [pc, #152]	; (800e550 <TIM_Base_SetConfig+0x130>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d00b      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a25      	ldr	r2, [pc, #148]	; (800e554 <TIM_Base_SetConfig+0x134>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d007      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a24      	ldr	r2, [pc, #144]	; (800e558 <TIM_Base_SetConfig+0x138>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d003      	beq.n	800e4d2 <TIM_Base_SetConfig+0xb2>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a23      	ldr	r2, [pc, #140]	; (800e55c <TIM_Base_SetConfig+0x13c>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d108      	bne.n	800e4e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	4313      	orrs	r3, r2
 800e4f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a0a      	ldr	r2, [pc, #40]	; (800e534 <TIM_Base_SetConfig+0x114>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d003      	beq.n	800e518 <TIM_Base_SetConfig+0xf8>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4a0c      	ldr	r2, [pc, #48]	; (800e544 <TIM_Base_SetConfig+0x124>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d103      	bne.n	800e520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	691a      	ldr	r2, [r3, #16]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	615a      	str	r2, [r3, #20]
}
 800e526:	bf00      	nop
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	40010000 	.word	0x40010000
 800e538:	40000400 	.word	0x40000400
 800e53c:	40000800 	.word	0x40000800
 800e540:	40000c00 	.word	0x40000c00
 800e544:	40010400 	.word	0x40010400
 800e548:	40014000 	.word	0x40014000
 800e54c:	40014400 	.word	0x40014400
 800e550:	40014800 	.word	0x40014800
 800e554:	40001800 	.word	0x40001800
 800e558:	40001c00 	.word	0x40001c00
 800e55c:	40002000 	.word	0x40002000

0800e560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e568:	bf00      	nop
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e57c:	bf00      	nop
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e588:	b480      	push	{r7}
 800e58a:	b083      	sub	sp, #12
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e590:	bf00      	nop
 800e592:	370c      	adds	r7, #12
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr

0800e59c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e040      	b.n	800e630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7f7 fb06 	bl	8005bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2224      	movs	r2, #36	; 0x24
 800e5c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f022 0201 	bic.w	r2, r2, #1
 800e5d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f82c 	bl	800e638 <UART_SetConfig>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d101      	bne.n	800e5ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e022      	b.n	800e630 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d002      	beq.n	800e5f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fa84 	bl	800eb00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	685a      	ldr	r2, [r3, #4]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	689a      	ldr	r2, [r3, #8]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f042 0201 	orr.w	r2, r2, #1
 800e626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f000 fb0b 	bl	800ec44 <UART_CheckIdleState>
 800e62e:	4603      	mov	r3, r0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b088      	sub	sp, #32
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e640:	2300      	movs	r3, #0
 800e642:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	689a      	ldr	r2, [r3, #8]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	431a      	orrs	r2, r3
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	695b      	ldr	r3, [r3, #20]
 800e652:	431a      	orrs	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	69db      	ldr	r3, [r3, #28]
 800e658:	4313      	orrs	r3, r2
 800e65a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	4ba6      	ldr	r3, [pc, #664]	; (800e8fc <UART_SetConfig+0x2c4>)
 800e664:	4013      	ands	r3, r2
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	6812      	ldr	r2, [r2, #0]
 800e66a:	6979      	ldr	r1, [r7, #20]
 800e66c:	430b      	orrs	r3, r1
 800e66e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	430a      	orrs	r2, r1
 800e684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a1b      	ldr	r3, [r3, #32]
 800e690:	697a      	ldr	r2, [r7, #20]
 800e692:	4313      	orrs	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	697a      	ldr	r2, [r7, #20]
 800e6a6:	430a      	orrs	r2, r1
 800e6a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a94      	ldr	r2, [pc, #592]	; (800e900 <UART_SetConfig+0x2c8>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d120      	bne.n	800e6f6 <UART_SetConfig+0xbe>
 800e6b4:	4b93      	ldr	r3, [pc, #588]	; (800e904 <UART_SetConfig+0x2cc>)
 800e6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ba:	f003 0303 	and.w	r3, r3, #3
 800e6be:	2b03      	cmp	r3, #3
 800e6c0:	d816      	bhi.n	800e6f0 <UART_SetConfig+0xb8>
 800e6c2:	a201      	add	r2, pc, #4	; (adr r2, 800e6c8 <UART_SetConfig+0x90>)
 800e6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c8:	0800e6d9 	.word	0x0800e6d9
 800e6cc:	0800e6e5 	.word	0x0800e6e5
 800e6d0:	0800e6df 	.word	0x0800e6df
 800e6d4:	0800e6eb 	.word	0x0800e6eb
 800e6d8:	2301      	movs	r3, #1
 800e6da:	77fb      	strb	r3, [r7, #31]
 800e6dc:	e150      	b.n	800e980 <UART_SetConfig+0x348>
 800e6de:	2302      	movs	r3, #2
 800e6e0:	77fb      	strb	r3, [r7, #31]
 800e6e2:	e14d      	b.n	800e980 <UART_SetConfig+0x348>
 800e6e4:	2304      	movs	r3, #4
 800e6e6:	77fb      	strb	r3, [r7, #31]
 800e6e8:	e14a      	b.n	800e980 <UART_SetConfig+0x348>
 800e6ea:	2308      	movs	r3, #8
 800e6ec:	77fb      	strb	r3, [r7, #31]
 800e6ee:	e147      	b.n	800e980 <UART_SetConfig+0x348>
 800e6f0:	2310      	movs	r3, #16
 800e6f2:	77fb      	strb	r3, [r7, #31]
 800e6f4:	e144      	b.n	800e980 <UART_SetConfig+0x348>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a83      	ldr	r2, [pc, #524]	; (800e908 <UART_SetConfig+0x2d0>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d132      	bne.n	800e766 <UART_SetConfig+0x12e>
 800e700:	4b80      	ldr	r3, [pc, #512]	; (800e904 <UART_SetConfig+0x2cc>)
 800e702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e706:	f003 030c 	and.w	r3, r3, #12
 800e70a:	2b0c      	cmp	r3, #12
 800e70c:	d828      	bhi.n	800e760 <UART_SetConfig+0x128>
 800e70e:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <UART_SetConfig+0xdc>)
 800e710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e714:	0800e749 	.word	0x0800e749
 800e718:	0800e761 	.word	0x0800e761
 800e71c:	0800e761 	.word	0x0800e761
 800e720:	0800e761 	.word	0x0800e761
 800e724:	0800e755 	.word	0x0800e755
 800e728:	0800e761 	.word	0x0800e761
 800e72c:	0800e761 	.word	0x0800e761
 800e730:	0800e761 	.word	0x0800e761
 800e734:	0800e74f 	.word	0x0800e74f
 800e738:	0800e761 	.word	0x0800e761
 800e73c:	0800e761 	.word	0x0800e761
 800e740:	0800e761 	.word	0x0800e761
 800e744:	0800e75b 	.word	0x0800e75b
 800e748:	2300      	movs	r3, #0
 800e74a:	77fb      	strb	r3, [r7, #31]
 800e74c:	e118      	b.n	800e980 <UART_SetConfig+0x348>
 800e74e:	2302      	movs	r3, #2
 800e750:	77fb      	strb	r3, [r7, #31]
 800e752:	e115      	b.n	800e980 <UART_SetConfig+0x348>
 800e754:	2304      	movs	r3, #4
 800e756:	77fb      	strb	r3, [r7, #31]
 800e758:	e112      	b.n	800e980 <UART_SetConfig+0x348>
 800e75a:	2308      	movs	r3, #8
 800e75c:	77fb      	strb	r3, [r7, #31]
 800e75e:	e10f      	b.n	800e980 <UART_SetConfig+0x348>
 800e760:	2310      	movs	r3, #16
 800e762:	77fb      	strb	r3, [r7, #31]
 800e764:	e10c      	b.n	800e980 <UART_SetConfig+0x348>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a68      	ldr	r2, [pc, #416]	; (800e90c <UART_SetConfig+0x2d4>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d120      	bne.n	800e7b2 <UART_SetConfig+0x17a>
 800e770:	4b64      	ldr	r3, [pc, #400]	; (800e904 <UART_SetConfig+0x2cc>)
 800e772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e776:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e77a:	2b30      	cmp	r3, #48	; 0x30
 800e77c:	d013      	beq.n	800e7a6 <UART_SetConfig+0x16e>
 800e77e:	2b30      	cmp	r3, #48	; 0x30
 800e780:	d814      	bhi.n	800e7ac <UART_SetConfig+0x174>
 800e782:	2b20      	cmp	r3, #32
 800e784:	d009      	beq.n	800e79a <UART_SetConfig+0x162>
 800e786:	2b20      	cmp	r3, #32
 800e788:	d810      	bhi.n	800e7ac <UART_SetConfig+0x174>
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <UART_SetConfig+0x15c>
 800e78e:	2b10      	cmp	r3, #16
 800e790:	d006      	beq.n	800e7a0 <UART_SetConfig+0x168>
 800e792:	e00b      	b.n	800e7ac <UART_SetConfig+0x174>
 800e794:	2300      	movs	r3, #0
 800e796:	77fb      	strb	r3, [r7, #31]
 800e798:	e0f2      	b.n	800e980 <UART_SetConfig+0x348>
 800e79a:	2302      	movs	r3, #2
 800e79c:	77fb      	strb	r3, [r7, #31]
 800e79e:	e0ef      	b.n	800e980 <UART_SetConfig+0x348>
 800e7a0:	2304      	movs	r3, #4
 800e7a2:	77fb      	strb	r3, [r7, #31]
 800e7a4:	e0ec      	b.n	800e980 <UART_SetConfig+0x348>
 800e7a6:	2308      	movs	r3, #8
 800e7a8:	77fb      	strb	r3, [r7, #31]
 800e7aa:	e0e9      	b.n	800e980 <UART_SetConfig+0x348>
 800e7ac:	2310      	movs	r3, #16
 800e7ae:	77fb      	strb	r3, [r7, #31]
 800e7b0:	e0e6      	b.n	800e980 <UART_SetConfig+0x348>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a56      	ldr	r2, [pc, #344]	; (800e910 <UART_SetConfig+0x2d8>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d120      	bne.n	800e7fe <UART_SetConfig+0x1c6>
 800e7bc:	4b51      	ldr	r3, [pc, #324]	; (800e904 <UART_SetConfig+0x2cc>)
 800e7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7c6:	2bc0      	cmp	r3, #192	; 0xc0
 800e7c8:	d013      	beq.n	800e7f2 <UART_SetConfig+0x1ba>
 800e7ca:	2bc0      	cmp	r3, #192	; 0xc0
 800e7cc:	d814      	bhi.n	800e7f8 <UART_SetConfig+0x1c0>
 800e7ce:	2b80      	cmp	r3, #128	; 0x80
 800e7d0:	d009      	beq.n	800e7e6 <UART_SetConfig+0x1ae>
 800e7d2:	2b80      	cmp	r3, #128	; 0x80
 800e7d4:	d810      	bhi.n	800e7f8 <UART_SetConfig+0x1c0>
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d002      	beq.n	800e7e0 <UART_SetConfig+0x1a8>
 800e7da:	2b40      	cmp	r3, #64	; 0x40
 800e7dc:	d006      	beq.n	800e7ec <UART_SetConfig+0x1b4>
 800e7de:	e00b      	b.n	800e7f8 <UART_SetConfig+0x1c0>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	77fb      	strb	r3, [r7, #31]
 800e7e4:	e0cc      	b.n	800e980 <UART_SetConfig+0x348>
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	77fb      	strb	r3, [r7, #31]
 800e7ea:	e0c9      	b.n	800e980 <UART_SetConfig+0x348>
 800e7ec:	2304      	movs	r3, #4
 800e7ee:	77fb      	strb	r3, [r7, #31]
 800e7f0:	e0c6      	b.n	800e980 <UART_SetConfig+0x348>
 800e7f2:	2308      	movs	r3, #8
 800e7f4:	77fb      	strb	r3, [r7, #31]
 800e7f6:	e0c3      	b.n	800e980 <UART_SetConfig+0x348>
 800e7f8:	2310      	movs	r3, #16
 800e7fa:	77fb      	strb	r3, [r7, #31]
 800e7fc:	e0c0      	b.n	800e980 <UART_SetConfig+0x348>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a44      	ldr	r2, [pc, #272]	; (800e914 <UART_SetConfig+0x2dc>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d125      	bne.n	800e854 <UART_SetConfig+0x21c>
 800e808:	4b3e      	ldr	r3, [pc, #248]	; (800e904 <UART_SetConfig+0x2cc>)
 800e80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e80e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e816:	d017      	beq.n	800e848 <UART_SetConfig+0x210>
 800e818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e81c:	d817      	bhi.n	800e84e <UART_SetConfig+0x216>
 800e81e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e822:	d00b      	beq.n	800e83c <UART_SetConfig+0x204>
 800e824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e828:	d811      	bhi.n	800e84e <UART_SetConfig+0x216>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <UART_SetConfig+0x1fe>
 800e82e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e832:	d006      	beq.n	800e842 <UART_SetConfig+0x20a>
 800e834:	e00b      	b.n	800e84e <UART_SetConfig+0x216>
 800e836:	2300      	movs	r3, #0
 800e838:	77fb      	strb	r3, [r7, #31]
 800e83a:	e0a1      	b.n	800e980 <UART_SetConfig+0x348>
 800e83c:	2302      	movs	r3, #2
 800e83e:	77fb      	strb	r3, [r7, #31]
 800e840:	e09e      	b.n	800e980 <UART_SetConfig+0x348>
 800e842:	2304      	movs	r3, #4
 800e844:	77fb      	strb	r3, [r7, #31]
 800e846:	e09b      	b.n	800e980 <UART_SetConfig+0x348>
 800e848:	2308      	movs	r3, #8
 800e84a:	77fb      	strb	r3, [r7, #31]
 800e84c:	e098      	b.n	800e980 <UART_SetConfig+0x348>
 800e84e:	2310      	movs	r3, #16
 800e850:	77fb      	strb	r3, [r7, #31]
 800e852:	e095      	b.n	800e980 <UART_SetConfig+0x348>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a2f      	ldr	r2, [pc, #188]	; (800e918 <UART_SetConfig+0x2e0>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d125      	bne.n	800e8aa <UART_SetConfig+0x272>
 800e85e:	4b29      	ldr	r3, [pc, #164]	; (800e904 <UART_SetConfig+0x2cc>)
 800e860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e86c:	d017      	beq.n	800e89e <UART_SetConfig+0x266>
 800e86e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e872:	d817      	bhi.n	800e8a4 <UART_SetConfig+0x26c>
 800e874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e878:	d00b      	beq.n	800e892 <UART_SetConfig+0x25a>
 800e87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e87e:	d811      	bhi.n	800e8a4 <UART_SetConfig+0x26c>
 800e880:	2b00      	cmp	r3, #0
 800e882:	d003      	beq.n	800e88c <UART_SetConfig+0x254>
 800e884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e888:	d006      	beq.n	800e898 <UART_SetConfig+0x260>
 800e88a:	e00b      	b.n	800e8a4 <UART_SetConfig+0x26c>
 800e88c:	2301      	movs	r3, #1
 800e88e:	77fb      	strb	r3, [r7, #31]
 800e890:	e076      	b.n	800e980 <UART_SetConfig+0x348>
 800e892:	2302      	movs	r3, #2
 800e894:	77fb      	strb	r3, [r7, #31]
 800e896:	e073      	b.n	800e980 <UART_SetConfig+0x348>
 800e898:	2304      	movs	r3, #4
 800e89a:	77fb      	strb	r3, [r7, #31]
 800e89c:	e070      	b.n	800e980 <UART_SetConfig+0x348>
 800e89e:	2308      	movs	r3, #8
 800e8a0:	77fb      	strb	r3, [r7, #31]
 800e8a2:	e06d      	b.n	800e980 <UART_SetConfig+0x348>
 800e8a4:	2310      	movs	r3, #16
 800e8a6:	77fb      	strb	r3, [r7, #31]
 800e8a8:	e06a      	b.n	800e980 <UART_SetConfig+0x348>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a1b      	ldr	r2, [pc, #108]	; (800e91c <UART_SetConfig+0x2e4>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d138      	bne.n	800e926 <UART_SetConfig+0x2ee>
 800e8b4:	4b13      	ldr	r3, [pc, #76]	; (800e904 <UART_SetConfig+0x2cc>)
 800e8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e8be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8c2:	d017      	beq.n	800e8f4 <UART_SetConfig+0x2bc>
 800e8c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e8c8:	d82a      	bhi.n	800e920 <UART_SetConfig+0x2e8>
 800e8ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8ce:	d00b      	beq.n	800e8e8 <UART_SetConfig+0x2b0>
 800e8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8d4:	d824      	bhi.n	800e920 <UART_SetConfig+0x2e8>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d003      	beq.n	800e8e2 <UART_SetConfig+0x2aa>
 800e8da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8de:	d006      	beq.n	800e8ee <UART_SetConfig+0x2b6>
 800e8e0:	e01e      	b.n	800e920 <UART_SetConfig+0x2e8>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	77fb      	strb	r3, [r7, #31]
 800e8e6:	e04b      	b.n	800e980 <UART_SetConfig+0x348>
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	77fb      	strb	r3, [r7, #31]
 800e8ec:	e048      	b.n	800e980 <UART_SetConfig+0x348>
 800e8ee:	2304      	movs	r3, #4
 800e8f0:	77fb      	strb	r3, [r7, #31]
 800e8f2:	e045      	b.n	800e980 <UART_SetConfig+0x348>
 800e8f4:	2308      	movs	r3, #8
 800e8f6:	77fb      	strb	r3, [r7, #31]
 800e8f8:	e042      	b.n	800e980 <UART_SetConfig+0x348>
 800e8fa:	bf00      	nop
 800e8fc:	efff69f3 	.word	0xefff69f3
 800e900:	40011000 	.word	0x40011000
 800e904:	40023800 	.word	0x40023800
 800e908:	40004400 	.word	0x40004400
 800e90c:	40004800 	.word	0x40004800
 800e910:	40004c00 	.word	0x40004c00
 800e914:	40005000 	.word	0x40005000
 800e918:	40011400 	.word	0x40011400
 800e91c:	40007800 	.word	0x40007800
 800e920:	2310      	movs	r3, #16
 800e922:	77fb      	strb	r3, [r7, #31]
 800e924:	e02c      	b.n	800e980 <UART_SetConfig+0x348>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4a72      	ldr	r2, [pc, #456]	; (800eaf4 <UART_SetConfig+0x4bc>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d125      	bne.n	800e97c <UART_SetConfig+0x344>
 800e930:	4b71      	ldr	r3, [pc, #452]	; (800eaf8 <UART_SetConfig+0x4c0>)
 800e932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e936:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e93a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e93e:	d017      	beq.n	800e970 <UART_SetConfig+0x338>
 800e940:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e944:	d817      	bhi.n	800e976 <UART_SetConfig+0x33e>
 800e946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e94a:	d00b      	beq.n	800e964 <UART_SetConfig+0x32c>
 800e94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e950:	d811      	bhi.n	800e976 <UART_SetConfig+0x33e>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d003      	beq.n	800e95e <UART_SetConfig+0x326>
 800e956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e95a:	d006      	beq.n	800e96a <UART_SetConfig+0x332>
 800e95c:	e00b      	b.n	800e976 <UART_SetConfig+0x33e>
 800e95e:	2300      	movs	r3, #0
 800e960:	77fb      	strb	r3, [r7, #31]
 800e962:	e00d      	b.n	800e980 <UART_SetConfig+0x348>
 800e964:	2302      	movs	r3, #2
 800e966:	77fb      	strb	r3, [r7, #31]
 800e968:	e00a      	b.n	800e980 <UART_SetConfig+0x348>
 800e96a:	2304      	movs	r3, #4
 800e96c:	77fb      	strb	r3, [r7, #31]
 800e96e:	e007      	b.n	800e980 <UART_SetConfig+0x348>
 800e970:	2308      	movs	r3, #8
 800e972:	77fb      	strb	r3, [r7, #31]
 800e974:	e004      	b.n	800e980 <UART_SetConfig+0x348>
 800e976:	2310      	movs	r3, #16
 800e978:	77fb      	strb	r3, [r7, #31]
 800e97a:	e001      	b.n	800e980 <UART_SetConfig+0x348>
 800e97c:	2310      	movs	r3, #16
 800e97e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	69db      	ldr	r3, [r3, #28]
 800e984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e988:	d15b      	bne.n	800ea42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e98a:	7ffb      	ldrb	r3, [r7, #31]
 800e98c:	2b08      	cmp	r3, #8
 800e98e:	d828      	bhi.n	800e9e2 <UART_SetConfig+0x3aa>
 800e990:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <UART_SetConfig+0x360>)
 800e992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e996:	bf00      	nop
 800e998:	0800e9bd 	.word	0x0800e9bd
 800e99c:	0800e9c5 	.word	0x0800e9c5
 800e9a0:	0800e9cd 	.word	0x0800e9cd
 800e9a4:	0800e9e3 	.word	0x0800e9e3
 800e9a8:	0800e9d3 	.word	0x0800e9d3
 800e9ac:	0800e9e3 	.word	0x0800e9e3
 800e9b0:	0800e9e3 	.word	0x0800e9e3
 800e9b4:	0800e9e3 	.word	0x0800e9e3
 800e9b8:	0800e9db 	.word	0x0800e9db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9bc:	f7fe fe8c 	bl	800d6d8 <HAL_RCC_GetPCLK1Freq>
 800e9c0:	61b8      	str	r0, [r7, #24]
        break;
 800e9c2:	e013      	b.n	800e9ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9c4:	f7fe fe9c 	bl	800d700 <HAL_RCC_GetPCLK2Freq>
 800e9c8:	61b8      	str	r0, [r7, #24]
        break;
 800e9ca:	e00f      	b.n	800e9ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9cc:	4b4b      	ldr	r3, [pc, #300]	; (800eafc <UART_SetConfig+0x4c4>)
 800e9ce:	61bb      	str	r3, [r7, #24]
        break;
 800e9d0:	e00c      	b.n	800e9ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9d2:	f7fe fd6f 	bl	800d4b4 <HAL_RCC_GetSysClockFreq>
 800e9d6:	61b8      	str	r0, [r7, #24]
        break;
 800e9d8:	e008      	b.n	800e9ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9de:	61bb      	str	r3, [r7, #24]
        break;
 800e9e0:	e004      	b.n	800e9ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	77bb      	strb	r3, [r7, #30]
        break;
 800e9ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d074      	beq.n	800eadc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	005a      	lsls	r2, r3, #1
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	085b      	lsrs	r3, r3, #1
 800e9fc:	441a      	add	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	2b0f      	cmp	r3, #15
 800ea0c:	d916      	bls.n	800ea3c <UART_SetConfig+0x404>
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea14:	d212      	bcs.n	800ea3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	f023 030f 	bic.w	r3, r3, #15
 800ea1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	085b      	lsrs	r3, r3, #1
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	f003 0307 	and.w	r3, r3, #7
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	89fb      	ldrh	r3, [r7, #14]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	89fa      	ldrh	r2, [r7, #14]
 800ea38:	60da      	str	r2, [r3, #12]
 800ea3a:	e04f      	b.n	800eadc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	77bb      	strb	r3, [r7, #30]
 800ea40:	e04c      	b.n	800eadc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea42:	7ffb      	ldrb	r3, [r7, #31]
 800ea44:	2b08      	cmp	r3, #8
 800ea46:	d828      	bhi.n	800ea9a <UART_SetConfig+0x462>
 800ea48:	a201      	add	r2, pc, #4	; (adr r2, 800ea50 <UART_SetConfig+0x418>)
 800ea4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4e:	bf00      	nop
 800ea50:	0800ea75 	.word	0x0800ea75
 800ea54:	0800ea7d 	.word	0x0800ea7d
 800ea58:	0800ea85 	.word	0x0800ea85
 800ea5c:	0800ea9b 	.word	0x0800ea9b
 800ea60:	0800ea8b 	.word	0x0800ea8b
 800ea64:	0800ea9b 	.word	0x0800ea9b
 800ea68:	0800ea9b 	.word	0x0800ea9b
 800ea6c:	0800ea9b 	.word	0x0800ea9b
 800ea70:	0800ea93 	.word	0x0800ea93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea74:	f7fe fe30 	bl	800d6d8 <HAL_RCC_GetPCLK1Freq>
 800ea78:	61b8      	str	r0, [r7, #24]
        break;
 800ea7a:	e013      	b.n	800eaa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea7c:	f7fe fe40 	bl	800d700 <HAL_RCC_GetPCLK2Freq>
 800ea80:	61b8      	str	r0, [r7, #24]
        break;
 800ea82:	e00f      	b.n	800eaa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ea84:	4b1d      	ldr	r3, [pc, #116]	; (800eafc <UART_SetConfig+0x4c4>)
 800ea86:	61bb      	str	r3, [r7, #24]
        break;
 800ea88:	e00c      	b.n	800eaa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea8a:	f7fe fd13 	bl	800d4b4 <HAL_RCC_GetSysClockFreq>
 800ea8e:	61b8      	str	r0, [r7, #24]
        break;
 800ea90:	e008      	b.n	800eaa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea96:	61bb      	str	r3, [r7, #24]
        break;
 800ea98:	e004      	b.n	800eaa4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	77bb      	strb	r3, [r7, #30]
        break;
 800eaa2:	bf00      	nop
    }

    if (pclk != 0U)
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d018      	beq.n	800eadc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	085a      	lsrs	r2, r3, #1
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	441a      	add	r2, r3
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eabc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	2b0f      	cmp	r3, #15
 800eac2:	d909      	bls.n	800ead8 <UART_SetConfig+0x4a0>
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaca:	d205      	bcs.n	800ead8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	b29a      	uxth	r2, r3
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	60da      	str	r2, [r3, #12]
 800ead6:	e001      	b.n	800eadc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ead8:	2301      	movs	r3, #1
 800eada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2200      	movs	r2, #0
 800eae6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800eae8:	7fbb      	ldrb	r3, [r7, #30]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3720      	adds	r7, #32
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	40007c00 	.word	0x40007c00
 800eaf8:	40023800 	.word	0x40023800
 800eafc:	00f42400 	.word	0x00f42400

0800eb00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0c:	f003 0301 	and.w	r3, r3, #1
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00a      	beq.n	800eb2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	430a      	orrs	r2, r1
 800eb28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2e:	f003 0302 	and.w	r3, r3, #2
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00a      	beq.n	800eb4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	430a      	orrs	r2, r1
 800eb4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d00a      	beq.n	800eb6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	430a      	orrs	r2, r1
 800eb6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb72:	f003 0308 	and.w	r3, r3, #8
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00a      	beq.n	800eb90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	430a      	orrs	r2, r1
 800eb8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb94:	f003 0310 	and.w	r3, r3, #16
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00a      	beq.n	800ebb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	430a      	orrs	r2, r1
 800ebb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb6:	f003 0320 	and.w	r3, r3, #32
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00a      	beq.n	800ebd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	430a      	orrs	r2, r1
 800ebd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d01a      	beq.n	800ec16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	430a      	orrs	r2, r1
 800ebf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebfe:	d10a      	bne.n	800ec16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	430a      	orrs	r2, r1
 800ec14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00a      	beq.n	800ec38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	430a      	orrs	r2, r1
 800ec36:	605a      	str	r2, [r3, #4]
  }
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b086      	sub	sp, #24
 800ec48:	af02      	add	r7, sp, #8
 800ec4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ec54:	f7fc fcba 	bl	800b5cc <HAL_GetTick>
 800ec58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f003 0308 	and.w	r3, r3, #8
 800ec64:	2b08      	cmp	r3, #8
 800ec66:	d10e      	bne.n	800ec86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 f831 	bl	800ecde <UART_WaitOnFlagUntilTimeout>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d001      	beq.n	800ec86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec82:	2303      	movs	r3, #3
 800ec84:	e027      	b.n	800ecd6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 0304 	and.w	r3, r3, #4
 800ec90:	2b04      	cmp	r3, #4
 800ec92:	d10e      	bne.n	800ecb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f81b 	bl	800ecde <UART_WaitOnFlagUntilTimeout>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecae:	2303      	movs	r3, #3
 800ecb0:	e011      	b.n	800ecd6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2220      	movs	r2, #32
 800ecb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2220      	movs	r2, #32
 800ecbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b09c      	sub	sp, #112	; 0x70
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	60f8      	str	r0, [r7, #12]
 800ece6:	60b9      	str	r1, [r7, #8]
 800ece8:	603b      	str	r3, [r7, #0]
 800ecea:	4613      	mov	r3, r2
 800ecec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecee:	e0a7      	b.n	800ee40 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ecf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ecf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecf6:	f000 80a3 	beq.w	800ee40 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ecfa:	f7fc fc67 	bl	800b5cc <HAL_GetTick>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d302      	bcc.n	800ed10 <UART_WaitOnFlagUntilTimeout+0x32>
 800ed0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d13f      	bne.n	800ed90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed18:	e853 3f00 	ldrex	r3, [r3]
 800ed1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ed24:	667b      	str	r3, [r7, #100]	; 0x64
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed36:	e841 2300 	strex	r3, r2, [r1]
 800ed3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ed3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1e6      	bne.n	800ed10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	3308      	adds	r3, #8
 800ed48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed4c:	e853 3f00 	ldrex	r3, [r3]
 800ed50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ed52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed54:	f023 0301 	bic.w	r3, r3, #1
 800ed58:	663b      	str	r3, [r7, #96]	; 0x60
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3308      	adds	r3, #8
 800ed60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ed62:	64ba      	str	r2, [r7, #72]	; 0x48
 800ed64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed6a:	e841 2300 	strex	r3, r2, [r1]
 800ed6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ed70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d1e5      	bne.n	800ed42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2220      	movs	r2, #32
 800ed7a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	e068      	b.n	800ee62 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f003 0304 	and.w	r3, r3, #4
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d050      	beq.n	800ee40 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eda8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edac:	d148      	bne.n	800ee40 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edb6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800edcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	461a      	mov	r2, r3
 800edd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edd6:	637b      	str	r3, [r7, #52]	; 0x34
 800edd8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e6      	bne.n	800edb8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	3308      	adds	r3, #8
 800edf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	e853 3f00 	ldrex	r3, [r3]
 800edf8:	613b      	str	r3, [r7, #16]
   return(result);
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	f023 0301 	bic.w	r3, r3, #1
 800ee00:	66bb      	str	r3, [r7, #104]	; 0x68
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ee0a:	623a      	str	r2, [r7, #32]
 800ee0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0e:	69f9      	ldr	r1, [r7, #28]
 800ee10:	6a3a      	ldr	r2, [r7, #32]
 800ee12:	e841 2300 	strex	r3, r2, [r1]
 800ee16:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1e5      	bne.n	800edea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2220      	movs	r2, #32
 800ee22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2220      	movs	r2, #32
 800ee28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2220      	movs	r2, #32
 800ee30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ee3c:	2303      	movs	r3, #3
 800ee3e:	e010      	b.n	800ee62 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	69da      	ldr	r2, [r3, #28]
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	4013      	ands	r3, r2
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	bf0c      	ite	eq
 800ee50:	2301      	moveq	r3, #1
 800ee52:	2300      	movne	r3, #0
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	461a      	mov	r2, r3
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	f43f af48 	beq.w	800ecf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3770      	adds	r7, #112	; 0x70
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee6c:	b084      	sub	sp, #16
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	f107 001c 	add.w	r0, r7, #28
 800ee7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d120      	bne.n	800eec6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	68da      	ldr	r2, [r3, #12]
 800ee94:	4b20      	ldr	r3, [pc, #128]	; (800ef18 <USB_CoreInit+0xac>)
 800ee96:	4013      	ands	r3, r2
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800eea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d105      	bne.n	800eeba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 fa96 	bl	800f3ec <USB_CoreReset>
 800eec0:	4603      	mov	r3, r0
 800eec2:	73fb      	strb	r3, [r7, #15]
 800eec4:	e010      	b.n	800eee8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 fa8a 	bl	800f3ec <USB_CoreReset>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d10b      	bne.n	800ef06 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	f043 0206 	orr.w	r2, r3, #6
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	f043 0220 	orr.w	r2, r3, #32
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef12:	b004      	add	sp, #16
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	ffbdffbf 	.word	0xffbdffbf

0800ef1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	f023 0201 	bic.w	r2, r3, #1
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	460b      	mov	r3, r1
 800ef48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ef5a:	78fb      	ldrb	r3, [r7, #3]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d115      	bne.n	800ef8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ef6c:	2001      	movs	r0, #1
 800ef6e:	f7fc fb39 	bl	800b5e4 <HAL_Delay>
      ms++;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3301      	adds	r3, #1
 800ef76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 fa29 	bl	800f3d0 <USB_GetMode>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d01e      	beq.n	800efc2 <USB_SetCurrentMode+0x84>
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b31      	cmp	r3, #49	; 0x31
 800ef88:	d9f0      	bls.n	800ef6c <USB_SetCurrentMode+0x2e>
 800ef8a:	e01a      	b.n	800efc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ef8c:	78fb      	ldrb	r3, [r7, #3]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d115      	bne.n	800efbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ef9e:	2001      	movs	r0, #1
 800efa0:	f7fc fb20 	bl	800b5e4 <HAL_Delay>
      ms++;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	3301      	adds	r3, #1
 800efa8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fa10 	bl	800f3d0 <USB_GetMode>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d005      	beq.n	800efc2 <USB_SetCurrentMode+0x84>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2b31      	cmp	r3, #49	; 0x31
 800efba:	d9f0      	bls.n	800ef9e <USB_SetCurrentMode+0x60>
 800efbc:	e001      	b.n	800efc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e005      	b.n	800efce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	2b32      	cmp	r3, #50	; 0x32
 800efc6:	d101      	bne.n	800efcc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	e000      	b.n	800efce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
	...

0800efd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800efd8:	b084      	sub	sp, #16
 800efda:	b580      	push	{r7, lr}
 800efdc:	b086      	sub	sp, #24
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800efe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eff2:	2300      	movs	r3, #0
 800eff4:	613b      	str	r3, [r7, #16]
 800eff6:	e009      	b.n	800f00c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	3340      	adds	r3, #64	; 0x40
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	2200      	movs	r2, #0
 800f004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	3301      	adds	r3, #1
 800f00a:	613b      	str	r3, [r7, #16]
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	2b0e      	cmp	r3, #14
 800f010:	d9f2      	bls.n	800eff8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f014:	2b00      	cmp	r3, #0
 800f016:	d11c      	bne.n	800f052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f026:	f043 0302 	orr.w	r3, r3, #2
 800f02a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	601a      	str	r2, [r3, #0]
 800f050:	e005      	b.n	800f05e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f064:	461a      	mov	r2, r3
 800f066:	2300      	movs	r3, #0
 800f068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f070:	4619      	mov	r1, r3
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f078:	461a      	mov	r2, r3
 800f07a:	680b      	ldr	r3, [r1, #0]
 800f07c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f080:	2b01      	cmp	r3, #1
 800f082:	d10c      	bne.n	800f09e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	2b00      	cmp	r3, #0
 800f088:	d104      	bne.n	800f094 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f08a:	2100      	movs	r1, #0
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 f965 	bl	800f35c <USB_SetDevSpeed>
 800f092:	e008      	b.n	800f0a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f094:	2101      	movs	r1, #1
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f960 	bl	800f35c <USB_SetDevSpeed>
 800f09c:	e003      	b.n	800f0a6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f09e:	2103      	movs	r1, #3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 f95b 	bl	800f35c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f0a6:	2110      	movs	r1, #16
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 f8f3 	bl	800f294 <USB_FlushTxFifo>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f91f 	bl	800f2fc <USB_FlushRxFifo>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0da:	461a      	mov	r2, r3
 800f0dc:	2300      	movs	r3, #0
 800f0de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	613b      	str	r3, [r7, #16]
 800f0f0:	e043      	b.n	800f17a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	015a      	lsls	r2, r3, #5
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f108:	d118      	bne.n	800f13c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10a      	bne.n	800f126 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	015a      	lsls	r2, r3, #5
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	4413      	add	r3, r2
 800f118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f11c:	461a      	mov	r2, r3
 800f11e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f122:	6013      	str	r3, [r2, #0]
 800f124:	e013      	b.n	800f14e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	015a      	lsls	r2, r3, #5
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	4413      	add	r3, r2
 800f12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f132:	461a      	mov	r2, r3
 800f134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f138:	6013      	str	r3, [r2, #0]
 800f13a:	e008      	b.n	800f14e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	015a      	lsls	r2, r3, #5
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4413      	add	r3, r2
 800f144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f148:	461a      	mov	r2, r3
 800f14a:	2300      	movs	r3, #0
 800f14c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	015a      	lsls	r2, r3, #5
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	4413      	add	r3, r2
 800f156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f15a:	461a      	mov	r2, r3
 800f15c:	2300      	movs	r3, #0
 800f15e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	015a      	lsls	r2, r3, #5
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	4413      	add	r3, r2
 800f168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f16c:	461a      	mov	r2, r3
 800f16e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	3301      	adds	r3, #1
 800f178:	613b      	str	r3, [r7, #16]
 800f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17c:	693a      	ldr	r2, [r7, #16]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d3b7      	bcc.n	800f0f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f182:	2300      	movs	r3, #0
 800f184:	613b      	str	r3, [r7, #16]
 800f186:	e043      	b.n	800f210 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	015a      	lsls	r2, r3, #5
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	4413      	add	r3, r2
 800f190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f19a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f19e:	d118      	bne.n	800f1d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d10a      	bne.n	800f1bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	015a      	lsls	r2, r3, #5
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f1b8:	6013      	str	r3, [r2, #0]
 800f1ba:	e013      	b.n	800f1e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	015a      	lsls	r2, r3, #5
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1c8:	461a      	mov	r2, r3
 800f1ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	e008      	b.n	800f1e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	015a      	lsls	r2, r3, #5
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	4413      	add	r3, r2
 800f1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1de:	461a      	mov	r2, r3
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	015a      	lsls	r2, r3, #5
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	015a      	lsls	r2, r3, #5
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f202:	461a      	mov	r2, r3
 800f204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	3301      	adds	r3, #1
 800f20e:	613b      	str	r3, [r7, #16]
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	429a      	cmp	r2, r3
 800f216:	d3b7      	bcc.n	800f188 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f21e:	691b      	ldr	r3, [r3, #16]
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f22a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d105      	bne.n	800f24c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	f043 0210 	orr.w	r2, r3, #16
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	699a      	ldr	r2, [r3, #24]
 800f250:	4b0e      	ldr	r3, [pc, #56]	; (800f28c <USB_DevInit+0x2b4>)
 800f252:	4313      	orrs	r3, r2
 800f254:	687a      	ldr	r2, [r7, #4]
 800f256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d005      	beq.n	800f26a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	f043 0208 	orr.w	r2, r3, #8
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d105      	bne.n	800f27c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	699a      	ldr	r2, [r3, #24]
 800f274:	4b06      	ldr	r3, [pc, #24]	; (800f290 <USB_DevInit+0x2b8>)
 800f276:	4313      	orrs	r3, r2
 800f278:	687a      	ldr	r2, [r7, #4]
 800f27a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f27c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3718      	adds	r7, #24
 800f282:	46bd      	mov	sp, r7
 800f284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f288:	b004      	add	sp, #16
 800f28a:	4770      	bx	lr
 800f28c:	803c3800 	.word	0x803c3800
 800f290:	40000004 	.word	0x40000004

0800f294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	4a13      	ldr	r2, [pc, #76]	; (800f2f8 <USB_FlushTxFifo+0x64>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d901      	bls.n	800f2b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	e01b      	b.n	800f2ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	daf2      	bge.n	800f2a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	019b      	lsls	r3, r3, #6
 800f2c4:	f043 0220 	orr.w	r2, r3, #32
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	4a08      	ldr	r2, [pc, #32]	; (800f2f8 <USB_FlushTxFifo+0x64>)
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d901      	bls.n	800f2de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f2da:	2303      	movs	r3, #3
 800f2dc:	e006      	b.n	800f2ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	f003 0320 	and.w	r3, r3, #32
 800f2e6:	2b20      	cmp	r3, #32
 800f2e8:	d0f0      	beq.n	800f2cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f2ea:	2300      	movs	r3, #0
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr
 800f2f8:	00030d40 	.word	0x00030d40

0800f2fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f304:	2300      	movs	r3, #0
 800f306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	3301      	adds	r3, #1
 800f30c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	4a11      	ldr	r2, [pc, #68]	; (800f358 <USB_FlushRxFifo+0x5c>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d901      	bls.n	800f31a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f316:	2303      	movs	r3, #3
 800f318:	e018      	b.n	800f34c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	691b      	ldr	r3, [r3, #16]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	daf2      	bge.n	800f308 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2210      	movs	r2, #16
 800f32a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	3301      	adds	r3, #1
 800f330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	4a08      	ldr	r2, [pc, #32]	; (800f358 <USB_FlushRxFifo+0x5c>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d901      	bls.n	800f33e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f33a:	2303      	movs	r3, #3
 800f33c:	e006      	b.n	800f34c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	f003 0310 	and.w	r3, r3, #16
 800f346:	2b10      	cmp	r3, #16
 800f348:	d0f0      	beq.n	800f32c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f34a:	2300      	movs	r3, #0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3714      	adds	r7, #20
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr
 800f358:	00030d40 	.word	0x00030d40

0800f35c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	460b      	mov	r3, r1
 800f366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	78fb      	ldrb	r3, [r7, #3]
 800f376:	68f9      	ldr	r1, [r7, #12]
 800f378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f37c:	4313      	orrs	r3, r2
 800f37e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr

0800f38e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f38e:	b480      	push	{r7}
 800f390:	b085      	sub	sp, #20
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f3a8:	f023 0303 	bic.w	r3, r3, #3
 800f3ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3bc:	f043 0302 	orr.w	r3, r3, #2
 800f3c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	f003 0301 	and.w	r3, r3, #1
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b085      	sub	sp, #20
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	4a13      	ldr	r2, [pc, #76]	; (800f450 <USB_CoreReset+0x64>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d901      	bls.n	800f40a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f406:	2303      	movs	r3, #3
 800f408:	e01b      	b.n	800f442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	daf2      	bge.n	800f3f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f412:	2300      	movs	r3, #0
 800f414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	f043 0201 	orr.w	r2, r3, #1
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3301      	adds	r3, #1
 800f426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	4a09      	ldr	r2, [pc, #36]	; (800f450 <USB_CoreReset+0x64>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d901      	bls.n	800f434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f430:	2303      	movs	r3, #3
 800f432:	e006      	b.n	800f442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	691b      	ldr	r3, [r3, #16]
 800f438:	f003 0301 	and.w	r3, r3, #1
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d0f0      	beq.n	800f422 <USB_CoreReset+0x36>

  return HAL_OK;
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3714      	adds	r7, #20
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	00030d40 	.word	0x00030d40

0800f454 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f454:	b480      	push	{r7}
 800f456:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f458:	bf00      	nop
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
	...

0800f464 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f46a:	f3ef 8305 	mrs	r3, IPSR
 800f46e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f470:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10f      	bne.n	800f496 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f476:	f3ef 8310 	mrs	r3, PRIMASK
 800f47a:	607b      	str	r3, [r7, #4]
  return(result);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d105      	bne.n	800f48e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f482:	f3ef 8311 	mrs	r3, BASEPRI
 800f486:	603b      	str	r3, [r7, #0]
  return(result);
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d007      	beq.n	800f49e <osKernelInitialize+0x3a>
 800f48e:	4b0e      	ldr	r3, [pc, #56]	; (800f4c8 <osKernelInitialize+0x64>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d103      	bne.n	800f49e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f496:	f06f 0305 	mvn.w	r3, #5
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	e00c      	b.n	800f4b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f49e:	4b0a      	ldr	r3, [pc, #40]	; (800f4c8 <osKernelInitialize+0x64>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d105      	bne.n	800f4b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f4a6:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <osKernelInitialize+0x64>)
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	60fb      	str	r3, [r7, #12]
 800f4b0:	e002      	b.n	800f4b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f4b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3714      	adds	r7, #20
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	20001638 	.word	0x20001638

0800f4cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4d2:	f3ef 8305 	mrs	r3, IPSR
 800f4d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f4d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d10f      	bne.n	800f4fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4de:	f3ef 8310 	mrs	r3, PRIMASK
 800f4e2:	607b      	str	r3, [r7, #4]
  return(result);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d105      	bne.n	800f4f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f4ea:	f3ef 8311 	mrs	r3, BASEPRI
 800f4ee:	603b      	str	r3, [r7, #0]
  return(result);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d007      	beq.n	800f506 <osKernelStart+0x3a>
 800f4f6:	4b0f      	ldr	r3, [pc, #60]	; (800f534 <osKernelStart+0x68>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2b02      	cmp	r3, #2
 800f4fc:	d103      	bne.n	800f506 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f4fe:	f06f 0305 	mvn.w	r3, #5
 800f502:	60fb      	str	r3, [r7, #12]
 800f504:	e010      	b.n	800f528 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f506:	4b0b      	ldr	r3, [pc, #44]	; (800f534 <osKernelStart+0x68>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d109      	bne.n	800f522 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f50e:	f7ff ffa1 	bl	800f454 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f512:	4b08      	ldr	r3, [pc, #32]	; (800f534 <osKernelStart+0x68>)
 800f514:	2202      	movs	r2, #2
 800f516:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f518:	f001 fd70 	bl	8010ffc <vTaskStartScheduler>
      stat = osOK;
 800f51c:	2300      	movs	r3, #0
 800f51e:	60fb      	str	r3, [r7, #12]
 800f520:	e002      	b.n	800f528 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f522:	f04f 33ff 	mov.w	r3, #4294967295
 800f526:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f528:	68fb      	ldr	r3, [r7, #12]
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3710      	adds	r7, #16
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}
 800f532:	bf00      	nop
 800f534:	20001638 	.word	0x20001638

0800f538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f538:	b580      	push	{r7, lr}
 800f53a:	b090      	sub	sp, #64	; 0x40
 800f53c:	af04      	add	r7, sp, #16
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f544:	2300      	movs	r3, #0
 800f546:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f548:	f3ef 8305 	mrs	r3, IPSR
 800f54c:	61fb      	str	r3, [r7, #28]
  return(result);
 800f54e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f550:	2b00      	cmp	r3, #0
 800f552:	f040 808f 	bne.w	800f674 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f556:	f3ef 8310 	mrs	r3, PRIMASK
 800f55a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d105      	bne.n	800f56e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f562:	f3ef 8311 	mrs	r3, BASEPRI
 800f566:	617b      	str	r3, [r7, #20]
  return(result);
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d003      	beq.n	800f576 <osThreadNew+0x3e>
 800f56e:	4b44      	ldr	r3, [pc, #272]	; (800f680 <osThreadNew+0x148>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b02      	cmp	r3, #2
 800f574:	d07e      	beq.n	800f674 <osThreadNew+0x13c>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d07b      	beq.n	800f674 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f57c:	2380      	movs	r3, #128	; 0x80
 800f57e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f580:	2318      	movs	r3, #24
 800f582:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f584:	2300      	movs	r3, #0
 800f586:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f588:	f04f 33ff 	mov.w	r3, #4294967295
 800f58c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d045      	beq.n	800f620 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <osThreadNew+0x6a>
        name = attr->name;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d002      	beq.n	800f5b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d008      	beq.n	800f5c8 <osThreadNew+0x90>
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	2b38      	cmp	r3, #56	; 0x38
 800f5ba:	d805      	bhi.n	800f5c8 <osThreadNew+0x90>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d001      	beq.n	800f5cc <osThreadNew+0x94>
        return (NULL);
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	e054      	b.n	800f676 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	695b      	ldr	r3, [r3, #20]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d003      	beq.n	800f5dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	695b      	ldr	r3, [r3, #20]
 800f5d8:	089b      	lsrs	r3, r3, #2
 800f5da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00e      	beq.n	800f602 <osThreadNew+0xca>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	2bbb      	cmp	r3, #187	; 0xbb
 800f5ea:	d90a      	bls.n	800f602 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d006      	beq.n	800f602 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	695b      	ldr	r3, [r3, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d002      	beq.n	800f602 <osThreadNew+0xca>
        mem = 1;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	623b      	str	r3, [r7, #32]
 800f600:	e010      	b.n	800f624 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10c      	bne.n	800f624 <osThreadNew+0xec>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d108      	bne.n	800f624 <osThreadNew+0xec>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d104      	bne.n	800f624 <osThreadNew+0xec>
          mem = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	623b      	str	r3, [r7, #32]
 800f61e:	e001      	b.n	800f624 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	2b01      	cmp	r3, #1
 800f628:	d110      	bne.n	800f64c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f632:	9202      	str	r2, [sp, #8]
 800f634:	9301      	str	r3, [sp, #4]
 800f636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f63e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f001 fae5 	bl	8010c10 <xTaskCreateStatic>
 800f646:	4603      	mov	r3, r0
 800f648:	613b      	str	r3, [r7, #16]
 800f64a:	e013      	b.n	800f674 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d110      	bne.n	800f674 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f654:	b29a      	uxth	r2, r3
 800f656:	f107 0310 	add.w	r3, r7, #16
 800f65a:	9301      	str	r3, [sp, #4]
 800f65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f001 fb36 	bl	8010cd6 <xTaskCreate>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d001      	beq.n	800f674 <osThreadNew+0x13c>
          hTask = NULL;
 800f670:	2300      	movs	r3, #0
 800f672:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f674:	693b      	ldr	r3, [r7, #16]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3730      	adds	r7, #48	; 0x30
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	20001638 	.word	0x20001638

0800f684 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f68c:	f3ef 8305 	mrs	r3, IPSR
 800f690:	613b      	str	r3, [r7, #16]
  return(result);
 800f692:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10f      	bne.n	800f6b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f698:	f3ef 8310 	mrs	r3, PRIMASK
 800f69c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d105      	bne.n	800f6b0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f6a4:	f3ef 8311 	mrs	r3, BASEPRI
 800f6a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d007      	beq.n	800f6c0 <osDelay+0x3c>
 800f6b0:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <osDelay+0x58>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d103      	bne.n	800f6c0 <osDelay+0x3c>
    stat = osErrorISR;
 800f6b8:	f06f 0305 	mvn.w	r3, #5
 800f6bc:	617b      	str	r3, [r7, #20]
 800f6be:	e007      	b.n	800f6d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d002      	beq.n	800f6d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f001 fc60 	bl	8010f90 <vTaskDelay>
    }
  }

  return (stat);
 800f6d0:	697b      	ldr	r3, [r7, #20]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3718      	adds	r7, #24
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	20001638 	.word	0x20001638

0800f6e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b08c      	sub	sp, #48	; 0x30
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6f0:	f3ef 8305 	mrs	r3, IPSR
 800f6f4:	61bb      	str	r3, [r7, #24]
  return(result);
 800f6f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f040 8086 	bne.w	800f80a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800f702:	617b      	str	r3, [r7, #20]
  return(result);
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d105      	bne.n	800f716 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f70a:	f3ef 8311 	mrs	r3, BASEPRI
 800f70e:	613b      	str	r3, [r7, #16]
  return(result);
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d003      	beq.n	800f71e <osSemaphoreNew+0x3e>
 800f716:	4b3f      	ldr	r3, [pc, #252]	; (800f814 <osSemaphoreNew+0x134>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d075      	beq.n	800f80a <osSemaphoreNew+0x12a>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d072      	beq.n	800f80a <osSemaphoreNew+0x12a>
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d86e      	bhi.n	800f80a <osSemaphoreNew+0x12a>
    mem = -1;
 800f72c:	f04f 33ff 	mov.w	r3, #4294967295
 800f730:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d015      	beq.n	800f764 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d006      	beq.n	800f74e <osSemaphoreNew+0x6e>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	2b4f      	cmp	r3, #79	; 0x4f
 800f746:	d902      	bls.n	800f74e <osSemaphoreNew+0x6e>
        mem = 1;
 800f748:	2301      	movs	r3, #1
 800f74a:	623b      	str	r3, [r7, #32]
 800f74c:	e00c      	b.n	800f768 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d108      	bne.n	800f768 <osSemaphoreNew+0x88>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d104      	bne.n	800f768 <osSemaphoreNew+0x88>
          mem = 0;
 800f75e:	2300      	movs	r3, #0
 800f760:	623b      	str	r3, [r7, #32]
 800f762:	e001      	b.n	800f768 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f768:	6a3b      	ldr	r3, [r7, #32]
 800f76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76e:	d04c      	beq.n	800f80a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	2b01      	cmp	r3, #1
 800f774:	d128      	bne.n	800f7c8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800f776:	6a3b      	ldr	r3, [r7, #32]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d10a      	bne.n	800f792 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	2203      	movs	r2, #3
 800f782:	9200      	str	r2, [sp, #0]
 800f784:	2200      	movs	r2, #0
 800f786:	2100      	movs	r1, #0
 800f788:	2001      	movs	r0, #1
 800f78a:	f000 fa55 	bl	800fc38 <xQueueGenericCreateStatic>
 800f78e:	6278      	str	r0, [r7, #36]	; 0x24
 800f790:	e005      	b.n	800f79e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f792:	2203      	movs	r2, #3
 800f794:	2100      	movs	r1, #0
 800f796:	2001      	movs	r0, #1
 800f798:	f000 fad0 	bl	800fd3c <xQueueGenericCreate>
 800f79c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d022      	beq.n	800f7ea <osSemaphoreNew+0x10a>
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d01f      	beq.n	800f7ea <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7b2:	f000 fb9b 	bl	800feec <xQueueGenericSend>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d016      	beq.n	800f7ea <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800f7bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7be:	f001 f851 	bl	8010864 <vQueueDelete>
            hSemaphore = NULL;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7c6:	e010      	b.n	800f7ea <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800f7c8:	6a3b      	ldr	r3, [r7, #32]
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d108      	bne.n	800f7e0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	68b9      	ldr	r1, [r7, #8]
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f000 fb15 	bl	800fe06 <xQueueCreateCountingSemaphoreStatic>
 800f7dc:	6278      	str	r0, [r7, #36]	; 0x24
 800f7de:	e004      	b.n	800f7ea <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f7e0:	68b9      	ldr	r1, [r7, #8]
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f000 fb4a 	bl	800fe7c <xQueueCreateCountingSemaphore>
 800f7e8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00c      	beq.n	800f80a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d003      	beq.n	800f7fe <osSemaphoreNew+0x11e>
          name = attr->name;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	61fb      	str	r3, [r7, #28]
 800f7fc:	e001      	b.n	800f802 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800f7fe:	2300      	movs	r3, #0
 800f800:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f802:	69f9      	ldr	r1, [r7, #28]
 800f804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f806:	f001 f97b 	bl	8010b00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3728      	adds	r7, #40	; 0x28
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	20001638 	.word	0x20001638

0800f818 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f826:	2300      	movs	r3, #0
 800f828:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d103      	bne.n	800f838 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f830:	f06f 0303 	mvn.w	r3, #3
 800f834:	61fb      	str	r3, [r7, #28]
 800f836:	e04b      	b.n	800f8d0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f838:	f3ef 8305 	mrs	r3, IPSR
 800f83c:	617b      	str	r3, [r7, #20]
  return(result);
 800f83e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10f      	bne.n	800f864 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f844:	f3ef 8310 	mrs	r3, PRIMASK
 800f848:	613b      	str	r3, [r7, #16]
  return(result);
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d105      	bne.n	800f85c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f850:	f3ef 8311 	mrs	r3, BASEPRI
 800f854:	60fb      	str	r3, [r7, #12]
  return(result);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d026      	beq.n	800f8aa <osSemaphoreAcquire+0x92>
 800f85c:	4b1f      	ldr	r3, [pc, #124]	; (800f8dc <osSemaphoreAcquire+0xc4>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b02      	cmp	r3, #2
 800f862:	d122      	bne.n	800f8aa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f86a:	f06f 0303 	mvn.w	r3, #3
 800f86e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f870:	e02d      	b.n	800f8ce <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f872:	2300      	movs	r3, #0
 800f874:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f876:	f107 0308 	add.w	r3, r7, #8
 800f87a:	461a      	mov	r2, r3
 800f87c:	2100      	movs	r1, #0
 800f87e:	69b8      	ldr	r0, [r7, #24]
 800f880:	f000 ff6a 	bl	8010758 <xQueueReceiveFromISR>
 800f884:	4603      	mov	r3, r0
 800f886:	2b01      	cmp	r3, #1
 800f888:	d003      	beq.n	800f892 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f88a:	f06f 0302 	mvn.w	r3, #2
 800f88e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f890:	e01d      	b.n	800f8ce <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d01a      	beq.n	800f8ce <osSemaphoreAcquire+0xb6>
 800f898:	4b11      	ldr	r3, [pc, #68]	; (800f8e0 <osSemaphoreAcquire+0xc8>)
 800f89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f89e:	601a      	str	r2, [r3, #0]
 800f8a0:	f3bf 8f4f 	dsb	sy
 800f8a4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f8a8:	e011      	b.n	800f8ce <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f8aa:	6839      	ldr	r1, [r7, #0]
 800f8ac:	69b8      	ldr	r0, [r7, #24]
 800f8ae:	f000 fe3f 	bl	8010530 <xQueueSemaphoreTake>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	d00b      	beq.n	800f8d0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d003      	beq.n	800f8c6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f8be:	f06f 0301 	mvn.w	r3, #1
 800f8c2:	61fb      	str	r3, [r7, #28]
 800f8c4:	e004      	b.n	800f8d0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f8c6:	f06f 0302 	mvn.w	r3, #2
 800f8ca:	61fb      	str	r3, [r7, #28]
 800f8cc:	e000      	b.n	800f8d0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f8ce:	bf00      	nop
      }
    }
  }

  return (stat);
 800f8d0:	69fb      	ldr	r3, [r7, #28]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3720      	adds	r7, #32
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20001638 	.word	0x20001638
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b088      	sub	sp, #32
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f8f4:	69bb      	ldr	r3, [r7, #24]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d103      	bne.n	800f902 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f8fa:	f06f 0303 	mvn.w	r3, #3
 800f8fe:	61fb      	str	r3, [r7, #28]
 800f900:	e03e      	b.n	800f980 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f902:	f3ef 8305 	mrs	r3, IPSR
 800f906:	617b      	str	r3, [r7, #20]
  return(result);
 800f908:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d10f      	bne.n	800f92e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f90e:	f3ef 8310 	mrs	r3, PRIMASK
 800f912:	613b      	str	r3, [r7, #16]
  return(result);
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d105      	bne.n	800f926 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f91a:	f3ef 8311 	mrs	r3, BASEPRI
 800f91e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d01e      	beq.n	800f964 <osSemaphoreRelease+0x80>
 800f926:	4b19      	ldr	r3, [pc, #100]	; (800f98c <osSemaphoreRelease+0xa8>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b02      	cmp	r3, #2
 800f92c:	d11a      	bne.n	800f964 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f92e:	2300      	movs	r3, #0
 800f930:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f932:	f107 0308 	add.w	r3, r7, #8
 800f936:	4619      	mov	r1, r3
 800f938:	69b8      	ldr	r0, [r7, #24]
 800f93a:	f000 fc7d 	bl	8010238 <xQueueGiveFromISR>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b01      	cmp	r3, #1
 800f942:	d003      	beq.n	800f94c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f944:	f06f 0302 	mvn.w	r3, #2
 800f948:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f94a:	e018      	b.n	800f97e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d015      	beq.n	800f97e <osSemaphoreRelease+0x9a>
 800f952:	4b0f      	ldr	r3, [pc, #60]	; (800f990 <osSemaphoreRelease+0xac>)
 800f954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f958:	601a      	str	r2, [r3, #0]
 800f95a:	f3bf 8f4f 	dsb	sy
 800f95e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f962:	e00c      	b.n	800f97e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f964:	2300      	movs	r3, #0
 800f966:	2200      	movs	r2, #0
 800f968:	2100      	movs	r1, #0
 800f96a:	69b8      	ldr	r0, [r7, #24]
 800f96c:	f000 fabe 	bl	800feec <xQueueGenericSend>
 800f970:	4603      	mov	r3, r0
 800f972:	2b01      	cmp	r3, #1
 800f974:	d004      	beq.n	800f980 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f976:	f06f 0302 	mvn.w	r3, #2
 800f97a:	61fb      	str	r3, [r7, #28]
 800f97c:	e000      	b.n	800f980 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f97e:	bf00      	nop
    }
  }

  return (stat);
 800f980:	69fb      	ldr	r3, [r7, #28]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3720      	adds	r7, #32
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20001638 	.word	0x20001638
 800f990:	e000ed04 	.word	0xe000ed04

0800f994 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	60f8      	str	r0, [r7, #12]
 800f99c:	60b9      	str	r1, [r7, #8]
 800f99e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	4a07      	ldr	r2, [pc, #28]	; (800f9c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800f9a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	4a06      	ldr	r2, [pc, #24]	; (800f9c4 <vApplicationGetIdleTaskMemory+0x30>)
 800f9aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2280      	movs	r2, #128	; 0x80
 800f9b0:	601a      	str	r2, [r3, #0]
}
 800f9b2:	bf00      	nop
 800f9b4:	3714      	adds	r7, #20
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	2000163c 	.word	0x2000163c
 800f9c4:	200016f8 	.word	0x200016f8

0800f9c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	4a07      	ldr	r2, [pc, #28]	; (800f9f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800f9d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	4a06      	ldr	r2, [pc, #24]	; (800f9f8 <vApplicationGetTimerTaskMemory+0x30>)
 800f9de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f9e6:	601a      	str	r2, [r3, #0]
}
 800f9e8:	bf00      	nop
 800f9ea:	3714      	adds	r7, #20
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr
 800f9f4:	200018f8 	.word	0x200018f8
 800f9f8:	200019b4 	.word	0x200019b4

0800f9fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f103 0208 	add.w	r2, r3, #8
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f04f 32ff 	mov.w	r2, #4294967295
 800fa14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f103 0208 	add.w	r2, r3, #8
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f103 0208 	add.w	r2, r3, #8
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa30:	bf00      	nop
 800fa32:	370c      	adds	r7, #12
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr

0800fa3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa4a:	bf00      	nop
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa56:	b480      	push	{r7}
 800fa58:	b085      	sub	sp, #20
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	689a      	ldr	r2, [r3, #8]
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	683a      	ldr	r2, [r7, #0]
 800fa7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	683a      	ldr	r2, [r7, #0]
 800fa80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	687a      	ldr	r2, [r7, #4]
 800fa86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	1c5a      	adds	r2, r3, #1
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	601a      	str	r2, [r3, #0]
}
 800fa92:	bf00      	nop
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b085      	sub	sp, #20
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	6078      	str	r0, [r7, #4]
 800faa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fab4:	d103      	bne.n	800fabe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	691b      	ldr	r3, [r3, #16]
 800faba:	60fb      	str	r3, [r7, #12]
 800fabc:	e00c      	b.n	800fad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3308      	adds	r3, #8
 800fac2:	60fb      	str	r3, [r7, #12]
 800fac4:	e002      	b.n	800facc <vListInsert+0x2e>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	60fb      	str	r3, [r7, #12]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	68ba      	ldr	r2, [r7, #8]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d2f6      	bcs.n	800fac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	683a      	ldr	r2, [r7, #0]
 800fae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	68fa      	ldr	r2, [r7, #12]
 800faec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	683a      	ldr	r2, [r7, #0]
 800faf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	1c5a      	adds	r2, r3, #1
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	601a      	str	r2, [r3, #0]
}
 800fb04:	bf00      	nop
 800fb06:	3714      	adds	r7, #20
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr

0800fb10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fb10:	b480      	push	{r7}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	691b      	ldr	r3, [r3, #16]
 800fb1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	6892      	ldr	r2, [r2, #8]
 800fb26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	6852      	ldr	r2, [r2, #4]
 800fb30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d103      	bne.n	800fb44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	689a      	ldr	r2, [r3, #8]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	1e5a      	subs	r2, r3, #1
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3714      	adds	r7, #20
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10c      	bne.n	800fb92 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7c:	b672      	cpsid	i
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	b662      	cpsie	i
 800fb8c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fb8e:	bf00      	nop
 800fb90:	e7fe      	b.n	800fb90 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800fb92:	f002 fcf3 	bl	801257c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb9e:	68f9      	ldr	r1, [r7, #12]
 800fba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fba2:	fb01 f303 	mul.w	r3, r1, r3
 800fba6:	441a      	add	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	68f9      	ldr	r1, [r7, #12]
 800fbc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fbc8:	fb01 f303 	mul.w	r3, r1, r3
 800fbcc:	441a      	add	r2, r3
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	22ff      	movs	r2, #255	; 0xff
 800fbd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	22ff      	movs	r2, #255	; 0xff
 800fbde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d114      	bne.n	800fc12 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d01a      	beq.n	800fc26 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	3310      	adds	r3, #16
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f001 fca9 	bl	801154c <xTaskRemoveFromEventList>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d012      	beq.n	800fc26 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fc00:	4b0c      	ldr	r3, [pc, #48]	; (800fc34 <xQueueGenericReset+0xd0>)
 800fc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc06:	601a      	str	r2, [r3, #0]
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	e009      	b.n	800fc26 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	3310      	adds	r3, #16
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fef0 	bl	800f9fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3324      	adds	r3, #36	; 0x24
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7ff feeb 	bl	800f9fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fc26:	f002 fcdd 	bl	80125e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fc2a:	2301      	movs	r3, #1
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	3710      	adds	r7, #16
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	e000ed04 	.word	0xe000ed04

0800fc38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08e      	sub	sp, #56	; 0x38
 800fc3c:	af02      	add	r7, sp, #8
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	607a      	str	r2, [r7, #4]
 800fc44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10c      	bne.n	800fc66 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800fc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc50:	b672      	cpsid	i
 800fc52:	f383 8811 	msr	BASEPRI, r3
 800fc56:	f3bf 8f6f 	isb	sy
 800fc5a:	f3bf 8f4f 	dsb	sy
 800fc5e:	b662      	cpsie	i
 800fc60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc62:	bf00      	nop
 800fc64:	e7fe      	b.n	800fc64 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10c      	bne.n	800fc86 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	b672      	cpsid	i
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	b662      	cpsie	i
 800fc80:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc82:	bf00      	nop
 800fc84:	e7fe      	b.n	800fc84 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <xQueueGenericCreateStatic+0x5a>
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <xQueueGenericCreateStatic+0x5e>
 800fc92:	2301      	movs	r3, #1
 800fc94:	e000      	b.n	800fc98 <xQueueGenericCreateStatic+0x60>
 800fc96:	2300      	movs	r3, #0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10c      	bne.n	800fcb6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	b672      	cpsid	i
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	b662      	cpsie	i
 800fcb0:	623b      	str	r3, [r7, #32]
}
 800fcb2:	bf00      	nop
 800fcb4:	e7fe      	b.n	800fcb4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d102      	bne.n	800fcc2 <xQueueGenericCreateStatic+0x8a>
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d101      	bne.n	800fcc6 <xQueueGenericCreateStatic+0x8e>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	e000      	b.n	800fcc8 <xQueueGenericCreateStatic+0x90>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10c      	bne.n	800fce6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800fccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd0:	b672      	cpsid	i
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	b662      	cpsie	i
 800fce0:	61fb      	str	r3, [r7, #28]
}
 800fce2:	bf00      	nop
 800fce4:	e7fe      	b.n	800fce4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fce6:	2350      	movs	r3, #80	; 0x50
 800fce8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	2b50      	cmp	r3, #80	; 0x50
 800fcee:	d00c      	beq.n	800fd0a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	b672      	cpsid	i
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	b662      	cpsie	i
 800fd04:	61bb      	str	r3, [r7, #24]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fd0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00d      	beq.n	800fd32 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fd1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd24:	9300      	str	r3, [sp, #0]
 800fd26:	4613      	mov	r3, r2
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	68b9      	ldr	r1, [r7, #8]
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 f847 	bl	800fdc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3730      	adds	r7, #48	; 0x30
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08a      	sub	sp, #40	; 0x28
 800fd40:	af02      	add	r7, sp, #8
 800fd42:	60f8      	str	r0, [r7, #12]
 800fd44:	60b9      	str	r1, [r7, #8]
 800fd46:	4613      	mov	r3, r2
 800fd48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10c      	bne.n	800fd6a <xQueueGenericCreate+0x2e>
	__asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd54:	b672      	cpsid	i
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	b662      	cpsie	i
 800fd64:	613b      	str	r3, [r7, #16]
}
 800fd66:	bf00      	nop
 800fd68:	e7fe      	b.n	800fd68 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d102      	bne.n	800fd76 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fd70:	2300      	movs	r3, #0
 800fd72:	61fb      	str	r3, [r7, #28]
 800fd74:	e004      	b.n	800fd80 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	fb02 f303 	mul.w	r3, r2, r3
 800fd7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	3350      	adds	r3, #80	; 0x50
 800fd84:	4618      	mov	r0, r3
 800fd86:	f002 fd25 	bl	80127d4 <pvPortMalloc>
 800fd8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d011      	beq.n	800fdb6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	3350      	adds	r3, #80	; 0x50
 800fd9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fda4:	79fa      	ldrb	r2, [r7, #7]
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	697a      	ldr	r2, [r7, #20]
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f000 f805 	bl	800fdc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdb6:	69bb      	ldr	r3, [r7, #24]
	}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3720      	adds	r7, #32
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b084      	sub	sp, #16
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d103      	bne.n	800fddc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	69ba      	ldr	r2, [r7, #24]
 800fdd8:	601a      	str	r2, [r3, #0]
 800fdda:	e002      	b.n	800fde2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fdee:	2101      	movs	r1, #1
 800fdf0:	69b8      	ldr	r0, [r7, #24]
 800fdf2:	f7ff feb7 	bl	800fb64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	78fa      	ldrb	r2, [r7, #3]
 800fdfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fdfe:	bf00      	nop
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b08a      	sub	sp, #40	; 0x28
 800fe0a:	af02      	add	r7, sp, #8
 800fe0c:	60f8      	str	r0, [r7, #12]
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10c      	bne.n	800fe32 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1c:	b672      	cpsid	i
 800fe1e:	f383 8811 	msr	BASEPRI, r3
 800fe22:	f3bf 8f6f 	isb	sy
 800fe26:	f3bf 8f4f 	dsb	sy
 800fe2a:	b662      	cpsie	i
 800fe2c:	61bb      	str	r3, [r7, #24]
}
 800fe2e:	bf00      	nop
 800fe30:	e7fe      	b.n	800fe30 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d90c      	bls.n	800fe54 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800fe3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3e:	b672      	cpsid	i
 800fe40:	f383 8811 	msr	BASEPRI, r3
 800fe44:	f3bf 8f6f 	isb	sy
 800fe48:	f3bf 8f4f 	dsb	sy
 800fe4c:	b662      	cpsie	i
 800fe4e:	617b      	str	r3, [r7, #20]
}
 800fe50:	bf00      	nop
 800fe52:	e7fe      	b.n	800fe52 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fe54:	2302      	movs	r3, #2
 800fe56:	9300      	str	r3, [sp, #0]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	68f8      	ldr	r0, [r7, #12]
 800fe60:	f7ff feea 	bl	800fc38 <xQueueGenericCreateStatic>
 800fe64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fe72:	69fb      	ldr	r3, [r7, #28]
	}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3720      	adds	r7, #32
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b086      	sub	sp, #24
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d10c      	bne.n	800fea6 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800fe8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe90:	b672      	cpsid	i
 800fe92:	f383 8811 	msr	BASEPRI, r3
 800fe96:	f3bf 8f6f 	isb	sy
 800fe9a:	f3bf 8f4f 	dsb	sy
 800fe9e:	b662      	cpsie	i
 800fea0:	613b      	str	r3, [r7, #16]
}
 800fea2:	bf00      	nop
 800fea4:	e7fe      	b.n	800fea4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d90c      	bls.n	800fec8 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	b672      	cpsid	i
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	b662      	cpsie	i
 800fec2:	60fb      	str	r3, [r7, #12]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fec8:	2202      	movs	r2, #2
 800feca:	2100      	movs	r1, #0
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7ff ff35 	bl	800fd3c <xQueueGenericCreate>
 800fed2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	683a      	ldr	r2, [r7, #0]
 800fede:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fee0:	697b      	ldr	r3, [r7, #20]
	}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3718      	adds	r7, #24
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
	...

0800feec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08e      	sub	sp, #56	; 0x38
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fefa:	2300      	movs	r3, #0
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10c      	bne.n	800ff22 <xQueueGenericSend+0x36>
	__asm volatile
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	b672      	cpsid	i
 800ff0e:	f383 8811 	msr	BASEPRI, r3
 800ff12:	f3bf 8f6f 	isb	sy
 800ff16:	f3bf 8f4f 	dsb	sy
 800ff1a:	b662      	cpsie	i
 800ff1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ff1e:	bf00      	nop
 800ff20:	e7fe      	b.n	800ff20 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d103      	bne.n	800ff30 <xQueueGenericSend+0x44>
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d101      	bne.n	800ff34 <xQueueGenericSend+0x48>
 800ff30:	2301      	movs	r3, #1
 800ff32:	e000      	b.n	800ff36 <xQueueGenericSend+0x4a>
 800ff34:	2300      	movs	r3, #0
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d10c      	bne.n	800ff54 <xQueueGenericSend+0x68>
	__asm volatile
 800ff3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3e:	b672      	cpsid	i
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	b662      	cpsie	i
 800ff4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ff50:	bf00      	nop
 800ff52:	e7fe      	b.n	800ff52 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	2b02      	cmp	r3, #2
 800ff58:	d103      	bne.n	800ff62 <xQueueGenericSend+0x76>
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff5e:	2b01      	cmp	r3, #1
 800ff60:	d101      	bne.n	800ff66 <xQueueGenericSend+0x7a>
 800ff62:	2301      	movs	r3, #1
 800ff64:	e000      	b.n	800ff68 <xQueueGenericSend+0x7c>
 800ff66:	2300      	movs	r3, #0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10c      	bne.n	800ff86 <xQueueGenericSend+0x9a>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	623b      	str	r3, [r7, #32]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff86:	f001 fcab 	bl	80118e0 <xTaskGetSchedulerState>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d102      	bne.n	800ff96 <xQueueGenericSend+0xaa>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <xQueueGenericSend+0xae>
 800ff96:	2301      	movs	r3, #1
 800ff98:	e000      	b.n	800ff9c <xQueueGenericSend+0xb0>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10c      	bne.n	800ffba <xQueueGenericSend+0xce>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa4:	b672      	cpsid	i
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	b662      	cpsie	i
 800ffb4:	61fb      	str	r3, [r7, #28]
}
 800ffb6:	bf00      	nop
 800ffb8:	e7fe      	b.n	800ffb8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffba:	f002 fadf 	bl	801257c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ffbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d302      	bcc.n	800ffd0 <xQueueGenericSend+0xe4>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d129      	bne.n	8010024 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	68b9      	ldr	r1, [r7, #8]
 800ffd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffd6:	f000 fc82 	bl	80108de <prvCopyDataToQueue>
 800ffda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d010      	beq.n	8010006 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe6:	3324      	adds	r3, #36	; 0x24
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f001 faaf 	bl	801154c <xTaskRemoveFromEventList>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d013      	beq.n	801001c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fff4:	4b3f      	ldr	r3, [pc, #252]	; (80100f4 <xQueueGenericSend+0x208>)
 800fff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fffa:	601a      	str	r2, [r3, #0]
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	e00a      	b.n	801001c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010008:	2b00      	cmp	r3, #0
 801000a:	d007      	beq.n	801001c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801000c:	4b39      	ldr	r3, [pc, #228]	; (80100f4 <xQueueGenericSend+0x208>)
 801000e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	f3bf 8f4f 	dsb	sy
 8010018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801001c:	f002 fae2 	bl	80125e4 <vPortExitCritical>
				return pdPASS;
 8010020:	2301      	movs	r3, #1
 8010022:	e063      	b.n	80100ec <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d103      	bne.n	8010032 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801002a:	f002 fadb 	bl	80125e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801002e:	2300      	movs	r3, #0
 8010030:	e05c      	b.n	80100ec <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010034:	2b00      	cmp	r3, #0
 8010036:	d106      	bne.n	8010046 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010038:	f107 0314 	add.w	r3, r7, #20
 801003c:	4618      	mov	r0, r3
 801003e:	f001 faeb 	bl	8011618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010042:	2301      	movs	r3, #1
 8010044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010046:	f002 facd 	bl	80125e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801004a:	f001 f84b 	bl	80110e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801004e:	f002 fa95 	bl	801257c <vPortEnterCritical>
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010058:	b25b      	sxtb	r3, r3
 801005a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801005e:	d103      	bne.n	8010068 <xQueueGenericSend+0x17c>
 8010060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801006e:	b25b      	sxtb	r3, r3
 8010070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010074:	d103      	bne.n	801007e <xQueueGenericSend+0x192>
 8010076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010078:	2200      	movs	r2, #0
 801007a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801007e:	f002 fab1 	bl	80125e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010082:	1d3a      	adds	r2, r7, #4
 8010084:	f107 0314 	add.w	r3, r7, #20
 8010088:	4611      	mov	r1, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f001 fada 	bl	8011644 <xTaskCheckForTimeOut>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d124      	bne.n	80100e0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010098:	f000 fd19 	bl	8010ace <prvIsQueueFull>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d018      	beq.n	80100d4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80100a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a4:	3310      	adds	r3, #16
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	4611      	mov	r1, r2
 80100aa:	4618      	mov	r0, r3
 80100ac:	f001 f9fa 	bl	80114a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80100b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100b2:	f000 fca4 	bl	80109fe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80100b6:	f001 f823 	bl	8011100 <xTaskResumeAll>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f47f af7c 	bne.w	800ffba <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80100c2:	4b0c      	ldr	r3, [pc, #48]	; (80100f4 <xQueueGenericSend+0x208>)
 80100c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	f3bf 8f4f 	dsb	sy
 80100ce:	f3bf 8f6f 	isb	sy
 80100d2:	e772      	b.n	800ffba <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80100d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100d6:	f000 fc92 	bl	80109fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100da:	f001 f811 	bl	8011100 <xTaskResumeAll>
 80100de:	e76c      	b.n	800ffba <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80100e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100e2:	f000 fc8c 	bl	80109fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100e6:	f001 f80b 	bl	8011100 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80100ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3738      	adds	r7, #56	; 0x38
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	e000ed04 	.word	0xe000ed04

080100f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b08e      	sub	sp, #56	; 0x38
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	607a      	str	r2, [r7, #4]
 8010104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801010a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10c      	bne.n	801012a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010114:	b672      	cpsid	i
 8010116:	f383 8811 	msr	BASEPRI, r3
 801011a:	f3bf 8f6f 	isb	sy
 801011e:	f3bf 8f4f 	dsb	sy
 8010122:	b662      	cpsie	i
 8010124:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010126:	bf00      	nop
 8010128:	e7fe      	b.n	8010128 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d103      	bne.n	8010138 <xQueueGenericSendFromISR+0x40>
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010134:	2b00      	cmp	r3, #0
 8010136:	d101      	bne.n	801013c <xQueueGenericSendFromISR+0x44>
 8010138:	2301      	movs	r3, #1
 801013a:	e000      	b.n	801013e <xQueueGenericSendFromISR+0x46>
 801013c:	2300      	movs	r3, #0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d10c      	bne.n	801015c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010146:	b672      	cpsid	i
 8010148:	f383 8811 	msr	BASEPRI, r3
 801014c:	f3bf 8f6f 	isb	sy
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	b662      	cpsie	i
 8010156:	623b      	str	r3, [r7, #32]
}
 8010158:	bf00      	nop
 801015a:	e7fe      	b.n	801015a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2b02      	cmp	r3, #2
 8010160:	d103      	bne.n	801016a <xQueueGenericSendFromISR+0x72>
 8010162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010166:	2b01      	cmp	r3, #1
 8010168:	d101      	bne.n	801016e <xQueueGenericSendFromISR+0x76>
 801016a:	2301      	movs	r3, #1
 801016c:	e000      	b.n	8010170 <xQueueGenericSendFromISR+0x78>
 801016e:	2300      	movs	r3, #0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d10c      	bne.n	801018e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010178:	b672      	cpsid	i
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	b662      	cpsie	i
 8010188:	61fb      	str	r3, [r7, #28]
}
 801018a:	bf00      	nop
 801018c:	e7fe      	b.n	801018c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801018e:	f002 fadd 	bl	801274c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010192:	f3ef 8211 	mrs	r2, BASEPRI
 8010196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019a:	b672      	cpsid	i
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	b662      	cpsie	i
 80101aa:	61ba      	str	r2, [r7, #24]
 80101ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80101ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d302      	bcc.n	80101c4 <xQueueGenericSendFromISR+0xcc>
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d12c      	bne.n	801021e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80101c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101ce:	683a      	ldr	r2, [r7, #0]
 80101d0:	68b9      	ldr	r1, [r7, #8]
 80101d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101d4:	f000 fb83 	bl	80108de <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80101d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80101dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e0:	d112      	bne.n	8010208 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d016      	beq.n	8010218 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	3324      	adds	r3, #36	; 0x24
 80101ee:	4618      	mov	r0, r3
 80101f0:	f001 f9ac 	bl	801154c <xTaskRemoveFromEventList>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00e      	beq.n	8010218 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00b      	beq.n	8010218 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2201      	movs	r2, #1
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	e007      	b.n	8010218 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801020c:	3301      	adds	r3, #1
 801020e:	b2db      	uxtb	r3, r3
 8010210:	b25a      	sxtb	r2, r3
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010218:	2301      	movs	r3, #1
 801021a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801021c:	e001      	b.n	8010222 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801021e:	2300      	movs	r3, #0
 8010220:	637b      	str	r3, [r7, #52]	; 0x34
 8010222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010224:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801022c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801022e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010230:	4618      	mov	r0, r3
 8010232:	3738      	adds	r7, #56	; 0x38
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08e      	sub	sp, #56	; 0x38
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10c      	bne.n	8010266 <xQueueGiveFromISR+0x2e>
	__asm volatile
 801024c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010250:	b672      	cpsid	i
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	b662      	cpsie	i
 8010260:	623b      	str	r3, [r7, #32]
}
 8010262:	bf00      	nop
 8010264:	e7fe      	b.n	8010264 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00c      	beq.n	8010288 <xQueueGiveFromISR+0x50>
	__asm volatile
 801026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010272:	b672      	cpsid	i
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	b662      	cpsie	i
 8010282:	61fb      	str	r3, [r7, #28]
}
 8010284:	bf00      	nop
 8010286:	e7fe      	b.n	8010286 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d103      	bne.n	8010298 <xQueueGiveFromISR+0x60>
 8010290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d101      	bne.n	801029c <xQueueGiveFromISR+0x64>
 8010298:	2301      	movs	r3, #1
 801029a:	e000      	b.n	801029e <xQueueGiveFromISR+0x66>
 801029c:	2300      	movs	r3, #0
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d10c      	bne.n	80102bc <xQueueGiveFromISR+0x84>
	__asm volatile
 80102a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a6:	b672      	cpsid	i
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	b662      	cpsie	i
 80102b6:	61bb      	str	r3, [r7, #24]
}
 80102b8:	bf00      	nop
 80102ba:	e7fe      	b.n	80102ba <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102bc:	f002 fa46 	bl	801274c <vPortValidateInterruptPriority>
	__asm volatile
 80102c0:	f3ef 8211 	mrs	r2, BASEPRI
 80102c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c8:	b672      	cpsid	i
 80102ca:	f383 8811 	msr	BASEPRI, r3
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f3bf 8f4f 	dsb	sy
 80102d6:	b662      	cpsie	i
 80102d8:	617a      	str	r2, [r7, #20]
 80102da:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80102dc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102de:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102e4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80102e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d22b      	bcs.n	8010348 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fc:	1c5a      	adds	r2, r3, #1
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010306:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030a:	d112      	bne.n	8010332 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801030c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010310:	2b00      	cmp	r3, #0
 8010312:	d016      	beq.n	8010342 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	3324      	adds	r3, #36	; 0x24
 8010318:	4618      	mov	r0, r3
 801031a:	f001 f917 	bl	801154c <xTaskRemoveFromEventList>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00e      	beq.n	8010342 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00b      	beq.n	8010342 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2201      	movs	r2, #1
 801032e:	601a      	str	r2, [r3, #0]
 8010330:	e007      	b.n	8010342 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010336:	3301      	adds	r3, #1
 8010338:	b2db      	uxtb	r3, r3
 801033a:	b25a      	sxtb	r2, r3
 801033c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010342:	2301      	movs	r3, #1
 8010344:	637b      	str	r3, [r7, #52]	; 0x34
 8010346:	e001      	b.n	801034c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010348:	2300      	movs	r3, #0
 801034a:	637b      	str	r3, [r7, #52]	; 0x34
 801034c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f383 8811 	msr	BASEPRI, r3
}
 8010356:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801035a:	4618      	mov	r0, r3
 801035c:	3738      	adds	r7, #56	; 0x38
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
	...

08010364 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b08c      	sub	sp, #48	; 0x30
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010370:	2300      	movs	r3, #0
 8010372:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037a:	2b00      	cmp	r3, #0
 801037c:	d10c      	bne.n	8010398 <xQueueReceive+0x34>
	__asm volatile
 801037e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010382:	b672      	cpsid	i
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	b662      	cpsie	i
 8010392:	623b      	str	r3, [r7, #32]
}
 8010394:	bf00      	nop
 8010396:	e7fe      	b.n	8010396 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d103      	bne.n	80103a6 <xQueueReceive+0x42>
 801039e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d101      	bne.n	80103aa <xQueueReceive+0x46>
 80103a6:	2301      	movs	r3, #1
 80103a8:	e000      	b.n	80103ac <xQueueReceive+0x48>
 80103aa:	2300      	movs	r3, #0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d10c      	bne.n	80103ca <xQueueReceive+0x66>
	__asm volatile
 80103b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b4:	b672      	cpsid	i
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	b662      	cpsie	i
 80103c4:	61fb      	str	r3, [r7, #28]
}
 80103c6:	bf00      	nop
 80103c8:	e7fe      	b.n	80103c8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103ca:	f001 fa89 	bl	80118e0 <xTaskGetSchedulerState>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d102      	bne.n	80103da <xQueueReceive+0x76>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d101      	bne.n	80103de <xQueueReceive+0x7a>
 80103da:	2301      	movs	r3, #1
 80103dc:	e000      	b.n	80103e0 <xQueueReceive+0x7c>
 80103de:	2300      	movs	r3, #0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10c      	bne.n	80103fe <xQueueReceive+0x9a>
	__asm volatile
 80103e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e8:	b672      	cpsid	i
 80103ea:	f383 8811 	msr	BASEPRI, r3
 80103ee:	f3bf 8f6f 	isb	sy
 80103f2:	f3bf 8f4f 	dsb	sy
 80103f6:	b662      	cpsie	i
 80103f8:	61bb      	str	r3, [r7, #24]
}
 80103fa:	bf00      	nop
 80103fc:	e7fe      	b.n	80103fc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103fe:	f002 f8bd 	bl	801257c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010406:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	2b00      	cmp	r3, #0
 801040c:	d01f      	beq.n	801044e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801040e:	68b9      	ldr	r1, [r7, #8]
 8010410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010412:	f000 face 	bl	80109b2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010418:	1e5a      	subs	r2, r3, #1
 801041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801041e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00f      	beq.n	8010446 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010428:	3310      	adds	r3, #16
 801042a:	4618      	mov	r0, r3
 801042c:	f001 f88e 	bl	801154c <xTaskRemoveFromEventList>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d007      	beq.n	8010446 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010436:	4b3d      	ldr	r3, [pc, #244]	; (801052c <xQueueReceive+0x1c8>)
 8010438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801043c:	601a      	str	r2, [r3, #0]
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010446:	f002 f8cd 	bl	80125e4 <vPortExitCritical>
				return pdPASS;
 801044a:	2301      	movs	r3, #1
 801044c:	e069      	b.n	8010522 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d103      	bne.n	801045c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010454:	f002 f8c6 	bl	80125e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010458:	2300      	movs	r3, #0
 801045a:	e062      	b.n	8010522 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 801045c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045e:	2b00      	cmp	r3, #0
 8010460:	d106      	bne.n	8010470 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010462:	f107 0310 	add.w	r3, r7, #16
 8010466:	4618      	mov	r0, r3
 8010468:	f001 f8d6 	bl	8011618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801046c:	2301      	movs	r3, #1
 801046e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010470:	f002 f8b8 	bl	80125e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010474:	f000 fe36 	bl	80110e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010478:	f002 f880 	bl	801257c <vPortEnterCritical>
 801047c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010482:	b25b      	sxtb	r3, r3
 8010484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010488:	d103      	bne.n	8010492 <xQueueReceive+0x12e>
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	2200      	movs	r2, #0
 801048e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010498:	b25b      	sxtb	r3, r3
 801049a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801049e:	d103      	bne.n	80104a8 <xQueueReceive+0x144>
 80104a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104a8:	f002 f89c 	bl	80125e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104ac:	1d3a      	adds	r2, r7, #4
 80104ae:	f107 0310 	add.w	r3, r7, #16
 80104b2:	4611      	mov	r1, r2
 80104b4:	4618      	mov	r0, r3
 80104b6:	f001 f8c5 	bl	8011644 <xTaskCheckForTimeOut>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d123      	bne.n	8010508 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104c2:	f000 faee 	bl	8010aa2 <prvIsQueueEmpty>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d017      	beq.n	80104fc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ce:	3324      	adds	r3, #36	; 0x24
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	4611      	mov	r1, r2
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 ffe5 	bl	80114a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104dc:	f000 fa8f 	bl	80109fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80104e0:	f000 fe0e 	bl	8011100 <xTaskResumeAll>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d189      	bne.n	80103fe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80104ea:	4b10      	ldr	r3, [pc, #64]	; (801052c <xQueueReceive+0x1c8>)
 80104ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104f0:	601a      	str	r2, [r3, #0]
 80104f2:	f3bf 8f4f 	dsb	sy
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	e780      	b.n	80103fe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80104fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104fe:	f000 fa7e 	bl	80109fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010502:	f000 fdfd 	bl	8011100 <xTaskResumeAll>
 8010506:	e77a      	b.n	80103fe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801050a:	f000 fa78 	bl	80109fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801050e:	f000 fdf7 	bl	8011100 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010514:	f000 fac5 	bl	8010aa2 <prvIsQueueEmpty>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	f43f af6f 	beq.w	80103fe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010522:	4618      	mov	r0, r3
 8010524:	3730      	adds	r7, #48	; 0x30
 8010526:	46bd      	mov	sp, r7
 8010528:	bd80      	pop	{r7, pc}
 801052a:	bf00      	nop
 801052c:	e000ed04 	.word	0xe000ed04

08010530 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b08e      	sub	sp, #56	; 0x38
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801053a:	2300      	movs	r3, #0
 801053c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010542:	2300      	movs	r3, #0
 8010544:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10c      	bne.n	8010566 <xQueueSemaphoreTake+0x36>
	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010550:	b672      	cpsid	i
 8010552:	f383 8811 	msr	BASEPRI, r3
 8010556:	f3bf 8f6f 	isb	sy
 801055a:	f3bf 8f4f 	dsb	sy
 801055e:	b662      	cpsie	i
 8010560:	623b      	str	r3, [r7, #32]
}
 8010562:	bf00      	nop
 8010564:	e7fe      	b.n	8010564 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00c      	beq.n	8010588 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010572:	b672      	cpsid	i
 8010574:	f383 8811 	msr	BASEPRI, r3
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	b662      	cpsie	i
 8010582:	61fb      	str	r3, [r7, #28]
}
 8010584:	bf00      	nop
 8010586:	e7fe      	b.n	8010586 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010588:	f001 f9aa 	bl	80118e0 <xTaskGetSchedulerState>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d102      	bne.n	8010598 <xQueueSemaphoreTake+0x68>
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d101      	bne.n	801059c <xQueueSemaphoreTake+0x6c>
 8010598:	2301      	movs	r3, #1
 801059a:	e000      	b.n	801059e <xQueueSemaphoreTake+0x6e>
 801059c:	2300      	movs	r3, #0
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d10c      	bne.n	80105bc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	b672      	cpsid	i
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	b662      	cpsie	i
 80105b6:	61bb      	str	r3, [r7, #24]
}
 80105b8:	bf00      	nop
 80105ba:	e7fe      	b.n	80105ba <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105bc:	f001 ffde 	bl	801257c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80105c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d024      	beq.n	8010616 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80105cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ce:	1e5a      	subs	r2, r3, #1
 80105d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d104      	bne.n	80105e6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80105dc:	f001 fafe 	bl	8011bdc <pvTaskIncrementMutexHeldCount>
 80105e0:	4602      	mov	r2, r0
 80105e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e8:	691b      	ldr	r3, [r3, #16]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00f      	beq.n	801060e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	3310      	adds	r3, #16
 80105f2:	4618      	mov	r0, r3
 80105f4:	f000 ffaa 	bl	801154c <xTaskRemoveFromEventList>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d007      	beq.n	801060e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80105fe:	4b55      	ldr	r3, [pc, #340]	; (8010754 <xQueueSemaphoreTake+0x224>)
 8010600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	f3bf 8f4f 	dsb	sy
 801060a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801060e:	f001 ffe9 	bl	80125e4 <vPortExitCritical>
				return pdPASS;
 8010612:	2301      	movs	r3, #1
 8010614:	e099      	b.n	801074a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d113      	bne.n	8010644 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801061c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00c      	beq.n	801063c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	b672      	cpsid	i
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	b662      	cpsie	i
 8010636:	617b      	str	r3, [r7, #20]
}
 8010638:	bf00      	nop
 801063a:	e7fe      	b.n	801063a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801063c:	f001 ffd2 	bl	80125e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010640:	2300      	movs	r3, #0
 8010642:	e082      	b.n	801074a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801064a:	f107 030c 	add.w	r3, r7, #12
 801064e:	4618      	mov	r0, r3
 8010650:	f000 ffe2 	bl	8011618 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010654:	2301      	movs	r3, #1
 8010656:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010658:	f001 ffc4 	bl	80125e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801065c:	f000 fd42 	bl	80110e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010660:	f001 ff8c 	bl	801257c <vPortEnterCritical>
 8010664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801066a:	b25b      	sxtb	r3, r3
 801066c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010670:	d103      	bne.n	801067a <xQueueSemaphoreTake+0x14a>
 8010672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010674:	2200      	movs	r2, #0
 8010676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010680:	b25b      	sxtb	r3, r3
 8010682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010686:	d103      	bne.n	8010690 <xQueueSemaphoreTake+0x160>
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	2200      	movs	r2, #0
 801068c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010690:	f001 ffa8 	bl	80125e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010694:	463a      	mov	r2, r7
 8010696:	f107 030c 	add.w	r3, r7, #12
 801069a:	4611      	mov	r1, r2
 801069c:	4618      	mov	r0, r3
 801069e:	f000 ffd1 	bl	8011644 <xTaskCheckForTimeOut>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d132      	bne.n	801070e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106aa:	f000 f9fa 	bl	8010aa2 <prvIsQueueEmpty>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d026      	beq.n	8010702 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d109      	bne.n	80106d0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80106bc:	f001 ff5e 	bl	801257c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c2:	689b      	ldr	r3, [r3, #8]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f001 f929 	bl	801191c <xTaskPriorityInherit>
 80106ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80106cc:	f001 ff8a 	bl	80125e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80106d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d2:	3324      	adds	r3, #36	; 0x24
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	4611      	mov	r1, r2
 80106d8:	4618      	mov	r0, r3
 80106da:	f000 fee3 	bl	80114a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80106de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106e0:	f000 f98d 	bl	80109fe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80106e4:	f000 fd0c 	bl	8011100 <xTaskResumeAll>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f47f af66 	bne.w	80105bc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80106f0:	4b18      	ldr	r3, [pc, #96]	; (8010754 <xQueueSemaphoreTake+0x224>)
 80106f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106f6:	601a      	str	r2, [r3, #0]
 80106f8:	f3bf 8f4f 	dsb	sy
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	e75c      	b.n	80105bc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010704:	f000 f97b 	bl	80109fe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010708:	f000 fcfa 	bl	8011100 <xTaskResumeAll>
 801070c:	e756      	b.n	80105bc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801070e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010710:	f000 f975 	bl	80109fe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010714:	f000 fcf4 	bl	8011100 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801071a:	f000 f9c2 	bl	8010aa2 <prvIsQueueEmpty>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	f43f af4b 	beq.w	80105bc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	2b00      	cmp	r3, #0
 801072a:	d00d      	beq.n	8010748 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801072c:	f001 ff26 	bl	801257c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010732:	f000 f8bc 	bl	80108ae <prvGetDisinheritPriorityAfterTimeout>
 8010736:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801073e:	4618      	mov	r0, r3
 8010740:	f001 f9c6 	bl	8011ad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010744:	f001 ff4e 	bl	80125e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801074a:	4618      	mov	r0, r3
 801074c:	3738      	adds	r7, #56	; 0x38
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	e000ed04 	.word	0xe000ed04

08010758 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b08e      	sub	sp, #56	; 0x38
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076a:	2b00      	cmp	r3, #0
 801076c:	d10c      	bne.n	8010788 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010772:	b672      	cpsid	i
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	b662      	cpsie	i
 8010782:	623b      	str	r3, [r7, #32]
}
 8010784:	bf00      	nop
 8010786:	e7fe      	b.n	8010786 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d103      	bne.n	8010796 <xQueueReceiveFromISR+0x3e>
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010792:	2b00      	cmp	r3, #0
 8010794:	d101      	bne.n	801079a <xQueueReceiveFromISR+0x42>
 8010796:	2301      	movs	r3, #1
 8010798:	e000      	b.n	801079c <xQueueReceiveFromISR+0x44>
 801079a:	2300      	movs	r3, #0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10c      	bne.n	80107ba <xQueueReceiveFromISR+0x62>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	b672      	cpsid	i
 80107a6:	f383 8811 	msr	BASEPRI, r3
 80107aa:	f3bf 8f6f 	isb	sy
 80107ae:	f3bf 8f4f 	dsb	sy
 80107b2:	b662      	cpsie	i
 80107b4:	61fb      	str	r3, [r7, #28]
}
 80107b6:	bf00      	nop
 80107b8:	e7fe      	b.n	80107b8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107ba:	f001 ffc7 	bl	801274c <vPortValidateInterruptPriority>
	__asm volatile
 80107be:	f3ef 8211 	mrs	r2, BASEPRI
 80107c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c6:	b672      	cpsid	i
 80107c8:	f383 8811 	msr	BASEPRI, r3
 80107cc:	f3bf 8f6f 	isb	sy
 80107d0:	f3bf 8f4f 	dsb	sy
 80107d4:	b662      	cpsie	i
 80107d6:	61ba      	str	r2, [r7, #24]
 80107d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80107da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d02f      	beq.n	801084a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80107ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107f4:	68b9      	ldr	r1, [r7, #8]
 80107f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f8:	f000 f8db 	bl	80109b2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fe:	1e5a      	subs	r2, r3, #1
 8010800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010802:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801080c:	d112      	bne.n	8010834 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	691b      	ldr	r3, [r3, #16]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d016      	beq.n	8010844 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010818:	3310      	adds	r3, #16
 801081a:	4618      	mov	r0, r3
 801081c:	f000 fe96 	bl	801154c <xTaskRemoveFromEventList>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00e      	beq.n	8010844 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00b      	beq.n	8010844 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2201      	movs	r2, #1
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	e007      	b.n	8010844 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010838:	3301      	adds	r3, #1
 801083a:	b2db      	uxtb	r3, r3
 801083c:	b25a      	sxtb	r2, r3
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010844:	2301      	movs	r3, #1
 8010846:	637b      	str	r3, [r7, #52]	; 0x34
 8010848:	e001      	b.n	801084e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801084a:	2300      	movs	r3, #0
 801084c:	637b      	str	r3, [r7, #52]	; 0x34
 801084e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010850:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	f383 8811 	msr	BASEPRI, r3
}
 8010858:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801085c:	4618      	mov	r0, r3
 801085e:	3738      	adds	r7, #56	; 0x38
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d10c      	bne.n	8010890 <vQueueDelete+0x2c>
	__asm volatile
 8010876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087a:	b672      	cpsid	i
 801087c:	f383 8811 	msr	BASEPRI, r3
 8010880:	f3bf 8f6f 	isb	sy
 8010884:	f3bf 8f4f 	dsb	sy
 8010888:	b662      	cpsie	i
 801088a:	60bb      	str	r3, [r7, #8]
}
 801088c:	bf00      	nop
 801088e:	e7fe      	b.n	801088e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f000 f95f 	bl	8010b54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801089c:	2b00      	cmp	r3, #0
 801089e:	d102      	bne.n	80108a6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f002 f861 	bl	8012968 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80108a6:	bf00      	nop
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80108ae:	b480      	push	{r7}
 80108b0:	b085      	sub	sp, #20
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d006      	beq.n	80108cc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80108c8:	60fb      	str	r3, [r7, #12]
 80108ca:	e001      	b.n	80108d0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80108d0:	68fb      	ldr	r3, [r7, #12]
	}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3714      	adds	r7, #20
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr

080108de <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b086      	sub	sp, #24
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	60f8      	str	r0, [r7, #12]
 80108e6:	60b9      	str	r1, [r7, #8]
 80108e8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80108ea:	2300      	movs	r3, #0
 80108ec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108f2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10d      	bne.n	8010918 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d14d      	bne.n	80109a0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	4618      	mov	r0, r3
 801090a:	f001 f86f 	bl	80119ec <xTaskPriorityDisinherit>
 801090e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2200      	movs	r2, #0
 8010914:	609a      	str	r2, [r3, #8]
 8010916:	e043      	b.n	80109a0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d119      	bne.n	8010952 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6858      	ldr	r0, [r3, #4]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010926:	461a      	mov	r2, r3
 8010928:	68b9      	ldr	r1, [r7, #8]
 801092a:	f002 fa5a 	bl	8012de2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	685a      	ldr	r2, [r3, #4]
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010936:	441a      	add	r2, r3
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	685a      	ldr	r2, [r3, #4]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	429a      	cmp	r2, r3
 8010946:	d32b      	bcc.n	80109a0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	605a      	str	r2, [r3, #4]
 8010950:	e026      	b.n	80109a0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	68d8      	ldr	r0, [r3, #12]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095a:	461a      	mov	r2, r3
 801095c:	68b9      	ldr	r1, [r7, #8]
 801095e:	f002 fa40 	bl	8012de2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	68da      	ldr	r2, [r3, #12]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096a:	425b      	negs	r3, r3
 801096c:	441a      	add	r2, r3
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68da      	ldr	r2, [r3, #12]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	429a      	cmp	r2, r3
 801097c:	d207      	bcs.n	801098e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	689a      	ldr	r2, [r3, #8]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010986:	425b      	negs	r3, r3
 8010988:	441a      	add	r2, r3
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b02      	cmp	r3, #2
 8010992:	d105      	bne.n	80109a0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d002      	beq.n	80109a0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	3b01      	subs	r3, #1
 801099e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	1c5a      	adds	r2, r3, #1
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80109a8:	697b      	ldr	r3, [r7, #20]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b082      	sub	sp, #8
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d018      	beq.n	80109f6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	68da      	ldr	r2, [r3, #12]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109cc:	441a      	add	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d303      	bcc.n	80109e6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	68d9      	ldr	r1, [r3, #12]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ee:	461a      	mov	r2, r3
 80109f0:	6838      	ldr	r0, [r7, #0]
 80109f2:	f002 f9f6 	bl	8012de2 <memcpy>
	}
}
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b084      	sub	sp, #16
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a06:	f001 fdb9 	bl	801257c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a12:	e011      	b.n	8010a38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d012      	beq.n	8010a42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	3324      	adds	r3, #36	; 0x24
 8010a20:	4618      	mov	r0, r3
 8010a22:	f000 fd93 	bl	801154c <xTaskRemoveFromEventList>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a2c:	f000 fe70 	bl	8011710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010a30:	7bfb      	ldrb	r3, [r7, #15]
 8010a32:	3b01      	subs	r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	dce9      	bgt.n	8010a14 <prvUnlockQueue+0x16>
 8010a40:	e000      	b.n	8010a44 <prvUnlockQueue+0x46>
					break;
 8010a42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	22ff      	movs	r2, #255	; 0xff
 8010a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010a4c:	f001 fdca 	bl	80125e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a50:	f001 fd94 	bl	801257c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a5c:	e011      	b.n	8010a82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	691b      	ldr	r3, [r3, #16]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d012      	beq.n	8010a8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	3310      	adds	r3, #16
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f000 fd6e 	bl	801154c <xTaskRemoveFromEventList>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d001      	beq.n	8010a7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010a76:	f000 fe4b 	bl	8011710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010a7a:	7bbb      	ldrb	r3, [r7, #14]
 8010a7c:	3b01      	subs	r3, #1
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	dce9      	bgt.n	8010a5e <prvUnlockQueue+0x60>
 8010a8a:	e000      	b.n	8010a8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010a8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	22ff      	movs	r2, #255	; 0xff
 8010a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010a96:	f001 fda5 	bl	80125e4 <vPortExitCritical>
}
 8010a9a:	bf00      	nop
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}

08010aa2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010aa2:	b580      	push	{r7, lr}
 8010aa4:	b084      	sub	sp, #16
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010aaa:	f001 fd67 	bl	801257c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d102      	bne.n	8010abc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	60fb      	str	r3, [r7, #12]
 8010aba:	e001      	b.n	8010ac0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010abc:	2300      	movs	r3, #0
 8010abe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ac0:	f001 fd90 	bl	80125e4 <vPortExitCritical>

	return xReturn;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b084      	sub	sp, #16
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ad6:	f001 fd51 	bl	801257c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d102      	bne.n	8010aec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	60fb      	str	r3, [r7, #12]
 8010aea:	e001      	b.n	8010af0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010aec:	2300      	movs	r3, #0
 8010aee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010af0:	f001 fd78 	bl	80125e4 <vPortExitCritical>

	return xReturn;
 8010af4:	68fb      	ldr	r3, [r7, #12]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3710      	adds	r7, #16
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
	...

08010b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b00:	b480      	push	{r7}
 8010b02:	b085      	sub	sp, #20
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
 8010b0e:	e014      	b.n	8010b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b10:	4a0f      	ldr	r2, [pc, #60]	; (8010b50 <vQueueAddToRegistry+0x50>)
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d10b      	bne.n	8010b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b1c:	490c      	ldr	r1, [pc, #48]	; (8010b50 <vQueueAddToRegistry+0x50>)
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	683a      	ldr	r2, [r7, #0]
 8010b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b26:	4a0a      	ldr	r2, [pc, #40]	; (8010b50 <vQueueAddToRegistry+0x50>)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	4413      	add	r3, r2
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010b32:	e006      	b.n	8010b42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3301      	adds	r3, #1
 8010b38:	60fb      	str	r3, [r7, #12]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2b07      	cmp	r3, #7
 8010b3e:	d9e7      	bls.n	8010b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b40:	bf00      	nop
 8010b42:	bf00      	nop
 8010b44:	3714      	adds	r7, #20
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop
 8010b50:	20001db4 	.word	0x20001db4

08010b54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010b54:	b480      	push	{r7}
 8010b56:	b085      	sub	sp, #20
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	60fb      	str	r3, [r7, #12]
 8010b60:	e016      	b.n	8010b90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010b62:	4a10      	ldr	r2, [pc, #64]	; (8010ba4 <vQueueUnregisterQueue+0x50>)
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	00db      	lsls	r3, r3, #3
 8010b68:	4413      	add	r3, r2
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d10b      	bne.n	8010b8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010b72:	4a0c      	ldr	r2, [pc, #48]	; (8010ba4 <vQueueUnregisterQueue+0x50>)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	2100      	movs	r1, #0
 8010b78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010b7c:	4a09      	ldr	r2, [pc, #36]	; (8010ba4 <vQueueUnregisterQueue+0x50>)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	4413      	add	r3, r2
 8010b84:	2200      	movs	r2, #0
 8010b86:	605a      	str	r2, [r3, #4]
				break;
 8010b88:	e006      	b.n	8010b98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	3301      	adds	r3, #1
 8010b8e:	60fb      	str	r3, [r7, #12]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b07      	cmp	r3, #7
 8010b94:	d9e5      	bls.n	8010b62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010b96:	bf00      	nop
 8010b98:	bf00      	nop
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	20001db4 	.word	0x20001db4

08010ba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010bb8:	f001 fce0 	bl	801257c <vPortEnterCritical>
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bc2:	b25b      	sxtb	r3, r3
 8010bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc8:	d103      	bne.n	8010bd2 <vQueueWaitForMessageRestricted+0x2a>
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bd8:	b25b      	sxtb	r3, r3
 8010bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bde:	d103      	bne.n	8010be8 <vQueueWaitForMessageRestricted+0x40>
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010be8:	f001 fcfc 	bl	80125e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d106      	bne.n	8010c02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	3324      	adds	r3, #36	; 0x24
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	68b9      	ldr	r1, [r7, #8]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 fc77 	bl	80114f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c02:	6978      	ldr	r0, [r7, #20]
 8010c04:	f7ff fefb 	bl	80109fe <prvUnlockQueue>
	}
 8010c08:	bf00      	nop
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08e      	sub	sp, #56	; 0x38
 8010c14:	af04      	add	r7, sp, #16
 8010c16:	60f8      	str	r0, [r7, #12]
 8010c18:	60b9      	str	r1, [r7, #8]
 8010c1a:	607a      	str	r2, [r7, #4]
 8010c1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d10c      	bne.n	8010c3e <xTaskCreateStatic+0x2e>
	__asm volatile
 8010c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c28:	b672      	cpsid	i
 8010c2a:	f383 8811 	msr	BASEPRI, r3
 8010c2e:	f3bf 8f6f 	isb	sy
 8010c32:	f3bf 8f4f 	dsb	sy
 8010c36:	b662      	cpsie	i
 8010c38:	623b      	str	r3, [r7, #32]
}
 8010c3a:	bf00      	nop
 8010c3c:	e7fe      	b.n	8010c3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d10c      	bne.n	8010c5e <xTaskCreateStatic+0x4e>
	__asm volatile
 8010c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c48:	b672      	cpsid	i
 8010c4a:	f383 8811 	msr	BASEPRI, r3
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	f3bf 8f4f 	dsb	sy
 8010c56:	b662      	cpsie	i
 8010c58:	61fb      	str	r3, [r7, #28]
}
 8010c5a:	bf00      	nop
 8010c5c:	e7fe      	b.n	8010c5c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c5e:	23bc      	movs	r3, #188	; 0xbc
 8010c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	2bbc      	cmp	r3, #188	; 0xbc
 8010c66:	d00c      	beq.n	8010c82 <xTaskCreateStatic+0x72>
	__asm volatile
 8010c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c6c:	b672      	cpsid	i
 8010c6e:	f383 8811 	msr	BASEPRI, r3
 8010c72:	f3bf 8f6f 	isb	sy
 8010c76:	f3bf 8f4f 	dsb	sy
 8010c7a:	b662      	cpsie	i
 8010c7c:	61bb      	str	r3, [r7, #24]
}
 8010c7e:	bf00      	nop
 8010c80:	e7fe      	b.n	8010c80 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d01e      	beq.n	8010cc8 <xTaskCreateStatic+0xb8>
 8010c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d01b      	beq.n	8010cc8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	2202      	movs	r2, #2
 8010c9e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	9303      	str	r3, [sp, #12]
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca8:	9302      	str	r3, [sp, #8]
 8010caa:	f107 0314 	add.w	r3, r7, #20
 8010cae:	9301      	str	r3, [sp, #4]
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	9300      	str	r3, [sp, #0]
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	68b9      	ldr	r1, [r7, #8]
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f000 f850 	bl	8010d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cc2:	f000 f8f5 	bl	8010eb0 <prvAddNewTaskToReadyList>
 8010cc6:	e001      	b.n	8010ccc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ccc:	697b      	ldr	r3, [r7, #20]
	}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3728      	adds	r7, #40	; 0x28
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}

08010cd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010cd6:	b580      	push	{r7, lr}
 8010cd8:	b08c      	sub	sp, #48	; 0x30
 8010cda:	af04      	add	r7, sp, #16
 8010cdc:	60f8      	str	r0, [r7, #12]
 8010cde:	60b9      	str	r1, [r7, #8]
 8010ce0:	603b      	str	r3, [r7, #0]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ce6:	88fb      	ldrh	r3, [r7, #6]
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f001 fd72 	bl	80127d4 <pvPortMalloc>
 8010cf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00e      	beq.n	8010d16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010cf8:	20bc      	movs	r0, #188	; 0xbc
 8010cfa:	f001 fd6b 	bl	80127d4 <pvPortMalloc>
 8010cfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d003      	beq.n	8010d0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8010d0c:	e005      	b.n	8010d1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d0e:	6978      	ldr	r0, [r7, #20]
 8010d10:	f001 fe2a 	bl	8012968 <vPortFree>
 8010d14:	e001      	b.n	8010d1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d1a:	69fb      	ldr	r3, [r7, #28]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d017      	beq.n	8010d50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	2200      	movs	r2, #0
 8010d24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d28:	88fa      	ldrh	r2, [r7, #6]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9303      	str	r3, [sp, #12]
 8010d2e:	69fb      	ldr	r3, [r7, #28]
 8010d30:	9302      	str	r3, [sp, #8]
 8010d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d38:	9300      	str	r3, [sp, #0]
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	68b9      	ldr	r1, [r7, #8]
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f000 f80e 	bl	8010d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d44:	69f8      	ldr	r0, [r7, #28]
 8010d46:	f000 f8b3 	bl	8010eb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	61bb      	str	r3, [r7, #24]
 8010d4e:	e002      	b.n	8010d56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d50:	f04f 33ff 	mov.w	r3, #4294967295
 8010d54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d56:	69bb      	ldr	r3, [r7, #24]
	}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3720      	adds	r7, #32
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b088      	sub	sp, #32
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	607a      	str	r2, [r7, #4]
 8010d6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	461a      	mov	r2, r3
 8010d78:	21a5      	movs	r1, #165	; 0xa5
 8010d7a:	f002 f840 	bl	8012dfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d82:	6879      	ldr	r1, [r7, #4]
 8010d84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010d88:	440b      	add	r3, r1
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	f023 0307 	bic.w	r3, r3, #7
 8010d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	f003 0307 	and.w	r3, r3, #7
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00c      	beq.n	8010dbc <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da6:	b672      	cpsid	i
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	b662      	cpsie	i
 8010db6:	617b      	str	r3, [r7, #20]
}
 8010db8:	bf00      	nop
 8010dba:	e7fe      	b.n	8010dba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d01f      	beq.n	8010e02 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	61fb      	str	r3, [r7, #28]
 8010dc6:	e012      	b.n	8010dee <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	4413      	add	r3, r2
 8010dce:	7819      	ldrb	r1, [r3, #0]
 8010dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	3334      	adds	r3, #52	; 0x34
 8010dd8:	460a      	mov	r2, r1
 8010dda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	4413      	add	r3, r2
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d006      	beq.n	8010df6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	3301      	adds	r3, #1
 8010dec:	61fb      	str	r3, [r7, #28]
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	2b0f      	cmp	r3, #15
 8010df2:	d9e9      	bls.n	8010dc8 <prvInitialiseNewTask+0x68>
 8010df4:	e000      	b.n	8010df8 <prvInitialiseNewTask+0x98>
			{
				break;
 8010df6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e00:	e003      	b.n	8010e0a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	2b37      	cmp	r3, #55	; 0x37
 8010e0e:	d901      	bls.n	8010e14 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e10:	2337      	movs	r3, #55	; 0x37
 8010e12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e22:	2200      	movs	r2, #0
 8010e24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e28:	3304      	adds	r3, #4
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe fe06 	bl	800fa3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	3318      	adds	r3, #24
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fe fe01 	bl	800fa3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	2200      	movs	r2, #0
 8010e54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e62:	3354      	adds	r3, #84	; 0x54
 8010e64:	2260      	movs	r2, #96	; 0x60
 8010e66:	2100      	movs	r1, #0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f001 ffc8 	bl	8012dfe <memset>
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	4a0c      	ldr	r2, [pc, #48]	; (8010ea4 <prvInitialiseNewTask+0x144>)
 8010e72:	659a      	str	r2, [r3, #88]	; 0x58
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	4a0c      	ldr	r2, [pc, #48]	; (8010ea8 <prvInitialiseNewTask+0x148>)
 8010e78:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7c:	4a0b      	ldr	r2, [pc, #44]	; (8010eac <prvInitialiseNewTask+0x14c>)
 8010e7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e80:	683a      	ldr	r2, [r7, #0]
 8010e82:	68f9      	ldr	r1, [r7, #12]
 8010e84:	69b8      	ldr	r0, [r7, #24]
 8010e86:	f001 fa6d 	bl	8012364 <pxPortInitialiseStack>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d002      	beq.n	8010e9c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e9c:	bf00      	nop
 8010e9e:	3720      	adds	r7, #32
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	080144f0 	.word	0x080144f0
 8010ea8:	08014510 	.word	0x08014510
 8010eac:	080144d0 	.word	0x080144d0

08010eb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010eb8:	f001 fb60 	bl	801257c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ebc:	4b2d      	ldr	r3, [pc, #180]	; (8010f74 <prvAddNewTaskToReadyList+0xc4>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	4a2c      	ldr	r2, [pc, #176]	; (8010f74 <prvAddNewTaskToReadyList+0xc4>)
 8010ec4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ec6:	4b2c      	ldr	r3, [pc, #176]	; (8010f78 <prvAddNewTaskToReadyList+0xc8>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d109      	bne.n	8010ee2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010ece:	4a2a      	ldr	r2, [pc, #168]	; (8010f78 <prvAddNewTaskToReadyList+0xc8>)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ed4:	4b27      	ldr	r3, [pc, #156]	; (8010f74 <prvAddNewTaskToReadyList+0xc4>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d110      	bne.n	8010efe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010edc:	f000 fc3c 	bl	8011758 <prvInitialiseTaskLists>
 8010ee0:	e00d      	b.n	8010efe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ee2:	4b26      	ldr	r3, [pc, #152]	; (8010f7c <prvAddNewTaskToReadyList+0xcc>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d109      	bne.n	8010efe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010eea:	4b23      	ldr	r3, [pc, #140]	; (8010f78 <prvAddNewTaskToReadyList+0xc8>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d802      	bhi.n	8010efe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010ef8:	4a1f      	ldr	r2, [pc, #124]	; (8010f78 <prvAddNewTaskToReadyList+0xc8>)
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010efe:	4b20      	ldr	r3, [pc, #128]	; (8010f80 <prvAddNewTaskToReadyList+0xd0>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	3301      	adds	r3, #1
 8010f04:	4a1e      	ldr	r2, [pc, #120]	; (8010f80 <prvAddNewTaskToReadyList+0xd0>)
 8010f06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f08:	4b1d      	ldr	r3, [pc, #116]	; (8010f80 <prvAddNewTaskToReadyList+0xd0>)
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f14:	4b1b      	ldr	r3, [pc, #108]	; (8010f84 <prvAddNewTaskToReadyList+0xd4>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d903      	bls.n	8010f24 <prvAddNewTaskToReadyList+0x74>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f20:	4a18      	ldr	r2, [pc, #96]	; (8010f84 <prvAddNewTaskToReadyList+0xd4>)
 8010f22:	6013      	str	r3, [r2, #0]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f28:	4613      	mov	r3, r2
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	4413      	add	r3, r2
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	4a15      	ldr	r2, [pc, #84]	; (8010f88 <prvAddNewTaskToReadyList+0xd8>)
 8010f32:	441a      	add	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3304      	adds	r3, #4
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4610      	mov	r0, r2
 8010f3c:	f7fe fd8b 	bl	800fa56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f40:	f001 fb50 	bl	80125e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f44:	4b0d      	ldr	r3, [pc, #52]	; (8010f7c <prvAddNewTaskToReadyList+0xcc>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00e      	beq.n	8010f6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	; (8010f78 <prvAddNewTaskToReadyList+0xc8>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d207      	bcs.n	8010f6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f5a:	4b0c      	ldr	r3, [pc, #48]	; (8010f8c <prvAddNewTaskToReadyList+0xdc>)
 8010f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f60:	601a      	str	r2, [r3, #0]
 8010f62:	f3bf 8f4f 	dsb	sy
 8010f66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f6a:	bf00      	nop
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	200022c8 	.word	0x200022c8
 8010f78:	20001df4 	.word	0x20001df4
 8010f7c:	200022d4 	.word	0x200022d4
 8010f80:	200022e4 	.word	0x200022e4
 8010f84:	200022d0 	.word	0x200022d0
 8010f88:	20001df8 	.word	0x20001df8
 8010f8c:	e000ed04 	.word	0xe000ed04

08010f90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d019      	beq.n	8010fd6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fa2:	4b14      	ldr	r3, [pc, #80]	; (8010ff4 <vTaskDelay+0x64>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00c      	beq.n	8010fc4 <vTaskDelay+0x34>
	__asm volatile
 8010faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fae:	b672      	cpsid	i
 8010fb0:	f383 8811 	msr	BASEPRI, r3
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	f3bf 8f4f 	dsb	sy
 8010fbc:	b662      	cpsie	i
 8010fbe:	60bb      	str	r3, [r7, #8]
}
 8010fc0:	bf00      	nop
 8010fc2:	e7fe      	b.n	8010fc2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010fc4:	f000 f88e 	bl	80110e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fc8:	2100      	movs	r1, #0
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 fe1a 	bl	8011c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fd0:	f000 f896 	bl	8011100 <xTaskResumeAll>
 8010fd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d107      	bne.n	8010fec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010fdc:	4b06      	ldr	r3, [pc, #24]	; (8010ff8 <vTaskDelay+0x68>)
 8010fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010fec:	bf00      	nop
 8010fee:	3710      	adds	r7, #16
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	200022f0 	.word	0x200022f0
 8010ff8:	e000ed04 	.word	0xe000ed04

08010ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b08a      	sub	sp, #40	; 0x28
 8011000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011002:	2300      	movs	r3, #0
 8011004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011006:	2300      	movs	r3, #0
 8011008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801100a:	463a      	mov	r2, r7
 801100c:	1d39      	adds	r1, r7, #4
 801100e:	f107 0308 	add.w	r3, r7, #8
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe fcbe 	bl	800f994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	9202      	str	r2, [sp, #8]
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	2300      	movs	r3, #0
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	2300      	movs	r3, #0
 8011028:	460a      	mov	r2, r1
 801102a:	4926      	ldr	r1, [pc, #152]	; (80110c4 <vTaskStartScheduler+0xc8>)
 801102c:	4826      	ldr	r0, [pc, #152]	; (80110c8 <vTaskStartScheduler+0xcc>)
 801102e:	f7ff fdef 	bl	8010c10 <xTaskCreateStatic>
 8011032:	4603      	mov	r3, r0
 8011034:	4a25      	ldr	r2, [pc, #148]	; (80110cc <vTaskStartScheduler+0xd0>)
 8011036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011038:	4b24      	ldr	r3, [pc, #144]	; (80110cc <vTaskStartScheduler+0xd0>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011040:	2301      	movs	r3, #1
 8011042:	617b      	str	r3, [r7, #20]
 8011044:	e001      	b.n	801104a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011046:	2300      	movs	r3, #0
 8011048:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d102      	bne.n	8011056 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011050:	f000 fe2c 	bl	8011cac <xTimerCreateTimerTask>
 8011054:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d11d      	bne.n	8011098 <vTaskStartScheduler+0x9c>
	__asm volatile
 801105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011060:	b672      	cpsid	i
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	b662      	cpsie	i
 8011070:	613b      	str	r3, [r7, #16]
}
 8011072:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011074:	4b16      	ldr	r3, [pc, #88]	; (80110d0 <vTaskStartScheduler+0xd4>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	3354      	adds	r3, #84	; 0x54
 801107a:	4a16      	ldr	r2, [pc, #88]	; (80110d4 <vTaskStartScheduler+0xd8>)
 801107c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801107e:	4b16      	ldr	r3, [pc, #88]	; (80110d8 <vTaskStartScheduler+0xdc>)
 8011080:	f04f 32ff 	mov.w	r2, #4294967295
 8011084:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011086:	4b15      	ldr	r3, [pc, #84]	; (80110dc <vTaskStartScheduler+0xe0>)
 8011088:	2201      	movs	r2, #1
 801108a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801108c:	4b14      	ldr	r3, [pc, #80]	; (80110e0 <vTaskStartScheduler+0xe4>)
 801108e:	2200      	movs	r2, #0
 8011090:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011092:	f001 f9f5 	bl	8012480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011096:	e010      	b.n	80110ba <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801109e:	d10c      	bne.n	80110ba <vTaskStartScheduler+0xbe>
	__asm volatile
 80110a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a4:	b672      	cpsid	i
 80110a6:	f383 8811 	msr	BASEPRI, r3
 80110aa:	f3bf 8f6f 	isb	sy
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	b662      	cpsie	i
 80110b4:	60fb      	str	r3, [r7, #12]
}
 80110b6:	bf00      	nop
 80110b8:	e7fe      	b.n	80110b8 <vTaskStartScheduler+0xbc>
}
 80110ba:	bf00      	nop
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	08014268 	.word	0x08014268
 80110c8:	08011729 	.word	0x08011729
 80110cc:	200022ec 	.word	0x200022ec
 80110d0:	20001df4 	.word	0x20001df4
 80110d4:	200001c0 	.word	0x200001c0
 80110d8:	200022e8 	.word	0x200022e8
 80110dc:	200022d4 	.word	0x200022d4
 80110e0:	200022cc 	.word	0x200022cc

080110e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110e4:	b480      	push	{r7}
 80110e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80110e8:	4b04      	ldr	r3, [pc, #16]	; (80110fc <vTaskSuspendAll+0x18>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	3301      	adds	r3, #1
 80110ee:	4a03      	ldr	r2, [pc, #12]	; (80110fc <vTaskSuspendAll+0x18>)
 80110f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80110f2:	bf00      	nop
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	200022f0 	.word	0x200022f0

08011100 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b084      	sub	sp, #16
 8011104:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801110a:	2300      	movs	r3, #0
 801110c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801110e:	4b43      	ldr	r3, [pc, #268]	; (801121c <xTaskResumeAll+0x11c>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d10c      	bne.n	8011130 <xTaskResumeAll+0x30>
	__asm volatile
 8011116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111a:	b672      	cpsid	i
 801111c:	f383 8811 	msr	BASEPRI, r3
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	f3bf 8f4f 	dsb	sy
 8011128:	b662      	cpsie	i
 801112a:	603b      	str	r3, [r7, #0]
}
 801112c:	bf00      	nop
 801112e:	e7fe      	b.n	801112e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011130:	f001 fa24 	bl	801257c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011134:	4b39      	ldr	r3, [pc, #228]	; (801121c <xTaskResumeAll+0x11c>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	3b01      	subs	r3, #1
 801113a:	4a38      	ldr	r2, [pc, #224]	; (801121c <xTaskResumeAll+0x11c>)
 801113c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801113e:	4b37      	ldr	r3, [pc, #220]	; (801121c <xTaskResumeAll+0x11c>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d162      	bne.n	801120c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011146:	4b36      	ldr	r3, [pc, #216]	; (8011220 <xTaskResumeAll+0x120>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d05e      	beq.n	801120c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801114e:	e02f      	b.n	80111b0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011150:	4b34      	ldr	r3, [pc, #208]	; (8011224 <xTaskResumeAll+0x124>)
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	3318      	adds	r3, #24
 801115c:	4618      	mov	r0, r3
 801115e:	f7fe fcd7 	bl	800fb10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	3304      	adds	r3, #4
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe fcd2 	bl	800fb10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011170:	4b2d      	ldr	r3, [pc, #180]	; (8011228 <xTaskResumeAll+0x128>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	429a      	cmp	r2, r3
 8011176:	d903      	bls.n	8011180 <xTaskResumeAll+0x80>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801117c:	4a2a      	ldr	r2, [pc, #168]	; (8011228 <xTaskResumeAll+0x128>)
 801117e:	6013      	str	r3, [r2, #0]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011184:	4613      	mov	r3, r2
 8011186:	009b      	lsls	r3, r3, #2
 8011188:	4413      	add	r3, r2
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	4a27      	ldr	r2, [pc, #156]	; (801122c <xTaskResumeAll+0x12c>)
 801118e:	441a      	add	r2, r3
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	3304      	adds	r3, #4
 8011194:	4619      	mov	r1, r3
 8011196:	4610      	mov	r0, r2
 8011198:	f7fe fc5d 	bl	800fa56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a0:	4b23      	ldr	r3, [pc, #140]	; (8011230 <xTaskResumeAll+0x130>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d302      	bcc.n	80111b0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80111aa:	4b22      	ldr	r3, [pc, #136]	; (8011234 <xTaskResumeAll+0x134>)
 80111ac:	2201      	movs	r2, #1
 80111ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111b0:	4b1c      	ldr	r3, [pc, #112]	; (8011224 <xTaskResumeAll+0x124>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1cb      	bne.n	8011150 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d001      	beq.n	80111c2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111be:	f000 fb6f 	bl	80118a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80111c2:	4b1d      	ldr	r3, [pc, #116]	; (8011238 <xTaskResumeAll+0x138>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d010      	beq.n	80111f0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111ce:	f000 f847 	bl	8011260 <xTaskIncrementTick>
 80111d2:	4603      	mov	r3, r0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d002      	beq.n	80111de <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80111d8:	4b16      	ldr	r3, [pc, #88]	; (8011234 <xTaskResumeAll+0x134>)
 80111da:	2201      	movs	r2, #1
 80111dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	3b01      	subs	r3, #1
 80111e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1f1      	bne.n	80111ce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80111ea:	4b13      	ldr	r3, [pc, #76]	; (8011238 <xTaskResumeAll+0x138>)
 80111ec:	2200      	movs	r2, #0
 80111ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111f0:	4b10      	ldr	r3, [pc, #64]	; (8011234 <xTaskResumeAll+0x134>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d009      	beq.n	801120c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111f8:	2301      	movs	r3, #1
 80111fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111fc:	4b0f      	ldr	r3, [pc, #60]	; (801123c <xTaskResumeAll+0x13c>)
 80111fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011202:	601a      	str	r2, [r3, #0]
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801120c:	f001 f9ea 	bl	80125e4 <vPortExitCritical>

	return xAlreadyYielded;
 8011210:	68bb      	ldr	r3, [r7, #8]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3710      	adds	r7, #16
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	200022f0 	.word	0x200022f0
 8011220:	200022c8 	.word	0x200022c8
 8011224:	20002288 	.word	0x20002288
 8011228:	200022d0 	.word	0x200022d0
 801122c:	20001df8 	.word	0x20001df8
 8011230:	20001df4 	.word	0x20001df4
 8011234:	200022dc 	.word	0x200022dc
 8011238:	200022d8 	.word	0x200022d8
 801123c:	e000ed04 	.word	0xe000ed04

08011240 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011240:	b480      	push	{r7}
 8011242:	b083      	sub	sp, #12
 8011244:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011246:	4b05      	ldr	r3, [pc, #20]	; (801125c <xTaskGetTickCount+0x1c>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801124c:	687b      	ldr	r3, [r7, #4]
}
 801124e:	4618      	mov	r0, r3
 8011250:	370c      	adds	r7, #12
 8011252:	46bd      	mov	sp, r7
 8011254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011258:	4770      	bx	lr
 801125a:	bf00      	nop
 801125c:	200022cc 	.word	0x200022cc

08011260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011266:	2300      	movs	r3, #0
 8011268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801126a:	4b50      	ldr	r3, [pc, #320]	; (80113ac <xTaskIncrementTick+0x14c>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	f040 808b 	bne.w	801138a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011274:	4b4e      	ldr	r3, [pc, #312]	; (80113b0 <xTaskIncrementTick+0x150>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	3301      	adds	r3, #1
 801127a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801127c:	4a4c      	ldr	r2, [pc, #304]	; (80113b0 <xTaskIncrementTick+0x150>)
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d122      	bne.n	80112ce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011288:	4b4a      	ldr	r3, [pc, #296]	; (80113b4 <xTaskIncrementTick+0x154>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d00c      	beq.n	80112ac <xTaskIncrementTick+0x4c>
	__asm volatile
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	b672      	cpsid	i
 8011298:	f383 8811 	msr	BASEPRI, r3
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	b662      	cpsie	i
 80112a6:	603b      	str	r3, [r7, #0]
}
 80112a8:	bf00      	nop
 80112aa:	e7fe      	b.n	80112aa <xTaskIncrementTick+0x4a>
 80112ac:	4b41      	ldr	r3, [pc, #260]	; (80113b4 <xTaskIncrementTick+0x154>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	60fb      	str	r3, [r7, #12]
 80112b2:	4b41      	ldr	r3, [pc, #260]	; (80113b8 <xTaskIncrementTick+0x158>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a3f      	ldr	r2, [pc, #252]	; (80113b4 <xTaskIncrementTick+0x154>)
 80112b8:	6013      	str	r3, [r2, #0]
 80112ba:	4a3f      	ldr	r2, [pc, #252]	; (80113b8 <xTaskIncrementTick+0x158>)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	4b3e      	ldr	r3, [pc, #248]	; (80113bc <xTaskIncrementTick+0x15c>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	3301      	adds	r3, #1
 80112c6:	4a3d      	ldr	r2, [pc, #244]	; (80113bc <xTaskIncrementTick+0x15c>)
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	f000 fae9 	bl	80118a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112ce:	4b3c      	ldr	r3, [pc, #240]	; (80113c0 <xTaskIncrementTick+0x160>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d349      	bcc.n	801136c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112d8:	4b36      	ldr	r3, [pc, #216]	; (80113b4 <xTaskIncrementTick+0x154>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d104      	bne.n	80112ec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e2:	4b37      	ldr	r3, [pc, #220]	; (80113c0 <xTaskIncrementTick+0x160>)
 80112e4:	f04f 32ff 	mov.w	r2, #4294967295
 80112e8:	601a      	str	r2, [r3, #0]
					break;
 80112ea:	e03f      	b.n	801136c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112ec:	4b31      	ldr	r3, [pc, #196]	; (80113b4 <xTaskIncrementTick+0x154>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112fc:	693a      	ldr	r2, [r7, #16]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	429a      	cmp	r2, r3
 8011302:	d203      	bcs.n	801130c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011304:	4a2e      	ldr	r2, [pc, #184]	; (80113c0 <xTaskIncrementTick+0x160>)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801130a:	e02f      	b.n	801136c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	3304      	adds	r3, #4
 8011310:	4618      	mov	r0, r3
 8011312:	f7fe fbfd 	bl	800fb10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	3318      	adds	r3, #24
 8011322:	4618      	mov	r0, r3
 8011324:	f7fe fbf4 	bl	800fb10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801132c:	4b25      	ldr	r3, [pc, #148]	; (80113c4 <xTaskIncrementTick+0x164>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d903      	bls.n	801133c <xTaskIncrementTick+0xdc>
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011338:	4a22      	ldr	r2, [pc, #136]	; (80113c4 <xTaskIncrementTick+0x164>)
 801133a:	6013      	str	r3, [r2, #0]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011340:	4613      	mov	r3, r2
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	4413      	add	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4a1f      	ldr	r2, [pc, #124]	; (80113c8 <xTaskIncrementTick+0x168>)
 801134a:	441a      	add	r2, r3
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	3304      	adds	r3, #4
 8011350:	4619      	mov	r1, r3
 8011352:	4610      	mov	r0, r2
 8011354:	f7fe fb7f 	bl	800fa56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801135c:	4b1b      	ldr	r3, [pc, #108]	; (80113cc <xTaskIncrementTick+0x16c>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011362:	429a      	cmp	r2, r3
 8011364:	d3b8      	bcc.n	80112d8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011366:	2301      	movs	r3, #1
 8011368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801136a:	e7b5      	b.n	80112d8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801136c:	4b17      	ldr	r3, [pc, #92]	; (80113cc <xTaskIncrementTick+0x16c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011372:	4915      	ldr	r1, [pc, #84]	; (80113c8 <xTaskIncrementTick+0x168>)
 8011374:	4613      	mov	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	440b      	add	r3, r1
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d907      	bls.n	8011394 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011384:	2301      	movs	r3, #1
 8011386:	617b      	str	r3, [r7, #20]
 8011388:	e004      	b.n	8011394 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801138a:	4b11      	ldr	r3, [pc, #68]	; (80113d0 <xTaskIncrementTick+0x170>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	3301      	adds	r3, #1
 8011390:	4a0f      	ldr	r2, [pc, #60]	; (80113d0 <xTaskIncrementTick+0x170>)
 8011392:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011394:	4b0f      	ldr	r3, [pc, #60]	; (80113d4 <xTaskIncrementTick+0x174>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d001      	beq.n	80113a0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 801139c:	2301      	movs	r3, #1
 801139e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80113a0:	697b      	ldr	r3, [r7, #20]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	200022f0 	.word	0x200022f0
 80113b0:	200022cc 	.word	0x200022cc
 80113b4:	20002280 	.word	0x20002280
 80113b8:	20002284 	.word	0x20002284
 80113bc:	200022e0 	.word	0x200022e0
 80113c0:	200022e8 	.word	0x200022e8
 80113c4:	200022d0 	.word	0x200022d0
 80113c8:	20001df8 	.word	0x20001df8
 80113cc:	20001df4 	.word	0x20001df4
 80113d0:	200022d8 	.word	0x200022d8
 80113d4:	200022dc 	.word	0x200022dc

080113d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113d8:	b480      	push	{r7}
 80113da:	b085      	sub	sp, #20
 80113dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113de:	4b2b      	ldr	r3, [pc, #172]	; (801148c <vTaskSwitchContext+0xb4>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d003      	beq.n	80113ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113e6:	4b2a      	ldr	r3, [pc, #168]	; (8011490 <vTaskSwitchContext+0xb8>)
 80113e8:	2201      	movs	r2, #1
 80113ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113ec:	e048      	b.n	8011480 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80113ee:	4b28      	ldr	r3, [pc, #160]	; (8011490 <vTaskSwitchContext+0xb8>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113f4:	4b27      	ldr	r3, [pc, #156]	; (8011494 <vTaskSwitchContext+0xbc>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	60fb      	str	r3, [r7, #12]
 80113fa:	e012      	b.n	8011422 <vTaskSwitchContext+0x4a>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d10c      	bne.n	801141c <vTaskSwitchContext+0x44>
	__asm volatile
 8011402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011406:	b672      	cpsid	i
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	b662      	cpsie	i
 8011416:	607b      	str	r3, [r7, #4]
}
 8011418:	bf00      	nop
 801141a:	e7fe      	b.n	801141a <vTaskSwitchContext+0x42>
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	3b01      	subs	r3, #1
 8011420:	60fb      	str	r3, [r7, #12]
 8011422:	491d      	ldr	r1, [pc, #116]	; (8011498 <vTaskSwitchContext+0xc0>)
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	4613      	mov	r3, r2
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	440b      	add	r3, r1
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d0e2      	beq.n	80113fc <vTaskSwitchContext+0x24>
 8011436:	68fa      	ldr	r2, [r7, #12]
 8011438:	4613      	mov	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4413      	add	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	4a15      	ldr	r2, [pc, #84]	; (8011498 <vTaskSwitchContext+0xc0>)
 8011442:	4413      	add	r3, r2
 8011444:	60bb      	str	r3, [r7, #8]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	685a      	ldr	r2, [r3, #4]
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	605a      	str	r2, [r3, #4]
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	685a      	ldr	r2, [r3, #4]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	3308      	adds	r3, #8
 8011458:	429a      	cmp	r2, r3
 801145a:	d104      	bne.n	8011466 <vTaskSwitchContext+0x8e>
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	605a      	str	r2, [r3, #4]
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	4a0b      	ldr	r2, [pc, #44]	; (801149c <vTaskSwitchContext+0xc4>)
 801146e:	6013      	str	r3, [r2, #0]
 8011470:	4a08      	ldr	r2, [pc, #32]	; (8011494 <vTaskSwitchContext+0xbc>)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011476:	4b09      	ldr	r3, [pc, #36]	; (801149c <vTaskSwitchContext+0xc4>)
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	3354      	adds	r3, #84	; 0x54
 801147c:	4a08      	ldr	r2, [pc, #32]	; (80114a0 <vTaskSwitchContext+0xc8>)
 801147e:	6013      	str	r3, [r2, #0]
}
 8011480:	bf00      	nop
 8011482:	3714      	adds	r7, #20
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr
 801148c:	200022f0 	.word	0x200022f0
 8011490:	200022dc 	.word	0x200022dc
 8011494:	200022d0 	.word	0x200022d0
 8011498:	20001df8 	.word	0x20001df8
 801149c:	20001df4 	.word	0x20001df4
 80114a0:	200001c0 	.word	0x200001c0

080114a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b084      	sub	sp, #16
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d10c      	bne.n	80114ce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80114b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b8:	b672      	cpsid	i
 80114ba:	f383 8811 	msr	BASEPRI, r3
 80114be:	f3bf 8f6f 	isb	sy
 80114c2:	f3bf 8f4f 	dsb	sy
 80114c6:	b662      	cpsie	i
 80114c8:	60fb      	str	r3, [r7, #12]
}
 80114ca:	bf00      	nop
 80114cc:	e7fe      	b.n	80114cc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114ce:	4b07      	ldr	r3, [pc, #28]	; (80114ec <vTaskPlaceOnEventList+0x48>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	3318      	adds	r3, #24
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7fe fae1 	bl	800fa9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114dc:	2101      	movs	r1, #1
 80114de:	6838      	ldr	r0, [r7, #0]
 80114e0:	f000 fb90 	bl	8011c04 <prvAddCurrentTaskToDelayedList>
}
 80114e4:	bf00      	nop
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	20001df4 	.word	0x20001df4

080114f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10c      	bne.n	801151c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	b672      	cpsid	i
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	b662      	cpsie	i
 8011516:	617b      	str	r3, [r7, #20]
}
 8011518:	bf00      	nop
 801151a:	e7fe      	b.n	801151a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801151c:	4b0a      	ldr	r3, [pc, #40]	; (8011548 <vTaskPlaceOnEventListRestricted+0x58>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	3318      	adds	r3, #24
 8011522:	4619      	mov	r1, r3
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f7fe fa96 	bl	800fa56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d002      	beq.n	8011536 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8011530:	f04f 33ff 	mov.w	r3, #4294967295
 8011534:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011536:	6879      	ldr	r1, [r7, #4]
 8011538:	68b8      	ldr	r0, [r7, #8]
 801153a:	f000 fb63 	bl	8011c04 <prvAddCurrentTaskToDelayedList>
	}
 801153e:	bf00      	nop
 8011540:	3718      	adds	r7, #24
 8011542:	46bd      	mov	sp, r7
 8011544:	bd80      	pop	{r7, pc}
 8011546:	bf00      	nop
 8011548:	20001df4 	.word	0x20001df4

0801154c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b086      	sub	sp, #24
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d10c      	bne.n	801157c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011566:	b672      	cpsid	i
 8011568:	f383 8811 	msr	BASEPRI, r3
 801156c:	f3bf 8f6f 	isb	sy
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	b662      	cpsie	i
 8011576:	60fb      	str	r3, [r7, #12]
}
 8011578:	bf00      	nop
 801157a:	e7fe      	b.n	801157a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	3318      	adds	r3, #24
 8011580:	4618      	mov	r0, r3
 8011582:	f7fe fac5 	bl	800fb10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011586:	4b1e      	ldr	r3, [pc, #120]	; (8011600 <xTaskRemoveFromEventList+0xb4>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d11d      	bne.n	80115ca <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	3304      	adds	r3, #4
 8011592:	4618      	mov	r0, r3
 8011594:	f7fe fabc 	bl	800fb10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159c:	4b19      	ldr	r3, [pc, #100]	; (8011604 <xTaskRemoveFromEventList+0xb8>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d903      	bls.n	80115ac <xTaskRemoveFromEventList+0x60>
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a8:	4a16      	ldr	r2, [pc, #88]	; (8011604 <xTaskRemoveFromEventList+0xb8>)
 80115aa:	6013      	str	r3, [r2, #0]
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b0:	4613      	mov	r3, r2
 80115b2:	009b      	lsls	r3, r3, #2
 80115b4:	4413      	add	r3, r2
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	4a13      	ldr	r2, [pc, #76]	; (8011608 <xTaskRemoveFromEventList+0xbc>)
 80115ba:	441a      	add	r2, r3
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	3304      	adds	r3, #4
 80115c0:	4619      	mov	r1, r3
 80115c2:	4610      	mov	r0, r2
 80115c4:	f7fe fa47 	bl	800fa56 <vListInsertEnd>
 80115c8:	e005      	b.n	80115d6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	3318      	adds	r3, #24
 80115ce:	4619      	mov	r1, r3
 80115d0:	480e      	ldr	r0, [pc, #56]	; (801160c <xTaskRemoveFromEventList+0xc0>)
 80115d2:	f7fe fa40 	bl	800fa56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115da:	4b0d      	ldr	r3, [pc, #52]	; (8011610 <xTaskRemoveFromEventList+0xc4>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d905      	bls.n	80115f0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80115e4:	2301      	movs	r3, #1
 80115e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80115e8:	4b0a      	ldr	r3, [pc, #40]	; (8011614 <xTaskRemoveFromEventList+0xc8>)
 80115ea:	2201      	movs	r2, #1
 80115ec:	601a      	str	r2, [r3, #0]
 80115ee:	e001      	b.n	80115f4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80115f0:	2300      	movs	r3, #0
 80115f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115f4:	697b      	ldr	r3, [r7, #20]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3718      	adds	r7, #24
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	200022f0 	.word	0x200022f0
 8011604:	200022d0 	.word	0x200022d0
 8011608:	20001df8 	.word	0x20001df8
 801160c:	20002288 	.word	0x20002288
 8011610:	20001df4 	.word	0x20001df4
 8011614:	200022dc 	.word	0x200022dc

08011618 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011618:	b480      	push	{r7}
 801161a:	b083      	sub	sp, #12
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011620:	4b06      	ldr	r3, [pc, #24]	; (801163c <vTaskInternalSetTimeOutState+0x24>)
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011628:	4b05      	ldr	r3, [pc, #20]	; (8011640 <vTaskInternalSetTimeOutState+0x28>)
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	605a      	str	r2, [r3, #4]
}
 8011630:	bf00      	nop
 8011632:	370c      	adds	r7, #12
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr
 801163c:	200022e0 	.word	0x200022e0
 8011640:	200022cc 	.word	0x200022cc

08011644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b088      	sub	sp, #32
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d10c      	bne.n	801166e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8011654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011658:	b672      	cpsid	i
 801165a:	f383 8811 	msr	BASEPRI, r3
 801165e:	f3bf 8f6f 	isb	sy
 8011662:	f3bf 8f4f 	dsb	sy
 8011666:	b662      	cpsie	i
 8011668:	613b      	str	r3, [r7, #16]
}
 801166a:	bf00      	nop
 801166c:	e7fe      	b.n	801166c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10c      	bne.n	801168e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011678:	b672      	cpsid	i
 801167a:	f383 8811 	msr	BASEPRI, r3
 801167e:	f3bf 8f6f 	isb	sy
 8011682:	f3bf 8f4f 	dsb	sy
 8011686:	b662      	cpsie	i
 8011688:	60fb      	str	r3, [r7, #12]
}
 801168a:	bf00      	nop
 801168c:	e7fe      	b.n	801168c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801168e:	f000 ff75 	bl	801257c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011692:	4b1d      	ldr	r3, [pc, #116]	; (8011708 <xTaskCheckForTimeOut+0xc4>)
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	69ba      	ldr	r2, [r7, #24]
 801169e:	1ad3      	subs	r3, r2, r3
 80116a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116aa:	d102      	bne.n	80116b2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116ac:	2300      	movs	r3, #0
 80116ae:	61fb      	str	r3, [r7, #28]
 80116b0:	e023      	b.n	80116fa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681a      	ldr	r2, [r3, #0]
 80116b6:	4b15      	ldr	r3, [pc, #84]	; (801170c <xTaskCheckForTimeOut+0xc8>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d007      	beq.n	80116ce <xTaskCheckForTimeOut+0x8a>
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	69ba      	ldr	r2, [r7, #24]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d302      	bcc.n	80116ce <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116c8:	2301      	movs	r3, #1
 80116ca:	61fb      	str	r3, [r7, #28]
 80116cc:	e015      	b.n	80116fa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	697a      	ldr	r2, [r7, #20]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d20b      	bcs.n	80116f0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	1ad2      	subs	r2, r2, r3
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7ff ff97 	bl	8011618 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80116ea:	2300      	movs	r3, #0
 80116ec:	61fb      	str	r3, [r7, #28]
 80116ee:	e004      	b.n	80116fa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	2200      	movs	r2, #0
 80116f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80116f6:	2301      	movs	r3, #1
 80116f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116fa:	f000 ff73 	bl	80125e4 <vPortExitCritical>

	return xReturn;
 80116fe:	69fb      	ldr	r3, [r7, #28]
}
 8011700:	4618      	mov	r0, r3
 8011702:	3720      	adds	r7, #32
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}
 8011708:	200022cc 	.word	0x200022cc
 801170c:	200022e0 	.word	0x200022e0

08011710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011710:	b480      	push	{r7}
 8011712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011714:	4b03      	ldr	r3, [pc, #12]	; (8011724 <vTaskMissedYield+0x14>)
 8011716:	2201      	movs	r2, #1
 8011718:	601a      	str	r2, [r3, #0]
}
 801171a:	bf00      	nop
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	200022dc 	.word	0x200022dc

08011728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011730:	f000 f852 	bl	80117d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011734:	4b06      	ldr	r3, [pc, #24]	; (8011750 <prvIdleTask+0x28>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b01      	cmp	r3, #1
 801173a:	d9f9      	bls.n	8011730 <prvIdleTask+0x8>
			{
				taskYIELD();
 801173c:	4b05      	ldr	r3, [pc, #20]	; (8011754 <prvIdleTask+0x2c>)
 801173e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011742:	601a      	str	r2, [r3, #0]
 8011744:	f3bf 8f4f 	dsb	sy
 8011748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801174c:	e7f0      	b.n	8011730 <prvIdleTask+0x8>
 801174e:	bf00      	nop
 8011750:	20001df8 	.word	0x20001df8
 8011754:	e000ed04 	.word	0xe000ed04

08011758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801175e:	2300      	movs	r3, #0
 8011760:	607b      	str	r3, [r7, #4]
 8011762:	e00c      	b.n	801177e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011764:	687a      	ldr	r2, [r7, #4]
 8011766:	4613      	mov	r3, r2
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	4413      	add	r3, r2
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	4a12      	ldr	r2, [pc, #72]	; (80117b8 <prvInitialiseTaskLists+0x60>)
 8011770:	4413      	add	r3, r2
 8011772:	4618      	mov	r0, r3
 8011774:	f7fe f942 	bl	800f9fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	3301      	adds	r3, #1
 801177c:	607b      	str	r3, [r7, #4]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b37      	cmp	r3, #55	; 0x37
 8011782:	d9ef      	bls.n	8011764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011784:	480d      	ldr	r0, [pc, #52]	; (80117bc <prvInitialiseTaskLists+0x64>)
 8011786:	f7fe f939 	bl	800f9fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801178a:	480d      	ldr	r0, [pc, #52]	; (80117c0 <prvInitialiseTaskLists+0x68>)
 801178c:	f7fe f936 	bl	800f9fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011790:	480c      	ldr	r0, [pc, #48]	; (80117c4 <prvInitialiseTaskLists+0x6c>)
 8011792:	f7fe f933 	bl	800f9fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011796:	480c      	ldr	r0, [pc, #48]	; (80117c8 <prvInitialiseTaskLists+0x70>)
 8011798:	f7fe f930 	bl	800f9fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801179c:	480b      	ldr	r0, [pc, #44]	; (80117cc <prvInitialiseTaskLists+0x74>)
 801179e:	f7fe f92d 	bl	800f9fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117a2:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <prvInitialiseTaskLists+0x78>)
 80117a4:	4a05      	ldr	r2, [pc, #20]	; (80117bc <prvInitialiseTaskLists+0x64>)
 80117a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117a8:	4b0a      	ldr	r3, [pc, #40]	; (80117d4 <prvInitialiseTaskLists+0x7c>)
 80117aa:	4a05      	ldr	r2, [pc, #20]	; (80117c0 <prvInitialiseTaskLists+0x68>)
 80117ac:	601a      	str	r2, [r3, #0]
}
 80117ae:	bf00      	nop
 80117b0:	3708      	adds	r7, #8
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	20001df8 	.word	0x20001df8
 80117bc:	20002258 	.word	0x20002258
 80117c0:	2000226c 	.word	0x2000226c
 80117c4:	20002288 	.word	0x20002288
 80117c8:	2000229c 	.word	0x2000229c
 80117cc:	200022b4 	.word	0x200022b4
 80117d0:	20002280 	.word	0x20002280
 80117d4:	20002284 	.word	0x20002284

080117d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117de:	e019      	b.n	8011814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80117e0:	f000 fecc 	bl	801257c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117e4:	4b10      	ldr	r3, [pc, #64]	; (8011828 <prvCheckTasksWaitingTermination+0x50>)
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	3304      	adds	r3, #4
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fe f98d 	bl	800fb10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117f6:	4b0d      	ldr	r3, [pc, #52]	; (801182c <prvCheckTasksWaitingTermination+0x54>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	3b01      	subs	r3, #1
 80117fc:	4a0b      	ldr	r2, [pc, #44]	; (801182c <prvCheckTasksWaitingTermination+0x54>)
 80117fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011800:	4b0b      	ldr	r3, [pc, #44]	; (8011830 <prvCheckTasksWaitingTermination+0x58>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	3b01      	subs	r3, #1
 8011806:	4a0a      	ldr	r2, [pc, #40]	; (8011830 <prvCheckTasksWaitingTermination+0x58>)
 8011808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801180a:	f000 feeb 	bl	80125e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 f810 	bl	8011834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011814:	4b06      	ldr	r3, [pc, #24]	; (8011830 <prvCheckTasksWaitingTermination+0x58>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d1e1      	bne.n	80117e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801181c:	bf00      	nop
 801181e:	bf00      	nop
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	2000229c 	.word	0x2000229c
 801182c:	200022c8 	.word	0x200022c8
 8011830:	200022b0 	.word	0x200022b0

08011834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	3354      	adds	r3, #84	; 0x54
 8011840:	4618      	mov	r0, r3
 8011842:	f001 fc15 	bl	8013070 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801184c:	2b00      	cmp	r3, #0
 801184e:	d108      	bne.n	8011862 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011854:	4618      	mov	r0, r3
 8011856:	f001 f887 	bl	8012968 <vPortFree>
				vPortFree( pxTCB );
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f001 f884 	bl	8012968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011860:	e01a      	b.n	8011898 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011868:	2b01      	cmp	r3, #1
 801186a:	d103      	bne.n	8011874 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f001 f87b 	bl	8012968 <vPortFree>
	}
 8011872:	e011      	b.n	8011898 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801187a:	2b02      	cmp	r3, #2
 801187c:	d00c      	beq.n	8011898 <prvDeleteTCB+0x64>
	__asm volatile
 801187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011882:	b672      	cpsid	i
 8011884:	f383 8811 	msr	BASEPRI, r3
 8011888:	f3bf 8f6f 	isb	sy
 801188c:	f3bf 8f4f 	dsb	sy
 8011890:	b662      	cpsie	i
 8011892:	60fb      	str	r3, [r7, #12]
}
 8011894:	bf00      	nop
 8011896:	e7fe      	b.n	8011896 <prvDeleteTCB+0x62>
	}
 8011898:	bf00      	nop
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}

080118a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118a6:	4b0c      	ldr	r3, [pc, #48]	; (80118d8 <prvResetNextTaskUnblockTime+0x38>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118b0:	4b0a      	ldr	r3, [pc, #40]	; (80118dc <prvResetNextTaskUnblockTime+0x3c>)
 80118b2:	f04f 32ff 	mov.w	r2, #4294967295
 80118b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118b8:	e008      	b.n	80118cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118ba:	4b07      	ldr	r3, [pc, #28]	; (80118d8 <prvResetNextTaskUnblockTime+0x38>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	4a04      	ldr	r2, [pc, #16]	; (80118dc <prvResetNextTaskUnblockTime+0x3c>)
 80118ca:	6013      	str	r3, [r2, #0]
}
 80118cc:	bf00      	nop
 80118ce:	370c      	adds	r7, #12
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr
 80118d8:	20002280 	.word	0x20002280
 80118dc:	200022e8 	.word	0x200022e8

080118e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80118e6:	4b0b      	ldr	r3, [pc, #44]	; (8011914 <xTaskGetSchedulerState+0x34>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d102      	bne.n	80118f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80118ee:	2301      	movs	r3, #1
 80118f0:	607b      	str	r3, [r7, #4]
 80118f2:	e008      	b.n	8011906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118f4:	4b08      	ldr	r3, [pc, #32]	; (8011918 <xTaskGetSchedulerState+0x38>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118fc:	2302      	movs	r3, #2
 80118fe:	607b      	str	r3, [r7, #4]
 8011900:	e001      	b.n	8011906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011902:	2300      	movs	r3, #0
 8011904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011906:	687b      	ldr	r3, [r7, #4]
	}
 8011908:	4618      	mov	r0, r3
 801190a:	370c      	adds	r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr
 8011914:	200022d4 	.word	0x200022d4
 8011918:	200022f0 	.word	0x200022f0

0801191c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011928:	2300      	movs	r3, #0
 801192a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d051      	beq.n	80119d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011936:	4b2a      	ldr	r3, [pc, #168]	; (80119e0 <xTaskPriorityInherit+0xc4>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801193c:	429a      	cmp	r2, r3
 801193e:	d241      	bcs.n	80119c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	699b      	ldr	r3, [r3, #24]
 8011944:	2b00      	cmp	r3, #0
 8011946:	db06      	blt.n	8011956 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011948:	4b25      	ldr	r3, [pc, #148]	; (80119e0 <xTaskPriorityInherit+0xc4>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801194e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	6959      	ldr	r1, [r3, #20]
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801195e:	4613      	mov	r3, r2
 8011960:	009b      	lsls	r3, r3, #2
 8011962:	4413      	add	r3, r2
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	4a1f      	ldr	r2, [pc, #124]	; (80119e4 <xTaskPriorityInherit+0xc8>)
 8011968:	4413      	add	r3, r2
 801196a:	4299      	cmp	r1, r3
 801196c:	d122      	bne.n	80119b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	3304      	adds	r3, #4
 8011972:	4618      	mov	r0, r3
 8011974:	f7fe f8cc 	bl	800fb10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011978:	4b19      	ldr	r3, [pc, #100]	; (80119e0 <xTaskPriorityInherit+0xc4>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011986:	4b18      	ldr	r3, [pc, #96]	; (80119e8 <xTaskPriorityInherit+0xcc>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	429a      	cmp	r2, r3
 801198c:	d903      	bls.n	8011996 <xTaskPriorityInherit+0x7a>
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011992:	4a15      	ldr	r2, [pc, #84]	; (80119e8 <xTaskPriorityInherit+0xcc>)
 8011994:	6013      	str	r3, [r2, #0]
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199a:	4613      	mov	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	4413      	add	r3, r2
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	4a10      	ldr	r2, [pc, #64]	; (80119e4 <xTaskPriorityInherit+0xc8>)
 80119a4:	441a      	add	r2, r3
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	3304      	adds	r3, #4
 80119aa:	4619      	mov	r1, r3
 80119ac:	4610      	mov	r0, r2
 80119ae:	f7fe f852 	bl	800fa56 <vListInsertEnd>
 80119b2:	e004      	b.n	80119be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119b4:	4b0a      	ldr	r3, [pc, #40]	; (80119e0 <xTaskPriorityInherit+0xc4>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80119be:	2301      	movs	r3, #1
 80119c0:	60fb      	str	r3, [r7, #12]
 80119c2:	e008      	b.n	80119d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119c8:	4b05      	ldr	r3, [pc, #20]	; (80119e0 <xTaskPriorityInherit+0xc4>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d201      	bcs.n	80119d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80119d2:	2301      	movs	r3, #1
 80119d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119d6:	68fb      	ldr	r3, [r7, #12]
	}
 80119d8:	4618      	mov	r0, r3
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	20001df4 	.word	0x20001df4
 80119e4:	20001df8 	.word	0x20001df8
 80119e8:	200022d0 	.word	0x200022d0

080119ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b086      	sub	sp, #24
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119f8:	2300      	movs	r3, #0
 80119fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d05a      	beq.n	8011ab8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a02:	4b30      	ldr	r3, [pc, #192]	; (8011ac4 <xTaskPriorityDisinherit+0xd8>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	693a      	ldr	r2, [r7, #16]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d00c      	beq.n	8011a26 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a10:	b672      	cpsid	i
 8011a12:	f383 8811 	msr	BASEPRI, r3
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	f3bf 8f4f 	dsb	sy
 8011a1e:	b662      	cpsie	i
 8011a20:	60fb      	str	r3, [r7, #12]
}
 8011a22:	bf00      	nop
 8011a24:	e7fe      	b.n	8011a24 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d10c      	bne.n	8011a48 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a32:	b672      	cpsid	i
 8011a34:	f383 8811 	msr	BASEPRI, r3
 8011a38:	f3bf 8f6f 	isb	sy
 8011a3c:	f3bf 8f4f 	dsb	sy
 8011a40:	b662      	cpsie	i
 8011a42:	60bb      	str	r3, [r7, #8]
}
 8011a44:	bf00      	nop
 8011a46:	e7fe      	b.n	8011a46 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a4c:	1e5a      	subs	r2, r3, #1
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d02c      	beq.n	8011ab8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d128      	bne.n	8011ab8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fe f850 	bl	800fb10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a88:	4b0f      	ldr	r3, [pc, #60]	; (8011ac8 <xTaskPriorityDisinherit+0xdc>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d903      	bls.n	8011a98 <xTaskPriorityDisinherit+0xac>
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a94:	4a0c      	ldr	r2, [pc, #48]	; (8011ac8 <xTaskPriorityDisinherit+0xdc>)
 8011a96:	6013      	str	r3, [r2, #0]
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4413      	add	r3, r2
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	4a09      	ldr	r2, [pc, #36]	; (8011acc <xTaskPriorityDisinherit+0xe0>)
 8011aa6:	441a      	add	r2, r3
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	3304      	adds	r3, #4
 8011aac:	4619      	mov	r1, r3
 8011aae:	4610      	mov	r0, r2
 8011ab0:	f7fd ffd1 	bl	800fa56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ab8:	697b      	ldr	r3, [r7, #20]
	}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3718      	adds	r7, #24
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	20001df4 	.word	0x20001df4
 8011ac8:	200022d0 	.word	0x200022d0
 8011acc:	20001df8 	.word	0x20001df8

08011ad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b088      	sub	sp, #32
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011ade:	2301      	movs	r3, #1
 8011ae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d06e      	beq.n	8011bc6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10c      	bne.n	8011b0a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8011af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af4:	b672      	cpsid	i
 8011af6:	f383 8811 	msr	BASEPRI, r3
 8011afa:	f3bf 8f6f 	isb	sy
 8011afe:	f3bf 8f4f 	dsb	sy
 8011b02:	b662      	cpsie	i
 8011b04:	60fb      	str	r3, [r7, #12]
}
 8011b06:	bf00      	nop
 8011b08:	e7fe      	b.n	8011b08 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b0e:	683a      	ldr	r2, [r7, #0]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d902      	bls.n	8011b1a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	61fb      	str	r3, [r7, #28]
 8011b18:	e002      	b.n	8011b20 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b1e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b20:	69bb      	ldr	r3, [r7, #24]
 8011b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b24:	69fa      	ldr	r2, [r7, #28]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d04d      	beq.n	8011bc6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b2e:	697a      	ldr	r2, [r7, #20]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d148      	bne.n	8011bc6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b34:	4b26      	ldr	r3, [pc, #152]	; (8011bd0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	69ba      	ldr	r2, [r7, #24]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d10c      	bne.n	8011b58 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	b672      	cpsid	i
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	b662      	cpsie	i
 8011b52:	60bb      	str	r3, [r7, #8]
}
 8011b54:	bf00      	nop
 8011b56:	e7fe      	b.n	8011b56 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	69fa      	ldr	r2, [r7, #28]
 8011b62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	699b      	ldr	r3, [r3, #24]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	db04      	blt.n	8011b76 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	6959      	ldr	r1, [r3, #20]
 8011b7a:	693a      	ldr	r2, [r7, #16]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	009b      	lsls	r3, r3, #2
 8011b80:	4413      	add	r3, r2
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4a13      	ldr	r2, [pc, #76]	; (8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b86:	4413      	add	r3, r2
 8011b88:	4299      	cmp	r1, r3
 8011b8a:	d11c      	bne.n	8011bc6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	3304      	adds	r3, #4
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7fd ffbd 	bl	800fb10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b9a:	4b0f      	ldr	r3, [pc, #60]	; (8011bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d903      	bls.n	8011baa <vTaskPriorityDisinheritAfterTimeout+0xda>
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba6:	4a0c      	ldr	r2, [pc, #48]	; (8011bd8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011ba8:	6013      	str	r3, [r2, #0]
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bae:	4613      	mov	r3, r2
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4413      	add	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4a07      	ldr	r2, [pc, #28]	; (8011bd4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011bb8:	441a      	add	r2, r3
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	3304      	adds	r3, #4
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	4610      	mov	r0, r2
 8011bc2:	f7fd ff48 	bl	800fa56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bc6:	bf00      	nop
 8011bc8:	3720      	adds	r7, #32
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	20001df4 	.word	0x20001df4
 8011bd4:	20001df8 	.word	0x20001df8
 8011bd8:	200022d0 	.word	0x200022d0

08011bdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011bdc:	b480      	push	{r7}
 8011bde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011be0:	4b07      	ldr	r3, [pc, #28]	; (8011c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d004      	beq.n	8011bf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011be8:	4b05      	ldr	r3, [pc, #20]	; (8011c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bee:	3201      	adds	r2, #1
 8011bf0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011bf2:	4b03      	ldr	r3, [pc, #12]	; (8011c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
	}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfe:	4770      	bx	lr
 8011c00:	20001df4 	.word	0x20001df4

08011c04 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b084      	sub	sp, #16
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c0e:	4b21      	ldr	r3, [pc, #132]	; (8011c94 <prvAddCurrentTaskToDelayedList+0x90>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c14:	4b20      	ldr	r3, [pc, #128]	; (8011c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fd ff78 	bl	800fb10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c26:	d10a      	bne.n	8011c3e <prvAddCurrentTaskToDelayedList+0x3a>
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d007      	beq.n	8011c3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c2e:	4b1a      	ldr	r3, [pc, #104]	; (8011c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3304      	adds	r3, #4
 8011c34:	4619      	mov	r1, r3
 8011c36:	4819      	ldr	r0, [pc, #100]	; (8011c9c <prvAddCurrentTaskToDelayedList+0x98>)
 8011c38:	f7fd ff0d 	bl	800fa56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c3c:	e026      	b.n	8011c8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	4413      	add	r3, r2
 8011c44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c46:	4b14      	ldr	r3, [pc, #80]	; (8011c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c4e:	68ba      	ldr	r2, [r7, #8]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d209      	bcs.n	8011c6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c56:	4b12      	ldr	r3, [pc, #72]	; (8011ca0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	4b0f      	ldr	r3, [pc, #60]	; (8011c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	4619      	mov	r1, r3
 8011c62:	4610      	mov	r0, r2
 8011c64:	f7fd ff1b 	bl	800fa9e <vListInsert>
}
 8011c68:	e010      	b.n	8011c8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c6a:	4b0e      	ldr	r3, [pc, #56]	; (8011ca4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	4b0a      	ldr	r3, [pc, #40]	; (8011c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3304      	adds	r3, #4
 8011c74:	4619      	mov	r1, r3
 8011c76:	4610      	mov	r0, r2
 8011c78:	f7fd ff11 	bl	800fa9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d202      	bcs.n	8011c8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011c86:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	6013      	str	r3, [r2, #0]
}
 8011c8c:	bf00      	nop
 8011c8e:	3710      	adds	r7, #16
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	200022cc 	.word	0x200022cc
 8011c98:	20001df4 	.word	0x20001df4
 8011c9c:	200022b4 	.word	0x200022b4
 8011ca0:	20002284 	.word	0x20002284
 8011ca4:	20002280 	.word	0x20002280
 8011ca8:	200022e8 	.word	0x200022e8

08011cac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b08a      	sub	sp, #40	; 0x28
 8011cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011cb6:	f000 fb15 	bl	80122e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011cba:	4b1d      	ldr	r3, [pc, #116]	; (8011d30 <xTimerCreateTimerTask+0x84>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d021      	beq.n	8011d06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011cca:	1d3a      	adds	r2, r7, #4
 8011ccc:	f107 0108 	add.w	r1, r7, #8
 8011cd0:	f107 030c 	add.w	r3, r7, #12
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7fd fe77 	bl	800f9c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011cda:	6879      	ldr	r1, [r7, #4]
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	9202      	str	r2, [sp, #8]
 8011ce2:	9301      	str	r3, [sp, #4]
 8011ce4:	2302      	movs	r3, #2
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	2300      	movs	r3, #0
 8011cea:	460a      	mov	r2, r1
 8011cec:	4911      	ldr	r1, [pc, #68]	; (8011d34 <xTimerCreateTimerTask+0x88>)
 8011cee:	4812      	ldr	r0, [pc, #72]	; (8011d38 <xTimerCreateTimerTask+0x8c>)
 8011cf0:	f7fe ff8e 	bl	8010c10 <xTaskCreateStatic>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	4a11      	ldr	r2, [pc, #68]	; (8011d3c <xTimerCreateTimerTask+0x90>)
 8011cf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011cfa:	4b10      	ldr	r3, [pc, #64]	; (8011d3c <xTimerCreateTimerTask+0x90>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011d02:	2301      	movs	r3, #1
 8011d04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d10c      	bne.n	8011d26 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d10:	b672      	cpsid	i
 8011d12:	f383 8811 	msr	BASEPRI, r3
 8011d16:	f3bf 8f6f 	isb	sy
 8011d1a:	f3bf 8f4f 	dsb	sy
 8011d1e:	b662      	cpsie	i
 8011d20:	613b      	str	r3, [r7, #16]
}
 8011d22:	bf00      	nop
 8011d24:	e7fe      	b.n	8011d24 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011d26:	697b      	ldr	r3, [r7, #20]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3718      	adds	r7, #24
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}
 8011d30:	20002324 	.word	0x20002324
 8011d34:	08014270 	.word	0x08014270
 8011d38:	08011e7d 	.word	0x08011e7d
 8011d3c:	20002328 	.word	0x20002328

08011d40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b08a      	sub	sp, #40	; 0x28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]
 8011d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10c      	bne.n	8011d72 <xTimerGenericCommand+0x32>
	__asm volatile
 8011d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d5c:	b672      	cpsid	i
 8011d5e:	f383 8811 	msr	BASEPRI, r3
 8011d62:	f3bf 8f6f 	isb	sy
 8011d66:	f3bf 8f4f 	dsb	sy
 8011d6a:	b662      	cpsie	i
 8011d6c:	623b      	str	r3, [r7, #32]
}
 8011d6e:	bf00      	nop
 8011d70:	e7fe      	b.n	8011d70 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011d72:	4b1a      	ldr	r3, [pc, #104]	; (8011ddc <xTimerGenericCommand+0x9c>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d02a      	beq.n	8011dd0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	2b05      	cmp	r3, #5
 8011d8a:	dc18      	bgt.n	8011dbe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011d8c:	f7ff fda8 	bl	80118e0 <xTaskGetSchedulerState>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b02      	cmp	r3, #2
 8011d94:	d109      	bne.n	8011daa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011d96:	4b11      	ldr	r3, [pc, #68]	; (8011ddc <xTimerGenericCommand+0x9c>)
 8011d98:	6818      	ldr	r0, [r3, #0]
 8011d9a:	f107 0110 	add.w	r1, r7, #16
 8011d9e:	2300      	movs	r3, #0
 8011da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011da2:	f7fe f8a3 	bl	800feec <xQueueGenericSend>
 8011da6:	6278      	str	r0, [r7, #36]	; 0x24
 8011da8:	e012      	b.n	8011dd0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011daa:	4b0c      	ldr	r3, [pc, #48]	; (8011ddc <xTimerGenericCommand+0x9c>)
 8011dac:	6818      	ldr	r0, [r3, #0]
 8011dae:	f107 0110 	add.w	r1, r7, #16
 8011db2:	2300      	movs	r3, #0
 8011db4:	2200      	movs	r2, #0
 8011db6:	f7fe f899 	bl	800feec <xQueueGenericSend>
 8011dba:	6278      	str	r0, [r7, #36]	; 0x24
 8011dbc:	e008      	b.n	8011dd0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011dbe:	4b07      	ldr	r3, [pc, #28]	; (8011ddc <xTimerGenericCommand+0x9c>)
 8011dc0:	6818      	ldr	r0, [r3, #0]
 8011dc2:	f107 0110 	add.w	r1, r7, #16
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	683a      	ldr	r2, [r7, #0]
 8011dca:	f7fe f995 	bl	80100f8 <xQueueGenericSendFromISR>
 8011dce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3728      	adds	r7, #40	; 0x28
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	20002324 	.word	0x20002324

08011de0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b088      	sub	sp, #32
 8011de4:	af02      	add	r7, sp, #8
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dea:	4b23      	ldr	r3, [pc, #140]	; (8011e78 <prvProcessExpiredTimer+0x98>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	3304      	adds	r3, #4
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fd fe89 	bl	800fb10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e04:	f003 0304 	and.w	r3, r3, #4
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d024      	beq.n	8011e56 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	699a      	ldr	r2, [r3, #24]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	18d1      	adds	r1, r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	683a      	ldr	r2, [r7, #0]
 8011e18:	6978      	ldr	r0, [r7, #20]
 8011e1a:	f000 f8d3 	bl	8011fc4 <prvInsertTimerInActiveList>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d021      	beq.n	8011e68 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e24:	2300      	movs	r3, #0
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	2300      	movs	r3, #0
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	6978      	ldr	r0, [r7, #20]
 8011e30:	f7ff ff86 	bl	8011d40 <xTimerGenericCommand>
 8011e34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d115      	bne.n	8011e68 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e40:	b672      	cpsid	i
 8011e42:	f383 8811 	msr	BASEPRI, r3
 8011e46:	f3bf 8f6f 	isb	sy
 8011e4a:	f3bf 8f4f 	dsb	sy
 8011e4e:	b662      	cpsie	i
 8011e50:	60fb      	str	r3, [r7, #12]
}
 8011e52:	bf00      	nop
 8011e54:	e7fe      	b.n	8011e54 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e5c:	f023 0301 	bic.w	r3, r3, #1
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	6a1b      	ldr	r3, [r3, #32]
 8011e6c:	6978      	ldr	r0, [r7, #20]
 8011e6e:	4798      	blx	r3
}
 8011e70:	bf00      	nop
 8011e72:	3718      	adds	r7, #24
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	2000231c 	.word	0x2000231c

08011e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e84:	f107 0308 	add.w	r3, r7, #8
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f000 f857 	bl	8011f3c <prvGetNextExpireTime>
 8011e8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	4619      	mov	r1, r3
 8011e94:	68f8      	ldr	r0, [r7, #12]
 8011e96:	f000 f803 	bl	8011ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011e9a:	f000 f8d5 	bl	8012048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e9e:	e7f1      	b.n	8011e84 <prvTimerTask+0x8>

08011ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011eaa:	f7ff f91b 	bl	80110e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011eae:	f107 0308 	add.w	r3, r7, #8
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f000 f866 	bl	8011f84 <prvSampleTimeNow>
 8011eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d130      	bne.n	8011f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d10a      	bne.n	8011edc <prvProcessTimerOrBlockTask+0x3c>
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d806      	bhi.n	8011edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ece:	f7ff f917 	bl	8011100 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ed2:	68f9      	ldr	r1, [r7, #12]
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff ff83 	bl	8011de0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011eda:	e024      	b.n	8011f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d008      	beq.n	8011ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011ee2:	4b13      	ldr	r3, [pc, #76]	; (8011f30 <prvProcessTimerOrBlockTask+0x90>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <prvProcessTimerOrBlockTask+0x50>
 8011eec:	2301      	movs	r3, #1
 8011eee:	e000      	b.n	8011ef2 <prvProcessTimerOrBlockTask+0x52>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ef4:	4b0f      	ldr	r3, [pc, #60]	; (8011f34 <prvProcessTimerOrBlockTask+0x94>)
 8011ef6:	6818      	ldr	r0, [r3, #0]
 8011ef8:	687a      	ldr	r2, [r7, #4]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	683a      	ldr	r2, [r7, #0]
 8011f00:	4619      	mov	r1, r3
 8011f02:	f7fe fe51 	bl	8010ba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011f06:	f7ff f8fb 	bl	8011100 <xTaskResumeAll>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d10a      	bne.n	8011f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011f10:	4b09      	ldr	r3, [pc, #36]	; (8011f38 <prvProcessTimerOrBlockTask+0x98>)
 8011f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f16:	601a      	str	r2, [r3, #0]
 8011f18:	f3bf 8f4f 	dsb	sy
 8011f1c:	f3bf 8f6f 	isb	sy
}
 8011f20:	e001      	b.n	8011f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011f22:	f7ff f8ed 	bl	8011100 <xTaskResumeAll>
}
 8011f26:	bf00      	nop
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	20002320 	.word	0x20002320
 8011f34:	20002324 	.word	0x20002324
 8011f38:	e000ed04 	.word	0xe000ed04

08011f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b085      	sub	sp, #20
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f44:	4b0e      	ldr	r3, [pc, #56]	; (8011f80 <prvGetNextExpireTime+0x44>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d101      	bne.n	8011f52 <prvGetNextExpireTime+0x16>
 8011f4e:	2201      	movs	r2, #1
 8011f50:	e000      	b.n	8011f54 <prvGetNextExpireTime+0x18>
 8011f52:	2200      	movs	r2, #0
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d105      	bne.n	8011f6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f60:	4b07      	ldr	r3, [pc, #28]	; (8011f80 <prvGetNextExpireTime+0x44>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	60fb      	str	r3, [r7, #12]
 8011f6a:	e001      	b.n	8011f70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011f70:	68fb      	ldr	r3, [r7, #12]
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	2000231c 	.word	0x2000231c

08011f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011f8c:	f7ff f958 	bl	8011240 <xTaskGetTickCount>
 8011f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011f92:	4b0b      	ldr	r3, [pc, #44]	; (8011fc0 <prvSampleTimeNow+0x3c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d205      	bcs.n	8011fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011f9c:	f000 f93c 	bl	8012218 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	601a      	str	r2, [r3, #0]
 8011fa6:	e002      	b.n	8011fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011fae:	4a04      	ldr	r2, [pc, #16]	; (8011fc0 <prvSampleTimeNow+0x3c>)
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	2000232c 	.word	0x2000232c

08011fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	68ba      	ldr	r2, [r7, #8]
 8011fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011fe2:	68ba      	ldr	r2, [r7, #8]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d812      	bhi.n	8012010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	1ad2      	subs	r2, r2, r3
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d302      	bcc.n	8011ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	617b      	str	r3, [r7, #20]
 8011ffc:	e01b      	b.n	8012036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011ffe:	4b10      	ldr	r3, [pc, #64]	; (8012040 <prvInsertTimerInActiveList+0x7c>)
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	3304      	adds	r3, #4
 8012006:	4619      	mov	r1, r3
 8012008:	4610      	mov	r0, r2
 801200a:	f7fd fd48 	bl	800fa9e <vListInsert>
 801200e:	e012      	b.n	8012036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012010:	687a      	ldr	r2, [r7, #4]
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	429a      	cmp	r2, r3
 8012016:	d206      	bcs.n	8012026 <prvInsertTimerInActiveList+0x62>
 8012018:	68ba      	ldr	r2, [r7, #8]
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	429a      	cmp	r2, r3
 801201e:	d302      	bcc.n	8012026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012020:	2301      	movs	r3, #1
 8012022:	617b      	str	r3, [r7, #20]
 8012024:	e007      	b.n	8012036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012026:	4b07      	ldr	r3, [pc, #28]	; (8012044 <prvInsertTimerInActiveList+0x80>)
 8012028:	681a      	ldr	r2, [r3, #0]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	3304      	adds	r3, #4
 801202e:	4619      	mov	r1, r3
 8012030:	4610      	mov	r0, r2
 8012032:	f7fd fd34 	bl	800fa9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012036:	697b      	ldr	r3, [r7, #20]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3718      	adds	r7, #24
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	20002320 	.word	0x20002320
 8012044:	2000231c 	.word	0x2000231c

08012048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08e      	sub	sp, #56	; 0x38
 801204c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801204e:	e0d0      	b.n	80121f2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2b00      	cmp	r3, #0
 8012054:	da1a      	bge.n	801208c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012056:	1d3b      	adds	r3, r7, #4
 8012058:	3304      	adds	r3, #4
 801205a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d10c      	bne.n	801207c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8012062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012066:	b672      	cpsid	i
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	b662      	cpsie	i
 8012076:	61fb      	str	r3, [r7, #28]
}
 8012078:	bf00      	nop
 801207a:	e7fe      	b.n	801207a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012082:	6850      	ldr	r0, [r2, #4]
 8012084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012086:	6892      	ldr	r2, [r2, #8]
 8012088:	4611      	mov	r1, r2
 801208a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2b00      	cmp	r3, #0
 8012090:	f2c0 80ae 	blt.w	80121f0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	695b      	ldr	r3, [r3, #20]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d004      	beq.n	80120aa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80120a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a2:	3304      	adds	r3, #4
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fd fd33 	bl	800fb10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80120aa:	463b      	mov	r3, r7
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff ff69 	bl	8011f84 <prvSampleTimeNow>
 80120b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2b09      	cmp	r3, #9
 80120b8:	f200 809b 	bhi.w	80121f2 <prvProcessReceivedCommands+0x1aa>
 80120bc:	a201      	add	r2, pc, #4	; (adr r2, 80120c4 <prvProcessReceivedCommands+0x7c>)
 80120be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120c2:	bf00      	nop
 80120c4:	080120ed 	.word	0x080120ed
 80120c8:	080120ed 	.word	0x080120ed
 80120cc:	080120ed 	.word	0x080120ed
 80120d0:	08012165 	.word	0x08012165
 80120d4:	08012179 	.word	0x08012179
 80120d8:	080121c7 	.word	0x080121c7
 80120dc:	080120ed 	.word	0x080120ed
 80120e0:	080120ed 	.word	0x080120ed
 80120e4:	08012165 	.word	0x08012165
 80120e8:	08012179 	.word	0x08012179
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120f2:	f043 0301 	orr.w	r3, r3, #1
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80120fe:	68ba      	ldr	r2, [r7, #8]
 8012100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012102:	699b      	ldr	r3, [r3, #24]
 8012104:	18d1      	adds	r1, r2, r3
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801210a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801210c:	f7ff ff5a 	bl	8011fc4 <prvInsertTimerInActiveList>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d06d      	beq.n	80121f2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012118:	6a1b      	ldr	r3, [r3, #32]
 801211a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801211c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012124:	f003 0304 	and.w	r3, r3, #4
 8012128:	2b00      	cmp	r3, #0
 801212a:	d062      	beq.n	80121f2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801212c:	68ba      	ldr	r2, [r7, #8]
 801212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012130:	699b      	ldr	r3, [r3, #24]
 8012132:	441a      	add	r2, r3
 8012134:	2300      	movs	r3, #0
 8012136:	9300      	str	r3, [sp, #0]
 8012138:	2300      	movs	r3, #0
 801213a:	2100      	movs	r1, #0
 801213c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801213e:	f7ff fdff 	bl	8011d40 <xTimerGenericCommand>
 8012142:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012144:	6a3b      	ldr	r3, [r7, #32]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d153      	bne.n	80121f2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	b672      	cpsid	i
 8012150:	f383 8811 	msr	BASEPRI, r3
 8012154:	f3bf 8f6f 	isb	sy
 8012158:	f3bf 8f4f 	dsb	sy
 801215c:	b662      	cpsie	i
 801215e:	61bb      	str	r3, [r7, #24]
}
 8012160:	bf00      	nop
 8012162:	e7fe      	b.n	8012162 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801216a:	f023 0301 	bic.w	r3, r3, #1
 801216e:	b2da      	uxtb	r2, r3
 8012170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012176:	e03c      	b.n	80121f2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801217e:	f043 0301 	orr.w	r3, r3, #1
 8012182:	b2da      	uxtb	r2, r3
 8012184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801218a:	68ba      	ldr	r2, [r7, #8]
 801218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012192:	699b      	ldr	r3, [r3, #24]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d10c      	bne.n	80121b2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8012198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219c:	b672      	cpsid	i
 801219e:	f383 8811 	msr	BASEPRI, r3
 80121a2:	f3bf 8f6f 	isb	sy
 80121a6:	f3bf 8f4f 	dsb	sy
 80121aa:	b662      	cpsie	i
 80121ac:	617b      	str	r3, [r7, #20]
}
 80121ae:	bf00      	nop
 80121b0:	e7fe      	b.n	80121b0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80121b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b4:	699a      	ldr	r2, [r3, #24]
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	18d1      	adds	r1, r2, r3
 80121ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121c0:	f7ff ff00 	bl	8011fc4 <prvInsertTimerInActiveList>
					break;
 80121c4:	e015      	b.n	80121f2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80121c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121cc:	f003 0302 	and.w	r3, r3, #2
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d103      	bne.n	80121dc <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80121d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121d6:	f000 fbc7 	bl	8012968 <vPortFree>
 80121da:	e00a      	b.n	80121f2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121e2:	f023 0301 	bic.w	r3, r3, #1
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80121ee:	e000      	b.n	80121f2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80121f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121f2:	4b08      	ldr	r3, [pc, #32]	; (8012214 <prvProcessReceivedCommands+0x1cc>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	1d39      	adds	r1, r7, #4
 80121f8:	2200      	movs	r2, #0
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7fe f8b2 	bl	8010364 <xQueueReceive>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	f47f af24 	bne.w	8012050 <prvProcessReceivedCommands+0x8>
	}
}
 8012208:	bf00      	nop
 801220a:	bf00      	nop
 801220c:	3730      	adds	r7, #48	; 0x30
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	20002324 	.word	0x20002324

08012218 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b088      	sub	sp, #32
 801221c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801221e:	e04a      	b.n	80122b6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012220:	4b2e      	ldr	r3, [pc, #184]	; (80122dc <prvSwitchTimerLists+0xc4>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801222a:	4b2c      	ldr	r3, [pc, #176]	; (80122dc <prvSwitchTimerLists+0xc4>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	68db      	ldr	r3, [r3, #12]
 8012232:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	3304      	adds	r3, #4
 8012238:	4618      	mov	r0, r3
 801223a:	f7fd fc69 	bl	800fb10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6a1b      	ldr	r3, [r3, #32]
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801224c:	f003 0304 	and.w	r3, r3, #4
 8012250:	2b00      	cmp	r3, #0
 8012252:	d030      	beq.n	80122b6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	699b      	ldr	r3, [r3, #24]
 8012258:	693a      	ldr	r2, [r7, #16]
 801225a:	4413      	add	r3, r2
 801225c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801225e:	68ba      	ldr	r2, [r7, #8]
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	429a      	cmp	r2, r3
 8012264:	d90e      	bls.n	8012284 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	68fa      	ldr	r2, [r7, #12]
 8012270:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012272:	4b1a      	ldr	r3, [pc, #104]	; (80122dc <prvSwitchTimerLists+0xc4>)
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3304      	adds	r3, #4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fd fc0e 	bl	800fa9e <vListInsert>
 8012282:	e018      	b.n	80122b6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012284:	2300      	movs	r3, #0
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	2300      	movs	r3, #0
 801228a:	693a      	ldr	r2, [r7, #16]
 801228c:	2100      	movs	r1, #0
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7ff fd56 	bl	8011d40 <xTimerGenericCommand>
 8012294:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d10c      	bne.n	80122b6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 801229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a0:	b672      	cpsid	i
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	b662      	cpsie	i
 80122b0:	603b      	str	r3, [r7, #0]
}
 80122b2:	bf00      	nop
 80122b4:	e7fe      	b.n	80122b4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80122b6:	4b09      	ldr	r3, [pc, #36]	; (80122dc <prvSwitchTimerLists+0xc4>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d1af      	bne.n	8012220 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80122c0:	4b06      	ldr	r3, [pc, #24]	; (80122dc <prvSwitchTimerLists+0xc4>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80122c6:	4b06      	ldr	r3, [pc, #24]	; (80122e0 <prvSwitchTimerLists+0xc8>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4a04      	ldr	r2, [pc, #16]	; (80122dc <prvSwitchTimerLists+0xc4>)
 80122cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80122ce:	4a04      	ldr	r2, [pc, #16]	; (80122e0 <prvSwitchTimerLists+0xc8>)
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	6013      	str	r3, [r2, #0]
}
 80122d4:	bf00      	nop
 80122d6:	3718      	adds	r7, #24
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}
 80122dc:	2000231c 	.word	0x2000231c
 80122e0:	20002320 	.word	0x20002320

080122e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b082      	sub	sp, #8
 80122e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80122ea:	f000 f947 	bl	801257c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80122ee:	4b15      	ldr	r3, [pc, #84]	; (8012344 <prvCheckForValidListAndQueue+0x60>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d120      	bne.n	8012338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80122f6:	4814      	ldr	r0, [pc, #80]	; (8012348 <prvCheckForValidListAndQueue+0x64>)
 80122f8:	f7fd fb80 	bl	800f9fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80122fc:	4813      	ldr	r0, [pc, #76]	; (801234c <prvCheckForValidListAndQueue+0x68>)
 80122fe:	f7fd fb7d 	bl	800f9fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012302:	4b13      	ldr	r3, [pc, #76]	; (8012350 <prvCheckForValidListAndQueue+0x6c>)
 8012304:	4a10      	ldr	r2, [pc, #64]	; (8012348 <prvCheckForValidListAndQueue+0x64>)
 8012306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012308:	4b12      	ldr	r3, [pc, #72]	; (8012354 <prvCheckForValidListAndQueue+0x70>)
 801230a:	4a10      	ldr	r2, [pc, #64]	; (801234c <prvCheckForValidListAndQueue+0x68>)
 801230c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801230e:	2300      	movs	r3, #0
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	4b11      	ldr	r3, [pc, #68]	; (8012358 <prvCheckForValidListAndQueue+0x74>)
 8012314:	4a11      	ldr	r2, [pc, #68]	; (801235c <prvCheckForValidListAndQueue+0x78>)
 8012316:	2110      	movs	r1, #16
 8012318:	200a      	movs	r0, #10
 801231a:	f7fd fc8d 	bl	800fc38 <xQueueGenericCreateStatic>
 801231e:	4603      	mov	r3, r0
 8012320:	4a08      	ldr	r2, [pc, #32]	; (8012344 <prvCheckForValidListAndQueue+0x60>)
 8012322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012324:	4b07      	ldr	r3, [pc, #28]	; (8012344 <prvCheckForValidListAndQueue+0x60>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d005      	beq.n	8012338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <prvCheckForValidListAndQueue+0x60>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	490b      	ldr	r1, [pc, #44]	; (8012360 <prvCheckForValidListAndQueue+0x7c>)
 8012332:	4618      	mov	r0, r3
 8012334:	f7fe fbe4 	bl	8010b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012338:	f000 f954 	bl	80125e4 <vPortExitCritical>
}
 801233c:	bf00      	nop
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	20002324 	.word	0x20002324
 8012348:	200022f4 	.word	0x200022f4
 801234c:	20002308 	.word	0x20002308
 8012350:	2000231c 	.word	0x2000231c
 8012354:	20002320 	.word	0x20002320
 8012358:	200023d0 	.word	0x200023d0
 801235c:	20002330 	.word	0x20002330
 8012360:	08014278 	.word	0x08014278

08012364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012364:	b480      	push	{r7}
 8012366:	b085      	sub	sp, #20
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	3b04      	subs	r3, #4
 8012374:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801237c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	3b04      	subs	r3, #4
 8012382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	f023 0201 	bic.w	r2, r3, #1
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	3b04      	subs	r3, #4
 8012392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012394:	4a0c      	ldr	r2, [pc, #48]	; (80123c8 <pxPortInitialiseStack+0x64>)
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	3b14      	subs	r3, #20
 801239e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	3b04      	subs	r3, #4
 80123aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f06f 0202 	mvn.w	r2, #2
 80123b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	3b20      	subs	r3, #32
 80123b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80123ba:	68fb      	ldr	r3, [r7, #12]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3714      	adds	r7, #20
 80123c0:	46bd      	mov	sp, r7
 80123c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c6:	4770      	bx	lr
 80123c8:	080123cd 	.word	0x080123cd

080123cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80123d2:	2300      	movs	r3, #0
 80123d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80123d6:	4b14      	ldr	r3, [pc, #80]	; (8012428 <prvTaskExitError+0x5c>)
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123de:	d00c      	beq.n	80123fa <prvTaskExitError+0x2e>
	__asm volatile
 80123e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e4:	b672      	cpsid	i
 80123e6:	f383 8811 	msr	BASEPRI, r3
 80123ea:	f3bf 8f6f 	isb	sy
 80123ee:	f3bf 8f4f 	dsb	sy
 80123f2:	b662      	cpsie	i
 80123f4:	60fb      	str	r3, [r7, #12]
}
 80123f6:	bf00      	nop
 80123f8:	e7fe      	b.n	80123f8 <prvTaskExitError+0x2c>
	__asm volatile
 80123fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123fe:	b672      	cpsid	i
 8012400:	f383 8811 	msr	BASEPRI, r3
 8012404:	f3bf 8f6f 	isb	sy
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	b662      	cpsie	i
 801240e:	60bb      	str	r3, [r7, #8]
}
 8012410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012412:	bf00      	nop
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d0fc      	beq.n	8012414 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801241a:	bf00      	nop
 801241c:	bf00      	nop
 801241e:	3714      	adds	r7, #20
 8012420:	46bd      	mov	sp, r7
 8012422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012426:	4770      	bx	lr
 8012428:	200001bc 	.word	0x200001bc
 801242c:	00000000 	.word	0x00000000

08012430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012430:	4b07      	ldr	r3, [pc, #28]	; (8012450 <pxCurrentTCBConst2>)
 8012432:	6819      	ldr	r1, [r3, #0]
 8012434:	6808      	ldr	r0, [r1, #0]
 8012436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243a:	f380 8809 	msr	PSP, r0
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	f04f 0000 	mov.w	r0, #0
 8012446:	f380 8811 	msr	BASEPRI, r0
 801244a:	4770      	bx	lr
 801244c:	f3af 8000 	nop.w

08012450 <pxCurrentTCBConst2>:
 8012450:	20001df4 	.word	0x20001df4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop

08012458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012458:	4808      	ldr	r0, [pc, #32]	; (801247c <prvPortStartFirstTask+0x24>)
 801245a:	6800      	ldr	r0, [r0, #0]
 801245c:	6800      	ldr	r0, [r0, #0]
 801245e:	f380 8808 	msr	MSP, r0
 8012462:	f04f 0000 	mov.w	r0, #0
 8012466:	f380 8814 	msr	CONTROL, r0
 801246a:	b662      	cpsie	i
 801246c:	b661      	cpsie	f
 801246e:	f3bf 8f4f 	dsb	sy
 8012472:	f3bf 8f6f 	isb	sy
 8012476:	df00      	svc	0
 8012478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801247a:	bf00      	nop
 801247c:	e000ed08 	.word	0xe000ed08

08012480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b084      	sub	sp, #16
 8012484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012486:	4b37      	ldr	r3, [pc, #220]	; (8012564 <xPortStartScheduler+0xe4>)
 8012488:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	b2db      	uxtb	r3, r3
 8012490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	22ff      	movs	r2, #255	; 0xff
 8012496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	b2db      	uxtb	r3, r3
 801249e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80124a0:	78fb      	ldrb	r3, [r7, #3]
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80124a8:	b2da      	uxtb	r2, r3
 80124aa:	4b2f      	ldr	r3, [pc, #188]	; (8012568 <xPortStartScheduler+0xe8>)
 80124ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80124ae:	4b2f      	ldr	r3, [pc, #188]	; (801256c <xPortStartScheduler+0xec>)
 80124b0:	2207      	movs	r2, #7
 80124b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124b4:	e009      	b.n	80124ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80124b6:	4b2d      	ldr	r3, [pc, #180]	; (801256c <xPortStartScheduler+0xec>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	3b01      	subs	r3, #1
 80124bc:	4a2b      	ldr	r2, [pc, #172]	; (801256c <xPortStartScheduler+0xec>)
 80124be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80124c0:	78fb      	ldrb	r3, [r7, #3]
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	b2db      	uxtb	r3, r3
 80124c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124ca:	78fb      	ldrb	r3, [r7, #3]
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124d2:	2b80      	cmp	r3, #128	; 0x80
 80124d4:	d0ef      	beq.n	80124b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80124d6:	4b25      	ldr	r3, [pc, #148]	; (801256c <xPortStartScheduler+0xec>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f1c3 0307 	rsb	r3, r3, #7
 80124de:	2b04      	cmp	r3, #4
 80124e0:	d00c      	beq.n	80124fc <xPortStartScheduler+0x7c>
	__asm volatile
 80124e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e6:	b672      	cpsid	i
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	b662      	cpsie	i
 80124f6:	60bb      	str	r3, [r7, #8]
}
 80124f8:	bf00      	nop
 80124fa:	e7fe      	b.n	80124fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80124fc:	4b1b      	ldr	r3, [pc, #108]	; (801256c <xPortStartScheduler+0xec>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	021b      	lsls	r3, r3, #8
 8012502:	4a1a      	ldr	r2, [pc, #104]	; (801256c <xPortStartScheduler+0xec>)
 8012504:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012506:	4b19      	ldr	r3, [pc, #100]	; (801256c <xPortStartScheduler+0xec>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801250e:	4a17      	ldr	r2, [pc, #92]	; (801256c <xPortStartScheduler+0xec>)
 8012510:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	b2da      	uxtb	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801251a:	4b15      	ldr	r3, [pc, #84]	; (8012570 <xPortStartScheduler+0xf0>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	4a14      	ldr	r2, [pc, #80]	; (8012570 <xPortStartScheduler+0xf0>)
 8012520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012524:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012526:	4b12      	ldr	r3, [pc, #72]	; (8012570 <xPortStartScheduler+0xf0>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4a11      	ldr	r2, [pc, #68]	; (8012570 <xPortStartScheduler+0xf0>)
 801252c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012530:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012532:	f000 f8dd 	bl	80126f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012536:	4b0f      	ldr	r3, [pc, #60]	; (8012574 <xPortStartScheduler+0xf4>)
 8012538:	2200      	movs	r2, #0
 801253a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801253c:	f000 f8fc 	bl	8012738 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012540:	4b0d      	ldr	r3, [pc, #52]	; (8012578 <xPortStartScheduler+0xf8>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	4a0c      	ldr	r2, [pc, #48]	; (8012578 <xPortStartScheduler+0xf8>)
 8012546:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801254a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801254c:	f7ff ff84 	bl	8012458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012550:	f7fe ff42 	bl	80113d8 <vTaskSwitchContext>
	prvTaskExitError();
 8012554:	f7ff ff3a 	bl	80123cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012558:	2300      	movs	r3, #0
}
 801255a:	4618      	mov	r0, r3
 801255c:	3710      	adds	r7, #16
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	e000e400 	.word	0xe000e400
 8012568:	20002420 	.word	0x20002420
 801256c:	20002424 	.word	0x20002424
 8012570:	e000ed20 	.word	0xe000ed20
 8012574:	200001bc 	.word	0x200001bc
 8012578:	e000ef34 	.word	0xe000ef34

0801257c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801257c:	b480      	push	{r7}
 801257e:	b083      	sub	sp, #12
 8012580:	af00      	add	r7, sp, #0
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012586:	b672      	cpsid	i
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	b662      	cpsie	i
 8012596:	607b      	str	r3, [r7, #4]
}
 8012598:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801259a:	4b10      	ldr	r3, [pc, #64]	; (80125dc <vPortEnterCritical+0x60>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	3301      	adds	r3, #1
 80125a0:	4a0e      	ldr	r2, [pc, #56]	; (80125dc <vPortEnterCritical+0x60>)
 80125a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80125a4:	4b0d      	ldr	r3, [pc, #52]	; (80125dc <vPortEnterCritical+0x60>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d111      	bne.n	80125d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80125ac:	4b0c      	ldr	r3, [pc, #48]	; (80125e0 <vPortEnterCritical+0x64>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00c      	beq.n	80125d0 <vPortEnterCritical+0x54>
	__asm volatile
 80125b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ba:	b672      	cpsid	i
 80125bc:	f383 8811 	msr	BASEPRI, r3
 80125c0:	f3bf 8f6f 	isb	sy
 80125c4:	f3bf 8f4f 	dsb	sy
 80125c8:	b662      	cpsie	i
 80125ca:	603b      	str	r3, [r7, #0]
}
 80125cc:	bf00      	nop
 80125ce:	e7fe      	b.n	80125ce <vPortEnterCritical+0x52>
	}
}
 80125d0:	bf00      	nop
 80125d2:	370c      	adds	r7, #12
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr
 80125dc:	200001bc 	.word	0x200001bc
 80125e0:	e000ed04 	.word	0xe000ed04

080125e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80125e4:	b480      	push	{r7}
 80125e6:	b083      	sub	sp, #12
 80125e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80125ea:	4b13      	ldr	r3, [pc, #76]	; (8012638 <vPortExitCritical+0x54>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d10c      	bne.n	801260c <vPortExitCritical+0x28>
	__asm volatile
 80125f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f6:	b672      	cpsid	i
 80125f8:	f383 8811 	msr	BASEPRI, r3
 80125fc:	f3bf 8f6f 	isb	sy
 8012600:	f3bf 8f4f 	dsb	sy
 8012604:	b662      	cpsie	i
 8012606:	607b      	str	r3, [r7, #4]
}
 8012608:	bf00      	nop
 801260a:	e7fe      	b.n	801260a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801260c:	4b0a      	ldr	r3, [pc, #40]	; (8012638 <vPortExitCritical+0x54>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	3b01      	subs	r3, #1
 8012612:	4a09      	ldr	r2, [pc, #36]	; (8012638 <vPortExitCritical+0x54>)
 8012614:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012616:	4b08      	ldr	r3, [pc, #32]	; (8012638 <vPortExitCritical+0x54>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d105      	bne.n	801262a <vPortExitCritical+0x46>
 801261e:	2300      	movs	r3, #0
 8012620:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	f383 8811 	msr	BASEPRI, r3
}
 8012628:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801262a:	bf00      	nop
 801262c:	370c      	adds	r7, #12
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	200001bc 	.word	0x200001bc
 801263c:	00000000 	.word	0x00000000

08012640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012640:	f3ef 8009 	mrs	r0, PSP
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	4b15      	ldr	r3, [pc, #84]	; (80126a0 <pxCurrentTCBConst>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	f01e 0f10 	tst.w	lr, #16
 8012650:	bf08      	it	eq
 8012652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265a:	6010      	str	r0, [r2, #0]
 801265c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012664:	b672      	cpsid	i
 8012666:	f380 8811 	msr	BASEPRI, r0
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	f3bf 8f6f 	isb	sy
 8012672:	b662      	cpsie	i
 8012674:	f7fe feb0 	bl	80113d8 <vTaskSwitchContext>
 8012678:	f04f 0000 	mov.w	r0, #0
 801267c:	f380 8811 	msr	BASEPRI, r0
 8012680:	bc09      	pop	{r0, r3}
 8012682:	6819      	ldr	r1, [r3, #0]
 8012684:	6808      	ldr	r0, [r1, #0]
 8012686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268a:	f01e 0f10 	tst.w	lr, #16
 801268e:	bf08      	it	eq
 8012690:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012694:	f380 8809 	msr	PSP, r0
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop

080126a0 <pxCurrentTCBConst>:
 80126a0:	20001df4 	.word	0x20001df4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80126a4:	bf00      	nop
 80126a6:	bf00      	nop

080126a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
	__asm volatile
 80126ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b2:	b672      	cpsid	i
 80126b4:	f383 8811 	msr	BASEPRI, r3
 80126b8:	f3bf 8f6f 	isb	sy
 80126bc:	f3bf 8f4f 	dsb	sy
 80126c0:	b662      	cpsie	i
 80126c2:	607b      	str	r3, [r7, #4]
}
 80126c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80126c6:	f7fe fdcb 	bl	8011260 <xTaskIncrementTick>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d003      	beq.n	80126d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80126d0:	4b06      	ldr	r3, [pc, #24]	; (80126ec <SysTick_Handler+0x44>)
 80126d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126d6:	601a      	str	r2, [r3, #0]
 80126d8:	2300      	movs	r3, #0
 80126da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	f383 8811 	msr	BASEPRI, r3
}
 80126e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80126e4:	bf00      	nop
 80126e6:	3708      	adds	r7, #8
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	e000ed04 	.word	0xe000ed04

080126f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80126f0:	b480      	push	{r7}
 80126f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80126f4:	4b0b      	ldr	r3, [pc, #44]	; (8012724 <vPortSetupTimerInterrupt+0x34>)
 80126f6:	2200      	movs	r2, #0
 80126f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80126fa:	4b0b      	ldr	r3, [pc, #44]	; (8012728 <vPortSetupTimerInterrupt+0x38>)
 80126fc:	2200      	movs	r2, #0
 80126fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012700:	4b0a      	ldr	r3, [pc, #40]	; (801272c <vPortSetupTimerInterrupt+0x3c>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	4a0a      	ldr	r2, [pc, #40]	; (8012730 <vPortSetupTimerInterrupt+0x40>)
 8012706:	fba2 2303 	umull	r2, r3, r2, r3
 801270a:	099b      	lsrs	r3, r3, #6
 801270c:	4a09      	ldr	r2, [pc, #36]	; (8012734 <vPortSetupTimerInterrupt+0x44>)
 801270e:	3b01      	subs	r3, #1
 8012710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012712:	4b04      	ldr	r3, [pc, #16]	; (8012724 <vPortSetupTimerInterrupt+0x34>)
 8012714:	2207      	movs	r2, #7
 8012716:	601a      	str	r2, [r3, #0]
}
 8012718:	bf00      	nop
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
 8012724:	e000e010 	.word	0xe000e010
 8012728:	e000e018 	.word	0xe000e018
 801272c:	20000058 	.word	0x20000058
 8012730:	10624dd3 	.word	0x10624dd3
 8012734:	e000e014 	.word	0xe000e014

08012738 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012738:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012748 <vPortEnableVFP+0x10>
 801273c:	6801      	ldr	r1, [r0, #0]
 801273e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012742:	6001      	str	r1, [r0, #0]
 8012744:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012746:	bf00      	nop
 8012748:	e000ed88 	.word	0xe000ed88

0801274c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012752:	f3ef 8305 	mrs	r3, IPSR
 8012756:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	2b0f      	cmp	r3, #15
 801275c:	d916      	bls.n	801278c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801275e:	4a19      	ldr	r2, [pc, #100]	; (80127c4 <vPortValidateInterruptPriority+0x78>)
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	4413      	add	r3, r2
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012768:	4b17      	ldr	r3, [pc, #92]	; (80127c8 <vPortValidateInterruptPriority+0x7c>)
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	7afa      	ldrb	r2, [r7, #11]
 801276e:	429a      	cmp	r2, r3
 8012770:	d20c      	bcs.n	801278c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012776:	b672      	cpsid	i
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	b662      	cpsie	i
 8012786:	607b      	str	r3, [r7, #4]
}
 8012788:	bf00      	nop
 801278a:	e7fe      	b.n	801278a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801278c:	4b0f      	ldr	r3, [pc, #60]	; (80127cc <vPortValidateInterruptPriority+0x80>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012794:	4b0e      	ldr	r3, [pc, #56]	; (80127d0 <vPortValidateInterruptPriority+0x84>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	429a      	cmp	r2, r3
 801279a:	d90c      	bls.n	80127b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a0:	b672      	cpsid	i
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	b662      	cpsie	i
 80127b0:	603b      	str	r3, [r7, #0]
}
 80127b2:	bf00      	nop
 80127b4:	e7fe      	b.n	80127b4 <vPortValidateInterruptPriority+0x68>
	}
 80127b6:	bf00      	nop
 80127b8:	3714      	adds	r7, #20
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	e000e3f0 	.word	0xe000e3f0
 80127c8:	20002420 	.word	0x20002420
 80127cc:	e000ed0c 	.word	0xe000ed0c
 80127d0:	20002424 	.word	0x20002424

080127d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b08a      	sub	sp, #40	; 0x28
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80127dc:	2300      	movs	r3, #0
 80127de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80127e0:	f7fe fc80 	bl	80110e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80127e4:	4b5b      	ldr	r3, [pc, #364]	; (8012954 <pvPortMalloc+0x180>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d101      	bne.n	80127f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80127ec:	f000 f91a 	bl	8012a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80127f0:	4b59      	ldr	r3, [pc, #356]	; (8012958 <pvPortMalloc+0x184>)
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	4013      	ands	r3, r2
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f040 8092 	bne.w	8012922 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d01f      	beq.n	8012844 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012804:	2208      	movs	r2, #8
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4413      	add	r3, r2
 801280a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f003 0307 	and.w	r3, r3, #7
 8012812:	2b00      	cmp	r3, #0
 8012814:	d016      	beq.n	8012844 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f023 0307 	bic.w	r3, r3, #7
 801281c:	3308      	adds	r3, #8
 801281e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f003 0307 	and.w	r3, r3, #7
 8012826:	2b00      	cmp	r3, #0
 8012828:	d00c      	beq.n	8012844 <pvPortMalloc+0x70>
	__asm volatile
 801282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282e:	b672      	cpsid	i
 8012830:	f383 8811 	msr	BASEPRI, r3
 8012834:	f3bf 8f6f 	isb	sy
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	b662      	cpsie	i
 801283e:	617b      	str	r3, [r7, #20]
}
 8012840:	bf00      	nop
 8012842:	e7fe      	b.n	8012842 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d06b      	beq.n	8012922 <pvPortMalloc+0x14e>
 801284a:	4b44      	ldr	r3, [pc, #272]	; (801295c <pvPortMalloc+0x188>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	429a      	cmp	r2, r3
 8012852:	d866      	bhi.n	8012922 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012854:	4b42      	ldr	r3, [pc, #264]	; (8012960 <pvPortMalloc+0x18c>)
 8012856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012858:	4b41      	ldr	r3, [pc, #260]	; (8012960 <pvPortMalloc+0x18c>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801285e:	e004      	b.n	801286a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	685b      	ldr	r3, [r3, #4]
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	429a      	cmp	r2, r3
 8012872:	d903      	bls.n	801287c <pvPortMalloc+0xa8>
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d1f1      	bne.n	8012860 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801287c:	4b35      	ldr	r3, [pc, #212]	; (8012954 <pvPortMalloc+0x180>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012882:	429a      	cmp	r2, r3
 8012884:	d04d      	beq.n	8012922 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012886:	6a3b      	ldr	r3, [r7, #32]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2208      	movs	r2, #8
 801288c:	4413      	add	r3, r2
 801288e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289a:	685a      	ldr	r2, [r3, #4]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	1ad2      	subs	r2, r2, r3
 80128a0:	2308      	movs	r3, #8
 80128a2:	005b      	lsls	r3, r3, #1
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d921      	bls.n	80128ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80128a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	4413      	add	r3, r2
 80128ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	f003 0307 	and.w	r3, r3, #7
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d00c      	beq.n	80128d4 <pvPortMalloc+0x100>
	__asm volatile
 80128ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128be:	b672      	cpsid	i
 80128c0:	f383 8811 	msr	BASEPRI, r3
 80128c4:	f3bf 8f6f 	isb	sy
 80128c8:	f3bf 8f4f 	dsb	sy
 80128cc:	b662      	cpsie	i
 80128ce:	613b      	str	r3, [r7, #16]
}
 80128d0:	bf00      	nop
 80128d2:	e7fe      	b.n	80128d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80128d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d6:	685a      	ldr	r2, [r3, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	1ad2      	subs	r2, r2, r3
 80128dc:	69bb      	ldr	r3, [r7, #24]
 80128de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80128e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80128e6:	69b8      	ldr	r0, [r7, #24]
 80128e8:	f000 f8fe 	bl	8012ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80128ec:	4b1b      	ldr	r3, [pc, #108]	; (801295c <pvPortMalloc+0x188>)
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	1ad3      	subs	r3, r2, r3
 80128f6:	4a19      	ldr	r2, [pc, #100]	; (801295c <pvPortMalloc+0x188>)
 80128f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80128fa:	4b18      	ldr	r3, [pc, #96]	; (801295c <pvPortMalloc+0x188>)
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	4b19      	ldr	r3, [pc, #100]	; (8012964 <pvPortMalloc+0x190>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	429a      	cmp	r2, r3
 8012904:	d203      	bcs.n	801290e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012906:	4b15      	ldr	r3, [pc, #84]	; (801295c <pvPortMalloc+0x188>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	4a16      	ldr	r2, [pc, #88]	; (8012964 <pvPortMalloc+0x190>)
 801290c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012910:	685a      	ldr	r2, [r3, #4]
 8012912:	4b11      	ldr	r3, [pc, #68]	; (8012958 <pvPortMalloc+0x184>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	431a      	orrs	r2, r3
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	2200      	movs	r2, #0
 8012920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012922:	f7fe fbed 	bl	8011100 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012926:	69fb      	ldr	r3, [r7, #28]
 8012928:	f003 0307 	and.w	r3, r3, #7
 801292c:	2b00      	cmp	r3, #0
 801292e:	d00c      	beq.n	801294a <pvPortMalloc+0x176>
	__asm volatile
 8012930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012934:	b672      	cpsid	i
 8012936:	f383 8811 	msr	BASEPRI, r3
 801293a:	f3bf 8f6f 	isb	sy
 801293e:	f3bf 8f4f 	dsb	sy
 8012942:	b662      	cpsie	i
 8012944:	60fb      	str	r3, [r7, #12]
}
 8012946:	bf00      	nop
 8012948:	e7fe      	b.n	8012948 <pvPortMalloc+0x174>
	return pvReturn;
 801294a:	69fb      	ldr	r3, [r7, #28]
}
 801294c:	4618      	mov	r0, r3
 801294e:	3728      	adds	r7, #40	; 0x28
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	20006030 	.word	0x20006030
 8012958:	2000603c 	.word	0x2000603c
 801295c:	20006034 	.word	0x20006034
 8012960:	20006028 	.word	0x20006028
 8012964:	20006038 	.word	0x20006038

08012968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d04c      	beq.n	8012a14 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801297a:	2308      	movs	r3, #8
 801297c:	425b      	negs	r3, r3
 801297e:	697a      	ldr	r2, [r7, #20]
 8012980:	4413      	add	r3, r2
 8012982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	685a      	ldr	r2, [r3, #4]
 801298c:	4b23      	ldr	r3, [pc, #140]	; (8012a1c <vPortFree+0xb4>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4013      	ands	r3, r2
 8012992:	2b00      	cmp	r3, #0
 8012994:	d10c      	bne.n	80129b0 <vPortFree+0x48>
	__asm volatile
 8012996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299a:	b672      	cpsid	i
 801299c:	f383 8811 	msr	BASEPRI, r3
 80129a0:	f3bf 8f6f 	isb	sy
 80129a4:	f3bf 8f4f 	dsb	sy
 80129a8:	b662      	cpsie	i
 80129aa:	60fb      	str	r3, [r7, #12]
}
 80129ac:	bf00      	nop
 80129ae:	e7fe      	b.n	80129ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d00c      	beq.n	80129d2 <vPortFree+0x6a>
	__asm volatile
 80129b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129bc:	b672      	cpsid	i
 80129be:	f383 8811 	msr	BASEPRI, r3
 80129c2:	f3bf 8f6f 	isb	sy
 80129c6:	f3bf 8f4f 	dsb	sy
 80129ca:	b662      	cpsie	i
 80129cc:	60bb      	str	r3, [r7, #8]
}
 80129ce:	bf00      	nop
 80129d0:	e7fe      	b.n	80129d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	685a      	ldr	r2, [r3, #4]
 80129d6:	4b11      	ldr	r3, [pc, #68]	; (8012a1c <vPortFree+0xb4>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	4013      	ands	r3, r2
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d019      	beq.n	8012a14 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d115      	bne.n	8012a14 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80129e8:	693b      	ldr	r3, [r7, #16]
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	4b0b      	ldr	r3, [pc, #44]	; (8012a1c <vPortFree+0xb4>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	43db      	mvns	r3, r3
 80129f2:	401a      	ands	r2, r3
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80129f8:	f7fe fb74 	bl	80110e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80129fc:	693b      	ldr	r3, [r7, #16]
 80129fe:	685a      	ldr	r2, [r3, #4]
 8012a00:	4b07      	ldr	r3, [pc, #28]	; (8012a20 <vPortFree+0xb8>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4413      	add	r3, r2
 8012a06:	4a06      	ldr	r2, [pc, #24]	; (8012a20 <vPortFree+0xb8>)
 8012a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a0a:	6938      	ldr	r0, [r7, #16]
 8012a0c:	f000 f86c 	bl	8012ae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012a10:	f7fe fb76 	bl	8011100 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012a14:	bf00      	nop
 8012a16:	3718      	adds	r7, #24
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	2000603c 	.word	0x2000603c
 8012a20:	20006034 	.word	0x20006034

08012a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012a30:	4b27      	ldr	r3, [pc, #156]	; (8012ad0 <prvHeapInit+0xac>)
 8012a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	f003 0307 	and.w	r3, r3, #7
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d00c      	beq.n	8012a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	3307      	adds	r3, #7
 8012a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f023 0307 	bic.w	r3, r3, #7
 8012a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a4c:	68ba      	ldr	r2, [r7, #8]
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	4a1f      	ldr	r2, [pc, #124]	; (8012ad0 <prvHeapInit+0xac>)
 8012a54:	4413      	add	r3, r2
 8012a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a5c:	4a1d      	ldr	r2, [pc, #116]	; (8012ad4 <prvHeapInit+0xb0>)
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012a62:	4b1c      	ldr	r3, [pc, #112]	; (8012ad4 <prvHeapInit+0xb0>)
 8012a64:	2200      	movs	r2, #0
 8012a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	68ba      	ldr	r2, [r7, #8]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a70:	2208      	movs	r2, #8
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	1a9b      	subs	r3, r3, r2
 8012a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f023 0307 	bic.w	r3, r3, #7
 8012a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	4a15      	ldr	r2, [pc, #84]	; (8012ad8 <prvHeapInit+0xb4>)
 8012a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012a86:	4b14      	ldr	r3, [pc, #80]	; (8012ad8 <prvHeapInit+0xb4>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a8e:	4b12      	ldr	r3, [pc, #72]	; (8012ad8 <prvHeapInit+0xb4>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2200      	movs	r2, #0
 8012a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	1ad2      	subs	r2, r2, r3
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012aa4:	4b0c      	ldr	r3, [pc, #48]	; (8012ad8 <prvHeapInit+0xb4>)
 8012aa6:	681a      	ldr	r2, [r3, #0]
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	4a0a      	ldr	r2, [pc, #40]	; (8012adc <prvHeapInit+0xb8>)
 8012ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	4a09      	ldr	r2, [pc, #36]	; (8012ae0 <prvHeapInit+0xbc>)
 8012aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012abc:	4b09      	ldr	r3, [pc, #36]	; (8012ae4 <prvHeapInit+0xc0>)
 8012abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ac2:	601a      	str	r2, [r3, #0]
}
 8012ac4:	bf00      	nop
 8012ac6:	3714      	adds	r7, #20
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr
 8012ad0:	20002428 	.word	0x20002428
 8012ad4:	20006028 	.word	0x20006028
 8012ad8:	20006030 	.word	0x20006030
 8012adc:	20006038 	.word	0x20006038
 8012ae0:	20006034 	.word	0x20006034
 8012ae4:	2000603c 	.word	0x2000603c

08012ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012ae8:	b480      	push	{r7}
 8012aea:	b085      	sub	sp, #20
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012af0:	4b28      	ldr	r3, [pc, #160]	; (8012b94 <prvInsertBlockIntoFreeList+0xac>)
 8012af2:	60fb      	str	r3, [r7, #12]
 8012af4:	e002      	b.n	8012afc <prvInsertBlockIntoFreeList+0x14>
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	60fb      	str	r3, [r7, #12]
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	429a      	cmp	r2, r3
 8012b04:	d8f7      	bhi.n	8012af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	4413      	add	r3, r2
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d108      	bne.n	8012b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	685a      	ldr	r2, [r3, #4]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	441a      	add	r2, r3
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	68ba      	ldr	r2, [r7, #8]
 8012b34:	441a      	add	r2, r3
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d118      	bne.n	8012b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	4b15      	ldr	r3, [pc, #84]	; (8012b98 <prvInsertBlockIntoFreeList+0xb0>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d00d      	beq.n	8012b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	685a      	ldr	r2, [r3, #4]
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	441a      	add	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	601a      	str	r2, [r3, #0]
 8012b64:	e008      	b.n	8012b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b66:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <prvInsertBlockIntoFreeList+0xb0>)
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	e003      	b.n	8012b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681a      	ldr	r2, [r3, #0]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d002      	beq.n	8012b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b86:	bf00      	nop
 8012b88:	3714      	adds	r7, #20
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b90:	4770      	bx	lr
 8012b92:	bf00      	nop
 8012b94:	20006028 	.word	0x20006028
 8012b98:	20006030 	.word	0x20006030

08012b9c <__errno>:
 8012b9c:	4b01      	ldr	r3, [pc, #4]	; (8012ba4 <__errno+0x8>)
 8012b9e:	6818      	ldr	r0, [r3, #0]
 8012ba0:	4770      	bx	lr
 8012ba2:	bf00      	nop
 8012ba4:	200001c0 	.word	0x200001c0

08012ba8 <std>:
 8012ba8:	2300      	movs	r3, #0
 8012baa:	b510      	push	{r4, lr}
 8012bac:	4604      	mov	r4, r0
 8012bae:	e9c0 3300 	strd	r3, r3, [r0]
 8012bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bb6:	6083      	str	r3, [r0, #8]
 8012bb8:	8181      	strh	r1, [r0, #12]
 8012bba:	6643      	str	r3, [r0, #100]	; 0x64
 8012bbc:	81c2      	strh	r2, [r0, #14]
 8012bbe:	6183      	str	r3, [r0, #24]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	2208      	movs	r2, #8
 8012bc4:	305c      	adds	r0, #92	; 0x5c
 8012bc6:	f000 f91a 	bl	8012dfe <memset>
 8012bca:	4b05      	ldr	r3, [pc, #20]	; (8012be0 <std+0x38>)
 8012bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8012bce:	4b05      	ldr	r3, [pc, #20]	; (8012be4 <std+0x3c>)
 8012bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bd2:	4b05      	ldr	r3, [pc, #20]	; (8012be8 <std+0x40>)
 8012bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bd6:	4b05      	ldr	r3, [pc, #20]	; (8012bec <std+0x44>)
 8012bd8:	6224      	str	r4, [r4, #32]
 8012bda:	6323      	str	r3, [r4, #48]	; 0x30
 8012bdc:	bd10      	pop	{r4, pc}
 8012bde:	bf00      	nop
 8012be0:	08013149 	.word	0x08013149
 8012be4:	0801316b 	.word	0x0801316b
 8012be8:	080131a3 	.word	0x080131a3
 8012bec:	080131c7 	.word	0x080131c7

08012bf0 <_cleanup_r>:
 8012bf0:	4901      	ldr	r1, [pc, #4]	; (8012bf8 <_cleanup_r+0x8>)
 8012bf2:	f000 b8af 	b.w	8012d54 <_fwalk_reent>
 8012bf6:	bf00      	nop
 8012bf8:	080134a1 	.word	0x080134a1

08012bfc <__sfmoreglue>:
 8012bfc:	b570      	push	{r4, r5, r6, lr}
 8012bfe:	2268      	movs	r2, #104	; 0x68
 8012c00:	1e4d      	subs	r5, r1, #1
 8012c02:	4355      	muls	r5, r2
 8012c04:	460e      	mov	r6, r1
 8012c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c0a:	f000 f921 	bl	8012e50 <_malloc_r>
 8012c0e:	4604      	mov	r4, r0
 8012c10:	b140      	cbz	r0, 8012c24 <__sfmoreglue+0x28>
 8012c12:	2100      	movs	r1, #0
 8012c14:	e9c0 1600 	strd	r1, r6, [r0]
 8012c18:	300c      	adds	r0, #12
 8012c1a:	60a0      	str	r0, [r4, #8]
 8012c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c20:	f000 f8ed 	bl	8012dfe <memset>
 8012c24:	4620      	mov	r0, r4
 8012c26:	bd70      	pop	{r4, r5, r6, pc}

08012c28 <__sfp_lock_acquire>:
 8012c28:	4801      	ldr	r0, [pc, #4]	; (8012c30 <__sfp_lock_acquire+0x8>)
 8012c2a:	f000 b8d8 	b.w	8012dde <__retarget_lock_acquire_recursive>
 8012c2e:	bf00      	nop
 8012c30:	20006041 	.word	0x20006041

08012c34 <__sfp_lock_release>:
 8012c34:	4801      	ldr	r0, [pc, #4]	; (8012c3c <__sfp_lock_release+0x8>)
 8012c36:	f000 b8d3 	b.w	8012de0 <__retarget_lock_release_recursive>
 8012c3a:	bf00      	nop
 8012c3c:	20006041 	.word	0x20006041

08012c40 <__sinit_lock_acquire>:
 8012c40:	4801      	ldr	r0, [pc, #4]	; (8012c48 <__sinit_lock_acquire+0x8>)
 8012c42:	f000 b8cc 	b.w	8012dde <__retarget_lock_acquire_recursive>
 8012c46:	bf00      	nop
 8012c48:	20006042 	.word	0x20006042

08012c4c <__sinit_lock_release>:
 8012c4c:	4801      	ldr	r0, [pc, #4]	; (8012c54 <__sinit_lock_release+0x8>)
 8012c4e:	f000 b8c7 	b.w	8012de0 <__retarget_lock_release_recursive>
 8012c52:	bf00      	nop
 8012c54:	20006042 	.word	0x20006042

08012c58 <__sinit>:
 8012c58:	b510      	push	{r4, lr}
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	f7ff fff0 	bl	8012c40 <__sinit_lock_acquire>
 8012c60:	69a3      	ldr	r3, [r4, #24]
 8012c62:	b11b      	cbz	r3, 8012c6c <__sinit+0x14>
 8012c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c68:	f7ff bff0 	b.w	8012c4c <__sinit_lock_release>
 8012c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012c70:	6523      	str	r3, [r4, #80]	; 0x50
 8012c72:	4b13      	ldr	r3, [pc, #76]	; (8012cc0 <__sinit+0x68>)
 8012c74:	4a13      	ldr	r2, [pc, #76]	; (8012cc4 <__sinit+0x6c>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c7a:	42a3      	cmp	r3, r4
 8012c7c:	bf04      	itt	eq
 8012c7e:	2301      	moveq	r3, #1
 8012c80:	61a3      	streq	r3, [r4, #24]
 8012c82:	4620      	mov	r0, r4
 8012c84:	f000 f820 	bl	8012cc8 <__sfp>
 8012c88:	6060      	str	r0, [r4, #4]
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f000 f81c 	bl	8012cc8 <__sfp>
 8012c90:	60a0      	str	r0, [r4, #8]
 8012c92:	4620      	mov	r0, r4
 8012c94:	f000 f818 	bl	8012cc8 <__sfp>
 8012c98:	2200      	movs	r2, #0
 8012c9a:	60e0      	str	r0, [r4, #12]
 8012c9c:	2104      	movs	r1, #4
 8012c9e:	6860      	ldr	r0, [r4, #4]
 8012ca0:	f7ff ff82 	bl	8012ba8 <std>
 8012ca4:	68a0      	ldr	r0, [r4, #8]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	2109      	movs	r1, #9
 8012caa:	f7ff ff7d 	bl	8012ba8 <std>
 8012cae:	68e0      	ldr	r0, [r4, #12]
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	2112      	movs	r1, #18
 8012cb4:	f7ff ff78 	bl	8012ba8 <std>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	61a3      	str	r3, [r4, #24]
 8012cbc:	e7d2      	b.n	8012c64 <__sinit+0xc>
 8012cbe:	bf00      	nop
 8012cc0:	08014530 	.word	0x08014530
 8012cc4:	08012bf1 	.word	0x08012bf1

08012cc8 <__sfp>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	4607      	mov	r7, r0
 8012ccc:	f7ff ffac 	bl	8012c28 <__sfp_lock_acquire>
 8012cd0:	4b1e      	ldr	r3, [pc, #120]	; (8012d4c <__sfp+0x84>)
 8012cd2:	681e      	ldr	r6, [r3, #0]
 8012cd4:	69b3      	ldr	r3, [r6, #24]
 8012cd6:	b913      	cbnz	r3, 8012cde <__sfp+0x16>
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f7ff ffbd 	bl	8012c58 <__sinit>
 8012cde:	3648      	adds	r6, #72	; 0x48
 8012ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ce4:	3b01      	subs	r3, #1
 8012ce6:	d503      	bpl.n	8012cf0 <__sfp+0x28>
 8012ce8:	6833      	ldr	r3, [r6, #0]
 8012cea:	b30b      	cbz	r3, 8012d30 <__sfp+0x68>
 8012cec:	6836      	ldr	r6, [r6, #0]
 8012cee:	e7f7      	b.n	8012ce0 <__sfp+0x18>
 8012cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cf4:	b9d5      	cbnz	r5, 8012d2c <__sfp+0x64>
 8012cf6:	4b16      	ldr	r3, [pc, #88]	; (8012d50 <__sfp+0x88>)
 8012cf8:	60e3      	str	r3, [r4, #12]
 8012cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8012d00:	f000 f86c 	bl	8012ddc <__retarget_lock_init_recursive>
 8012d04:	f7ff ff96 	bl	8012c34 <__sfp_lock_release>
 8012d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012d10:	6025      	str	r5, [r4, #0]
 8012d12:	61a5      	str	r5, [r4, #24]
 8012d14:	2208      	movs	r2, #8
 8012d16:	4629      	mov	r1, r5
 8012d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012d1c:	f000 f86f 	bl	8012dfe <memset>
 8012d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012d28:	4620      	mov	r0, r4
 8012d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d2c:	3468      	adds	r4, #104	; 0x68
 8012d2e:	e7d9      	b.n	8012ce4 <__sfp+0x1c>
 8012d30:	2104      	movs	r1, #4
 8012d32:	4638      	mov	r0, r7
 8012d34:	f7ff ff62 	bl	8012bfc <__sfmoreglue>
 8012d38:	4604      	mov	r4, r0
 8012d3a:	6030      	str	r0, [r6, #0]
 8012d3c:	2800      	cmp	r0, #0
 8012d3e:	d1d5      	bne.n	8012cec <__sfp+0x24>
 8012d40:	f7ff ff78 	bl	8012c34 <__sfp_lock_release>
 8012d44:	230c      	movs	r3, #12
 8012d46:	603b      	str	r3, [r7, #0]
 8012d48:	e7ee      	b.n	8012d28 <__sfp+0x60>
 8012d4a:	bf00      	nop
 8012d4c:	08014530 	.word	0x08014530
 8012d50:	ffff0001 	.word	0xffff0001

08012d54 <_fwalk_reent>:
 8012d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d58:	4606      	mov	r6, r0
 8012d5a:	4688      	mov	r8, r1
 8012d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d60:	2700      	movs	r7, #0
 8012d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012d66:	f1b9 0901 	subs.w	r9, r9, #1
 8012d6a:	d505      	bpl.n	8012d78 <_fwalk_reent+0x24>
 8012d6c:	6824      	ldr	r4, [r4, #0]
 8012d6e:	2c00      	cmp	r4, #0
 8012d70:	d1f7      	bne.n	8012d62 <_fwalk_reent+0xe>
 8012d72:	4638      	mov	r0, r7
 8012d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d78:	89ab      	ldrh	r3, [r5, #12]
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d907      	bls.n	8012d8e <_fwalk_reent+0x3a>
 8012d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d82:	3301      	adds	r3, #1
 8012d84:	d003      	beq.n	8012d8e <_fwalk_reent+0x3a>
 8012d86:	4629      	mov	r1, r5
 8012d88:	4630      	mov	r0, r6
 8012d8a:	47c0      	blx	r8
 8012d8c:	4307      	orrs	r7, r0
 8012d8e:	3568      	adds	r5, #104	; 0x68
 8012d90:	e7e9      	b.n	8012d66 <_fwalk_reent+0x12>
	...

08012d94 <__libc_init_array>:
 8012d94:	b570      	push	{r4, r5, r6, lr}
 8012d96:	4d0d      	ldr	r5, [pc, #52]	; (8012dcc <__libc_init_array+0x38>)
 8012d98:	4c0d      	ldr	r4, [pc, #52]	; (8012dd0 <__libc_init_array+0x3c>)
 8012d9a:	1b64      	subs	r4, r4, r5
 8012d9c:	10a4      	asrs	r4, r4, #2
 8012d9e:	2600      	movs	r6, #0
 8012da0:	42a6      	cmp	r6, r4
 8012da2:	d109      	bne.n	8012db8 <__libc_init_array+0x24>
 8012da4:	4d0b      	ldr	r5, [pc, #44]	; (8012dd4 <__libc_init_array+0x40>)
 8012da6:	4c0c      	ldr	r4, [pc, #48]	; (8012dd8 <__libc_init_array+0x44>)
 8012da8:	f001 f9cc 	bl	8014144 <_init>
 8012dac:	1b64      	subs	r4, r4, r5
 8012dae:	10a4      	asrs	r4, r4, #2
 8012db0:	2600      	movs	r6, #0
 8012db2:	42a6      	cmp	r6, r4
 8012db4:	d105      	bne.n	8012dc2 <__libc_init_array+0x2e>
 8012db6:	bd70      	pop	{r4, r5, r6, pc}
 8012db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dbc:	4798      	blx	r3
 8012dbe:	3601      	adds	r6, #1
 8012dc0:	e7ee      	b.n	8012da0 <__libc_init_array+0xc>
 8012dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dc6:	4798      	blx	r3
 8012dc8:	3601      	adds	r6, #1
 8012dca:	e7f2      	b.n	8012db2 <__libc_init_array+0x1e>
 8012dcc:	080147e8 	.word	0x080147e8
 8012dd0:	080147e8 	.word	0x080147e8
 8012dd4:	080147e8 	.word	0x080147e8
 8012dd8:	080147ec 	.word	0x080147ec

08012ddc <__retarget_lock_init_recursive>:
 8012ddc:	4770      	bx	lr

08012dde <__retarget_lock_acquire_recursive>:
 8012dde:	4770      	bx	lr

08012de0 <__retarget_lock_release_recursive>:
 8012de0:	4770      	bx	lr

08012de2 <memcpy>:
 8012de2:	440a      	add	r2, r1
 8012de4:	4291      	cmp	r1, r2
 8012de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8012dea:	d100      	bne.n	8012dee <memcpy+0xc>
 8012dec:	4770      	bx	lr
 8012dee:	b510      	push	{r4, lr}
 8012df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012df8:	4291      	cmp	r1, r2
 8012dfa:	d1f9      	bne.n	8012df0 <memcpy+0xe>
 8012dfc:	bd10      	pop	{r4, pc}

08012dfe <memset>:
 8012dfe:	4402      	add	r2, r0
 8012e00:	4603      	mov	r3, r0
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d100      	bne.n	8012e08 <memset+0xa>
 8012e06:	4770      	bx	lr
 8012e08:	f803 1b01 	strb.w	r1, [r3], #1
 8012e0c:	e7f9      	b.n	8012e02 <memset+0x4>
	...

08012e10 <sbrk_aligned>:
 8012e10:	b570      	push	{r4, r5, r6, lr}
 8012e12:	4e0e      	ldr	r6, [pc, #56]	; (8012e4c <sbrk_aligned+0x3c>)
 8012e14:	460c      	mov	r4, r1
 8012e16:	6831      	ldr	r1, [r6, #0]
 8012e18:	4605      	mov	r5, r0
 8012e1a:	b911      	cbnz	r1, 8012e22 <sbrk_aligned+0x12>
 8012e1c:	f000 f984 	bl	8013128 <_sbrk_r>
 8012e20:	6030      	str	r0, [r6, #0]
 8012e22:	4621      	mov	r1, r4
 8012e24:	4628      	mov	r0, r5
 8012e26:	f000 f97f 	bl	8013128 <_sbrk_r>
 8012e2a:	1c43      	adds	r3, r0, #1
 8012e2c:	d00a      	beq.n	8012e44 <sbrk_aligned+0x34>
 8012e2e:	1cc4      	adds	r4, r0, #3
 8012e30:	f024 0403 	bic.w	r4, r4, #3
 8012e34:	42a0      	cmp	r0, r4
 8012e36:	d007      	beq.n	8012e48 <sbrk_aligned+0x38>
 8012e38:	1a21      	subs	r1, r4, r0
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	f000 f974 	bl	8013128 <_sbrk_r>
 8012e40:	3001      	adds	r0, #1
 8012e42:	d101      	bne.n	8012e48 <sbrk_aligned+0x38>
 8012e44:	f04f 34ff 	mov.w	r4, #4294967295
 8012e48:	4620      	mov	r0, r4
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	20006048 	.word	0x20006048

08012e50 <_malloc_r>:
 8012e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e54:	1ccd      	adds	r5, r1, #3
 8012e56:	f025 0503 	bic.w	r5, r5, #3
 8012e5a:	3508      	adds	r5, #8
 8012e5c:	2d0c      	cmp	r5, #12
 8012e5e:	bf38      	it	cc
 8012e60:	250c      	movcc	r5, #12
 8012e62:	2d00      	cmp	r5, #0
 8012e64:	4607      	mov	r7, r0
 8012e66:	db01      	blt.n	8012e6c <_malloc_r+0x1c>
 8012e68:	42a9      	cmp	r1, r5
 8012e6a:	d905      	bls.n	8012e78 <_malloc_r+0x28>
 8012e6c:	230c      	movs	r3, #12
 8012e6e:	603b      	str	r3, [r7, #0]
 8012e70:	2600      	movs	r6, #0
 8012e72:	4630      	mov	r0, r6
 8012e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e78:	4e2e      	ldr	r6, [pc, #184]	; (8012f34 <_malloc_r+0xe4>)
 8012e7a:	f000 fbc5 	bl	8013608 <__malloc_lock>
 8012e7e:	6833      	ldr	r3, [r6, #0]
 8012e80:	461c      	mov	r4, r3
 8012e82:	bb34      	cbnz	r4, 8012ed2 <_malloc_r+0x82>
 8012e84:	4629      	mov	r1, r5
 8012e86:	4638      	mov	r0, r7
 8012e88:	f7ff ffc2 	bl	8012e10 <sbrk_aligned>
 8012e8c:	1c43      	adds	r3, r0, #1
 8012e8e:	4604      	mov	r4, r0
 8012e90:	d14d      	bne.n	8012f2e <_malloc_r+0xde>
 8012e92:	6834      	ldr	r4, [r6, #0]
 8012e94:	4626      	mov	r6, r4
 8012e96:	2e00      	cmp	r6, #0
 8012e98:	d140      	bne.n	8012f1c <_malloc_r+0xcc>
 8012e9a:	6823      	ldr	r3, [r4, #0]
 8012e9c:	4631      	mov	r1, r6
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	eb04 0803 	add.w	r8, r4, r3
 8012ea4:	f000 f940 	bl	8013128 <_sbrk_r>
 8012ea8:	4580      	cmp	r8, r0
 8012eaa:	d13a      	bne.n	8012f22 <_malloc_r+0xd2>
 8012eac:	6821      	ldr	r1, [r4, #0]
 8012eae:	3503      	adds	r5, #3
 8012eb0:	1a6d      	subs	r5, r5, r1
 8012eb2:	f025 0503 	bic.w	r5, r5, #3
 8012eb6:	3508      	adds	r5, #8
 8012eb8:	2d0c      	cmp	r5, #12
 8012eba:	bf38      	it	cc
 8012ebc:	250c      	movcc	r5, #12
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	4638      	mov	r0, r7
 8012ec2:	f7ff ffa5 	bl	8012e10 <sbrk_aligned>
 8012ec6:	3001      	adds	r0, #1
 8012ec8:	d02b      	beq.n	8012f22 <_malloc_r+0xd2>
 8012eca:	6823      	ldr	r3, [r4, #0]
 8012ecc:	442b      	add	r3, r5
 8012ece:	6023      	str	r3, [r4, #0]
 8012ed0:	e00e      	b.n	8012ef0 <_malloc_r+0xa0>
 8012ed2:	6822      	ldr	r2, [r4, #0]
 8012ed4:	1b52      	subs	r2, r2, r5
 8012ed6:	d41e      	bmi.n	8012f16 <_malloc_r+0xc6>
 8012ed8:	2a0b      	cmp	r2, #11
 8012eda:	d916      	bls.n	8012f0a <_malloc_r+0xba>
 8012edc:	1961      	adds	r1, r4, r5
 8012ede:	42a3      	cmp	r3, r4
 8012ee0:	6025      	str	r5, [r4, #0]
 8012ee2:	bf18      	it	ne
 8012ee4:	6059      	strne	r1, [r3, #4]
 8012ee6:	6863      	ldr	r3, [r4, #4]
 8012ee8:	bf08      	it	eq
 8012eea:	6031      	streq	r1, [r6, #0]
 8012eec:	5162      	str	r2, [r4, r5]
 8012eee:	604b      	str	r3, [r1, #4]
 8012ef0:	4638      	mov	r0, r7
 8012ef2:	f104 060b 	add.w	r6, r4, #11
 8012ef6:	f000 fb8d 	bl	8013614 <__malloc_unlock>
 8012efa:	f026 0607 	bic.w	r6, r6, #7
 8012efe:	1d23      	adds	r3, r4, #4
 8012f00:	1af2      	subs	r2, r6, r3
 8012f02:	d0b6      	beq.n	8012e72 <_malloc_r+0x22>
 8012f04:	1b9b      	subs	r3, r3, r6
 8012f06:	50a3      	str	r3, [r4, r2]
 8012f08:	e7b3      	b.n	8012e72 <_malloc_r+0x22>
 8012f0a:	6862      	ldr	r2, [r4, #4]
 8012f0c:	42a3      	cmp	r3, r4
 8012f0e:	bf0c      	ite	eq
 8012f10:	6032      	streq	r2, [r6, #0]
 8012f12:	605a      	strne	r2, [r3, #4]
 8012f14:	e7ec      	b.n	8012ef0 <_malloc_r+0xa0>
 8012f16:	4623      	mov	r3, r4
 8012f18:	6864      	ldr	r4, [r4, #4]
 8012f1a:	e7b2      	b.n	8012e82 <_malloc_r+0x32>
 8012f1c:	4634      	mov	r4, r6
 8012f1e:	6876      	ldr	r6, [r6, #4]
 8012f20:	e7b9      	b.n	8012e96 <_malloc_r+0x46>
 8012f22:	230c      	movs	r3, #12
 8012f24:	603b      	str	r3, [r7, #0]
 8012f26:	4638      	mov	r0, r7
 8012f28:	f000 fb74 	bl	8013614 <__malloc_unlock>
 8012f2c:	e7a1      	b.n	8012e72 <_malloc_r+0x22>
 8012f2e:	6025      	str	r5, [r4, #0]
 8012f30:	e7de      	b.n	8012ef0 <_malloc_r+0xa0>
 8012f32:	bf00      	nop
 8012f34:	20006044 	.word	0x20006044

08012f38 <iprintf>:
 8012f38:	b40f      	push	{r0, r1, r2, r3}
 8012f3a:	4b0a      	ldr	r3, [pc, #40]	; (8012f64 <iprintf+0x2c>)
 8012f3c:	b513      	push	{r0, r1, r4, lr}
 8012f3e:	681c      	ldr	r4, [r3, #0]
 8012f40:	b124      	cbz	r4, 8012f4c <iprintf+0x14>
 8012f42:	69a3      	ldr	r3, [r4, #24]
 8012f44:	b913      	cbnz	r3, 8012f4c <iprintf+0x14>
 8012f46:	4620      	mov	r0, r4
 8012f48:	f7ff fe86 	bl	8012c58 <__sinit>
 8012f4c:	ab05      	add	r3, sp, #20
 8012f4e:	9a04      	ldr	r2, [sp, #16]
 8012f50:	68a1      	ldr	r1, [r4, #8]
 8012f52:	9301      	str	r3, [sp, #4]
 8012f54:	4620      	mov	r0, r4
 8012f56:	f000 fbd9 	bl	801370c <_vfiprintf_r>
 8012f5a:	b002      	add	sp, #8
 8012f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f60:	b004      	add	sp, #16
 8012f62:	4770      	bx	lr
 8012f64:	200001c0 	.word	0x200001c0

08012f68 <_puts_r>:
 8012f68:	b570      	push	{r4, r5, r6, lr}
 8012f6a:	460e      	mov	r6, r1
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	b118      	cbz	r0, 8012f78 <_puts_r+0x10>
 8012f70:	6983      	ldr	r3, [r0, #24]
 8012f72:	b90b      	cbnz	r3, 8012f78 <_puts_r+0x10>
 8012f74:	f7ff fe70 	bl	8012c58 <__sinit>
 8012f78:	69ab      	ldr	r3, [r5, #24]
 8012f7a:	68ac      	ldr	r4, [r5, #8]
 8012f7c:	b913      	cbnz	r3, 8012f84 <_puts_r+0x1c>
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f7ff fe6a 	bl	8012c58 <__sinit>
 8012f84:	4b2c      	ldr	r3, [pc, #176]	; (8013038 <_puts_r+0xd0>)
 8012f86:	429c      	cmp	r4, r3
 8012f88:	d120      	bne.n	8012fcc <_puts_r+0x64>
 8012f8a:	686c      	ldr	r4, [r5, #4]
 8012f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012f8e:	07db      	lsls	r3, r3, #31
 8012f90:	d405      	bmi.n	8012f9e <_puts_r+0x36>
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	0598      	lsls	r0, r3, #22
 8012f96:	d402      	bmi.n	8012f9e <_puts_r+0x36>
 8012f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012f9a:	f7ff ff20 	bl	8012dde <__retarget_lock_acquire_recursive>
 8012f9e:	89a3      	ldrh	r3, [r4, #12]
 8012fa0:	0719      	lsls	r1, r3, #28
 8012fa2:	d51d      	bpl.n	8012fe0 <_puts_r+0x78>
 8012fa4:	6923      	ldr	r3, [r4, #16]
 8012fa6:	b1db      	cbz	r3, 8012fe0 <_puts_r+0x78>
 8012fa8:	3e01      	subs	r6, #1
 8012faa:	68a3      	ldr	r3, [r4, #8]
 8012fac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012fb0:	3b01      	subs	r3, #1
 8012fb2:	60a3      	str	r3, [r4, #8]
 8012fb4:	bb39      	cbnz	r1, 8013006 <_puts_r+0x9e>
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	da38      	bge.n	801302c <_puts_r+0xc4>
 8012fba:	4622      	mov	r2, r4
 8012fbc:	210a      	movs	r1, #10
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f000 f906 	bl	80131d0 <__swbuf_r>
 8012fc4:	3001      	adds	r0, #1
 8012fc6:	d011      	beq.n	8012fec <_puts_r+0x84>
 8012fc8:	250a      	movs	r5, #10
 8012fca:	e011      	b.n	8012ff0 <_puts_r+0x88>
 8012fcc:	4b1b      	ldr	r3, [pc, #108]	; (801303c <_puts_r+0xd4>)
 8012fce:	429c      	cmp	r4, r3
 8012fd0:	d101      	bne.n	8012fd6 <_puts_r+0x6e>
 8012fd2:	68ac      	ldr	r4, [r5, #8]
 8012fd4:	e7da      	b.n	8012f8c <_puts_r+0x24>
 8012fd6:	4b1a      	ldr	r3, [pc, #104]	; (8013040 <_puts_r+0xd8>)
 8012fd8:	429c      	cmp	r4, r3
 8012fda:	bf08      	it	eq
 8012fdc:	68ec      	ldreq	r4, [r5, #12]
 8012fde:	e7d5      	b.n	8012f8c <_puts_r+0x24>
 8012fe0:	4621      	mov	r1, r4
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	f000 f958 	bl	8013298 <__swsetup_r>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d0dd      	beq.n	8012fa8 <_puts_r+0x40>
 8012fec:	f04f 35ff 	mov.w	r5, #4294967295
 8012ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ff2:	07da      	lsls	r2, r3, #31
 8012ff4:	d405      	bmi.n	8013002 <_puts_r+0x9a>
 8012ff6:	89a3      	ldrh	r3, [r4, #12]
 8012ff8:	059b      	lsls	r3, r3, #22
 8012ffa:	d402      	bmi.n	8013002 <_puts_r+0x9a>
 8012ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012ffe:	f7ff feef 	bl	8012de0 <__retarget_lock_release_recursive>
 8013002:	4628      	mov	r0, r5
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	2b00      	cmp	r3, #0
 8013008:	da04      	bge.n	8013014 <_puts_r+0xac>
 801300a:	69a2      	ldr	r2, [r4, #24]
 801300c:	429a      	cmp	r2, r3
 801300e:	dc06      	bgt.n	801301e <_puts_r+0xb6>
 8013010:	290a      	cmp	r1, #10
 8013012:	d004      	beq.n	801301e <_puts_r+0xb6>
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	1c5a      	adds	r2, r3, #1
 8013018:	6022      	str	r2, [r4, #0]
 801301a:	7019      	strb	r1, [r3, #0]
 801301c:	e7c5      	b.n	8012faa <_puts_r+0x42>
 801301e:	4622      	mov	r2, r4
 8013020:	4628      	mov	r0, r5
 8013022:	f000 f8d5 	bl	80131d0 <__swbuf_r>
 8013026:	3001      	adds	r0, #1
 8013028:	d1bf      	bne.n	8012faa <_puts_r+0x42>
 801302a:	e7df      	b.n	8012fec <_puts_r+0x84>
 801302c:	6823      	ldr	r3, [r4, #0]
 801302e:	250a      	movs	r5, #10
 8013030:	1c5a      	adds	r2, r3, #1
 8013032:	6022      	str	r2, [r4, #0]
 8013034:	701d      	strb	r5, [r3, #0]
 8013036:	e7db      	b.n	8012ff0 <_puts_r+0x88>
 8013038:	080144f0 	.word	0x080144f0
 801303c:	08014510 	.word	0x08014510
 8013040:	080144d0 	.word	0x080144d0

08013044 <puts>:
 8013044:	4b02      	ldr	r3, [pc, #8]	; (8013050 <puts+0xc>)
 8013046:	4601      	mov	r1, r0
 8013048:	6818      	ldr	r0, [r3, #0]
 801304a:	f7ff bf8d 	b.w	8012f68 <_puts_r>
 801304e:	bf00      	nop
 8013050:	200001c0 	.word	0x200001c0

08013054 <cleanup_glue>:
 8013054:	b538      	push	{r3, r4, r5, lr}
 8013056:	460c      	mov	r4, r1
 8013058:	6809      	ldr	r1, [r1, #0]
 801305a:	4605      	mov	r5, r0
 801305c:	b109      	cbz	r1, 8013062 <cleanup_glue+0xe>
 801305e:	f7ff fff9 	bl	8013054 <cleanup_glue>
 8013062:	4621      	mov	r1, r4
 8013064:	4628      	mov	r0, r5
 8013066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801306a:	f000 bad9 	b.w	8013620 <_free_r>
	...

08013070 <_reclaim_reent>:
 8013070:	4b2c      	ldr	r3, [pc, #176]	; (8013124 <_reclaim_reent+0xb4>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	4283      	cmp	r3, r0
 8013076:	b570      	push	{r4, r5, r6, lr}
 8013078:	4604      	mov	r4, r0
 801307a:	d051      	beq.n	8013120 <_reclaim_reent+0xb0>
 801307c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801307e:	b143      	cbz	r3, 8013092 <_reclaim_reent+0x22>
 8013080:	68db      	ldr	r3, [r3, #12]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d14a      	bne.n	801311c <_reclaim_reent+0xac>
 8013086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013088:	6819      	ldr	r1, [r3, #0]
 801308a:	b111      	cbz	r1, 8013092 <_reclaim_reent+0x22>
 801308c:	4620      	mov	r0, r4
 801308e:	f000 fac7 	bl	8013620 <_free_r>
 8013092:	6961      	ldr	r1, [r4, #20]
 8013094:	b111      	cbz	r1, 801309c <_reclaim_reent+0x2c>
 8013096:	4620      	mov	r0, r4
 8013098:	f000 fac2 	bl	8013620 <_free_r>
 801309c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801309e:	b111      	cbz	r1, 80130a6 <_reclaim_reent+0x36>
 80130a0:	4620      	mov	r0, r4
 80130a2:	f000 fabd 	bl	8013620 <_free_r>
 80130a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80130a8:	b111      	cbz	r1, 80130b0 <_reclaim_reent+0x40>
 80130aa:	4620      	mov	r0, r4
 80130ac:	f000 fab8 	bl	8013620 <_free_r>
 80130b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80130b2:	b111      	cbz	r1, 80130ba <_reclaim_reent+0x4a>
 80130b4:	4620      	mov	r0, r4
 80130b6:	f000 fab3 	bl	8013620 <_free_r>
 80130ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80130bc:	b111      	cbz	r1, 80130c4 <_reclaim_reent+0x54>
 80130be:	4620      	mov	r0, r4
 80130c0:	f000 faae 	bl	8013620 <_free_r>
 80130c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80130c6:	b111      	cbz	r1, 80130ce <_reclaim_reent+0x5e>
 80130c8:	4620      	mov	r0, r4
 80130ca:	f000 faa9 	bl	8013620 <_free_r>
 80130ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80130d0:	b111      	cbz	r1, 80130d8 <_reclaim_reent+0x68>
 80130d2:	4620      	mov	r0, r4
 80130d4:	f000 faa4 	bl	8013620 <_free_r>
 80130d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130da:	b111      	cbz	r1, 80130e2 <_reclaim_reent+0x72>
 80130dc:	4620      	mov	r0, r4
 80130de:	f000 fa9f 	bl	8013620 <_free_r>
 80130e2:	69a3      	ldr	r3, [r4, #24]
 80130e4:	b1e3      	cbz	r3, 8013120 <_reclaim_reent+0xb0>
 80130e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80130e8:	4620      	mov	r0, r4
 80130ea:	4798      	blx	r3
 80130ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80130ee:	b1b9      	cbz	r1, 8013120 <_reclaim_reent+0xb0>
 80130f0:	4620      	mov	r0, r4
 80130f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130f6:	f7ff bfad 	b.w	8013054 <cleanup_glue>
 80130fa:	5949      	ldr	r1, [r1, r5]
 80130fc:	b941      	cbnz	r1, 8013110 <_reclaim_reent+0xa0>
 80130fe:	3504      	adds	r5, #4
 8013100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013102:	2d80      	cmp	r5, #128	; 0x80
 8013104:	68d9      	ldr	r1, [r3, #12]
 8013106:	d1f8      	bne.n	80130fa <_reclaim_reent+0x8a>
 8013108:	4620      	mov	r0, r4
 801310a:	f000 fa89 	bl	8013620 <_free_r>
 801310e:	e7ba      	b.n	8013086 <_reclaim_reent+0x16>
 8013110:	680e      	ldr	r6, [r1, #0]
 8013112:	4620      	mov	r0, r4
 8013114:	f000 fa84 	bl	8013620 <_free_r>
 8013118:	4631      	mov	r1, r6
 801311a:	e7ef      	b.n	80130fc <_reclaim_reent+0x8c>
 801311c:	2500      	movs	r5, #0
 801311e:	e7ef      	b.n	8013100 <_reclaim_reent+0x90>
 8013120:	bd70      	pop	{r4, r5, r6, pc}
 8013122:	bf00      	nop
 8013124:	200001c0 	.word	0x200001c0

08013128 <_sbrk_r>:
 8013128:	b538      	push	{r3, r4, r5, lr}
 801312a:	4d06      	ldr	r5, [pc, #24]	; (8013144 <_sbrk_r+0x1c>)
 801312c:	2300      	movs	r3, #0
 801312e:	4604      	mov	r4, r0
 8013130:	4608      	mov	r0, r1
 8013132:	602b      	str	r3, [r5, #0]
 8013134:	f7f3 f89c 	bl	8006270 <_sbrk>
 8013138:	1c43      	adds	r3, r0, #1
 801313a:	d102      	bne.n	8013142 <_sbrk_r+0x1a>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	b103      	cbz	r3, 8013142 <_sbrk_r+0x1a>
 8013140:	6023      	str	r3, [r4, #0]
 8013142:	bd38      	pop	{r3, r4, r5, pc}
 8013144:	2000604c 	.word	0x2000604c

08013148 <__sread>:
 8013148:	b510      	push	{r4, lr}
 801314a:	460c      	mov	r4, r1
 801314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013150:	f000 fda0 	bl	8013c94 <_read_r>
 8013154:	2800      	cmp	r0, #0
 8013156:	bfab      	itete	ge
 8013158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801315a:	89a3      	ldrhlt	r3, [r4, #12]
 801315c:	181b      	addge	r3, r3, r0
 801315e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013162:	bfac      	ite	ge
 8013164:	6563      	strge	r3, [r4, #84]	; 0x54
 8013166:	81a3      	strhlt	r3, [r4, #12]
 8013168:	bd10      	pop	{r4, pc}

0801316a <__swrite>:
 801316a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801316e:	461f      	mov	r7, r3
 8013170:	898b      	ldrh	r3, [r1, #12]
 8013172:	05db      	lsls	r3, r3, #23
 8013174:	4605      	mov	r5, r0
 8013176:	460c      	mov	r4, r1
 8013178:	4616      	mov	r6, r2
 801317a:	d505      	bpl.n	8013188 <__swrite+0x1e>
 801317c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013180:	2302      	movs	r3, #2
 8013182:	2200      	movs	r2, #0
 8013184:	f000 f9c8 	bl	8013518 <_lseek_r>
 8013188:	89a3      	ldrh	r3, [r4, #12]
 801318a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801318e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013192:	81a3      	strh	r3, [r4, #12]
 8013194:	4632      	mov	r2, r6
 8013196:	463b      	mov	r3, r7
 8013198:	4628      	mov	r0, r5
 801319a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801319e:	f000 b869 	b.w	8013274 <_write_r>

080131a2 <__sseek>:
 80131a2:	b510      	push	{r4, lr}
 80131a4:	460c      	mov	r4, r1
 80131a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131aa:	f000 f9b5 	bl	8013518 <_lseek_r>
 80131ae:	1c43      	adds	r3, r0, #1
 80131b0:	89a3      	ldrh	r3, [r4, #12]
 80131b2:	bf15      	itete	ne
 80131b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80131b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131be:	81a3      	strheq	r3, [r4, #12]
 80131c0:	bf18      	it	ne
 80131c2:	81a3      	strhne	r3, [r4, #12]
 80131c4:	bd10      	pop	{r4, pc}

080131c6 <__sclose>:
 80131c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ca:	f000 b8d3 	b.w	8013374 <_close_r>
	...

080131d0 <__swbuf_r>:
 80131d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d2:	460e      	mov	r6, r1
 80131d4:	4614      	mov	r4, r2
 80131d6:	4605      	mov	r5, r0
 80131d8:	b118      	cbz	r0, 80131e2 <__swbuf_r+0x12>
 80131da:	6983      	ldr	r3, [r0, #24]
 80131dc:	b90b      	cbnz	r3, 80131e2 <__swbuf_r+0x12>
 80131de:	f7ff fd3b 	bl	8012c58 <__sinit>
 80131e2:	4b21      	ldr	r3, [pc, #132]	; (8013268 <__swbuf_r+0x98>)
 80131e4:	429c      	cmp	r4, r3
 80131e6:	d12b      	bne.n	8013240 <__swbuf_r+0x70>
 80131e8:	686c      	ldr	r4, [r5, #4]
 80131ea:	69a3      	ldr	r3, [r4, #24]
 80131ec:	60a3      	str	r3, [r4, #8]
 80131ee:	89a3      	ldrh	r3, [r4, #12]
 80131f0:	071a      	lsls	r2, r3, #28
 80131f2:	d52f      	bpl.n	8013254 <__swbuf_r+0x84>
 80131f4:	6923      	ldr	r3, [r4, #16]
 80131f6:	b36b      	cbz	r3, 8013254 <__swbuf_r+0x84>
 80131f8:	6923      	ldr	r3, [r4, #16]
 80131fa:	6820      	ldr	r0, [r4, #0]
 80131fc:	1ac0      	subs	r0, r0, r3
 80131fe:	6963      	ldr	r3, [r4, #20]
 8013200:	b2f6      	uxtb	r6, r6
 8013202:	4283      	cmp	r3, r0
 8013204:	4637      	mov	r7, r6
 8013206:	dc04      	bgt.n	8013212 <__swbuf_r+0x42>
 8013208:	4621      	mov	r1, r4
 801320a:	4628      	mov	r0, r5
 801320c:	f000 f948 	bl	80134a0 <_fflush_r>
 8013210:	bb30      	cbnz	r0, 8013260 <__swbuf_r+0x90>
 8013212:	68a3      	ldr	r3, [r4, #8]
 8013214:	3b01      	subs	r3, #1
 8013216:	60a3      	str	r3, [r4, #8]
 8013218:	6823      	ldr	r3, [r4, #0]
 801321a:	1c5a      	adds	r2, r3, #1
 801321c:	6022      	str	r2, [r4, #0]
 801321e:	701e      	strb	r6, [r3, #0]
 8013220:	6963      	ldr	r3, [r4, #20]
 8013222:	3001      	adds	r0, #1
 8013224:	4283      	cmp	r3, r0
 8013226:	d004      	beq.n	8013232 <__swbuf_r+0x62>
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	07db      	lsls	r3, r3, #31
 801322c:	d506      	bpl.n	801323c <__swbuf_r+0x6c>
 801322e:	2e0a      	cmp	r6, #10
 8013230:	d104      	bne.n	801323c <__swbuf_r+0x6c>
 8013232:	4621      	mov	r1, r4
 8013234:	4628      	mov	r0, r5
 8013236:	f000 f933 	bl	80134a0 <_fflush_r>
 801323a:	b988      	cbnz	r0, 8013260 <__swbuf_r+0x90>
 801323c:	4638      	mov	r0, r7
 801323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013240:	4b0a      	ldr	r3, [pc, #40]	; (801326c <__swbuf_r+0x9c>)
 8013242:	429c      	cmp	r4, r3
 8013244:	d101      	bne.n	801324a <__swbuf_r+0x7a>
 8013246:	68ac      	ldr	r4, [r5, #8]
 8013248:	e7cf      	b.n	80131ea <__swbuf_r+0x1a>
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <__swbuf_r+0xa0>)
 801324c:	429c      	cmp	r4, r3
 801324e:	bf08      	it	eq
 8013250:	68ec      	ldreq	r4, [r5, #12]
 8013252:	e7ca      	b.n	80131ea <__swbuf_r+0x1a>
 8013254:	4621      	mov	r1, r4
 8013256:	4628      	mov	r0, r5
 8013258:	f000 f81e 	bl	8013298 <__swsetup_r>
 801325c:	2800      	cmp	r0, #0
 801325e:	d0cb      	beq.n	80131f8 <__swbuf_r+0x28>
 8013260:	f04f 37ff 	mov.w	r7, #4294967295
 8013264:	e7ea      	b.n	801323c <__swbuf_r+0x6c>
 8013266:	bf00      	nop
 8013268:	080144f0 	.word	0x080144f0
 801326c:	08014510 	.word	0x08014510
 8013270:	080144d0 	.word	0x080144d0

08013274 <_write_r>:
 8013274:	b538      	push	{r3, r4, r5, lr}
 8013276:	4d07      	ldr	r5, [pc, #28]	; (8013294 <_write_r+0x20>)
 8013278:	4604      	mov	r4, r0
 801327a:	4608      	mov	r0, r1
 801327c:	4611      	mov	r1, r2
 801327e:	2200      	movs	r2, #0
 8013280:	602a      	str	r2, [r5, #0]
 8013282:	461a      	mov	r2, r3
 8013284:	f7f0 f9a9 	bl	80035da <_write>
 8013288:	1c43      	adds	r3, r0, #1
 801328a:	d102      	bne.n	8013292 <_write_r+0x1e>
 801328c:	682b      	ldr	r3, [r5, #0]
 801328e:	b103      	cbz	r3, 8013292 <_write_r+0x1e>
 8013290:	6023      	str	r3, [r4, #0]
 8013292:	bd38      	pop	{r3, r4, r5, pc}
 8013294:	2000604c 	.word	0x2000604c

08013298 <__swsetup_r>:
 8013298:	4b32      	ldr	r3, [pc, #200]	; (8013364 <__swsetup_r+0xcc>)
 801329a:	b570      	push	{r4, r5, r6, lr}
 801329c:	681d      	ldr	r5, [r3, #0]
 801329e:	4606      	mov	r6, r0
 80132a0:	460c      	mov	r4, r1
 80132a2:	b125      	cbz	r5, 80132ae <__swsetup_r+0x16>
 80132a4:	69ab      	ldr	r3, [r5, #24]
 80132a6:	b913      	cbnz	r3, 80132ae <__swsetup_r+0x16>
 80132a8:	4628      	mov	r0, r5
 80132aa:	f7ff fcd5 	bl	8012c58 <__sinit>
 80132ae:	4b2e      	ldr	r3, [pc, #184]	; (8013368 <__swsetup_r+0xd0>)
 80132b0:	429c      	cmp	r4, r3
 80132b2:	d10f      	bne.n	80132d4 <__swsetup_r+0x3c>
 80132b4:	686c      	ldr	r4, [r5, #4]
 80132b6:	89a3      	ldrh	r3, [r4, #12]
 80132b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80132bc:	0719      	lsls	r1, r3, #28
 80132be:	d42c      	bmi.n	801331a <__swsetup_r+0x82>
 80132c0:	06dd      	lsls	r5, r3, #27
 80132c2:	d411      	bmi.n	80132e8 <__swsetup_r+0x50>
 80132c4:	2309      	movs	r3, #9
 80132c6:	6033      	str	r3, [r6, #0]
 80132c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80132cc:	81a3      	strh	r3, [r4, #12]
 80132ce:	f04f 30ff 	mov.w	r0, #4294967295
 80132d2:	e03e      	b.n	8013352 <__swsetup_r+0xba>
 80132d4:	4b25      	ldr	r3, [pc, #148]	; (801336c <__swsetup_r+0xd4>)
 80132d6:	429c      	cmp	r4, r3
 80132d8:	d101      	bne.n	80132de <__swsetup_r+0x46>
 80132da:	68ac      	ldr	r4, [r5, #8]
 80132dc:	e7eb      	b.n	80132b6 <__swsetup_r+0x1e>
 80132de:	4b24      	ldr	r3, [pc, #144]	; (8013370 <__swsetup_r+0xd8>)
 80132e0:	429c      	cmp	r4, r3
 80132e2:	bf08      	it	eq
 80132e4:	68ec      	ldreq	r4, [r5, #12]
 80132e6:	e7e6      	b.n	80132b6 <__swsetup_r+0x1e>
 80132e8:	0758      	lsls	r0, r3, #29
 80132ea:	d512      	bpl.n	8013312 <__swsetup_r+0x7a>
 80132ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132ee:	b141      	cbz	r1, 8013302 <__swsetup_r+0x6a>
 80132f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132f4:	4299      	cmp	r1, r3
 80132f6:	d002      	beq.n	80132fe <__swsetup_r+0x66>
 80132f8:	4630      	mov	r0, r6
 80132fa:	f000 f991 	bl	8013620 <_free_r>
 80132fe:	2300      	movs	r3, #0
 8013300:	6363      	str	r3, [r4, #52]	; 0x34
 8013302:	89a3      	ldrh	r3, [r4, #12]
 8013304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013308:	81a3      	strh	r3, [r4, #12]
 801330a:	2300      	movs	r3, #0
 801330c:	6063      	str	r3, [r4, #4]
 801330e:	6923      	ldr	r3, [r4, #16]
 8013310:	6023      	str	r3, [r4, #0]
 8013312:	89a3      	ldrh	r3, [r4, #12]
 8013314:	f043 0308 	orr.w	r3, r3, #8
 8013318:	81a3      	strh	r3, [r4, #12]
 801331a:	6923      	ldr	r3, [r4, #16]
 801331c:	b94b      	cbnz	r3, 8013332 <__swsetup_r+0x9a>
 801331e:	89a3      	ldrh	r3, [r4, #12]
 8013320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013328:	d003      	beq.n	8013332 <__swsetup_r+0x9a>
 801332a:	4621      	mov	r1, r4
 801332c:	4630      	mov	r0, r6
 801332e:	f000 f92b 	bl	8013588 <__smakebuf_r>
 8013332:	89a0      	ldrh	r0, [r4, #12]
 8013334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013338:	f010 0301 	ands.w	r3, r0, #1
 801333c:	d00a      	beq.n	8013354 <__swsetup_r+0xbc>
 801333e:	2300      	movs	r3, #0
 8013340:	60a3      	str	r3, [r4, #8]
 8013342:	6963      	ldr	r3, [r4, #20]
 8013344:	425b      	negs	r3, r3
 8013346:	61a3      	str	r3, [r4, #24]
 8013348:	6923      	ldr	r3, [r4, #16]
 801334a:	b943      	cbnz	r3, 801335e <__swsetup_r+0xc6>
 801334c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013350:	d1ba      	bne.n	80132c8 <__swsetup_r+0x30>
 8013352:	bd70      	pop	{r4, r5, r6, pc}
 8013354:	0781      	lsls	r1, r0, #30
 8013356:	bf58      	it	pl
 8013358:	6963      	ldrpl	r3, [r4, #20]
 801335a:	60a3      	str	r3, [r4, #8]
 801335c:	e7f4      	b.n	8013348 <__swsetup_r+0xb0>
 801335e:	2000      	movs	r0, #0
 8013360:	e7f7      	b.n	8013352 <__swsetup_r+0xba>
 8013362:	bf00      	nop
 8013364:	200001c0 	.word	0x200001c0
 8013368:	080144f0 	.word	0x080144f0
 801336c:	08014510 	.word	0x08014510
 8013370:	080144d0 	.word	0x080144d0

08013374 <_close_r>:
 8013374:	b538      	push	{r3, r4, r5, lr}
 8013376:	4d06      	ldr	r5, [pc, #24]	; (8013390 <_close_r+0x1c>)
 8013378:	2300      	movs	r3, #0
 801337a:	4604      	mov	r4, r0
 801337c:	4608      	mov	r0, r1
 801337e:	602b      	str	r3, [r5, #0]
 8013380:	f7f2 ff41 	bl	8006206 <_close>
 8013384:	1c43      	adds	r3, r0, #1
 8013386:	d102      	bne.n	801338e <_close_r+0x1a>
 8013388:	682b      	ldr	r3, [r5, #0]
 801338a:	b103      	cbz	r3, 801338e <_close_r+0x1a>
 801338c:	6023      	str	r3, [r4, #0]
 801338e:	bd38      	pop	{r3, r4, r5, pc}
 8013390:	2000604c 	.word	0x2000604c

08013394 <__sflush_r>:
 8013394:	898a      	ldrh	r2, [r1, #12]
 8013396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801339a:	4605      	mov	r5, r0
 801339c:	0710      	lsls	r0, r2, #28
 801339e:	460c      	mov	r4, r1
 80133a0:	d458      	bmi.n	8013454 <__sflush_r+0xc0>
 80133a2:	684b      	ldr	r3, [r1, #4]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	dc05      	bgt.n	80133b4 <__sflush_r+0x20>
 80133a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	dc02      	bgt.n	80133b4 <__sflush_r+0x20>
 80133ae:	2000      	movs	r0, #0
 80133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133b6:	2e00      	cmp	r6, #0
 80133b8:	d0f9      	beq.n	80133ae <__sflush_r+0x1a>
 80133ba:	2300      	movs	r3, #0
 80133bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80133c0:	682f      	ldr	r7, [r5, #0]
 80133c2:	602b      	str	r3, [r5, #0]
 80133c4:	d032      	beq.n	801342c <__sflush_r+0x98>
 80133c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80133c8:	89a3      	ldrh	r3, [r4, #12]
 80133ca:	075a      	lsls	r2, r3, #29
 80133cc:	d505      	bpl.n	80133da <__sflush_r+0x46>
 80133ce:	6863      	ldr	r3, [r4, #4]
 80133d0:	1ac0      	subs	r0, r0, r3
 80133d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80133d4:	b10b      	cbz	r3, 80133da <__sflush_r+0x46>
 80133d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80133d8:	1ac0      	subs	r0, r0, r3
 80133da:	2300      	movs	r3, #0
 80133dc:	4602      	mov	r2, r0
 80133de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80133e0:	6a21      	ldr	r1, [r4, #32]
 80133e2:	4628      	mov	r0, r5
 80133e4:	47b0      	blx	r6
 80133e6:	1c43      	adds	r3, r0, #1
 80133e8:	89a3      	ldrh	r3, [r4, #12]
 80133ea:	d106      	bne.n	80133fa <__sflush_r+0x66>
 80133ec:	6829      	ldr	r1, [r5, #0]
 80133ee:	291d      	cmp	r1, #29
 80133f0:	d82c      	bhi.n	801344c <__sflush_r+0xb8>
 80133f2:	4a2a      	ldr	r2, [pc, #168]	; (801349c <__sflush_r+0x108>)
 80133f4:	40ca      	lsrs	r2, r1
 80133f6:	07d6      	lsls	r6, r2, #31
 80133f8:	d528      	bpl.n	801344c <__sflush_r+0xb8>
 80133fa:	2200      	movs	r2, #0
 80133fc:	6062      	str	r2, [r4, #4]
 80133fe:	04d9      	lsls	r1, r3, #19
 8013400:	6922      	ldr	r2, [r4, #16]
 8013402:	6022      	str	r2, [r4, #0]
 8013404:	d504      	bpl.n	8013410 <__sflush_r+0x7c>
 8013406:	1c42      	adds	r2, r0, #1
 8013408:	d101      	bne.n	801340e <__sflush_r+0x7a>
 801340a:	682b      	ldr	r3, [r5, #0]
 801340c:	b903      	cbnz	r3, 8013410 <__sflush_r+0x7c>
 801340e:	6560      	str	r0, [r4, #84]	; 0x54
 8013410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013412:	602f      	str	r7, [r5, #0]
 8013414:	2900      	cmp	r1, #0
 8013416:	d0ca      	beq.n	80133ae <__sflush_r+0x1a>
 8013418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801341c:	4299      	cmp	r1, r3
 801341e:	d002      	beq.n	8013426 <__sflush_r+0x92>
 8013420:	4628      	mov	r0, r5
 8013422:	f000 f8fd 	bl	8013620 <_free_r>
 8013426:	2000      	movs	r0, #0
 8013428:	6360      	str	r0, [r4, #52]	; 0x34
 801342a:	e7c1      	b.n	80133b0 <__sflush_r+0x1c>
 801342c:	6a21      	ldr	r1, [r4, #32]
 801342e:	2301      	movs	r3, #1
 8013430:	4628      	mov	r0, r5
 8013432:	47b0      	blx	r6
 8013434:	1c41      	adds	r1, r0, #1
 8013436:	d1c7      	bne.n	80133c8 <__sflush_r+0x34>
 8013438:	682b      	ldr	r3, [r5, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d0c4      	beq.n	80133c8 <__sflush_r+0x34>
 801343e:	2b1d      	cmp	r3, #29
 8013440:	d001      	beq.n	8013446 <__sflush_r+0xb2>
 8013442:	2b16      	cmp	r3, #22
 8013444:	d101      	bne.n	801344a <__sflush_r+0xb6>
 8013446:	602f      	str	r7, [r5, #0]
 8013448:	e7b1      	b.n	80133ae <__sflush_r+0x1a>
 801344a:	89a3      	ldrh	r3, [r4, #12]
 801344c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013450:	81a3      	strh	r3, [r4, #12]
 8013452:	e7ad      	b.n	80133b0 <__sflush_r+0x1c>
 8013454:	690f      	ldr	r7, [r1, #16]
 8013456:	2f00      	cmp	r7, #0
 8013458:	d0a9      	beq.n	80133ae <__sflush_r+0x1a>
 801345a:	0793      	lsls	r3, r2, #30
 801345c:	680e      	ldr	r6, [r1, #0]
 801345e:	bf08      	it	eq
 8013460:	694b      	ldreq	r3, [r1, #20]
 8013462:	600f      	str	r7, [r1, #0]
 8013464:	bf18      	it	ne
 8013466:	2300      	movne	r3, #0
 8013468:	eba6 0807 	sub.w	r8, r6, r7
 801346c:	608b      	str	r3, [r1, #8]
 801346e:	f1b8 0f00 	cmp.w	r8, #0
 8013472:	dd9c      	ble.n	80133ae <__sflush_r+0x1a>
 8013474:	6a21      	ldr	r1, [r4, #32]
 8013476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013478:	4643      	mov	r3, r8
 801347a:	463a      	mov	r2, r7
 801347c:	4628      	mov	r0, r5
 801347e:	47b0      	blx	r6
 8013480:	2800      	cmp	r0, #0
 8013482:	dc06      	bgt.n	8013492 <__sflush_r+0xfe>
 8013484:	89a3      	ldrh	r3, [r4, #12]
 8013486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801348a:	81a3      	strh	r3, [r4, #12]
 801348c:	f04f 30ff 	mov.w	r0, #4294967295
 8013490:	e78e      	b.n	80133b0 <__sflush_r+0x1c>
 8013492:	4407      	add	r7, r0
 8013494:	eba8 0800 	sub.w	r8, r8, r0
 8013498:	e7e9      	b.n	801346e <__sflush_r+0xda>
 801349a:	bf00      	nop
 801349c:	20400001 	.word	0x20400001

080134a0 <_fflush_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	690b      	ldr	r3, [r1, #16]
 80134a4:	4605      	mov	r5, r0
 80134a6:	460c      	mov	r4, r1
 80134a8:	b913      	cbnz	r3, 80134b0 <_fflush_r+0x10>
 80134aa:	2500      	movs	r5, #0
 80134ac:	4628      	mov	r0, r5
 80134ae:	bd38      	pop	{r3, r4, r5, pc}
 80134b0:	b118      	cbz	r0, 80134ba <_fflush_r+0x1a>
 80134b2:	6983      	ldr	r3, [r0, #24]
 80134b4:	b90b      	cbnz	r3, 80134ba <_fflush_r+0x1a>
 80134b6:	f7ff fbcf 	bl	8012c58 <__sinit>
 80134ba:	4b14      	ldr	r3, [pc, #80]	; (801350c <_fflush_r+0x6c>)
 80134bc:	429c      	cmp	r4, r3
 80134be:	d11b      	bne.n	80134f8 <_fflush_r+0x58>
 80134c0:	686c      	ldr	r4, [r5, #4]
 80134c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d0ef      	beq.n	80134aa <_fflush_r+0xa>
 80134ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80134cc:	07d0      	lsls	r0, r2, #31
 80134ce:	d404      	bmi.n	80134da <_fflush_r+0x3a>
 80134d0:	0599      	lsls	r1, r3, #22
 80134d2:	d402      	bmi.n	80134da <_fflush_r+0x3a>
 80134d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134d6:	f7ff fc82 	bl	8012dde <__retarget_lock_acquire_recursive>
 80134da:	4628      	mov	r0, r5
 80134dc:	4621      	mov	r1, r4
 80134de:	f7ff ff59 	bl	8013394 <__sflush_r>
 80134e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134e4:	07da      	lsls	r2, r3, #31
 80134e6:	4605      	mov	r5, r0
 80134e8:	d4e0      	bmi.n	80134ac <_fflush_r+0xc>
 80134ea:	89a3      	ldrh	r3, [r4, #12]
 80134ec:	059b      	lsls	r3, r3, #22
 80134ee:	d4dd      	bmi.n	80134ac <_fflush_r+0xc>
 80134f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134f2:	f7ff fc75 	bl	8012de0 <__retarget_lock_release_recursive>
 80134f6:	e7d9      	b.n	80134ac <_fflush_r+0xc>
 80134f8:	4b05      	ldr	r3, [pc, #20]	; (8013510 <_fflush_r+0x70>)
 80134fa:	429c      	cmp	r4, r3
 80134fc:	d101      	bne.n	8013502 <_fflush_r+0x62>
 80134fe:	68ac      	ldr	r4, [r5, #8]
 8013500:	e7df      	b.n	80134c2 <_fflush_r+0x22>
 8013502:	4b04      	ldr	r3, [pc, #16]	; (8013514 <_fflush_r+0x74>)
 8013504:	429c      	cmp	r4, r3
 8013506:	bf08      	it	eq
 8013508:	68ec      	ldreq	r4, [r5, #12]
 801350a:	e7da      	b.n	80134c2 <_fflush_r+0x22>
 801350c:	080144f0 	.word	0x080144f0
 8013510:	08014510 	.word	0x08014510
 8013514:	080144d0 	.word	0x080144d0

08013518 <_lseek_r>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	4d07      	ldr	r5, [pc, #28]	; (8013538 <_lseek_r+0x20>)
 801351c:	4604      	mov	r4, r0
 801351e:	4608      	mov	r0, r1
 8013520:	4611      	mov	r1, r2
 8013522:	2200      	movs	r2, #0
 8013524:	602a      	str	r2, [r5, #0]
 8013526:	461a      	mov	r2, r3
 8013528:	f7f2 fe94 	bl	8006254 <_lseek>
 801352c:	1c43      	adds	r3, r0, #1
 801352e:	d102      	bne.n	8013536 <_lseek_r+0x1e>
 8013530:	682b      	ldr	r3, [r5, #0]
 8013532:	b103      	cbz	r3, 8013536 <_lseek_r+0x1e>
 8013534:	6023      	str	r3, [r4, #0]
 8013536:	bd38      	pop	{r3, r4, r5, pc}
 8013538:	2000604c 	.word	0x2000604c

0801353c <__swhatbuf_r>:
 801353c:	b570      	push	{r4, r5, r6, lr}
 801353e:	460e      	mov	r6, r1
 8013540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013544:	2900      	cmp	r1, #0
 8013546:	b096      	sub	sp, #88	; 0x58
 8013548:	4614      	mov	r4, r2
 801354a:	461d      	mov	r5, r3
 801354c:	da08      	bge.n	8013560 <__swhatbuf_r+0x24>
 801354e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013552:	2200      	movs	r2, #0
 8013554:	602a      	str	r2, [r5, #0]
 8013556:	061a      	lsls	r2, r3, #24
 8013558:	d410      	bmi.n	801357c <__swhatbuf_r+0x40>
 801355a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801355e:	e00e      	b.n	801357e <__swhatbuf_r+0x42>
 8013560:	466a      	mov	r2, sp
 8013562:	f000 fba9 	bl	8013cb8 <_fstat_r>
 8013566:	2800      	cmp	r0, #0
 8013568:	dbf1      	blt.n	801354e <__swhatbuf_r+0x12>
 801356a:	9a01      	ldr	r2, [sp, #4]
 801356c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013574:	425a      	negs	r2, r3
 8013576:	415a      	adcs	r2, r3
 8013578:	602a      	str	r2, [r5, #0]
 801357a:	e7ee      	b.n	801355a <__swhatbuf_r+0x1e>
 801357c:	2340      	movs	r3, #64	; 0x40
 801357e:	2000      	movs	r0, #0
 8013580:	6023      	str	r3, [r4, #0]
 8013582:	b016      	add	sp, #88	; 0x58
 8013584:	bd70      	pop	{r4, r5, r6, pc}
	...

08013588 <__smakebuf_r>:
 8013588:	898b      	ldrh	r3, [r1, #12]
 801358a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801358c:	079d      	lsls	r5, r3, #30
 801358e:	4606      	mov	r6, r0
 8013590:	460c      	mov	r4, r1
 8013592:	d507      	bpl.n	80135a4 <__smakebuf_r+0x1c>
 8013594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013598:	6023      	str	r3, [r4, #0]
 801359a:	6123      	str	r3, [r4, #16]
 801359c:	2301      	movs	r3, #1
 801359e:	6163      	str	r3, [r4, #20]
 80135a0:	b002      	add	sp, #8
 80135a2:	bd70      	pop	{r4, r5, r6, pc}
 80135a4:	ab01      	add	r3, sp, #4
 80135a6:	466a      	mov	r2, sp
 80135a8:	f7ff ffc8 	bl	801353c <__swhatbuf_r>
 80135ac:	9900      	ldr	r1, [sp, #0]
 80135ae:	4605      	mov	r5, r0
 80135b0:	4630      	mov	r0, r6
 80135b2:	f7ff fc4d 	bl	8012e50 <_malloc_r>
 80135b6:	b948      	cbnz	r0, 80135cc <__smakebuf_r+0x44>
 80135b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135bc:	059a      	lsls	r2, r3, #22
 80135be:	d4ef      	bmi.n	80135a0 <__smakebuf_r+0x18>
 80135c0:	f023 0303 	bic.w	r3, r3, #3
 80135c4:	f043 0302 	orr.w	r3, r3, #2
 80135c8:	81a3      	strh	r3, [r4, #12]
 80135ca:	e7e3      	b.n	8013594 <__smakebuf_r+0xc>
 80135cc:	4b0d      	ldr	r3, [pc, #52]	; (8013604 <__smakebuf_r+0x7c>)
 80135ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80135d0:	89a3      	ldrh	r3, [r4, #12]
 80135d2:	6020      	str	r0, [r4, #0]
 80135d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135d8:	81a3      	strh	r3, [r4, #12]
 80135da:	9b00      	ldr	r3, [sp, #0]
 80135dc:	6163      	str	r3, [r4, #20]
 80135de:	9b01      	ldr	r3, [sp, #4]
 80135e0:	6120      	str	r0, [r4, #16]
 80135e2:	b15b      	cbz	r3, 80135fc <__smakebuf_r+0x74>
 80135e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135e8:	4630      	mov	r0, r6
 80135ea:	f000 fb77 	bl	8013cdc <_isatty_r>
 80135ee:	b128      	cbz	r0, 80135fc <__smakebuf_r+0x74>
 80135f0:	89a3      	ldrh	r3, [r4, #12]
 80135f2:	f023 0303 	bic.w	r3, r3, #3
 80135f6:	f043 0301 	orr.w	r3, r3, #1
 80135fa:	81a3      	strh	r3, [r4, #12]
 80135fc:	89a0      	ldrh	r0, [r4, #12]
 80135fe:	4305      	orrs	r5, r0
 8013600:	81a5      	strh	r5, [r4, #12]
 8013602:	e7cd      	b.n	80135a0 <__smakebuf_r+0x18>
 8013604:	08012bf1 	.word	0x08012bf1

08013608 <__malloc_lock>:
 8013608:	4801      	ldr	r0, [pc, #4]	; (8013610 <__malloc_lock+0x8>)
 801360a:	f7ff bbe8 	b.w	8012dde <__retarget_lock_acquire_recursive>
 801360e:	bf00      	nop
 8013610:	20006040 	.word	0x20006040

08013614 <__malloc_unlock>:
 8013614:	4801      	ldr	r0, [pc, #4]	; (801361c <__malloc_unlock+0x8>)
 8013616:	f7ff bbe3 	b.w	8012de0 <__retarget_lock_release_recursive>
 801361a:	bf00      	nop
 801361c:	20006040 	.word	0x20006040

08013620 <_free_r>:
 8013620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013622:	2900      	cmp	r1, #0
 8013624:	d044      	beq.n	80136b0 <_free_r+0x90>
 8013626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801362a:	9001      	str	r0, [sp, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	f1a1 0404 	sub.w	r4, r1, #4
 8013632:	bfb8      	it	lt
 8013634:	18e4      	addlt	r4, r4, r3
 8013636:	f7ff ffe7 	bl	8013608 <__malloc_lock>
 801363a:	4a1e      	ldr	r2, [pc, #120]	; (80136b4 <_free_r+0x94>)
 801363c:	9801      	ldr	r0, [sp, #4]
 801363e:	6813      	ldr	r3, [r2, #0]
 8013640:	b933      	cbnz	r3, 8013650 <_free_r+0x30>
 8013642:	6063      	str	r3, [r4, #4]
 8013644:	6014      	str	r4, [r2, #0]
 8013646:	b003      	add	sp, #12
 8013648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801364c:	f7ff bfe2 	b.w	8013614 <__malloc_unlock>
 8013650:	42a3      	cmp	r3, r4
 8013652:	d908      	bls.n	8013666 <_free_r+0x46>
 8013654:	6825      	ldr	r5, [r4, #0]
 8013656:	1961      	adds	r1, r4, r5
 8013658:	428b      	cmp	r3, r1
 801365a:	bf01      	itttt	eq
 801365c:	6819      	ldreq	r1, [r3, #0]
 801365e:	685b      	ldreq	r3, [r3, #4]
 8013660:	1949      	addeq	r1, r1, r5
 8013662:	6021      	streq	r1, [r4, #0]
 8013664:	e7ed      	b.n	8013642 <_free_r+0x22>
 8013666:	461a      	mov	r2, r3
 8013668:	685b      	ldr	r3, [r3, #4]
 801366a:	b10b      	cbz	r3, 8013670 <_free_r+0x50>
 801366c:	42a3      	cmp	r3, r4
 801366e:	d9fa      	bls.n	8013666 <_free_r+0x46>
 8013670:	6811      	ldr	r1, [r2, #0]
 8013672:	1855      	adds	r5, r2, r1
 8013674:	42a5      	cmp	r5, r4
 8013676:	d10b      	bne.n	8013690 <_free_r+0x70>
 8013678:	6824      	ldr	r4, [r4, #0]
 801367a:	4421      	add	r1, r4
 801367c:	1854      	adds	r4, r2, r1
 801367e:	42a3      	cmp	r3, r4
 8013680:	6011      	str	r1, [r2, #0]
 8013682:	d1e0      	bne.n	8013646 <_free_r+0x26>
 8013684:	681c      	ldr	r4, [r3, #0]
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	6053      	str	r3, [r2, #4]
 801368a:	4421      	add	r1, r4
 801368c:	6011      	str	r1, [r2, #0]
 801368e:	e7da      	b.n	8013646 <_free_r+0x26>
 8013690:	d902      	bls.n	8013698 <_free_r+0x78>
 8013692:	230c      	movs	r3, #12
 8013694:	6003      	str	r3, [r0, #0]
 8013696:	e7d6      	b.n	8013646 <_free_r+0x26>
 8013698:	6825      	ldr	r5, [r4, #0]
 801369a:	1961      	adds	r1, r4, r5
 801369c:	428b      	cmp	r3, r1
 801369e:	bf04      	itt	eq
 80136a0:	6819      	ldreq	r1, [r3, #0]
 80136a2:	685b      	ldreq	r3, [r3, #4]
 80136a4:	6063      	str	r3, [r4, #4]
 80136a6:	bf04      	itt	eq
 80136a8:	1949      	addeq	r1, r1, r5
 80136aa:	6021      	streq	r1, [r4, #0]
 80136ac:	6054      	str	r4, [r2, #4]
 80136ae:	e7ca      	b.n	8013646 <_free_r+0x26>
 80136b0:	b003      	add	sp, #12
 80136b2:	bd30      	pop	{r4, r5, pc}
 80136b4:	20006044 	.word	0x20006044

080136b8 <__sfputc_r>:
 80136b8:	6893      	ldr	r3, [r2, #8]
 80136ba:	3b01      	subs	r3, #1
 80136bc:	2b00      	cmp	r3, #0
 80136be:	b410      	push	{r4}
 80136c0:	6093      	str	r3, [r2, #8]
 80136c2:	da08      	bge.n	80136d6 <__sfputc_r+0x1e>
 80136c4:	6994      	ldr	r4, [r2, #24]
 80136c6:	42a3      	cmp	r3, r4
 80136c8:	db01      	blt.n	80136ce <__sfputc_r+0x16>
 80136ca:	290a      	cmp	r1, #10
 80136cc:	d103      	bne.n	80136d6 <__sfputc_r+0x1e>
 80136ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136d2:	f7ff bd7d 	b.w	80131d0 <__swbuf_r>
 80136d6:	6813      	ldr	r3, [r2, #0]
 80136d8:	1c58      	adds	r0, r3, #1
 80136da:	6010      	str	r0, [r2, #0]
 80136dc:	7019      	strb	r1, [r3, #0]
 80136de:	4608      	mov	r0, r1
 80136e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136e4:	4770      	bx	lr

080136e6 <__sfputs_r>:
 80136e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136e8:	4606      	mov	r6, r0
 80136ea:	460f      	mov	r7, r1
 80136ec:	4614      	mov	r4, r2
 80136ee:	18d5      	adds	r5, r2, r3
 80136f0:	42ac      	cmp	r4, r5
 80136f2:	d101      	bne.n	80136f8 <__sfputs_r+0x12>
 80136f4:	2000      	movs	r0, #0
 80136f6:	e007      	b.n	8013708 <__sfputs_r+0x22>
 80136f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136fc:	463a      	mov	r2, r7
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ffda 	bl	80136b8 <__sfputc_r>
 8013704:	1c43      	adds	r3, r0, #1
 8013706:	d1f3      	bne.n	80136f0 <__sfputs_r+0xa>
 8013708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801370c <_vfiprintf_r>:
 801370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013710:	460d      	mov	r5, r1
 8013712:	b09d      	sub	sp, #116	; 0x74
 8013714:	4614      	mov	r4, r2
 8013716:	4698      	mov	r8, r3
 8013718:	4606      	mov	r6, r0
 801371a:	b118      	cbz	r0, 8013724 <_vfiprintf_r+0x18>
 801371c:	6983      	ldr	r3, [r0, #24]
 801371e:	b90b      	cbnz	r3, 8013724 <_vfiprintf_r+0x18>
 8013720:	f7ff fa9a 	bl	8012c58 <__sinit>
 8013724:	4b89      	ldr	r3, [pc, #548]	; (801394c <_vfiprintf_r+0x240>)
 8013726:	429d      	cmp	r5, r3
 8013728:	d11b      	bne.n	8013762 <_vfiprintf_r+0x56>
 801372a:	6875      	ldr	r5, [r6, #4]
 801372c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801372e:	07d9      	lsls	r1, r3, #31
 8013730:	d405      	bmi.n	801373e <_vfiprintf_r+0x32>
 8013732:	89ab      	ldrh	r3, [r5, #12]
 8013734:	059a      	lsls	r2, r3, #22
 8013736:	d402      	bmi.n	801373e <_vfiprintf_r+0x32>
 8013738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801373a:	f7ff fb50 	bl	8012dde <__retarget_lock_acquire_recursive>
 801373e:	89ab      	ldrh	r3, [r5, #12]
 8013740:	071b      	lsls	r3, r3, #28
 8013742:	d501      	bpl.n	8013748 <_vfiprintf_r+0x3c>
 8013744:	692b      	ldr	r3, [r5, #16]
 8013746:	b9eb      	cbnz	r3, 8013784 <_vfiprintf_r+0x78>
 8013748:	4629      	mov	r1, r5
 801374a:	4630      	mov	r0, r6
 801374c:	f7ff fda4 	bl	8013298 <__swsetup_r>
 8013750:	b1c0      	cbz	r0, 8013784 <_vfiprintf_r+0x78>
 8013752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013754:	07dc      	lsls	r4, r3, #31
 8013756:	d50e      	bpl.n	8013776 <_vfiprintf_r+0x6a>
 8013758:	f04f 30ff 	mov.w	r0, #4294967295
 801375c:	b01d      	add	sp, #116	; 0x74
 801375e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013762:	4b7b      	ldr	r3, [pc, #492]	; (8013950 <_vfiprintf_r+0x244>)
 8013764:	429d      	cmp	r5, r3
 8013766:	d101      	bne.n	801376c <_vfiprintf_r+0x60>
 8013768:	68b5      	ldr	r5, [r6, #8]
 801376a:	e7df      	b.n	801372c <_vfiprintf_r+0x20>
 801376c:	4b79      	ldr	r3, [pc, #484]	; (8013954 <_vfiprintf_r+0x248>)
 801376e:	429d      	cmp	r5, r3
 8013770:	bf08      	it	eq
 8013772:	68f5      	ldreq	r5, [r6, #12]
 8013774:	e7da      	b.n	801372c <_vfiprintf_r+0x20>
 8013776:	89ab      	ldrh	r3, [r5, #12]
 8013778:	0598      	lsls	r0, r3, #22
 801377a:	d4ed      	bmi.n	8013758 <_vfiprintf_r+0x4c>
 801377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801377e:	f7ff fb2f 	bl	8012de0 <__retarget_lock_release_recursive>
 8013782:	e7e9      	b.n	8013758 <_vfiprintf_r+0x4c>
 8013784:	2300      	movs	r3, #0
 8013786:	9309      	str	r3, [sp, #36]	; 0x24
 8013788:	2320      	movs	r3, #32
 801378a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801378e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013792:	2330      	movs	r3, #48	; 0x30
 8013794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013958 <_vfiprintf_r+0x24c>
 8013798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801379c:	f04f 0901 	mov.w	r9, #1
 80137a0:	4623      	mov	r3, r4
 80137a2:	469a      	mov	sl, r3
 80137a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137a8:	b10a      	cbz	r2, 80137ae <_vfiprintf_r+0xa2>
 80137aa:	2a25      	cmp	r2, #37	; 0x25
 80137ac:	d1f9      	bne.n	80137a2 <_vfiprintf_r+0x96>
 80137ae:	ebba 0b04 	subs.w	fp, sl, r4
 80137b2:	d00b      	beq.n	80137cc <_vfiprintf_r+0xc0>
 80137b4:	465b      	mov	r3, fp
 80137b6:	4622      	mov	r2, r4
 80137b8:	4629      	mov	r1, r5
 80137ba:	4630      	mov	r0, r6
 80137bc:	f7ff ff93 	bl	80136e6 <__sfputs_r>
 80137c0:	3001      	adds	r0, #1
 80137c2:	f000 80aa 	beq.w	801391a <_vfiprintf_r+0x20e>
 80137c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137c8:	445a      	add	r2, fp
 80137ca:	9209      	str	r2, [sp, #36]	; 0x24
 80137cc:	f89a 3000 	ldrb.w	r3, [sl]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f000 80a2 	beq.w	801391a <_vfiprintf_r+0x20e>
 80137d6:	2300      	movs	r3, #0
 80137d8:	f04f 32ff 	mov.w	r2, #4294967295
 80137dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137e0:	f10a 0a01 	add.w	sl, sl, #1
 80137e4:	9304      	str	r3, [sp, #16]
 80137e6:	9307      	str	r3, [sp, #28]
 80137e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137ec:	931a      	str	r3, [sp, #104]	; 0x68
 80137ee:	4654      	mov	r4, sl
 80137f0:	2205      	movs	r2, #5
 80137f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137f6:	4858      	ldr	r0, [pc, #352]	; (8013958 <_vfiprintf_r+0x24c>)
 80137f8:	f7ec fd22 	bl	8000240 <memchr>
 80137fc:	9a04      	ldr	r2, [sp, #16]
 80137fe:	b9d8      	cbnz	r0, 8013838 <_vfiprintf_r+0x12c>
 8013800:	06d1      	lsls	r1, r2, #27
 8013802:	bf44      	itt	mi
 8013804:	2320      	movmi	r3, #32
 8013806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801380a:	0713      	lsls	r3, r2, #28
 801380c:	bf44      	itt	mi
 801380e:	232b      	movmi	r3, #43	; 0x2b
 8013810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013814:	f89a 3000 	ldrb.w	r3, [sl]
 8013818:	2b2a      	cmp	r3, #42	; 0x2a
 801381a:	d015      	beq.n	8013848 <_vfiprintf_r+0x13c>
 801381c:	9a07      	ldr	r2, [sp, #28]
 801381e:	4654      	mov	r4, sl
 8013820:	2000      	movs	r0, #0
 8013822:	f04f 0c0a 	mov.w	ip, #10
 8013826:	4621      	mov	r1, r4
 8013828:	f811 3b01 	ldrb.w	r3, [r1], #1
 801382c:	3b30      	subs	r3, #48	; 0x30
 801382e:	2b09      	cmp	r3, #9
 8013830:	d94e      	bls.n	80138d0 <_vfiprintf_r+0x1c4>
 8013832:	b1b0      	cbz	r0, 8013862 <_vfiprintf_r+0x156>
 8013834:	9207      	str	r2, [sp, #28]
 8013836:	e014      	b.n	8013862 <_vfiprintf_r+0x156>
 8013838:	eba0 0308 	sub.w	r3, r0, r8
 801383c:	fa09 f303 	lsl.w	r3, r9, r3
 8013840:	4313      	orrs	r3, r2
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	46a2      	mov	sl, r4
 8013846:	e7d2      	b.n	80137ee <_vfiprintf_r+0xe2>
 8013848:	9b03      	ldr	r3, [sp, #12]
 801384a:	1d19      	adds	r1, r3, #4
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	9103      	str	r1, [sp, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	bfbb      	ittet	lt
 8013854:	425b      	neglt	r3, r3
 8013856:	f042 0202 	orrlt.w	r2, r2, #2
 801385a:	9307      	strge	r3, [sp, #28]
 801385c:	9307      	strlt	r3, [sp, #28]
 801385e:	bfb8      	it	lt
 8013860:	9204      	strlt	r2, [sp, #16]
 8013862:	7823      	ldrb	r3, [r4, #0]
 8013864:	2b2e      	cmp	r3, #46	; 0x2e
 8013866:	d10c      	bne.n	8013882 <_vfiprintf_r+0x176>
 8013868:	7863      	ldrb	r3, [r4, #1]
 801386a:	2b2a      	cmp	r3, #42	; 0x2a
 801386c:	d135      	bne.n	80138da <_vfiprintf_r+0x1ce>
 801386e:	9b03      	ldr	r3, [sp, #12]
 8013870:	1d1a      	adds	r2, r3, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	9203      	str	r2, [sp, #12]
 8013876:	2b00      	cmp	r3, #0
 8013878:	bfb8      	it	lt
 801387a:	f04f 33ff 	movlt.w	r3, #4294967295
 801387e:	3402      	adds	r4, #2
 8013880:	9305      	str	r3, [sp, #20]
 8013882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013968 <_vfiprintf_r+0x25c>
 8013886:	7821      	ldrb	r1, [r4, #0]
 8013888:	2203      	movs	r2, #3
 801388a:	4650      	mov	r0, sl
 801388c:	f7ec fcd8 	bl	8000240 <memchr>
 8013890:	b140      	cbz	r0, 80138a4 <_vfiprintf_r+0x198>
 8013892:	2340      	movs	r3, #64	; 0x40
 8013894:	eba0 000a 	sub.w	r0, r0, sl
 8013898:	fa03 f000 	lsl.w	r0, r3, r0
 801389c:	9b04      	ldr	r3, [sp, #16]
 801389e:	4303      	orrs	r3, r0
 80138a0:	3401      	adds	r4, #1
 80138a2:	9304      	str	r3, [sp, #16]
 80138a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138a8:	482c      	ldr	r0, [pc, #176]	; (801395c <_vfiprintf_r+0x250>)
 80138aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138ae:	2206      	movs	r2, #6
 80138b0:	f7ec fcc6 	bl	8000240 <memchr>
 80138b4:	2800      	cmp	r0, #0
 80138b6:	d03f      	beq.n	8013938 <_vfiprintf_r+0x22c>
 80138b8:	4b29      	ldr	r3, [pc, #164]	; (8013960 <_vfiprintf_r+0x254>)
 80138ba:	bb1b      	cbnz	r3, 8013904 <_vfiprintf_r+0x1f8>
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	3307      	adds	r3, #7
 80138c0:	f023 0307 	bic.w	r3, r3, #7
 80138c4:	3308      	adds	r3, #8
 80138c6:	9303      	str	r3, [sp, #12]
 80138c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ca:	443b      	add	r3, r7
 80138cc:	9309      	str	r3, [sp, #36]	; 0x24
 80138ce:	e767      	b.n	80137a0 <_vfiprintf_r+0x94>
 80138d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80138d4:	460c      	mov	r4, r1
 80138d6:	2001      	movs	r0, #1
 80138d8:	e7a5      	b.n	8013826 <_vfiprintf_r+0x11a>
 80138da:	2300      	movs	r3, #0
 80138dc:	3401      	adds	r4, #1
 80138de:	9305      	str	r3, [sp, #20]
 80138e0:	4619      	mov	r1, r3
 80138e2:	f04f 0c0a 	mov.w	ip, #10
 80138e6:	4620      	mov	r0, r4
 80138e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138ec:	3a30      	subs	r2, #48	; 0x30
 80138ee:	2a09      	cmp	r2, #9
 80138f0:	d903      	bls.n	80138fa <_vfiprintf_r+0x1ee>
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d0c5      	beq.n	8013882 <_vfiprintf_r+0x176>
 80138f6:	9105      	str	r1, [sp, #20]
 80138f8:	e7c3      	b.n	8013882 <_vfiprintf_r+0x176>
 80138fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80138fe:	4604      	mov	r4, r0
 8013900:	2301      	movs	r3, #1
 8013902:	e7f0      	b.n	80138e6 <_vfiprintf_r+0x1da>
 8013904:	ab03      	add	r3, sp, #12
 8013906:	9300      	str	r3, [sp, #0]
 8013908:	462a      	mov	r2, r5
 801390a:	4b16      	ldr	r3, [pc, #88]	; (8013964 <_vfiprintf_r+0x258>)
 801390c:	a904      	add	r1, sp, #16
 801390e:	4630      	mov	r0, r6
 8013910:	f3af 8000 	nop.w
 8013914:	4607      	mov	r7, r0
 8013916:	1c78      	adds	r0, r7, #1
 8013918:	d1d6      	bne.n	80138c8 <_vfiprintf_r+0x1bc>
 801391a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801391c:	07d9      	lsls	r1, r3, #31
 801391e:	d405      	bmi.n	801392c <_vfiprintf_r+0x220>
 8013920:	89ab      	ldrh	r3, [r5, #12]
 8013922:	059a      	lsls	r2, r3, #22
 8013924:	d402      	bmi.n	801392c <_vfiprintf_r+0x220>
 8013926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013928:	f7ff fa5a 	bl	8012de0 <__retarget_lock_release_recursive>
 801392c:	89ab      	ldrh	r3, [r5, #12]
 801392e:	065b      	lsls	r3, r3, #25
 8013930:	f53f af12 	bmi.w	8013758 <_vfiprintf_r+0x4c>
 8013934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013936:	e711      	b.n	801375c <_vfiprintf_r+0x50>
 8013938:	ab03      	add	r3, sp, #12
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	462a      	mov	r2, r5
 801393e:	4b09      	ldr	r3, [pc, #36]	; (8013964 <_vfiprintf_r+0x258>)
 8013940:	a904      	add	r1, sp, #16
 8013942:	4630      	mov	r0, r6
 8013944:	f000 f880 	bl	8013a48 <_printf_i>
 8013948:	e7e4      	b.n	8013914 <_vfiprintf_r+0x208>
 801394a:	bf00      	nop
 801394c:	080144f0 	.word	0x080144f0
 8013950:	08014510 	.word	0x08014510
 8013954:	080144d0 	.word	0x080144d0
 8013958:	08014534 	.word	0x08014534
 801395c:	0801453e 	.word	0x0801453e
 8013960:	00000000 	.word	0x00000000
 8013964:	080136e7 	.word	0x080136e7
 8013968:	0801453a 	.word	0x0801453a

0801396c <_printf_common>:
 801396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013970:	4616      	mov	r6, r2
 8013972:	4699      	mov	r9, r3
 8013974:	688a      	ldr	r2, [r1, #8]
 8013976:	690b      	ldr	r3, [r1, #16]
 8013978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801397c:	4293      	cmp	r3, r2
 801397e:	bfb8      	it	lt
 8013980:	4613      	movlt	r3, r2
 8013982:	6033      	str	r3, [r6, #0]
 8013984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013988:	4607      	mov	r7, r0
 801398a:	460c      	mov	r4, r1
 801398c:	b10a      	cbz	r2, 8013992 <_printf_common+0x26>
 801398e:	3301      	adds	r3, #1
 8013990:	6033      	str	r3, [r6, #0]
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	0699      	lsls	r1, r3, #26
 8013996:	bf42      	ittt	mi
 8013998:	6833      	ldrmi	r3, [r6, #0]
 801399a:	3302      	addmi	r3, #2
 801399c:	6033      	strmi	r3, [r6, #0]
 801399e:	6825      	ldr	r5, [r4, #0]
 80139a0:	f015 0506 	ands.w	r5, r5, #6
 80139a4:	d106      	bne.n	80139b4 <_printf_common+0x48>
 80139a6:	f104 0a19 	add.w	sl, r4, #25
 80139aa:	68e3      	ldr	r3, [r4, #12]
 80139ac:	6832      	ldr	r2, [r6, #0]
 80139ae:	1a9b      	subs	r3, r3, r2
 80139b0:	42ab      	cmp	r3, r5
 80139b2:	dc26      	bgt.n	8013a02 <_printf_common+0x96>
 80139b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80139b8:	1e13      	subs	r3, r2, #0
 80139ba:	6822      	ldr	r2, [r4, #0]
 80139bc:	bf18      	it	ne
 80139be:	2301      	movne	r3, #1
 80139c0:	0692      	lsls	r2, r2, #26
 80139c2:	d42b      	bmi.n	8013a1c <_printf_common+0xb0>
 80139c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80139c8:	4649      	mov	r1, r9
 80139ca:	4638      	mov	r0, r7
 80139cc:	47c0      	blx	r8
 80139ce:	3001      	adds	r0, #1
 80139d0:	d01e      	beq.n	8013a10 <_printf_common+0xa4>
 80139d2:	6823      	ldr	r3, [r4, #0]
 80139d4:	68e5      	ldr	r5, [r4, #12]
 80139d6:	6832      	ldr	r2, [r6, #0]
 80139d8:	f003 0306 	and.w	r3, r3, #6
 80139dc:	2b04      	cmp	r3, #4
 80139de:	bf08      	it	eq
 80139e0:	1aad      	subeq	r5, r5, r2
 80139e2:	68a3      	ldr	r3, [r4, #8]
 80139e4:	6922      	ldr	r2, [r4, #16]
 80139e6:	bf0c      	ite	eq
 80139e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139ec:	2500      	movne	r5, #0
 80139ee:	4293      	cmp	r3, r2
 80139f0:	bfc4      	itt	gt
 80139f2:	1a9b      	subgt	r3, r3, r2
 80139f4:	18ed      	addgt	r5, r5, r3
 80139f6:	2600      	movs	r6, #0
 80139f8:	341a      	adds	r4, #26
 80139fa:	42b5      	cmp	r5, r6
 80139fc:	d11a      	bne.n	8013a34 <_printf_common+0xc8>
 80139fe:	2000      	movs	r0, #0
 8013a00:	e008      	b.n	8013a14 <_printf_common+0xa8>
 8013a02:	2301      	movs	r3, #1
 8013a04:	4652      	mov	r2, sl
 8013a06:	4649      	mov	r1, r9
 8013a08:	4638      	mov	r0, r7
 8013a0a:	47c0      	blx	r8
 8013a0c:	3001      	adds	r0, #1
 8013a0e:	d103      	bne.n	8013a18 <_printf_common+0xac>
 8013a10:	f04f 30ff 	mov.w	r0, #4294967295
 8013a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a18:	3501      	adds	r5, #1
 8013a1a:	e7c6      	b.n	80139aa <_printf_common+0x3e>
 8013a1c:	18e1      	adds	r1, r4, r3
 8013a1e:	1c5a      	adds	r2, r3, #1
 8013a20:	2030      	movs	r0, #48	; 0x30
 8013a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013a26:	4422      	add	r2, r4
 8013a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013a30:	3302      	adds	r3, #2
 8013a32:	e7c7      	b.n	80139c4 <_printf_common+0x58>
 8013a34:	2301      	movs	r3, #1
 8013a36:	4622      	mov	r2, r4
 8013a38:	4649      	mov	r1, r9
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	47c0      	blx	r8
 8013a3e:	3001      	adds	r0, #1
 8013a40:	d0e6      	beq.n	8013a10 <_printf_common+0xa4>
 8013a42:	3601      	adds	r6, #1
 8013a44:	e7d9      	b.n	80139fa <_printf_common+0x8e>
	...

08013a48 <_printf_i>:
 8013a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a4c:	7e0f      	ldrb	r7, [r1, #24]
 8013a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a50:	2f78      	cmp	r7, #120	; 0x78
 8013a52:	4691      	mov	r9, r2
 8013a54:	4680      	mov	r8, r0
 8013a56:	460c      	mov	r4, r1
 8013a58:	469a      	mov	sl, r3
 8013a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013a5e:	d807      	bhi.n	8013a70 <_printf_i+0x28>
 8013a60:	2f62      	cmp	r7, #98	; 0x62
 8013a62:	d80a      	bhi.n	8013a7a <_printf_i+0x32>
 8013a64:	2f00      	cmp	r7, #0
 8013a66:	f000 80d8 	beq.w	8013c1a <_printf_i+0x1d2>
 8013a6a:	2f58      	cmp	r7, #88	; 0x58
 8013a6c:	f000 80a3 	beq.w	8013bb6 <_printf_i+0x16e>
 8013a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a78:	e03a      	b.n	8013af0 <_printf_i+0xa8>
 8013a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a7e:	2b15      	cmp	r3, #21
 8013a80:	d8f6      	bhi.n	8013a70 <_printf_i+0x28>
 8013a82:	a101      	add	r1, pc, #4	; (adr r1, 8013a88 <_printf_i+0x40>)
 8013a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a88:	08013ae1 	.word	0x08013ae1
 8013a8c:	08013af5 	.word	0x08013af5
 8013a90:	08013a71 	.word	0x08013a71
 8013a94:	08013a71 	.word	0x08013a71
 8013a98:	08013a71 	.word	0x08013a71
 8013a9c:	08013a71 	.word	0x08013a71
 8013aa0:	08013af5 	.word	0x08013af5
 8013aa4:	08013a71 	.word	0x08013a71
 8013aa8:	08013a71 	.word	0x08013a71
 8013aac:	08013a71 	.word	0x08013a71
 8013ab0:	08013a71 	.word	0x08013a71
 8013ab4:	08013c01 	.word	0x08013c01
 8013ab8:	08013b25 	.word	0x08013b25
 8013abc:	08013be3 	.word	0x08013be3
 8013ac0:	08013a71 	.word	0x08013a71
 8013ac4:	08013a71 	.word	0x08013a71
 8013ac8:	08013c23 	.word	0x08013c23
 8013acc:	08013a71 	.word	0x08013a71
 8013ad0:	08013b25 	.word	0x08013b25
 8013ad4:	08013a71 	.word	0x08013a71
 8013ad8:	08013a71 	.word	0x08013a71
 8013adc:	08013beb 	.word	0x08013beb
 8013ae0:	682b      	ldr	r3, [r5, #0]
 8013ae2:	1d1a      	adds	r2, r3, #4
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	602a      	str	r2, [r5, #0]
 8013ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013af0:	2301      	movs	r3, #1
 8013af2:	e0a3      	b.n	8013c3c <_printf_i+0x1f4>
 8013af4:	6820      	ldr	r0, [r4, #0]
 8013af6:	6829      	ldr	r1, [r5, #0]
 8013af8:	0606      	lsls	r6, r0, #24
 8013afa:	f101 0304 	add.w	r3, r1, #4
 8013afe:	d50a      	bpl.n	8013b16 <_printf_i+0xce>
 8013b00:	680e      	ldr	r6, [r1, #0]
 8013b02:	602b      	str	r3, [r5, #0]
 8013b04:	2e00      	cmp	r6, #0
 8013b06:	da03      	bge.n	8013b10 <_printf_i+0xc8>
 8013b08:	232d      	movs	r3, #45	; 0x2d
 8013b0a:	4276      	negs	r6, r6
 8013b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b10:	485e      	ldr	r0, [pc, #376]	; (8013c8c <_printf_i+0x244>)
 8013b12:	230a      	movs	r3, #10
 8013b14:	e019      	b.n	8013b4a <_printf_i+0x102>
 8013b16:	680e      	ldr	r6, [r1, #0]
 8013b18:	602b      	str	r3, [r5, #0]
 8013b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013b1e:	bf18      	it	ne
 8013b20:	b236      	sxthne	r6, r6
 8013b22:	e7ef      	b.n	8013b04 <_printf_i+0xbc>
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	6820      	ldr	r0, [r4, #0]
 8013b28:	1d19      	adds	r1, r3, #4
 8013b2a:	6029      	str	r1, [r5, #0]
 8013b2c:	0601      	lsls	r1, r0, #24
 8013b2e:	d501      	bpl.n	8013b34 <_printf_i+0xec>
 8013b30:	681e      	ldr	r6, [r3, #0]
 8013b32:	e002      	b.n	8013b3a <_printf_i+0xf2>
 8013b34:	0646      	lsls	r6, r0, #25
 8013b36:	d5fb      	bpl.n	8013b30 <_printf_i+0xe8>
 8013b38:	881e      	ldrh	r6, [r3, #0]
 8013b3a:	4854      	ldr	r0, [pc, #336]	; (8013c8c <_printf_i+0x244>)
 8013b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8013b3e:	bf0c      	ite	eq
 8013b40:	2308      	moveq	r3, #8
 8013b42:	230a      	movne	r3, #10
 8013b44:	2100      	movs	r1, #0
 8013b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013b4a:	6865      	ldr	r5, [r4, #4]
 8013b4c:	60a5      	str	r5, [r4, #8]
 8013b4e:	2d00      	cmp	r5, #0
 8013b50:	bfa2      	ittt	ge
 8013b52:	6821      	ldrge	r1, [r4, #0]
 8013b54:	f021 0104 	bicge.w	r1, r1, #4
 8013b58:	6021      	strge	r1, [r4, #0]
 8013b5a:	b90e      	cbnz	r6, 8013b60 <_printf_i+0x118>
 8013b5c:	2d00      	cmp	r5, #0
 8013b5e:	d04d      	beq.n	8013bfc <_printf_i+0x1b4>
 8013b60:	4615      	mov	r5, r2
 8013b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8013b66:	fb03 6711 	mls	r7, r3, r1, r6
 8013b6a:	5dc7      	ldrb	r7, [r0, r7]
 8013b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013b70:	4637      	mov	r7, r6
 8013b72:	42bb      	cmp	r3, r7
 8013b74:	460e      	mov	r6, r1
 8013b76:	d9f4      	bls.n	8013b62 <_printf_i+0x11a>
 8013b78:	2b08      	cmp	r3, #8
 8013b7a:	d10b      	bne.n	8013b94 <_printf_i+0x14c>
 8013b7c:	6823      	ldr	r3, [r4, #0]
 8013b7e:	07de      	lsls	r6, r3, #31
 8013b80:	d508      	bpl.n	8013b94 <_printf_i+0x14c>
 8013b82:	6923      	ldr	r3, [r4, #16]
 8013b84:	6861      	ldr	r1, [r4, #4]
 8013b86:	4299      	cmp	r1, r3
 8013b88:	bfde      	ittt	le
 8013b8a:	2330      	movle	r3, #48	; 0x30
 8013b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b94:	1b52      	subs	r2, r2, r5
 8013b96:	6122      	str	r2, [r4, #16]
 8013b98:	f8cd a000 	str.w	sl, [sp]
 8013b9c:	464b      	mov	r3, r9
 8013b9e:	aa03      	add	r2, sp, #12
 8013ba0:	4621      	mov	r1, r4
 8013ba2:	4640      	mov	r0, r8
 8013ba4:	f7ff fee2 	bl	801396c <_printf_common>
 8013ba8:	3001      	adds	r0, #1
 8013baa:	d14c      	bne.n	8013c46 <_printf_i+0x1fe>
 8013bac:	f04f 30ff 	mov.w	r0, #4294967295
 8013bb0:	b004      	add	sp, #16
 8013bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb6:	4835      	ldr	r0, [pc, #212]	; (8013c8c <_printf_i+0x244>)
 8013bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013bbc:	6829      	ldr	r1, [r5, #0]
 8013bbe:	6823      	ldr	r3, [r4, #0]
 8013bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013bc4:	6029      	str	r1, [r5, #0]
 8013bc6:	061d      	lsls	r5, r3, #24
 8013bc8:	d514      	bpl.n	8013bf4 <_printf_i+0x1ac>
 8013bca:	07df      	lsls	r7, r3, #31
 8013bcc:	bf44      	itt	mi
 8013bce:	f043 0320 	orrmi.w	r3, r3, #32
 8013bd2:	6023      	strmi	r3, [r4, #0]
 8013bd4:	b91e      	cbnz	r6, 8013bde <_printf_i+0x196>
 8013bd6:	6823      	ldr	r3, [r4, #0]
 8013bd8:	f023 0320 	bic.w	r3, r3, #32
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	2310      	movs	r3, #16
 8013be0:	e7b0      	b.n	8013b44 <_printf_i+0xfc>
 8013be2:	6823      	ldr	r3, [r4, #0]
 8013be4:	f043 0320 	orr.w	r3, r3, #32
 8013be8:	6023      	str	r3, [r4, #0]
 8013bea:	2378      	movs	r3, #120	; 0x78
 8013bec:	4828      	ldr	r0, [pc, #160]	; (8013c90 <_printf_i+0x248>)
 8013bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013bf2:	e7e3      	b.n	8013bbc <_printf_i+0x174>
 8013bf4:	0659      	lsls	r1, r3, #25
 8013bf6:	bf48      	it	mi
 8013bf8:	b2b6      	uxthmi	r6, r6
 8013bfa:	e7e6      	b.n	8013bca <_printf_i+0x182>
 8013bfc:	4615      	mov	r5, r2
 8013bfe:	e7bb      	b.n	8013b78 <_printf_i+0x130>
 8013c00:	682b      	ldr	r3, [r5, #0]
 8013c02:	6826      	ldr	r6, [r4, #0]
 8013c04:	6961      	ldr	r1, [r4, #20]
 8013c06:	1d18      	adds	r0, r3, #4
 8013c08:	6028      	str	r0, [r5, #0]
 8013c0a:	0635      	lsls	r5, r6, #24
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	d501      	bpl.n	8013c14 <_printf_i+0x1cc>
 8013c10:	6019      	str	r1, [r3, #0]
 8013c12:	e002      	b.n	8013c1a <_printf_i+0x1d2>
 8013c14:	0670      	lsls	r0, r6, #25
 8013c16:	d5fb      	bpl.n	8013c10 <_printf_i+0x1c8>
 8013c18:	8019      	strh	r1, [r3, #0]
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	6123      	str	r3, [r4, #16]
 8013c1e:	4615      	mov	r5, r2
 8013c20:	e7ba      	b.n	8013b98 <_printf_i+0x150>
 8013c22:	682b      	ldr	r3, [r5, #0]
 8013c24:	1d1a      	adds	r2, r3, #4
 8013c26:	602a      	str	r2, [r5, #0]
 8013c28:	681d      	ldr	r5, [r3, #0]
 8013c2a:	6862      	ldr	r2, [r4, #4]
 8013c2c:	2100      	movs	r1, #0
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f7ec fb06 	bl	8000240 <memchr>
 8013c34:	b108      	cbz	r0, 8013c3a <_printf_i+0x1f2>
 8013c36:	1b40      	subs	r0, r0, r5
 8013c38:	6060      	str	r0, [r4, #4]
 8013c3a:	6863      	ldr	r3, [r4, #4]
 8013c3c:	6123      	str	r3, [r4, #16]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c44:	e7a8      	b.n	8013b98 <_printf_i+0x150>
 8013c46:	6923      	ldr	r3, [r4, #16]
 8013c48:	462a      	mov	r2, r5
 8013c4a:	4649      	mov	r1, r9
 8013c4c:	4640      	mov	r0, r8
 8013c4e:	47d0      	blx	sl
 8013c50:	3001      	adds	r0, #1
 8013c52:	d0ab      	beq.n	8013bac <_printf_i+0x164>
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	079b      	lsls	r3, r3, #30
 8013c58:	d413      	bmi.n	8013c82 <_printf_i+0x23a>
 8013c5a:	68e0      	ldr	r0, [r4, #12]
 8013c5c:	9b03      	ldr	r3, [sp, #12]
 8013c5e:	4298      	cmp	r0, r3
 8013c60:	bfb8      	it	lt
 8013c62:	4618      	movlt	r0, r3
 8013c64:	e7a4      	b.n	8013bb0 <_printf_i+0x168>
 8013c66:	2301      	movs	r3, #1
 8013c68:	4632      	mov	r2, r6
 8013c6a:	4649      	mov	r1, r9
 8013c6c:	4640      	mov	r0, r8
 8013c6e:	47d0      	blx	sl
 8013c70:	3001      	adds	r0, #1
 8013c72:	d09b      	beq.n	8013bac <_printf_i+0x164>
 8013c74:	3501      	adds	r5, #1
 8013c76:	68e3      	ldr	r3, [r4, #12]
 8013c78:	9903      	ldr	r1, [sp, #12]
 8013c7a:	1a5b      	subs	r3, r3, r1
 8013c7c:	42ab      	cmp	r3, r5
 8013c7e:	dcf2      	bgt.n	8013c66 <_printf_i+0x21e>
 8013c80:	e7eb      	b.n	8013c5a <_printf_i+0x212>
 8013c82:	2500      	movs	r5, #0
 8013c84:	f104 0619 	add.w	r6, r4, #25
 8013c88:	e7f5      	b.n	8013c76 <_printf_i+0x22e>
 8013c8a:	bf00      	nop
 8013c8c:	08014545 	.word	0x08014545
 8013c90:	08014556 	.word	0x08014556

08013c94 <_read_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4d07      	ldr	r5, [pc, #28]	; (8013cb4 <_read_r+0x20>)
 8013c98:	4604      	mov	r4, r0
 8013c9a:	4608      	mov	r0, r1
 8013c9c:	4611      	mov	r1, r2
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	602a      	str	r2, [r5, #0]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	f7f2 fa92 	bl	80061cc <_read>
 8013ca8:	1c43      	adds	r3, r0, #1
 8013caa:	d102      	bne.n	8013cb2 <_read_r+0x1e>
 8013cac:	682b      	ldr	r3, [r5, #0]
 8013cae:	b103      	cbz	r3, 8013cb2 <_read_r+0x1e>
 8013cb0:	6023      	str	r3, [r4, #0]
 8013cb2:	bd38      	pop	{r3, r4, r5, pc}
 8013cb4:	2000604c 	.word	0x2000604c

08013cb8 <_fstat_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4d07      	ldr	r5, [pc, #28]	; (8013cd8 <_fstat_r+0x20>)
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	4608      	mov	r0, r1
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	602b      	str	r3, [r5, #0]
 8013cc6:	f7f2 faaa 	bl	800621e <_fstat>
 8013cca:	1c43      	adds	r3, r0, #1
 8013ccc:	d102      	bne.n	8013cd4 <_fstat_r+0x1c>
 8013cce:	682b      	ldr	r3, [r5, #0]
 8013cd0:	b103      	cbz	r3, 8013cd4 <_fstat_r+0x1c>
 8013cd2:	6023      	str	r3, [r4, #0]
 8013cd4:	bd38      	pop	{r3, r4, r5, pc}
 8013cd6:	bf00      	nop
 8013cd8:	2000604c 	.word	0x2000604c

08013cdc <_isatty_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d06      	ldr	r5, [pc, #24]	; (8013cf8 <_isatty_r+0x1c>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	602b      	str	r3, [r5, #0]
 8013ce8:	f7f2 faa9 	bl	800623e <_isatty>
 8013cec:	1c43      	adds	r3, r0, #1
 8013cee:	d102      	bne.n	8013cf6 <_isatty_r+0x1a>
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	b103      	cbz	r3, 8013cf6 <_isatty_r+0x1a>
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	bd38      	pop	{r3, r4, r5, pc}
 8013cf8:	2000604c 	.word	0x2000604c

08013cfc <lrintf>:
 8013cfc:	ee10 3a10 	vmov	r3, s0
 8013d00:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013d04:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8013d08:	281e      	cmp	r0, #30
 8013d0a:	b082      	sub	sp, #8
 8013d0c:	dc2e      	bgt.n	8013d6c <lrintf+0x70>
 8013d0e:	1c41      	adds	r1, r0, #1
 8013d10:	da02      	bge.n	8013d18 <lrintf+0x1c>
 8013d12:	2000      	movs	r0, #0
 8013d14:	b002      	add	sp, #8
 8013d16:	4770      	bx	lr
 8013d18:	2816      	cmp	r0, #22
 8013d1a:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8013d1e:	dd09      	ble.n	8013d34 <lrintf+0x38>
 8013d20:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013d28:	3a96      	subs	r2, #150	; 0x96
 8013d2a:	4090      	lsls	r0, r2
 8013d2c:	2900      	cmp	r1, #0
 8013d2e:	d0f1      	beq.n	8013d14 <lrintf+0x18>
 8013d30:	4240      	negs	r0, r0
 8013d32:	e7ef      	b.n	8013d14 <lrintf+0x18>
 8013d34:	4b10      	ldr	r3, [pc, #64]	; (8013d78 <lrintf+0x7c>)
 8013d36:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013d3a:	ed93 7a00 	vldr	s14, [r3]
 8013d3e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8013d42:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013d46:	eddd 7a01 	vldr	s15, [sp, #4]
 8013d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d4e:	ee17 3a90 	vmov	r3, s15
 8013d52:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013d56:	d0dc      	beq.n	8013d12 <lrintf+0x16>
 8013d58:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013d5c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8013d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013d64:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013d68:	40d8      	lsrs	r0, r3
 8013d6a:	e7df      	b.n	8013d2c <lrintf+0x30>
 8013d6c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013d70:	ee17 0a90 	vmov	r0, s15
 8013d74:	e7ce      	b.n	8013d14 <lrintf+0x18>
 8013d76:	bf00      	nop
 8013d78:	08014568 	.word	0x08014568

08013d7c <checkint>:
 8013d7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013d80:	2b7e      	cmp	r3, #126	; 0x7e
 8013d82:	dd10      	ble.n	8013da6 <checkint+0x2a>
 8013d84:	2b96      	cmp	r3, #150	; 0x96
 8013d86:	dc0c      	bgt.n	8013da2 <checkint+0x26>
 8013d88:	2201      	movs	r2, #1
 8013d8a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8013d92:	1e5a      	subs	r2, r3, #1
 8013d94:	4202      	tst	r2, r0
 8013d96:	d106      	bne.n	8013da6 <checkint+0x2a>
 8013d98:	4203      	tst	r3, r0
 8013d9a:	bf0c      	ite	eq
 8013d9c:	2002      	moveq	r0, #2
 8013d9e:	2001      	movne	r0, #1
 8013da0:	4770      	bx	lr
 8013da2:	2002      	movs	r0, #2
 8013da4:	4770      	bx	lr
 8013da6:	2000      	movs	r0, #0
 8013da8:	4770      	bx	lr
 8013daa:	0000      	movs	r0, r0
 8013dac:	0000      	movs	r0, r0
	...

08013db0 <powf>:
 8013db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013db2:	ee10 1a10 	vmov	r1, s0
 8013db6:	ee10 4a90 	vmov	r4, s1
 8013dba:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8013dbe:	0062      	lsls	r2, r4, #1
 8013dc0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013dc4:	eef0 7a40 	vmov.f32	s15, s0
 8013dc8:	f102 30ff 	add.w	r0, r2, #4294967295
 8013dcc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8013dd0:	d252      	bcs.n	8013e78 <powf+0xc8>
 8013dd2:	4298      	cmp	r0, r3
 8013dd4:	d252      	bcs.n	8013e7c <powf+0xcc>
 8013dd6:	2000      	movs	r0, #0
 8013dd8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8013ddc:	4ca0      	ldr	r4, [pc, #640]	; (8014060 <powf+0x2b0>)
 8013dde:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8013de2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8013de6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8013dea:	0dd2      	lsrs	r2, r2, #23
 8013dec:	05d2      	lsls	r2, r2, #23
 8013dee:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8013df2:	1a8b      	subs	r3, r1, r2
 8013df4:	ed95 6b00 	vldr	d6, [r5]
 8013df8:	ee07 3a90 	vmov	s15, r3
 8013dfc:	15d2      	asrs	r2, r2, #23
 8013dfe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013e02:	eea6 5b07 	vfma.f64	d5, d6, d7
 8013e06:	ed95 6b02 	vldr	d6, [r5, #8]
 8013e0a:	ee25 2b05 	vmul.f64	d2, d5, d5
 8013e0e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8013e12:	ee07 2a90 	vmov	s15, r2
 8013e16:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8013e1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013e1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013e22:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8013e26:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8013e2a:	eea5 3b06 	vfma.f64	d3, d5, d6
 8013e2e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8013e32:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013e36:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8013e3a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8013e3e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8013e42:	eea2 7b06 	vfma.f64	d7, d2, d6
 8013e46:	eea3 7b01 	vfma.f64	d7, d3, d1
 8013e4a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013e4e:	ee10 3a90 	vmov	r3, s1
 8013e52:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8013e56:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	f0c0 80b1 	bcc.w	8013fc2 <powf+0x212>
 8013e60:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8014040 <powf+0x290>
 8013e64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6c:	dd79      	ble.n	8013f62 <powf+0x1b2>
 8013e6e:	b003      	add	sp, #12
 8013e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e74:	f000 b940 	b.w	80140f8 <__math_oflowf>
 8013e78:	4298      	cmp	r0, r3
 8013e7a:	d32d      	bcc.n	8013ed8 <powf+0x128>
 8013e7c:	b952      	cbnz	r2, 8013e94 <powf+0xe4>
 8013e7e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8013e82:	005b      	lsls	r3, r3, #1
 8013e84:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8013e88:	f240 80c9 	bls.w	801401e <powf+0x26e>
 8013e8c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8013e90:	b003      	add	sp, #12
 8013e92:	bd30      	pop	{r4, r5, pc}
 8013e94:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8013e98:	d105      	bne.n	8013ea6 <powf+0xf6>
 8013e9a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8013e9e:	0064      	lsls	r4, r4, #1
 8013ea0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013ea4:	e7f0      	b.n	8013e88 <powf+0xd8>
 8013ea6:	004b      	lsls	r3, r1, #1
 8013ea8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8013eac:	d8ee      	bhi.n	8013e8c <powf+0xdc>
 8013eae:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8013eb2:	d1eb      	bne.n	8013e8c <powf+0xdc>
 8013eb4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013eb8:	f000 80b1 	beq.w	801401e <powf+0x26e>
 8013ebc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8013ec0:	ea6f 0404 	mvn.w	r4, r4
 8013ec4:	bf34      	ite	cc
 8013ec6:	2300      	movcc	r3, #0
 8013ec8:	2301      	movcs	r3, #1
 8013eca:	0fe4      	lsrs	r4, r4, #31
 8013ecc:	42a3      	cmp	r3, r4
 8013ece:	f040 80a9 	bne.w	8014024 <powf+0x274>
 8013ed2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8013ed6:	e7db      	b.n	8013e90 <powf+0xe0>
 8013ed8:	004d      	lsls	r5, r1, #1
 8013eda:	1e6a      	subs	r2, r5, #1
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d31c      	bcc.n	8013f1a <powf+0x16a>
 8013ee0:	2900      	cmp	r1, #0
 8013ee2:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013ee6:	da0f      	bge.n	8013f08 <powf+0x158>
 8013ee8:	ee10 0a90 	vmov	r0, s1
 8013eec:	f7ff ff46 	bl	8013d7c <checkint>
 8013ef0:	2801      	cmp	r0, #1
 8013ef2:	d109      	bne.n	8013f08 <powf+0x158>
 8013ef4:	eeb1 0a40 	vneg.f32	s0, s0
 8013ef8:	b945      	cbnz	r5, 8013f0c <powf+0x15c>
 8013efa:	2c00      	cmp	r4, #0
 8013efc:	dac8      	bge.n	8013e90 <powf+0xe0>
 8013efe:	b003      	add	sp, #12
 8013f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f04:	f000 b8fe 	b.w	8014104 <__math_divzerof>
 8013f08:	2000      	movs	r0, #0
 8013f0a:	e7f5      	b.n	8013ef8 <powf+0x148>
 8013f0c:	2c00      	cmp	r4, #0
 8013f0e:	dabf      	bge.n	8013e90 <powf+0xe0>
 8013f10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f14:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013f18:	e7ba      	b.n	8013e90 <powf+0xe0>
 8013f1a:	2900      	cmp	r1, #0
 8013f1c:	da1f      	bge.n	8013f5e <powf+0x1ae>
 8013f1e:	ee10 0a90 	vmov	r0, s1
 8013f22:	f7ff ff2b 	bl	8013d7c <checkint>
 8013f26:	b920      	cbnz	r0, 8013f32 <powf+0x182>
 8013f28:	b003      	add	sp, #12
 8013f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f2e:	f000 b8f9 	b.w	8014124 <__math_invalidf>
 8013f32:	2801      	cmp	r0, #1
 8013f34:	bf14      	ite	ne
 8013f36:	2000      	movne	r0, #0
 8013f38:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8013f3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013f40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8013f44:	f4bf af48 	bcs.w	8013dd8 <powf+0x28>
 8013f48:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8014064 <powf+0x2b4>
 8013f4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013f50:	ee10 3a10 	vmov	r3, s0
 8013f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f58:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8013f5c:	e73c      	b.n	8013dd8 <powf+0x28>
 8013f5e:	2000      	movs	r0, #0
 8013f60:	e7ee      	b.n	8013f40 <powf+0x190>
 8013f62:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8014048 <powf+0x298>
 8013f66:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6e:	dd10      	ble.n	8013f92 <powf+0x1e2>
 8013f70:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8013f74:	2800      	cmp	r0, #0
 8013f76:	d158      	bne.n	801402a <powf+0x27a>
 8013f78:	9300      	str	r3, [sp, #0]
 8013f7a:	eddd 7a00 	vldr	s15, [sp]
 8013f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f86:	eef4 7a47 	vcmp.f32	s15, s14
 8013f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8e:	f47f af6e 	bne.w	8013e6e <powf+0xbe>
 8013f92:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014050 <powf+0x2a0>
 8013f96:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f9e:	d804      	bhi.n	8013faa <powf+0x1fa>
 8013fa0:	b003      	add	sp, #12
 8013fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fa6:	f000 b89b 	b.w	80140e0 <__math_uflowf>
 8013faa:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8014058 <powf+0x2a8>
 8013fae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb6:	d504      	bpl.n	8013fc2 <powf+0x212>
 8013fb8:	b003      	add	sp, #12
 8013fba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013fbe:	f000 b895 	b.w	80140ec <__math_may_uflowf>
 8013fc2:	4b29      	ldr	r3, [pc, #164]	; (8014068 <powf+0x2b8>)
 8013fc4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8013fc8:	ee30 6b07 	vadd.f64	d6, d0, d7
 8013fcc:	ee16 2a10 	vmov	r2, s12
 8013fd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013fd4:	f002 011f 	and.w	r1, r2, #31
 8013fd8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8013fdc:	ee30 7b47 	vsub.f64	d7, d0, d7
 8013fe0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013fe4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8013fe8:	ee27 4b07 	vmul.f64	d4, d7, d7
 8013fec:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8013ff0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8013ff4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013ff8:	686d      	ldr	r5, [r5, #4]
 8013ffa:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8013ffe:	1882      	adds	r2, r0, r2
 8014000:	2300      	movs	r3, #0
 8014002:	1918      	adds	r0, r3, r4
 8014004:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8014008:	eea7 0b05 	vfma.f64	d0, d7, d5
 801400c:	ec41 0b17 	vmov	d7, r0, r1
 8014010:	eea6 0b04 	vfma.f64	d0, d6, d4
 8014014:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014018:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801401c:	e738      	b.n	8013e90 <powf+0xe0>
 801401e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014022:	e735      	b.n	8013e90 <powf+0xe0>
 8014024:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801406c <powf+0x2bc>
 8014028:	e732      	b.n	8013e90 <powf+0xe0>
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	eddd 7a01 	vldr	s15, [sp, #4]
 8014030:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014038:	e7a5      	b.n	8013f86 <powf+0x1d6>
 801403a:	bf00      	nop
 801403c:	f3af 8000 	nop.w
 8014040:	ffd1d571 	.word	0xffd1d571
 8014044:	405fffff 	.word	0x405fffff
 8014048:	ffa3aae2 	.word	0xffa3aae2
 801404c:	405fffff 	.word	0x405fffff
 8014050:	00000000 	.word	0x00000000
 8014054:	c062c000 	.word	0xc062c000
 8014058:	00000000 	.word	0x00000000
 801405c:	c062a000 	.word	0xc062a000
 8014060:	08014570 	.word	0x08014570
 8014064:	4b000000 	.word	0x4b000000
 8014068:	08014698 	.word	0x08014698
 801406c:	00000000 	.word	0x00000000

08014070 <sqrtf>:
 8014070:	b508      	push	{r3, lr}
 8014072:	ed2d 8b02 	vpush	{d8}
 8014076:	eeb0 8a40 	vmov.f32	s16, s0
 801407a:	f000 f817 	bl	80140ac <__ieee754_sqrtf>
 801407e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014086:	d60c      	bvs.n	80140a2 <sqrtf+0x32>
 8014088:	eddf 8a07 	vldr	s17, [pc, #28]	; 80140a8 <sqrtf+0x38>
 801408c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014094:	d505      	bpl.n	80140a2 <sqrtf+0x32>
 8014096:	f7fe fd81 	bl	8012b9c <__errno>
 801409a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801409e:	2321      	movs	r3, #33	; 0x21
 80140a0:	6003      	str	r3, [r0, #0]
 80140a2:	ecbd 8b02 	vpop	{d8}
 80140a6:	bd08      	pop	{r3, pc}
 80140a8:	00000000 	.word	0x00000000

080140ac <__ieee754_sqrtf>:
 80140ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80140b0:	4770      	bx	lr

080140b2 <with_errnof>:
 80140b2:	b513      	push	{r0, r1, r4, lr}
 80140b4:	4604      	mov	r4, r0
 80140b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80140ba:	f7fe fd6f 	bl	8012b9c <__errno>
 80140be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80140c2:	6004      	str	r4, [r0, #0]
 80140c4:	b002      	add	sp, #8
 80140c6:	bd10      	pop	{r4, pc}

080140c8 <xflowf>:
 80140c8:	b130      	cbz	r0, 80140d8 <xflowf+0x10>
 80140ca:	eef1 7a40 	vneg.f32	s15, s0
 80140ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80140d2:	2022      	movs	r0, #34	; 0x22
 80140d4:	f7ff bfed 	b.w	80140b2 <with_errnof>
 80140d8:	eef0 7a40 	vmov.f32	s15, s0
 80140dc:	e7f7      	b.n	80140ce <xflowf+0x6>
	...

080140e0 <__math_uflowf>:
 80140e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140e8 <__math_uflowf+0x8>
 80140e4:	f7ff bff0 	b.w	80140c8 <xflowf>
 80140e8:	10000000 	.word	0x10000000

080140ec <__math_may_uflowf>:
 80140ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140f4 <__math_may_uflowf+0x8>
 80140f0:	f7ff bfea 	b.w	80140c8 <xflowf>
 80140f4:	1a200000 	.word	0x1a200000

080140f8 <__math_oflowf>:
 80140f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014100 <__math_oflowf+0x8>
 80140fc:	f7ff bfe4 	b.w	80140c8 <xflowf>
 8014100:	70000000 	.word	0x70000000

08014104 <__math_divzerof>:
 8014104:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014108:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801410c:	2800      	cmp	r0, #0
 801410e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8014112:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014120 <__math_divzerof+0x1c>
 8014116:	2022      	movs	r0, #34	; 0x22
 8014118:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801411c:	f7ff bfc9 	b.w	80140b2 <with_errnof>
 8014120:	00000000 	.word	0x00000000

08014124 <__math_invalidf>:
 8014124:	eef0 7a40 	vmov.f32	s15, s0
 8014128:	ee30 7a40 	vsub.f32	s14, s0, s0
 801412c:	eef4 7a67 	vcmp.f32	s15, s15
 8014130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014134:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014138:	d602      	bvs.n	8014140 <__math_invalidf+0x1c>
 801413a:	2021      	movs	r0, #33	; 0x21
 801413c:	f7ff bfb9 	b.w	80140b2 <with_errnof>
 8014140:	4770      	bx	lr
	...

08014144 <_init>:
 8014144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014146:	bf00      	nop
 8014148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801414a:	bc08      	pop	{r3}
 801414c:	469e      	mov	lr, r3
 801414e:	4770      	bx	lr

08014150 <_fini>:
 8014150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014152:	bf00      	nop
 8014154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014156:	bc08      	pop	{r3}
 8014158:	469e      	mov	lr, r3
 801415a:	4770      	bx	lr
