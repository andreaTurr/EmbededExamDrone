
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  08017f10  08017f10  00027f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a50  08018a50  00030394  2**0
                  CONTENTS
  4 .ARM          00000008  08018a50  08018a50  00028a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a58  08018a58  00030394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018a58  08018a58  00028a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a5c  08018a5c  00028a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  08018a60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006214  20000394  08018df4  00030394  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200065a8  08018df4  000365a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f99d  00000000  00000000  000303c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000782d  00000000  00000000  0007fd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003988  00000000  00000000  00087590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003670  00000000  00000000  0008af18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f796  00000000  00000000  0008e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036a4f  00000000  00000000  000bdd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ddad  00000000  00000000  000f476d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021251a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010ad8  00000000  00000000  0021256c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000394 	.word	0x20000394
 800021c:	00000000 	.word	0x00000000
 8000220:	08017ef4 	.word	0x08017ef4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000398 	.word	0x20000398
 800023c:	08017ef4 	.word	0x08017ef4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <applyAccelerationTrims+0x70>)
 80009e6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <applyAccelerationTrims+0x70>)
 80009fe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a04:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a1c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a22:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <applyAccelerationTrims+0x70>)
 8000a3a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200003b0 	.word	0x200003b0

08000a50 <accInitFilters>:


static void accInitFilters(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 8000a56:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <accInitFilters+0xc0>)
 8000a58:	2232      	movs	r2, #50	; 0x32
 8000a5a:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <accInitFilters+0xc4>)
 8000a5e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <accInitFilters+0x1c>
 8000a66:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <accInitFilters+0xc0>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	e000      	b.n	8000a6e <accInitFilters+0x1e>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <accInitFilters+0xc8>)
 8000a70:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 8000a72:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <accInitFilters+0xc8>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d02c      	beq.n	8000ad4 <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <accInitFilters+0xc4>)
 8000a7c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000a80:	ee07 3a90 	vmov	s15, r3
 8000a84:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a88:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000b08 <accInitFilters+0xb8>
 8000a8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000a90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a94:	ee17 3a90 	vmov	r3, s15
 8000a98:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	e016      	b.n	8000ace <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <accInitFilters+0xc8>)
 8000aac:	4413      	add	r3, r2
 8000aae:	3304      	adds	r3, #4
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <accInitFilters+0xc8>)
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	ee07 2a90 	vmov	s15, r2
 8000ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000abc:	6839      	ldr	r1, [r7, #0]
 8000abe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fbe2 	bl	800128c <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	dde5      	ble.n	8000aa0 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <accInitFilters+0xc8>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <accInitFilters+0xc8>)
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <accInitFilters+0xc8>)
 8000ae8:	f04f 0200 	mov.w	r2, #0
 8000aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <accInitFilters+0xc8>)
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	f3af 8000 	nop.w
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	412e8480 	.word	0x412e8480
 8000b10:	200004a4 	.word	0x200004a4
 8000b14:	200003b0 	.word	0x200003b0
 8000b18:	20000410 	.word	0x20000410

08000b1c <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <setAccelerationTrims+0x1c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000410 	.word	0x20000410

08000b3c <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 8000b46:	2260      	movs	r2, #96	; 0x60
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4824      	ldr	r0, [pc, #144]	; (8000bdc <accInit+0xa0>)
 8000b4c:	f012 fcd7 	bl	80134fe <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <accInit+0xa0>)
 8000b52:	4a23      	ldr	r2, [pc, #140]	; (8000be0 <accInit+0xa4>)
 8000b54:	621a      	str	r2, [r3, #32]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <accInit+0xa8>)
 8000b58:	78da      	ldrb	r2, [r3, #3]
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <accInit+0xa0>)
 8000b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <accInit+0xac>)
 8000b62:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000b66:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f005 f9d9 	bl	8005f28 <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 8000b76:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <accInit+0xa0>)
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	7793      	strb	r3, [r2, #30]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	491a      	ldr	r1, [pc, #104]	; (8000bec <accInit+0xb0>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 f98c 	bl	8005ea0 <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <accInit+0xa0>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <accInit+0xa0>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <accInit+0xa0>)
 8000b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9a:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <accInit+0xa0>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <accInit+0xa0>)
 8000ba2:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <accInit+0xa0>)
 8000ba6:	899b      	ldrh	r3, [r3, #12]
 8000ba8:	ee07 3a90 	vmov	s15, r3
 8000bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <accInit+0xa0>)
 8000bba:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <accInit+0xa0>)
 8000bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bc4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	setAccelerationTrims(&accelerometerConfig.accZero);
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <accInit+0xb4>)
 8000bca:	f7ff ffa7 	bl	8000b1c <setAccelerationTrims>

	accInitFilters();
 8000bce:	f7ff ff3f 	bl	8000a50 <accInitFilters>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200003b0 	.word	0x200003b0
 8000be0:	20000650 	.word	0x20000650
 8000be4:	200004a4 	.word	0x200004a4
 8000be8:	20000614 	.word	0x20000614
 8000bec:	200003d8 	.word	0x200003d8
 8000bf0:	200004a8 	.word	0x200004a8

08000bf4 <accUpdate>:

void accUpdate(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000bfa:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <accUpdate+0x10c>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	4840      	ldr	r0, [pc, #256]	; (8000d00 <accUpdate+0x10c>)
 8000c00:	4798      	blx	r3
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d077      	beq.n	8000cf8 <accUpdate+0x104>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <accUpdate+0x10c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e00e      	b.n	8000c34 <accUpdate+0x40>
        acc.accADC[axis] = acc.dev.accADC[axis];
 8000c16:	4a3a      	ldr	r2, [pc, #232]	; (8000d00 <accUpdate+0x10c>)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4937      	ldr	r1, [pc, #220]	; (8000d00 <accUpdate+0x10c>)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3314      	adds	r3, #20
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	dded      	ble.n	8000c16 <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <accUpdate+0x110>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d025      	beq.n	8000c8e <accUpdate+0x9a>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e01f      	b.n	8000c88 <accUpdate+0x94>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <accUpdate+0x110>)
 8000c54:	4413      	add	r3, r2
 8000c56:	1d1a      	adds	r2, r3, #4
 8000c58:	4929      	ldr	r1, [pc, #164]	; (8000d00 <accUpdate+0x10c>)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	3314      	adds	r3, #20
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	edd3 7a00 	vldr	s15, [r3]
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	f000 fb26 	bl	80012bc <biquadFilterApply>
 8000c70:	eef0 7a40 	vmov.f32	s15, s0
 8000c74:	4a22      	ldr	r2, [pc, #136]	; (8000d00 <accUpdate+0x10c>)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3314      	adds	r3, #20
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	dddc      	ble.n	8000c48 <accUpdate+0x54>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <accUpdate+0x10c>)
 8000c90:	7f9b      	ldrb	r3, [r3, #30]
 8000c92:	4619      	mov	r1, r3
 8000c94:	481c      	ldr	r0, [pc, #112]	; (8000d08 <accUpdate+0x114>)
 8000c96:	f005 f995 	bl	8005fc4 <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <accUpdate+0x110>)
 8000c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fe9c 	bl	80009dc <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <accUpdate+0x110>)
 8000ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <accUpdate+0x110>)
 8000cae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	e01b      	b.n	8000cf0 <accUpdate+0xfc>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 8000cb8:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <accUpdate+0x110>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3320      	adds	r3, #32
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <accUpdate+0x10c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3314      	adds	r3, #20
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	edd3 7a00 	vldr	s15, [r3]
 8000cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <accUpdate+0x110>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3320      	adds	r3, #32
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3301      	adds	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dde0      	ble.n	8000cb8 <accUpdate+0xc4>
 8000cf6:	e000      	b.n	8000cfa <accUpdate+0x106>
        return;
 8000cf8:	bf00      	nop
    }
}
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200003b0 	.word	0x200003b0
 8000d04:	20000410 	.word	0x20000410
 8000d08:	20000400 	.word	0x20000400

08000d0c <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dd2e      	ble.n	8000d7c <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e022      	b.n	8000d6a <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	3320      	adds	r3, #32
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3304      	adds	r3, #4
 8000d30:	edd3 6a00 	vldr	s13, [r3]
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d4e:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3320      	adds	r3, #32
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	ddd9      	ble.n	8000d24 <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <accGetAccumulationAverage+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e010      	b.n	8000d9e <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	e009      	b.n	8000d96 <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	ddf2      	ble.n	8000d82 <accGetAccumulationAverage+0x76>
        }
        return false;
 8000d9c:	2300      	movs	r3, #0
    }
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000410 	.word	0x20000410

08000db0 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	imuInit();
 8000db4:	f001 fefe 	bl	8002bb4 <imuInit>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <attitudeUpdate>:

void attitudeUpdate(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 8000dc0:	f002 fc08 	bl	80035d4 <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 8000dc4:	f002 fce8 	bl	8003798 <imuCalculateThrottleAngleCorrection>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <barometerConfig>:
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

barometerConfig_t barometerConfig_System;

static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; }
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <barometerConfig+0x10>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	2000056c 	.word	0x2000056c

08000de0 <pgResetFn_barometerConfig>:

static void pgResetFn_barometerConfig(barometerConfig_t *barometerConfig)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
    barometerConfig->baro_hardware = BARO_LPS;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2205      	movs	r2, #5
 8000dec:	715a      	strb	r2, [r3, #5]
    barometerConfig->baro_busType = BUS_TYPE_I2C;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
    barometerConfig->baro_i2c_device = I2C_DEV_TO_CFG(BARO_I2C_INSTANCE);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	70da      	strb	r2, [r3, #3]
    barometerConfig->baro_i2c_address = DEFAULT_BARO_I2C_ADDRESS;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	711a      	strb	r2, [r3, #4]
    barometerConfig->baro_spi_device = SPI_DEV_TO_CFG(SPIINVALID);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	705a      	strb	r2, [r3, #1]
    barometerConfig->baro_spi_csn = IO_TAG_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	709a      	strb	r2, [r3, #2]
    barometerConfig->baro_eoc_tag = IO_TAG(BARO_EOC_PIN);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	719a      	strb	r2, [r3, #6]
    barometerConfig->baro_xclr_tag = IO_TAG(BARO_XCLR_PIN);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	71da      	strb	r2, [r3, #7]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <lpsNothing>:

static void lpsNothing(baroDev_t *baro)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    (void)(baro);
    return;
 8000e2c:	bf00      	nop
}
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <lpsNothingBool>:

static bool lpsNothingBool(baroDev_t *baro)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	(void)(baro);
    return true;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <lpsNothingCalculate>:

static void lpsNothingCalculate(int32_t *pressure, int32_t *temperature)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
	(void)(*pressure);
	(void)(*temperature);
    return;
 8000e58:	bf00      	nop
}
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <lpsDetect>:

static bool lpsDetect(baroDev_t *baro)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    baro->combined_read = true;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    baro->ut_delay = 1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    baro->up_delay = 1000000 / 24;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f24a 22c2 	movw	r2, #41666	; 0xa2c2
 8000e82:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    baro->start_ut = lpsNothing;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <lpsDetect+0x68>)
 8000e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    baro->get_ut = lpsNothingBool;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <lpsDetect+0x6c>)
 8000e92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    baro->read_ut = lpsNothingBool;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <lpsDetect+0x6c>)
 8000e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    baro->start_up = lpsNothing;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <lpsDetect+0x68>)
 8000ea2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    baro->get_up = lpsNothingBool;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <lpsDetect+0x6c>)
 8000eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    baro->read_up = lpsNothingBool;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <lpsDetect+0x6c>)
 8000eb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    baro->calculate = lpsNothingCalculate;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <lpsDetect+0x70>)
 8000eba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return true;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	08000e25 	.word	0x08000e25
 8000ed0:	08000e39 	.word	0x08000e39
 8000ed4:	08000e4f 	.word	0x08000e4f

08000ed8 <baroDetect>:

static bool baroDetect(baroDev_t *baroDev, baroSensor_e baroHardwareToUse)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
    extDevice_t *dev = &baroDev->dev;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60bb      	str	r3, [r7, #8]

    // Detect what pressure sensors are available. baro->update() is set to sensor-specific update function

    baroSensor_e baroHardware = baroHardwareToUse;
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	73fb      	strb	r3, [r7, #15]

    switch (barometerConfig()->baro_busType) {
 8000eec:	f7ff ff6e 	bl	8000dcc <barometerConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d12b      	bne.n	8000f50 <baroDetect+0x78>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, barometerConfig()->baro_i2c_device);
 8000ef8:	f7ff ff68 	bl	8000dcc <barometerConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	4619      	mov	r1, r3
 8000f02:	68b8      	ldr	r0, [r7, #8]
 8000f04:	f000 f8c6 	bl	8001094 <i2cBusSetInstance>
        dev->busType_u.i2c.address = barometerConfig()->baro_i2c_address;
 8000f08:	f7ff ff60 	bl	8000dcc <barometerConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	791a      	ldrb	r2, [r3, #4]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	711a      	strb	r2, [r3, #4]
        break;
 8000f14:	bf00      	nop
    default:
        return false;
    }

    switch (baroHardware) {
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b0a      	cmp	r3, #10
 8000f1a:	d827      	bhi.n	8000f6c <baroDetect+0x94>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <baroDetect+0x4c>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f55 	.word	0x08000f55
 8000f28:	08000f67 	.word	0x08000f67
 8000f2c:	08000f55 	.word	0x08000f55
 8000f30:	08000f55 	.word	0x08000f55
 8000f34:	08000f67 	.word	0x08000f67
 8000f38:	08000f55 	.word	0x08000f55
 8000f3c:	08000f67 	.word	0x08000f67
 8000f40:	08000f67 	.word	0x08000f67
 8000f44:	08000f67 	.word	0x08000f67
 8000f48:	08000f67 	.word	0x08000f67
 8000f4c:	08000f67 	.word	0x08000f67
        return false;
 8000f50:	2300      	movs	r3, #0
 8000f52:	e011      	b.n	8000f78 <baroDetect+0xa0>
    case BARO_DEFAULT:
    case BARO_BMP085:
    case BARO_MS5611:
    case BARO_LPS:
        if (lpsDetect(baroDev)) {
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff85 	bl	8000e64 <lpsDetect>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <baroDetect+0x8e>
            baroHardware = BARO_LPS;
 8000f60:	2305      	movs	r3, #5
 8000f62:	73fb      	strb	r3, [r7, #15]
            break;
 8000f64:	e002      	b.n	8000f6c <baroDetect+0x94>
    case BARO_BMP280:
    case BARO_QMP6988:
    case BARO_2SMPB_02B:
    case BARO_VIRTUAL:
    case BARO_NONE:
        baroHardware = BARO_NONE;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
        break;
 8000f6a:	bf00      	nop
    }

    if (baroHardware == BARO_NONE) {
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <baroDetect+0x9e>
        return false;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <baroDetect+0xa0>
    }

    return true;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 8000f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000fc0 <pressureToAltitude+0x40>
 8000f92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f96:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000fc4 <pressureToAltitude+0x44>
 8000f9a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9e:	f016 fddf 	bl	8017b60 <powf>
 8000fa2:	eef0 7a40 	vmov.f32	s15, s0
 8000fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fc8 <pressureToAltitude+0x48>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	47c5e680 	.word	0x47c5e680
 8000fc4:	3e42dcb1 	.word	0x3e42dcb1
 8000fc8:	4a8748d0 	.word	0x4a8748d0

08000fcc <baroInit>:

void baroInit(sensorBaroInitFuncPtr initFn, sensorBaroReadFuncPtr readFn)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	pgResetFn_barometerConfig(&barometerConfig_System);
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <baroInit+0x6c>)
 8000fd8:	f7ff ff02 	bl	8000de0 <pgResetFn_barometerConfig>
    baroDetect(&baro.dev, barometerConfig()->baro_hardware);
 8000fdc:	f7ff fef6 	bl	8000dcc <barometerConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	795b      	ldrb	r3, [r3, #5]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4815      	ldr	r0, [pc, #84]	; (800103c <baroInit+0x70>)
 8000fe8:	f7ff ff76 	bl	8000ed8 <baroDetect>
    baro.dev.read_ut = readFn;
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <baroInit+0x70>)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    initFn(&baro.dev);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4811      	ldr	r0, [pc, #68]	; (800103c <baroInit+0x70>)
 8000ff8:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <baroInit+0x70>)
 8000ffc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd10      	ble.n	8001026 <baroInit+0x5a>
    	baro.ground_altitude = pressureToAltitude(baro.dev.baroADC);
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <baroInit+0x70>)
 8001006:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	eeb0 0a67 	vmov.f32	s0, s15
 8001016:	f7ff ffb3 	bl	8000f80 <pressureToAltitude>
 800101a:	eef0 7a40 	vmov.f32	s15, s0
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <baroInit+0x70>)
 8001020:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    } else {
    	baro.ground_altitude = 0;
    }
}
 8001024:	e004      	b.n	8001030 <baroInit+0x64>
    	baro.ground_altitude = 0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <baroInit+0x70>)
 8001028:	f04f 0200 	mov.w	r2, #0
 800102c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000056c 	.word	0x2000056c
 800103c:	200004b4 	.word	0x200004b4

08001040 <baroUpdate>:

void baroUpdate(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    baro.dev.read_ut(&baro.dev);
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <baroUpdate+0x50>)
 8001048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104c:	4810      	ldr	r0, [pc, #64]	; (8001090 <baroUpdate+0x50>)
 800104e:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <baroUpdate+0x50>)
 8001052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd16      	ble.n	8001088 <baroUpdate+0x48>
        const float altitude = pressureToAltitude(baro.dev.baroADC);
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <baroUpdate+0x50>)
 800105c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	f7ff ff88 	bl	8000f80 <pressureToAltitude>
 8001070:	ed87 0a01 	vstr	s0, [r7, #4]
        baro.altitude = altitude - baro.ground_altitude;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <baroUpdate+0x50>)
 8001076:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800107a:	ed97 7a01 	vldr	s14, [r7, #4]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001082:	4b03      	ldr	r3, [pc, #12]	; (8001090 <baroUpdate+0x50>)
 8001084:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    }
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200004b4 	.word	0x200004b4

08001094 <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d002      	beq.n	80010aa <i2cBusSetInstance+0x16>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d901      	bls.n	80010ae <i2cBusSetInstance+0x1a>
        return false;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e016      	b.n	80010dc <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <i2cBusSetInstance+0x54>)
 80010bc:	441a      	add	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b252      	sxtb	r2, r2
 80010d8:	711a      	strb	r2, [r3, #4]

    return true;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000574 	.word	0x20000574

080010ec <controlMotorInit>:

#include "control_motor.h"

#include "pid.h"

void controlMotorInit(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	pidInit();
 80010f0:	f003 ffb8 	bl	8005064 <pidInit>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 80010fc:	f004 fdf4 	bl	8005ce8 <pidIncUpdateCounter>
    processRcCommand();
 8001100:	f004 fe12 	bl	8005d28 <processRcCommand>
    pidController();
 8001104:	f004 f918 	bl	8005338 <pidController>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	ed87 0a01 	vstr	s0, [r7, #4]
 8001116:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 800111a:	ed97 7a01 	vldr	s14, [r7, #4]
 800111e:	edd7 7a00 	vldr	s15, [r7]
 8001122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800112e:	edd7 7a00 	vldr	s15, [r7]
 8001132:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001136:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800113a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800113e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001142:	eeb0 0a67 	vmov.f32	s0, s15
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	ed87 0a00 	vstr	s0, [r7]
    return input;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	ee07 3a90 	vmov	s15, r3
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0a01 	vstr	s0, [r7, #4]
 800117a:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80011bc <pt1FilterGain+0x4c>
 8001186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800118a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800118e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001192:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8001196:	ed97 7a03 	vldr	s14, [r7, #12]
 800119a:	edd7 7a00 	vldr	s15, [r7]
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	ed97 7a00 	vldr	s14, [r7]
 80011a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80011ae:	eeb0 0a67 	vmov.f32	s0, s15
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40c90fdb 	.word	0x40c90fdb

080011c0 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
    filter->k = k;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	605a      	str	r2, [r3, #4]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ed97 6a00 	vldr	s12, [r7]
 8001208:	ee76 7a67 	vsub.f32	s15, s12, s15
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	ee07 3a90 	vmov	s15, r3
}
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6178      	str	r0, [r7, #20]
 8001238:	ed87 0a04 	vstr	s0, [r7, #16]
 800123c:	60f9      	str	r1, [r7, #12]
 800123e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001242:	4613      	mov	r3, r2
 8001244:	ed87 1a00 	vstr	s2, [r7]
 8001248:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	ed97 1a00 	vldr	s2, [r7]
 8001250:	461a      	mov	r2, r3
 8001252:	edd7 0a02 	vldr	s1, [r7, #8]
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	ed97 0a04 	vldr	s0, [r7, #16]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f000 f877 	bl	8001350 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	61da      	str	r2, [r3, #28]
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	ed87 0a02 	vstr	s0, [r7, #8]
 8001298:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 800129a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800129e:	2200      	movs	r2, #0
 80012a0:	eddf 0a05 	vldr	s1, [pc, #20]	; 80012b8 <biquadFilterInitLPF+0x2c>
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ffc0 	bl	8001230 <biquadFilterInit>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	3f3504f3 	.word	0x3f3504f3

080012bc <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	edd7 7a00 	vldr	s15, [r7]
 80012d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80012dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e0:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ea:	edd7 7a00 	vldr	s15, [r7]
 80012ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 6a03 	vldr	s13, [r3, #12]
 80012f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001300:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 7a06 	vldr	s15, [r3, #24]
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	ed93 7a02 	vldr	s14, [r3, #8]
 800131a:	edd7 7a00 	vldr	s15, [r7]
 800131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edd3 6a04 	vldr	s13, [r3, #16]
 8001328:	edd7 7a03 	vldr	s15, [r7, #12]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	ee07 3a90 	vmov	s15, r3
}
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6178      	str	r0, [r7, #20]
 8001358:	ed87 0a04 	vstr	s0, [r7, #16]
 800135c:	60f9      	str	r1, [r7, #12]
 800135e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	ed87 1a00 	vstr	s2, [r7]
 8001368:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 800136a:	edd7 7a04 	vldr	s15, [r7, #16]
 800136e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001528 <biquadFilterUpdate+0x1d8>
 8001372:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	ee07 3a90 	vmov	s15, r3
 800137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001384:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800152c <biquadFilterUpdate+0x1dc>
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8001390:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001394:	f000 fa24 	bl	80017e0 <sin_approx>
 8001398:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 800139c:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013a0:	f000 fac8 	bl	8001934 <cos_approx>
 80013a4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 80013a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80013b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b8:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d04f      	beq.n	8001462 <biquadFilterUpdate+0x112>
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	dc6e      	bgt.n	80014a4 <biquadFilterUpdate+0x154>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <biquadFilterUpdate+0x80>
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d02a      	beq.n	8001424 <biquadFilterUpdate+0xd4>
 80013ce:	e069      	b.n	80014a4 <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 80013d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 80013fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001402:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001414:	edd7 7a08 	vldr	s15, [r7, #32]
 8001418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001422:	e03f      	b.n	80014a4 <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800142a:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 800142c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001430:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001434:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001444:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	edd7 7a08 	vldr	s15, [r7, #32]
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001460:	e020      	b.n	80014a4 <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	6a3a      	ldr	r2, [r7, #32]
 8001466:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8001470:	edd7 7a08 	vldr	s15, [r7, #32]
 8001474:	eef1 7a67 	vneg.f32	s15, s15
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 800147e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001482:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001494:	edd7 7a08 	vldr	s15, [r7, #32]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 80014a2:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 80014a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80014a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b0:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	edd3 6a00 	vldr	s13, [r3]
 80014ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80014be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80014ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80014d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80014e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80014f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	edd3 6a04 	vldr	s13, [r3, #16]
 800150a:	ed97 7a07 	vldr	s14, [r7, #28]
 800150e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	; 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40c90fdb 	.word	0x40c90fdb
 800152c:	358637bd 	.word	0x358637bd

08001530 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	ed87 0a01 	vstr	s0, [r7, #4]
 800153a:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 800153e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001542:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 8001544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001548:	edd7 7a05 	vldr	s15, [r7, #20]
 800154c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001550:	eef0 0a47 	vmov.f32	s1, s14
 8001554:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001558:	f016 fb02 	bl	8017b60 <powf>
 800155c:	eef0 7a40 	vmov.f32	s15, s0
 8001560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001564:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	f016 fc58 	bl	8017e20 <sqrtf>
 8001570:	eeb0 7a40 	vmov.f32	s14, s0
 8001574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157c:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8001580:	edd7 7a04 	vldr	s15, [r7, #16]
 8001584:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001588:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015c8 <pt2FilterGain+0x98>
 800158c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001590:	edd7 7a01 	vldr	s15, [r7, #4]
 8001594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800159c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a0:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 80015a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80015a8:	edd7 7a00 	vldr	s15, [r7]
 80015ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b0:	ed97 7a00 	vldr	s14, [r7]
 80015b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40490fdb 	.word	0x40490fdb

080015cc <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
    filter->k = k;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	609a      	str	r2, [r3, #8]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	ed93 7a01 	vldr	s14, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 7a01 	vldr	s15, [r3, #4]
 8001618:	ed97 6a00 	vldr	s12, [r7]
 800161c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	ed93 7a00 	vldr	s14, [r3]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 6a02 	vldr	s13, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ed93 6a01 	vldr	s12, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee76 7a67 	vsub.f32	s15, s12, s15
 800164a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	ed87 0a01 	vstr	s0, [r7, #4]
 800167a:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <pt3FilterGain+0x94>)
 8001680:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 8001682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001686:	edd7 7a05 	vldr	s15, [r7, #20]
 800168a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800168e:	eef0 0a47 	vmov.f32	s1, s14
 8001692:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001696:	f016 fa63 	bl	8017b60 <powf>
 800169a:	eef0 7a40 	vmov.f32	s15, s0
 800169e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	f016 fbb9 	bl	8017e20 <sqrtf>
 80016ae:	eeb0 7a40 	vmov.f32	s14, s0
 80016b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 80016be:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001708 <pt3FilterGain+0x98>
 80016ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016de:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 80016e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e6:	edd7 7a00 	vldr	s15, [r7]
 80016ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ee:	ed97 7a00 	vldr	s14, [r7]
 80016f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40400000 	.word	0x40400000
 8001708:	40490fdb 	.word	0x40490fdb

0800170c <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	60da      	str	r2, [r3, #12]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	ed93 7a01 	vldr	s14, [r3, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edd3 6a03 	vldr	s13, [r3, #12]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001760:	ed97 6a00 	vldr	s12, [r7]
 8001764:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a02 	vldr	s14, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 6a01 	vldr	s12, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a02 	vldr	s15, [r3, #8]
 800178e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 7a00 	vldr	s14, [r3]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 6a02 	vldr	s12, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
}
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 80017ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f2:	ee17 3a90 	vmov	r3, s15
 80017f6:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f113 0f20 	cmn.w	r3, #32
 80017fe:	db02      	blt.n	8001806 <sin_approx+0x26>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b20      	cmp	r3, #32
 8001804:	dd0a      	ble.n	800181c <sin_approx+0x3c>
 8001806:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001910 <sin_approx+0x130>
 800180a:	e079      	b.n	8001900 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001914 <sin_approx+0x134>
 8001814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001818:	edc7 7a01 	vstr	s15, [r7, #4]
 800181c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001820:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001918 <sin_approx+0x138>
 8001824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	dcee      	bgt.n	800180c <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 800182e:	e007      	b.n	8001840 <sin_approx+0x60>
 8001830:	edd7 7a01 	vldr	s15, [r7, #4]
 8001834:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001914 <sin_approx+0x134>
 8001838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001840:	edd7 7a01 	vldr	s15, [r7, #4]
 8001844:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800191c <sin_approx+0x13c>
 8001848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d4ee      	bmi.n	8001830 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8001852:	edd7 7a01 	vldr	s15, [r7, #4]
 8001856:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001920 <sin_approx+0x140>
 800185a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	dd0c      	ble.n	800187e <sin_approx+0x9e>
 8001864:	edd7 7a01 	vldr	s15, [r7, #4]
 8001868:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001920 <sin_approx+0x140>
 800186c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001870:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001920 <sin_approx+0x140>
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	edc7 7a01 	vstr	s15, [r7, #4]
 800187c:	e014      	b.n	80018a8 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 800187e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001882:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001924 <sin_approx+0x144>
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d50b      	bpl.n	80018a8 <sin_approx+0xc8>
 8001890:	edd7 7a01 	vldr	s15, [r7, #4]
 8001894:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001920 <sin_approx+0x140>
 8001898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800189c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001924 <sin_approx+0x144>
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 80018a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018b0:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80018b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001910 <sin_approx+0x130>
 80018c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80018cc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001928 <sin_approx+0x148>
 80018d0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80018d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800192c <sin_approx+0x14c>
 80018e0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80018e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ec:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001930 <sin_approx+0x150>
 80018f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	00000000 	.word	0x00000000
 8001914:	40c90fdb 	.word	0x40c90fdb
 8001918:	40490fdb 	.word	0x40490fdb
 800191c:	c0490fdb 	.word	0xc0490fdb
 8001920:	3fc90fdb 	.word	0x3fc90fdb
 8001924:	bfc90fdb 	.word	0xbfc90fdb
 8001928:	3941e792 	.word	0x3941e792
 800192c:	3c083097 	.word	0x3c083097
 8001930:	3e2aa815 	.word	0x3e2aa815

08001934 <cos_approx>:

float cos_approx(float x)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 800193e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001942:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001960 <cos_approx+0x2c>
 8001946:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f7ff ff47 	bl	80017e0 <sin_approx>
 8001952:	eef0 7a40 	vmov.f32	s15, s0
}
 8001956:	eeb0 0a67 	vmov.f32	s0, s15
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	3fc90fdb 	.word	0x3fc90fdb

08001964 <acos_approx>:

float acos_approx(float x)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 800196e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001972:	eef0 7ae7 	vabs.f32	s15, s15
 8001976:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 800197a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800197e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	f016 fa49 	bl	8017e20 <sqrtf>
 800198e:	eef0 6a40 	vmov.f32	s13, s0
 8001992:	edd7 7a03 	vldr	s15, [r7, #12]
 8001996:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80019f8 <acos_approx+0x94>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80019fc <acos_approx+0x98>
 80019a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001a00 <acos_approx+0x9c>
 80019b2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a04 <acos_approx+0xa0>
 80019c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 80019ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d506      	bpl.n	80019ea <acos_approx+0x86>
        return M_PIf - result;
 80019dc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a08 <acos_approx+0xa4>
 80019e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e8:	e001      	b.n	80019ee <acos_approx+0x8a>
    else
        return result;
 80019ea:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	bc996e30 	.word	0xbc996e30
 80019fc:	3d981627 	.word	0x3d981627
 8001a00:	3e593484 	.word	0x3e593484
 8001a04:	3fc90da4 	.word	0x3fc90da4
 8001a08:	40490fdb 	.word	0x40490fdb

08001a0c <atan2_approx>:

float atan2_approx(float y, float x)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a16:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001a1a:	edd7 7a00 	vldr	s15, [r7]
 8001a1e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a22:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 8001a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2a:	eef0 7ae7 	vabs.f32	s15, s15
 8001a2e:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	dd01      	ble.n	8001a50 <atan2_approx+0x44>
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	e000      	b.n	8001a52 <atan2_approx+0x46>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 8001a54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	d018      	beq.n	8001a94 <atan2_approx+0x88>
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d502      	bpl.n	8001a82 <atan2_approx+0x76>
 8001a7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a80:	e001      	b.n	8001a86 <atan2_approx+0x7a>
 8001a82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a86:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001a8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a8e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001a92:	e002      	b.n	8001a9a <atan2_approx+0x8e>
    else res = 0.0f;
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 8001a9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001b7c <atan2_approx+0x170>
 8001aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001b80 <atan2_approx+0x174>
 8001aaa:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b84 <atan2_approx+0x178>
 8001aba:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001abe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001b88 <atan2_approx+0x17c>
 8001aca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ace:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001b8c <atan2_approx+0x180>
 8001ada:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ade:	eef1 6a67 	vneg.f32	s13, s15
 8001ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ae6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001b90 <atan2_approx+0x184>
 8001aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aee:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001b94 <atan2_approx+0x188>
 8001af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001af6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001b0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b12:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	dd07      	ble.n	8001b30 <atan2_approx+0x124>
 8001b20:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001b98 <atan2_approx+0x18c>
 8001b24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001b30:	edd7 7a00 	vldr	s15, [r7]
 8001b34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3c:	d507      	bpl.n	8001b4e <atan2_approx+0x142>
 8001b3e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b9c <atan2_approx+0x190>
 8001b42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d505      	bpl.n	8001b68 <atan2_approx+0x15c>
 8001b5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b60:	eef1 7a67 	vneg.f32	s15, s15
 8001b64:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	ee07 3a90 	vmov	s15, r3
}
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	372c      	adds	r7, #44	; 0x2c
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	3d4e0939 	.word	0x3d4e0939
 8001b80:	3e9eb5e3 	.word	0x3e9eb5e3
 8001b84:	3e16fa88 	.word	0x3e16fa88
 8001b88:	3f7ffe45 	.word	0x3f7ffe45
 8001b8c:	34a8dfa7 	.word	0x34a8dfa7
 8001b90:	3f24fb99 	.word	0x3f24fb99
 8001b94:	3e16a269 	.word	0x3e16a269
 8001b98:	3fc90fdb 	.word	0x3fc90fdb
 8001b9c:	40490fdb 	.word	0x40490fdb

08001ba0 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e054      	b.n	8001c5a <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <rotateVector+0xd0>)
 8001bb6:	fb83 3102 	smull	r3, r1, r3, r2
 8001bba:	17d3      	asrs	r3, r2, #31
 8001bbc:	1ac9      	subs	r1, r1, r3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	440b      	add	r3, r1
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <rotateVector+0xd0>)
 8001bce:	fb83 3102 	smull	r3, r1, r3, r2
 8001bd2:	17d3      	asrs	r3, r2, #31
 8001bd4:	1ac9      	subs	r1, r1, r3
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	440b      	add	r3, r1
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	edd3 6a00 	vldr	s13, [r3]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0c:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	ed93 7a00 	vldr	s14, [r3]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	dda7      	ble.n	8001bb0 <rotateVector+0x10>
    }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	55555556 	.word	0x55555556

08001c74 <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eeb0 0a67 	vmov.f32	s0, s15
 8001c88:	f7ff fe54 	bl	8001934 <cos_approx>
 8001c8c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	f7ff fda1 	bl	80017e0 <sin_approx>
 8001c9e:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cac:	f7ff fe42 	bl	8001934 <cos_approx>
 8001cb0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cba:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbe:	f7ff fd8f 	bl	80017e0 <sin_approx>
 8001cc2:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	f7ff fe30 	bl	8001934 <cos_approx>
 8001cd4:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	f7ff fd7d 	bl	80017e0 <sin_approx>
 8001ce6:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 8001cea:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 8001cfa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 8001d0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 8001d1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d26:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 8001d2a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 8001d3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d40:	eeb1 7a67 	vneg.f32	s14, s15
 8001d44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6a3a      	ldr	r2, [r7, #32]
 8001d56:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 8001d58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 8001d72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d76:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 8001d8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d90:	eeb1 7a67 	vneg.f32	s14, s15
 8001d94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 8001da2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001da6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	ed97 7a02 	vldr	s14, [r7, #8]
 8001db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 8001dbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 8001dd6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e06:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001e1c <degreesToRadians+0x2c>
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	3c8efa35 	.word	0x3c8efa35

08001e20 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <gyroSetTargetLooptime+0x90>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d028      	beq.n	8001e8a <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e44:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001ea8 <gyroSetTargetLooptime+0x88>
 8001e48:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e50:	ee17 2a90 	vmov	r2, s15
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e56:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <gyroSetTargetLooptime+0x90>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e64:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001ea8 <gyroSetTargetLooptime+0x88>
 8001e68:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001e78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e80:	ee17 2a90 	vmov	r2, s15
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e86:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8001e88:	e005      	b.n	8001e96 <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <gyroSetTargetLooptime+0x94>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	605a      	str	r2, [r3, #4]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	412e8480 	.word	0x412e8480
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	20000614 	.word	0x20000614

08001eb8 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 8001ec8:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ecc:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 8001ece:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ed2:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	89ba      	ldrh	r2, [r7, #12]
 8001ee0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 8001ef2:	b480      	push	{r7}
 8001ef4:	b085      	sub	sp, #20
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e009      	b.n	8001f14 <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	332a      	adds	r3, #42	; 0x2a
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	ddf2      	ble.n	8001f00 <gyroInitSlewLimiter+0xe>
    }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ffde 	bl	8001ef2 <gyroInitSlewLimiter>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 ffe0 	bl	8005f28 <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 ff93 	bl	8005ea0 <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff93 	bl	8001eb8 <gyroSetSampleRate>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffba 	bl	8001f28 <gyroInitSensorFilters>
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	80fb      	strh	r3, [r7, #6]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <calculateNyquistAdjustedNotchHz+0x44>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <calculateNyquistAdjustedNotchHz+0x48>)
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d208      	bcs.n	8001ff2 <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d902      	bls.n	8001fee <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	80fb      	strh	r3, [r7, #6]
 8001fec:	e001      	b.n	8001ff2 <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000614 	.word	0x20000614
 8002004:	0007a120 	.word	0x0007a120

08002008 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <gyroInitLowpassFilterLpf+0x22>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d005      	beq.n	8002034 <gyroInitLowpassFilterLpf+0x2c>
 8002028:	e009      	b.n	800203e <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <gyroInitLowpassFilterLpf+0x1b8>)
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <gyroInitLowpassFilterLpf+0x1bc>)
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002032:	e006      	b.n	8002042 <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <gyroInitLowpassFilterLpf+0x1c0>)
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8002038:	4b64      	ldr	r3, [pc, #400]	; (80021cc <gyroInitLowpassFilterLpf+0x1c4>)
 800203a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800203c:	e001      	b.n	8002042 <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e0b9      	b.n	80021b6 <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8002048:	4a61      	ldr	r2, [pc, #388]	; (80021d0 <gyroInitLowpassFilterLpf+0x1c8>)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80021d4 <gyroInitLowpassFilterLpf+0x1cc>
 8002060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002064:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002072:	edd7 0a05 	vldr	s1, [r7, #20]
 8002076:	eeb0 0a67 	vmov.f32	s0, s15
 800207a:	f7ff f879 	bl	8001170 <pt1FilterGain>
 800207e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002084:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <gyroInitLowpassFilterLpf+0x1d0>)
 8002086:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8002088:	88fb      	ldrh	r3, [r7, #6]
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 808e 	beq.w	80021ac <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b03      	cmp	r3, #3
 8002094:	f200 808d 	bhi.w	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
 8002098:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <gyroInitLowpassFilterLpf+0x98>)
 800209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209e:	bf00      	nop
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020eb 	.word	0x080020eb
 80020a8:	08002139 	.word	0x08002139
 80020ac:	08002173 	.word	0x08002173
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 80020b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b2:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <gyroInitLowpassFilterLpf+0x1d4>)
 80020b4:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ba:	e00f      	b.n	80020dc <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 80020bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	461a      	mov	r2, r3
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	4413      	add	r3, r2
 80020cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff f875 	bl	80011c0 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	3301      	adds	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	2b02      	cmp	r3, #2
 80020e0:	ddec      	ble.n	80020bc <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80020e8:	e063      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d35e      	bcc.n	80021b0 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <gyroInitLowpassFilterLpf+0x1d8>)
 80020f6:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
 80020fc:	e015      	b.n	800212a <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	461a      	mov	r2, r3
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	4413      	add	r3, r2
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	ee07 2a90 	vmov	s15, r2
 8002114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f8b4 	bl	800128c <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	2b02      	cmp	r3, #2
 800212e:	dde6      	ble.n	80020fe <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8002136:	e03b      	b.n	80021b0 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <gyroInitLowpassFilterLpf+0x1dc>)
 800213c:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
 8002142:	e00f      	b.n	8002164 <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	461a      	mov	r2, r3
 8002150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002152:	4413      	add	r3, r2
 8002154:	ed97 0a04 	vldr	s0, [r7, #16]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fa37 	bl	80015cc <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	3301      	adds	r3, #1
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	2b02      	cmp	r3, #2
 8002168:	ddec      	ble.n	8002144 <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 800216a:	2301      	movs	r3, #1
 800216c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8002170:	e01f      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <gyroInitLowpassFilterLpf+0x1e0>)
 8002176:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	e00f      	b.n	800219e <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	461a      	mov	r2, r3
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	4413      	add	r3, r2
 800218e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff faba 	bl	800170c <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	ddec      	ble.n	800217e <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 80021a4:	2301      	movs	r3, #1
 80021a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 80021aa:	e002      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 80021ac:	bf00      	nop
 80021ae:	e000      	b.n	80021b2 <gyroInitLowpassFilterLpf+0x1aa>
            break;
 80021b0:	bf00      	nop
    return ret;
 80021b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3738      	adds	r7, #56	; 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000079c 	.word	0x2000079c
 80021c4:	200007a0 	.word	0x200007a0
 80021c8:	20000818 	.word	0x20000818
 80021cc:	2000081c 	.word	0x2000081c
 80021d0:	0007a120 	.word	0x0007a120
 80021d4:	358637bd 	.word	0x358637bd
 80021d8:	08001151 	.word	0x08001151
 80021dc:	080011e7 	.word	0x080011e7
 80021e0:	080012bd 	.word	0x080012bd
 80021e4:	080015fb 	.word	0x080015fb
 80021e8:	08001743 	.word	0x08001743

080021ec <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	80fb      	strh	r3, [r7, #6]
 80021f8:	4613      	mov	r3, r2
 80021fa:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <gyroInitFilterNotch1+0xb0>)
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <gyroInitFilterNotch1+0xb4>)
 8002200:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8002204:	88ba      	ldrh	r2, [r7, #4]
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fed6 	bl	8001fbc <calculateNyquistAdjustedNotchHz>
 8002210:	4603      	mov	r3, r0
 8002212:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d03c      	beq.n	8002294 <gyroInitFilterNotch1+0xa8>
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d039      	beq.n	8002294 <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <gyroInitFilterNotch1+0xb0>)
 8002222:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <gyroInitFilterNotch1+0xb8>)
 8002224:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8002228:	88fb      	ldrh	r3, [r7, #6]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	88bb      	ldrh	r3, [r7, #4]
 8002234:	ee07 3a10 	vmov	s14, r3
 8002238:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800223c:	eef0 0a47 	vmov.f32	s1, s14
 8002240:	eeb0 0a67 	vmov.f32	s0, s15
 8002244:	f7fe ff62 	bl	800110c <filterGetNotchQ>
 8002248:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e01d      	b.n	800228e <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <gyroInitFilterNotch1+0xb0>)
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	ee07 2a90 	vmov	s15, r2
 800226c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <gyroInitFilterNotch1+0xb0>)
 8002272:	6851      	ldr	r1, [r2, #4]
 8002274:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002278:	2201      	movs	r2, #1
 800227a:	edd7 0a02 	vldr	s1, [r7, #8]
 800227e:	eeb0 0a67 	vmov.f32	s0, s15
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe ffd4 	bl	8001230 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b02      	cmp	r3, #2
 8002292:	ddde      	ble.n	8002252 <gyroInitFilterNotch1+0x66>
        }
    }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000614 	.word	0x20000614
 80022a0:	08001151 	.word	0x08001151
 80022a4:	080012bd 	.word	0x080012bd

080022a8 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	460a      	mov	r2, r1
 80022b2:	80fb      	strh	r3, [r7, #6]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 80022ba:	4a28      	ldr	r2, [pc, #160]	; (800235c <gyroInitFilterNotch2+0xb4>)
 80022bc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 80022c0:	88ba      	ldrh	r2, [r7, #4]
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fe78 	bl	8001fbc <calculateNyquistAdjustedNotchHz>
 80022cc:	4603      	mov	r3, r0
 80022ce:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03b      	beq.n	800234e <gyroInitFilterNotch2+0xa6>
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d038      	beq.n	800234e <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <gyroInitFilterNotch2+0xb8>)
 80022e0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	ee07 3a10 	vmov	s14, r3
 80022f4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80022f8:	eef0 0a47 	vmov.f32	s1, s14
 80022fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002300:	f7fe ff04 	bl	800110c <filterGetNotchQ>
 8002304:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e01c      	b.n	8002348 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 800231e:	4413      	add	r3, r2
 8002320:	88fa      	ldrh	r2, [r7, #6]
 8002322:	ee07 2a90 	vmov	s15, r2
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <gyroInitFilterNotch2+0xb0>)
 800232c:	6851      	ldr	r1, [r2, #4]
 800232e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002332:	2201      	movs	r2, #1
 8002334:	edd7 0a02 	vldr	s1, [r7, #8]
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ff77 	bl	8001230 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3301      	adds	r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b02      	cmp	r3, #2
 800234c:	dddf      	ble.n	800230e <gyroInitFilterNotch2+0x66>
        }
    }
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000614 	.word	0x20000614
 800235c:	08001151 	.word	0x08001151
 8002360:	080012bd 	.word	0x080012bd

08002364 <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <gyroInitFilters+0x44>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002370:	2100      	movs	r1, #0
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff fe48 	bl	8002008 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <gyroInitFilters+0x44>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002380:	2100      	movs	r1, #0
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff fe40 	bl	8002008 <gyroInitLowpassFilterLpf>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <gyroInitFilters+0x44>)
 800238e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff ff29 	bl	80021ec <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f7ff ff83 	bl	80022a8 <gyroInitFilterNotch2>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000614 	.word	0x20000614

080023ac <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <gyroInit+0xb0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <gyroInit+0xb0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 80023c6:	4b25      	ldr	r3, [pc, #148]	; (800245c <gyroInit+0xb0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <gyroInit+0xb0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <gyroInit+0xb0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 80023de:	4a1f      	ldr	r2, [pc, #124]	; (800245c <gyroInit+0xb0>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <gyroInit+0xb0>)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	; (800245c <gyroInit+0xb0>)
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <gyroInit+0xb4>)
 80023ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 80023f2:	4b1a      	ldr	r3, [pc, #104]	; (800245c <gyroInit+0xb0>)
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <gyroInit+0xb8>)
 80023f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 80023fa:	481b      	ldr	r0, [pc, #108]	; (8002468 <gyroInit+0xbc>)
 80023fc:	f7ff fd9f 	bl	8001f3e <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <gyroInit+0xb0>)
 8002402:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <gyroInit+0xb0>)
 8002408:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <gyroInit+0xb0>)
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <gyroInit+0xbc>)
 800240e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <gyroInit+0xb0>)
 8002414:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00f      	beq.n	800243c <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <gyroInit+0xb0>)
 800241e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002422:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <gyroInit+0xb0>)
 8002428:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <gyroInit+0xb0>)
 800242c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002430:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <gyroInit+0xb0>)
 8002436:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 800243a:	e006      	b.n	800244a <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <gyroInit+0xb0>)
 800243e:	2200      	movs	r2, #0
 8002440:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <gyroInit+0xb0>)
 8002444:	2200      	movs	r2, #0
 8002446:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff fce8 	bl	8001e20 <gyroSetTargetLooptime>
	gyroInitFilters();
 8002450:	f7ff ff88 	bl	8002364 <gyroInitFilters>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000614 	.word	0x20000614
 8002460:	200009b0 	.word	0x200009b0
 8002464:	200009c0 	.word	0x200009c0
 8002468:	20000650 	.word	0x20000650

0800246c <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4610      	mov	r0, r2
 800247c:	4798      	blx	r3
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02f      	beq.n	80024e4 <gyroUpdateSensor+0x78>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADC[X] - gyroSensor->gyroDev.gyroZero[X];
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADC[Y] - gyroSensor->gyroDev.gyroZero[Y];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80024ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADC[Z] - gyroSensor->gyroDev.gyroZero[Z];
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f003 fd71 	bl	8005fc4 <alignSensorViaRotation>
 80024e2:	e000      	b.n	80024e6 <gyroUpdateSensor+0x7a>
        return;
 80024e4:	bf00      	nop
}
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <gyroFilter>:


static void gyroFilter(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	e074      	b.n	80025e2 <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <gyroFilter+0x10c>)
 8002500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <gyroFilter+0x10c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	330a      	adds	r3, #10
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	3304      	adds	r3, #4
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	e020      	b.n	800255c <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <gyroFilter+0x10c>)
 800251c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 8002524:	4a34      	ldr	r2, [pc, #208]	; (80025f8 <gyroFilter+0x10c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	330a      	adds	r3, #10
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3304      	adds	r3, #4
 8002530:	edd3 6a00 	vldr	s13, [r3]
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <gyroFilter+0x10c>)
 8002536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002546:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 800254a:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <gyroFilter+0x10c>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	330a      	adds	r3, #10
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 800255c:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <gyroFilter+0x10c>)
 800255e:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <gyroFilter+0x10c>)
 8002572:	4413      	add	r3, r2
 8002574:	3304      	adds	r3, #4
 8002576:	ed97 0a00 	vldr	s0, [r7]
 800257a:	4618      	mov	r0, r3
 800257c:	4788      	blx	r1
 800257e:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <gyroFilter+0x10c>)
 8002584:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <gyroFilter+0x10c>)
 8002598:	4413      	add	r3, r2
 800259a:	ed97 0a00 	vldr	s0, [r7]
 800259e:	4618      	mov	r0, r3
 80025a0:	4788      	blx	r1
 80025a2:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <gyroFilter+0x10c>)
 80025a8:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025ba:	4a0f      	ldr	r2, [pc, #60]	; (80025f8 <gyroFilter+0x10c>)
 80025bc:	4413      	add	r3, r2
 80025be:	3304      	adds	r3, #4
 80025c0:	ed97 0a00 	vldr	s0, [r7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	4788      	blx	r1
 80025c8:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <gyroFilter+0x10c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3306      	adds	r3, #6
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3301      	adds	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	dd87      	ble.n	80024f8 <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <gyroFilter+0x10c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000614 	.word	0x20000614

080025fc <gyroAccumulateMeasurements>:

static void gyroAccumulateMeasurements(void) {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	e038      	b.n	800267a <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 8002608:	4a23      	ldr	r2, [pc, #140]	; (8002698 <gyroAccumulateMeasurements+0x9c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	4a21      	ldr	r2, [pc, #132]	; (800269c <gyroAccumulateMeasurements+0xa0>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	edd3 6a00 	vldr	s13, [r3]
 8002620:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <gyroAccumulateMeasurements+0xa4>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3306      	adds	r3, #6
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3304      	adds	r3, #4
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002634:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002638:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <gyroAccumulateMeasurements+0xa4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	ee07 3a90 	vmov	s15, r3
 8002644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <gyroAccumulateMeasurements+0x9c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 800265c:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <gyroAccumulateMeasurements+0xa4>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3306      	adds	r3, #6
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	490c      	ldr	r1, [pc, #48]	; (800269c <gyroAccumulateMeasurements+0xa0>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b02      	cmp	r3, #2
 800267e:	ddc3      	ble.n	8002608 <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <gyroAccumulateMeasurements+0xa8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a07      	ldr	r2, [pc, #28]	; (80026a4 <gyroAccumulateMeasurements+0xa8>)
 8002688:	6013      	str	r3, [r2, #0]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000994 	.word	0x20000994
 800269c:	200009a0 	.word	0x200009a0
 80026a0:	20000614 	.word	0x20000614
 80026a4:	200009ac 	.word	0x200009ac

080026a8 <gyroUpdate>:

void gyroUpdate(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 80026ac:	4842      	ldr	r0, [pc, #264]	; (80027b8 <gyroUpdate+0x110>)
 80026ae:	f7ff fedd 	bl	800246c <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 80026b2:	4b42      	ldr	r3, [pc, #264]	; (80027bc <gyroUpdate+0x114>)
 80026b4:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80026b8:	4b40      	ldr	r3, [pc, #256]	; (80027bc <gyroUpdate+0x114>)
 80026ba:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80026be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c2:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <gyroUpdate+0x114>)
 80026c4:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <gyroUpdate+0x114>)
 80026ca:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <gyroUpdate+0x114>)
 80026d0:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80026d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <gyroUpdate+0x114>)
 80026da:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 80026de:	4b37      	ldr	r3, [pc, #220]	; (80027bc <gyroUpdate+0x114>)
 80026e0:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <gyroUpdate+0x114>)
 80026e6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80026ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <gyroUpdate+0x114>)
 80026f0:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <gyroUpdate+0x114>)
 80026f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02d      	beq.n	800275a <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <gyroUpdate+0x114>)
 8002700:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <gyroUpdate+0x114>)
 8002706:	edd2 7a04 	vldr	s15, [r2, #16]
 800270a:	eeb0 0a67 	vmov.f32	s0, s15
 800270e:	482c      	ldr	r0, [pc, #176]	; (80027c0 <gyroUpdate+0x118>)
 8002710:	4798      	blx	r3
 8002712:	eef0 7a40 	vmov.f32	s15, s0
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <gyroUpdate+0x114>)
 8002718:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <gyroUpdate+0x114>)
 800271e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002722:	4a26      	ldr	r2, [pc, #152]	; (80027bc <gyroUpdate+0x114>)
 8002724:	edd2 7a05 	vldr	s15, [r2, #20]
 8002728:	eeb0 0a67 	vmov.f32	s0, s15
 800272c:	4825      	ldr	r0, [pc, #148]	; (80027c4 <gyroUpdate+0x11c>)
 800272e:	4798      	blx	r3
 8002730:	eef0 7a40 	vmov.f32	s15, s0
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <gyroUpdate+0x114>)
 8002736:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <gyroUpdate+0x114>)
 800273c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <gyroUpdate+0x114>)
 8002742:	edd2 7a06 	vldr	s15, [r2, #24]
 8002746:	eeb0 0a67 	vmov.f32	s0, s15
 800274a:	481f      	ldr	r0, [pc, #124]	; (80027c8 <gyroUpdate+0x120>)
 800274c:	4798      	blx	r3
 800274e:	eef0 7a40 	vmov.f32	s15, s0
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <gyroUpdate+0x114>)
 8002754:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002758:	e028      	b.n	80027ac <gyroUpdate+0x104>
    } else {
        // using simple averaging for downsampling
        gyro.sampleSum[X] += gyro.gyroADC[X];
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <gyroUpdate+0x114>)
 800275c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002760:	4b16      	ldr	r3, [pc, #88]	; (80027bc <gyroUpdate+0x114>)
 8002762:	edd3 7a04 	vldr	s15, [r3, #16]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <gyroUpdate+0x114>)
 800276c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <gyroUpdate+0x114>)
 8002772:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <gyroUpdate+0x114>)
 8002778:	edd3 7a05 	vldr	s15, [r3, #20]
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <gyroUpdate+0x114>)
 8002782:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <gyroUpdate+0x114>)
 8002788:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <gyroUpdate+0x114>)
 800278e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <gyroUpdate+0x114>)
 8002798:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <gyroUpdate+0x114>)
 800279e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <gyroUpdate+0x114>)
 80027a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    gyroFilter();
 80027ac:	f7ff fe9e 	bl	80024ec <gyroFilter>
	gyroAccumulateMeasurements();
 80027b0:	f7ff ff24 	bl	80025fc <gyroAccumulateMeasurements>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000650 	.word	0x20000650
 80027bc:	20000614 	.word	0x20000614
 80027c0:	2000081c 	.word	0x2000081c
 80027c4:	20000844 	.word	0x20000844
 80027c8:	2000086c 	.word	0x2000086c

080027cc <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <gyroGetAccumulationAverage+0x9c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02e      	beq.n	800283a <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <gyroGetAccumulationAverage+0xa0>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <gyroGetAccumulationAverage+0x9c>)
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e01c      	b.n	800282a <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <gyroGetAccumulationAverage+0xa4>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edd3 6a00 	vldr	s13, [r3]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002812:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 8002816:	4a16      	ldr	r2, [pc, #88]	; (8002870 <gyroGetAccumulationAverage+0xa4>)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	2b02      	cmp	r3, #2
 800282e:	dddf      	ble.n	80027f0 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <gyroGetAccumulationAverage+0x9c>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
        return true;
 8002836:	2301      	movs	r3, #1
 8002838:	e010      	b.n	800285c <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	e009      	b.n	8002854 <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	3301      	adds	r3, #1
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	2b02      	cmp	r3, #2
 8002858:	ddf2      	ble.n	8002840 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 800285a:	2300      	movs	r3, #0
    }
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	200009ac 	.word	0x200009ac
 800286c:	20000614 	.word	0x20000614
 8002870:	20000994 	.word	0x20000994

08002874 <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
    return false;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
    return rMat[2][2];
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <getCosTiltAngle+0x18>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	ee07 3a90 	vmov	s15, r3
}
 8002890:	eeb0 0a67 	vmov.f32	s0, s15
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	200009e0 	.word	0x200009e0

080028a0 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	ed93 7a00 	vldr	s14, [r3]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	ed93 7a00 	vldr	s14, [r3]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	ed93 7a00 	vldr	s14, [r3]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edd3 7a02 	vldr	s15, [r3, #8]
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	ed93 7a01 	vldr	s14, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	edd3 7a01 	vldr	s15, [r3, #4]
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	ed93 7a01 	vldr	s14, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	edd3 7a02 	vldr	s15, [r3, #8]
 8002924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	ed93 7a01 	vldr	s14, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edd3 7a03 	vldr	s15, [r3, #12]
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	ed93 7a02 	vldr	s14, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edd3 7a03 	vldr	s15, [r3, #12]
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	ed93 7a03 	vldr	s14, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	edd3 7a03 	vldr	s15, [r3, #12]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 8002998:	4946      	ldr	r1, [pc, #280]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 800299a:	4847      	ldr	r0, [pc, #284]	; (8002ab8 <imuComputeRotationMatrix+0x124>)
 800299c:	f7ff ff80 	bl	80028a0 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 80029a0:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80029a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029b2:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <imuComputeRotationMatrix+0x128>)
 80029c2:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029da:	4b38      	ldr	r3, [pc, #224]	; (8002abc <imuComputeRotationMatrix+0x128>)
 80029dc:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 80029e0:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <imuComputeRotationMatrix+0x128>)
 80029f6:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 80029fa:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 80029fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a02:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a10:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a26:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a28:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a36:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a3c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a50:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a56:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a64:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a6a:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a70:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002a84:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a8a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <imuComputeRotationMatrix+0x120>)
 8002a9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002aa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <imuComputeRotationMatrix+0x128>)
 8002aaa:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	200009e0 	.word	0x200009e0

08002ac0 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 8002aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ace:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002af0 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ada:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ade:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40490fdb 	.word	0x40490fdb

08002af4 <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b08:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002b28 <calculateThrottleAngleScale+0x34>
 8002b0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b10:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b2c <calculateThrottleAngleScale+0x38>
 8002b14:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b18:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	44610000 	.word	0x44610000
 8002b2c:	440f3d4c 	.word	0x440f3d4c

08002b30 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	460a      	mov	r2, r1
 8002b3a:	80fb      	strh	r3, [r7, #6]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <imuConfigure+0x70>)
 8002b42:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8002b46:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <imuConfigure+0x70>)
 8002b4a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002b4e:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 8002b50:	2019      	movs	r0, #25
 8002b52:	f7ff f94d 	bl	8001df0 <degreesToRadians>
 8002b56:	eef0 7a40 	vmov.f32	s15, s0
 8002b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5e:	f7fe fee9 	bl	8001934 <cos_approx>
 8002b62:	eef0 7a40 	vmov.f32	s15, s0
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <imuConfigure+0x74>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 8002b6c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002b70:	f7ff ffa6 	bl	8002ac0 <calculateAccZLowPassFilterRCTimeConstant>
 8002b74:	eef0 7a40 	vmov.f32	s15, s0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <imuConfigure+0x78>)
 8002b7a:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ffb7 	bl	8002af4 <calculateThrottleAngleScale>
 8002b86:	eef0 7a40 	vmov.f32	s15, s0
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <imuConfigure+0x7c>)
 8002b8c:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 8002b90:	797b      	ldrb	r3, [r7, #5]
 8002b92:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <imuConfigure+0x80>)
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200009d8 	.word	0x200009d8
 8002ba4:	20000a1c 	.word	0x20000a1c
 8002ba8:	20000a18 	.word	0x20000a18
 8002bac:	20000a10 	.word	0x20000a10
 8002bb0:	20000a14 	.word	0x20000a14

08002bb4 <imuInit>:

void imuInit(void) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 8002bb8:	210a      	movs	r1, #10
 8002bba:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002bbe:	f7ff ffb7 	bl	8002b30 <imuConfigure>
    canUseGPSHeading = false;
 8002bc2:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <imuInit+0x1c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 8002bc8:	f7ff fee4 	bl	8002994 <imuComputeRotationMatrix>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000001 	.word	0x20000001

08002bd4 <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e012      	b.n	8002c0e <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 8002bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c04:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	dde9      	ble.n	8002be8 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <imuIsAccelerometerHealthy+0x94>)
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <imuIsAccelerometerHealthy+0x94>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 8002c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c34:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002c6c <imuIsAccelerometerHealthy+0x98>
 8002c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	dd0a      	ble.n	8002c58 <imuIsAccelerometerHealthy+0x84>
 8002c42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c46:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002c70 <imuIsAccelerometerHealthy+0x9c>
 8002c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d501      	bpl.n	8002c58 <imuIsAccelerometerHealthy+0x84>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <imuIsAccelerometerHealthy+0x86>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	200003b0 	.word	0x200003b0
 8002c6c:	3f4f5c29 	.word	0x3f4f5c29
 8002c70:	3f9ae148 	.word	0x3f9ae148

08002c74 <invSqrt>:

static float invSqrt(float x)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 8002c7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c82:	f015 f8cd 	bl	8017e20 <sqrtf>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c92:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c96:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	ed2d 8b02 	vpush	{d8}
 8002ca6:	b09e      	sub	sp, #120	; 0x78
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002cae:	edc7 0a08 	vstr	s1, [r7, #32]
 8002cb2:	ed87 1a07 	vstr	s2, [r7, #28]
 8002cb6:	edc7 1a06 	vstr	s3, [r7, #24]
 8002cba:	4603      	mov	r3, r0
 8002cbc:	ed87 2a04 	vstr	s4, [r7, #16]
 8002cc0:	edc7 2a03 	vstr	s5, [r7, #12]
 8002cc4:	ed87 3a02 	vstr	s6, [r7, #8]
 8002cc8:	edc7 3a01 	vstr	s7, [r7, #4]
 8002ccc:	ed87 4a00 	vstr	s8, [r7]
 8002cd0:	75fb      	strb	r3, [r7, #23]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	75bb      	strb	r3, [r7, #22]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 8002cda:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ce2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ce6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfe:	f015 f88f 	bl	8017e20 <sqrtf>
 8002d02:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	673b      	str	r3, [r7, #112]	; 0x70
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 8002d18:	7d7b      	ldrb	r3, [r7, #21]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d060      	beq.n	8002de0 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 8002d1e:	e007      	b.n	8002d30 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 8002d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d24:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002d48 <imuMahonyAHRSupdate+0xa8>
 8002d28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d2c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 8002d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d34:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8002d44 <imuMahonyAHRSupdate+0xa4>
 8002d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d40:	dcee      	bgt.n	8002d20 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 8002d42:	e00d      	b.n	8002d60 <imuMahonyAHRSupdate+0xc0>
 8002d44:	40490fdb 	.word	0x40490fdb
 8002d48:	40c90fdb 	.word	0x40c90fdb
 8002d4c:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 8002d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d54:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002d48 <imuMahonyAHRSupdate+0xa8>
 8002d58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d5c:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 8002d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d64:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002d4c <imuMahonyAHRSupdate+0xac>
 8002d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	d4ee      	bmi.n	8002d50 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 8002d72:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d76:	f7fe fd33 	bl	80017e0 <sin_approx>
 8002d7a:	eef0 7a40 	vmov.f32	s15, s0
 8002d7e:	eeb1 7a67 	vneg.f32	s14, s15
 8002d82:	4bdb      	ldr	r3, [pc, #876]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002d8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d90:	f7fe fdd0 	bl	8001934 <cos_approx>
 8002d94:	eeb0 7a40 	vmov.f32	s14, s0
 8002d98:	4bd5      	ldr	r3, [pc, #852]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002d9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8002da6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 8002daa:	4bd1      	ldr	r3, [pc, #836]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002dac:	edd3 7a06 	vldr	s15, [r3, #24]
 8002db0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 8002dbc:	4bcc      	ldr	r3, [pc, #816]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002dbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dc2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dca:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 8002dce:	4bc8      	ldr	r3, [pc, #800]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002dd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dd4:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 8002de0:	4bc4      	ldr	r3, [pc, #784]	; (80030f4 <imuMahonyAHRSupdate+0x454>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 8002de6:	4bc3      	ldr	r3, [pc, #780]	; (80030f4 <imuMahonyAHRSupdate+0x454>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 8002dec:	4bc1      	ldr	r3, [pc, #772]	; (80030f4 <imuMahonyAHRSupdate+0x454>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 8002df2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002df6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002dfa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002dfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e06:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 8002e16:	7dbb      	ldrb	r3, [r7, #22]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 809f 	beq.w	8002f5c <imuMahonyAHRSupdate+0x2bc>
 8002e1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e22:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80030f8 <imuMahonyAHRSupdate+0x458>
 8002e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	f340 8095 	ble.w	8002f5c <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 8002e32:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002e36:	f7ff ff1d 	bl	8002c74 <invSqrt>
 8002e3a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 8002e3e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002e42:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 8002e4e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002e52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 8002e5e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002e62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 8002e6e:	4ba0      	ldr	r3, [pc, #640]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002e70:	ed93 7a00 	vldr	s14, [r3]
 8002e74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e7c:	4b9c      	ldr	r3, [pc, #624]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002e7e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e82:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e8e:	4b98      	ldr	r3, [pc, #608]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002e90:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e94:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 8002ea4:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002ea6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002eaa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb2:	4b8f      	ldr	r3, [pc, #572]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002eb4:	edd3 6a04 	vldr	s13, [r3, #16]
 8002eb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ec4:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002ec6:	edd3 6a05 	vldr	s13, [r3, #20]
 8002eca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ece:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 8002eda:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002ede:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ee2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002ee6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	f014 ff95 	bl	8017e20 <sqrtf>
 8002ef6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 8002efa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002efe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	eef1 7a67 	vneg.f32	s15, s15
 8002f0a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 8002f0e:	4b78      	ldr	r3, [pc, #480]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002f10:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f24:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 8002f28:	4b71      	ldr	r3, [pc, #452]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002f2a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002f2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 8002f42:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002f44:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f48:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f50:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f58:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 8002f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f60:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d068      	beq.n	8003058 <imuMahonyAHRSupdate+0x3b8>
 8002f86:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002f8a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80030f8 <imuMahonyAHRSupdate+0x458>
 8002f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	dd5f      	ble.n	8003058 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 8002f98:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002f9c:	f7ff fe6a 	bl	8002c74 <invSqrt>
 8002fa0:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 8002fa4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fa8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb0:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 8002fb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fb8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc0:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 8002fc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fc8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd0:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8002fd4:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002fd6:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8002fe4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 8003000:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8003002:	ed93 7a06 	vldr	s14, [r3, #24]
 8003006:	edd7 7a02 	vldr	s15, [r7, #8]
 800300a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300e:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 8003010:	edd3 6a08 	vldr	s13, [r3, #32]
 8003014:	edd7 7a04 	vldr	s15, [r7, #16]
 8003018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003020:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8003024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003028:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 800302e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003032:	edd7 7a04 	vldr	s15, [r7, #16]
 8003036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <imuMahonyAHRSupdate+0x450>)
 800303c:	edd3 6a06 	vldr	s13, [r3, #24]
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <imuMahonyAHRSupdate+0x45c>)
 800305a:	edd3 7a00 	vldr	s15, [r3]
 800305e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	dd53      	ble.n	8003110 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8003068:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800306c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003100 <imuMahonyAHRSupdate+0x460>
 8003070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	d556      	bpl.n	8003128 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <imuMahonyAHRSupdate+0x45c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 8003080:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003084:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <imuMahonyAHRSupdate+0x464>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <imuMahonyAHRSupdate+0x464>)
 80030a0:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 80030a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030a8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <imuMahonyAHRSupdate+0x468>)
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <imuMahonyAHRSupdate+0x468>)
 80030c4:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 80030c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80030cc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80030d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <imuMahonyAHRSupdate+0x46c>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <imuMahonyAHRSupdate+0x46c>)
 80030e8:	edc3 7a00 	vstr	s15, [r3]
 80030ec:	e01c      	b.n	8003128 <imuMahonyAHRSupdate+0x488>
 80030ee:	bf00      	nop
 80030f0:	200009e0 	.word	0x200009e0
 80030f4:	20000a40 	.word	0x20000a40
 80030f8:	3c23d70a 	.word	0x3c23d70a
 80030fc:	200009d8 	.word	0x200009d8
 8003100:	3eb2b8c2 	.word	0x3eb2b8c2
 8003104:	20000a20 	.word	0x20000a20
 8003108:	20000a24 	.word	0x20000a24
 800310c:	20000a28 	.word	0x20000a28
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 8003110:	4ba3      	ldr	r3, [pc, #652]	; (80033a0 <imuMahonyAHRSupdate+0x700>)
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 8003118:	4ba2      	ldr	r3, [pc, #648]	; (80033a4 <imuMahonyAHRSupdate+0x704>)
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 8003120:	4ba1      	ldr	r3, [pc, #644]	; (80033a8 <imuMahonyAHRSupdate+0x708>)
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 8003128:	ed97 7a00 	vldr	s14, [r7]
 800312c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003134:	4b9a      	ldr	r3, [pc, #616]	; (80033a0 <imuMahonyAHRSupdate+0x700>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003146:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 800314a:	ed97 7a00 	vldr	s14, [r7]
 800314e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003156:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <imuMahonyAHRSupdate+0x704>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	ed97 7a07 	vldr	s14, [r7, #28]
 8003164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003168:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 800316c:	ed97 7a00 	vldr	s14, [r7]
 8003170:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8003174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003178:	4b8b      	ldr	r3, [pc, #556]	; (80033a8 <imuMahonyAHRSupdate+0x708>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003182:	ed97 7a06 	vldr	s14, [r7, #24]
 8003186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 800318e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003192:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319a:	ed97 7a08 	vldr	s14, [r7, #32]
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 80031a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80031b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 80031be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 80031d6:	4b75      	ldr	r3, [pc, #468]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 80031dc:	4b73      	ldr	r3, [pc, #460]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 80031e2:	4b72      	ldr	r3, [pc, #456]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 80031ee:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80031f0:	ed93 7a00 	vldr	s14, [r3]
 80031f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80031f8:	eef1 6a67 	vneg.f32	s13, s15
 80031fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003204:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003208:	edd7 7a07 	vldr	s15, [r7, #28]
 800320c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003210:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003214:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003218:	edd7 7a06 	vldr	s15, [r7, #24]
 800321c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003220:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	4b60      	ldr	r3, [pc, #384]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800322a:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 800322e:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003230:	ed93 7a01 	vldr	s14, [r3, #4]
 8003234:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003238:	edd7 7a08 	vldr	s15, [r7, #32]
 800323c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003240:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8003244:	edd7 7a06 	vldr	s15, [r7, #24]
 8003248:	ee66 7a27 	vmul.f32	s15, s12, s15
 800324c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003250:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003254:	edd7 7a07 	vldr	s15, [r7, #28]
 8003258:	ee66 7a27 	vmul.f32	s15, s12, s15
 800325c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003264:	4b51      	ldr	r3, [pc, #324]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003266:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800326c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003270:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003274:	edd7 7a07 	vldr	s15, [r7, #28]
 8003278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800327c:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8003280:	edd7 7a06 	vldr	s15, [r7, #24]
 8003284:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003288:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800328c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003290:	edd7 7a08 	vldr	s15, [r7, #32]
 8003294:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a0:	4b42      	ldr	r3, [pc, #264]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032a2:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80032ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80032b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80032b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032b8:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 80032bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80032c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80032c8:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80032cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	4b33      	ldr	r3, [pc, #204]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032de:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80032f8:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 80032fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80032fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003308:	edd3 6a02 	vldr	s13, [r3, #8]
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800330e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800331c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003320:	4b22      	ldr	r3, [pc, #136]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003322:	edd3 7a03 	vldr	s15, [r3, #12]
 8003326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800332a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332e:	eeb0 0a67 	vmov.f32	s0, s15
 8003332:	f7ff fc9f 	bl	8002c74 <invSqrt>
 8003336:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 800333a:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	4b18      	ldr	r3, [pc, #96]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800334a:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 800334e:	4b17      	ldr	r3, [pc, #92]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003350:	ed93 7a01 	vldr	s14, [r3, #4]
 8003354:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 800335e:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003364:	ed93 7a02 	vldr	s14, [r3, #8]
 8003368:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800336c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003372:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003378:	ed93 7a03 	vldr	s14, [r3, #12]
 800337c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <imuMahonyAHRSupdate+0x70c>)
 8003386:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 800338a:	f7ff fb03 	bl	8002994 <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <imuMahonyAHRSupdate+0x710>)
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
}
 8003394:	bf00      	nop
 8003396:	3778      	adds	r7, #120	; 0x78
 8003398:	46bd      	mov	sp, r7
 800339a:	ecbd 8b02 	vpop	{d8}
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000a20 	.word	0x20000a20
 80033a4:	20000a24 	.word	0x20000a24
 80033a8:	20000a28 	.word	0x20000a28
 80033ac:	20000004 	.word	0x20000004
 80033b0:	200009d6 	.word	0x200009d6

080033b4 <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <imuUpdateEulerAngles+0xc8>)
 80033ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <imuUpdateEulerAngles+0xc8>)
 80033c0:	ed93 7a08 	vldr	s14, [r3, #32]
 80033c4:	eef0 0a47 	vmov.f32	s1, s14
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f7fe fb1e 	bl	8001a0c <atan2_approx>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003480 <imuUpdateEulerAngles+0xcc>
 80033d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	f014 fb64 	bl	8017aac <lrintf>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b21a      	sxth	r2, r3
 80033e8:	4b26      	ldr	r3, [pc, #152]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 80033ea:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <imuUpdateEulerAngles+0xc8>)
 80033ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80033f2:	eef1 7a67 	vneg.f32	s15, s15
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	f7fe fab3 	bl	8001964 <acos_approx>
 80033fe:	eef0 7a40 	vmov.f32	s15, s0
 8003402:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003488 <imuUpdateEulerAngles+0xd4>
 8003406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003480 <imuUpdateEulerAngles+0xcc>
 800340e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	f014 fb49 	bl	8017aac <lrintf>
 800341a:	4603      	mov	r3, r0
 800341c:	b21a      	sxth	r2, r3
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003420:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <imuUpdateEulerAngles+0xc8>)
 8003424:	edd3 7a03 	vldr	s15, [r3, #12]
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <imuUpdateEulerAngles+0xc8>)
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	eef0 0a47 	vmov.f32	s1, s14
 8003432:	eeb0 0a67 	vmov.f32	s0, s15
 8003436:	f7fe fae9 	bl	8001a0c <atan2_approx>
 800343a:	eef0 7a40 	vmov.f32	s15, s0
 800343e:	eef1 7a67 	vneg.f32	s15, s15
 8003442:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003480 <imuUpdateEulerAngles+0xcc>
 8003446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344a:	eeb0 0a67 	vmov.f32	s0, s15
 800344e:	f014 fb2d 	bl	8017aac <lrintf>
 8003452:	4603      	mov	r3, r0
 8003454:	b21a      	sxth	r2, r3
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003458:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 800345c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da09      	bge.n	8003478 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 8003464:	4b07      	ldr	r3, [pc, #28]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003466:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8003470:	b29b      	uxth	r3, r3
 8003472:	b21a      	sxth	r2, r3
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <imuUpdateEulerAngles+0xd0>)
 8003476:	809a      	strh	r2, [r3, #4]
    }
}
 8003478:	bf00      	nop
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200009e0 	.word	0x200009e0
 8003480:	440f3d4c 	.word	0x440f3d4c
 8003484:	200009d0 	.word	0x200009d0
 8003488:	3fc90fdb 	.word	0x3fc90fdb

0800348c <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	460b      	mov	r3, r1
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 800349a:	2300      	movs	r3, #0
 800349c:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 800349e:	2300      	movs	r3, #0
 80034a0:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 80034a2:	7cbb      	ldrb	r3, [r7, #18]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d163      	bne.n	8003570 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <imuCalcKpGain+0x128>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <imuCalcKpGain+0x34>
 80034b0:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <imuCalcKpGain+0x12c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d103      	bne.n	80034c0 <imuCalcKpGain+0x34>
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <imuCalcKpGain+0x130>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d030      	beq.n	8003522 <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eef0 7ae7 	vabs.f32	s15, s15
 80034ca:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80034ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	dc1c      	bgt.n	8003512 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eef0 7ae7 	vabs.f32	s15, s15
 80034e4:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80034e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	dc0f      	bgt.n	8003512 <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3308      	adds	r3, #8
 80034f6:	edd3 7a00 	vldr	s15, [r3]
 80034fa:	eef0 7ae7 	vabs.f32	s15, s15
 80034fe:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350a:	dc02      	bgt.n	8003512 <imuCalcKpGain+0x86>
                || (!useAcc)) {
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d107      	bne.n	8003522 <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <imuCalcKpGain+0x134>)
 8003516:	4413      	add	r3, r2
 8003518:	4a27      	ldr	r2, [pc, #156]	; (80035b8 <imuCalcKpGain+0x12c>)
 800351a:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <imuCalcKpGain+0x128>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <imuCalcKpGain+0x128>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d011      	beq.n	800354e <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <imuCalcKpGain+0x128>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d309      	bcc.n	8003548 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <imuCalcKpGain+0x12c>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 800353a:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <imuCalcKpGain+0x128>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 8003540:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <imuCalcKpGain+0x130>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e013      	b.n	8003570 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 8003548:	2301      	movs	r3, #1
 800354a:	74fb      	strb	r3, [r7, #19]
 800354c:	e010      	b.n	8003570 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <imuCalcKpGain+0x12c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <imuCalcKpGain+0xe4>
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <imuCalcKpGain+0x12c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	429a      	cmp	r2, r3
 800355e:	d307      	bcc.n	8003570 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <imuCalcKpGain+0x138>)
 8003564:	4413      	add	r3, r2
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <imuCalcKpGain+0x128>)
 8003568:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <imuCalcKpGain+0x12c>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 8003570:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <imuCalcKpGain+0x13c>)
 8003572:	7cbb      	ldrb	r3, [r7, #18]
 8003574:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <imuCalcKpGain+0x140>)
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e00d      	b.n	800359e <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <imuCalcKpGain+0x144>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	617b      	str	r3, [r7, #20]
       if (!armState) {
 8003588:	7cbb      	ldrb	r3, [r7, #18]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 800358e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003592:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800359a:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	ee07 3a90 	vmov	s15, r3
}
 80035a4:	eeb0 0a67 	vmov.f32	s0, s15
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000a30 	.word	0x20000a30
 80035b8:	20000a34 	.word	0x20000a34
 80035bc:	20000a38 	.word	0x20000a38
 80035c0:	0003d090 	.word	0x0003d090
 80035c4:	0007a120 	.word	0x0007a120
 80035c8:	20000a2c 	.word	0x20000a2c
 80035cc:	41c80000 	.word	0x41c80000
 80035d0:	200009d8 	.word	0x200009d8

080035d4 <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	ed2d 8b08 	vpush	{d8-d11}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 80035e2:	2300      	movs	r3, #0
 80035e4:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 80035e6:	2301      	movs	r3, #1
 80035e8:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 80035ea:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <imuCalculateEstimatedAttitude+0xec>)
 80035ec:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 80035ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80035f2:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 80035f4:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <imuCalculateEstimatedAttitude+0xf0>)
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4413      	add	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 80035fe:	4a31      	ldr	r2, [pc, #196]	; (80036c4 <imuCalculateEstimatedAttitude+0xf0>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	6013      	str	r3, [r2, #0]

    useMag = true;
 8003604:	2301      	movs	r3, #1
 8003606:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8003608:	1d3b      	adds	r3, r7, #4
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff f8de 	bl	80027cc <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8003610:	482d      	ldr	r0, [pc, #180]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 8003612:	f7fd fb7b 	bl	8000d0c <accGetAccumulationAverage>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 800361c:	482a      	ldr	r0, [pc, #168]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 800361e:	f7ff fad9 	bl	8002bd4 <imuIsAccelerometerHealthy>
 8003622:	4603      	mov	r3, r0
 8003624:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003630:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80036cc <imuCalculateEstimatedAttitude+0xf8>
 8003634:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003638:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800363c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80036d0 <imuCalculateEstimatedAttitude+0xfc>
 8003640:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003644:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003648:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80036d0 <imuCalculateEstimatedAttitude+0xfc>
 800364c:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003650:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003654:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80036d0 <imuCalculateEstimatedAttitude+0xfc>
 8003658:	ee67 9a87 	vmul.f32	s19, s15, s14
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 800365e:	ed93 aa00 	vldr	s20, [r3]
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 8003664:	edd3 aa01 	vldr	s21, [r3, #4]
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <imuCalculateEstimatedAttitude+0xf4>)
 800366a:	ed93 ba02 	vldr	s22, [r3, #8]
 800366e:	1d3a      	adds	r2, r7, #4
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	4619      	mov	r1, r3
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7ff ff09 	bl	800348c <imuCalcKpGain>
 800367a:	eef0 7a40 	vmov.f32	s15, s0
 800367e:	7f7a      	ldrb	r2, [r7, #29]
 8003680:	7fb9      	ldrb	r1, [r7, #30]
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	eeb0 4a67 	vmov.f32	s8, s15
 8003688:	edd7 3a06 	vldr	s7, [r7, #24]
 800368c:	eeb0 3a4b 	vmov.f32	s6, s22
 8003690:	eef0 2a6a 	vmov.f32	s5, s21
 8003694:	eeb0 2a4a 	vmov.f32	s4, s20
 8003698:	4618      	mov	r0, r3
 800369a:	eef0 1a69 	vmov.f32	s3, s19
 800369e:	eeb0 1a49 	vmov.f32	s2, s18
 80036a2:	eef0 0a68 	vmov.f32	s1, s17
 80036a6:	eeb0 0a48 	vmov.f32	s0, s16
 80036aa:	f7ff faf9 	bl	8002ca0 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 80036ae:	f7ff fe81 	bl	80033b4 <imuUpdateEulerAngles>
}
 80036b2:	bf00      	nop
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	ecbd 8b08 	vpop	{d8-d11}
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	42e4c2a3 	.word	0x42e4c2a3
 80036c4:	20000a3c 	.word	0x20000a3c
 80036c8:	20000a04 	.word	0x20000a04
 80036cc:	358637bd 	.word	0x358637bd
 80036d0:	3c8efa35 	.word	0x3c8efa35

080036d4 <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	ed2d 8b02 	vpush	{d8}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 80036de:	f7ff f8d1 	bl	8002884 <getCosTiltAngle>
 80036e2:	eef0 7a40 	vmov.f32	s15, s0
 80036e6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003774 <calculateThrottleAngleCorrection+0xa0>
 80036ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	d801      	bhi.n	80036f8 <calculateThrottleAngleCorrection+0x24>
        return 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e036      	b.n	8003766 <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 80036f8:	f7ff f8c4 	bl	8002884 <getCosTiltAngle>
 80036fc:	eef0 7a40 	vmov.f32	s15, s0
 8003700:	eeb0 0a67 	vmov.f32	s0, s15
 8003704:	f7fe f92e 	bl	8001964 <acos_approx>
 8003708:	eeb0 7a40 	vmov.f32	s14, s0
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <calculateThrottleAngleCorrection+0xa4>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003716:	eeb0 0a67 	vmov.f32	s0, s15
 800371a:	f014 f9c7 	bl	8017aac <lrintf>
 800371e:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003726:	dd02      	ble.n	800372e <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8003728:	f44f 7361 	mov.w	r3, #900	; 0x384
 800372c:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 800372e:	4b13      	ldr	r3, [pc, #76]	; (800377c <calculateThrottleAngleCorrection+0xa8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003744:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003780 <calculateThrottleAngleCorrection+0xac>
 8003748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800374c:	eeb0 0a47 	vmov.f32	s0, s14
 8003750:	f7fe f846 	bl	80017e0 <sin_approx>
 8003754:	eef0 7a40 	vmov.f32	s15, s0
 8003758:	ee68 7a27 	vmul.f32	s15, s16, s15
 800375c:	eeb0 0a67 	vmov.f32	s0, s15
 8003760:	f014 f9a4 	bl	8017aac <lrintf>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	ecbd 8b02 	vpop	{d8}
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	3c75c28f 	.word	0x3c75c28f
 8003778:	20000a10 	.word	0x20000a10
 800377c:	20000a14 	.word	0x20000a14
 8003780:	44b0b6ef 	.word	0x44b0b6ef

08003784 <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 800379e:	f7ff ff99 	bl	80036d4 <calculateThrottleAngleCorrection>
 80037a2:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffed 	bl	8003784 <mixerSetThrottleAngleCorrection>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3318      	adds	r3, #24
 80037cc:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <compassDetect+0x8c>)
 80037da:	789b      	ldrb	r3, [r3, #2]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d10f      	bne.n	8003800 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <compassDetect+0x8c>)
 80037e2:	78db      	ldrb	r3, [r3, #3]
 80037e4:	4619      	mov	r1, r3
 80037e6:	68b8      	ldr	r0, [r7, #8]
 80037e8:	f7fd fc54 	bl	8001094 <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <compassDetect+0x8c>)
 80037ee:	791a      	ldrb	r2, [r3, #4]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	711a      	strb	r2, [r3, #4]
        break;
 80037f4:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <compassDetect+0x8c>)
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <compassDetect+0x54>
 80037fe:	e001      	b.n	8003804 <compassDetect+0x50>
        return false;
 8003800:	2300      	movs	r3, #0
 8003802:	e019      	b.n	8003838 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 8003804:	2b02      	cmp	r3, #2
 8003806:	d10e      	bne.n	8003826 <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d103      	bne.n	800381a <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <compassDetect+0x8c>)
 8003814:	791a      	ldrb	r2, [r3, #4]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 8003820:	2302      	movs	r3, #2
 8003822:	73fb      	strb	r3, [r7, #15]
        break;
 8003824:	e002      	b.n	800382c <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
        break;
 800382a:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <compassDetect+0x82>
        return false;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <compassDetect+0x84>
    }

    return true;
 8003836:	2301      	movs	r3, #1
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000b40 	.word	0x20000b40

08003844 <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 800384e:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <magInit+0x64>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60d3      	str	r3, [r2, #12]
	magDev.read = readFn;
 8003854:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <magInit+0x64>)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6113      	str	r3, [r2, #16]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 800385a:	f107 030f 	add.w	r3, r7, #15
 800385e:	4619      	mov	r1, r3
 8003860:	4811      	ldr	r0, [pc, #68]	; (80038a8 <magInit+0x64>)
 8003862:	f7ff ffa7 	bl	80037b4 <compassDetect>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d018      	beq.n	800389e <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <magInit+0x64>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	480d      	ldr	r0, [pc, #52]	; (80038a8 <magInit+0x64>)
 8003872:	4798      	blx	r3
    doneInit = true;
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <magInit+0x68>)
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 800387a:	7bfa      	ldrb	r2, [r7, #15]
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <magInit+0x64>)
 800387e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <magInit+0x6c>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 800388a:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <magInit+0x6c>)
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <magInit+0x64>)
 8003890:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 8003894:	4907      	ldr	r1, [pc, #28]	; (80038b4 <magInit+0x70>)
 8003896:	4808      	ldr	r0, [pc, #32]	; (80038b8 <magInit+0x74>)
 8003898:	f002 fb02 	bl	8005ea0 <buildRotationMatrixFromAlignment>
 800389c:	e000      	b.n	80038a0 <magInit+0x5c>
        return;
 800389e:	bf00      	nop
}
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000a4c 	.word	0x20000a4c
 80038ac:	20000b3c 	.word	0x20000b3c
 80038b0:	20000b40 	.word	0x20000b40
 80038b4:	20000b10 	.word	0x20000b10
 80038b8:	20000b50 	.word	0x20000b50

080038bc <magUpdate>:

void magUpdate(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev)) {
 80038c2:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <magUpdate+0xb8>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	482b      	ldr	r0, [pc, #172]	; (8003974 <magUpdate+0xb8>)
 80038c8:	4798      	blx	r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d04d      	beq.n	800396c <magUpdate+0xb0>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	e00c      	b.n	80038f0 <magUpdate+0x34>
    	mag.magADC[axis] = magDev.magADC[axis];
 80038d6:	4a27      	ldr	r2, [pc, #156]	; (8003974 <magUpdate+0xb8>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4925      	ldr	r1, [pc, #148]	; (8003978 <magUpdate+0xbc>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3301      	adds	r3, #1
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	ddef      	ble.n	80038d6 <magUpdate+0x1a>
    }

    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <magUpdate+0xb8>)
 80038f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80038fc:	4619      	mov	r1, r3
 80038fe:	481e      	ldr	r0, [pc, #120]	; (8003978 <magUpdate+0xbc>)
 8003900:	f002 fb60 	bl	8005fc4 <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <magUpdate+0xc0>)
 8003906:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <magUpdate+0xc4>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d02e      	beq.n	800396e <magUpdate+0xb2>
        mag.magADC[X] -= magZero->raw[X];
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <magUpdate+0xbc>)
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <magUpdate+0xbc>)
 800392a:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <magUpdate+0xbc>)
 8003930:	ed93 7a01 	vldr	s14, [r3, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <magUpdate+0xbc>)
 8003948:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <magUpdate+0xbc>)
 800394e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <magUpdate+0xbc>)
 8003966:	edc3 7a02 	vstr	s15, [r3, #8]
 800396a:	e000      	b.n	800396e <magUpdate+0xb2>
        return;
 800396c:	bf00      	nop
    }
}
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000a4c 	.word	0x20000a4c
 8003978:	20000a40 	.word	0x20000a40
 800397c:	20000b48 	.word	0x20000b48
 8003980:	20000b3c 	.word	0x20000b3c

08003984 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800398c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003990:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800399c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80039a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80039ac:	e000      	b.n	80039b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80039ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80039b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f9      	beq.n	80039ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80039ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039c4:	687b      	ldr	r3, [r7, #4]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_write>:
static char pBuf[1000];
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]

 for (int i = 0; i < len; ++i) {
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e009      	b.n	80039f8 <_write+0x26>
	 ITM_SendChar(*ptr++);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	60ba      	str	r2, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ffc9 	bl	8003984 <ITM_SendChar>
 for (int i = 0; i < len; ++i) {
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	dbf1      	blt.n	80039e4 <_write+0x12>
	 //const unsigned char* letter = ptr;
	 //HAL_UART_Transmit(&huart3, (const uint8_t *)ptr++, 1, 1);
	 ///ptr++;
 }
 //HAL_UART_Transmit_IT(&huart3, (const unsigned char *)ptr, len);
 return len;
 8003a00:	687b      	ldr	r3, [r7, #4]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a10:	f008 f8b8 	bl	800bb84 <HAL_Init>

  //HAL_UART_Init(&huart3);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a14:	f000 f916 	bl	8003c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a18:	f000 f9e4 	bl	8003de4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003a1c:	f000 f9b4 	bl	8003d88 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8003a20:	f000 f982 	bl	8003d28 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* initialization of control task */
  gyroInit(sensorGyroInit, sensorGyroRead);
 8003a24:	4958      	ldr	r1, [pc, #352]	; (8003b88 <main+0x17c>)
 8003a26:	4859      	ldr	r0, [pc, #356]	; (8003b8c <main+0x180>)
 8003a28:	f7fe fcc0 	bl	80023ac <gyroInit>
  controlMotorInit();
 8003a2c:	f7fd fb5e 	bl	80010ec <controlMotorInit>

  /* initialization of attitude task */
  accInit(sensorAccInit, sensorAccRead);
 8003a30:	4957      	ldr	r1, [pc, #348]	; (8003b90 <main+0x184>)
 8003a32:	4858      	ldr	r0, [pc, #352]	; (8003b94 <main+0x188>)
 8003a34:	f7fd f882 	bl	8000b3c <accInit>
  magInit(sensorMagInit, sensorMagRead);
 8003a38:	4957      	ldr	r1, [pc, #348]	; (8003b98 <main+0x18c>)
 8003a3a:	4858      	ldr	r0, [pc, #352]	; (8003b9c <main+0x190>)
 8003a3c:	f7ff ff02 	bl	8003844 <magInit>
  attitudeInit();
 8003a40:	f7fd f9b6 	bl	8000db0 <attitudeInit>

  /* initialization of altitude task */
  baroInit(sensorBaroInit, sensorBaroRead);
 8003a44:	4956      	ldr	r1, [pc, #344]	; (8003ba0 <main+0x194>)
 8003a46:	4857      	ldr	r0, [pc, #348]	; (8003ba4 <main+0x198>)
 8003a48:	f7fd fac0 	bl	8000fcc <baroInit>

  /* initialization of sensors */
  	  /* initialization of sensor LSM6DSL*/
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 8003a4c:	2103      	movs	r1, #3
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f007 fd12 	bl	800b478 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO | MOTION_GYRO);
 8003a54:	2103      	movs	r1, #3
 8003a56:	2000      	movs	r0, #0
 8003a58:	f007 fe0a 	bl	800b670 <IKS01A2_MOTION_SENSOR_Enable>

  	  /* initialization of sensor LSM303AGR*/
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f007 fd0a 	bl	800b478 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8003a64:	2104      	movs	r1, #4
 8003a66:	2002      	movs	r0, #2
 8003a68:	f007 fd06 	bl	800b478 <IKS01A2_MOTION_SENSOR_Init>

  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f007 fdfe 	bl	800b670 <IKS01A2_MOTION_SENSOR_Enable>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8003a74:	2104      	movs	r1, #4
 8003a76:	2002      	movs	r0, #2
 8003a78:	f007 fdfa 	bl	800b670 <IKS01A2_MOTION_SENSOR_Enable>
  	  /* initialization of pressure sensor LPS22HB*/
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f007 fa3e 	bl	800af00 <IKS01A2_ENV_SENSOR_Init>
  IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 8003a84:	2102      	movs	r1, #2
 8003a86:	2001      	movs	r0, #1
 8003a88:	f007 fafa 	bl	800b080 <IKS01A2_ENV_SENSOR_Enable>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003a8c:	f00c f86c 	bl	800fb68 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semPressLPS22HB */
  semPressLPS22HBHandle = osSemaphoreNew(1, 1, &semPressLPS22HB_attributes);
 8003a90:	4a45      	ldr	r2, [pc, #276]	; (8003ba8 <main+0x19c>)
 8003a92:	2101      	movs	r1, #1
 8003a94:	2001      	movs	r0, #1
 8003a96:	f00c f9a5 	bl	800fde4 <osSemaphoreNew>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4a43      	ldr	r2, [pc, #268]	; (8003bac <main+0x1a0>)
 8003a9e:	6013      	str	r3, [r2, #0]

  /* creation of semAccLSM303AGR */
  semAccLSM303AGRHandle = osSemaphoreNew(1, 1, &semAccLSM303AGR_attributes);
 8003aa0:	4a43      	ldr	r2, [pc, #268]	; (8003bb0 <main+0x1a4>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f00c f99d 	bl	800fde4 <osSemaphoreNew>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4a41      	ldr	r2, [pc, #260]	; (8003bb4 <main+0x1a8>)
 8003aae:	6013      	str	r3, [r2, #0]

  /* creation of semAccLSM6DSL */
  semAccLSM6DSLHandle = osSemaphoreNew(1, 1, &semAccLSM6DSL_attributes);
 8003ab0:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <main+0x1ac>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2001      	movs	r0, #1
 8003ab6:	f00c f995 	bl	800fde4 <osSemaphoreNew>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4a3f      	ldr	r2, [pc, #252]	; (8003bbc <main+0x1b0>)
 8003abe:	6013      	str	r3, [r2, #0]

  /* creation of semMagnetLSM303AGR */
  semMagnetLSM303AGRHandle = osSemaphoreNew(1, 1, &semMagnetLSM303AGR_attributes);
 8003ac0:	4a3f      	ldr	r2, [pc, #252]	; (8003bc0 <main+0x1b4>)
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f00c f98d 	bl	800fde4 <osSemaphoreNew>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4a3d      	ldr	r2, [pc, #244]	; (8003bc4 <main+0x1b8>)
 8003ace:	6013      	str	r3, [r2, #0]

  /* creation of semGyrLSM6DSL */
  semGyrLSM6DSLHandle = osSemaphoreNew(1, 1, &semGyrLSM6DSL_attributes);
 8003ad0:	4a3d      	ldr	r2, [pc, #244]	; (8003bc8 <main+0x1bc>)
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f00c f985 	bl	800fde4 <osSemaphoreNew>
 8003ada:	4603      	mov	r3, r0
 8003adc:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <main+0x1c0>)
 8003ade:	6013      	str	r3, [r2, #0]

  /* creation of semI2CInUse */
  semI2CInUseHandle = osSemaphoreNew(1, 1, &semI2CInUse_attributes);
 8003ae0:	4a3b      	ldr	r2, [pc, #236]	; (8003bd0 <main+0x1c4>)
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f00c f97d 	bl	800fde4 <osSemaphoreNew>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4a39      	ldr	r2, [pc, #228]	; (8003bd4 <main+0x1c8>)
 8003aee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tControlMotor */
  tControlMotorHandle = osThreadNew(startTaskControlMotor, NULL, &tControlMotor_attributes);
 8003af0:	4a39      	ldr	r2, [pc, #228]	; (8003bd8 <main+0x1cc>)
 8003af2:	2100      	movs	r1, #0
 8003af4:	4839      	ldr	r0, [pc, #228]	; (8003bdc <main+0x1d0>)
 8003af6:	f00c f8a1 	bl	800fc3c <osThreadNew>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4a38      	ldr	r2, [pc, #224]	; (8003be0 <main+0x1d4>)
 8003afe:	6013      	str	r3, [r2, #0]

  /* creation of tAttitude */
  tAttitudeHandle = osThreadNew(startTaskAttitude, NULL, &tAttitude_attributes);
 8003b00:	4a38      	ldr	r2, [pc, #224]	; (8003be4 <main+0x1d8>)
 8003b02:	2100      	movs	r1, #0
 8003b04:	4838      	ldr	r0, [pc, #224]	; (8003be8 <main+0x1dc>)
 8003b06:	f00c f899 	bl	800fc3c <osThreadNew>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4a37      	ldr	r2, [pc, #220]	; (8003bec <main+0x1e0>)
 8003b0e:	6013      	str	r3, [r2, #0]

  /* creation of tAltitude */
  tAltitudeHandle = osThreadNew(startTaskAltitude, NULL, &tAltitude_attributes);
 8003b10:	4a37      	ldr	r2, [pc, #220]	; (8003bf0 <main+0x1e4>)
 8003b12:	2100      	movs	r1, #0
 8003b14:	4837      	ldr	r0, [pc, #220]	; (8003bf4 <main+0x1e8>)
 8003b16:	f00c f891 	bl	800fc3c <osThreadNew>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	4a36      	ldr	r2, [pc, #216]	; (8003bf8 <main+0x1ec>)
 8003b1e:	6013      	str	r3, [r2, #0]

  /* creation of tGetAccLSM6DSL */
  tGetAccLSM6DSLHandle = osThreadNew(StartTaskGetAccLSM6DSL, NULL, &tGetAccLSM6DSL_attributes);
 8003b20:	4a36      	ldr	r2, [pc, #216]	; (8003bfc <main+0x1f0>)
 8003b22:	2100      	movs	r1, #0
 8003b24:	4836      	ldr	r0, [pc, #216]	; (8003c00 <main+0x1f4>)
 8003b26:	f00c f889 	bl	800fc3c <osThreadNew>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a35      	ldr	r2, [pc, #212]	; (8003c04 <main+0x1f8>)
 8003b2e:	6013      	str	r3, [r2, #0]

  /* creation of tGetAccLSM303AG */
  tGetAccLSM303AGHandle = osThreadNew(StartTaskGetAccLSM303AGR, NULL, &tGetAccLSM303AG_attributes);
 8003b30:	4a35      	ldr	r2, [pc, #212]	; (8003c08 <main+0x1fc>)
 8003b32:	2100      	movs	r1, #0
 8003b34:	4835      	ldr	r0, [pc, #212]	; (8003c0c <main+0x200>)
 8003b36:	f00c f881 	bl	800fc3c <osThreadNew>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4a34      	ldr	r2, [pc, #208]	; (8003c10 <main+0x204>)
 8003b3e:	6013      	str	r3, [r2, #0]

  /* creation of tGetGyrLSM6DSL */
  tGetGyrLSM6DSLHandle = osThreadNew(StartTaskGetGyrLSM6DSL, NULL, &tGetGyrLSM6DSL_attributes);
 8003b40:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <main+0x208>)
 8003b42:	2100      	movs	r1, #0
 8003b44:	4834      	ldr	r0, [pc, #208]	; (8003c18 <main+0x20c>)
 8003b46:	f00c f879 	bl	800fc3c <osThreadNew>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4a33      	ldr	r2, [pc, #204]	; (8003c1c <main+0x210>)
 8003b4e:	6013      	str	r3, [r2, #0]

  /* creation of tGetMagnetLSM30 */
  tGetMagnetLSM30Handle = osThreadNew(StartTaskGetMagnetLSM303AGR, NULL, &tGetMagnetLSM30_attributes);
 8003b50:	4a33      	ldr	r2, [pc, #204]	; (8003c20 <main+0x214>)
 8003b52:	2100      	movs	r1, #0
 8003b54:	4833      	ldr	r0, [pc, #204]	; (8003c24 <main+0x218>)
 8003b56:	f00c f871 	bl	800fc3c <osThreadNew>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <main+0x21c>)
 8003b5e:	6013      	str	r3, [r2, #0]

  /* creation of tGetPressLPS22H */
  tGetPressLPS22HHandle = osThreadNew(StartTaskGetPressLPS22HB, NULL, &tGetPressLPS22H_attributes);
 8003b60:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <main+0x220>)
 8003b62:	2100      	movs	r1, #0
 8003b64:	4832      	ldr	r0, [pc, #200]	; (8003c30 <main+0x224>)
 8003b66:	f00c f869 	bl	800fc3c <osThreadNew>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <main+0x228>)
 8003b6e:	6013      	str	r3, [r2, #0]

  /* creation of tPrintUART */
  tPrintUARTHandle = osThreadNew(StartTaskPrintUART, NULL, &tPrintUART_attributes);
 8003b70:	4a31      	ldr	r2, [pc, #196]	; (8003c38 <main+0x22c>)
 8003b72:	2100      	movs	r1, #0
 8003b74:	4831      	ldr	r0, [pc, #196]	; (8003c3c <main+0x230>)
 8003b76:	f00c f861 	bl	800fc3c <osThreadNew>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <main+0x234>)
 8003b7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003b80:	f00c f826 	bl	800fbd0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <main+0x178>
 8003b86:	bf00      	nop
 8003b88:	08003fc5 	.word	0x08003fc5
 8003b8c:	08003fb1 	.word	0x08003fb1
 8003b90:	08004049 	.word	0x08004049
 8003b94:	08004035 	.word	0x08004035
 8003b98:	0800411d 	.word	0x0800411d
 8003b9c:	08004109 	.word	0x08004109
 8003ba0:	080041a9 	.word	0x080041a9
 8003ba4:	0800418d 	.word	0x0800418d
 8003ba8:	08018220 	.word	0x08018220
 8003bac:	2000110c 	.word	0x2000110c
 8003bb0:	08018230 	.word	0x08018230
 8003bb4:	20001110 	.word	0x20001110
 8003bb8:	08018240 	.word	0x08018240
 8003bbc:	20001114 	.word	0x20001114
 8003bc0:	08018250 	.word	0x08018250
 8003bc4:	20001118 	.word	0x20001118
 8003bc8:	08018260 	.word	0x08018260
 8003bcc:	2000111c 	.word	0x2000111c
 8003bd0:	08018270 	.word	0x08018270
 8003bd4:	20001120 	.word	0x20001120
 8003bd8:	080180dc 	.word	0x080180dc
 8003bdc:	080041f1 	.word	0x080041f1
 8003be0:	200010e8 	.word	0x200010e8
 8003be4:	08018100 	.word	0x08018100
 8003be8:	0800420b 	.word	0x0800420b
 8003bec:	200010ec 	.word	0x200010ec
 8003bf0:	08018124 	.word	0x08018124
 8003bf4:	08004227 	.word	0x08004227
 8003bf8:	200010f0 	.word	0x200010f0
 8003bfc:	08018148 	.word	0x08018148
 8003c00:	0800423d 	.word	0x0800423d
 8003c04:	200010f4 	.word	0x200010f4
 8003c08:	0801816c 	.word	0x0801816c
 8003c0c:	080042a9 	.word	0x080042a9
 8003c10:	200010f8 	.word	0x200010f8
 8003c14:	08018190 	.word	0x08018190
 8003c18:	08004315 	.word	0x08004315
 8003c1c:	200010fc 	.word	0x200010fc
 8003c20:	080181b4 	.word	0x080181b4
 8003c24:	08004381 	.word	0x08004381
 8003c28:	20001100 	.word	0x20001100
 8003c2c:	080181d8 	.word	0x080181d8
 8003c30:	080043ed 	.word	0x080043ed
 8003c34:	20001104 	.word	0x20001104
 8003c38:	080181fc 	.word	0x080181fc
 8003c3c:	0800444d 	.word	0x0800444d
 8003c40:	20001108 	.word	0x20001108

08003c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b094      	sub	sp, #80	; 0x50
 8003c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	2234      	movs	r2, #52	; 0x34
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f00f fc53 	bl	80134fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c68:	f009 fb28 	bl	800d2bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <SystemClock_Config+0xdc>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <SystemClock_Config+0xdc>)
 8003c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c76:	6413      	str	r3, [r2, #64]	; 0x40
 8003c78:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <SystemClock_Config+0xdc>)
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <SystemClock_Config+0xe0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c8c:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <SystemClock_Config+0xe0>)
 8003c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <SystemClock_Config+0xe0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ca4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003ca8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003caa:	2302      	movs	r3, #2
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003cb8:	2360      	movs	r3, #96	; 0x60
 8003cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f009 fb55 	bl	800d37c <HAL_RCC_OscConfig>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003cd8:	f000 fcd0 	bl	800467c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003cdc:	f009 fafe 	bl	800d2dc <HAL_PWREx_EnableOverDrive>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003ce6:	f000 fcc9 	bl	800467c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cea:	230f      	movs	r3, #15
 8003cec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003d00:	f107 0308 	add.w	r3, r7, #8
 8003d04:	2103      	movs	r1, #3
 8003d06:	4618      	mov	r0, r3
 8003d08:	f009 fde6 	bl	800d8d8 <HAL_RCC_ClockConfig>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8003d12:	f000 fcb3 	bl	800467c <Error_Handler>
  }
}
 8003d16:	bf00      	nop
 8003d18:	3750      	adds	r7, #80	; 0x50
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40007000 	.word	0x40007000

08003d28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d2c:	4b14      	ldr	r3, [pc, #80]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <MX_USART3_UART_Init+0x5c>)
 8003d30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d4e:	220c      	movs	r2, #12
 8003d50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d6a:	4805      	ldr	r0, [pc, #20]	; (8003d80 <MX_USART3_UART_Init+0x58>)
 8003d6c:	f00a ff14 	bl	800eb98 <HAL_UART_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003d76:	f000 fc81 	bl	800467c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000b58 	.word	0x20000b58
 8003d84:	40004800 	.word	0x40004800

08003d88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003d92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d96:	2206      	movs	r2, #6
 8003d98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003da8:	2202      	movs	r2, #2
 8003daa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003dca:	4805      	ldr	r0, [pc, #20]	; (8003de0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003dcc:	f009 f92d 	bl	800d02a <HAL_PCD_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003dd6:	f000 fc51 	bl	800467c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000be0 	.word	0x20000be0

08003de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dea:	f107 031c 	add.w	r3, r7, #28
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dfa:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a67      	ldr	r2, [pc, #412]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e12:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	4b5c      	ldr	r3, [pc, #368]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a55      	ldr	r2, [pc, #340]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e48:	f043 0302 	orr.w	r3, r3, #2
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e5a:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	4a4f      	ldr	r2, [pc, #316]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e60:	f043 0308 	orr.w	r3, r3, #8
 8003e64:	6313      	str	r3, [r2, #48]	; 0x30
 8003e66:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e72:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	4a49      	ldr	r2, [pc, #292]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <MX_GPIO_Init+0x1b8>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f244 0181 	movw	r1, #16513	; 0x4081
 8003e90:	4843      	ldr	r0, [pc, #268]	; (8003fa0 <MX_GPIO_Init+0x1bc>)
 8003e92:	f008 fa63 	bl	800c35c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003e96:	2200      	movs	r2, #0
 8003e98:	2140      	movs	r1, #64	; 0x40
 8003e9a:	4842      	ldr	r0, [pc, #264]	; (8003fa4 <MX_GPIO_Init+0x1c0>)
 8003e9c:	f008 fa5e 	bl	800c35c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ea6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003eb0:	f107 031c 	add.w	r3, r7, #28
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	483c      	ldr	r0, [pc, #240]	; (8003fa8 <MX_GPIO_Init+0x1c4>)
 8003eb8:	f007 ff98 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003ebc:	2332      	movs	r3, #50	; 0x32
 8003ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ecc:	230b      	movs	r3, #11
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ed0:	f107 031c 	add.w	r3, r7, #28
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4834      	ldr	r0, [pc, #208]	; (8003fa8 <MX_GPIO_Init+0x1c4>)
 8003ed8:	f007 ff88 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003edc:	2386      	movs	r3, #134	; 0x86
 8003ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003eec:	230b      	movs	r3, #11
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	482d      	ldr	r0, [pc, #180]	; (8003fac <MX_GPIO_Init+0x1c8>)
 8003ef8:	f007 ff78 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003efc:	f244 0381 	movw	r3, #16513	; 0x4081
 8003f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f02:	2301      	movs	r3, #1
 8003f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0e:	f107 031c 	add.w	r3, r7, #28
 8003f12:	4619      	mov	r1, r3
 8003f14:	4822      	ldr	r0, [pc, #136]	; (8003fa0 <MX_GPIO_Init+0x1bc>)
 8003f16:	f007 ff69 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f2c:	230b      	movs	r3, #11
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003f30:	f107 031c 	add.w	r3, r7, #28
 8003f34:	4619      	mov	r1, r3
 8003f36:	481a      	ldr	r0, [pc, #104]	; (8003fa0 <MX_GPIO_Init+0x1bc>)
 8003f38:	f007 ff58 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003f3c:	2340      	movs	r3, #64	; 0x40
 8003f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f40:	2301      	movs	r3, #1
 8003f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003f4c:	f107 031c 	add.w	r3, r7, #28
 8003f50:	4619      	mov	r1, r3
 8003f52:	4814      	ldr	r0, [pc, #80]	; (8003fa4 <MX_GPIO_Init+0x1c0>)
 8003f54:	f007 ff4a 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	4619      	mov	r1, r3
 8003f6a:	480e      	ldr	r0, [pc, #56]	; (8003fa4 <MX_GPIO_Init+0x1c0>)
 8003f6c:	f007 ff3e 	bl	800bdec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003f70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f76:	2302      	movs	r3, #2
 8003f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f82:	230b      	movs	r3, #11
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_GPIO_Init+0x1c0>)
 8003f8e:	f007 ff2d 	bl	800bdec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f92:	bf00      	nop
 8003f94:	3730      	adds	r7, #48	; 0x30
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40020400 	.word	0x40020400
 8003fa4:	40021800 	.word	0x40021800
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	40020000 	.word	0x40020000

08003fb0 <sensorGyroInit>:

/* USER CODE BEGIN 4 */
static void sensorGyroInit(struct gyroDev_s *gyro) { }
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM6DSL;
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semGyrLSM6DSLHandle, osWaitForever );
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <sensorGyroRead+0x68>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f00b ffa1 	bl	800ff1c <osSemaphoreAcquire>
	axes_LSM6DSL = axesGyr_LSM6DSL;
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <sensorGyroRead+0x6c>)
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003fe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semGyrLSM6DSLHandle);
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <sensorGyroRead+0x68>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f00b fffc 	bl	800ffe8 <osSemaphoreRelease>
	gyro->gyroADC[0] = axes_LSM6DSL.x;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	gyro->gyroADC[1] = axes_LSM6DSL.y;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	gyro->gyroADC[2] = axes_LSM6DSL.z;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	return true;
 8004020:	2301      	movs	r3, #1
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000111c 	.word	0x2000111c
 8004030:	20001140 	.word	0x20001140

08004034 <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM303AG;
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM6DSL;

	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <sensorAccRead+0xb0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f04f 31ff 	mov.w	r1, #4294967295
 8004058:	4618      	mov	r0, r3
 800405a:	f00b ff5f 	bl	800ff1c <osSemaphoreAcquire>
	axes_LSM303AG = axesAcc_LSM303AG;
 800405e:	4a27      	ldr	r2, [pc, #156]	; (80040fc <sensorAccRead+0xb4>)
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	ca07      	ldmia	r2, {r0, r1, r2}
 8004066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <sensorAccRead+0xb0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f00b ffba 	bl	800ffe8 <osSemaphoreRelease>
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <sensorAccRead+0xb8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f04f 31ff 	mov.w	r1, #4294967295
 800407c:	4618      	mov	r0, r3
 800407e:	f00b ff4d 	bl	800ff1c <osSemaphoreAcquire>
	axes_LSM6DSL = axesAcc_LSM6DSL;
 8004082:	4a20      	ldr	r2, [pc, #128]	; (8004104 <sensorAccRead+0xbc>)
 8004084:	f107 0308 	add.w	r3, r7, #8
 8004088:	ca07      	ldmia	r2, {r0, r1, r2}
 800408a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <sensorAccRead+0xb8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f00b ffa8 	bl	800ffe8 <osSemaphoreRelease>

	acc->accADC[0] = (axes_LSM303AG.x + axes_LSM6DSL.x ) / 2;
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4413      	add	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	da00      	bge.n	80040a4 <sensorAccRead+0x5c>
 80040a2:	3301      	adds	r3, #1
 80040a4:	105b      	asrs	r3, r3, #1
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	edc3 7a04 	vstr	s15, [r3, #16]
	acc->accADC[1] = (axes_LSM303AG.y + axes_LSM6DSL.y ) / 2;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da00      	bge.n	80040c0 <sensorAccRead+0x78>
 80040be:	3301      	adds	r3, #1
 80040c0:	105b      	asrs	r3, r3, #1
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	edc3 7a05 	vstr	s15, [r3, #20]
	acc->accADC[2] = (axes_LSM303AG.z + axes_LSM6DSL.z ) / 2;
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da00      	bge.n	80040dc <sensorAccRead+0x94>
 80040da:	3301      	adds	r3, #1
 80040dc:	105b      	asrs	r3, r3, #1
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	edc3 7a06 	vstr	s15, [r3, #24]
	return true;
 80040ec:	2301      	movs	r3, #1
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20001110 	.word	0x20001110
 80040fc:	20001128 	.word	0x20001128
 8004100:	20001114 	.word	0x20001114
 8004104:	20001134 	.word	0x20001134

08004108 <sensorMagInit>:

static void sensorMagInit(struct magDev_s *mag) { }
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *mag) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	//LSM303AGR sensor magnetometer
	IKS01A2_MOTION_SENSOR_Axes_t axes_LSM303AGR;
	osSemaphoreAcquire(semMagnetLSM303AGRHandle, osWaitForever );
 8004124:	4b17      	ldr	r3, [pc, #92]	; (8004184 <sensorMagRead+0x68>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f04f 31ff 	mov.w	r1, #4294967295
 800412c:	4618      	mov	r0, r3
 800412e:	f00b fef5 	bl	800ff1c <osSemaphoreAcquire>
	axes_LSM303AGR = axesMag_LSM303AGR;
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <sensorMagRead+0x6c>)
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	ca07      	ldmia	r2, {r0, r1, r2}
 800413a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semMagnetLSM303AGRHandle);
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <sensorMagRead+0x68>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f00b ff50 	bl	800ffe8 <osSemaphoreRelease>

	mag->magADC[0] = axes_LSM303AGR.x;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	edc3 7a00 	vstr	s15, [r3]
	mag->magADC[1] = axes_LSM303AGR.y;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	ee07 3a90 	vmov	s15, r3
 800415e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	edc3 7a01 	vstr	s15, [r3, #4]
	mag->magADC[2] = axes_LSM303AGR.z;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	edc3 7a02 	vstr	s15, [r3, #8]
	return true;
 8004178:	2301      	movs	r3, #1
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20001118 	.word	0x20001118
 8004188:	2000114c 	.word	0x2000114c

0800418c <sensorBaroInit>:

static void sensorBaroInit(struct baroDev_s *baro) {
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	baro->baroADC = 0;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <sensorBaroRead>:

static bool sensorBaroRead(struct baroDev_s *baro) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	//baro->baroADC = 12000;
	osSemaphoreAcquire(semPressLPS22HBHandle, osWaitForever );
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <sensorBaroRead+0x40>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f04f 31ff 	mov.w	r1, #4294967295
 80041b8:	4618      	mov	r0, r3
 80041ba:	f00b feaf 	bl	800ff1c <osSemaphoreAcquire>
	baro->baroADC = pressure_LPS22HB;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <sensorBaroRead+0x44>)
 80041c0:	edd3 7a00 	vldr	s15, [r3]
 80041c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041c8:	ee17 2a90 	vmov	r2, s15
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	//LPS22HB_Pressure = pressure;
	osSemaphoreRelease(semPressLPS22HBHandle);
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <sensorBaroRead+0x40>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f00b ff06 	bl	800ffe8 <osSemaphoreRelease>
	return true;
 80041dc:	2301      	movs	r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000110c 	.word	0x2000110c
 80041ec:	20001124 	.word	0x20001124

080041f0 <startTaskControlMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskControlMotor */
void startTaskControlMotor(void *argument)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	gyroUpdate();
 80041f8:	f7fe fa56 	bl	80026a8 <gyroUpdate>
	controlMotorUpdate();
 80041fc:	f7fc ff7c 	bl	80010f8 <controlMotorUpdate>
    osDelay(500);
 8004200:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004204:	f00b fdc0 	bl	800fd88 <osDelay>
	gyroUpdate();
 8004208:	e7f6      	b.n	80041f8 <startTaskControlMotor+0x8>

0800420a <startTaskAttitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAttitude */
void startTaskAttitude(void *argument)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAttitude */
  /* Infinite loop */
  for(;;)
  {
    accUpdate();
 8004212:	f7fc fcef 	bl	8000bf4 <accUpdate>
    magUpdate();
 8004216:	f7ff fb51 	bl	80038bc <magUpdate>
    attitudeUpdate();
 800421a:	f7fc fdcf 	bl	8000dbc <attitudeUpdate>
    osDelay(100);
 800421e:	2064      	movs	r0, #100	; 0x64
 8004220:	f00b fdb2 	bl	800fd88 <osDelay>
    accUpdate();
 8004224:	e7f5      	b.n	8004212 <startTaskAttitude+0x8>

08004226 <startTaskAltitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAltitude */
void startTaskAltitude(void *argument)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAltitude */
  /* Infinite loop */
  for(;;)
  {
    baroUpdate();
 800422e:	f7fc ff07 	bl	8001040 <baroUpdate>
    osDelay(40);
 8004232:	2028      	movs	r0, #40	; 0x28
 8004234:	f00b fda8 	bl	800fd88 <osDelay>
    baroUpdate();
 8004238:	e7f9      	b.n	800422e <startTaskAltitude+0x8>
	...

0800423c <StartTaskGetAccLSM6DSL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetAccLSM6DSL */
void StartTaskGetAccLSM6DSL(void *argument)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetAccLSM6DSL */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8004244:	4b15      	ldr	r3, [pc, #84]	; (800429c <StartTaskGetAccLSM6DSL+0x60>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f04f 31ff 	mov.w	r1, #4294967295
 800424c:	4618      	mov	r0, r3
 800424e:	f00b fe65 	bl	800ff1c <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &axes);
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	461a      	mov	r2, r3
 8004258:	2102      	movs	r1, #2
 800425a:	2000      	movs	r0, #0
 800425c:	f007 fa4a 	bl	800b6f4 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <StartTaskGetAccLSM6DSL+0x60>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f00b febf 	bl	800ffe8 <osSemaphoreRelease>

	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <StartTaskGetAccLSM6DSL+0x64>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f04f 31ff 	mov.w	r1, #4294967295
 8004272:	4618      	mov	r0, r3
 8004274:	f00b fe52 	bl	800ff1c <osSemaphoreAcquire>
	axesAcc_LSM6DSL = axes;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <StartTaskGetAccLSM6DSL+0x68>)
 800427a:	461c      	mov	r4, r3
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <StartTaskGetAccLSM6DSL+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f00b feab 	bl	800ffe8 <osSemaphoreRelease>
	osDelay(100);
 8004292:	2064      	movs	r0, #100	; 0x64
 8004294:	f00b fd78 	bl	800fd88 <osDelay>
  {
 8004298:	e7d4      	b.n	8004244 <StartTaskGetAccLSM6DSL+0x8>
 800429a:	bf00      	nop
 800429c:	20001120 	.word	0x20001120
 80042a0:	20001114 	.word	0x20001114
 80042a4:	20001134 	.word	0x20001134

080042a8 <StartTaskGetAccLSM303AGR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetAccLSM303AGR */
void StartTaskGetAccLSM303AGR(void *argument)
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetAccLSM303AGR */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <StartTaskGetAccLSM303AGR+0x60>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f04f 31ff 	mov.w	r1, #4294967295
 80042b8:	4618      	mov	r0, r3
 80042ba:	f00b fe2f 	bl	800ff1c <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO, &axes);
 80042be:	f107 030c 	add.w	r3, r7, #12
 80042c2:	461a      	mov	r2, r3
 80042c4:	2102      	movs	r1, #2
 80042c6:	2001      	movs	r0, #1
 80042c8:	f007 fa14 	bl	800b6f4 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <StartTaskGetAccLSM303AGR+0x60>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f00b fe89 	bl	800ffe8 <osSemaphoreRelease>

	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <StartTaskGetAccLSM303AGR+0x64>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f04f 31ff 	mov.w	r1, #4294967295
 80042de:	4618      	mov	r0, r3
 80042e0:	f00b fe1c 	bl	800ff1c <osSemaphoreAcquire>
    axesAcc_LSM303AG = axes;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <StartTaskGetAccLSM303AGR+0x68>)
 80042e6:	461c      	mov	r4, r3
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <StartTaskGetAccLSM303AGR+0x64>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f00b fe75 	bl	800ffe8 <osSemaphoreRelease>
	osDelay(100);
 80042fe:	2064      	movs	r0, #100	; 0x64
 8004300:	f00b fd42 	bl	800fd88 <osDelay>
  {
 8004304:	e7d4      	b.n	80042b0 <StartTaskGetAccLSM303AGR+0x8>
 8004306:	bf00      	nop
 8004308:	20001120 	.word	0x20001120
 800430c:	20001110 	.word	0x20001110
 8004310:	20001128 	.word	0x20001128

08004314 <StartTaskGetGyrLSM6DSL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetGyrLSM6DSL */
void StartTaskGetGyrLSM6DSL(void *argument)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetGyrLSM6DSL */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <StartTaskGetGyrLSM6DSL+0x60>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f04f 31ff 	mov.w	r1, #4294967295
 8004324:	4618      	mov	r0, r3
 8004326:	f00b fdf9 	bl	800ff1c <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, &axes);
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	461a      	mov	r2, r3
 8004330:	2101      	movs	r1, #1
 8004332:	2000      	movs	r0, #0
 8004334:	f007 f9de 	bl	800b6f4 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 8004338:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <StartTaskGetGyrLSM6DSL+0x60>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f00b fe53 	bl	800ffe8 <osSemaphoreRelease>

	osSemaphoreAcquire(semGyrLSM6DSLHandle, osWaitForever );
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <StartTaskGetGyrLSM6DSL+0x64>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f04f 31ff 	mov.w	r1, #4294967295
 800434a:	4618      	mov	r0, r3
 800434c:	f00b fde6 	bl	800ff1c <osSemaphoreAcquire>
	axesGyr_LSM6DSL = axes;
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <StartTaskGetGyrLSM6DSL+0x68>)
 8004352:	461c      	mov	r4, r3
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800435c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semGyrLSM6DSLHandle);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <StartTaskGetGyrLSM6DSL+0x64>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f00b fe3f 	bl	800ffe8 <osSemaphoreRelease>
    osDelay(500);
 800436a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800436e:	f00b fd0b 	bl	800fd88 <osDelay>
  {
 8004372:	e7d3      	b.n	800431c <StartTaskGetGyrLSM6DSL+0x8>
 8004374:	20001120 	.word	0x20001120
 8004378:	2000111c 	.word	0x2000111c
 800437c:	20001140 	.word	0x20001140

08004380 <StartTaskGetMagnetLSM303AGR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetMagnetLSM303AGR */
void StartTaskGetMagnetLSM303AGR(void *argument)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskGetMagnetLSM303AGR */
  /* Infinite loop */
  for(;;)
  {
	IKS01A2_MOTION_SENSOR_Axes_t axes;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <StartTaskGetMagnetLSM303AGR+0x60>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f04f 31ff 	mov.w	r1, #4294967295
 8004390:	4618      	mov	r0, r3
 8004392:	f00b fdc3 	bl	800ff1c <osSemaphoreAcquire>
	IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, &axes);
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	461a      	mov	r2, r3
 800439c:	2104      	movs	r1, #4
 800439e:	2002      	movs	r0, #2
 80043a0:	f007 f9a8 	bl	800b6f4 <IKS01A2_MOTION_SENSOR_GetAxes>
	osSemaphoreRelease(semI2CInUseHandle);
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <StartTaskGetMagnetLSM303AGR+0x60>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f00b fe1d 	bl	800ffe8 <osSemaphoreRelease>

	osSemaphoreAcquire(semMagnetLSM303AGRHandle, osWaitForever );
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <StartTaskGetMagnetLSM303AGR+0x64>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f04f 31ff 	mov.w	r1, #4294967295
 80043b6:	4618      	mov	r0, r3
 80043b8:	f00b fdb0 	bl	800ff1c <osSemaphoreAcquire>
	axesMag_LSM303AGR = axes;
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <StartTaskGetMagnetLSM303AGR+0x68>)
 80043be:	461c      	mov	r4, r3
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osSemaphoreRelease(semMagnetLSM303AGRHandle);
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <StartTaskGetMagnetLSM303AGR+0x64>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f00b fe09 	bl	800ffe8 <osSemaphoreRelease>
    osDelay(10);
 80043d6:	200a      	movs	r0, #10
 80043d8:	f00b fcd6 	bl	800fd88 <osDelay>
  {
 80043dc:	e7d4      	b.n	8004388 <StartTaskGetMagnetLSM303AGR+0x8>
 80043de:	bf00      	nop
 80043e0:	20001120 	.word	0x20001120
 80043e4:	20001118 	.word	0x20001118
 80043e8:	2000114c 	.word	0x2000114c

080043ec <StartTaskGetPressLPS22HB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskGetPressLPS22HB */
void StartTaskGetPressLPS22HB(void *argument)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	float pressure;
	osSemaphoreAcquire(semI2CInUseHandle, osWaitForever);
 80043f4:	4b12      	ldr	r3, [pc, #72]	; (8004440 <StartTaskGetPressLPS22HB+0x54>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295
 80043fc:	4618      	mov	r0, r3
 80043fe:	f00b fd8d 	bl	800ff1c <osSemaphoreAcquire>
	IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, &pressure);
 8004402:	f107 030c 	add.w	r3, r7, #12
 8004406:	461a      	mov	r2, r3
 8004408:	2102      	movs	r1, #2
 800440a:	2001      	movs	r0, #1
 800440c:	f006 fe7a 	bl	800b104 <IKS01A2_ENV_SENSOR_GetValue>
	osSemaphoreRelease(semI2CInUseHandle);
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <StartTaskGetPressLPS22HB+0x54>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f00b fde7 	bl	800ffe8 <osSemaphoreRelease>

	osSemaphoreAcquire(semPressLPS22HBHandle, osWaitForever );
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <StartTaskGetPressLPS22HB+0x58>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f04f 31ff 	mov.w	r1, #4294967295
 8004422:	4618      	mov	r0, r3
 8004424:	f00b fd7a 	bl	800ff1c <osSemaphoreAcquire>
	pressure_LPS22HB = pressure;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <StartTaskGetPressLPS22HB+0x5c>)
 800442c:	6013      	str	r3, [r2, #0]
	osSemaphoreRelease(semPressLPS22HBHandle);
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <StartTaskGetPressLPS22HB+0x58>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f00b fdd8 	bl	800ffe8 <osSemaphoreRelease>
    osDelay(20);
 8004438:	2014      	movs	r0, #20
 800443a:	f00b fca5 	bl	800fd88 <osDelay>
  {
 800443e:	e7d9      	b.n	80043f4 <StartTaskGetPressLPS22HB+0x8>
 8004440:	20001120 	.word	0x20001120
 8004444:	2000110c 	.word	0x2000110c
 8004448:	20001124 	.word	0x20001124

0800444c <StartTaskPrintUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPrintUART */
void StartTaskPrintUART(void *argument)
{
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b093      	sub	sp, #76	; 0x4c
 8004450:	af02      	add	r7, sp, #8
 8004452:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	// aquisizione dati giroscopio in mutua esclusione e stampa

	int iiSize = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(pBuf, 0x00, 1000);
 8004458:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800445c:	2100      	movs	r1, #0
 800445e:	486c      	ldr	r0, [pc, #432]	; (8004610 <StartTaskPrintUART+0x1c4>)
 8004460:	f00f f84d 	bl	80134fe <memset>
	IKS01A2_MOTION_SENSOR_Axes_t axes_gyro;
	osSemaphoreAcquire(semGyrLSM6DSLHandle, osWaitForever );
 8004464:	4b6b      	ldr	r3, [pc, #428]	; (8004614 <StartTaskPrintUART+0x1c8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	4618      	mov	r0, r3
 800446e:	f00b fd55 	bl	800ff1c <osSemaphoreAcquire>
	axes_gyro = axesGyr_LSM6DSL;
 8004472:	4a69      	ldr	r2, [pc, #420]	; (8004618 <StartTaskPrintUART+0x1cc>)
 8004474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004478:	ca07      	ldmia	r2, {r0, r1, r2}
 800447a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semGyrLSM6DSLHandle);
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <StartTaskPrintUART+0x1c8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f00b fdb0 	bl	800ffe8 <osSemaphoreRelease>
	iiSize += sprintf(&pBuf[iiSize], "Giroscopio: x:%d, y:%d, z:%d\n", (int)axes_gyro.x, (int)axes_gyro.y, (int)axes_gyro.z);
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448a:	4a61      	ldr	r2, [pc, #388]	; (8004610 <StartTaskPrintUART+0x1c4>)
 800448c:	1898      	adds	r0, r3, r2
 800448e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	460b      	mov	r3, r1
 8004498:	4960      	ldr	r1, [pc, #384]	; (800461c <StartTaskPrintUART+0x1d0>)
 800449a:	f00f ff95 	bl	80143c8 <siprintf>
 800449e:	4602      	mov	r2, r0
 80044a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a2:	4413      	add	r3, r2
 80044a4:	63fb      	str	r3, [r7, #60]	; 0x3c

	// aquisizione dati accelerometri in mutua esclusione e stampa
	IKS01A2_MOTION_SENSOR_Axes_t axes_ACC_LSM303AG;
	IKS01A2_MOTION_SENSOR_Axes_t axes_ACC_LSM6DSL;
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM303AGRHandle, osWaitForever );
 80044a6:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <StartTaskPrintUART+0x1d4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f04f 31ff 	mov.w	r1, #4294967295
 80044ae:	4618      	mov	r0, r3
 80044b0:	f00b fd34 	bl	800ff1c <osSemaphoreAcquire>
	axes_ACC_LSM303AG = axesAcc_LSM303AG;
 80044b4:	4a5b      	ldr	r2, [pc, #364]	; (8004624 <StartTaskPrintUART+0x1d8>)
 80044b6:	f107 0320 	add.w	r3, r7, #32
 80044ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80044bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM303AGRHandle);
 80044c0:	4b57      	ldr	r3, [pc, #348]	; (8004620 <StartTaskPrintUART+0x1d4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f00b fd8f 	bl	800ffe8 <osSemaphoreRelease>
	//LSM303AG sensor accelerometer
	osSemaphoreAcquire(semAccLSM6DSLHandle, osWaitForever );
 80044ca:	4b57      	ldr	r3, [pc, #348]	; (8004628 <StartTaskPrintUART+0x1dc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f04f 31ff 	mov.w	r1, #4294967295
 80044d2:	4618      	mov	r0, r3
 80044d4:	f00b fd22 	bl	800ff1c <osSemaphoreAcquire>
	axes_ACC_LSM6DSL = axesAcc_LSM6DSL;
 80044d8:	4a54      	ldr	r2, [pc, #336]	; (800462c <StartTaskPrintUART+0x1e0>)
 80044da:	f107 0314 	add.w	r3, r7, #20
 80044de:	ca07      	ldmia	r2, {r0, r1, r2}
 80044e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semAccLSM6DSLHandle);
 80044e4:	4b50      	ldr	r3, [pc, #320]	; (8004628 <StartTaskPrintUART+0x1dc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f00b fd7d 	bl	800ffe8 <osSemaphoreRelease>
	iiSize += sprintf(&pBuf[iiSize], "Accelerometro LSM303AGR: x:%d, y:%d, z:%d\n", (int)axes_ACC_LSM303AG.x, (int)axes_ACC_LSM303AG.y, (int)axes_ACC_LSM303AG.z);
 80044ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f0:	4a47      	ldr	r2, [pc, #284]	; (8004610 <StartTaskPrintUART+0x1c4>)
 80044f2:	1898      	adds	r0, r3, r2
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	460b      	mov	r3, r1
 80044fe:	494c      	ldr	r1, [pc, #304]	; (8004630 <StartTaskPrintUART+0x1e4>)
 8004500:	f00f ff62 	bl	80143c8 <siprintf>
 8004504:	4602      	mov	r2, r0
 8004506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004508:	4413      	add	r3, r2
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
	iiSize += sprintf(&pBuf[iiSize], "Accelerometro LSM6DSL: x:%d, y:%d, z:%d\n", (int)axes_ACC_LSM6DSL.x, (int)axes_ACC_LSM6DSL.y, (int)axes_ACC_LSM6DSL.z);
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <StartTaskPrintUART+0x1c4>)
 8004510:	1898      	adds	r0, r3, r2
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	460b      	mov	r3, r1
 800451c:	4945      	ldr	r1, [pc, #276]	; (8004634 <StartTaskPrintUART+0x1e8>)
 800451e:	f00f ff53 	bl	80143c8 <siprintf>
 8004522:	4602      	mov	r2, r0
 8004524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004526:	4413      	add	r3, r2
 8004528:	63fb      	str	r3, [r7, #60]	; 0x3c
	//stampa della media
	iiSize += sprintf(&pBuf[iiSize], "Accelerometro media: x:%d, y:%d, z:%d\n",
 800452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452c:	4a38      	ldr	r2, [pc, #224]	; (8004610 <StartTaskPrintUART+0x1c4>)
 800452e:	1898      	adds	r0, r3, r2
			(int)((axes_ACC_LSM303AG.x + axes_ACC_LSM6DSL.x )/2) ,
 8004530:	6a3a      	ldr	r2, [r7, #32]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	4413      	add	r3, r2
 8004536:	2b00      	cmp	r3, #0
 8004538:	da00      	bge.n	800453c <StartTaskPrintUART+0xf0>
 800453a:	3301      	adds	r3, #1
 800453c:	105b      	asrs	r3, r3, #1
 800453e:	4619      	mov	r1, r3
			(int)((axes_ACC_LSM303AG.y + axes_ACC_LSM6DSL.y )/2) ,
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	4413      	add	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	da00      	bge.n	800454c <StartTaskPrintUART+0x100>
 800454a:	3301      	adds	r3, #1
 800454c:	105b      	asrs	r3, r3, #1
 800454e:	461c      	mov	r4, r3
			(int)((axes_ACC_LSM303AG.z + axes_ACC_LSM6DSL.z )/2) );
 8004550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	da00      	bge.n	800455c <StartTaskPrintUART+0x110>
 800455a:	3301      	adds	r3, #1
 800455c:	105b      	asrs	r3, r3, #1
	iiSize += sprintf(&pBuf[iiSize], "Accelerometro media: x:%d, y:%d, z:%d\n",
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	4623      	mov	r3, r4
 8004562:	460a      	mov	r2, r1
 8004564:	4934      	ldr	r1, [pc, #208]	; (8004638 <StartTaskPrintUART+0x1ec>)
 8004566:	f00f ff2f 	bl	80143c8 <siprintf>
 800456a:	4602      	mov	r2, r0
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	4413      	add	r3, r2
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c


	// aquisizione dati del magnetometro in mutua esclusione e stampa
	IKS01A2_MOTION_SENSOR_Axes_t axes_MAG_LSM303AGR;
	osSemaphoreAcquire(semMagnetLSM303AGRHandle, osWaitForever );
 8004572:	4b32      	ldr	r3, [pc, #200]	; (800463c <StartTaskPrintUART+0x1f0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f04f 31ff 	mov.w	r1, #4294967295
 800457a:	4618      	mov	r0, r3
 800457c:	f00b fcce 	bl	800ff1c <osSemaphoreAcquire>
	axes_MAG_LSM303AGR = axesMag_LSM303AGR;
 8004580:	4a2f      	ldr	r2, [pc, #188]	; (8004640 <StartTaskPrintUART+0x1f4>)
 8004582:	f107 0308 	add.w	r3, r7, #8
 8004586:	ca07      	ldmia	r2, {r0, r1, r2}
 8004588:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osSemaphoreRelease(semMagnetLSM303AGRHandle);
 800458c:	4b2b      	ldr	r3, [pc, #172]	; (800463c <StartTaskPrintUART+0x1f0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f00b fd29 	bl	800ffe8 <osSemaphoreRelease>
	iiSize += sprintf(&pBuf[iiSize], "Magnetometro: x:%d, y:%d, z:%d\n", (int)axes_MAG_LSM303AGR.x, (int)axes_MAG_LSM303AGR.y, (int)axes_MAG_LSM303AGR.z);
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <StartTaskPrintUART+0x1c4>)
 800459a:	1898      	adds	r0, r3, r2
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	460b      	mov	r3, r1
 80045a6:	4927      	ldr	r1, [pc, #156]	; (8004644 <StartTaskPrintUART+0x1f8>)
 80045a8:	f00f ff0e 	bl	80143c8 <siprintf>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b0:	4413      	add	r3, r2
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c


	// aquisizione dati del barometro in mutua esclusione e stampa
	int pressure;
	osSemaphoreAcquire(semPressLPS22HBHandle, osWaitForever );
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <StartTaskPrintUART+0x1fc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f04f 31ff 	mov.w	r1, #4294967295
 80045bc:	4618      	mov	r0, r3
 80045be:	f00b fcad 	bl	800ff1c <osSemaphoreAcquire>
	pressure = (int)pressure_LPS22HB;
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <StartTaskPrintUART+0x200>)
 80045c4:	edd3 7a00 	vldr	s15, [r3]
 80045c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045cc:	ee17 3a90 	vmov	r3, s15
 80045d0:	63bb      	str	r3, [r7, #56]	; 0x38
	//LPS22HB_Pressure = pressure;
	osSemaphoreRelease(semPressLPS22HBHandle);
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <StartTaskPrintUART+0x1fc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f00b fd06 	bl	800ffe8 <osSemaphoreRelease>
	iiSize += sprintf(&pBuf[iiSize], "Pressione: %d\n\n", pressure);
 80045dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045de:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <StartTaskPrintUART+0x1c4>)
 80045e0:	4413      	add	r3, r2
 80045e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e4:	491a      	ldr	r1, [pc, #104]	; (8004650 <StartTaskPrintUART+0x204>)
 80045e6:	4618      	mov	r0, r3
 80045e8:	f00f feee 	bl	80143c8 <siprintf>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f0:	4413      	add	r3, r2
 80045f2:	63fb      	str	r3, [r7, #60]	; 0x3c

	HAL_UART_Transmit(&huart3, (const uint8_t *)pBuf, iiSize, 1000);
 80045f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045fc:	4904      	ldr	r1, [pc, #16]	; (8004610 <StartTaskPrintUART+0x1c4>)
 80045fe:	4815      	ldr	r0, [pc, #84]	; (8004654 <StartTaskPrintUART+0x208>)
 8004600:	f00a fb18 	bl	800ec34 <HAL_UART_Transmit>
	//printf(pBuf);

	//printf("");
    osDelay(2000);
 8004604:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004608:	f00b fbbe 	bl	800fd88 <osDelay>
  {
 800460c:	e722      	b.n	8004454 <StartTaskPrintUART+0x8>
 800460e:	bf00      	nop
 8004610:	20001158 	.word	0x20001158
 8004614:	2000111c 	.word	0x2000111c
 8004618:	20001140 	.word	0x20001140
 800461c:	08017ff4 	.word	0x08017ff4
 8004620:	20001110 	.word	0x20001110
 8004624:	20001128 	.word	0x20001128
 8004628:	20001114 	.word	0x20001114
 800462c:	20001134 	.word	0x20001134
 8004630:	08018014 	.word	0x08018014
 8004634:	08018040 	.word	0x08018040
 8004638:	0801806c 	.word	0x0801806c
 800463c:	20001118 	.word	0x20001118
 8004640:	2000114c 	.word	0x2000114c
 8004644:	08018094 	.word	0x08018094
 8004648:	2000110c 	.word	0x2000110c
 800464c:	20001124 	.word	0x20001124
 8004650:	080180b4 	.word	0x080180b4
 8004654:	20000b58 	.word	0x20000b58

08004658 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a04      	ldr	r2, [pc, #16]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800466a:	f007 fa99 	bl	800bba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000

0800467c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004680:	b672      	cpsid	i
}
 8004682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004684:	e7fe      	b.n	8004684 <Error_Handler+0x8>

08004686 <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	da01      	bge.n	800469e <constrain+0x18>
        return low;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	e006      	b.n	80046ac <constrain+0x26>
    else if (amt > high)
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	dd01      	ble.n	80046aa <constrain+0x24>
        return high;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	e000      	b.n	80046ac <constrain+0x26>
    else
        return amt;
 80046aa:	68fb      	ldr	r3, [r7, #12]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	ed87 0a03 	vstr	s0, [r7, #12]
 80046c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80046c6:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 80046ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80046ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80046d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046da:	d501      	bpl.n	80046e0 <constrainf+0x28>
        return low;
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	e00b      	b.n	80046f8 <constrainf+0x40>
    else if (amt > high)
 80046e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80046e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80046e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	dd01      	ble.n	80046f6 <constrainf+0x3e>
        return high;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	e000      	b.n	80046f8 <constrainf+0x40>
    else
        return amt;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0
    return true;
 800470e:	2301      	movs	r3, #1
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <pidAntiGravityEnabled+0x14>)
 8004722:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	200015d8 	.word	0x200015d8

08004734 <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <pidSetTargetLooptime+0x48>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 8004742:	4b0e      	ldr	r3, [pc, #56]	; (800477c <pidSetTargetLooptime+0x48>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004780 <pidSetTargetLooptime+0x4c>
 8004752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <pidSetTargetLooptime+0x50>)
 8004758:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <pidSetTargetLooptime+0x50>)
 800475e:	ed93 7a00 	vldr	s14, [r3]
 8004762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <pidSetTargetLooptime+0x50>)
 800476c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20001824 	.word	0x20001824
 8004780:	358637bd 	.word	0x358637bd
 8004784:	200015d8 	.word	0x200015d8

08004788 <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b091      	sub	sp, #68	; 0x44
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 8004790:	4bb0      	ldr	r3, [pc, #704]	; (8004a54 <pidInitFilters+0x2cc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10f      	bne.n	80047b8 <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 8004798:	4baf      	ldr	r3, [pc, #700]	; (8004a58 <pidInitFilters+0x2d0>)
 800479a:	4ab0      	ldr	r2, [pc, #704]	; (8004a5c <pidInitFilters+0x2d4>)
 800479c:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 800479e:	4bae      	ldr	r3, [pc, #696]	; (8004a58 <pidInitFilters+0x2d0>)
 80047a0:	4aae      	ldr	r2, [pc, #696]	; (8004a5c <pidInitFilters+0x2d4>)
 80047a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 80047a6:	4bac      	ldr	r3, [pc, #688]	; (8004a58 <pidInitFilters+0x2d0>)
 80047a8:	4aac      	ldr	r2, [pc, #688]	; (8004a5c <pidInitFilters+0x2d4>)
 80047aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 80047ae:	4baa      	ldr	r3, [pc, #680]	; (8004a58 <pidInitFilters+0x2d0>)
 80047b0:	4aaa      	ldr	r2, [pc, #680]	; (8004a5c <pidInitFilters+0x2d4>)
 80047b2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 80047b6:	e267      	b.n	8004c88 <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 80047b8:	4ba7      	ldr	r3, [pc, #668]	; (8004a58 <pidInitFilters+0x2d0>)
 80047ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80047be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80047c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ca:	ee17 3a90 	vmov	r3, s15
 80047ce:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	889b      	ldrh	r3, [r3, #4]
 80047d4:	461a      	mov	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4293      	cmp	r3, r2
 80047da:	d303      	bcc.n	80047e4 <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	889b      	ldrh	r3, [r3, #4]
 80047e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047e2:	e00a      	b.n	80047fa <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	88db      	ldrh	r3, [r3, #6]
 80047e8:	461a      	mov	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d902      	bls.n	80047f6 <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047f4:	e001      	b.n	80047fa <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 80047fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d03d      	beq.n	800487c <pidInitFilters+0xf4>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	88db      	ldrh	r3, [r3, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d039      	beq.n	800487c <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004808:	4b93      	ldr	r3, [pc, #588]	; (8004a58 <pidInitFilters+0x2d0>)
 800480a:	4a95      	ldr	r2, [pc, #596]	; (8004a60 <pidInitFilters+0x2d8>)
 800480c:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 800480e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	88db      	ldrh	r3, [r3, #6]
 800481c:	ee07 3a10 	vmov	s14, r3
 8004820:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004824:	eef0 0a47 	vmov.f32	s1, s14
 8004828:	eeb0 0a67 	vmov.f32	s0, s15
 800482c:	f7fc fc6e 	bl	800110c <filterGetNotchQ>
 8004830:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004834:	2300      	movs	r3, #0
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
 8004838:	e01c      	b.n	8004874 <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 800483a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3318      	adds	r3, #24
 8004846:	4a84      	ldr	r2, [pc, #528]	; (8004a58 <pidInitFilters+0x2d0>)
 8004848:	4413      	add	r3, r2
 800484a:	3304      	adds	r3, #4
 800484c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800484e:	ee07 2a90 	vmov	s15, r2
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	4a7f      	ldr	r2, [pc, #508]	; (8004a54 <pidInitFilters+0x2cc>)
 8004858:	6811      	ldr	r1, [r2, #0]
 800485a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800485e:	2201      	movs	r2, #1
 8004860:	edd7 0a04 	vldr	s1, [r7, #16]
 8004864:	eeb0 0a67 	vmov.f32	s0, s15
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc fce1 	bl	8001230 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	3301      	adds	r3, #1
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	2b02      	cmp	r3, #2
 8004878:	dddf      	ble.n	800483a <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 800487a:	e002      	b.n	8004882 <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 800487c:	4b76      	ldr	r3, [pc, #472]	; (8004a58 <pidInitFilters+0x2d0>)
 800487e:	4a77      	ldr	r2, [pc, #476]	; (8004a5c <pidInitFilters+0x2d4>)
 8004880:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	885b      	ldrh	r3, [r3, #2]
 8004886:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80c6 	beq.w	8004a1c <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004896:	2b03      	cmp	r3, #3
 8004898:	f200 80bb 	bhi.w	8004a12 <pidInitFilters+0x28a>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <pidInitFilters+0x11c>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	0800490b 	.word	0x0800490b
 80048ac:	08004967 	.word	0x08004967
 80048b0:	080049bd 	.word	0x080049bd
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 80048b4:	4b68      	ldr	r3, [pc, #416]	; (8004a58 <pidInitFilters+0x2d0>)
 80048b6:	4a6b      	ldr	r2, [pc, #428]	; (8004a64 <pidInitFilters+0x2dc>)
 80048b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
 80048c0:	e01f      	b.n	8004902 <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80048c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	3398      	adds	r3, #152	; 0x98
 80048ce:	4a62      	ldr	r2, [pc, #392]	; (8004a58 <pidInitFilters+0x2d0>)
 80048d0:	189c      	adds	r4, r3, r2
 80048d2:	89fb      	ldrh	r3, [r7, #14]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048dc:	4b5e      	ldr	r3, [pc, #376]	; (8004a58 <pidInitFilters+0x2d0>)
 80048de:	ed93 7a00 	vldr	s14, [r3]
 80048e2:	eef0 0a47 	vmov.f32	s1, s14
 80048e6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ea:	f7fc fc41 	bl	8001170 <pt1FilterGain>
 80048ee:	eef0 7a40 	vmov.f32	s15, s0
 80048f2:	eeb0 0a67 	vmov.f32	s0, s15
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7fc fc62 	bl	80011c0 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	3301      	adds	r3, #1
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	2b02      	cmp	r3, #2
 8004906:	dddc      	ble.n	80048c2 <pidInitFilters+0x13a>
            }
            break;
 8004908:	e08c      	b.n	8004a24 <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	885b      	ldrh	r3, [r3, #2]
 800490e:	461a      	mov	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4293      	cmp	r3, r2
 8004914:	d922      	bls.n	800495c <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004916:	4b50      	ldr	r3, [pc, #320]	; (8004a58 <pidInitFilters+0x2d0>)
 8004918:	4a51      	ldr	r2, [pc, #324]	; (8004a60 <pidInitFilters+0x2d8>)
 800491a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800491e:	2300      	movs	r3, #0
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
 8004922:	e017      	b.n	8004954 <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 8004924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	3398      	adds	r3, #152	; 0x98
 8004930:	4a49      	ldr	r2, [pc, #292]	; (8004a58 <pidInitFilters+0x2d0>)
 8004932:	4413      	add	r3, r2
 8004934:	89fa      	ldrh	r2, [r7, #14]
 8004936:	ee07 2a90 	vmov	s15, r2
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	4a45      	ldr	r2, [pc, #276]	; (8004a54 <pidInitFilters+0x2cc>)
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4611      	mov	r1, r2
 8004944:	eeb0 0a67 	vmov.f32	s0, s15
 8004948:	4618      	mov	r0, r3
 800494a:	f7fc fc9f 	bl	800128c <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	3301      	adds	r3, #1
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	2b02      	cmp	r3, #2
 8004958:	dde4      	ble.n	8004924 <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 800495a:	e063      	b.n	8004a24 <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 800495c:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <pidInitFilters+0x2d0>)
 800495e:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <pidInitFilters+0x2d4>)
 8004960:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004964:	e05e      	b.n	8004a24 <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004966:	4b3c      	ldr	r3, [pc, #240]	; (8004a58 <pidInitFilters+0x2d0>)
 8004968:	4a3f      	ldr	r2, [pc, #252]	; (8004a68 <pidInitFilters+0x2e0>)
 800496a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800496e:	2300      	movs	r3, #0
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004972:	e01f      	b.n	80049b4 <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	3398      	adds	r3, #152	; 0x98
 8004980:	4a35      	ldr	r2, [pc, #212]	; (8004a58 <pidInitFilters+0x2d0>)
 8004982:	189c      	adds	r4, r3, r2
 8004984:	89fb      	ldrh	r3, [r7, #14]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	4b32      	ldr	r3, [pc, #200]	; (8004a58 <pidInitFilters+0x2d0>)
 8004990:	ed93 7a00 	vldr	s14, [r3]
 8004994:	eef0 0a47 	vmov.f32	s1, s14
 8004998:	eeb0 0a67 	vmov.f32	s0, s15
 800499c:	f7fc fdc8 	bl	8001530 <pt2FilterGain>
 80049a0:	eef0 7a40 	vmov.f32	s15, s0
 80049a4:	eeb0 0a67 	vmov.f32	s0, s15
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7fc fe0f 	bl	80015cc <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	3301      	adds	r3, #1
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	dddc      	ble.n	8004974 <pidInitFilters+0x1ec>
            }
            break;
 80049ba:	e033      	b.n	8004a24 <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 80049bc:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <pidInitFilters+0x2d0>)
 80049be:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <pidInitFilters+0x2e4>)
 80049c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c8:	e01f      	b.n	8004a0a <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80049ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	3398      	adds	r3, #152	; 0x98
 80049d6:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <pidInitFilters+0x2d0>)
 80049d8:	189c      	adds	r4, r3, r2
 80049da:	89fb      	ldrh	r3, [r7, #14]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <pidInitFilters+0x2d0>)
 80049e6:	ed93 7a00 	vldr	s14, [r3]
 80049ea:	eef0 0a47 	vmov.f32	s1, s14
 80049ee:	eeb0 0a67 	vmov.f32	s0, s15
 80049f2:	f7fc fe3d 	bl	8001670 <pt3FilterGain>
 80049f6:	eef0 7a40 	vmov.f32	s15, s0
 80049fa:	eeb0 0a67 	vmov.f32	s0, s15
 80049fe:	4620      	mov	r0, r4
 8004a00:	f7fc fe84 	bl	800170c <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	3301      	adds	r3, #1
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	dddc      	ble.n	80049ca <pidInitFilters+0x242>
            }
            break;
 8004a10:	e008      	b.n	8004a24 <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <pidInitFilters+0x2d0>)
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <pidInitFilters+0x2d4>)
 8004a16:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004a1a:	e003      	b.n	8004a24 <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <pidInitFilters+0x2d0>)
 8004a1e:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <pidInitFilters+0x2d4>)
 8004a20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80e5 	beq.w	8004bfa <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	f200 80da 	bhi.w	8004bf0 <pidInitFilters+0x468>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <pidInitFilters+0x2bc>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004acf 	.word	0x08004acf
 8004a4c:	08004b35 	.word	0x08004b35
 8004a50:	08004b93 	.word	0x08004b93
 8004a54:	20001824 	.word	0x20001824
 8004a58:	200015d8 	.word	0x200015d8
 8004a5c:	08001151 	.word	0x08001151
 8004a60:	080012bd 	.word	0x080012bd
 8004a64:	080011e7 	.word	0x080011e7
 8004a68:	080015fb 	.word	0x080015fb
 8004a6c:	08001743 	.word	0x08001743
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004a70:	4b87      	ldr	r3, [pc, #540]	; (8004c90 <pidInitFilters+0x508>)
 8004a72:	4a88      	ldr	r2, [pc, #544]	; (8004c94 <pidInitFilters+0x50c>)
 8004a74:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7c:	e023      	b.n	8004ac6 <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004a8c:	4a80      	ldr	r2, [pc, #512]	; (8004c90 <pidInitFilters+0x508>)
 8004a8e:	4413      	add	r3, r2
 8004a90:	1d1c      	adds	r4, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa0:	4b7b      	ldr	r3, [pc, #492]	; (8004c90 <pidInitFilters+0x508>)
 8004aa2:	ed93 7a00 	vldr	s14, [r3]
 8004aa6:	eef0 0a47 	vmov.f32	s1, s14
 8004aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004aae:	f7fc fb5f 	bl	8001170 <pt1FilterGain>
 8004ab2:	eef0 7a40 	vmov.f32	s15, s0
 8004ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7fc fb80 	bl	80011c0 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	ddd8      	ble.n	8004a7e <pidInitFilters+0x2f6>
            }
            break;
 8004acc:	e099      	b.n	8004c02 <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d926      	bls.n	8004b2a <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8004adc:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <pidInitFilters+0x508>)
 8004ade:	4a6e      	ldr	r2, [pc, #440]	; (8004c98 <pidInitFilters+0x510>)
 8004ae0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	e01b      	b.n	8004b22 <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 8004aea:	6a3a      	ldr	r2, [r7, #32]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004af8:	4a65      	ldr	r2, [pc, #404]	; (8004c90 <pidInitFilters+0x508>)
 8004afa:	4413      	add	r3, r2
 8004afc:	1d1a      	adds	r2, r3, #4
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0c:	4b63      	ldr	r3, [pc, #396]	; (8004c9c <pidInitFilters+0x514>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	eeb0 0a67 	vmov.f32	s0, s15
 8004b16:	4610      	mov	r0, r2
 8004b18:	f7fc fbb8 	bl	800128c <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	623b      	str	r3, [r7, #32]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	dde0      	ble.n	8004aea <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004b28:	e06b      	b.n	8004c02 <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004b2a:	4b59      	ldr	r3, [pc, #356]	; (8004c90 <pidInitFilters+0x508>)
 8004b2c:	4a5c      	ldr	r2, [pc, #368]	; (8004ca0 <pidInitFilters+0x518>)
 8004b2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004b32:	e066      	b.n	8004c02 <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004b34:	4b56      	ldr	r3, [pc, #344]	; (8004c90 <pidInitFilters+0x508>)
 8004b36:	4a5b      	ldr	r2, [pc, #364]	; (8004ca4 <pidInitFilters+0x51c>)
 8004b38:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	e023      	b.n	8004b8a <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004b50:	4a4f      	ldr	r2, [pc, #316]	; (8004c90 <pidInitFilters+0x508>)
 8004b52:	4413      	add	r3, r2
 8004b54:	1d1c      	adds	r4, r3, #4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b64:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <pidInitFilters+0x508>)
 8004b66:	ed93 7a00 	vldr	s14, [r3]
 8004b6a:	eef0 0a47 	vmov.f32	s1, s14
 8004b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b72:	f7fc fcdd 	bl	8001530 <pt2FilterGain>
 8004b76:	eef0 7a40 	vmov.f32	s15, s0
 8004b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f7fc fd24 	bl	80015cc <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	3301      	adds	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	ddd8      	ble.n	8004b42 <pidInitFilters+0x3ba>
            }
            break;
 8004b90:	e037      	b.n	8004c02 <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8004b92:	4b3f      	ldr	r3, [pc, #252]	; (8004c90 <pidInitFilters+0x508>)
 8004b94:	4a44      	ldr	r2, [pc, #272]	; (8004ca8 <pidInitFilters+0x520>)
 8004b96:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e023      	b.n	8004be8 <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004bae:	4a38      	ldr	r2, [pc, #224]	; (8004c90 <pidInitFilters+0x508>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	1d1c      	adds	r4, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	4b33      	ldr	r3, [pc, #204]	; (8004c90 <pidInitFilters+0x508>)
 8004bc4:	ed93 7a00 	vldr	s14, [r3]
 8004bc8:	eef0 0a47 	vmov.f32	s1, s14
 8004bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd0:	f7fc fd4e 	bl	8001670 <pt3FilterGain>
 8004bd4:	eef0 7a40 	vmov.f32	s15, s0
 8004bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7fc fd95 	bl	800170c <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	ddd8      	ble.n	8004ba0 <pidInitFilters+0x418>
            }
            break;
 8004bee:	e008      	b.n	8004c02 <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004bf0:	4b27      	ldr	r3, [pc, #156]	; (8004c90 <pidInitFilters+0x508>)
 8004bf2:	4a2b      	ldr	r2, [pc, #172]	; (8004ca0 <pidInitFilters+0x518>)
 8004bf4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 8004bf8:	e003      	b.n	8004c02 <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004bfa:	4b25      	ldr	r3, [pc, #148]	; (8004c90 <pidInitFilters+0x508>)
 8004bfc:	4a28      	ldr	r2, [pc, #160]	; (8004ca0 <pidInitFilters+0x518>)
 8004bfe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <pidInitFilters+0x508>)
 8004c0c:	4a24      	ldr	r2, [pc, #144]	; (8004ca0 <pidInitFilters+0x518>)
 8004c0e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8004c12:	e019      	b.n	8004c48 <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004c14:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <pidInitFilters+0x508>)
 8004c16:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <pidInitFilters+0x50c>)
 8004c18:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c28:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <pidInitFilters+0x508>)
 8004c2a:	ed93 7a00 	vldr	s14, [r3]
 8004c2e:	eef0 0a47 	vmov.f32	s1, s14
 8004c32:	eeb0 0a67 	vmov.f32	s0, s15
 8004c36:	f7fc fa9b 	bl	8001170 <pt1FilterGain>
 8004c3a:	eef0 7a40 	vmov.f32	s15, s0
 8004c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c42:	481a      	ldr	r0, [pc, #104]	; (8004cac <pidInitFilters+0x524>)
 8004c44:	f7fc fabc 	bl	80011c0 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <pidInitFilters+0x508>)
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	eef0 0a67 	vmov.f32	s1, s15
 8004c52:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004c56:	f7fc fa8b 	bl	8001170 <pt1FilterGain>
 8004c5a:	eef0 7a40 	vmov.f32	s15, s0
 8004c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c62:	4813      	ldr	r0, [pc, #76]	; (8004cb0 <pidInitFilters+0x528>)
 8004c64:	f7fc faac 	bl	80011c0 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 8004c68:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <pidInitFilters+0x508>)
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	eef0 0a67 	vmov.f32	s1, s15
 8004c72:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004c76:	f7fc fa7b 	bl	8001170 <pt1FilterGain>
 8004c7a:	eef0 7a40 	vmov.f32	s15, s0
 8004c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c82:	480c      	ldr	r0, [pc, #48]	; (8004cb4 <pidInitFilters+0x52c>)
 8004c84:	f7fc fa9c 	bl	80011c0 <pt1FilterInit>
}
 8004c88:	3744      	adds	r7, #68	; 0x44
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200015d8 	.word	0x200015d8
 8004c94:	080011e7 	.word	0x080011e7
 8004c98:	080012bd 	.word	0x080012bd
 8004c9c:	20001824 	.word	0x20001824
 8004ca0:	08001151 	.word	0x08001151
 8004ca4:	080015fb 	.word	0x080015fb
 8004ca8:	08001743 	.word	0x08001743
 8004cac:	20001768 	.word	0x20001768
 8004cb0:	20001774 	.word	0x20001774
 8004cb4:	2000177c 	.word	0x2000177c

08004cb8 <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e069      	b.n	8004d9a <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	4413      	add	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ce0:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005014 <pidInitConfig+0x35c>
 8004ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce8:	4acb      	ldr	r2, [pc, #812]	; (8005018 <pidInitConfig+0x360>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	331c      	adds	r3, #28
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4413      	add	r3, r2
 8004d00:	005b      	lsls	r3, r3, #1
 8004d02:	440b      	add	r3, r1
 8004d04:	3309      	adds	r3, #9
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d10:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800501c <pidInitConfig+0x364>
 8004d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d18:	4abf      	ldr	r2, [pc, #764]	; (8005018 <pidInitConfig+0x360>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	331c      	adds	r3, #28
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	4413      	add	r3, r2
 8004d22:	3304      	adds	r3, #4
 8004d24:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	440b      	add	r3, r1
 8004d36:	330a      	adds	r3, #10
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d42:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005020 <pidInitConfig+0x368>
 8004d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d4a:	4ab3      	ldr	r2, [pc, #716]	; (8005018 <pidInitConfig+0x360>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004d56:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	440b      	add	r3, r1
 8004d68:	330c      	adds	r3, #12
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d74:	eddf 6aab 	vldr	s13, [pc, #684]	; 8005024 <pidInitConfig+0x36c>
 8004d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d7c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8005028 <pidInitConfig+0x370>
 8004d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d84:	4aa4      	ldr	r2, [pc, #656]	; (8005018 <pidInitConfig+0x360>)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8004d90:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	dd92      	ble.n	8004cc6 <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 8004da0:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <pidInitConfig+0x360>)
 8004da2:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004da6:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8004daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dae:	4b9a      	ldr	r3, [pc, #616]	; (8005018 <pidInitConfig+0x360>)
 8004db0:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7e9b      	ldrb	r3, [r3, #26]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dc8:	4b93      	ldr	r3, [pc, #588]	; (8005018 <pidInitConfig+0x360>)
 8004dca:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7edb      	ldrb	r3, [r3, #27]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dda:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004dde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004de2:	4b8d      	ldr	r3, [pc, #564]	; (8005018 <pidInitConfig+0x360>)
 8004de4:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7f1b      	ldrb	r3, [r3, #28]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df4:	4b88      	ldr	r3, [pc, #544]	; (8005018 <pidInitConfig+0x360>)
 8004df6:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8004e00:	4b85      	ldr	r3, [pc, #532]	; (8005018 <pidInitConfig+0x360>)
 8004e02:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004e0c:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 8004e10:	ee07 3a90 	vmov	s15, r3
 8004e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e18:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800502c <pidInitConfig+0x374>
 8004e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e20:	4b7d      	ldr	r3, [pc, #500]	; (8005018 <pidInitConfig+0x360>)
 8004e22:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004e2c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e38:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005030 <pidInitConfig+0x378>
 8004e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e40:	4b75      	ldr	r3, [pc, #468]	; (8005018 <pidInitConfig+0x360>)
 8004e42:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2364      	movs	r3, #100	; 0x64
 8004e4e:	fb02 f303 	mul.w	r3, r2, r3
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e5a:	4b6f      	ldr	r3, [pc, #444]	; (8005018 <pidInitConfig+0x360>)
 8004e5c:	edd3 7a00 	vldr	s15, [r3]
 8004e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e64:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <pidInitConfig+0x360>)
 8004e66:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 8004e6a:	4b6b      	ldr	r3, [pc, #428]	; (8005018 <pidInitConfig+0x360>)
 8004e6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004e70:	4a69      	ldr	r2, [pc, #420]	; (8005018 <pidInitConfig+0x360>)
 8004e72:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2364      	movs	r3, #100	; 0x64
 8004e7e:	fb02 f303 	mul.w	r3, r2, r3
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e8a:	4b63      	ldr	r3, [pc, #396]	; (8005018 <pidInitConfig+0x360>)
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e94:	4b60      	ldr	r3, [pc, #384]	; (8005018 <pidInitConfig+0x360>)
 8004e96:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 8004e9a:	4b5f      	ldr	r3, [pc, #380]	; (8005018 <pidInitConfig+0x360>)
 8004e9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004eaa:	2b63      	cmp	r3, #99	; 0x63
 8004eac:	d819      	bhi.n	8004ee2 <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004eb4:	ee07 3a90 	vmov	s15, r3
 8004eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ebc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8005024 <pidInitConfig+0x36c>
 8004ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ec4:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 8004ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ed0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004edc:	4b4e      	ldr	r3, [pc, #312]	; (8005018 <pidInitConfig+0x360>)
 8004ede:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <pidInitConfig+0x360>)
 8004ee8:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef8:	fb02 f303 	mul.w	r3, r2, r3
 8004efc:	4a46      	ldr	r2, [pc, #280]	; (8005018 <pidInitConfig+0x360>)
 8004efe:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	4a41      	ldr	r2, [pc, #260]	; (8005018 <pidInitConfig+0x360>)
 8004f14:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b3b      	ldr	r3, [pc, #236]	; (8005018 <pidInitConfig+0x360>)
 8004f2c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	4b36      	ldr	r3, [pc, #216]	; (8005018 <pidInitConfig+0x360>)
 8004f40:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f50:	4b31      	ldr	r3, [pc, #196]	; (8005018 <pidInitConfig+0x360>)
 8004f52:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <pidInitConfig+0x360>)
 8004f64:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	ee07 3a90 	vmov	s15, r3
 8004f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <pidInitConfig+0x360>)
 8004f76:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f88:	4b23      	ldr	r3, [pc, #140]	; (8005018 <pidInitConfig+0x360>)
 8004f8a:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <pidInitConfig+0x360>)
 8004f9e:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	; (8005018 <pidInitConfig+0x360>)
 8004faa:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004fb4:	4b18      	ldr	r3, [pc, #96]	; (8005018 <pidInitConfig+0x360>)
 8004fb6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <pidInitConfig+0x360>)
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <pidInitConfig+0x360>)
 8004fc6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <pidInitConfig+0x360>)
 8004fd0:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <pidInitConfig+0x360>)
 8004fd6:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004fe2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005034 <pidInitConfig+0x37c>
 8004fe6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004fea:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8004fee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <pidInitConfig+0x360>)
 8004ff8:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <pidInitConfig+0x360>)
 8005004:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	3d0330d7 	.word	0x3d0330d7
 8005018:	200015d8 	.word	0x200015d8
 800501c:	3e7a3f03 	.word	0x3e7a3f03
 8005020:	3a0aac97 	.word	0x3a0aac97
 8005024:	42c80000 	.word	0x42c80000
 8005028:	3c615875 	.word	0x3c615875
 800502c:	3fe66666 	.word	0x3fe66666
 8005030:	3c23d70a 	.word	0x3c23d70a
 8005034:	447a0000 	.word	0x447a0000

08005038 <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 8005040:	2294      	movs	r2, #148	; 0x94
 8005042:	4907      	ldr	r1, [pc, #28]	; (8005060 <resetPidProfile+0x28>)
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f00e fa4c 	bl	80134e2 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	221e      	movs	r2, #30
 800504e:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	741a      	strb	r2, [r3, #16]
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	08018280 	.word	0x08018280

08005064 <pidInit>:

void pidInit(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <pidInit+0xb8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff ffe2 	bl	8005038 <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 8005074:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <pidInit+0xbc>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fb5b 	bl	8004734 <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <pidInit+0xb8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fb80 	bl	8004788 <pidInitFilters>
    pidInitConfig(currentPidProfile);
 8005088:	4b24      	ldr	r3, [pc, #144]	; (800511c <pidInit+0xb8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff fe13 	bl	8004cb8 <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	e038      	b.n	800510a <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 8005098:	4922      	ldr	r1, [pc, #136]	; (8005124 <pidInit+0xc0>)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 80050ac:	491d      	ldr	r1, [pc, #116]	; (8005124 <pidInit+0xc0>)
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	3304      	adds	r3, #4
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 80050c2:	4918      	ldr	r1, [pc, #96]	; (8005124 <pidInit+0xc0>)
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	3308      	adds	r3, #8
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 80050d8:	4912      	ldr	r1, [pc, #72]	; (8005124 <pidInit+0xc0>)
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	330c      	adds	r3, #12
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 80050ee:	490d      	ldr	r1, [pc, #52]	; (8005124 <pidInit+0xc0>)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3310      	adds	r3, #16
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3301      	adds	r3, #1
 8005108:	607b      	str	r3, [r7, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b02      	cmp	r3, #2
 800510e:	ddc3      	ble.n	8005098 <pidInit+0x34>
    }
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	2000003c 	.word	0x2000003c
 8005120:	20000614 	.word	0x20000614
 8005124:	20001834 	.word	0x20001834

08005128 <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 800512e:	4b35      	ldr	r3, [pc, #212]	; (8005204 <rotateItermAndAxisError+0xdc>)
 8005130:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8005134:	2b00      	cmp	r3, #0
 8005136:	d060      	beq.n	80051fa <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 8005138:	4b32      	ldr	r3, [pc, #200]	; (8005204 <rotateItermAndAxisError+0xdc>)
 800513a:	edd3 7a00 	vldr	s15, [r3]
 800513e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005208 <rotateItermAndAxisError+0xe0>
 8005142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005146:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
 800514e:	e015      	b.n	800517c <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 8005150:	4a2e      	ldr	r2, [pc, #184]	; (800520c <rotateItermAndAxisError+0xe4>)
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	3306      	adds	r3, #6
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	ed93 7a00 	vldr	s14, [r3]
 8005160:	edd7 7a06 	vldr	s15, [r7, #24]
 8005164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	3328      	adds	r3, #40	; 0x28
 800516e:	443b      	add	r3, r7
 8005170:	3b1c      	subs	r3, #28
 8005172:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	3301      	adds	r3, #1
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	2b02      	cmp	r3, #2
 8005180:	dde6      	ble.n	8005150 <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 8005182:	4b20      	ldr	r3, [pc, #128]	; (8005204 <rotateItermAndAxisError+0xdc>)
 8005184:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8005188:	2b00      	cmp	r3, #0
 800518a:	d036      	beq.n	80051fa <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800518c:	2300      	movs	r3, #0
 800518e:	623b      	str	r3, [r7, #32]
 8005190:	e011      	b.n	80051b6 <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 8005192:	491f      	ldr	r1, [pc, #124]	; (8005210 <rotateItermAndAxisError+0xe8>)
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	3304      	adds	r3, #4
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	3328      	adds	r3, #40	; 0x28
 80051aa:	443b      	add	r3, r7
 80051ac:	3b28      	subs	r3, #40	; 0x28
 80051ae:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	3301      	adds	r3, #1
 80051b4:	623b      	str	r3, [r7, #32]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	ddea      	ble.n	8005192 <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 80051bc:	f107 020c 	add.w	r2, r7, #12
 80051c0:	463b      	mov	r3, r7
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fc fceb 	bl	8001ba0 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	e011      	b.n	80051f4 <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	3328      	adds	r3, #40	; 0x28
 80051d6:	443b      	add	r3, r7
 80051d8:	3b28      	subs	r3, #40	; 0x28
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	480c      	ldr	r0, [pc, #48]	; (8005210 <rotateItermAndAxisError+0xe8>)
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4403      	add	r3, r0
 80051ea:	3304      	adds	r3, #4
 80051ec:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3301      	adds	r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	ddea      	ble.n	80051d0 <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 80051fa:	bf00      	nop
 80051fc:	3728      	adds	r7, #40	; 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200015d8 	.word	0x200015d8
 8005208:	3c8efa35 	.word	0x3c8efa35
 800520c:	20000614 	.word	0x20000614
 8005210:	20001834 	.word	0x20001834

08005214 <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 800521c:	4a06      	ldr	r2, [pc, #24]	; (8005238 <getSetpointRate+0x24>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	ee07 3a90 	vmov	s15, r3
}
 800522a:	eeb0 0a67 	vmov.f32	s0, s15
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	20001828 	.word	0x20001828

0800523c <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 8005248:	4a29      	ldr	r2, [pc, #164]	; (80052f0 <accelerationLimit+0xb4>)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	edd3 7a00 	vldr	s15, [r3]
 8005254:	ed97 7a00 	vldr	s14, [r7]
 8005258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800525c:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 8005260:	edd7 7a03 	vldr	s15, [r7, #12]
 8005264:	eeb0 7ae7 	vabs.f32	s14, s15
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <accelerationLimit+0xb8>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3382      	adds	r3, #130	; 0x82
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	edd3 7a00 	vldr	s15, [r3]
 8005276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	dd27      	ble.n	80052d0 <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 8005280:	edd7 7a03 	vldr	s15, [r7, #12]
 8005284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	dd0f      	ble.n	80052ae <accelerationLimit+0x72>
 800528e:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <accelerationLimit+0xb4>)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	ed93 7a00 	vldr	s14, [r3]
 800529a:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <accelerationLimit+0xb8>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3382      	adds	r3, #130	; 0x82
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	edd3 7a00 	vldr	s15, [r3]
 80052a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052ac:	e00e      	b.n	80052cc <accelerationLimit+0x90>
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <accelerationLimit+0xb4>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	ed93 7a00 	vldr	s14, [r3]
 80052ba:	4a0e      	ldr	r2, [pc, #56]	; (80052f4 <accelerationLimit+0xb8>)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3382      	adds	r3, #130	; 0x82
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052cc:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 80052d0:	4a07      	ldr	r2, [pc, #28]	; (80052f0 <accelerationLimit+0xb4>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	ee07 3a90 	vmov	s15, r3
}
 80052e2:	eeb0 0a67 	vmov.f32	s0, s15
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	2000191c 	.word	0x2000191c
 80052f4:	200015d8 	.word	0x200015d8

080052f8 <pidResetIterm>:

static void pidResetIterm(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	e00d      	b.n	8005320 <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8005304:	490b      	ldr	r1, [pc, #44]	; (8005334 <pidResetIterm+0x3c>)
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3304      	adds	r3, #4
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3301      	adds	r3, #1
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b02      	cmp	r3, #2
 8005324:	ddee      	ble.n	8005304 <pidResetIterm+0xc>
    }
}
 8005326:	bf00      	nop
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	20001834 	.word	0x20001834

08005338 <pidController>:

void pidController(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b09c      	sub	sp, #112	; 0x70
 800533c:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 800533e:	4bbd      	ldr	r3, [pc, #756]	; (8005634 <pidController+0x2fc>)
 8005340:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8005344:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 800534c:	4bb9      	ldr	r3, [pc, #740]	; (8005634 <pidController+0x2fc>)
 800534e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8005352:	2b00      	cmp	r3, #0
 8005354:	d140      	bne.n	80053d8 <pidController+0xa0>
 8005356:	4bb7      	ldr	r3, [pc, #732]	; (8005634 <pidController+0x2fc>)
 8005358:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800535c:	2b00      	cmp	r3, #0
 800535e:	d03b      	beq.n	80053d8 <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 8005360:	4bb4      	ldr	r3, [pc, #720]	; (8005634 <pidController+0x2fc>)
 8005362:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8005366:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8005638 <pidController+0x300>
 800536a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800536e:	4bb1      	ldr	r3, [pc, #708]	; (8005634 <pidController+0x2fc>)
 8005370:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800537c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005380:	4bac      	ldr	r3, [pc, #688]	; (8005634 <pidController+0x2fc>)
 8005382:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 8005386:	4bab      	ldr	r3, [pc, #684]	; (8005634 <pidController+0x2fc>)
 8005388:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 800538c:	4ba9      	ldr	r3, [pc, #676]	; (8005634 <pidController+0x2fc>)
 800538e:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	4ba5      	ldr	r3, [pc, #660]	; (8005634 <pidController+0x2fc>)
 80053a0:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 80053a4:	4ba3      	ldr	r3, [pc, #652]	; (8005634 <pidController+0x2fc>)
 80053a6:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 80053aa:	4ba2      	ldr	r3, [pc, #648]	; (8005634 <pidController+0x2fc>)
 80053ac:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80053b0:	eddf 6aa2 	vldr	s13, [pc, #648]	; 800563c <pidController+0x304>
 80053b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80053b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053bc:	4b9d      	ldr	r3, [pc, #628]	; (8005634 <pidController+0x2fc>)
 80053be:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 80053c2:	4b9c      	ldr	r3, [pc, #624]	; (8005634 <pidController+0x2fc>)
 80053c4:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 80053c8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005640 <pidController+0x308>
 80053cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d0:	4b98      	ldr	r3, [pc, #608]	; (8005634 <pidController+0x2fc>)
 80053d2:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 80053d6:	e004      	b.n	80053e2 <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 80053d8:	4b96      	ldr	r3, [pc, #600]	; (8005634 <pidController+0x2fc>)
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 80053e2:	4b94      	ldr	r3, [pc, #592]	; (8005634 <pidController+0x2fc>)
 80053e4:	ed93 7a00 	vldr	s14, [r3]
 80053e8:	4b92      	ldr	r3, [pc, #584]	; (8005634 <pidController+0x2fc>)
 80053ea:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005644 <pidController+0x30c>
 80053f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 80053fe:	4b8d      	ldr	r3, [pc, #564]	; (8005634 <pidController+0x2fc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8005404:	4b8b      	ldr	r3, [pc, #556]	; (8005634 <pidController+0x2fc>)
 8005406:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 800540a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800540e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	dd1b      	ble.n	8005450 <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 8005418:	4b8b      	ldr	r3, [pc, #556]	; (8005648 <pidController+0x310>)
 800541a:	edd3 7a00 	vldr	s15, [r3]
 800541e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005422:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005426:	4b83      	ldr	r3, [pc, #524]	; (8005634 <pidController+0x2fc>)
 8005428:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 800542c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005430:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005434:	eddf 0a85 	vldr	s1, [pc, #532]	; 800564c <pidController+0x314>
 8005438:	eeb0 0a67 	vmov.f32	s0, s15
 800543c:	f7ff f93c 	bl	80046b8 <constrainf>
 8005440:	eeb0 7a40 	vmov.f32	s14, s0
 8005444:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800544c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005450:	2300      	movs	r3, #0
 8005452:	66bb      	str	r3, [r7, #104]	; 0x68
 8005454:	e06e      	b.n	8005534 <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 8005456:	4a7e      	ldr	r2, [pc, #504]	; (8005650 <pidController+0x318>)
 8005458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800545a:	3306      	adds	r3, #6
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	3304      	adds	r3, #4
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	3370      	adds	r3, #112	; 0x70
 800546a:	443b      	add	r3, r7
 800546c:	3b6c      	subs	r3, #108	; 0x6c
 800546e:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 8005470:	4b70      	ldr	r3, [pc, #448]	; (8005634 <pidController+0x2fc>)
 8005472:	6999      	ldr	r1, [r3, #24]
 8005474:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	3318      	adds	r3, #24
 8005480:	4a6c      	ldr	r2, [pc, #432]	; (8005634 <pidController+0x2fc>)
 8005482:	4413      	add	r3, r2
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	3370      	adds	r3, #112	; 0x70
 800548c:	443b      	add	r3, r7
 800548e:	3b6c      	subs	r3, #108	; 0x6c
 8005490:	edd3 7a00 	vldr	s15, [r3]
 8005494:	eeb0 0a67 	vmov.f32	s0, s15
 8005498:	4610      	mov	r0, r2
 800549a:	4788      	blx	r1
 800549c:	eef0 7a40 	vmov.f32	s15, s0
 80054a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	3370      	adds	r3, #112	; 0x70
 80054a6:	443b      	add	r3, r7
 80054a8:	3b6c      	subs	r3, #108	; 0x6c
 80054aa:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 80054ae:	4b61      	ldr	r3, [pc, #388]	; (8005634 <pidController+0x2fc>)
 80054b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80054b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	3398      	adds	r3, #152	; 0x98
 80054c0:	4a5c      	ldr	r2, [pc, #368]	; (8005634 <pidController+0x2fc>)
 80054c2:	441a      	add	r2, r3
 80054c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	3370      	adds	r3, #112	; 0x70
 80054ca:	443b      	add	r3, r7
 80054cc:	3b6c      	subs	r3, #108	; 0x6c
 80054ce:	edd3 7a00 	vldr	s15, [r3]
 80054d2:	eeb0 0a67 	vmov.f32	s0, s15
 80054d6:	4610      	mov	r0, r2
 80054d8:	4788      	blx	r1
 80054da:	eef0 7a40 	vmov.f32	s15, s0
 80054de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	3370      	adds	r3, #112	; 0x70
 80054e4:	443b      	add	r3, r7
 80054e6:	3b6c      	subs	r3, #108	; 0x6c
 80054e8:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 80054ec:	4b51      	ldr	r3, [pc, #324]	; (8005634 <pidController+0x2fc>)
 80054ee:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 80054f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005500:	4a4c      	ldr	r2, [pc, #304]	; (8005634 <pidController+0x2fc>)
 8005502:	4413      	add	r3, r2
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	3370      	adds	r3, #112	; 0x70
 800550c:	443b      	add	r3, r7
 800550e:	3b6c      	subs	r3, #108	; 0x6c
 8005510:	edd3 7a00 	vldr	s15, [r3]
 8005514:	eeb0 0a67 	vmov.f32	s0, s15
 8005518:	4610      	mov	r0, r2
 800551a:	4788      	blx	r1
 800551c:	eef0 7a40 	vmov.f32	s15, s0
 8005520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	3370      	adds	r3, #112	; 0x70
 8005526:	443b      	add	r3, r7
 8005528:	3b6c      	subs	r3, #108	; 0x6c
 800552a:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 800552e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005530:	3301      	adds	r3, #1
 8005532:	66bb      	str	r3, [r7, #104]	; 0x68
 8005534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005536:	2b02      	cmp	r3, #2
 8005538:	dd8d      	ble.n	8005456 <pidController+0x11e>
    }

    rotateItermAndAxisError();
 800553a:	f7ff fdf5 	bl	8005128 <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 800553e:	2300      	movs	r3, #0
 8005540:	667b      	str	r3, [r7, #100]	; 0x64
 8005542:	e1e4      	b.n	800590e <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 8005544:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8005546:	f7ff fe65 	bl	8005214 <getSetpointRate>
 800554a:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 800554e:	4a39      	ldr	r2, [pc, #228]	; (8005634 <pidController+0x2fc>)
 8005550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005552:	3382      	adds	r3, #130	; 0x82
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	edd3 7a00 	vldr	s15, [r3]
 800555c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005564:	d006      	beq.n	8005574 <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 8005566:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800556a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800556c:	f7ff fe66 	bl	800523c <accelerationLimit>
 8005570:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 8005574:	4a36      	ldr	r2, [pc, #216]	; (8005650 <pidController+0x318>)
 8005576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005578:	3306      	adds	r3, #6
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 8005584:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005588:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800558c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005590:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 8005594:	492f      	ldr	r1, [pc, #188]	; (8005654 <pidController+0x31c>)
 8005596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3304      	adds	r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 80055a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055aa:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 80055ac:	4a21      	ldr	r2, [pc, #132]	; (8005634 <pidController+0x2fc>)
 80055ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b0:	331c      	adds	r3, #28
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	4413      	add	r3, r2
 80055b6:	ed93 7a00 	vldr	s14, [r3]
 80055ba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80055c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ca:	4922      	ldr	r1, [pc, #136]	; (8005654 <pidController+0x31c>)
 80055cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d11a      	bne.n	8005618 <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 80055e2:	4b14      	ldr	r3, [pc, #80]	; (8005634 <pidController+0x2fc>)
 80055e4:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 80055e8:	481a      	ldr	r0, [pc, #104]	; (8005654 <pidController+0x31c>)
 80055ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4403      	add	r3, r0
 80055f6:	edd3 7a00 	vldr	s15, [r3]
 80055fa:	eeb0 0a67 	vmov.f32	s0, s15
 80055fe:	4816      	ldr	r0, [pc, #88]	; (8005658 <pidController+0x320>)
 8005600:	4788      	blx	r1
 8005602:	eef0 7a40 	vmov.f32	s15, s0
 8005606:	4913      	ldr	r1, [pc, #76]	; (8005654 <pidController+0x31c>)
 8005608:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 8005618:	4a06      	ldr	r2, [pc, #24]	; (8005634 <pidController+0x2fc>)
 800561a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800561c:	331c      	adds	r3, #28
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4413      	add	r3, r2
 8005622:	3304      	adds	r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 8005628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562a:	2b02      	cmp	r3, #2
 800562c:	d016      	beq.n	800565c <pidController+0x324>
 800562e:	4b01      	ldr	r3, [pc, #4]	; (8005634 <pidController+0x2fc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	e014      	b.n	800565e <pidController+0x326>
 8005634:	200015d8 	.word	0x200015d8
 8005638:	3c23d70a 	.word	0x3c23d70a
 800563c:	3d4ccccd 	.word	0x3d4ccccd
 8005640:	3ca3d70a 	.word	0x3ca3d70a
 8005644:	41acb227 	.word	0x41acb227
 8005648:	20001870 	.word	0x20001870
 800564c:	00000000 	.word	0x00000000
 8005650:	20000614 	.word	0x20000614
 8005654:	20001834 	.word	0x20001834
 8005658:	20001768 	.word	0x20001768
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 8005660:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005664:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800566c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005674:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800567c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005684:	4baa      	ldr	r3, [pc, #680]	; (8005930 <pidController+0x5f8>)
 8005686:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 800568a:	eef1 7a67 	vneg.f32	s15, s15
 800568e:	4ba8      	ldr	r3, [pc, #672]	; (8005930 <pidController+0x5f8>)
 8005690:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 8005694:	eeb0 1a66 	vmov.f32	s2, s13
 8005698:	eef0 0a67 	vmov.f32	s1, s15
 800569c:	eeb0 0a47 	vmov.f32	s0, s14
 80056a0:	f7ff f80a 	bl	80046b8 <constrainf>
 80056a4:	eef0 7a40 	vmov.f32	s15, s0
 80056a8:	49a2      	ldr	r1, [pc, #648]	; (8005934 <pidController+0x5fc>)
 80056aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	3304      	adds	r3, #4
 80056b8:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 80056c2:	4a9b      	ldr	r2, [pc, #620]	; (8005930 <pidController+0x5f8>)
 80056c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c6:	3302      	adds	r3, #2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	3304      	adds	r3, #4
 80056ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056d0:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 80056d2:	4a97      	ldr	r2, [pc, #604]	; (8005930 <pidController+0x5f8>)
 80056d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	4413      	add	r3, r2
 80056da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80056de:	edd3 7a00 	vldr	s15, [r3]
 80056e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ea:	dd43      	ble.n	8005774 <pidController+0x43c>
 80056ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d13f      	bne.n	8005774 <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 80056f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	3370      	adds	r3, #112	; 0x70
 80056fa:	443b      	add	r3, r7
 80056fc:	3b6c      	subs	r3, #108	; 0x6c
 80056fe:	ed93 7a00 	vldr	s14, [r3]
 8005702:	4a8d      	ldr	r2, [pc, #564]	; (8005938 <pidController+0x600>)
 8005704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	edd3 7a00 	vldr	s15, [r3]
 800570e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005712:	eeb1 7a67 	vneg.f32	s14, s15
 8005716:	4b86      	ldr	r3, [pc, #536]	; (8005930 <pidController+0x5f8>)
 8005718:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 800571c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005720:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 8005724:	4a82      	ldr	r2, [pc, #520]	; (8005930 <pidController+0x5f8>)
 8005726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	4413      	add	r3, r2
 800572c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005730:	edd3 7a00 	vldr	s15, [r3]
 8005734:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800573c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 8005740:	4b7b      	ldr	r3, [pc, #492]	; (8005930 <pidController+0x5f8>)
 8005742:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 8005746:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	4979      	ldr	r1, [pc, #484]	; (8005934 <pidController+0x5fc>)
 8005750:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3308      	adds	r3, #8
 800575e:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 8005762:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005766:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800576a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800576e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 8005772:	e00a      	b.n	800578a <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 8005774:	496f      	ldr	r1, [pc, #444]	; (8005934 <pidController+0x5fc>)
 8005776:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3308      	adds	r3, #8
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 800578a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	3370      	adds	r3, #112	; 0x70
 8005790:	443b      	add	r3, r7
 8005792:	3b6c      	subs	r3, #108	; 0x6c
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4968      	ldr	r1, [pc, #416]	; (8005938 <pidController+0x600>)
 8005798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 80057a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <pidController+0x480>
 80057a8:	4a61      	ldr	r2, [pc, #388]	; (8005930 <pidController+0x5f8>)
 80057aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	e001      	b.n	80057bc <pidController+0x484>
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 80057be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80057c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ca:	dd17      	ble.n	80057fc <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 80057cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80057d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80057d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057d8:	4b55      	ldr	r3, [pc, #340]	; (8005930 <pidController+0x5f8>)
 80057da:	edd3 7a01 	vldr	s15, [r3, #4]
 80057de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 80057e6:	4953      	ldr	r1, [pc, #332]	; (8005934 <pidController+0x5fc>)
 80057e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	330c      	adds	r3, #12
 80057f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e00a      	b.n	8005812 <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 80057fc:	494d      	ldr	r1, [pc, #308]	; (8005934 <pidController+0x5fc>)
 80057fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	330c      	adds	r3, #12
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 8005812:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005816:	eeb0 7ae7 	vabs.f32	s14, s15
 800581a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800593c <pidController+0x604>
 800581e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005822:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	ed97 7a07 	vldr	s14, [r7, #28]
 8005834:	edd7 7a06 	vldr	s15, [r7, #24]
 8005838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	dd01      	ble.n	8005846 <pidController+0x50e>
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	e000      	b.n	8005848 <pidController+0x510>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 800584a:	4b39      	ldr	r3, [pc, #228]	; (8005930 <pidController+0x5f8>)
 800584c:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 8005850:	ed97 7a08 	vldr	s14, [r7, #32]
 8005854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800585c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005860:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 8005864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005866:	2b02      	cmp	r3, #2
 8005868:	d015      	beq.n	8005896 <pidController+0x55e>
            pidData[axis].P *= agBoost;
 800586a:	4932      	ldr	r1, [pc, #200]	; (8005934 <pidController+0x5fc>)
 800586c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	ed93 7a00 	vldr	s14, [r3]
 800587c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005884:	492b      	ldr	r1, [pc, #172]	; (8005934 <pidController+0x5fc>)
 8005886:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 8005896:	4927      	ldr	r1, [pc, #156]	; (8005934 <pidController+0x5fc>)
 8005898:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800589a:	4613      	mov	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	ed93 7a00 	vldr	s14, [r3]
 80058a8:	4922      	ldr	r1, [pc, #136]	; (8005934 <pidController+0x5fc>)
 80058aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	3304      	adds	r3, #4
 80058b8:	edd3 7a00 	vldr	s15, [r3]
 80058bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c0:	491c      	ldr	r1, [pc, #112]	; (8005934 <pidController+0x5fc>)
 80058c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	3308      	adds	r3, #8
 80058d0:	edd3 7a00 	vldr	s15, [r3]
 80058d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d8:	4916      	ldr	r1, [pc, #88]	; (8005934 <pidController+0x5fc>)
 80058da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	330c      	adds	r3, #12
 80058e8:	edd3 7a00 	vldr	s15, [r3]
 80058ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058f0:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 80058f4:	490f      	ldr	r1, [pc, #60]	; (8005934 <pidController+0x5fc>)
 80058f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	3310      	adds	r3, #16
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590a:	3301      	adds	r3, #1
 800590c:	667b      	str	r3, [r7, #100]	; 0x64
 800590e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005910:	2b02      	cmp	r3, #2
 8005912:	f77f ae17 	ble.w	8005544 <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <pidController+0x5f8>)
 8005918:	7a1b      	ldrb	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <pidController+0x5f0>
 800591e:	f7fc ffa9 	bl	8002874 <gyroOverflowDetected>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d048      	beq.n	80059ba <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005928:	2300      	movs	r3, #0
 800592a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800592c:	e041      	b.n	80059b2 <pidController+0x67a>
 800592e:	bf00      	nop
 8005930:	200015d8 	.word	0x200015d8
 8005934:	20001834 	.word	0x20001834
 8005938:	20001928 	.word	0x20001928
 800593c:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 8005940:	4924      	ldr	r1, [pc, #144]	; (80059d4 <pidController+0x69c>)
 8005942:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 8005954:	491f      	ldr	r1, [pc, #124]	; (80059d4 <pidController+0x69c>)
 8005956:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	3304      	adds	r3, #4
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 800596a:	491a      	ldr	r1, [pc, #104]	; (80059d4 <pidController+0x69c>)
 800596c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	3308      	adds	r3, #8
 800597a:	f04f 0200 	mov.w	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 8005980:	4914      	ldr	r1, [pc, #80]	; (80059d4 <pidController+0x69c>)
 8005982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	330c      	adds	r3, #12
 8005990:	f04f 0200 	mov.w	r2, #0
 8005994:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 8005996:	490f      	ldr	r1, [pc, #60]	; (80059d4 <pidController+0x69c>)
 8005998:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3310      	adds	r3, #16
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80059ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059ae:	3301      	adds	r3, #1
 80059b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	ddc3      	ble.n	8005940 <pidController+0x608>
 80059b8:	e007      	b.n	80059ca <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <pidController+0x6a0>)
 80059bc:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <pidController+0x692>
        pidResetIterm();
 80059c4:	f7ff fc98 	bl	80052f8 <pidResetIterm>
    }
}
 80059c8:	e7ff      	b.n	80059ca <pidController+0x692>
 80059ca:	bf00      	nop
 80059cc:	3770      	adds	r7, #112	; 0x70
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20001834 	.word	0x20001834
 80059d8:	200015d8 	.word	0x200015d8

080059dc <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 80059e6:	4a05      	ldr	r2, [pc, #20]	; (80059fc <pidSetItermAccelerator+0x20>)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	200015d8 	.word	0x200015d8

08005a00 <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <checkForThrottleErrorResetState+0xe4>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	099b      	lsrs	r3, r3, #6
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 8005a18:	2264      	movs	r2, #100	; 0x64
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a20:	2214      	movs	r2, #20
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fe2e 	bl	8004686 <constrain>
 8005a2a:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8005a2c:	4b2e      	ldr	r3, [pc, #184]	; (8005ae8 <checkForThrottleErrorResetState+0xe8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8005a38:	4b2c      	ldr	r3, [pc, #176]	; (8005aec <checkForThrottleErrorResetState+0xec>)
 8005a3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <checkForThrottleErrorResetState+0xf0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	492a      	ldr	r1, [pc, #168]	; (8005af0 <checkForThrottleErrorResetState+0xf0>)
 8005a46:	600a      	str	r2, [r1, #0]
 8005a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a4c:	ee17 2a90 	vmov	r2, s15
 8005a50:	b211      	sxth	r1, r2
 8005a52:	4a28      	ldr	r2, [pc, #160]	; (8005af4 <checkForThrottleErrorResetState+0xf4>)
 8005a54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 8005a58:	4b25      	ldr	r3, [pc, #148]	; (8005af0 <checkForThrottleErrorResetState+0xf0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	dc02      	bgt.n	8005a68 <checkForThrottleErrorResetState+0x68>
        index = 0;
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <checkForThrottleErrorResetState+0xf0>)
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <checkForThrottleErrorResetState+0xec>)
 8005a6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a6e:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <checkForThrottleErrorResetState+0xf0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a20      	ldr	r2, [pc, #128]	; (8005af4 <checkForThrottleErrorResetState+0xf4>)
 8005a74:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a88:	ee17 3a90 	vmov	r3, s15
 8005a8c:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <checkForThrottleErrorResetState+0xe8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d120      	bne.n	8005adc <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 8005a9a:	89bb      	ldrh	r3, [r7, #12]
 8005a9c:	817b      	strh	r3, [r7, #10]
 8005a9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfb8      	it	lt
 8005aa6:	425b      	neglt	r3, r3
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	dd0f      	ble.n	8005ad4 <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <checkForThrottleErrorResetState+0xe8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005af8 <checkForThrottleErrorResetState+0xf8>
 8005ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aca:	eeb0 0a67 	vmov.f32	s0, s15
 8005ace:	f7ff ff85 	bl	80059dc <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 8005ad2:	e003      	b.n	8005adc <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 8005ad4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8005afc <checkForThrottleErrorResetState+0xfc>
 8005ad8:	f7ff ff80 	bl	80059dc <pidSetItermAccelerator>
}
 8005adc:	bf00      	nop
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	10624dd3 	.word	0x10624dd3
 8005ae8:	2000003c 	.word	0x2000003c
 8005aec:	20001874 	.word	0x20001874
 8005af0:	20001934 	.word	0x20001934
 8005af4:	20001938 	.word	0x20001938
 8005af8:	3a83126f 	.word	0x3a83126f
 8005afc:	00000000 	.word	0x00000000

08005b00 <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08a      	sub	sp, #40	; 0x28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b0c:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 8005b10:	4b40      	ldr	r3, [pc, #256]	; (8005c14 <applyActualRates+0x114>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	3306      	adds	r3, #6
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	ee07 3a90 	vmov	s15, r3
 8005b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b24:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005c18 <applyActualRates+0x118>
 8005b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 8005b30:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8005b34:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b38:	f012 f812 	bl	8017b60 <powf>
 8005b3c:	eeb0 7a40 	vmov.f32	s14, s0
 8005b40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b60:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 8005b6c:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <applyActualRates+0x114>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	3303      	adds	r3, #3
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005b84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b88:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	4b20      	ldr	r3, [pc, #128]	; (8005c14 <applyActualRates+0x114>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	3309      	adds	r3, #9
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bac:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bb4:	edc7 7a06 	vstr	s15, [r7, #24]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bc2:	ed97 7a06 	vldr	s14, [r7, #24]
 8005bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bce:	d505      	bpl.n	8005bdc <applyActualRates+0xdc>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	ee07 3a90 	vmov	s15, r3
 8005bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bda:	e001      	b.n	8005be0 <applyActualRates+0xe0>
 8005bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005be0:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 8005be4:	ed97 7a02 	vldr	s14, [r7, #8]
 8005be8:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bf0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005bf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c00:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	ee07 3a90 	vmov	s15, r3
}
 8005c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0e:	3728      	adds	r7, #40	; 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	2000004c 	.word	0x2000004c
 8005c18:	42c80000 	.word	0x42c80000

08005c1c <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 8005c22:	4b22      	ldr	r3, [pc, #136]	; (8005cac <scaleRawSetpointToFpvCamAngle+0x90>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <scaleRawSetpointToFpvCamAngle+0x90>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005c2e:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <scaleRawSetpointToFpvCamAngle+0x94>)
 8005c30:	ed93 7a00 	vldr	s14, [r3]
 8005c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <scaleRawSetpointToFpvCamAngle+0x98>)
 8005c3e:	edd3 6a00 	vldr	s13, [r3]
 8005c42:	edd7 7a00 	vldr	s15, [r7]
 8005c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c4e:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005cb8 <scaleRawSetpointToFpvCamAngle+0x9c>
 8005c52:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005cbc <scaleRawSetpointToFpvCamAngle+0xa0>
 8005c56:	eeb0 0a67 	vmov.f32	s0, s15
 8005c5a:	f7fe fd2d 	bl	80046b8 <constrainf>
 8005c5e:	eef0 7a40 	vmov.f32	s15, s0
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <scaleRawSetpointToFpvCamAngle+0x90>)
 8005c64:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005c68:	4b11      	ldr	r3, [pc, #68]	; (8005cb0 <scaleRawSetpointToFpvCamAngle+0x94>)
 8005c6a:	ed93 7a00 	vldr	s14, [r3]
 8005c6e:	edd7 7a00 	vldr	s15, [r7]
 8005c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <scaleRawSetpointToFpvCamAngle+0x98>)
 8005c78:	edd3 6a00 	vldr	s13, [r3]
 8005c7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c88:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8005cb8 <scaleRawSetpointToFpvCamAngle+0x9c>
 8005c8c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8005cbc <scaleRawSetpointToFpvCamAngle+0xa0>
 8005c90:	eeb0 0a67 	vmov.f32	s0, s15
 8005c94:	f7fe fd10 	bl	80046b8 <constrainf>
 8005c98:	eef0 7a40 	vmov.f32	s15, s0
 8005c9c:	4b03      	ldr	r3, [pc, #12]	; (8005cac <scaleRawSetpointToFpvCamAngle+0x90>)
 8005c9e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20001828 	.word	0x20001828
 8005cb0:	20000054 	.word	0x20000054
 8005cb4:	20001960 	.word	0x20001960
 8005cb8:	44f9c000 	.word	0x44f9c000
 8005cbc:	c4f9c000 	.word	0xc4f9c000

08005cc0 <resetYawAxis>:

static void resetYawAxis(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 8005cc4:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <resetYawAxis+0x20>)
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <resetYawAxis+0x24>)
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20001874 	.word	0x20001874
 8005ce4:	200018cc 	.word	0x200018cc

08005ce8 <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 8005cec:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <pidIncUpdateCounter+0x38>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	4a0c      	ldr	r2, [pc, #48]	; (8005d24 <pidIncUpdateCounter+0x3c>)
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cf8:	fb01 f202 	mul.w	r2, r1, r2
 8005cfc:	1a9b      	subs	r3, r3, r2
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 8005d04:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <pidIncUpdateCounter+0x38>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 8005d0a:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <pidIncUpdateCounter+0x38>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <pidIncUpdateCounter+0x38>)
 8005d14:	701a      	strb	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20001540 	.word	0x20001540
 8005d24:	20000000 	.word	0x20000000

08005d28 <processRcCommand>:


void processRcCommand(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 8005d2e:	f7fe fcec 	bl	800470a <isUsingSticksForArming>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <processRcCommand+0x28>
 8005d38:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <processRcCommand+0x144>)
 8005d3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d3e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005e70 <processRcCommand+0x148>
 8005d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4a:	d801      	bhi.n	8005d50 <processRcCommand+0x28>
        resetYawAxis();
 8005d4c:	f7ff ffb8 	bl	8005cc0 <resetYawAxis>
    }

    if (isRxDataNew) {
 8005d50:	4b48      	ldr	r3, [pc, #288]	; (8005e74 <processRcCommand+0x14c>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <processRcCommand+0x36>
        newRxDataForFF = true;
 8005d58:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <processRcCommand+0x150>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 8005d5e:	4b45      	ldr	r3, [pc, #276]	; (8005e74 <processRcCommand+0x14c>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <processRcCommand+0x52>
 8005d66:	f7fe fcd9 	bl	800471c <pidAntiGravityEnabled>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d004      	beq.n	8005d7a <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 8005d70:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <processRcCommand+0x154>)
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fe43 	bl	8005a00 <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 8005d7a:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <processRcCommand+0x14c>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d06c      	beq.n	8005e5c <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e064      	b.n	8005e52 <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d10d      	bne.n	8005daa <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 8005d8e:	4a3c      	ldr	r2, [pc, #240]	; (8005e80 <processRcCommand+0x158>)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	edd3 6a00 	vldr	s13, [r3]
 8005d9a:	4b3a      	ldr	r3, [pc, #232]	; (8005e84 <processRcCommand+0x15c>)
 8005d9c:	ed93 7a00 	vldr	s14, [r3]
 8005da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da4:	edc7 7a02 	vstr	s15, [r7, #8]
 8005da8:	e00c      	b.n	8005dc4 <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 8005daa:	4a35      	ldr	r2, [pc, #212]	; (8005e80 <processRcCommand+0x158>)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	edd3 6a00 	vldr	s13, [r3]
 8005db6:	4b34      	ldr	r3, [pc, #208]	; (8005e88 <processRcCommand+0x160>)
 8005db8:	ed93 7a00 	vldr	s14, [r3]
 8005dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dc0:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 8005dc4:	4a31      	ldr	r2, [pc, #196]	; (8005e8c <processRcCommand+0x164>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 8005dd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dd4:	eef0 7ae7 	vabs.f32	s15, s15
 8005dd8:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <processRcCommand+0x168>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 8005de8:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <processRcCommand+0x16c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	edd7 0a01 	vldr	s1, [r7, #4]
 8005df0:	ed97 0a02 	vldr	s0, [r7, #8]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	4798      	blx	r3
 8005df8:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 8005dfc:	4b26      	ldr	r3, [pc, #152]	; (8005e98 <processRcCommand+0x170>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3308      	adds	r3, #8
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4413      	add	r3, r2
 8005e08:	885b      	ldrh	r3, [r3, #2]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e12:	eef1 7a67 	vneg.f32	s15, s15
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <processRcCommand+0x170>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	885b      	ldrh	r3, [r3, #2]
 8005e24:	ee07 3a10 	vmov	s14, r3
 8005e28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005e2c:	eeb0 1a47 	vmov.f32	s2, s14
 8005e30:	eef0 0a67 	vmov.f32	s1, s15
 8005e34:	ed97 0a00 	vldr	s0, [r7]
 8005e38:	f7fe fc3e 	bl	80046b8 <constrainf>
 8005e3c:	eef0 7a40 	vmov.f32	s15, s0
 8005e40:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <processRcCommand+0x174>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	dd97      	ble.n	8005d88 <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 8005e58:	f7ff fee0 	bl	8005c1c <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <processRcCommand+0x14c>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20001884 	.word	0x20001884
 8005e70:	44834000 	.word	0x44834000
 8005e74:	200018f0 	.word	0x200018f0
 8005e78:	200018f1 	.word	0x200018f1
 8005e7c:	20000048 	.word	0x20000048
 8005e80:	20001874 	.word	0x20001874
 8005e84:	20000044 	.word	0x20000044
 8005e88:	20000040 	.word	0x20000040
 8005e8c:	200018d8 	.word	0x200018d8
 8005e90:	200018e4 	.word	0x200018e4
 8005e94:	20000050 	.word	0x20000050
 8005e98:	2000004c 	.word	0x2000004c
 8005e9c:	20001828 	.word	0x20001828

08005ea0 <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eb8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ec0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005f24 <buildRotationMatrixFromAlignment+0x84>
 8005ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ec8:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005eda:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ee2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005f24 <buildRotationMatrixFromAlignment+0x84>
 8005ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eea:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005efc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f04:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005f24 <buildRotationMatrixFromAlignment+0x84>
 8005f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f0c:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fb feac 	bl	8001c74 <buildRotationMatrix>
}
 8005f1c:	bf00      	nop
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	3c8efa35 	.word	0x3c8efa35

08005f28 <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	2b09      	cmp	r3, #9
 8005f38:	d03f      	beq.n	8005fba <buildAlignmentFromStandardAlignment+0x92>
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d03c      	beq.n	8005fba <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	b25b      	sxtb	r3, r3
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	b25a      	sxtb	r2, r3
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	3b01      	subs	r3, #1
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	b25b      	sxtb	r3, r3
 8005f60:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 8005f62:	2206      	movs	r2, #6
 8005f64:	2100      	movs	r1, #0
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f00d fac9 	bl	80134fe <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e01f      	b.n	8005fb2 <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 8005f72:	7afa      	ldrb	r2, [r7, #11]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f1c3 0302 	rsb	r3, r3, #2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	2103      	movs	r1, #3
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f1c3 0302 	rsb	r3, r3, #2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	fa42 f303 	asr.w	r3, r2, r3
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	0112      	lsls	r2, r2, #4
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	b219      	sxth	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	dddc      	ble.n	8005f72 <buildAlignmentFromStandardAlignment+0x4a>
 8005fb8:	e000      	b.n	8005fbc <buildAlignmentFromStandardAlignment+0x94>
        return;
 8005fba:	bf00      	nop
    }
}
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	3b02      	subs	r3, #2
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d810      	bhi.n	800600c <alignSensorViaRotation+0x48>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <alignSensorViaRotation+0x2c>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006025 	.word	0x08006025
 8005ff4:	08006045 	.word	0x08006045
 8005ff8:	0800606d 	.word	0x0800606d
 8005ffc:	0800608d 	.word	0x0800608d
 8006000:	080060b5 	.word	0x080060b5
 8006004:	080060d5 	.word	0x080060d5
 8006008:	080060fd 	.word	0x080060fd
    default:
    case CW0_DEG:
        dest[X] = x;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3304      	adds	r3, #4
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3308      	adds	r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	601a      	str	r2, [r3, #0]
        break;
 8006022:	e083      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3304      	adds	r3, #4
 800602e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006032:	eef1 7a67 	vneg.f32	s15, s15
 8006036:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3308      	adds	r3, #8
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	601a      	str	r2, [r3, #0]
        break;
 8006042:	e073      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 8006044:	edd7 7a05 	vldr	s15, [r7, #20]
 8006048:	eef1 7a67 	vneg.f32	s15, s15
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	edd7 7a04 	vldr	s15, [r7, #16]
 800605a:	eef1 7a67 	vneg.f32	s15, s15
 800605e:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3308      	adds	r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	601a      	str	r2, [r3, #0]
        break;
 800606a:	e05f      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 800606c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006070:	eef1 7a67 	vneg.f32	s15, s15
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3304      	adds	r3, #4
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3308      	adds	r3, #8
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	601a      	str	r2, [r3, #0]
        break;
 800608a:	e04f      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 800608c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006090:	eef1 7a67 	vneg.f32	s15, s15
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3308      	adds	r3, #8
 80060a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80060aa:	eef1 7a67 	vneg.f32	s15, s15
 80060ae:	edc3 7a00 	vstr	s15, [r3]
        break;
 80060b2:	e03b      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3304      	adds	r3, #4
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3308      	adds	r3, #8
 80060c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80060ca:	eef1 7a67 	vneg.f32	s15, s15
 80060ce:	edc3 7a00 	vstr	s15, [r3]
        break;
 80060d2:	e02b      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3304      	adds	r3, #4
 80060de:	edd7 7a04 	vldr	s15, [r7, #16]
 80060e2:	eef1 7a67 	vneg.f32	s15, s15
 80060e6:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3308      	adds	r3, #8
 80060ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80060f2:	eef1 7a67 	vneg.f32	s15, s15
 80060f6:	edc3 7a00 	vstr	s15, [r3]
        break;
 80060fa:	e017      	b.n	800612c <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 80060fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006100:	eef1 7a67 	vneg.f32	s15, s15
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006112:	eef1 7a67 	vneg.f32	s15, s15
 8006116:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3308      	adds	r3, #8
 800611e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006122:	eef1 7a67 	vneg.f32	s15, s15
 8006126:	edc3 7a00 	vstr	s15, [r3]
        break;
 800612a:	bf00      	nop
    }
}
 800612c:	bf00      	nop
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_MspInit+0x4c>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <HAL_MspInit+0x4c>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	; 0x40
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <HAL_MspInit+0x4c>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_MspInit+0x4c>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <HAL_MspInit+0x4c>)
 800615c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006160:	6453      	str	r3, [r2, #68]	; 0x44
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <HAL_MspInit+0x4c>)
 8006164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800616e:	2200      	movs	r2, #0
 8006170:	210f      	movs	r1, #15
 8006172:	f06f 0001 	mvn.w	r0, #1
 8006176:	f005 fe0f 	bl	800bd98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800

08006188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b0ae      	sub	sp, #184	; 0xb8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006190:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	609a      	str	r2, [r3, #8]
 800619c:	60da      	str	r2, [r3, #12]
 800619e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80061a0:	f107 0314 	add.w	r3, r7, #20
 80061a4:	2290      	movs	r2, #144	; 0x90
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f00d f9a8 	bl	80134fe <memset>
  if(huart->Instance==USART3)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a22      	ldr	r2, [pc, #136]	; (800623c <HAL_UART_MspInit+0xb4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d13c      	bne.n	8006232 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80061b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80061be:	2300      	movs	r3, #0
 80061c0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061c2:	f107 0314 	add.w	r3, r7, #20
 80061c6:	4618      	mov	r0, r3
 80061c8:	f007 fdde 	bl	800dd88 <HAL_RCCEx_PeriphCLKConfig>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80061d2:	f7fe fa53 	bl	800467c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <HAL_UART_MspInit+0xb8>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a19      	ldr	r2, [pc, #100]	; (8006240 <HAL_UART_MspInit+0xb8>)
 80061dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <HAL_UART_MspInit+0xb8>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <HAL_UART_MspInit+0xb8>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_UART_MspInit+0xb8>)
 80061f4:	f043 0308 	orr.w	r3, r3, #8
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_UART_MspInit+0xb8>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006206:	f44f 7340 	mov.w	r3, #768	; 0x300
 800620a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620e:	2302      	movs	r3, #2
 8006210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006214:	2300      	movs	r3, #0
 8006216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621a:	2303      	movs	r3, #3
 800621c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006220:	2307      	movs	r3, #7
 8006222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006226:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800622a:	4619      	mov	r1, r3
 800622c:	4805      	ldr	r0, [pc, #20]	; (8006244 <HAL_UART_MspInit+0xbc>)
 800622e:	f005 fddd 	bl	800bdec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006232:	bf00      	nop
 8006234:	37b8      	adds	r7, #184	; 0xb8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	40004800 	.word	0x40004800
 8006240:	40023800 	.word	0x40023800
 8006244:	40020c00 	.word	0x40020c00

08006248 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b0ae      	sub	sp, #184	; 0xb8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006250:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006260:	f107 0314 	add.w	r3, r7, #20
 8006264:	2290      	movs	r2, #144	; 0x90
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f00d f948 	bl	80134fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006276:	d159      	bne.n	800632c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006278:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800627c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800627e:	2300      	movs	r3, #0
 8006280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	4618      	mov	r0, r3
 800628a:	f007 fd7d 	bl	800dd88 <HAL_RCCEx_PeriphCLKConfig>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006294:	f7fe f9f2 	bl	800467c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006298:	4b26      	ldr	r3, [pc, #152]	; (8006334 <HAL_PCD_MspInit+0xec>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <HAL_PCD_MspInit+0xec>)
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	6313      	str	r3, [r2, #48]	; 0x30
 80062a4:	4b23      	ldr	r3, [pc, #140]	; (8006334 <HAL_PCD_MspInit+0xec>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80062b0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80062b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b8:	2302      	movs	r3, #2
 80062ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c4:	2303      	movs	r3, #3
 80062c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062ca:	230a      	movs	r3, #10
 80062cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4818      	ldr	r0, [pc, #96]	; (8006338 <HAL_PCD_MspInit+0xf0>)
 80062d8:	f005 fd88 	bl	800bdec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80062dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062e4:	2300      	movs	r3, #0
 80062e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80062f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4810      	ldr	r0, [pc, #64]	; (8006338 <HAL_PCD_MspInit+0xf0>)
 80062f8:	f005 fd78 	bl	800bdec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <HAL_PCD_MspInit+0xec>)
 80062fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006300:	4a0c      	ldr	r2, [pc, #48]	; (8006334 <HAL_PCD_MspInit+0xec>)
 8006302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006306:	6353      	str	r3, [r2, #52]	; 0x34
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <HAL_PCD_MspInit+0xec>)
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <HAL_PCD_MspInit+0xec>)
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	4a06      	ldr	r2, [pc, #24]	; (8006334 <HAL_PCD_MspInit+0xec>)
 800631a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800631e:	6453      	str	r3, [r2, #68]	; 0x44
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <HAL_PCD_MspInit+0xec>)
 8006322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800632c:	bf00      	nop
 800632e:	37b8      	adds	r7, #184	; 0xb8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40023800 	.word	0x40023800
 8006338:	40020000 	.word	0x40020000

0800633c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08c      	sub	sp, #48	; 0x30
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800634c:	4b2e      	ldr	r3, [pc, #184]	; (8006408 <HAL_InitTick+0xcc>)
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	4a2d      	ldr	r2, [pc, #180]	; (8006408 <HAL_InitTick+0xcc>)
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	6453      	str	r3, [r2, #68]	; 0x44
 8006358:	4b2b      	ldr	r3, [pc, #172]	; (8006408 <HAL_InitTick+0xcc>)
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006364:	f107 020c 	add.w	r2, r7, #12
 8006368:	f107 0310 	add.w	r3, r7, #16
 800636c:	4611      	mov	r1, r2
 800636e:	4618      	mov	r0, r3
 8006370:	f007 fcd8 	bl	800dd24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006374:	f007 fcc2 	bl	800dcfc <HAL_RCC_GetPCLK2Freq>
 8006378:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	4a23      	ldr	r2, [pc, #140]	; (800640c <HAL_InitTick+0xd0>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	0c9b      	lsrs	r3, r3, #18
 8006384:	3b01      	subs	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006388:	4b21      	ldr	r3, [pc, #132]	; (8006410 <HAL_InitTick+0xd4>)
 800638a:	4a22      	ldr	r2, [pc, #136]	; (8006414 <HAL_InitTick+0xd8>)
 800638c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800638e:	4b20      	ldr	r3, [pc, #128]	; (8006410 <HAL_InitTick+0xd4>)
 8006390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006394:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_InitTick+0xd4>)
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800639c:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <HAL_InitTick+0xd4>)
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063a2:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_InitTick+0xd4>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063a8:	4b19      	ldr	r3, [pc, #100]	; (8006410 <HAL_InitTick+0xd4>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80063ae:	4818      	ldr	r0, [pc, #96]	; (8006410 <HAL_InitTick+0xd4>)
 80063b0:	f008 f912 	bl	800e5d8 <HAL_TIM_Base_Init>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80063ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d11b      	bne.n	80063fa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80063c2:	4813      	ldr	r0, [pc, #76]	; (8006410 <HAL_InitTick+0xd4>)
 80063c4:	f008 f96a 	bl	800e69c <HAL_TIM_Base_Start_IT>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80063ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d111      	bne.n	80063fa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80063d6:	2019      	movs	r0, #25
 80063d8:	f005 fcfa 	bl	800bdd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b0f      	cmp	r3, #15
 80063e0:	d808      	bhi.n	80063f4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80063e2:	2200      	movs	r2, #0
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	2019      	movs	r0, #25
 80063e8:	f005 fcd6 	bl	800bd98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063ec:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <HAL_InitTick+0xdc>)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e002      	b.n	80063fa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80063fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3730      	adds	r7, #48	; 0x30
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40023800 	.word	0x40023800
 800640c:	431bde83 	.word	0x431bde83
 8006410:	20001964 	.word	0x20001964
 8006414:	40010000 	.word	0x40010000
 8006418:	200001b4 	.word	0x200001b4

0800641c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006420:	e7fe      	b.n	8006420 <NMI_Handler+0x4>

08006422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006422:	b480      	push	{r7}
 8006424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006426:	e7fe      	b.n	8006426 <HardFault_Handler+0x4>

08006428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800642c:	e7fe      	b.n	800642c <MemManage_Handler+0x4>

0800642e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800642e:	b480      	push	{r7}
 8006430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006432:	e7fe      	b.n	8006432 <BusFault_Handler+0x4>

08006434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006438:	e7fe      	b.n	8006438 <UsageFault_Handler+0x4>

0800643a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800643a:	b480      	push	{r7}
 800643c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800644c:	4802      	ldr	r0, [pc, #8]	; (8006458 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800644e:	f008 f99d 	bl	800e78c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20001964 	.word	0x20001964

0800645c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8006466:	4b19      	ldr	r3, [pc, #100]	; (80064cc <BSP_I2C1_Init+0x70>)
 8006468:	4a19      	ldr	r2, [pc, #100]	; (80064d0 <BSP_I2C1_Init+0x74>)
 800646a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <BSP_I2C1_Init+0x78>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	4918      	ldr	r1, [pc, #96]	; (80064d4 <BSP_I2C1_Init+0x78>)
 8006474:	600a      	str	r2, [r1, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d122      	bne.n	80064c0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800647a:	4814      	ldr	r0, [pc, #80]	; (80064cc <BSP_I2C1_Init+0x70>)
 800647c:	f006 fa8a 	bl	800c994 <HAL_I2C_GetState>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11c      	bne.n	80064c0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8006486:	4811      	ldr	r0, [pc, #68]	; (80064cc <BSP_I2C1_Init+0x70>)
 8006488:	f000 f8fe 	bl	8006688 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8006492:	480e      	ldr	r0, [pc, #56]	; (80064cc <BSP_I2C1_Init+0x70>)
 8006494:	f000 f8b4 	bl	8006600 <MX_I2C1_Init>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800649e:	f06f 0307 	mvn.w	r3, #7
 80064a2:	607b      	str	r3, [r7, #4]
 80064a4:	e00c      	b.n	80064c0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064a6:	2100      	movs	r1, #0
 80064a8:	4808      	ldr	r0, [pc, #32]	; (80064cc <BSP_I2C1_Init+0x70>)
 80064aa:	f006 fd27 	bl	800cefc <HAL_I2CEx_ConfigAnalogFilter>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80064b4:	f06f 0307 	mvn.w	r3, #7
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e001      	b.n	80064c0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80064bc:	2300      	movs	r3, #0
 80064be:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80064c0:	687b      	ldr	r3, [r7, #4]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200019b0 	.word	0x200019b0
 80064d0:	40005400 	.word	0x40005400
 80064d4:	20001a04 	.word	0x20001a04

080064d8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <BSP_I2C1_DeInit+0x48>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d014      	beq.n	8006514 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <BSP_I2C1_DeInit+0x48>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <BSP_I2C1_DeInit+0x48>)
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <BSP_I2C1_DeInit+0x48>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80064fc:	4809      	ldr	r0, [pc, #36]	; (8006524 <BSP_I2C1_DeInit+0x4c>)
 80064fe:	f000 f925 	bl	800674c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8006502:	4808      	ldr	r0, [pc, #32]	; (8006524 <BSP_I2C1_DeInit+0x4c>)
 8006504:	f005 ffd4 	bl	800c4b0 <HAL_I2C_DeInit>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800650e:	f06f 0307 	mvn.w	r3, #7
 8006512:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8006514:	687b      	ldr	r3, [r7, #4]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20001a04 	.word	0x20001a04
 8006524:	200019b0 	.word	0x200019b0

08006528 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08a      	sub	sp, #40	; 0x28
 800652c:	af04      	add	r7, sp, #16
 800652e:	60ba      	str	r2, [r7, #8]
 8006530:	461a      	mov	r2, r3
 8006532:	4603      	mov	r3, r0
 8006534:	81fb      	strh	r3, [r7, #14]
 8006536:	460b      	mov	r3, r1
 8006538:	81bb      	strh	r3, [r7, #12]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8006542:	89ba      	ldrh	r2, [r7, #12]
 8006544:	89f9      	ldrh	r1, [r7, #14]
 8006546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	2301      	movs	r3, #1
 8006556:	480c      	ldr	r0, [pc, #48]	; (8006588 <BSP_I2C1_WriteReg+0x60>)
 8006558:	f005 ffee 	bl	800c538 <HAL_I2C_Mem_Write>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00c      	beq.n	800657c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8006562:	4809      	ldr	r0, [pc, #36]	; (8006588 <BSP_I2C1_WriteReg+0x60>)
 8006564:	f006 fa24 	bl	800c9b0 <HAL_I2C_GetError>
 8006568:	4603      	mov	r3, r0
 800656a:	2b04      	cmp	r3, #4
 800656c:	d103      	bne.n	8006576 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800656e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e002      	b.n	800657c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006576:	f06f 0303 	mvn.w	r3, #3
 800657a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800657c:	697b      	ldr	r3, [r7, #20]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200019b0 	.word	0x200019b0

0800658c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
 8006590:	af04      	add	r7, sp, #16
 8006592:	60ba      	str	r2, [r7, #8]
 8006594:	461a      	mov	r2, r3
 8006596:	4603      	mov	r3, r0
 8006598:	81fb      	strh	r3, [r7, #14]
 800659a:	460b      	mov	r3, r1
 800659c:	81bb      	strh	r3, [r7, #12]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80065a6:	89ba      	ldrh	r2, [r7, #12]
 80065a8:	89f9      	ldrh	r1, [r7, #14]
 80065aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065ae:	9302      	str	r3, [sp, #8]
 80065b0:	88fb      	ldrh	r3, [r7, #6]
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	2301      	movs	r3, #1
 80065ba:	480c      	ldr	r0, [pc, #48]	; (80065ec <BSP_I2C1_ReadReg+0x60>)
 80065bc:	f006 f8d0 	bl	800c760 <HAL_I2C_Mem_Read>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00c      	beq.n	80065e0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80065c6:	4809      	ldr	r0, [pc, #36]	; (80065ec <BSP_I2C1_ReadReg+0x60>)
 80065c8:	f006 f9f2 	bl	800c9b0 <HAL_I2C_GetError>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d103      	bne.n	80065da <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80065d2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e002      	b.n	80065e0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80065da:	f06f 0303 	mvn.w	r3, #3
 80065de:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80065e0:	697b      	ldr	r3, [r7, #20]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200019b0 	.word	0x200019b0

080065f0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80065f4:	f005 fae8 	bl	800bbc8 <HAL_GetTick>
 80065f8:	4603      	mov	r3, r0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a1c      	ldr	r2, [pc, #112]	; (8006680 <MX_I2C1_Init+0x80>)
 8006610:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x20303E5D;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a1b      	ldr	r2, [pc, #108]	; (8006684 <MX_I2C1_Init+0x84>)
 8006616:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f005 fea4 	bl	800c390 <HAL_I2C_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006652:	2100      	movs	r1, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f006 fc51 	bl	800cefc <HAL_I2CEx_ConfigAnalogFilter>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f006 fc93 	bl	800cf92 <HAL_I2CEx_ConfigDigitalFilter>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006676:	7bfb      	ldrb	r3, [r7, #15]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40005400 	.word	0x40005400
 8006684:	20303e5d 	.word	0x20303e5d

08006688 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0ae      	sub	sp, #184	; 0xb8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006690:	f107 0314 	add.w	r3, r7, #20
 8006694:	2290      	movs	r2, #144	; 0x90
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f00c ff30 	bl	80134fe <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800669e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066a2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80066a4:	2300      	movs	r3, #0
 80066a6:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80066a8:	f107 0314 	add.w	r3, r7, #20
 80066ac:	4618      	mov	r0, r3
 80066ae:	f007 fb6b 	bl	800dd88 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066b2:	4b24      	ldr	r3, [pc, #144]	; (8006744 <I2C1_MspInit+0xbc>)
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	4a23      	ldr	r2, [pc, #140]	; (8006744 <I2C1_MspInit+0xbc>)
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	6313      	str	r3, [r2, #48]	; 0x30
 80066be:	4b21      	ldr	r3, [pc, #132]	; (8006744 <I2C1_MspInit+0xbc>)
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80066ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066d2:	2312      	movs	r3, #18
 80066d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066de:	2303      	movs	r3, #3
 80066e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80066e4:	2304      	movs	r3, #4
 80066e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80066ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80066ee:	4619      	mov	r1, r3
 80066f0:	4815      	ldr	r0, [pc, #84]	; (8006748 <I2C1_MspInit+0xc0>)
 80066f2:	f005 fb7b 	bl	800bdec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80066f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066fe:	2312      	movs	r3, #18
 8006700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006704:	2300      	movs	r3, #0
 8006706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800670a:	2303      	movs	r3, #3
 800670c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8006710:	2304      	movs	r3, #4
 8006712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8006716:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800671a:	4619      	mov	r1, r3
 800671c:	480a      	ldr	r0, [pc, #40]	; (8006748 <I2C1_MspInit+0xc0>)
 800671e:	f005 fb65 	bl	800bdec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <I2C1_MspInit+0xbc>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <I2C1_MspInit+0xbc>)
 8006728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800672c:	6413      	str	r3, [r2, #64]	; 0x40
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <I2C1_MspInit+0xbc>)
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800673a:	bf00      	nop
 800673c:	37b8      	adds	r7, #184	; 0xb8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800
 8006748:	40020400 	.word	0x40020400

0800674c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <I2C1_MspDeInit+0x30>)
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	4a08      	ldr	r2, [pc, #32]	; (800677c <I2C1_MspDeInit+0x30>)
 800675a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800675e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8006760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006764:	4806      	ldr	r0, [pc, #24]	; (8006780 <I2C1_MspDeInit+0x34>)
 8006766:	f005 fced 	bl	800c144 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800676a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800676e:	4804      	ldr	r0, [pc, #16]	; (8006780 <I2C1_MspDeInit+0x34>)
 8006770:	f005 fce8 	bl	800c144 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40023800 	.word	0x40023800
 8006780:	40020400 	.word	0x40020400

08006784 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
	return 1;
 8006788:	2301      	movs	r3, #1
}
 800678a:	4618      	mov	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <_kill>:

int _kill(int pid, int sig)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800679e:	f00c fd7d 	bl	801329c <__errno>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2216      	movs	r2, #22
 80067a6:	601a      	str	r2, [r3, #0]
	return -1;
 80067a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_exit>:

void _exit (int status)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80067bc:	f04f 31ff 	mov.w	r1, #4294967295
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff ffe7 	bl	8006794 <_kill>
	while (1) {}		/* Make sure we hang here */
 80067c6:	e7fe      	b.n	80067c6 <_exit+0x12>

080067c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e00a      	b.n	80067f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80067da:	f3af 8000 	nop.w
 80067de:	4601      	mov	r1, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	60ba      	str	r2, [r7, #8]
 80067e6:	b2ca      	uxtb	r2, r1
 80067e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	3301      	adds	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	dbf0      	blt.n	80067da <_read+0x12>
	}

return len;
 80067f8:	687b      	ldr	r3, [r7, #4]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <_close>:
	}
	return len;
}

int _close(int file)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
	return -1;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800682a:	605a      	str	r2, [r3, #4]
	return 0;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <_isatty>:

int _isatty(int file)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
	return 1;
 8006842:	2301      	movs	r3, #1
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
	return 0;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006874:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <_sbrk+0x5c>)
 8006876:	4b15      	ldr	r3, [pc, #84]	; (80068cc <_sbrk+0x60>)
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006880:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <_sbrk+0x64>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006888:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <_sbrk+0x64>)
 800688a:	4a12      	ldr	r2, [pc, #72]	; (80068d4 <_sbrk+0x68>)
 800688c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800688e:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <_sbrk+0x64>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	429a      	cmp	r2, r3
 800689a:	d207      	bcs.n	80068ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800689c:	f00c fcfe 	bl	801329c <__errno>
 80068a0:	4603      	mov	r3, r0
 80068a2:	220c      	movs	r2, #12
 80068a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068a6:	f04f 33ff 	mov.w	r3, #4294967295
 80068aa:	e009      	b.n	80068c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <_sbrk+0x64>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <_sbrk+0x64>)
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	4a05      	ldr	r2, [pc, #20]	; (80068d0 <_sbrk+0x64>)
 80068bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068be:	68fb      	ldr	r3, [r7, #12]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20080000 	.word	0x20080000
 80068cc:	00000400 	.word	0x00000400
 80068d0:	20001a08 	.word	0x20001a08
 80068d4:	200065a8 	.word	0x200065a8

080068d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <SystemInit+0x20>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	4a05      	ldr	r2, [pc, #20]	; (80068f8 <SystemInit+0x20>)
 80068e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068ec:	bf00      	nop
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000ed00 	.word	0xe000ed00

080068fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80068fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006900:	480d      	ldr	r0, [pc, #52]	; (8006938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006902:	490e      	ldr	r1, [pc, #56]	; (800693c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006904:	4a0e      	ldr	r2, [pc, #56]	; (8006940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006908:	e002      	b.n	8006910 <LoopCopyDataInit>

0800690a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800690a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800690c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800690e:	3304      	adds	r3, #4

08006910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006914:	d3f9      	bcc.n	800690a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006916:	4a0b      	ldr	r2, [pc, #44]	; (8006944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006918:	4c0b      	ldr	r4, [pc, #44]	; (8006948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800691a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800691c:	e001      	b.n	8006922 <LoopFillZerobss>

0800691e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800691e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006920:	3204      	adds	r2, #4

08006922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006924:	d3fb      	bcc.n	800691e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006926:	f7ff ffd7 	bl	80068d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800692a:	f00c fdb3 	bl	8013494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800692e:	f7fd f86d 	bl	8003a0c <main>
  bx  lr    
 8006932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006934:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800693c:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8006940:	08018a60 	.word	0x08018a60
  ldr r2, =_sbss
 8006944:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8006948:	200065a8 	.word	0x200065a8

0800694c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800694c:	e7fe      	b.n	800694c <ADC_IRQHandler>
	...

08006950 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d103      	bne.n	8006968 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e034      	b.n	80069d2 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	7b1a      	ldrb	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695a      	ldr	r2, [r3, #20]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0e      	ldr	r2, [pc, #56]	; (80069dc <HTS221_RegisterBusIO+0x8c>)
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <HTS221_RegisterBusIO+0x90>)
 80069aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	69da      	ldr	r2, [r3, #28]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d004      	beq.n	80069cc <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	e002      	b.n	80069d2 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	0800700f 	.word	0x0800700f
 80069e0:	08007071 	.word	0x08007071

080069e4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d108      	bne.n	8006a08 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 faa4 	bl	8006f44 <HTS221_Initialize>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295
 8006a06:	e004      	b.n	8006a12 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d111      	bne.n	8006a50 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 f878 	bl	8006b22 <HTS221_HUM_Disable>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3c:	e00d      	b.n	8006a5a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f95f 	bl	8006d02 <HTS221_TEMP_Disable>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	e004      	b.n	8006a5a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3320      	adds	r3, #32
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fc28 	bl	80072c8 <hts221_device_id_get>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8006a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a82:	e000      	b.n	8006a86 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HTS221_GetCapabilities+0x44>)
 8006ab6:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <HTS221_GetCapabilities+0x44>)
 8006abc:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	41480000 	.word	0x41480000

08006ad8 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e015      	b.n	8006b1a <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3320      	adds	r3, #32
 8006afc:	2101      	movs	r1, #1
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fbf3 	bl	80072ea <hts221_power_on_set>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0e:	e004      	b.n	8006b1a <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	e015      	b.n	8006b64 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3320      	adds	r3, #32
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fbce 	bl	80072ea <hts221_power_on_set>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8006b54:	f04f 33ff 	mov.w	r3, #4294967295
 8006b58:	e004      	b.n	8006b64 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f96f 	bl	8006e5c <HTS221_GetOutputDataRate>
 8006b7e:	4603      	mov	r3, r0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006b94:	ed97 0a00 	vldr	s0, [r7]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f9a3 	bl	8006ee4 <HTS221_SetOutputDataRate>
 8006b9e:	4603      	mov	r3, r0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3320      	adds	r3, #32
 8006bb6:	f107 020c 	add.w	r2, r7, #12
 8006bba:	4611      	mov	r1, r2
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fc58 	bl	8007472 <hts221_hum_adc_point_0_get>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	e06b      	b.n	8006ca6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f103 0220 	add.w	r2, r3, #32
 8006bd4:	f107 030c 	add.w	r3, r7, #12
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f000 fbaa 	bl	8007336 <hts221_hum_rh_point_0_get>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8006be8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bec:	e05b      	b.n	8006ca6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f103 0220 	add.w	r2, r3, #32
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f000 fc5c 	bl	80074ba <hts221_hum_adc_point_1_get>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0c:	e04b      	b.n	8006ca6 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f103 0220 	add.w	r2, r3, #32
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	330c      	adds	r3, #12
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f000 fba8 	bl	8007372 <hts221_hum_rh_point_1_get>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8006c28:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2c:	e03b      	b.n	8006ca6 <HTS221_HUM_GetHumidity+0xfe>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3320      	adds	r3, #32
 8006c36:	f107 021c 	add.w	r2, r7, #28
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fafd 	bl	800723c <hts221_humidity_raw_get>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8006c48:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4c:	e02b      	b.n	8006ca6 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8006c4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006c52:	ee07 3a90 	vmov	s15, r3
 8006c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c5a:	f107 030c 	add.w	r3, r7, #12
 8006c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 f99a 	bl	8006f9c <Linear_Interpolation>
 8006c68:	eef0 7a40 	vmov.f32	s15, s0
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	edd3 7a00 	vldr	s15, [r3]
 8006c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c80:	d503      	bpl.n	8006c8a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	edd3 7a00 	vldr	s15, [r3]
 8006c90:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006cb0 <HTS221_HUM_GetHumidity+0x108>
 8006c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9c:	dd02      	ble.n	8006ca4 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <HTS221_HUM_GetHumidity+0x10c>)
 8006ca2:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	42c80000 	.word	0x42c80000
 8006cb4:	42c80000 	.word	0x42c80000

08006cb8 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e015      	b.n	8006cfa <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3320      	adds	r3, #32
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fb03 	bl	80072ea <hts221_power_on_set>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	e004      	b.n	8006cfa <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b082      	sub	sp, #8
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e015      	b.n	8006d44 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10b      	bne.n	8006d3a <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3320      	adds	r3, #32
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fade 	bl	80072ea <hts221_power_on_set>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8006d34:	f04f 33ff 	mov.w	r3, #4294967295
 8006d38:	e004      	b.n	8006d44 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f87f 	bl	8006e5c <HTS221_GetOutputDataRate>
 8006d5e:	4603      	mov	r3, r0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006d74:	ed97 0a00 	vldr	s0, [r7]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f8b3 	bl	8006ee4 <HTS221_SetOutputDataRate>
 8006d7e:	4603      	mov	r3, r0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3320      	adds	r3, #32
 8006d96:	f107 020c 	add.w	r2, r7, #12
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fbb0 	bl	8007502 <hts221_temp_adc_point_0_get>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8006da8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dac:	e052      	b.n	8006e54 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f103 0220 	add.w	r2, r3, #32
 8006db4:	f107 030c 	add.w	r3, r7, #12
 8006db8:	3304      	adds	r3, #4
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	f000 faf6 	bl	80073ae <hts221_temp_deg_point_0_get>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dcc:	e042      	b.n	8006e54 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f103 0220 	add.w	r2, r3, #32
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	3308      	adds	r3, #8
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f000 fbb4 	bl	800754a <hts221_temp_adc_point_1_get>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8006de8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dec:	e032      	b.n	8006e54 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f103 0220 	add.w	r2, r3, #32
 8006df4:	f107 030c 	add.w	r3, r7, #12
 8006df8:	330c      	adds	r3, #12
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f000 fb07 	bl	8007410 <hts221_temp_deg_point_1_get>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8006e08:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0c:	e022      	b.n	8006e54 <HTS221_TEMP_GetTemperature+0xcc>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3320      	adds	r3, #32
 8006e16:	f107 021c 	add.w	r2, r7, #28
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fa30 	bl	8007282 <hts221_temperature_raw_get>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8006e28:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2c:	e012      	b.n	8006e54 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8006e2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e3a:	f107 030c 	add.w	r3, r7, #12
 8006e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f8aa 	bl	8006f9c <Linear_Interpolation>
 8006e48:	eef0 7a40 	vmov.f32	s15, s0
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3320      	adds	r3, #32
 8006e6e:	f107 020b 	add.w	r2, r7, #11
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 f983 	bl	8007180 <hts221_data_rate_get>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
 8006e84:	e025      	b.n	8006ed2 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d81d      	bhi.n	8006ec8 <HTS221_GetOutputDataRate+0x6c>
 8006e8c:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <HTS221_GetOutputDataRate+0x38>)
 8006e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e92:	bf00      	nop
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006eaf 	.word	0x08006eaf
 8006e9c:	08006eb9 	.word	0x08006eb9
 8006ea0:	08006ec1 	.word	0x08006ec1
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
      break;
 8006eac:	e010      	b.n	8006ed0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006eb4:	601a      	str	r2, [r3, #0]
      break;
 8006eb6:	e00b      	b.n	8006ed0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4a08      	ldr	r2, [pc, #32]	; (8006edc <HTS221_GetOutputDataRate+0x80>)
 8006ebc:	601a      	str	r2, [r3, #0]
      break;
 8006ebe:	e007      	b.n	8006ed0 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	4a07      	ldr	r2, [pc, #28]	; (8006ee0 <HTS221_GetOutputDataRate+0x84>)
 8006ec4:	601a      	str	r2, [r3, #0]
      break;
 8006ec6:	e003      	b.n	8006ed0 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	60fb      	str	r3, [r7, #12]
      break;
 8006ece:	bf00      	nop
  }

  return ret;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40e00000 	.word	0x40e00000
 8006ee0:	41480000 	.word	0x41480000

08006ee4 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8006ef0:	edd7 7a00 	vldr	s15, [r7]
 8006ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f00:	d801      	bhi.n	8006f06 <HTS221_SetOutputDataRate+0x22>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e00b      	b.n	8006f1e <HTS221_SetOutputDataRate+0x3a>
 8006f06:	edd7 7a00 	vldr	s15, [r7]
 8006f0a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8006f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f16:	d801      	bhi.n	8006f1c <HTS221_SetOutputDataRate+0x38>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e000      	b.n	8006f1e <HTS221_SetOutputDataRate+0x3a>
 8006f1c:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8006f1e:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3320      	adds	r3, #32
 8006f24:	7bfa      	ldrb	r2, [r7, #15]
 8006f26:	4611      	mov	r1, r2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f902 	bl	8007132 <hts221_data_rate_set>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8006f34:	f04f 33ff 	mov.w	r3, #4294967295
 8006f38:	e000      	b.n	8006f3c <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3320      	adds	r3, #32
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f9c9 	bl	80072ea <hts221_power_on_set>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8006f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f62:	e017      	b.n	8006f94 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3320      	adds	r3, #32
 8006f68:	2101      	movs	r1, #1
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f940 	bl	80071f0 <hts221_block_data_update_set>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	e00b      	b.n	8006f94 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8006f7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff ffaf 	bl	8006ee4 <HTS221_SetOutputDataRate>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8006f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f90:	e000      	b.n	8006f94 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	ed93 7a03 	vldr	s14, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fb8:	edd7 7a00 	vldr	s15, [r7]
 8006fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	edd3 6a02 	vldr	s13, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	ed93 6a00 	vldr	s12, [r3]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006fe0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	edd3 6a02 	vldr	s13, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	edd3 7a00 	vldr	s15, [r3]
 8006ff4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006ff8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006ffc:	eef0 7a66 	vmov.f32	s15, s13
}
 8007000:	eeb0 0a67 	vmov.f32	s0, s15
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800700e:	b590      	push	{r4, r7, lr}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	461a      	mov	r2, r3
 800701a:	460b      	mov	r3, r1
 800701c:	72fb      	strb	r3, [r7, #11]
 800701e:	4613      	mov	r3, r2
 8007020:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10e      	bne.n	800704c <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	695c      	ldr	r4, [r3, #20]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	7b1b      	ldrb	r3, [r3, #12]
 8007036:	b298      	uxth	r0, r3
 8007038:	7afb      	ldrb	r3, [r7, #11]
 800703a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800703e:	b2db      	uxtb	r3, r3
 8007040:	b299      	uxth	r1, r3
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	47a0      	blx	r4
 8007048:	4603      	mov	r3, r0
 800704a:	e00d      	b.n	8007068 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	695c      	ldr	r4, [r3, #20]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	7b1b      	ldrb	r3, [r3, #12]
 8007054:	b298      	uxth	r0, r3
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800705c:	b2db      	uxtb	r3, r3
 800705e:	b299      	uxth	r1, r3
 8007060:	893b      	ldrh	r3, [r7, #8]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	47a0      	blx	r4
 8007066:	4603      	mov	r3, r0
  }
}
 8007068:	4618      	mov	r0, r3
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd90      	pop	{r4, r7, pc}

08007070 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	461a      	mov	r2, r3
 800707c:	460b      	mov	r3, r1
 800707e:	72fb      	strb	r3, [r7, #11]
 8007080:	4613      	mov	r3, r2
 8007082:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10e      	bne.n	80070ae <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	691c      	ldr	r4, [r3, #16]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	7b1b      	ldrb	r3, [r3, #12]
 8007098:	b298      	uxth	r0, r3
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	b299      	uxth	r1, r3
 80070a4:	893b      	ldrh	r3, [r7, #8]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	47a0      	blx	r4
 80070aa:	4603      	mov	r3, r0
 80070ac:	e00d      	b.n	80070ca <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	691c      	ldr	r4, [r3, #16]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	7b1b      	ldrb	r3, [r3, #12]
 80070b6:	b298      	uxth	r0, r3
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	b299      	uxth	r1, r3
 80070c2:	893b      	ldrh	r3, [r7, #8]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	47a0      	blx	r4
 80070c8:	4603      	mov	r3, r0
  }
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd90      	pop	{r4, r7, pc}

080070d2 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80070d2:	b590      	push	{r4, r7, lr}
 80070d4:	b087      	sub	sp, #28
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	461a      	mov	r2, r3
 80070de:	460b      	mov	r3, r1
 80070e0:	72fb      	strb	r3, [r7, #11]
 80070e2:	4613      	mov	r3, r2
 80070e4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685c      	ldr	r4, [r3, #4]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	68d8      	ldr	r0, [r3, #12]
 80070ee:	893b      	ldrh	r3, [r7, #8]
 80070f0:	7af9      	ldrb	r1, [r7, #11]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	47a0      	blx	r4
 80070f6:	6178      	str	r0, [r7, #20]

  return ret;
 80070f8:	697b      	ldr	r3, [r7, #20]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd90      	pop	{r4, r7, pc}

08007102 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007102:	b590      	push	{r4, r7, lr}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	461a      	mov	r2, r3
 800710e:	460b      	mov	r3, r1
 8007110:	72fb      	strb	r3, [r7, #11]
 8007112:	4613      	mov	r3, r2
 8007114:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681c      	ldr	r4, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	68d8      	ldr	r0, [r3, #12]
 800711e:	893b      	ldrh	r3, [r7, #8]
 8007120:	7af9      	ldrb	r1, [r7, #11]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	47a0      	blx	r4
 8007126:	6178      	str	r0, [r7, #20]

  return ret;
 8007128:	697b      	ldr	r3, [r7, #20]
}
 800712a:	4618      	mov	r0, r3
 800712c:	371c      	adds	r7, #28
 800712e:	46bd      	mov	sp, r7
 8007130:	bd90      	pop	{r4, r7, pc}

08007132 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800713e:	f107 0208 	add.w	r2, r7, #8
 8007142:	2301      	movs	r3, #1
 8007144:	2120      	movs	r1, #32
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff ffc3 	bl	80070d2 <hts221_read_reg>
 800714c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10f      	bne.n	8007174 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	b2da      	uxtb	r2, r3
 800715c:	7a3b      	ldrb	r3, [r7, #8]
 800715e:	f362 0301 	bfi	r3, r2, #0, #2
 8007162:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007164:	f107 0208 	add.w	r2, r7, #8
 8007168:	2301      	movs	r3, #1
 800716a:	2120      	movs	r1, #32
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ffc8 	bl	8007102 <hts221_write_reg>
 8007172:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800718a:	f107 0208 	add.w	r2, r7, #8
 800718e:	2301      	movs	r3, #1
 8007190:	2120      	movs	r1, #32
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff ff9d 	bl	80070d2 <hts221_read_reg>
 8007198:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800719a:	7a3b      	ldrb	r3, [r7, #8]
 800719c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d81a      	bhi.n	80071dc <hts221_data_rate_get+0x5c>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <hts221_data_rate_get+0x2c>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	080071c5 	.word	0x080071c5
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	080071d5 	.word	0x080071d5
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
      break;
 80071c2:	e00f      	b.n	80071e4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2201      	movs	r2, #1
 80071c8:	701a      	strb	r2, [r3, #0]
      break;
 80071ca:	e00b      	b.n	80071e4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2202      	movs	r2, #2
 80071d0:	701a      	strb	r2, [r3, #0]
      break;
 80071d2:	e007      	b.n	80071e4 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	2203      	movs	r2, #3
 80071d8:	701a      	strb	r2, [r3, #0]
      break;
 80071da:	e003      	b.n	80071e4 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2204      	movs	r2, #4
 80071e0:	701a      	strb	r2, [r3, #0]
      break;
 80071e2:	bf00      	nop
  }

  return ret;
 80071e4:	68fb      	ldr	r3, [r7, #12]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop

080071f0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80071fc:	f107 0208 	add.w	r2, r7, #8
 8007200:	2301      	movs	r3, #1
 8007202:	2120      	movs	r1, #32
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff ff64 	bl	80070d2 <hts221_read_reg>
 800720a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10f      	bne.n	8007232 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	b2da      	uxtb	r2, r3
 800721a:	7a3b      	ldrb	r3, [r7, #8]
 800721c:	f362 0382 	bfi	r3, r2, #2, #1
 8007220:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8007222:	f107 0208 	add.w	r2, r7, #8
 8007226:	2301      	movs	r3, #1
 8007228:	2120      	movs	r1, #32
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff ff69 	bl	8007102 <hts221_write_reg>
 8007230:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007232:	68fb      	ldr	r3, [r7, #12]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8007246:	f107 0208 	add.w	r2, r7, #8
 800724a:	2302      	movs	r3, #2
 800724c:	2128      	movs	r1, #40	; 0x28
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ff3f 	bl	80070d2 <hts221_read_reg>
 8007254:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8007256:	7a7b      	ldrb	r3, [r7, #9]
 8007258:	b21a      	sxth	r2, r3
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007264:	b29b      	uxth	r3, r3
 8007266:	021b      	lsls	r3, r3, #8
 8007268:	b29a      	uxth	r2, r3
 800726a:	7a3b      	ldrb	r3, [r7, #8]
 800726c:	b29b      	uxth	r3, r3
 800726e:	4413      	add	r3, r2
 8007270:	b29b      	uxth	r3, r3
 8007272:	b21a      	sxth	r2, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	801a      	strh	r2, [r3, #0]

  return ret;
 8007278:	68fb      	ldr	r3, [r7, #12]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800728c:	f107 0208 	add.w	r2, r7, #8
 8007290:	2302      	movs	r3, #2
 8007292:	212a      	movs	r1, #42	; 0x2a
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff ff1c 	bl	80070d2 <hts221_read_reg>
 800729a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800729c:	7a7b      	ldrb	r3, [r7, #9]
 800729e:	b21a      	sxth	r2, r3
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	7a3b      	ldrb	r3, [r7, #8]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b21a      	sxth	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	801a      	strh	r2, [r3, #0]

  return ret;
 80072be:	68fb      	ldr	r3, [r7, #12]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80072d2:	2301      	movs	r3, #1
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	210f      	movs	r1, #15
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fefa 	bl	80070d2 <hts221_read_reg>
 80072de:	60f8      	str	r0, [r7, #12]

  return ret;
 80072e0:	68fb      	ldr	r3, [r7, #12]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80072f6:	f107 0208 	add.w	r2, r7, #8
 80072fa:	2301      	movs	r3, #1
 80072fc:	2120      	movs	r1, #32
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fee7 	bl	80070d2 <hts221_read_reg>
 8007304:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10f      	bne.n	800732c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	b2da      	uxtb	r2, r3
 8007314:	7a3b      	ldrb	r3, [r7, #8]
 8007316:	f362 13c7 	bfi	r3, r2, #7, #1
 800731a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800731c:	f107 0208 	add.w	r2, r7, #8
 8007320:	2301      	movs	r3, #1
 8007322:	2120      	movs	r1, #32
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff feec 	bl	8007102 <hts221_write_reg>
 800732a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8007340:	f107 020b 	add.w	r2, r7, #11
 8007344:	2301      	movs	r3, #1
 8007346:	2130      	movs	r1, #48	; 0x30
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fec2 	bl	80070d2 <hts221_read_reg>
 800734e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8007350:	7afb      	ldrb	r3, [r7, #11]
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800735a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800735e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007368:	68fb      	ldr	r3, [r7, #12]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b084      	sub	sp, #16
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800737c:	f107 020b 	add.w	r2, r7, #11
 8007380:	2301      	movs	r3, #1
 8007382:	2131      	movs	r1, #49	; 0x31
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff fea4 	bl	80070d2 <hts221_read_reg>
 800738a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007396:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800739a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80073a4:	68fb      	ldr	r3, [r7, #12]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80073b8:	f107 020f 	add.w	r2, r7, #15
 80073bc:	2301      	movs	r3, #1
 80073be:	2132      	movs	r1, #50	; 0x32
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff fe86 	bl	80070d2 <hts221_read_reg>
 80073c6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d11b      	bne.n	8007406 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80073ce:	f107 0210 	add.w	r2, r7, #16
 80073d2:	2301      	movs	r3, #1
 80073d4:	2135      	movs	r1, #53	; 0x35
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fe7b 	bl	80070d2 <hts221_read_reg>
 80073dc:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80073de:	7c3b      	ldrb	r3, [r7, #16]
 80073e0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80073e8:	7cfb      	ldrb	r3, [r7, #19]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	7bfa      	ldrb	r2, [r7, #15]
 80073ee:	4413      	add	r3, r2
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073f8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80073fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8007406:	697b      	ldr	r3, [r7, #20]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800741a:	f107 020f 	add.w	r2, r7, #15
 800741e:	2301      	movs	r3, #1
 8007420:	2133      	movs	r1, #51	; 0x33
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fe55 	bl	80070d2 <hts221_read_reg>
 8007428:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d11b      	bne.n	8007468 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8007430:	f107 0210 	add.w	r2, r7, #16
 8007434:	2301      	movs	r3, #1
 8007436:	2135      	movs	r1, #53	; 0x35
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fe4a 	bl	80070d2 <hts221_read_reg>
 800743e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8007440:	7c3b      	ldrb	r3, [r7, #16]
 8007442:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007446:	b2db      	uxtb	r3, r3
 8007448:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800744a:	7cfb      	ldrb	r3, [r7, #19]
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	7bfa      	ldrb	r2, [r7, #15]
 8007450:	4413      	add	r3, r2
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800745a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800745e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8007468:	697b      	ldr	r3, [r7, #20]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800747c:	f107 0208 	add.w	r2, r7, #8
 8007480:	2302      	movs	r3, #2
 8007482:	2136      	movs	r1, #54	; 0x36
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff fe24 	bl	80070d2 <hts221_read_reg>
 800748a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800748c:	7a7b      	ldrb	r3, [r7, #9]
 800748e:	b29b      	uxth	r3, r3
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	b29a      	uxth	r2, r3
 8007494:	7a3b      	ldrb	r3, [r7, #8]
 8007496:	b29b      	uxth	r3, r3
 8007498:	4413      	add	r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800749e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80074b0:	68fb      	ldr	r3, [r7, #12]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80074c4:	f107 0208 	add.w	r2, r7, #8
 80074c8:	2302      	movs	r3, #2
 80074ca:	213a      	movs	r1, #58	; 0x3a
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff fe00 	bl	80070d2 <hts221_read_reg>
 80074d2:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80074d4:	7a7b      	ldrb	r3, [r7, #9]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	b29a      	uxth	r2, r3
 80074dc:	7a3b      	ldrb	r3, [r7, #8]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80074e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80074f8:	68fb      	ldr	r3, [r7, #12]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b084      	sub	sp, #16
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800750c:	f107 0208 	add.w	r2, r7, #8
 8007510:	2302      	movs	r3, #2
 8007512:	213c      	movs	r1, #60	; 0x3c
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7ff fddc 	bl	80070d2 <hts221_read_reg>
 800751a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800751c:	7a7b      	ldrb	r3, [r7, #9]
 800751e:	b29b      	uxth	r3, r3
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	b29a      	uxth	r2, r3
 8007524:	7a3b      	ldrb	r3, [r7, #8]
 8007526:	b29b      	uxth	r3, r3
 8007528:	4413      	add	r3, r2
 800752a:	b29b      	uxth	r3, r3
 800752c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800752e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007540:	68fb      	ldr	r3, [r7, #12]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8007554:	f107 0208 	add.w	r2, r7, #8
 8007558:	2302      	movs	r3, #2
 800755a:	213e      	movs	r1, #62	; 0x3e
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff fdb8 	bl	80070d2 <hts221_read_reg>
 8007562:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8007564:	7a7b      	ldrb	r3, [r7, #9]
 8007566:	b29b      	uxth	r3, r3
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	b29a      	uxth	r2, r3
 800756c:	7a3b      	ldrb	r3, [r7, #8]
 800756e:	b29b      	uxth	r3, r3
 8007570:	4413      	add	r3, r2
 8007572:	b29b      	uxth	r3, r3
 8007574:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8007576:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8007588:	68fb      	ldr	r3, [r7, #12]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d103      	bne.n	80075b0 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 80075a8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	e051      	b.n	8007654 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	7b1a      	ldrb	r2, [r3, #12]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <LPS22HB_RegisterBusIO+0xcc>)
 80075ec:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <LPS22HB_RegisterBusIO+0xd0>)
 80075f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	69da      	ldr	r2, [r3, #28]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 800760a:	f04f 33ff 	mov.w	r3, #4294967295
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	e020      	b.n	8007654 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4798      	blx	r3
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 800761e:	f04f 33ff 	mov.w	r3, #4294967295
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	e016      	b.n	8007654 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d112      	bne.n	8007654 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10d      	bne.n	8007654 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8007638:	2301      	movs	r3, #1
 800763a:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	461a      	mov	r2, r3
 8007640:	2110      	movs	r1, #16
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9df 	bl	8007a06 <LPS22HB_Write_Reg>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 800764e:	f04f 33ff 	mov.w	r3, #4294967295
 8007652:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007654:	68fb      	ldr	r3, [r7, #12]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	08007cc7 	.word	0x08007cc7
 8007664:	08007d4d 	.word	0x08007d4d

08007668 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007676:	2b00      	cmp	r3, #0
 8007678:	d108      	bne.n	800768c <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 faca 	bl	8007c14 <LPS22HB_Initialize>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8007686:	f04f 33ff 	mov.w	r3, #4294967295
 800768a:	e004      	b.n	8007696 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <LPS22HB_DeInit>:
  * @brief  Deinitialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d111      	bne.n	80076d4 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f877 	bl	80077a4 <LPS22HB_PRESS_Disable>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295
 80076c0:	e00d      	b.n	80076de <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f918 	bl	80078f8 <LPS22HB_TEMP_Disable>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	e004      	b.n	80076de <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <LPS22HB_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3320      	adds	r3, #32
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fcd0 	bl	800809c <lps22hb_device_id_get>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8007702:	f04f 33ff 	mov.w	r3, #4294967295
 8007706:	e000      	b.n	800770a <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
	...

08007714 <LPS22HB_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HB sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	4a05      	ldr	r2, [pc, #20]	; (8007758 <LPS22HB_GetCapabilities+0x44>)
 8007742:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	4a04      	ldr	r2, [pc, #16]	; (8007758 <LPS22HB_GetCapabilities+0x44>)
 8007748:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	42960000 	.word	0x42960000

0800775c <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	e014      	b.n	800779c <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f103 0220 	add.w	r2, r3, #32
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f000 fbd5 	bl	8007f30 <lps22hb_data_rate_set>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d002      	beq.n	8007792 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800778c:	f04f 33ff 	mov.w	r3, #4294967295
 8007790:	e004      	b.n	800779c <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <LPS22HB_PRESS_Disable>:
  * @brief  Disable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e024      	b.n	8007804 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11a      	bne.n	80077fa <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f103 0220 	add.w	r2, r3, #32
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3333      	adds	r3, #51	; 0x33
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f000 fbd3 	bl	8007f7c <lps22hb_data_rate_get>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80077dc:	f04f 33ff 	mov.w	r3, #4294967295
 80077e0:	e010      	b.n	8007804 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3320      	adds	r3, #32
 80077e6:	2100      	movs	r1, #0
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 fba1 	bl	8007f30 <lps22hb_data_rate_set>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80077f4:	f04f 33ff 	mov.w	r3, #4294967295
 80077f8:	e004      	b.n	8007804 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <LPS22HB_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f90f 	bl	8007a3c <LPS22HB_GetOutputDataRate>
 800781e:	4603      	mov	r3, r0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <LPS22HB_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800783a:	2b01      	cmp	r3, #1
 800783c:	d106      	bne.n	800784c <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800783e:	ed97 0a00 	vldr	s0, [r7]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f94e 	bl	8007ae4 <LPS22HB_SetOutputDataRate_When_Enabled>
 8007848:	4603      	mov	r3, r0
 800784a:	e005      	b.n	8007858 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 800784c:	ed97 0a00 	vldr	s0, [r7]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f99f 	bl	8007b94 <LPS22HB_SetOutputDataRate_When_Disabled>
 8007856:	4603      	mov	r3, r0
  }
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800786a:	f107 030c 	add.w	r3, r7, #12
 800786e:	2204      	movs	r2, #4
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f00b fe43 	bl	80134fe <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3320      	adds	r3, #32
 800787c:	f107 020c 	add.w	r2, r7, #12
 8007880:	4611      	mov	r1, r2
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fbbe 	bl	8008004 <lps22hb_pressure_raw_get>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800788e:	f04f 33ff 	mov.w	r3, #4294967295
 8007892:	e009      	b.n	80078a8 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 facc 	bl	8007e34 <lps22hb_from_lsb_to_hpa>
 800789c:	eef0 7a40 	vmov.f32	s15, s0
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <LPS22HB_TEMP_Enable>:
  * @brief  Enable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e014      	b.n	80078f0 <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f103 0220 	add.w	r2, r3, #32
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80078d2:	4619      	mov	r1, r3
 80078d4:	4610      	mov	r0, r2
 80078d6:	f000 fb2b 	bl	8007f30 <lps22hb_data_rate_set>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80078e0:	f04f 33ff 	mov.w	r3, #4294967295
 80078e4:	e004      	b.n	80078f0 <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <LPS22HB_TEMP_Disable>:
  * @brief  Disable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	e024      	b.n	8007958 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11a      	bne.n	800794e <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f103 0220 	add.w	r2, r3, #32
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3333      	adds	r3, #51	; 0x33
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f000 fb29 	bl	8007f7c <lps22hb_data_rate_get>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 8007930:	f04f 33ff 	mov.w	r3, #4294967295
 8007934:	e010      	b.n	8007958 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3320      	adds	r3, #32
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f000 faf7 	bl	8007f30 <lps22hb_data_rate_set>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8007948:	f04f 33ff 	mov.w	r3, #4294967295
 800794c:	e004      	b.n	8007958 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <LPS22HB_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f865 	bl	8007a3c <LPS22HB_GetOutputDataRate>
 8007972:	4603      	mov	r3, r0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <LPS22HB_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800798e:	2b01      	cmp	r3, #1
 8007990:	d106      	bne.n	80079a0 <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007992:	ed97 0a00 	vldr	s0, [r7]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f8a4 	bl	8007ae4 <LPS22HB_SetOutputDataRate_When_Enabled>
 800799c:	4603      	mov	r3, r0
 800799e:	e005      	b.n	80079ac <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 80079a0:	ed97 0a00 	vldr	s0, [r7]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f8f5 	bl	8007b94 <LPS22HB_SetOutputDataRate_When_Disabled>
 80079aa:	4603      	mov	r3, r0
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <LPS22HB_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	2202      	movs	r2, #2
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f00b fd99 	bl	80134fe <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3320      	adds	r3, #32
 80079d0:	f107 020c 	add.w	r2, r7, #12
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fb3d 	bl	8008056 <lps22hb_temperature_raw_get>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295
 80079e6:	e00a      	b.n	80079fe <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 80079e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 fa39 	bl	8007e64 <lps22hb_from_lsb_to_degc>
 80079f2:	eef0 7a40 	vmov.f32	s15, s0
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	70fb      	strb	r3, [r7, #3]
 8007a12:	4613      	mov	r3, r2
 8007a14:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f103 0020 	add.w	r0, r3, #32
 8007a1c:	1cba      	adds	r2, r7, #2
 8007a1e:	78f9      	ldrb	r1, [r7, #3]
 8007a20:	2301      	movs	r3, #1
 8007a22:	f000 f9ee 	bl	8007e02 <lps22hb_write_reg>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a30:	e000      	b.n	8007a34 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <LPS22HB_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	3320      	adds	r3, #32
 8007a4e:	f107 020b 	add.w	r2, r7, #11
 8007a52:	4611      	mov	r1, r2
 8007a54:	4618      	mov	r0, r3
 8007a56:	f000 fa91 	bl	8007f7c <lps22hb_data_rate_get>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 8007a60:	f04f 33ff 	mov.w	r3, #4294967295
 8007a64:	e031      	b.n	8007aca <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	d829      	bhi.n	8007ac0 <LPS22HB_GetOutputDataRate+0x84>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <LPS22HB_GetOutputDataRate+0x38>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007a97 	.word	0x08007a97
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007aa9 	.word	0x08007aa9
 8007a84:	08007ab1 	.word	0x08007ab1
 8007a88:	08007ab9 	.word	0x08007ab9
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	f04f 0200 	mov.w	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
      break;
 8007a94:	e018      	b.n	8007ac8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007a9c:	601a      	str	r2, [r3, #0]
      break;
 8007a9e:	e013      	b.n	8007ac8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	4a0c      	ldr	r2, [pc, #48]	; (8007ad4 <LPS22HB_GetOutputDataRate+0x98>)
 8007aa4:	601a      	str	r2, [r3, #0]
      break;
 8007aa6:	e00f      	b.n	8007ac8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	4a0b      	ldr	r2, [pc, #44]	; (8007ad8 <LPS22HB_GetOutputDataRate+0x9c>)
 8007aac:	601a      	str	r2, [r3, #0]
      break;
 8007aae:	e00b      	b.n	8007ac8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <LPS22HB_GetOutputDataRate+0xa0>)
 8007ab4:	601a      	str	r2, [r3, #0]
      break;
 8007ab6:	e007      	b.n	8007ac8 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <LPS22HB_GetOutputDataRate+0xa4>)
 8007abc:	601a      	str	r2, [r3, #0]
      break;
 8007abe:	e003      	b.n	8007ac8 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 8007ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac4:	60fb      	str	r3, [r7, #12]
      break;
 8007ac6:	bf00      	nop
  }

  return ret;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	41200000 	.word	0x41200000
 8007ad8:	41c80000 	.word	0x41c80000
 8007adc:	42480000 	.word	0x42480000
 8007ae0:	42960000 	.word	0x42960000

08007ae4 <LPS22HB_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8007af0:	edd7 7a00 	vldr	s15, [r7]
 8007af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b00:	d801      	bhi.n	8007b06 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e021      	b.n	8007b4a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007b06:	edd7 7a00 	vldr	s15, [r7]
 8007b0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b16:	d801      	bhi.n	8007b1c <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e016      	b.n	8007b4a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007b1c:	edd7 7a00 	vldr	s15, [r7]
 8007b20:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	d801      	bhi.n	8007b32 <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e00b      	b.n	8007b4a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007b32:	edd7 7a00 	vldr	s15, [r7]
 8007b36:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007b90 <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8007b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b42:	d801      	bhi.n	8007b48 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8007b44:	2304      	movs	r3, #4
 8007b46:	e000      	b.n	8007b4a <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007b48:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8007b4a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3320      	adds	r3, #32
 8007b50:	7bfa      	ldrb	r2, [r7, #15]
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 f9eb 	bl	8007f30 <lps22hb_data_rate_set>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	e00f      	b.n	8007b86 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f103 0220 	add.w	r2, r3, #32
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3333      	adds	r3, #51	; 0x33
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 fa02 	bl	8007f7c <lps22hb_data_rate_get>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 8007b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b82:	e000      	b.n	8007b86 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	42480000 	.word	0x42480000

08007b94 <LPS22HB_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 8007ba0:	edd7 7a00 	vldr	s15, [r7]
 8007ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb0:	d801      	bhi.n	8007bb6 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e021      	b.n	8007bfa <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007bb6:	edd7 7a00 	vldr	s15, [r7]
 8007bba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc6:	d801      	bhi.n	8007bcc <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e016      	b.n	8007bfa <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007bcc:	edd7 7a00 	vldr	s15, [r7]
 8007bd0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bdc:	d801      	bhi.n	8007be2 <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 8007bde:	2303      	movs	r3, #3
 8007be0:	e00b      	b.n	8007bfa <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007be2:	edd7 7a00 	vldr	s15, [r7]
 8007be6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007c10 <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 8007bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf2:	d801      	bhi.n	8007bf8 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	e000      	b.n	8007bfa <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 8007bf8:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	42480000 	.word	0x42480000

08007c14 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3320      	adds	r3, #32
 8007c20:	2101      	movs	r1, #1
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fa4b 	bl	80080be <lps22hb_low_power_set>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c32:	e044      	b.n	8007cbe <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3320      	adds	r3, #32
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 f978 	bl	8007f30 <lps22hb_data_rate_set>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d002      	beq.n	8007c4c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4a:	e038      	b.n	8007cbe <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3320      	adds	r3, #32
 8007c50:	2102      	movs	r1, #2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 f946 	bl	8007ee4 <lps22hb_low_pass_filter_mode_set>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8007c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c62:	e02c      	b.n	8007cbe <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3320      	adds	r3, #32
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f914 	bl	8007e98 <lps22hb_block_data_update_set>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e020      	b.n	8007cbe <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3320      	adds	r3, #32
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fa3d 	bl	800810a <lps22hb_auto_add_inc_set>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00e      	beq.n	8007cb4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9a:	e010      	b.n	8007cbe <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3320      	adds	r3, #32
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fa31 	bl	800810a <lps22hb_auto_add_inc_set>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	e004      	b.n	8007cbe <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007cc6:	b590      	push	{r4, r7, lr}
 8007cc8:	b089      	sub	sp, #36	; 0x24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	60f8      	str	r0, [r7, #12]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	72fb      	strb	r3, [r7, #11]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d121      	bne.n	8007d2e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8007cea:	2300      	movs	r3, #0
 8007cec:	83fb      	strh	r3, [r7, #30]
 8007cee:	e018      	b.n	8007d22 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	695c      	ldr	r4, [r3, #20]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	7b1b      	ldrb	r3, [r3, #12]
 8007cf8:	b298      	uxth	r0, r3
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	8bfb      	ldrh	r3, [r7, #30]
 8007d00:	4413      	add	r3, r2
 8007d02:	b299      	uxth	r1, r3
 8007d04:	8bfb      	ldrh	r3, [r7, #30]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	441a      	add	r2, r3
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	47a0      	blx	r4
 8007d0e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	e013      	b.n	8007d44 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8007d1c:	8bfb      	ldrh	r3, [r7, #30]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	83fb      	strh	r3, [r7, #30]
 8007d22:	8bfa      	ldrh	r2, [r7, #30]
 8007d24:	893b      	ldrh	r3, [r7, #8]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d3e2      	bcc.n	8007cf0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	e00a      	b.n	8007d44 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	695c      	ldr	r4, [r3, #20]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	7b1b      	ldrb	r3, [r3, #12]
 8007d36:	b298      	uxth	r0, r3
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	b299      	uxth	r1, r3
 8007d3c:	893b      	ldrh	r3, [r7, #8]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	47a0      	blx	r4
 8007d42:	4603      	mov	r3, r0
  }
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3724      	adds	r7, #36	; 0x24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd90      	pop	{r4, r7, pc}

08007d4c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007d4c:	b590      	push	{r4, r7, lr}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	461a      	mov	r2, r3
 8007d58:	460b      	mov	r3, r1
 8007d5a:	72fb      	strb	r3, [r7, #11]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d121      	bne.n	8007db4 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8007d70:	2300      	movs	r3, #0
 8007d72:	83fb      	strh	r3, [r7, #30]
 8007d74:	e018      	b.n	8007da8 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	691c      	ldr	r4, [r3, #16]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	7b1b      	ldrb	r3, [r3, #12]
 8007d7e:	b298      	uxth	r0, r3
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	8bfb      	ldrh	r3, [r7, #30]
 8007d86:	4413      	add	r3, r2
 8007d88:	b299      	uxth	r1, r3
 8007d8a:	8bfb      	ldrh	r3, [r7, #30]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	441a      	add	r2, r3
 8007d90:	2301      	movs	r3, #1
 8007d92:	47a0      	blx	r4
 8007d94:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007da0:	e013      	b.n	8007dca <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8007da2:	8bfb      	ldrh	r3, [r7, #30]
 8007da4:	3301      	adds	r3, #1
 8007da6:	83fb      	strh	r3, [r7, #30]
 8007da8:	8bfa      	ldrh	r2, [r7, #30]
 8007daa:	893b      	ldrh	r3, [r7, #8]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d3e2      	bcc.n	8007d76 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	e00a      	b.n	8007dca <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	691c      	ldr	r4, [r3, #16]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	7b1b      	ldrb	r3, [r3, #12]
 8007dbc:	b298      	uxth	r0, r3
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	b299      	uxth	r1, r3
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	47a0      	blx	r4
 8007dc8:	4603      	mov	r3, r0
  }
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3724      	adds	r7, #36	; 0x24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd90      	pop	{r4, r7, pc}

08007dd2 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007dd2:	b590      	push	{r4, r7, lr}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	460b      	mov	r3, r1
 8007de0:	72fb      	strb	r3, [r7, #11]
 8007de2:	4613      	mov	r3, r2
 8007de4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685c      	ldr	r4, [r3, #4]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68d8      	ldr	r0, [r3, #12]
 8007dee:	893b      	ldrh	r3, [r7, #8]
 8007df0:	7af9      	ldrb	r1, [r7, #11]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	47a0      	blx	r4
 8007df6:	6178      	str	r0, [r7, #20]

  return ret;
 8007df8:	697b      	ldr	r3, [r7, #20]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd90      	pop	{r4, r7, pc}

08007e02 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007e02:	b590      	push	{r4, r7, lr}
 8007e04:	b087      	sub	sp, #28
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	460b      	mov	r3, r1
 8007e10:	72fb      	strb	r3, [r7, #11]
 8007e12:	4613      	mov	r3, r2
 8007e14:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681c      	ldr	r4, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68d8      	ldr	r0, [r3, #12]
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	7af9      	ldrb	r1, [r7, #11]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	47a0      	blx	r4
 8007e26:	6178      	str	r0, [r7, #20]

  return ret;
 8007e28:	697b      	ldr	r3, [r7, #20]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd90      	pop	{r4, r7, pc}
	...

08007e34 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e46:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007e60 <lps22hb_from_lsb_to_hpa+0x2c>
 8007e4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007e4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007e52:	eeb0 0a67 	vmov.f32	s0, s15
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	49800000 	.word	0x49800000

08007e64 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8007e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e7a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007e94 <lps22hb_from_lsb_to_degc+0x30>
 8007e7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007e82:	eef0 7a66 	vmov.f32	s15, s13
}
 8007e86:	eeb0 0a67 	vmov.f32	s0, s15
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	42c80000 	.word	0x42c80000

08007e98 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007ea4:	f107 0208 	add.w	r2, r7, #8
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	2110      	movs	r1, #16
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff ff90 	bl	8007dd2 <lps22hb_read_reg>
 8007eb2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10f      	bne.n	8007eda <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	7a3b      	ldrb	r3, [r7, #8]
 8007ec4:	f362 0341 	bfi	r3, r2, #1, #1
 8007ec8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007eca:	f107 0208 	add.w	r2, r7, #8
 8007ece:	2301      	movs	r3, #1
 8007ed0:	2110      	movs	r1, #16
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff ff95 	bl	8007e02 <lps22hb_write_reg>
 8007ed8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007eda:	68fb      	ldr	r3, [r7, #12]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007ef0:	f107 0208 	add.w	r2, r7, #8
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	2110      	movs	r1, #16
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff ff6a 	bl	8007dd2 <lps22hb_read_reg>
 8007efe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10f      	bne.n	8007f26 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	7a3b      	ldrb	r3, [r7, #8]
 8007f10:	f362 0383 	bfi	r3, r2, #2, #2
 8007f14:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007f16:	f107 0208 	add.w	r2, r7, #8
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	2110      	movs	r1, #16
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff ff6f 	bl	8007e02 <lps22hb_write_reg>
 8007f24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f26:	68fb      	ldr	r3, [r7, #12]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007f3c:	f107 0208 	add.w	r2, r7, #8
 8007f40:	2301      	movs	r3, #1
 8007f42:	2110      	movs	r1, #16
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff ff44 	bl	8007dd2 <lps22hb_read_reg>
 8007f4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10f      	bne.n	8007f72 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	7a3b      	ldrb	r3, [r7, #8]
 8007f5c:	f362 1306 	bfi	r3, r2, #4, #3
 8007f60:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007f62:	f107 0208 	add.w	r2, r7, #8
 8007f66:	2301      	movs	r3, #1
 8007f68:	2110      	movs	r1, #16
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff ff49 	bl	8007e02 <lps22hb_write_reg>
 8007f70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f72:	68fb      	ldr	r3, [r7, #12]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007f86:	f107 0208 	add.w	r2, r7, #8
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	2110      	movs	r1, #16
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff ff1f 	bl	8007dd2 <lps22hb_read_reg>
 8007f94:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.odr)
 8007f96:	7a3b      	ldrb	r3, [r7, #8]
 8007f98:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d826      	bhi.n	8007ff0 <lps22hb_data_rate_get+0x74>
 8007fa2:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <lps22hb_data_rate_get+0x2c>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fc1 	.word	0x08007fc1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fd1 	.word	0x08007fd1
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	701a      	strb	r2, [r3, #0]
      break;
 8007fc6:	e017      	b.n	8007ff8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e013      	b.n	8007ff8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e00f      	b.n	8007ff8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	701a      	strb	r2, [r3, #0]
      break;
 8007fde:	e00b      	b.n	8007ff8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	e007      	b.n	8007ff8 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2205      	movs	r2, #5
 8007fec:	701a      	strb	r2, [r3, #0]
      break;
 8007fee:	e003      	b.n	8007ff8 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
      break;
 8007ff6:	bf00      	nop
  }

  return ret;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop

08008004 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	2303      	movs	r3, #3
 8008014:	2128      	movs	r1, #40	; 0x28
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fedb 	bl	8007dd2 <lps22hb_read_reg>
 800801c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800801e:	7abb      	ldrb	r3, [r7, #10]
 8008020:	461a      	mov	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	7a7a      	ldrb	r2, [r7, #9]
 800802e:	441a      	add	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	7a3a      	ldrb	r2, [r7, #8]
 800803c:	441a      	add	r2, r3
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	021a      	lsls	r2, r3, #8
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	601a      	str	r2, [r3, #0]

  return ret;
 800804c:	68fb      	ldr	r3, [r7, #12]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 8008060:	f107 0208 	add.w	r2, r7, #8
 8008064:	2302      	movs	r3, #2
 8008066:	212b      	movs	r1, #43	; 0x2b
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff feb2 	bl	8007dd2 <lps22hb_read_reg>
 800806e:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8008070:	7a7b      	ldrb	r3, [r7, #9]
 8008072:	b21a      	sxth	r2, r3
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800807e:	b29b      	uxth	r3, r3
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b29a      	uxth	r2, r3
 8008084:	7a3b      	ldrb	r3, [r7, #8]
 8008086:	b29b      	uxth	r3, r3
 8008088:	4413      	add	r3, r2
 800808a:	b29b      	uxth	r3, r3
 800808c:	b21a      	sxth	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	801a      	strh	r2, [r3, #0]

  return ret;
 8008092:	68fb      	ldr	r3, [r7, #12]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 80080a6:	2301      	movs	r3, #1
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	210f      	movs	r1, #15
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff fe90 	bl	8007dd2 <lps22hb_read_reg>
 80080b2:	60f8      	str	r0, [r7, #12]

  return ret;
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80080ca:	f107 0208 	add.w	r2, r7, #8
 80080ce:	2301      	movs	r3, #1
 80080d0:	211a      	movs	r1, #26
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff fe7d 	bl	8007dd2 <lps22hb_read_reg>
 80080d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10f      	bne.n	8008100 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	7a3b      	ldrb	r3, [r7, #8]
 80080ea:	f362 0300 	bfi	r3, r2, #0, #1
 80080ee:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80080f0:	f107 0208 	add.w	r2, r7, #8
 80080f4:	2301      	movs	r3, #1
 80080f6:	211a      	movs	r1, #26
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7ff fe82 	bl	8007e02 <lps22hb_write_reg>
 80080fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008100:	68fb      	ldr	r3, [r7, #12]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8008116:	f107 0208 	add.w	r2, r7, #8
 800811a:	2301      	movs	r3, #1
 800811c:	2111      	movs	r1, #17
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fe57 	bl	8007dd2 <lps22hb_read_reg>
 8008124:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10f      	bne.n	800814c <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	b2da      	uxtb	r2, r3
 8008134:	7a3b      	ldrb	r3, [r7, #8]
 8008136:	f362 1304 	bfi	r3, r2, #4, #1
 800813a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800813c:	f107 0208 	add.w	r2, r7, #8
 8008140:	2301      	movs	r3, #1
 8008142:	2111      	movs	r1, #17
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fe5c 	bl	8007e02 <lps22hb_write_reg>
 800814a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800816c:	f04f 33ff 	mov.w	r3, #4294967295
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e051      	b.n	8008218 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	7b1a      	ldrb	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	695a      	ldr	r2, [r3, #20]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1c      	ldr	r2, [pc, #112]	; (8008228 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 80081b6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	69da      	ldr	r2, [r3, #28]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 80081ce:	f04f 33ff 	mov.w	r3, #4294967295
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e020      	b.n	8008218 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4798      	blx	r3
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 80081e2:	f04f 33ff 	mov.w	r3, #4294967295
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	e016      	b.n	8008218 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d112      	bne.n	8008218 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80081fc:	2301      	movs	r3, #1
 80081fe:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8008200:	7afb      	ldrb	r3, [r7, #11]
 8008202:	461a      	mov	r2, r3
 8008204:	2123      	movs	r1, #35	; 0x23
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fb55 	bl	80088b6 <LSM303AGR_ACC_Write_Reg>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	e000      	b.n	800821a <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8008218:	68fb      	ldr	r3, [r7, #12]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	080090c5 	.word	0x080090c5
 8008228:	08009127 	.word	0x08009127

0800822c <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3320      	adds	r3, #32
 8008238:	2101      	movs	r1, #1
 800823a:	4618      	mov	r0, r3
 800823c:	f001 f94a 	bl	80094d4 <lsm303agr_xl_block_data_update_set>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8008246:	f04f 33ff 	mov.w	r3, #4294967295
 800824a:	e02c      	b.n	80082a6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3320      	adds	r3, #32
 8008250:	2100      	movs	r1, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f001 faed 	bl	8009832 <lsm303agr_xl_fifo_mode_set>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	e020      	b.n	80082a6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2205      	movs	r2, #5
 8008268:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3320      	adds	r3, #32
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f001 f84e 	bl	8009314 <lsm303agr_xl_data_rate_set>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	e010      	b.n	80082a6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3320      	adds	r3, #32
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f001 f8c4 	bl	8009418 <lsm303agr_xl_full_scale_set>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	e004      	b.n	80082a6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f87c 	bl	80083b4 <LSM303AGR_ACC_Disable>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295
 80082c6:	e008      	b.n	80082da <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3320      	adds	r3, #32
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 fa55 	bl	80097a2 <lsm303agr_xl_device_id_get>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	e000      	b.n	8008306 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2201      	movs	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2200      	movs	r2, #0
 8008324:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2200      	movs	r2, #0
 800832a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2200      	movs	r2, #0
 8008330:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2210      	movs	r2, #16
 800833c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2200      	movs	r2, #0
 8008342:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	f04f 0200 	mov.w	r2, #0
 800834a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	4a06      	ldr	r2, [pc, #24]	; (8008368 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8008350:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	43c80000 	.word	0x43c80000

0800836c <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	e014      	b.n	80083ac <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f103 0220 	add.w	r2, r3, #32
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f000 ffbf 	bl	8009314 <lsm303agr_xl_data_rate_set>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800839c:	f04f 33ff 	mov.w	r3, #4294967295
 80083a0:	e004      	b.n	80083ac <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e01f      	b.n	800840a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f103 0220 	add.w	r2, r3, #32
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3332      	adds	r3, #50	; 0x32
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f000 ffc2 	bl	8009360 <lsm303agr_xl_data_rate_get>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295
 80083e6:	e010      	b.n	800840a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3320      	adds	r3, #32
 80083ec:	2100      	movs	r1, #0
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 ff90 	bl	8009314 <lsm303agr_xl_data_rate_set>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	e004      	b.n	800840a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3320      	adds	r3, #32
 8008424:	f107 020b 	add.w	r2, r7, #11
 8008428:	4611      	mov	r1, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f000 ff3e 	bl	80092ac <lsm303agr_xl_operating_mode_get>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	e031      	b.n	80084a0 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d01a      	beq.n	8008478 <LSM303AGR_ACC_GetSensitivity+0x66>
 8008442:	2b02      	cmp	r3, #2
 8008444:	dc22      	bgt.n	800848c <LSM303AGR_ACC_GetSensitivity+0x7a>
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800844a:	2b01      	cmp	r3, #1
 800844c:	d00a      	beq.n	8008464 <LSM303AGR_ACC_GetSensitivity+0x52>
 800844e:	e01d      	b.n	800848c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fca8 	bl	8008da8 <LSM303AGR_ACC_GetSensitivityHR>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d01a      	beq.n	8008494 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 800845e:	f04f 33ff 	mov.w	r3, #4294967295
 8008462:	e01d      	b.n	80084a0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fce4 	bl	8008e34 <LSM303AGR_ACC_GetSensitivityNM>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d012      	beq.n	8008498 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	e013      	b.n	80084a0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fd20 	bl	8008ec0 <LSM303AGR_ACC_GetSensitivityLP>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8008486:	f04f 33ff 	mov.w	r3, #4294967295
 800848a:	e009      	b.n	80084a0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	60fb      	str	r3, [r7, #12]
      break;
 8008492:	e004      	b.n	800849e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8008494:	bf00      	nop
 8008496:	e002      	b.n	800849e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8008498:	bf00      	nop
 800849a:	e000      	b.n	800849e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800849c:	bf00      	nop
  }

  return ret;
 800849e:	68fb      	ldr	r3, [r7, #12]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3320      	adds	r3, #32
 80084ba:	f107 020b 	add.w	r2, r7, #11
 80084be:	4611      	mov	r1, r2
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fef3 	bl	80092ac <lsm303agr_xl_operating_mode_get>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80084cc:	f04f 33ff 	mov.w	r3, #4294967295
 80084d0:	e09d      	b.n	800860e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3320      	adds	r3, #32
 80084d6:	f107 020a 	add.w	r2, r7, #10
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 ff3f 	bl	8009360 <lsm303agr_xl_data_rate_get>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80084e8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ec:	e08f      	b.n	800860e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d147      	bne.n	8008584 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 80084f4:	7abb      	ldrb	r3, [r7, #10]
 80084f6:	2b09      	cmp	r3, #9
 80084f8:	d840      	bhi.n	800857c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008529 	.word	0x08008529
 8008504:	08008533 	.word	0x08008533
 8008508:	0800853d 	.word	0x0800853d
 800850c:	08008545 	.word	0x08008545
 8008510:	0800854d 	.word	0x0800854d
 8008514:	08008555 	.word	0x08008555
 8008518:	0800855d 	.word	0x0800855d
 800851c:	08008565 	.word	0x08008565
 8008520:	0800856d 	.word	0x0800856d
 8008524:	08008575 	.word	0x08008575
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
        break;
 8008530:	e06c      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008538:	601a      	str	r2, [r3, #0]
        break;
 800853a:	e067      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	4a36      	ldr	r2, [pc, #216]	; (8008618 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8008540:	601a      	str	r2, [r3, #0]
        break;
 8008542:	e063      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	4a35      	ldr	r2, [pc, #212]	; (800861c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8008548:	601a      	str	r2, [r3, #0]
        break;
 800854a:	e05f      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	4a34      	ldr	r2, [pc, #208]	; (8008620 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8008550:	601a      	str	r2, [r3, #0]
        break;
 8008552:	e05b      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	4a33      	ldr	r2, [pc, #204]	; (8008624 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8008558:	601a      	str	r2, [r3, #0]
        break;
 800855a:	e057      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	4a32      	ldr	r2, [pc, #200]	; (8008628 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8008560:	601a      	str	r2, [r3, #0]
        break;
 8008562:	e053      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	4a31      	ldr	r2, [pc, #196]	; (800862c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8008568:	601a      	str	r2, [r3, #0]
        break;
 800856a:	e04f      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	4a30      	ldr	r2, [pc, #192]	; (8008630 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8008570:	601a      	str	r2, [r3, #0]
        break;
 8008572:	e04b      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	4a2f      	ldr	r2, [pc, #188]	; (8008634 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8008578:	601a      	str	r2, [r3, #0]
        break;
 800857a:	e047      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 800857c:	f04f 33ff 	mov.w	r3, #4294967295
 8008580:	60fb      	str	r3, [r7, #12]
        break;
 8008582:	e043      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8008584:	7abb      	ldrb	r3, [r7, #10]
 8008586:	2b09      	cmp	r3, #9
 8008588:	d83c      	bhi.n	8008604 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085b9 	.word	0x080085b9
 8008594:	080085c3 	.word	0x080085c3
 8008598:	080085cd 	.word	0x080085cd
 800859c:	080085d5 	.word	0x080085d5
 80085a0:	080085dd 	.word	0x080085dd
 80085a4:	080085e5 	.word	0x080085e5
 80085a8:	080085ed 	.word	0x080085ed
 80085ac:	080085f5 	.word	0x080085f5
 80085b0:	08008605 	.word	0x08008605
 80085b4:	080085fd 	.word	0x080085fd
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f04f 0200 	mov.w	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
        break;
 80085c0:	e024      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80085c8:	601a      	str	r2, [r3, #0]
        break;
 80085ca:	e01f      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	4a12      	ldr	r2, [pc, #72]	; (8008618 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80085d0:	601a      	str	r2, [r3, #0]
        break;
 80085d2:	e01b      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	4a11      	ldr	r2, [pc, #68]	; (800861c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80085d8:	601a      	str	r2, [r3, #0]
        break;
 80085da:	e017      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	4a10      	ldr	r2, [pc, #64]	; (8008620 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80085e0:	601a      	str	r2, [r3, #0]
        break;
 80085e2:	e013      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	4a0f      	ldr	r2, [pc, #60]	; (8008624 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80085e8:	601a      	str	r2, [r3, #0]
        break;
 80085ea:	e00f      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	4a0e      	ldr	r2, [pc, #56]	; (8008628 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80085f0:	601a      	str	r2, [r3, #0]
        break;
 80085f2:	e00b      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	4a0d      	ldr	r2, [pc, #52]	; (800862c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80085f8:	601a      	str	r2, [r3, #0]
        break;
 80085fa:	e007      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	4a0e      	ldr	r2, [pc, #56]	; (8008638 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8008600:	601a      	str	r2, [r3, #0]
        break;
 8008602:	e003      	b.n	800860c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8008604:	f04f 33ff 	mov.w	r3, #4294967295
 8008608:	60fb      	str	r3, [r7, #12]
        break;
 800860a:	bf00      	nop
    }
  }

  return ret;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	41200000 	.word	0x41200000
 800861c:	41c80000 	.word	0x41c80000
 8008620:	42480000 	.word	0x42480000
 8008624:	42c80000 	.word	0x42c80000
 8008628:	43480000 	.word	0x43480000
 800862c:	43c80000 	.word	0x43c80000
 8008630:	44ca8000 	.word	0x44ca8000
 8008634:	45a80000 	.word	0x45a80000
 8008638:	44a80000 	.word	0x44a80000

0800863c <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800864e:	2b01      	cmp	r3, #1
 8008650:	d106      	bne.n	8008660 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008652:	ed97 0a00 	vldr	s0, [r7]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fc78 	bl	8008f4c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 800865c:	4603      	mov	r3, r0
 800865e:	e005      	b.n	800866c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008660:	ed97 0a00 	vldr	s0, [r7]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fcd3 	bl	8009010 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800866a:	4603      	mov	r3, r0
  }
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3320      	adds	r3, #32
 8008686:	f107 020b 	add.w	r2, r7, #11
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fee9 	bl	8009464 <lsm303agr_xl_full_scale_get>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	e023      	b.n	80086e6 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800869e:	7afb      	ldrb	r3, [r7, #11]
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d81b      	bhi.n	80086dc <LSM303AGR_ACC_GetFullScale+0x68>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <LSM303AGR_ACC_GetFullScale+0x38>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080086bd 	.word	0x080086bd
 80086b0:	080086c5 	.word	0x080086c5
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2202      	movs	r2, #2
 80086c0:	601a      	str	r2, [r3, #0]
      break;
 80086c2:	e00f      	b.n	80086e4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	2204      	movs	r2, #4
 80086c8:	601a      	str	r2, [r3, #0]
      break;
 80086ca:	e00b      	b.n	80086e4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2208      	movs	r2, #8
 80086d0:	601a      	str	r2, [r3, #0]
      break;
 80086d2:	e007      	b.n	80086e4 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2210      	movs	r2, #16
 80086d8:	601a      	str	r2, [r3, #0]
      break;
 80086da:	e003      	b.n	80086e4 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295
 80086e0:	60fb      	str	r3, [r7, #12]
      break;
 80086e2:	bf00      	nop
  }

  return ret;
 80086e4:	68fb      	ldr	r3, [r7, #12]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop

080086f0 <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	dd0b      	ble.n	8008718 <LSM303AGR_ACC_SetFullScale+0x28>
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	2b04      	cmp	r3, #4
 8008704:	dd06      	ble.n	8008714 <LSM303AGR_ACC_SetFullScale+0x24>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b08      	cmp	r3, #8
 800870a:	dc01      	bgt.n	8008710 <LSM303AGR_ACC_SetFullScale+0x20>
 800870c:	2302      	movs	r3, #2
 800870e:	e004      	b.n	800871a <LSM303AGR_ACC_SetFullScale+0x2a>
 8008710:	2303      	movs	r3, #3
 8008712:	e002      	b.n	800871a <LSM303AGR_ACC_SetFullScale+0x2a>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <LSM303AGR_ACC_SetFullScale+0x2a>
 8008718:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800871a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3320      	adds	r3, #32
 8008720:	7bfa      	ldrb	r2, [r7, #15]
 8008722:	4611      	mov	r1, r2
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fe77 	bl	8009418 <lsm303agr_xl_full_scale_set>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8008730:	f04f 33ff 	mov.w	r3, #4294967295
 8008734:	e000      	b.n	8008738 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800874a:	2301      	movs	r3, #1
 800874c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	3320      	adds	r3, #32
 8008756:	f107 020f 	add.w	r2, r7, #15
 800875a:	4611      	mov	r1, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f000 fda5 	bl	80092ac <lsm303agr_xl_operating_mode_get>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	e04a      	b.n	8008804 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d00c      	beq.n	800878e <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8008774:	2b02      	cmp	r3, #2
 8008776:	dc0e      	bgt.n	8008796 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <LSM303AGR_ACC_GetAxesRaw+0x42>
 800877c:	2b01      	cmp	r3, #1
 800877e:	d003      	beq.n	8008788 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8008780:	e009      	b.n	8008796 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8008782:	2310      	movs	r3, #16
 8008784:	83fb      	strh	r3, [r7, #30]
      break;
 8008786:	e00a      	b.n	800879e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8008788:	2340      	movs	r3, #64	; 0x40
 800878a:	83fb      	strh	r3, [r7, #30]
      break;
 800878c:	e007      	b.n	800879e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800878e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008792:	83fb      	strh	r3, [r7, #30]
      break;
 8008794:	e003      	b.n	800879e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8008796:	f04f 33ff 	mov.w	r3, #4294967295
 800879a:	61bb      	str	r3, [r7, #24]
      break;
 800879c:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d101      	bne.n	80087aa <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	e02c      	b.n	8008804 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	3320      	adds	r3, #32
 80087ae:	f107 0210 	add.w	r2, r7, #16
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 feb3 	bl	8009520 <lsm303agr_acceleration_raw_get>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295
 80087c4:	e01e      	b.n	8008804 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80087c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80087ca:	461a      	mov	r2, r3
 80087cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80087d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80087d4:	b21a      	sxth	r2, r3
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80087da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80087de:	461a      	mov	r2, r3
 80087e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80087e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80087e8:	b21a      	sxth	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80087ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80087f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80087fc:	b21a      	sxth	r2, r3
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	809a      	strh	r2, [r3, #4]

  return ret;
 8008802:	69bb      	ldr	r3, [r7, #24]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3720      	adds	r7, #32
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b086      	sub	sp, #24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800881c:	f107 0310 	add.w	r3, r7, #16
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff ff8c 	bl	8008740 <LSM303AGR_ACC_GetAxesRaw>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	e03c      	b.n	80088ae <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8008834:	f107 030c 	add.w	r3, r7, #12
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7ff fde9 	bl	8008412 <LSM303AGR_ACC_GetSensitivity>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8008846:	f04f 33ff 	mov.w	r3, #4294967295
 800884a:	e030      	b.n	80088ae <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800884c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008858:	edd7 7a03 	vldr	s15, [r7, #12]
 800885c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008864:	ee17 2a90 	vmov	r2, s15
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800886c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008870:	ee07 3a90 	vmov	s15, r3
 8008874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008878:	edd7 7a03 	vldr	s15, [r7, #12]
 800887c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008884:	ee17 2a90 	vmov	r2, s15
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800888c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008898:	edd7 7a03 	vldr	s15, [r7, #12]
 800889c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088a4:	ee17 2a90 	vmov	r2, s15
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
 80088c2:	4613      	mov	r3, r2
 80088c4:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f103 0020 	add.w	r0, r3, #32
 80088cc:	1cba      	adds	r2, r7, #2
 80088ce:	78f9      	ldrb	r1, [r7, #3]
 80088d0:	2301      	movs	r3, #1
 80088d2:	f000 fcd3 	bl	800927c <lsm303agr_write_reg>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80088dc:	f04f 33ff 	mov.w	r3, #4294967295
 80088e0:	e000      	b.n	80088e4 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d103      	bne.n	8008908 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8008900:	f04f 33ff 	mov.w	r3, #4294967295
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e04b      	b.n	80089a0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	7b1a      	ldrb	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8008944:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800894a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d103      	bne.n	8008962 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800895a:	f04f 33ff 	mov.w	r3, #4294967295
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e01e      	b.n	80089a0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4798      	blx	r3
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	e014      	b.n	80089a0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d010      	beq.n	80089a0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3320      	adds	r3, #32
 800898c:	2101      	movs	r1, #1
 800898e:	4618      	mov	r0, r3
 8008990:	f000 ff75 	bl	800987e <lsm303agr_mag_i2c_interface_set>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295
 800899e:	e000      	b.n	80089a2 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80089a0:	68fb      	ldr	r3, [r7, #12]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	08009189 	.word	0x08009189
 80089b0:	080091eb 	.word	0x080091eb

080089b4 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3320      	adds	r3, #32
 80089c0:	2101      	movs	r1, #1
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fe7c 	bl	80096c0 <lsm303agr_mag_block_data_update_set>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295
 80089d2:	e028      	b.n	8008a26 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3320      	adds	r3, #32
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fdeb 	bl	80095b6 <lsm303agr_mag_operating_mode_set>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80089e6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ea:	e01c      	b.n	8008a26 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3320      	adds	r3, #32
 80089f0:	2103      	movs	r1, #3
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fe05 	bl	8009602 <lsm303agr_mag_data_rate_set>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008a02:	e010      	b.n	8008a26 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3320      	adds	r3, #32
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 feeb 	bl	80097e6 <lsm303agr_mag_self_test_set>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d002      	beq.n	8008a1c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8008a16:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1a:	e004      	b.n	8008a26 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f874 	bl	8008b24 <LSM303AGR_MAG_Disable>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295
 8008a46:	e004      	b.n	8008a52 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3320      	adds	r3, #32
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 feaa 	bl	80097c4 <lsm303agr_mag_device_id_get>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8008a76:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7a:	e000      	b.n	8008a7e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	2200      	movs	r2, #0
 8008aae:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2232      	movs	r2, #50	; 0x32
 8008aba:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	f04f 0200 	mov.w	r2, #0
 8008ac2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	4a04      	ldr	r2, [pc, #16]	; (8008ae0 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8008ad0:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	42c80000 	.word	0x42c80000

08008ae4 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e010      	b.n	8008b1c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3320      	adds	r3, #32
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f000 fd58 	bl	80095b6 <lsm303agr_mag_operating_mode_set>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b10:	e004      	b.n	8008b1c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e010      	b.n	8008b5c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3320      	adds	r3, #32
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fd38 	bl	80095b6 <lsm303agr_mag_operating_mode_set>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b50:	e004      	b.n	8008b5c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008b74:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3320      	adds	r3, #32
 8008b96:	f107 020b 	add.w	r2, r7, #11
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fd57 	bl	8009650 <lsm303agr_mag_data_rate_get>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	e023      	b.n	8008bf6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8008bae:	7afb      	ldrb	r3, [r7, #11]
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d81b      	bhi.n	8008bec <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008bd5 	.word	0x08008bd5
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008be5 	.word	0x08008be5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	4a0c      	ldr	r2, [pc, #48]	; (8008c00 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8008bd0:	601a      	str	r2, [r3, #0]
      break;
 8008bd2:	e00f      	b.n	8008bf4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	4a0b      	ldr	r2, [pc, #44]	; (8008c04 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8008bd8:	601a      	str	r2, [r3, #0]
      break;
 8008bda:	e00b      	b.n	8008bf4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	4a0a      	ldr	r2, [pc, #40]	; (8008c08 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8008be0:	601a      	str	r2, [r3, #0]
      break;
 8008be2:	e007      	b.n	8008bf4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	4a09      	ldr	r2, [pc, #36]	; (8008c0c <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8008be8:	601a      	str	r2, [r3, #0]
      break;
 8008bea:	e003      	b.n	8008bf4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf0:	60fb      	str	r3, [r7, #12]
      break;
 8008bf2:	bf00      	nop
  }

  return ret;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	41200000 	.word	0x41200000
 8008c04:	41a00000 	.word	0x41a00000
 8008c08:	42480000 	.word	0x42480000
 8008c0c:	42c80000 	.word	0x42c80000

08008c10 <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8008c1c:	edd7 7a00 	vldr	s15, [r7]
 8008c20:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2c:	d801      	bhi.n	8008c32 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	e016      	b.n	8008c60 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008c32:	edd7 7a00 	vldr	s15, [r7]
 8008c36:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c42:	d801      	bhi.n	8008c48 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8008c44:	2301      	movs	r3, #1
 8008c46:	e00b      	b.n	8008c60 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008c48:	edd7 7a00 	vldr	s15, [r7]
 8008c4c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008c88 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8008c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c58:	d801      	bhi.n	8008c5e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e000      	b.n	8008c60 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008c5e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8008c60:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3320      	adds	r3, #32
 8008c66:	7bfa      	ldrb	r2, [r7, #15]
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 fcc9 	bl	8009602 <lsm303agr_mag_data_rate_set>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8008c76:	f04f 33ff 	mov.w	r3, #4294967295
 8008c7a:	e000      	b.n	8008c7e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8008c7c:	2300      	movs	r3, #0
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	42480000 	.word	0x42480000

08008c8c <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2232      	movs	r2, #50	; 0x32
 8008c9a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3320      	adds	r3, #32
 8008cd0:	f107 0208 	add.w	r2, r7, #8
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fd18 	bl	800970c <lsm303agr_magnetic_raw_get>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8008ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce6:	e00c      	b.n	8008d02 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8008ce8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008cf0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008cf8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b086      	sub	sp, #24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3320      	adds	r3, #32
 8008d18:	f107 0210 	add.w	r2, r7, #16
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fcf4 	bl	800970c <lsm303agr_magnetic_raw_get>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d002      	beq.n	8008d30 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	e036      	b.n	8008d9e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8008d30:	f107 030c 	add.w	r3, r7, #12
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff ff14 	bl	8008b64 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008d3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d48:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d54:	ee17 2a90 	vmov	r2, s15
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008d5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d60:	ee07 3a90 	vmov	s15, r3
 8008d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d74:	ee17 2a90 	vmov	r2, s15
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008d7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8008d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d94:	ee17 2a90 	vmov	r2, s15
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3320      	adds	r3, #32
 8008dba:	f107 020b 	add.w	r2, r7, #11
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 fb4f 	bl	8009464 <lsm303agr_xl_full_scale_get>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8008dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd0:	e023      	b.n	8008e1a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d81b      	bhi.n	8008e10 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008df1 	.word	0x08008df1
 8008de4:	08008df9 	.word	0x08008df9
 8008de8:	08008e01 	.word	0x08008e01
 8008dec:	08008e09 	.word	0x08008e09
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8008df4:	601a      	str	r2, [r3, #0]
      break;
 8008df6:	e00f      	b.n	8008e18 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	4a0b      	ldr	r2, [pc, #44]	; (8008e28 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8008dfc:	601a      	str	r2, [r3, #0]
      break;
 8008dfe:	e00b      	b.n	8008e18 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	4a0a      	ldr	r2, [pc, #40]	; (8008e2c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8008e04:	601a      	str	r2, [r3, #0]
      break;
 8008e06:	e007      	b.n	8008e18 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8008e0c:	601a      	str	r2, [r3, #0]
      break;
 8008e0e:	e003      	b.n	8008e18 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	60fb      	str	r3, [r7, #12]
      break;
 8008e16:	bf00      	nop
  }

  return ret;
 8008e18:	68fb      	ldr	r3, [r7, #12]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	3f7ae148 	.word	0x3f7ae148
 8008e28:	3ff9999a 	.word	0x3ff9999a
 8008e2c:	4079999a 	.word	0x4079999a
 8008e30:	413b851f 	.word	0x413b851f

08008e34 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	3320      	adds	r3, #32
 8008e46:	f107 020b 	add.w	r2, r7, #11
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fb09 	bl	8009464 <lsm303agr_xl_full_scale_get>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8008e58:	f04f 33ff 	mov.w	r3, #4294967295
 8008e5c:	e023      	b.n	8008ea6 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d81b      	bhi.n	8008e9c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8008e64:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008e7d 	.word	0x08008e7d
 8008e70:	08008e85 	.word	0x08008e85
 8008e74:	08008e8d 	.word	0x08008e8d
 8008e78:	08008e95 	.word	0x08008e95
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	4a0c      	ldr	r2, [pc, #48]	; (8008eb0 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8008e80:	601a      	str	r2, [r3, #0]
      break;
 8008e82:	e00f      	b.n	8008ea4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	4a0b      	ldr	r2, [pc, #44]	; (8008eb4 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8008e88:	601a      	str	r2, [r3, #0]
      break;
 8008e8a:	e00b      	b.n	8008ea4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8008e90:	601a      	str	r2, [r3, #0]
      break;
 8008e92:	e007      	b.n	8008ea4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8008e98:	601a      	str	r2, [r3, #0]
      break;
 8008e9a:	e003      	b.n	8008ea4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea0:	60fb      	str	r3, [r7, #12]
      break;
 8008ea2:	bf00      	nop
  }

  return ret;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	4079999a 	.word	0x4079999a
 8008eb4:	40fa3d71 	.word	0x40fa3d71
 8008eb8:	417a147b 	.word	0x417a147b
 8008ebc:	423b999a 	.word	0x423b999a

08008ec0 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3320      	adds	r3, #32
 8008ed2:	f107 020b 	add.w	r2, r7, #11
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f000 fac3 	bl	8009464 <lsm303agr_xl_full_scale_get>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8008ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee8:	e023      	b.n	8008f32 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d81b      	bhi.n	8008f28 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f09 	.word	0x08008f09
 8008efc:	08008f11 	.word	0x08008f11
 8008f00:	08008f19 	.word	0x08008f19
 8008f04:	08008f21 	.word	0x08008f21
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	4a0c      	ldr	r2, [pc, #48]	; (8008f3c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8008f0c:	601a      	str	r2, [r3, #0]
      break;
 8008f0e:	e00f      	b.n	8008f30 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	4a0b      	ldr	r2, [pc, #44]	; (8008f40 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8008f14:	601a      	str	r2, [r3, #0]
      break;
 8008f16:	e00b      	b.n	8008f30 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	4a0a      	ldr	r2, [pc, #40]	; (8008f44 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8008f1c:	601a      	str	r2, [r3, #0]
      break;
 8008f1e:	e007      	b.n	8008f30 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	4a09      	ldr	r2, [pc, #36]	; (8008f48 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8008f24:	601a      	str	r2, [r3, #0]
      break;
 8008f26:	e003      	b.n	8008f30 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2c:	60fb      	str	r3, [r7, #12]
      break;
 8008f2e:	bf00      	nop
  }

  return ret;
 8008f30:	68fb      	ldr	r3, [r7, #12]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	417a147b 	.word	0x417a147b
 8008f40:	41fa147b 	.word	0x41fa147b
 8008f44:	427a147b 	.word	0x427a147b
 8008f48:	433b947b 	.word	0x433b947b

08008f4c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8008f58:	edd7 7a00 	vldr	s15, [r7]
 8008f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f68:	d801      	bhi.n	8008f6e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e037      	b.n	8008fde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008f6e:	edd7 7a00 	vldr	s15, [r7]
 8008f72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7e:	d801      	bhi.n	8008f84 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008f80:	2302      	movs	r3, #2
 8008f82:	e02c      	b.n	8008fde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008f84:	edd7 7a00 	vldr	s15, [r7]
 8008f88:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f94:	d801      	bhi.n	8008f9a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008f96:	2303      	movs	r3, #3
 8008f98:	e021      	b.n	8008fde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008f9a:	edd7 7a00 	vldr	s15, [r7]
 8008f9e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009004 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8008fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008faa:	d801      	bhi.n	8008fb0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008fac:	2304      	movs	r3, #4
 8008fae:	e016      	b.n	8008fde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008fb0:	edd7 7a00 	vldr	s15, [r7]
 8008fb4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009008 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	d801      	bhi.n	8008fc6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008fc2:	2305      	movs	r3, #5
 8008fc4:	e00b      	b.n	8008fde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008fc6:	edd7 7a00 	vldr	s15, [r7]
 8008fca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800900c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8008fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd6:	d801      	bhi.n	8008fdc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008fd8:	2306      	movs	r3, #6
 8008fda:	e000      	b.n	8008fde <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008fdc:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8008fde:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3320      	adds	r3, #32
 8008fe4:	7bfa      	ldrb	r2, [r7, #15]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f993 	bl	8009314 <lsm303agr_xl_data_rate_set>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8008ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff8:	e000      	b.n	8008ffc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	42480000 	.word	0x42480000
 8009008:	42c80000 	.word	0x42c80000
 800900c:	43480000 	.word	0x43480000

08009010 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 800901c:	edd7 7a00 	vldr	s15, [r7]
 8009020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902c:	d801      	bhi.n	8009032 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800902e:	2301      	movs	r3, #1
 8009030:	e037      	b.n	80090a2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8009032:	edd7 7a00 	vldr	s15, [r7]
 8009036:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800903a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800903e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009042:	d801      	bhi.n	8009048 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009044:	2302      	movs	r3, #2
 8009046:	e02c      	b.n	80090a2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8009048:	edd7 7a00 	vldr	s15, [r7]
 800904c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8009050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009058:	d801      	bhi.n	800905e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800905a:	2303      	movs	r3, #3
 800905c:	e021      	b.n	80090a2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800905e:	edd7 7a00 	vldr	s15, [r7]
 8009062:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80090b8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8009066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800906a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906e:	d801      	bhi.n	8009074 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009070:	2304      	movs	r3, #4
 8009072:	e016      	b.n	80090a2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8009074:	edd7 7a00 	vldr	s15, [r7]
 8009078:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80090bc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 800907c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009084:	d801      	bhi.n	800908a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009086:	2305      	movs	r3, #5
 8009088:	e00b      	b.n	80090a2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800908a:	edd7 7a00 	vldr	s15, [r7]
 800908e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80090c0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8009092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909a:	d801      	bhi.n	80090a0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800909c:	2306      	movs	r3, #6
 800909e:	e000      	b.n	80090a2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80090a0:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	42480000 	.word	0x42480000
 80090bc:	42c80000 	.word	0x42c80000
 80090c0:	43480000 	.word	0x43480000

080090c4 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80090c4:	b590      	push	{r4, r7, lr}
 80090c6:	b087      	sub	sp, #28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	607a      	str	r2, [r7, #4]
 80090ce:	461a      	mov	r2, r3
 80090d0:	460b      	mov	r3, r1
 80090d2:	72fb      	strb	r3, [r7, #11]
 80090d4:	4613      	mov	r3, r2
 80090d6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10e      	bne.n	8009102 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	695c      	ldr	r4, [r3, #20]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	7b1b      	ldrb	r3, [r3, #12]
 80090ec:	b298      	uxth	r0, r3
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	b299      	uxth	r1, r3
 80090f8:	893b      	ldrh	r3, [r7, #8]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	47a0      	blx	r4
 80090fe:	4603      	mov	r3, r0
 8009100:	e00d      	b.n	800911e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	695c      	ldr	r4, [r3, #20]
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	7b1b      	ldrb	r3, [r3, #12]
 800910a:	b298      	uxth	r0, r3
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009112:	b2db      	uxtb	r3, r3
 8009114:	b299      	uxth	r1, r3
 8009116:	893b      	ldrh	r3, [r7, #8]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	47a0      	blx	r4
 800911c:	4603      	mov	r3, r0
  }
}
 800911e:	4618      	mov	r0, r3
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd90      	pop	{r4, r7, pc}

08009126 <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009126:	b590      	push	{r4, r7, lr}
 8009128:	b087      	sub	sp, #28
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	461a      	mov	r2, r3
 8009132:	460b      	mov	r3, r1
 8009134:	72fb      	strb	r3, [r7, #11]
 8009136:	4613      	mov	r3, r2
 8009138:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10e      	bne.n	8009164 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	691c      	ldr	r4, [r3, #16]
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	7b1b      	ldrb	r3, [r3, #12]
 800914e:	b298      	uxth	r0, r3
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009156:	b2db      	uxtb	r3, r3
 8009158:	b299      	uxth	r1, r3
 800915a:	893b      	ldrh	r3, [r7, #8]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	47a0      	blx	r4
 8009160:	4603      	mov	r3, r0
 8009162:	e00d      	b.n	8009180 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	691c      	ldr	r4, [r3, #16]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	7b1b      	ldrb	r3, [r3, #12]
 800916c:	b298      	uxth	r0, r3
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009174:	b2db      	uxtb	r3, r3
 8009176:	b299      	uxth	r1, r3
 8009178:	893b      	ldrh	r3, [r7, #8]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	47a0      	blx	r4
 800917e:	4603      	mov	r3, r0
  }
}
 8009180:	4618      	mov	r0, r3
 8009182:	371c      	adds	r7, #28
 8009184:	46bd      	mov	sp, r7
 8009186:	bd90      	pop	{r4, r7, pc}

08009188 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009188:	b590      	push	{r4, r7, lr}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	461a      	mov	r2, r3
 8009194:	460b      	mov	r3, r1
 8009196:	72fb      	strb	r3, [r7, #11]
 8009198:	4613      	mov	r3, r2
 800919a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10e      	bne.n	80091c6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	695c      	ldr	r4, [r3, #20]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	7b1b      	ldrb	r3, [r3, #12]
 80091b0:	b298      	uxth	r0, r3
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	b299      	uxth	r1, r3
 80091bc:	893b      	ldrh	r3, [r7, #8]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	47a0      	blx	r4
 80091c2:	4603      	mov	r3, r0
 80091c4:	e00d      	b.n	80091e2 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	695c      	ldr	r4, [r3, #20]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	7b1b      	ldrb	r3, [r3, #12]
 80091ce:	b298      	uxth	r0, r3
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	b299      	uxth	r1, r3
 80091da:	893b      	ldrh	r3, [r7, #8]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	47a0      	blx	r4
 80091e0:	4603      	mov	r3, r0
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd90      	pop	{r4, r7, pc}

080091ea <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80091ea:	b590      	push	{r4, r7, lr}
 80091ec:	b087      	sub	sp, #28
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	461a      	mov	r2, r3
 80091f6:	460b      	mov	r3, r1
 80091f8:	72fb      	strb	r3, [r7, #11]
 80091fa:	4613      	mov	r3, r2
 80091fc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10e      	bne.n	8009228 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	691c      	ldr	r4, [r3, #16]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	7b1b      	ldrb	r3, [r3, #12]
 8009212:	b298      	uxth	r0, r3
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800921a:	b2db      	uxtb	r3, r3
 800921c:	b299      	uxth	r1, r3
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	47a0      	blx	r4
 8009224:	4603      	mov	r3, r0
 8009226:	e00d      	b.n	8009244 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	691c      	ldr	r4, [r3, #16]
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	7b1b      	ldrb	r3, [r3, #12]
 8009230:	b298      	uxth	r0, r3
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009238:	b2db      	uxtb	r3, r3
 800923a:	b299      	uxth	r1, r3
 800923c:	893b      	ldrh	r3, [r7, #8]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	47a0      	blx	r4
 8009242:	4603      	mov	r3, r0
  }
}
 8009244:	4618      	mov	r0, r3
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	bd90      	pop	{r4, r7, pc}

0800924c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800924c:	b590      	push	{r4, r7, lr}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	461a      	mov	r2, r3
 8009258:	460b      	mov	r3, r1
 800925a:	72fb      	strb	r3, [r7, #11]
 800925c:	4613      	mov	r3, r2
 800925e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685c      	ldr	r4, [r3, #4]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	68d8      	ldr	r0, [r3, #12]
 8009268:	893b      	ldrh	r3, [r7, #8]
 800926a:	7af9      	ldrb	r1, [r7, #11]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	47a0      	blx	r4
 8009270:	6178      	str	r0, [r7, #20]

  return ret;
 8009272:	697b      	ldr	r3, [r7, #20]
}
 8009274:	4618      	mov	r0, r3
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}

0800927c <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 800927c:	b590      	push	{r4, r7, lr}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	607a      	str	r2, [r7, #4]
 8009286:	461a      	mov	r2, r3
 8009288:	460b      	mov	r3, r1
 800928a:	72fb      	strb	r3, [r7, #11]
 800928c:	4613      	mov	r3, r2
 800928e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681c      	ldr	r4, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68d8      	ldr	r0, [r3, #12]
 8009298:	893b      	ldrh	r3, [r7, #8]
 800929a:	7af9      	ldrb	r1, [r7, #11]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	47a0      	blx	r4
 80092a0:	6178      	str	r0, [r7, #20]

  return ret;
 80092a2:	697b      	ldr	r3, [r7, #20]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	371c      	adds	r7, #28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd90      	pop	{r4, r7, pc}

080092ac <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80092b6:	f107 020c 	add.w	r2, r7, #12
 80092ba:	2301      	movs	r3, #1
 80092bc:	2120      	movs	r1, #32
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff ffc4 	bl	800924c <lsm303agr_read_reg>
 80092c4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d107      	bne.n	80092dc <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80092cc:	f107 0210 	add.w	r2, r7, #16
 80092d0:	2301      	movs	r3, #1
 80092d2:	2123      	movs	r1, #35	; 0x23
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff ffb9 	bl	800924c <lsm303agr_read_reg>
 80092da:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 80092dc:	7b3b      	ldrb	r3, [r7, #12]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2202      	movs	r2, #2
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e00c      	b.n	800930a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 80092f0:	7c3b      	ldrb	r3, [r7, #16]
 80092f2:	f003 0308 	and.w	r3, r3, #8
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	e002      	b.n	800930a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2201      	movs	r2, #1
 8009308:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800930a:	697b      	ldr	r3, [r7, #20]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8009320:	f107 0208 	add.w	r2, r7, #8
 8009324:	2301      	movs	r3, #1
 8009326:	2120      	movs	r1, #32
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff ff8f 	bl	800924c <lsm303agr_read_reg>
 800932e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10f      	bne.n	8009356 <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8009336:	78fb      	ldrb	r3, [r7, #3]
 8009338:	f003 030f 	and.w	r3, r3, #15
 800933c:	b2da      	uxtb	r2, r3
 800933e:	7a3b      	ldrb	r3, [r7, #8]
 8009340:	f362 1307 	bfi	r3, r2, #4, #4
 8009344:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8009346:	f107 0208 	add.w	r2, r7, #8
 800934a:	2301      	movs	r3, #1
 800934c:	2120      	movs	r1, #32
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff ff94 	bl	800927c <lsm303agr_write_reg>
 8009354:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800936a:	f107 0208 	add.w	r2, r7, #8
 800936e:	2301      	movs	r3, #1
 8009370:	2120      	movs	r1, #32
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff ff6a 	bl	800924c <lsm303agr_read_reg>
 8009378:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 800937a:	7a3b      	ldrb	r3, [r7, #8]
 800937c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b09      	cmp	r3, #9
 8009384:	d83e      	bhi.n	8009404 <lsm303agr_xl_data_rate_get+0xa4>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <lsm303agr_xl_data_rate_get+0x2c>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	080093c5 	.word	0x080093c5
 8009398:	080093cd 	.word	0x080093cd
 800939c:	080093d5 	.word	0x080093d5
 80093a0:	080093dd 	.word	0x080093dd
 80093a4:	080093e5 	.word	0x080093e5
 80093a8:	080093ed 	.word	0x080093ed
 80093ac:	080093f5 	.word	0x080093f5
 80093b0:	080093fd 	.word	0x080093fd
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
      break;
 80093ba:	e027      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2201      	movs	r2, #1
 80093c0:	701a      	strb	r2, [r3, #0]
      break;
 80093c2:	e023      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2202      	movs	r2, #2
 80093c8:	701a      	strb	r2, [r3, #0]
      break;
 80093ca:	e01f      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2203      	movs	r2, #3
 80093d0:	701a      	strb	r2, [r3, #0]
      break;
 80093d2:	e01b      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2204      	movs	r2, #4
 80093d8:	701a      	strb	r2, [r3, #0]
      break;
 80093da:	e017      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2205      	movs	r2, #5
 80093e0:	701a      	strb	r2, [r3, #0]
      break;
 80093e2:	e013      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	2206      	movs	r2, #6
 80093e8:	701a      	strb	r2, [r3, #0]
      break;
 80093ea:	e00f      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2207      	movs	r2, #7
 80093f0:	701a      	strb	r2, [r3, #0]
      break;
 80093f2:	e00b      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2208      	movs	r2, #8
 80093f8:	701a      	strb	r2, [r3, #0]
      break;
 80093fa:	e007      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2209      	movs	r2, #9
 8009400:	701a      	strb	r2, [r3, #0]
      break;
 8009402:	e003      	b.n	800940c <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
      break;
 800940a:	bf00      	nop
  }

  return ret;
 800940c:	68fb      	ldr	r3, [r7, #12]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop

08009418 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8009424:	f107 0208 	add.w	r2, r7, #8
 8009428:	2301      	movs	r3, #1
 800942a:	2123      	movs	r1, #35	; 0x23
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ff0d 	bl	800924c <lsm303agr_read_reg>
 8009432:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10f      	bne.n	800945a <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	b2da      	uxtb	r2, r3
 8009442:	7a3b      	ldrb	r3, [r7, #8]
 8009444:	f362 1305 	bfi	r3, r2, #4, #2
 8009448:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800944a:	f107 0208 	add.w	r2, r7, #8
 800944e:	2301      	movs	r3, #1
 8009450:	2123      	movs	r1, #35	; 0x23
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff ff12 	bl	800927c <lsm303agr_write_reg>
 8009458:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800945a:	68fb      	ldr	r3, [r7, #12]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800946e:	f107 0208 	add.w	r2, r7, #8
 8009472:	2301      	movs	r3, #1
 8009474:	2123      	movs	r1, #35	; 0x23
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff fee8 	bl	800924c <lsm303agr_read_reg>
 800947c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 800947e:	7a3b      	ldrb	r3, [r7, #8]
 8009480:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b03      	cmp	r3, #3
 8009488:	d81a      	bhi.n	80094c0 <lsm303agr_xl_full_scale_get+0x5c>
 800948a:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <lsm303agr_xl_full_scale_get+0x2c>)
 800948c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009490:	080094a1 	.word	0x080094a1
 8009494:	080094a9 	.word	0x080094a9
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094b9 	.word	0x080094b9
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
      break;
 80094a6:	e00f      	b.n	80094c8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
      break;
 80094ae:	e00b      	b.n	80094c8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	2202      	movs	r2, #2
 80094b4:	701a      	strb	r2, [r3, #0]
      break;
 80094b6:	e007      	b.n	80094c8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2203      	movs	r2, #3
 80094bc:	701a      	strb	r2, [r3, #0]
      break;
 80094be:	e003      	b.n	80094c8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	2200      	movs	r2, #0
 80094c4:	701a      	strb	r2, [r3, #0]
      break;
 80094c6:	bf00      	nop
  }

  return ret;
 80094c8:	68fb      	ldr	r3, [r7, #12]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80094e0:	f107 0208 	add.w	r2, r7, #8
 80094e4:	2301      	movs	r3, #1
 80094e6:	2123      	movs	r1, #35	; 0x23
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff feaf 	bl	800924c <lsm303agr_read_reg>
 80094ee:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10f      	bne.n	8009516 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	7a3b      	ldrb	r3, [r7, #8]
 8009500:	f362 13c7 	bfi	r3, r2, #7, #1
 8009504:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8009506:	f107 0208 	add.w	r2, r7, #8
 800950a:	2301      	movs	r3, #1
 800950c:	2123      	movs	r1, #35	; 0x23
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff feb4 	bl	800927c <lsm303agr_write_reg>
 8009514:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800952a:	f107 020c 	add.w	r2, r7, #12
 800952e:	2306      	movs	r3, #6
 8009530:	2128      	movs	r1, #40	; 0x28
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff fe8a 	bl	800924c <lsm303agr_read_reg>
 8009538:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800953a:	7b7b      	ldrb	r3, [r7, #13]
 800953c:	b21a      	sxth	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009548:	b29b      	uxth	r3, r3
 800954a:	021b      	lsls	r3, r3, #8
 800954c:	b29a      	uxth	r2, r3
 800954e:	7b3b      	ldrb	r3, [r7, #12]
 8009550:	b29b      	uxth	r3, r3
 8009552:	4413      	add	r3, r2
 8009554:	b29b      	uxth	r3, r3
 8009556:	b21a      	sxth	r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800955c:	7bfa      	ldrb	r2, [r7, #15]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	3302      	adds	r3, #2
 8009562:	b212      	sxth	r2, r2
 8009564:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	3302      	adds	r3, #2
 800956a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800956e:	b29b      	uxth	r3, r3
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	b29a      	uxth	r2, r3
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	b29b      	uxth	r3, r3
 8009578:	4413      	add	r3, r2
 800957a:	b29a      	uxth	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	3302      	adds	r3, #2
 8009580:	b212      	sxth	r2, r2
 8009582:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009584:	7c7a      	ldrb	r2, [r7, #17]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	3304      	adds	r3, #4
 800958a:	b212      	sxth	r2, r2
 800958c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	3304      	adds	r3, #4
 8009592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009596:	b29b      	uxth	r3, r3
 8009598:	021b      	lsls	r3, r3, #8
 800959a:	b29a      	uxth	r2, r3
 800959c:	7c3b      	ldrb	r3, [r7, #16]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	4413      	add	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	3304      	adds	r3, #4
 80095a8:	b212      	sxth	r2, r2
 80095aa:	801a      	strh	r2, [r3, #0]

  return ret;
 80095ac:	697b      	ldr	r3, [r7, #20]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80095c2:	f107 0208 	add.w	r2, r7, #8
 80095c6:	2301      	movs	r3, #1
 80095c8:	2160      	movs	r1, #96	; 0x60
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fe3e 	bl	800924c <lsm303agr_read_reg>
 80095d0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10f      	bne.n	80095f8 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	f003 0303 	and.w	r3, r3, #3
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	7a3b      	ldrb	r3, [r7, #8]
 80095e2:	f362 0301 	bfi	r3, r2, #0, #2
 80095e6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80095e8:	f107 0208 	add.w	r2, r7, #8
 80095ec:	2301      	movs	r3, #1
 80095ee:	2160      	movs	r1, #96	; 0x60
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7ff fe43 	bl	800927c <lsm303agr_write_reg>
 80095f6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80095f8:	68fb      	ldr	r3, [r7, #12]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800960e:	f107 0208 	add.w	r2, r7, #8
 8009612:	2301      	movs	r3, #1
 8009614:	2160      	movs	r1, #96	; 0x60
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff fe18 	bl	800924c <lsm303agr_read_reg>
 800961c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10f      	bne.n	8009644 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	b2da      	uxtb	r2, r3
 800962c:	7a3b      	ldrb	r3, [r7, #8]
 800962e:	f362 0383 	bfi	r3, r2, #2, #2
 8009632:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8009634:	f107 0208 	add.w	r2, r7, #8
 8009638:	2301      	movs	r3, #1
 800963a:	2160      	movs	r1, #96	; 0x60
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff fe1d 	bl	800927c <lsm303agr_write_reg>
 8009642:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8009644:	68fb      	ldr	r3, [r7, #12]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800965a:	f107 0208 	add.w	r2, r7, #8
 800965e:	2301      	movs	r3, #1
 8009660:	2160      	movs	r1, #96	; 0x60
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff fdf2 	bl	800924c <lsm303agr_read_reg>
 8009668:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 800966a:	7a3b      	ldrb	r3, [r7, #8]
 800966c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d81a      	bhi.n	80096ac <lsm303agr_mag_data_rate_get+0x5c>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <lsm303agr_mag_data_rate_get+0x2c>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800968d 	.word	0x0800968d
 8009680:	08009695 	.word	0x08009695
 8009684:	0800969d 	.word	0x0800969d
 8009688:	080096a5 	.word	0x080096a5
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
      break;
 8009692:	e00f      	b.n	80096b4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
      break;
 800969a:	e00b      	b.n	80096b4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2202      	movs	r2, #2
 80096a0:	701a      	strb	r2, [r3, #0]
      break;
 80096a2:	e007      	b.n	80096b4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2203      	movs	r2, #3
 80096a8:	701a      	strb	r2, [r3, #0]
      break;
 80096aa:	e003      	b.n	80096b4 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	2200      	movs	r2, #0
 80096b0:	701a      	strb	r2, [r3, #0]
      break;
 80096b2:	bf00      	nop
  }

  return ret;
 80096b4:	68fb      	ldr	r3, [r7, #12]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop

080096c0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80096cc:	f107 0208 	add.w	r2, r7, #8
 80096d0:	2301      	movs	r3, #1
 80096d2:	2162      	movs	r1, #98	; 0x62
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fdb9 	bl	800924c <lsm303agr_read_reg>
 80096da:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10f      	bne.n	8009702 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	7a3b      	ldrb	r3, [r7, #8]
 80096ec:	f362 1304 	bfi	r3, r2, #4, #1
 80096f0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80096f2:	f107 0208 	add.w	r2, r7, #8
 80096f6:	2301      	movs	r3, #1
 80096f8:	2162      	movs	r1, #98	; 0x62
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fdbe 	bl	800927c <lsm303agr_write_reg>
 8009700:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009702:	68fb      	ldr	r3, [r7, #12]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8009716:	f107 020c 	add.w	r2, r7, #12
 800971a:	2306      	movs	r3, #6
 800971c:	2168      	movs	r1, #104	; 0x68
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7ff fd94 	bl	800924c <lsm303agr_read_reg>
 8009724:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8009726:	7b7b      	ldrb	r3, [r7, #13]
 8009728:	b21a      	sxth	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009734:	b29b      	uxth	r3, r3
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	b29a      	uxth	r2, r3
 800973a:	7b3b      	ldrb	r3, [r7, #12]
 800973c:	b29b      	uxth	r3, r3
 800973e:	4413      	add	r3, r2
 8009740:	b29b      	uxth	r3, r3
 8009742:	b21a      	sxth	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009748:	7bfa      	ldrb	r2, [r7, #15]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	3302      	adds	r3, #2
 800974e:	b212      	sxth	r2, r2
 8009750:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	3302      	adds	r3, #2
 8009756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800975a:	b29b      	uxth	r3, r3
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	b29a      	uxth	r2, r3
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	b29b      	uxth	r3, r3
 8009764:	4413      	add	r3, r2
 8009766:	b29a      	uxth	r2, r3
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	3302      	adds	r3, #2
 800976c:	b212      	sxth	r2, r2
 800976e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009770:	7c7a      	ldrb	r2, [r7, #17]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	3304      	adds	r3, #4
 8009776:	b212      	sxth	r2, r2
 8009778:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	3304      	adds	r3, #4
 800977e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009782:	b29b      	uxth	r3, r3
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	b29a      	uxth	r2, r3
 8009788:	7c3b      	ldrb	r3, [r7, #16]
 800978a:	b29b      	uxth	r3, r3
 800978c:	4413      	add	r3, r2
 800978e:	b29a      	uxth	r2, r3
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	3304      	adds	r3, #4
 8009794:	b212      	sxth	r2, r2
 8009796:	801a      	strh	r2, [r3, #0]

  return ret;
 8009798:	697b      	ldr	r3, [r7, #20]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80097ac:	2301      	movs	r3, #1
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	210f      	movs	r1, #15
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff fd4a 	bl	800924c <lsm303agr_read_reg>
 80097b8:	60f8      	str	r0, [r7, #12]

  return ret;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80097ce:	2301      	movs	r3, #1
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	214f      	movs	r1, #79	; 0x4f
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff fd39 	bl	800924c <lsm303agr_read_reg>
 80097da:	60f8      	str	r0, [r7, #12]

  return ret;
 80097dc:	68fb      	ldr	r3, [r7, #12]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	460b      	mov	r3, r1
 80097f0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80097f2:	f107 0208 	add.w	r2, r7, #8
 80097f6:	2301      	movs	r3, #1
 80097f8:	2162      	movs	r1, #98	; 0x62
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff fd26 	bl	800924c <lsm303agr_read_reg>
 8009800:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10f      	bne.n	8009828 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	b2da      	uxtb	r2, r3
 8009810:	7a3b      	ldrb	r3, [r7, #8]
 8009812:	f362 0341 	bfi	r3, r2, #1, #1
 8009816:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009818:	f107 0208 	add.w	r2, r7, #8
 800981c:	2301      	movs	r3, #1
 800981e:	2162      	movs	r1, #98	; 0x62
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff fd2b 	bl	800927c <lsm303agr_write_reg>
 8009826:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009828:	68fb      	ldr	r3, [r7, #12]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800983e:	f107 0208 	add.w	r2, r7, #8
 8009842:	2301      	movs	r3, #1
 8009844:	212e      	movs	r1, #46	; 0x2e
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff fd00 	bl	800924c <lsm303agr_read_reg>
 800984c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10f      	bne.n	8009874 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	b2da      	uxtb	r2, r3
 800985c:	7a3b      	ldrb	r3, [r7, #8]
 800985e:	f362 1387 	bfi	r3, r2, #6, #2
 8009862:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8009864:	f107 0208 	add.w	r2, r7, #8
 8009868:	2301      	movs	r3, #1
 800986a:	212e      	movs	r1, #46	; 0x2e
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fd05 	bl	800927c <lsm303agr_write_reg>
 8009872:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8009874:	68fb      	ldr	r3, [r7, #12]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800988a:	f107 0208 	add.w	r2, r7, #8
 800988e:	2301      	movs	r3, #1
 8009890:	2162      	movs	r1, #98	; 0x62
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fcda 	bl	800924c <lsm303agr_read_reg>
 8009898:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	7a3b      	ldrb	r3, [r7, #8]
 80098aa:	f362 1345 	bfi	r3, r2, #5, #1
 80098ae:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80098b0:	f107 0208 	add.w	r2, r7, #8
 80098b4:	2301      	movs	r3, #1
 80098b6:	2162      	movs	r1, #98	; 0x62
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff fcdf 	bl	800927c <lsm303agr_write_reg>
 80098be:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80098c0:	68fb      	ldr	r3, [r7, #12]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	60fb      	str	r3, [r7, #12]
 80098e6:	e051      	b.n	800998c <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	7b1a      	ldrb	r2, [r3, #12]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695a      	ldr	r2, [r3, #20]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	699a      	ldr	r2, [r3, #24]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a1d      	ldr	r2, [pc, #116]	; (8009998 <LSM6DSL_RegisterBusIO+0xcc>)
 8009924:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a1c      	ldr	r2, [pc, #112]	; (800999c <LSM6DSL_RegisterBusIO+0xd0>)
 800992a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	69da      	ldr	r2, [r3, #28]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8009942:	f04f 33ff 	mov.w	r3, #4294967295
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	e020      	b.n	800998c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4798      	blx	r3
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8009956:	f04f 33ff 	mov.w	r3, #4294967295
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	e016      	b.n	800998c <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d112      	bne.n	800998c <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8009970:	230c      	movs	r3, #12
 8009972:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8009974:	7afb      	ldrb	r3, [r7, #11]
 8009976:	461a      	mov	r2, r3
 8009978:	2112      	movs	r1, #18
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fd2d 	bl	800a3da <LSM6DSL_Write_Reg>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8009986:	f04f 33ff 	mov.w	r3, #4294967295
 800998a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800998c:	68fb      	ldr	r3, [r7, #12]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	0800a849 	.word	0x0800a849
 800999c:	0800a87f 	.word	0x0800a87f

080099a0 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3320      	adds	r3, #32
 80099ac:	2101      	movs	r1, #1
 80099ae:	4618      	mov	r0, r3
 80099b0:	f001 fa59 	bl	800ae66 <lsm6dsl_auto_increment_set>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80099ba:	f04f 33ff 	mov.w	r3, #4294967295
 80099be:	e054      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3320      	adds	r3, #32
 80099c4:	2101      	movs	r1, #1
 80099c6:	4618      	mov	r0, r3
 80099c8:	f001 f980 	bl	800accc <lsm6dsl_block_data_update_set>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80099d2:	f04f 33ff 	mov.w	r3, #4294967295
 80099d6:	e048      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3320      	adds	r3, #32
 80099dc:	2100      	movs	r1, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fa67 	bl	800aeb2 <lsm6dsl_fifo_mode_set>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	e03c      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2204      	movs	r2, #4
 80099f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3320      	adds	r3, #32
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 ffe6 	bl	800a9d0 <lsm6dsl_xl_data_rate_set>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0e:	e02c      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	3320      	adds	r3, #32
 8009a14:	2100      	movs	r1, #0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 ff7c 	bl	800a914 <lsm6dsl_xl_full_scale_set>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8009a22:	f04f 33ff 	mov.w	r3, #4294967295
 8009a26:	e020      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2204      	movs	r2, #4
 8009a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3320      	adds	r3, #32
 8009a34:	2100      	movs	r1, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f001 f8c0 	bl	800abbc <lsm6dsl_gy_data_rate_set>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8009a42:	f04f 33ff 	mov.w	r3, #4294967295
 8009a46:	e010      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3320      	adds	r3, #32
 8009a4c:	2106      	movs	r1, #6
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 f84c 	bl	800aaec <lsm6dsl_gy_full_scale_set>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5e:	e004      	b.n	8009a6a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f888 	bl	8009b90 <LSM6DSL_ACC_Disable>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8a:	e015      	b.n	8009ab8 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fa9a 	bl	8009fc6 <LSM6DSL_GYRO_Disable>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d002      	beq.n	8009a9e <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8009a98:	f04f 33ff 	mov.w	r3, #4294967295
 8009a9c:	e00c      	b.n	8009ab8 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3320      	adds	r3, #32
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f9b7 	bl	800ae44 <lsm6dsl_device_id_get>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	e000      	b.n	8009ae4 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2201      	movs	r2, #1
 8009afa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2201      	movs	r2, #1
 8009b00:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2200      	movs	r2, #0
 8009b06:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009b14:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2210      	movs	r2, #16
 8009b1a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	4a07      	ldr	r2, [pc, #28]	; (8009b44 <LSM6DSL_GetCapabilities+0x58>)
 8009b26:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	4a06      	ldr	r2, [pc, #24]	; (8009b44 <LSM6DSL_GetCapabilities+0x58>)
 8009b2c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	45d02000 	.word	0x45d02000

08009b48 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d101      	bne.n	8009b5e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e014      	b.n	8009b88 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f103 0220 	add.w	r2, r3, #32
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f000 ff2f 	bl	800a9d0 <lsm6dsl_xl_data_rate_set>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8009b78:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7c:	e004      	b.n	8009b88 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e01f      	b.n	8009be6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f103 0220 	add.w	r2, r3, #32
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	3333      	adds	r3, #51	; 0x33
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f000 ff32 	bl	800aa1c <lsm6dsl_xl_data_rate_get>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8009bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc2:	e010      	b.n	8009be6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3320      	adds	r3, #32
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 ff00 	bl	800a9d0 <lsm6dsl_xl_data_rate_set>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8009bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bda:	e004      	b.n	8009be6 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3320      	adds	r3, #32
 8009c02:	f107 020b 	add.w	r2, r7, #11
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fea9 	bl	800a960 <lsm6dsl_xl_full_scale_get>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8009c14:	f04f 33ff 	mov.w	r3, #4294967295
 8009c18:	e023      	b.n	8009c62 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8009c1a:	7afb      	ldrb	r3, [r7, #11]
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d81b      	bhi.n	8009c58 <LSM6DSL_ACC_GetSensitivity+0x68>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c39 	.word	0x08009c39
 8009c2c:	08009c51 	.word	0x08009c51
 8009c30:	08009c41 	.word	0x08009c41
 8009c34:	08009c49 	.word	0x08009c49
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	4a0c      	ldr	r2, [pc, #48]	; (8009c6c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8009c3c:	601a      	str	r2, [r3, #0]
      break;
 8009c3e:	e00f      	b.n	8009c60 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	4a0b      	ldr	r2, [pc, #44]	; (8009c70 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8009c44:	601a      	str	r2, [r3, #0]
      break;
 8009c46:	e00b      	b.n	8009c60 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	4a0a      	ldr	r2, [pc, #40]	; (8009c74 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8009c4c:	601a      	str	r2, [r3, #0]
      break;
 8009c4e:	e007      	b.n	8009c60 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	4a09      	ldr	r2, [pc, #36]	; (8009c78 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8009c54:	601a      	str	r2, [r3, #0]
      break;
 8009c56:	e003      	b.n	8009c60 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	60fb      	str	r3, [r7, #12]
      break;
 8009c5e:	bf00      	nop
  }

  return ret;
 8009c60:	68fb      	ldr	r3, [r7, #12]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	3d79db23 	.word	0x3d79db23
 8009c70:	3df9db23 	.word	0x3df9db23
 8009c74:	3e79db23 	.word	0x3e79db23
 8009c78:	3ef9db23 	.word	0x3ef9db23

08009c7c <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3320      	adds	r3, #32
 8009c8e:	f107 020b 	add.w	r2, r7, #11
 8009c92:	4611      	mov	r1, r2
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fec1 	bl	800aa1c <lsm6dsl_xl_data_rate_get>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8009ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ca4:	e054      	b.n	8009d50 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8009ca6:	7afb      	ldrb	r3, [r7, #11]
 8009ca8:	2b0b      	cmp	r3, #11
 8009caa:	d84c      	bhi.n	8009d46 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8009cac:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009ce5 	.word	0x08009ce5
 8009cb8:	08009cf7 	.word	0x08009cf7
 8009cbc:	08009cff 	.word	0x08009cff
 8009cc0:	08009d07 	.word	0x08009d07
 8009cc4:	08009d0f 	.word	0x08009d0f
 8009cc8:	08009d17 	.word	0x08009d17
 8009ccc:	08009d1f 	.word	0x08009d1f
 8009cd0:	08009d27 	.word	0x08009d27
 8009cd4:	08009d2f 	.word	0x08009d2f
 8009cd8:	08009d37 	.word	0x08009d37
 8009cdc:	08009d3f 	.word	0x08009d3f
 8009ce0:	08009cef 	.word	0x08009cef
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	f04f 0200 	mov.w	r2, #0
 8009cea:	601a      	str	r2, [r3, #0]
      break;
 8009cec:	e02f      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	4a19      	ldr	r2, [pc, #100]	; (8009d58 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8009cf2:	601a      	str	r2, [r3, #0]
      break;
 8009cf4:	e02b      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	4a18      	ldr	r2, [pc, #96]	; (8009d5c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8009cfa:	601a      	str	r2, [r3, #0]
      break;
 8009cfc:	e027      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	4a17      	ldr	r2, [pc, #92]	; (8009d60 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8009d02:	601a      	str	r2, [r3, #0]
      break;
 8009d04:	e023      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	4a16      	ldr	r2, [pc, #88]	; (8009d64 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8009d0a:	601a      	str	r2, [r3, #0]
      break;
 8009d0c:	e01f      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8009d12:	601a      	str	r2, [r3, #0]
      break;
 8009d14:	e01b      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	4a14      	ldr	r2, [pc, #80]	; (8009d6c <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8009d1a:	601a      	str	r2, [r3, #0]
      break;
 8009d1c:	e017      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	4a13      	ldr	r2, [pc, #76]	; (8009d70 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8009d22:	601a      	str	r2, [r3, #0]
      break;
 8009d24:	e013      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	4a12      	ldr	r2, [pc, #72]	; (8009d74 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8009d2a:	601a      	str	r2, [r3, #0]
      break;
 8009d2c:	e00f      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	4a11      	ldr	r2, [pc, #68]	; (8009d78 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8009d32:	601a      	str	r2, [r3, #0]
      break;
 8009d34:	e00b      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	4a10      	ldr	r2, [pc, #64]	; (8009d7c <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8009d3a:	601a      	str	r2, [r3, #0]
      break;
 8009d3c:	e007      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8009d42:	601a      	str	r2, [r3, #0]
      break;
 8009d44:	e003      	b.n	8009d4e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8009d46:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4a:	60fb      	str	r3, [r7, #12]
      break;
 8009d4c:	bf00      	nop
  }

  return ret;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	3fcccccd 	.word	0x3fcccccd
 8009d5c:	41480000 	.word	0x41480000
 8009d60:	41d00000 	.word	0x41d00000
 8009d64:	42500000 	.word	0x42500000
 8009d68:	42d00000 	.word	0x42d00000
 8009d6c:	43500000 	.word	0x43500000
 8009d70:	43d00000 	.word	0x43d00000
 8009d74:	44504000 	.word	0x44504000
 8009d78:	44cf8000 	.word	0x44cf8000
 8009d7c:	45502000 	.word	0x45502000
 8009d80:	45d02000 	.word	0x45d02000

08009d84 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d106      	bne.n	8009da8 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009d9a:	ed97 0a00 	vldr	s0, [r7]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fb36 	bl	800a410 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8009da4:	4603      	mov	r3, r0
 8009da6:	e005      	b.n	8009db4 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009da8:	ed97 0a00 	vldr	s0, [r7]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 fbbb 	bl	800a528 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8009db2:	4603      	mov	r3, r0
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3320      	adds	r3, #32
 8009dce:	f107 020b 	add.w	r2, r7, #11
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fdc3 	bl	800a960 <lsm6dsl_xl_full_scale_get>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8009de0:	f04f 33ff 	mov.w	r3, #4294967295
 8009de4:	e023      	b.n	8009e2e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	2b03      	cmp	r3, #3
 8009dea:	d81b      	bhi.n	8009e24 <LSM6DSL_ACC_GetFullScale+0x68>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <LSM6DSL_ACC_GetFullScale+0x38>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e1d 	.word	0x08009e1d
 8009dfc:	08009e0d 	.word	0x08009e0d
 8009e00:	08009e15 	.word	0x08009e15
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2202      	movs	r2, #2
 8009e08:	601a      	str	r2, [r3, #0]
      break;
 8009e0a:	e00f      	b.n	8009e2c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2204      	movs	r2, #4
 8009e10:	601a      	str	r2, [r3, #0]
      break;
 8009e12:	e00b      	b.n	8009e2c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2208      	movs	r2, #8
 8009e18:	601a      	str	r2, [r3, #0]
      break;
 8009e1a:	e007      	b.n	8009e2c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2210      	movs	r2, #16
 8009e20:	601a      	str	r2, [r3, #0]
      break;
 8009e22:	e003      	b.n	8009e2c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8009e24:	f04f 33ff 	mov.w	r3, #4294967295
 8009e28:	60fb      	str	r3, [r7, #12]
      break;
 8009e2a:	bf00      	nop
  }

  return ret;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop

08009e38 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	dd0b      	ble.n	8009e60 <LSM6DSL_ACC_SetFullScale+0x28>
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	dd06      	ble.n	8009e5c <LSM6DSL_ACC_SetFullScale+0x24>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	dc01      	bgt.n	8009e58 <LSM6DSL_ACC_SetFullScale+0x20>
 8009e54:	2303      	movs	r3, #3
 8009e56:	e004      	b.n	8009e62 <LSM6DSL_ACC_SetFullScale+0x2a>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e002      	b.n	8009e62 <LSM6DSL_ACC_SetFullScale+0x2a>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e000      	b.n	8009e62 <LSM6DSL_ACC_SetFullScale+0x2a>
 8009e60:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8009e62:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3320      	adds	r3, #32
 8009e68:	7bfa      	ldrb	r2, [r7, #15]
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fd51 	bl	800a914 <lsm6dsl_xl_full_scale_set>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8009e78:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7c:	e000      	b.n	8009e80 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	3320      	adds	r3, #32
 8009e96:	f107 0208 	add.w	r2, r7, #8
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 ff86 	bl	800adae <lsm6dsl_acceleration_raw_get>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8009ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eac:	e00c      	b.n	8009ec8 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8009eae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8009eb6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8009ebe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8009eda:	f04f 0300 	mov.w	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3320      	adds	r3, #32
 8009ee4:	f107 0210 	add.w	r2, r7, #16
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 ff5f 	bl	800adae <lsm6dsl_acceleration_raw_get>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8009efa:	e03c      	b.n	8009f76 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8009efc:	f107 030c 	add.w	r3, r7, #12
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fe74 	bl	8009bf0 <LSM6DSL_ACC_GetSensitivity>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f12:	e030      	b.n	8009f76 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009f14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009f18:	ee07 3a90 	vmov	s15, r3
 8009f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f20:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f2c:	ee17 2a90 	vmov	r2, s15
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009f34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f38:	ee07 3a90 	vmov	s15, r3
 8009f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f4c:	ee17 2a90 	vmov	r2, s15
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8009f54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f60:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f6c:	ee17 2a90 	vmov	r2, s15
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	e014      	b.n	8009fbe <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f103 0220 	add.w	r2, r3, #32
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	4610      	mov	r0, r2
 8009fa4:	f000 fe0a 	bl	800abbc <lsm6dsl_gy_data_rate_set>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8009fae:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb2:	e004      	b.n	8009fbe <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e01f      	b.n	800a01c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f103 0220 	add.w	r2, r3, #32
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3334      	adds	r3, #52	; 0x34
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f000 fe0d 	bl	800ac08 <lsm6dsl_gy_data_rate_get>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8009ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ff8:	e010      	b.n	800a01c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	3320      	adds	r3, #32
 8009ffe:	2100      	movs	r1, #0
 800a000:	4618      	mov	r0, r3
 800a002:	f000 fddb 	bl	800abbc <lsm6dsl_gy_data_rate_set>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	e004      	b.n	800a01c <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	3320      	adds	r3, #32
 800a036:	f107 020b 	add.w	r2, r7, #11
 800a03a:	4611      	mov	r1, r2
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fd7b 	bl	800ab38 <lsm6dsl_gy_full_scale_get>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800a048:	f04f 33ff 	mov.w	r3, #4294967295
 800a04c:	e02d      	b.n	800a0aa <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800a04e:	7afb      	ldrb	r3, [r7, #11]
 800a050:	2b06      	cmp	r3, #6
 800a052:	d825      	bhi.n	800a0a0 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800a054:	a201      	add	r2, pc, #4	; (adr r2, 800a05c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800a056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05a:	bf00      	nop
 800a05c:	0800a081 	.word	0x0800a081
 800a060:	0800a079 	.word	0x0800a079
 800a064:	0800a089 	.word	0x0800a089
 800a068:	0800a0a1 	.word	0x0800a0a1
 800a06c:	0800a091 	.word	0x0800a091
 800a070:	0800a0a1 	.word	0x0800a0a1
 800a074:	0800a099 	.word	0x0800a099
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	4a0e      	ldr	r2, [pc, #56]	; (800a0b4 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 800a07c:	601a      	str	r2, [r3, #0]
      break;
 800a07e:	e013      	b.n	800a0a8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	4a0d      	ldr	r2, [pc, #52]	; (800a0b8 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800a084:	601a      	str	r2, [r3, #0]
      break;
 800a086:	e00f      	b.n	800a0a8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	4a0c      	ldr	r2, [pc, #48]	; (800a0bc <LSM6DSL_GYRO_GetSensitivity+0x98>)
 800a08c:	601a      	str	r2, [r3, #0]
      break;
 800a08e:	e00b      	b.n	800a0a8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	4a0b      	ldr	r2, [pc, #44]	; (800a0c0 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800a094:	601a      	str	r2, [r3, #0]
      break;
 800a096:	e007      	b.n	800a0a8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	4a0a      	ldr	r2, [pc, #40]	; (800a0c4 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 800a09c:	601a      	str	r2, [r3, #0]
      break;
 800a09e:	e003      	b.n	800a0a8 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 800a0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a4:	60fb      	str	r3, [r7, #12]
      break;
 800a0a6:	bf00      	nop
  }

  return ret;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	408c0000 	.word	0x408c0000
 800a0b8:	410c0000 	.word	0x410c0000
 800a0bc:	418c0000 	.word	0x418c0000
 800a0c0:	420c0000 	.word	0x420c0000
 800a0c4:	428c0000 	.word	0x428c0000

0800a0c8 <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3320      	adds	r3, #32
 800a0da:	f107 020b 	add.w	r2, r7, #11
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fd91 	bl	800ac08 <lsm6dsl_gy_data_rate_get>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	e04e      	b.n	800a190 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800a0f2:	7afb      	ldrb	r3, [r7, #11]
 800a0f4:	2b0a      	cmp	r3, #10
 800a0f6:	d846      	bhi.n	800a186 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800a0f8:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800a0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a12d 	.word	0x0800a12d
 800a104:	0800a137 	.word	0x0800a137
 800a108:	0800a13f 	.word	0x0800a13f
 800a10c:	0800a147 	.word	0x0800a147
 800a110:	0800a14f 	.word	0x0800a14f
 800a114:	0800a157 	.word	0x0800a157
 800a118:	0800a15f 	.word	0x0800a15f
 800a11c:	0800a167 	.word	0x0800a167
 800a120:	0800a16f 	.word	0x0800a16f
 800a124:	0800a177 	.word	0x0800a177
 800a128:	0800a17f 	.word	0x0800a17f
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	f04f 0200 	mov.w	r2, #0
 800a132:	601a      	str	r2, [r3, #0]
      break;
 800a134:	e02b      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	4a17      	ldr	r2, [pc, #92]	; (800a198 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800a13a:	601a      	str	r2, [r3, #0]
      break;
 800a13c:	e027      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	4a16      	ldr	r2, [pc, #88]	; (800a19c <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 800a142:	601a      	str	r2, [r3, #0]
      break;
 800a144:	e023      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800a14a:	601a      	str	r2, [r3, #0]
      break;
 800a14c:	e01f      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	4a14      	ldr	r2, [pc, #80]	; (800a1a4 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 800a152:	601a      	str	r2, [r3, #0]
      break;
 800a154:	e01b      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	4a13      	ldr	r2, [pc, #76]	; (800a1a8 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800a15a:	601a      	str	r2, [r3, #0]
      break;
 800a15c:	e017      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	4a12      	ldr	r2, [pc, #72]	; (800a1ac <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800a162:	601a      	str	r2, [r3, #0]
      break;
 800a164:	e013      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	4a11      	ldr	r2, [pc, #68]	; (800a1b0 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800a16a:	601a      	str	r2, [r3, #0]
      break;
 800a16c:	e00f      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	4a10      	ldr	r2, [pc, #64]	; (800a1b4 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800a172:	601a      	str	r2, [r3, #0]
      break;
 800a174:	e00b      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	4a0f      	ldr	r2, [pc, #60]	; (800a1b8 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800a17a:	601a      	str	r2, [r3, #0]
      break;
 800a17c:	e007      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	4a0e      	ldr	r2, [pc, #56]	; (800a1bc <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800a182:	601a      	str	r2, [r3, #0]
      break;
 800a184:	e003      	b.n	800a18e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800a186:	f04f 33ff 	mov.w	r3, #4294967295
 800a18a:	60fb      	str	r3, [r7, #12]
      break;
 800a18c:	bf00      	nop
  }

  return ret;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	41480000 	.word	0x41480000
 800a19c:	41d00000 	.word	0x41d00000
 800a1a0:	42500000 	.word	0x42500000
 800a1a4:	42d00000 	.word	0x42d00000
 800a1a8:	43500000 	.word	0x43500000
 800a1ac:	43d00000 	.word	0x43d00000
 800a1b0:	44504000 	.word	0x44504000
 800a1b4:	44cf8000 	.word	0x44cf8000
 800a1b8:	45502000 	.word	0x45502000
 800a1bc:	45d02000 	.word	0x45d02000

0800a1c0 <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d106      	bne.n	800a1e4 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800a1d6:	ed97 0a00 	vldr	s0, [r7]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 fa26 	bl	800a62c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	e005      	b.n	800a1f0 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800a1e4:	ed97 0a00 	vldr	s0, [r7]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 faab 	bl	800a744 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 800a1ee:	4603      	mov	r3, r0
  }
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3320      	adds	r3, #32
 800a20a:	f107 020b 	add.w	r2, r7, #11
 800a20e:	4611      	mov	r1, r2
 800a210:	4618      	mov	r0, r3
 800a212:	f000 fc91 	bl	800ab38 <lsm6dsl_gy_full_scale_get>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800a21c:	f04f 33ff 	mov.w	r3, #4294967295
 800a220:	e030      	b.n	800a284 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 800a222:	7afb      	ldrb	r3, [r7, #11]
 800a224:	2b06      	cmp	r3, #6
 800a226:	d828      	bhi.n	800a27a <LSM6DSL_GYRO_GetFullScale+0x82>
 800a228:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800a22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22e:	bf00      	nop
 800a230:	0800a255 	.word	0x0800a255
 800a234:	0800a24d 	.word	0x0800a24d
 800a238:	0800a25d 	.word	0x0800a25d
 800a23c:	0800a27b 	.word	0x0800a27b
 800a240:	0800a267 	.word	0x0800a267
 800a244:	0800a27b 	.word	0x0800a27b
 800a248:	0800a271 	.word	0x0800a271
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	227d      	movs	r2, #125	; 0x7d
 800a250:	601a      	str	r2, [r3, #0]
      break;
 800a252:	e016      	b.n	800a282 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	22fa      	movs	r2, #250	; 0xfa
 800a258:	601a      	str	r2, [r3, #0]
      break;
 800a25a:	e012      	b.n	800a282 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a262:	601a      	str	r2, [r3, #0]
      break;
 800a264:	e00d      	b.n	800a282 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a26c:	601a      	str	r2, [r3, #0]
      break;
 800a26e:	e008      	b.n	800a282 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a276:	601a      	str	r2, [r3, #0]
      break;
 800a278:	e003      	b.n	800a282 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800a27a:	f04f 33ff 	mov.w	r3, #4294967295
 800a27e:	60fb      	str	r3, [r7, #12]
      break;
 800a280:	bf00      	nop
  }

  return ret;
 800a282:	68fb      	ldr	r3, [r7, #12]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b7d      	cmp	r3, #125	; 0x7d
 800a29a:	dd12      	ble.n	800a2c2 <LSM6DSL_GYRO_SetFullScale+0x36>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2bfa      	cmp	r3, #250	; 0xfa
 800a2a0:	dd0d      	ble.n	800a2be <LSM6DSL_GYRO_SetFullScale+0x32>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a2a8:	dd07      	ble.n	800a2ba <LSM6DSL_GYRO_SetFullScale+0x2e>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2b0:	dc01      	bgt.n	800a2b6 <LSM6DSL_GYRO_SetFullScale+0x2a>
 800a2b2:	2304      	movs	r3, #4
 800a2b4:	e006      	b.n	800a2c4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a2b6:	2306      	movs	r3, #6
 800a2b8:	e004      	b.n	800a2c4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e002      	b.n	800a2c4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e000      	b.n	800a2c4 <LSM6DSL_GYRO_SetFullScale+0x38>
 800a2c2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 800a2c4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3320      	adds	r3, #32
 800a2ca:	7bfa      	ldrb	r2, [r7, #15]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 fc0c 	bl	800aaec <lsm6dsl_gy_full_scale_set>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295
 800a2de:	e000      	b.n	800a2e2 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3320      	adds	r3, #32
 800a2f8:	f107 0208 	add.w	r2, r7, #8
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fd0a 	bl	800ad18 <lsm6dsl_angular_rate_raw_get>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	e00c      	b.n	800a32a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800a310:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800a318:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800a320:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3710      	adds	r7, #16
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b086      	sub	sp, #24
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3320      	adds	r3, #32
 800a340:	f107 0210 	add.w	r2, r7, #16
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fce6 	bl	800ad18 <lsm6dsl_angular_rate_raw_get>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	e03c      	b.n	800a3d2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 800a358:	f107 030c 	add.w	r3, r7, #12
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fe60 	bl	800a024 <LSM6DSL_GYRO_GetSensitivity>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800a36a:	f04f 33ff 	mov.w	r3, #4294967295
 800a36e:	e030      	b.n	800a3d2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800a370:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a374:	ee07 3a90 	vmov	s15, r3
 800a378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a37c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a388:	ee17 2a90 	vmov	r2, s15
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800a390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a394:	ee07 3a90 	vmov	s15, r3
 800a398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a39c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3a8:	ee17 2a90 	vmov	r2, s15
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800a3b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a3b4:	ee07 3a90 	vmov	s15, r3
 800a3b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a3bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800a3c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3c8:	ee17 2a90 	vmov	r2, s15
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3718      	adds	r7, #24
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f103 0020 	add.w	r0, r3, #32
 800a3f0:	1cba      	adds	r2, r7, #2
 800a3f2:	78f9      	ldrb	r1, [r7, #3]
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	f000 fa75 	bl	800a8e4 <lsm6dsl_write_reg>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800a400:	f04f 33ff 	mov.w	r3, #4294967295
 800a404:	e000      	b.n	800a408 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800a41c:	edd7 7a00 	vldr	s15, [r7]
 800a420:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a424:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42c:	d801      	bhi.n	800a432 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800a42e:	2301      	movs	r3, #1
 800a430:	e058      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a432:	edd7 7a00 	vldr	s15, [r7]
 800a436:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a43a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a442:	d801      	bhi.n	800a448 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 800a444:	2302      	movs	r3, #2
 800a446:	e04d      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a448:	edd7 7a00 	vldr	s15, [r7]
 800a44c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a50c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800a450:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a458:	d801      	bhi.n	800a45e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800a45a:	2303      	movs	r3, #3
 800a45c:	e042      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a45e:	edd7 7a00 	vldr	s15, [r7]
 800a462:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a510 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800a466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a46e:	d801      	bhi.n	800a474 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 800a470:	2304      	movs	r3, #4
 800a472:	e037      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a474:	edd7 7a00 	vldr	s15, [r7]
 800a478:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a514 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800a47c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a484:	d801      	bhi.n	800a48a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800a486:	2305      	movs	r3, #5
 800a488:	e02c      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a48a:	edd7 7a00 	vldr	s15, [r7]
 800a48e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a518 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 800a492:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49a:	d801      	bhi.n	800a4a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800a49c:	2306      	movs	r3, #6
 800a49e:	e021      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a4a0:	edd7 7a00 	vldr	s15, [r7]
 800a4a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a51c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800a4a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b0:	d801      	bhi.n	800a4b6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800a4b2:	2307      	movs	r3, #7
 800a4b4:	e016      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a4b6:	edd7 7a00 	vldr	s15, [r7]
 800a4ba:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a520 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 800a4be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c6:	d801      	bhi.n	800a4cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800a4c8:	2308      	movs	r3, #8
 800a4ca:	e00b      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a4cc:	edd7 7a00 	vldr	s15, [r7]
 800a4d0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a524 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 800a4d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4dc:	d801      	bhi.n	800a4e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800a4de:	2309      	movs	r3, #9
 800a4e0:	e000      	b.n	800a4e4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800a4e2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800a4e4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	3320      	adds	r3, #32
 800a4ea:	7bfa      	ldrb	r2, [r7, #15]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fa6e 	bl	800a9d0 <lsm6dsl_xl_data_rate_set>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800a4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fe:	e000      	b.n	800a502 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	42500000 	.word	0x42500000
 800a510:	42d00000 	.word	0x42d00000
 800a514:	43500000 	.word	0x43500000
 800a518:	43d00000 	.word	0x43d00000
 800a51c:	44504000 	.word	0x44504000
 800a520:	44cf8000 	.word	0x44cf8000
 800a524:	45502000 	.word	0x45502000

0800a528 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800a534:	edd7 7a00 	vldr	s15, [r7]
 800a538:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a53c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a544:	d801      	bhi.n	800a54a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800a546:	2301      	movs	r3, #1
 800a548:	e058      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a54a:	edd7 7a00 	vldr	s15, [r7]
 800a54e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a552:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55a:	d801      	bhi.n	800a560 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e04d      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a560:	edd7 7a00 	vldr	s15, [r7]
 800a564:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a610 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800a568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	d801      	bhi.n	800a576 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800a572:	2303      	movs	r3, #3
 800a574:	e042      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a576:	edd7 7a00 	vldr	s15, [r7]
 800a57a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a614 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800a57e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a586:	d801      	bhi.n	800a58c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800a588:	2304      	movs	r3, #4
 800a58a:	e037      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a58c:	edd7 7a00 	vldr	s15, [r7]
 800a590:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a618 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800a594:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59c:	d801      	bhi.n	800a5a2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800a59e:	2305      	movs	r3, #5
 800a5a0:	e02c      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a5a2:	edd7 7a00 	vldr	s15, [r7]
 800a5a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a61c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800a5aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b2:	d801      	bhi.n	800a5b8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 800a5b4:	2306      	movs	r3, #6
 800a5b6:	e021      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a5b8:	edd7 7a00 	vldr	s15, [r7]
 800a5bc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a620 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800a5c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c8:	d801      	bhi.n	800a5ce <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800a5ca:	2307      	movs	r3, #7
 800a5cc:	e016      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a5ce:	edd7 7a00 	vldr	s15, [r7]
 800a5d2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a624 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800a5d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5de:	d801      	bhi.n	800a5e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800a5e0:	2308      	movs	r3, #8
 800a5e2:	e00b      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a5e4:	edd7 7a00 	vldr	s15, [r7]
 800a5e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a628 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 800a5ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f4:	d801      	bhi.n	800a5fa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800a5f6:	2309      	movs	r3, #9
 800a5f8:	e000      	b.n	800a5fc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800a5fa:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	42500000 	.word	0x42500000
 800a614:	42d00000 	.word	0x42d00000
 800a618:	43500000 	.word	0x43500000
 800a61c:	43d00000 	.word	0x43d00000
 800a620:	44504000 	.word	0x44504000
 800a624:	44cf8000 	.word	0x44cf8000
 800a628:	45502000 	.word	0x45502000

0800a62c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a638:	edd7 7a00 	vldr	s15, [r7]
 800a63c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a640:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a648:	d801      	bhi.n	800a64e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e058      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a64e:	edd7 7a00 	vldr	s15, [r7]
 800a652:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65e:	d801      	bhi.n	800a664 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800a660:	2302      	movs	r3, #2
 800a662:	e04d      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a664:	edd7 7a00 	vldr	s15, [r7]
 800a668:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a728 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800a66c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a674:	d801      	bhi.n	800a67a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800a676:	2303      	movs	r3, #3
 800a678:	e042      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a67a:	edd7 7a00 	vldr	s15, [r7]
 800a67e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a72c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800a682:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68a:	d801      	bhi.n	800a690 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800a68c:	2304      	movs	r3, #4
 800a68e:	e037      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a690:	edd7 7a00 	vldr	s15, [r7]
 800a694:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a730 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800a698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a0:	d801      	bhi.n	800a6a6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800a6a2:	2305      	movs	r3, #5
 800a6a4:	e02c      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a6a6:	edd7 7a00 	vldr	s15, [r7]
 800a6aa:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a734 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800a6ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b6:	d801      	bhi.n	800a6bc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800a6b8:	2306      	movs	r3, #6
 800a6ba:	e021      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a6bc:	edd7 7a00 	vldr	s15, [r7]
 800a6c0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a738 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800a6c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	d801      	bhi.n	800a6d2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800a6ce:	2307      	movs	r3, #7
 800a6d0:	e016      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a6d2:	edd7 7a00 	vldr	s15, [r7]
 800a6d6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a73c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800a6da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e2:	d801      	bhi.n	800a6e8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	e00b      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a6e8:	edd7 7a00 	vldr	s15, [r7]
 800a6ec:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a740 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800a6f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f8:	d801      	bhi.n	800a6fe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800a6fa:	2309      	movs	r3, #9
 800a6fc:	e000      	b.n	800a700 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a6fe:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a700:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3320      	adds	r3, #32
 800a706:	7bfa      	ldrb	r2, [r7, #15]
 800a708:	4611      	mov	r1, r2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fa56 	bl	800abbc <lsm6dsl_gy_data_rate_set>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800a716:	f04f 33ff 	mov.w	r3, #4294967295
 800a71a:	e000      	b.n	800a71e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	42500000 	.word	0x42500000
 800a72c:	42d00000 	.word	0x42d00000
 800a730:	43500000 	.word	0x43500000
 800a734:	43d00000 	.word	0x43d00000
 800a738:	44504000 	.word	0x44504000
 800a73c:	44cf8000 	.word	0x44cf8000
 800a740:	45502000 	.word	0x45502000

0800a744 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a750:	edd7 7a00 	vldr	s15, [r7]
 800a754:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	d801      	bhi.n	800a766 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800a762:	2301      	movs	r3, #1
 800a764:	e058      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a766:	edd7 7a00 	vldr	s15, [r7]
 800a76a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a76e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a776:	d801      	bhi.n	800a77c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800a778:	2302      	movs	r3, #2
 800a77a:	e04d      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a77c:	edd7 7a00 	vldr	s15, [r7]
 800a780:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a82c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800a784:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78c:	d801      	bhi.n	800a792 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800a78e:	2303      	movs	r3, #3
 800a790:	e042      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a792:	edd7 7a00 	vldr	s15, [r7]
 800a796:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a830 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800a79a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a2:	d801      	bhi.n	800a7a8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	e037      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a7a8:	edd7 7a00 	vldr	s15, [r7]
 800a7ac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a834 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800a7b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b8:	d801      	bhi.n	800a7be <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800a7ba:	2305      	movs	r3, #5
 800a7bc:	e02c      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a7be:	edd7 7a00 	vldr	s15, [r7]
 800a7c2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a838 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800a7c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ce:	d801      	bhi.n	800a7d4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800a7d0:	2306      	movs	r3, #6
 800a7d2:	e021      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a7d4:	edd7 7a00 	vldr	s15, [r7]
 800a7d8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a83c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800a7dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e4:	d801      	bhi.n	800a7ea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800a7e6:	2307      	movs	r3, #7
 800a7e8:	e016      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a7ea:	edd7 7a00 	vldr	s15, [r7]
 800a7ee:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a840 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800a7f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fa:	d801      	bhi.n	800a800 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	e00b      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a800:	edd7 7a00 	vldr	s15, [r7]
 800a804:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a844 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800a808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a810:	d801      	bhi.n	800a816 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800a812:	2309      	movs	r3, #9
 800a814:	e000      	b.n	800a818 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a816:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	42500000 	.word	0x42500000
 800a830:	42d00000 	.word	0x42d00000
 800a834:	43500000 	.word	0x43500000
 800a838:	43d00000 	.word	0x43d00000
 800a83c:	44504000 	.word	0x44504000
 800a840:	44cf8000 	.word	0x44cf8000
 800a844:	45502000 	.word	0x45502000

0800a848 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a848:	b590      	push	{r4, r7, lr}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	607a      	str	r2, [r7, #4]
 800a852:	461a      	mov	r2, r3
 800a854:	460b      	mov	r3, r1
 800a856:	72fb      	strb	r3, [r7, #11]
 800a858:	4613      	mov	r3, r2
 800a85a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	695c      	ldr	r4, [r3, #20]
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	7b1b      	ldrb	r3, [r3, #12]
 800a868:	b298      	uxth	r0, r3
 800a86a:	7afb      	ldrb	r3, [r7, #11]
 800a86c:	b299      	uxth	r1, r3
 800a86e:	893b      	ldrh	r3, [r7, #8]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	47a0      	blx	r4
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd90      	pop	{r4, r7, pc}

0800a87e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a87e:	b590      	push	{r4, r7, lr}
 800a880:	b087      	sub	sp, #28
 800a882:	af00      	add	r7, sp, #0
 800a884:	60f8      	str	r0, [r7, #12]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	461a      	mov	r2, r3
 800a88a:	460b      	mov	r3, r1
 800a88c:	72fb      	strb	r3, [r7, #11]
 800a88e:	4613      	mov	r3, r2
 800a890:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	691c      	ldr	r4, [r3, #16]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	7b1b      	ldrb	r3, [r3, #12]
 800a89e:	b298      	uxth	r0, r3
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	b299      	uxth	r1, r3
 800a8a4:	893b      	ldrh	r3, [r7, #8]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	47a0      	blx	r4
 800a8aa:	4603      	mov	r3, r0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd90      	pop	{r4, r7, pc}

0800a8b4 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800a8b4:	b590      	push	{r4, r7, lr}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	72fb      	strb	r3, [r7, #11]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	685c      	ldr	r4, [r3, #4]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	68d8      	ldr	r0, [r3, #12]
 800a8d0:	893b      	ldrh	r3, [r7, #8]
 800a8d2:	7af9      	ldrb	r1, [r7, #11]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	47a0      	blx	r4
 800a8d8:	6178      	str	r0, [r7, #20]

  return ret;
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd90      	pop	{r4, r7, pc}

0800a8e4 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800a8e4:	b590      	push	{r4, r7, lr}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	607a      	str	r2, [r7, #4]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	72fb      	strb	r3, [r7, #11]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681c      	ldr	r4, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	68d8      	ldr	r0, [r3, #12]
 800a900:	893b      	ldrh	r3, [r7, #8]
 800a902:	7af9      	ldrb	r1, [r7, #11]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	47a0      	blx	r4
 800a908:	6178      	str	r0, [r7, #20]

  return ret;
 800a90a:	697b      	ldr	r3, [r7, #20]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	bd90      	pop	{r4, r7, pc}

0800a914 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a920:	f107 0208 	add.w	r2, r7, #8
 800a924:	2301      	movs	r3, #1
 800a926:	2110      	movs	r1, #16
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff ffc3 	bl	800a8b4 <lsm6dsl_read_reg>
 800a92e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10f      	bne.n	800a956 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800a936:	78fb      	ldrb	r3, [r7, #3]
 800a938:	f003 0303 	and.w	r3, r3, #3
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	7a3b      	ldrb	r3, [r7, #8]
 800a940:	f362 0383 	bfi	r3, r2, #2, #2
 800a944:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a946:	f107 0208 	add.w	r2, r7, #8
 800a94a:	2301      	movs	r3, #1
 800a94c:	2110      	movs	r1, #16
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff ffc8 	bl	800a8e4 <lsm6dsl_write_reg>
 800a954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a956:	68fb      	ldr	r3, [r7, #12]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a96a:	f107 0208 	add.w	r2, r7, #8
 800a96e:	2301      	movs	r3, #1
 800a970:	2110      	movs	r1, #16
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ff9e 	bl	800a8b4 <lsm6dsl_read_reg>
 800a978:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 800a97a:	7a3b      	ldrb	r3, [r7, #8]
 800a97c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b03      	cmp	r3, #3
 800a984:	d81a      	bhi.n	800a9bc <lsm6dsl_xl_full_scale_get+0x5c>
 800a986:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <lsm6dsl_xl_full_scale_get+0x2c>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a9a5 	.word	0x0800a9a5
 800a994:	0800a9ad 	.word	0x0800a9ad
 800a998:	0800a9b5 	.word	0x0800a9b5
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
      break;
 800a9a2:	e00f      	b.n	800a9c4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	701a      	strb	r2, [r3, #0]
      break;
 800a9aa:	e00b      	b.n	800a9c4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	701a      	strb	r2, [r3, #0]
      break;
 800a9b2:	e007      	b.n	800a9c4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2203      	movs	r2, #3
 800a9b8:	701a      	strb	r2, [r3, #0]
      break;
 800a9ba:	e003      	b.n	800a9c4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	701a      	strb	r2, [r3, #0]
      break;
 800a9c2:	bf00      	nop
  }

  return ret;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop

0800a9d0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a9dc:	f107 0208 	add.w	r2, r7, #8
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	2110      	movs	r1, #16
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff ff65 	bl	800a8b4 <lsm6dsl_read_reg>
 800a9ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10f      	bne.n	800aa12 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	f003 030f 	and.w	r3, r3, #15
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	7a3b      	ldrb	r3, [r7, #8]
 800a9fc:	f362 1307 	bfi	r3, r2, #4, #4
 800aa00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800aa02:	f107 0208 	add.w	r2, r7, #8
 800aa06:	2301      	movs	r3, #1
 800aa08:	2110      	movs	r1, #16
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f7ff ff6a 	bl	800a8e4 <lsm6dsl_write_reg>
 800aa10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800aa26:	f107 0208 	add.w	r2, r7, #8
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	2110      	movs	r1, #16
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7ff ff40 	bl	800a8b4 <lsm6dsl_read_reg>
 800aa34:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800aa36:	7a3b      	ldrb	r3, [r7, #8]
 800aa38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	2b0b      	cmp	r3, #11
 800aa40:	d84a      	bhi.n	800aad8 <lsm6dsl_xl_data_rate_get+0xbc>
 800aa42:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <lsm6dsl_xl_data_rate_get+0x2c>)
 800aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa48:	0800aa79 	.word	0x0800aa79
 800aa4c:	0800aa81 	.word	0x0800aa81
 800aa50:	0800aa89 	.word	0x0800aa89
 800aa54:	0800aa91 	.word	0x0800aa91
 800aa58:	0800aa99 	.word	0x0800aa99
 800aa5c:	0800aaa1 	.word	0x0800aaa1
 800aa60:	0800aaa9 	.word	0x0800aaa9
 800aa64:	0800aab1 	.word	0x0800aab1
 800aa68:	0800aab9 	.word	0x0800aab9
 800aa6c:	0800aac1 	.word	0x0800aac1
 800aa70:	0800aac9 	.word	0x0800aac9
 800aa74:	0800aad1 	.word	0x0800aad1
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
      break;
 800aa7e:	e02f      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]
      break;
 800aa86:	e02b      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	701a      	strb	r2, [r3, #0]
      break;
 800aa8e:	e027      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2203      	movs	r2, #3
 800aa94:	701a      	strb	r2, [r3, #0]
      break;
 800aa96:	e023      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2204      	movs	r2, #4
 800aa9c:	701a      	strb	r2, [r3, #0]
      break;
 800aa9e:	e01f      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2205      	movs	r2, #5
 800aaa4:	701a      	strb	r2, [r3, #0]
      break;
 800aaa6:	e01b      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2206      	movs	r2, #6
 800aaac:	701a      	strb	r2, [r3, #0]
      break;
 800aaae:	e017      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2207      	movs	r2, #7
 800aab4:	701a      	strb	r2, [r3, #0]
      break;
 800aab6:	e013      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	2208      	movs	r2, #8
 800aabc:	701a      	strb	r2, [r3, #0]
      break;
 800aabe:	e00f      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2209      	movs	r2, #9
 800aac4:	701a      	strb	r2, [r3, #0]
      break;
 800aac6:	e00b      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	220a      	movs	r2, #10
 800aacc:	701a      	strb	r2, [r3, #0]
      break;
 800aace:	e007      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	220b      	movs	r2, #11
 800aad4:	701a      	strb	r2, [r3, #0]
      break;
 800aad6:	e003      	b.n	800aae0 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	220c      	movs	r2, #12
 800aadc:	701a      	strb	r2, [r3, #0]
      break;
 800aade:	bf00      	nop
  }

  return ret;
 800aae0:	68fb      	ldr	r3, [r7, #12]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop

0800aaec <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800aaf8:	f107 0208 	add.w	r2, r7, #8
 800aafc:	2301      	movs	r3, #1
 800aafe:	2111      	movs	r1, #17
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff fed7 	bl	800a8b4 <lsm6dsl_read_reg>
 800ab06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10f      	bne.n	800ab2e <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	f003 0307 	and.w	r3, r3, #7
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	7a3b      	ldrb	r3, [r7, #8]
 800ab18:	f362 0343 	bfi	r3, r2, #1, #3
 800ab1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ab1e:	f107 0208 	add.w	r2, r7, #8
 800ab22:	2301      	movs	r3, #1
 800ab24:	2111      	movs	r1, #17
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff fedc 	bl	800a8e4 <lsm6dsl_write_reg>
 800ab2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ab42:	f107 0208 	add.w	r2, r7, #8
 800ab46:	2301      	movs	r3, #1
 800ab48:	2111      	movs	r1, #17
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff feb2 	bl	800a8b4 <lsm6dsl_read_reg>
 800ab50:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 800ab52:	7a3b      	ldrb	r3, [r7, #8]
 800ab54:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b06      	cmp	r3, #6
 800ab5c:	d824      	bhi.n	800aba8 <lsm6dsl_gy_full_scale_get+0x70>
 800ab5e:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <lsm6dsl_gy_full_scale_get+0x2c>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ab81 	.word	0x0800ab81
 800ab68:	0800ab89 	.word	0x0800ab89
 800ab6c:	0800ab91 	.word	0x0800ab91
 800ab70:	0800aba9 	.word	0x0800aba9
 800ab74:	0800ab99 	.word	0x0800ab99
 800ab78:	0800aba9 	.word	0x0800aba9
 800ab7c:	0800aba1 	.word	0x0800aba1
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]
      break;
 800ab86:	e013      	b.n	800abb0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	701a      	strb	r2, [r3, #0]
      break;
 800ab8e:	e00f      	b.n	800abb0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2202      	movs	r2, #2
 800ab94:	701a      	strb	r2, [r3, #0]
      break;
 800ab96:	e00b      	b.n	800abb0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2204      	movs	r2, #4
 800ab9c:	701a      	strb	r2, [r3, #0]
      break;
 800ab9e:	e007      	b.n	800abb0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2206      	movs	r2, #6
 800aba4:	701a      	strb	r2, [r3, #0]
      break;
 800aba6:	e003      	b.n	800abb0 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2207      	movs	r2, #7
 800abac:	701a      	strb	r2, [r3, #0]
      break;
 800abae:	bf00      	nop
  }

  return ret;
 800abb0:	68fb      	ldr	r3, [r7, #12]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop

0800abbc <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	460b      	mov	r3, r1
 800abc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800abc8:	f107 0208 	add.w	r2, r7, #8
 800abcc:	2301      	movs	r3, #1
 800abce:	2111      	movs	r1, #17
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fe6f 	bl	800a8b4 <lsm6dsl_read_reg>
 800abd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10f      	bne.n	800abfe <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800abde:	78fb      	ldrb	r3, [r7, #3]
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	7a3b      	ldrb	r3, [r7, #8]
 800abe8:	f362 1307 	bfi	r3, r2, #4, #4
 800abec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800abee:	f107 0208 	add.w	r2, r7, #8
 800abf2:	2301      	movs	r3, #1
 800abf4:	2111      	movs	r1, #17
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff fe74 	bl	800a8e4 <lsm6dsl_write_reg>
 800abfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abfe:	68fb      	ldr	r3, [r7, #12]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ac12:	f107 0208 	add.w	r2, r7, #8
 800ac16:	2301      	movs	r3, #1
 800ac18:	2111      	movs	r1, #17
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7ff fe4a 	bl	800a8b4 <lsm6dsl_read_reg>
 800ac20:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 800ac22:	7a3b      	ldrb	r3, [r7, #8]
 800ac24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b0a      	cmp	r3, #10
 800ac2c:	d844      	bhi.n	800acb8 <lsm6dsl_gy_data_rate_get+0xb0>
 800ac2e:	a201      	add	r2, pc, #4	; (adr r2, 800ac34 <lsm6dsl_gy_data_rate_get+0x2c>)
 800ac30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac34:	0800ac61 	.word	0x0800ac61
 800ac38:	0800ac69 	.word	0x0800ac69
 800ac3c:	0800ac71 	.word	0x0800ac71
 800ac40:	0800ac79 	.word	0x0800ac79
 800ac44:	0800ac81 	.word	0x0800ac81
 800ac48:	0800ac89 	.word	0x0800ac89
 800ac4c:	0800ac91 	.word	0x0800ac91
 800ac50:	0800ac99 	.word	0x0800ac99
 800ac54:	0800aca1 	.word	0x0800aca1
 800ac58:	0800aca9 	.word	0x0800aca9
 800ac5c:	0800acb1 	.word	0x0800acb1
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	2200      	movs	r2, #0
 800ac64:	701a      	strb	r2, [r3, #0]
      break;
 800ac66:	e02b      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	701a      	strb	r2, [r3, #0]
      break;
 800ac6e:	e027      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2202      	movs	r2, #2
 800ac74:	701a      	strb	r2, [r3, #0]
      break;
 800ac76:	e023      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2203      	movs	r2, #3
 800ac7c:	701a      	strb	r2, [r3, #0]
      break;
 800ac7e:	e01f      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2204      	movs	r2, #4
 800ac84:	701a      	strb	r2, [r3, #0]
      break;
 800ac86:	e01b      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2205      	movs	r2, #5
 800ac8c:	701a      	strb	r2, [r3, #0]
      break;
 800ac8e:	e017      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2206      	movs	r2, #6
 800ac94:	701a      	strb	r2, [r3, #0]
      break;
 800ac96:	e013      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2207      	movs	r2, #7
 800ac9c:	701a      	strb	r2, [r3, #0]
      break;
 800ac9e:	e00f      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2208      	movs	r2, #8
 800aca4:	701a      	strb	r2, [r3, #0]
      break;
 800aca6:	e00b      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2209      	movs	r2, #9
 800acac:	701a      	strb	r2, [r3, #0]
      break;
 800acae:	e007      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	220a      	movs	r2, #10
 800acb4:	701a      	strb	r2, [r3, #0]
      break;
 800acb6:	e003      	b.n	800acc0 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	220b      	movs	r2, #11
 800acbc:	701a      	strb	r2, [r3, #0]
      break;
 800acbe:	bf00      	nop
  }

  return ret;
 800acc0:	68fb      	ldr	r3, [r7, #12]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop

0800accc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800acd8:	f107 0208 	add.w	r2, r7, #8
 800acdc:	2301      	movs	r3, #1
 800acde:	2112      	movs	r1, #18
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff fde7 	bl	800a8b4 <lsm6dsl_read_reg>
 800ace6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10f      	bne.n	800ad0e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800acee:	78fb      	ldrb	r3, [r7, #3]
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	7a3b      	ldrb	r3, [r7, #8]
 800acf8:	f362 1386 	bfi	r3, r2, #6, #1
 800acfc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800acfe:	f107 0208 	add.w	r2, r7, #8
 800ad02:	2301      	movs	r3, #1
 800ad04:	2112      	movs	r1, #18
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff fdec 	bl	800a8e4 <lsm6dsl_write_reg>
 800ad0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800ad22:	f107 020c 	add.w	r2, r7, #12
 800ad26:	2306      	movs	r3, #6
 800ad28:	2122      	movs	r1, #34	; 0x22
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fdc2 	bl	800a8b4 <lsm6dsl_read_reg>
 800ad30:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800ad32:	7b7b      	ldrb	r3, [r7, #13]
 800ad34:	b21a      	sxth	r2, r3
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	021b      	lsls	r3, r3, #8
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	7b3b      	ldrb	r3, [r7, #12]
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	4413      	add	r3, r2
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	b21a      	sxth	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800ad54:	7bfa      	ldrb	r2, [r7, #15]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3302      	adds	r3, #2
 800ad5a:	b212      	sxth	r2, r2
 800ad5c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	3302      	adds	r3, #2
 800ad62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	4413      	add	r3, r2
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	3302      	adds	r3, #2
 800ad78:	b212      	sxth	r2, r2
 800ad7a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ad7c:	7c7a      	ldrb	r2, [r7, #17]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	3304      	adds	r3, #4
 800ad82:	b212      	sxth	r2, r2
 800ad84:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	3304      	adds	r3, #4
 800ad8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	7c3b      	ldrb	r3, [r7, #16]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	4413      	add	r3, r2
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	b212      	sxth	r2, r2
 800ada2:	801a      	strh	r2, [r3, #0]

  return ret;
 800ada4:	697b      	ldr	r3, [r7, #20]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b086      	sub	sp, #24
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800adb8:	f107 020c 	add.w	r2, r7, #12
 800adbc:	2306      	movs	r3, #6
 800adbe:	2128      	movs	r1, #40	; 0x28
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff fd77 	bl	800a8b4 <lsm6dsl_read_reg>
 800adc6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800adc8:	7b7b      	ldrb	r3, [r7, #13]
 800adca:	b21a      	sxth	r2, r3
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800add6:	b29b      	uxth	r3, r3
 800add8:	021b      	lsls	r3, r3, #8
 800adda:	b29a      	uxth	r2, r3
 800addc:	7b3b      	ldrb	r3, [r7, #12]
 800adde:	b29b      	uxth	r3, r3
 800ade0:	4413      	add	r3, r2
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	b21a      	sxth	r2, r3
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800adea:	7bfa      	ldrb	r2, [r7, #15]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	3302      	adds	r3, #2
 800adf0:	b212      	sxth	r2, r2
 800adf2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	3302      	adds	r3, #2
 800adf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	021b      	lsls	r3, r3, #8
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4413      	add	r3, r2
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	3302      	adds	r3, #2
 800ae0e:	b212      	sxth	r2, r2
 800ae10:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ae12:	7c7a      	ldrb	r2, [r7, #17]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	3304      	adds	r3, #4
 800ae18:	b212      	sxth	r2, r2
 800ae1a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	3304      	adds	r3, #4
 800ae20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	021b      	lsls	r3, r3, #8
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	7c3b      	ldrb	r3, [r7, #16]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	4413      	add	r3, r2
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	3304      	adds	r3, #4
 800ae36:	b212      	sxth	r2, r2
 800ae38:	801a      	strh	r2, [r3, #0]

  return ret;
 800ae3a:	697b      	ldr	r3, [r7, #20]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800ae4e:	2301      	movs	r3, #1
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	210f      	movs	r1, #15
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff fd2d 	bl	800a8b4 <lsm6dsl_read_reg>
 800ae5a:	60f8      	str	r0, [r7, #12]

  return ret;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ae72:	f107 0208 	add.w	r2, r7, #8
 800ae76:	2301      	movs	r3, #1
 800ae78:	2112      	movs	r1, #18
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fd1a 	bl	800a8b4 <lsm6dsl_read_reg>
 800ae80:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10f      	bne.n	800aea8 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	7a3b      	ldrb	r3, [r7, #8]
 800ae92:	f362 0382 	bfi	r3, r2, #2, #1
 800ae96:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ae98:	f107 0208 	add.w	r2, r7, #8
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	2112      	movs	r1, #18
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fd1f 	bl	800a8e4 <lsm6dsl_write_reg>
 800aea6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aea8:	68fb      	ldr	r3, [r7, #12]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	460b      	mov	r3, r1
 800aebc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800aebe:	f107 0208 	add.w	r2, r7, #8
 800aec2:	2301      	movs	r3, #1
 800aec4:	210a      	movs	r1, #10
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff fcf4 	bl	800a8b4 <lsm6dsl_read_reg>
 800aecc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10f      	bne.n	800aef4 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	f003 0307 	and.w	r3, r3, #7
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	7a3b      	ldrb	r3, [r7, #8]
 800aede:	f362 0302 	bfi	r3, r2, #0, #3
 800aee2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800aee4:	f107 0208 	add.w	r2, r7, #8
 800aee8:	2301      	movs	r3, #1
 800aeea:	210a      	movs	r1, #10
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fcf9 	bl	800a8e4 <lsm6dsl_write_reg>
 800aef2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800aef4:	68fb      	ldr	r3, [r7, #12]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <IKS01A2_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	; 0x28
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800af0a:	2300      	movs	r3, #0
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800af0e:	2301      	movs	r3, #1
 800af10:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <IKS01A2_ENV_SENSOR_Init+0x24>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d032      	beq.n	800af88 <IKS01A2_ENV_SENSOR_Init+0x88>
 800af22:	e063      	b.n	800afec <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800af24:	6838      	ldr	r0, [r7, #0]
 800af26:	f000 f931 	bl	800b18c <HTS221_0_Probe>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800af30:	f04f 33ff 	mov.w	r3, #4294967295
 800af34:	e098      	b.n	800b068 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af36:	4a4e      	ldr	r2, [pc, #312]	; (800b070 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	494c      	ldr	r1, [pc, #304]	; (800b074 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af48:	f107 0108 	add.w	r1, r7, #8
 800af4c:	4610      	mov	r0, r2
 800af4e:	4798      	blx	r3
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d002      	beq.n	800af5c <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af56:	f06f 0306 	mvn.w	r3, #6
 800af5a:	e085      	b.n	800b068 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800af5c:	7a3b      	ldrb	r3, [r7, #8]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d103      	bne.n	800af6a <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	f043 0301 	orr.w	r3, r3, #1
 800af68:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800af6a:	7abb      	ldrb	r3, [r7, #10]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d103      	bne.n	800af78 <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	f043 0304 	orr.w	r3, r3, #4
 800af76:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800af78:	7a7b      	ldrb	r3, [r7, #9]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d13a      	bne.n	800aff4 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	f043 0302 	orr.w	r3, r3, #2
 800af84:	61bb      	str	r3, [r7, #24]
      }
      break;
 800af86:	e035      	b.n	800aff4 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800af88:	6838      	ldr	r0, [r7, #0]
 800af8a:	f000 f9b9 	bl	800b300 <LPS22HB_0_Probe>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800af94:	f04f 33ff 	mov.w	r3, #4294967295
 800af98:	e066      	b.n	800b068 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af9a:	4a35      	ldr	r2, [pc, #212]	; (800b070 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	4933      	ldr	r1, [pc, #204]	; (800b074 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800afac:	f107 0108 	add.w	r1, r7, #8
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800afba:	f06f 0306 	mvn.w	r3, #6
 800afbe:	e053      	b.n	800b068 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800afc0:	7a3b      	ldrb	r3, [r7, #8]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d103      	bne.n	800afce <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	f043 0301 	orr.w	r3, r3, #1
 800afcc:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800afce:	7abb      	ldrb	r3, [r7, #10]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d103      	bne.n	800afdc <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	f043 0304 	orr.w	r3, r3, #4
 800afda:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800afdc:	7a7b      	ldrb	r3, [r7, #9]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d10a      	bne.n	800aff8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	f043 0302 	orr.w	r3, r3, #2
 800afe8:	61bb      	str	r3, [r7, #24]
      }
      break;
 800afea:	e005      	b.n	800aff8 <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800afec:	f06f 0301 	mvn.w	r3, #1
 800aff0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800aff2:	e002      	b.n	800affa <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800aff4:	bf00      	nop
 800aff6:	e000      	b.n	800affa <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800aff8:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	e031      	b.n	800b068 <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800b004:	2300      	movs	r3, #0
 800b006:	61fb      	str	r3, [r7, #28]
 800b008:	e02a      	b.n	800b060 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	4013      	ands	r3, r2
 800b010:	6a3a      	ldr	r2, [r7, #32]
 800b012:	429a      	cmp	r2, r3
 800b014:	d11e      	bne.n	800b054 <IKS01A2_ENV_SENSOR_Init+0x154>
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	4013      	ands	r3, r2
 800b01c:	6a3a      	ldr	r2, [r7, #32]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d118      	bne.n	800b054 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b022:	4a15      	ldr	r2, [pc, #84]	; (800b078 <IKS01A2_ENV_SENSOR_Init+0x178>)
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b02a:	4814      	ldr	r0, [pc, #80]	; (800b07c <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	4413      	add	r3, r2
 800b034:	440b      	add	r3, r1
 800b036:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	490d      	ldr	r1, [pc, #52]	; (800b074 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b044:	4610      	mov	r0, r2
 800b046:	4798      	blx	r3
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b04e:	f06f 0304 	mvn.w	r3, #4
 800b052:	e009      	b.n	800b068 <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	3301      	adds	r3, #1
 800b05e:	61fb      	str	r3, [r7, #28]
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	2b02      	cmp	r3, #2
 800b064:	d9d1      	bls.n	800b00a <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3728      	adds	r7, #40	; 0x28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20001a2c 	.word	0x20001a2c
 800b074:	20001a0c 	.word	0x20001a0c
 800b078:	2000018c 	.word	0x2000018c
 800b07c:	20001a14 	.word	0x20001a14

0800b080 <IKS01A2_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d903      	bls.n	800b098 <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b090:	f06f 0301 	mvn.w	r3, #1
 800b094:	60fb      	str	r3, [r7, #12]
 800b096:	e028      	b.n	800b0ea <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b098:	4a16      	ldr	r2, [pc, #88]	; (800b0f4 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d11c      	bne.n	800b0e4 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b0aa:	4a13      	ldr	r2, [pc, #76]	; (800b0f8 <IKS01A2_ENV_SENSOR_Enable+0x78>)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b0b2:	4812      	ldr	r0, [pc, #72]	; (800b0fc <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	440b      	add	r3, r1
 800b0be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	490e      	ldr	r1, [pc, #56]	; (800b100 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	4798      	blx	r3
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b0d6:	f06f 0304 	mvn.w	r3, #4
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	e005      	b.n	800b0ea <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e002      	b.n	800b0ea <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b0e4:	f06f 0301 	mvn.w	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20001a34 	.word	0x20001a34
 800b0f8:	2000018c 	.word	0x2000018c
 800b0fc:	20001a14 	.word	0x20001a14
 800b100:	20001a0c 	.word	0x20001a0c

0800b104 <IKS01A2_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d903      	bls.n	800b11e <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b116:	f06f 0301 	mvn.w	r3, #1
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	e029      	b.n	800b172 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b11e:	4a17      	ldr	r2, [pc, #92]	; (800b17c <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	4013      	ands	r3, r2
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d11d      	bne.n	800b16c <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800b130:	4a13      	ldr	r2, [pc, #76]	; (800b180 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b138:	4812      	ldr	r0, [pc, #72]	; (800b184 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	4613      	mov	r3, r2
 800b13e:	005b      	lsls	r3, r3, #1
 800b140:	4413      	add	r3, r2
 800b142:	440b      	add	r3, r1
 800b144:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	490f      	ldr	r1, [pc, #60]	; (800b188 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b15e:	f06f 0304 	mvn.w	r3, #4
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e005      	b.n	800b172 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	e002      	b.n	800b172 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b16c:	f06f 0301 	mvn.w	r3, #1
 800b170:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b172:	697b      	ldr	r3, [r7, #20]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	20001a34 	.word	0x20001a34
 800b180:	2000018c 	.word	0x2000018c
 800b184:	20001a14 	.word	0x20001a14
 800b188:	20001a0c 	.word	0x20001a0c

0800b18c <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b090      	sub	sp, #64	; 0x40
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800b194:	2300      	movs	r3, #0
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800b198:	2300      	movs	r3, #0
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800b19c:	23bf      	movs	r3, #191	; 0xbf
 800b19e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b1a2:	4b49      	ldr	r3, [pc, #292]	; (800b2c8 <HTS221_0_Probe+0x13c>)
 800b1a4:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b1a6:	4b49      	ldr	r3, [pc, #292]	; (800b2cc <HTS221_0_Probe+0x140>)
 800b1a8:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b1aa:	4b49      	ldr	r3, [pc, #292]	; (800b2d0 <HTS221_0_Probe+0x144>)
 800b1ac:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b1ae:	4b49      	ldr	r3, [pc, #292]	; (800b2d4 <HTS221_0_Probe+0x148>)
 800b1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b1b2:	4b49      	ldr	r3, [pc, #292]	; (800b2d8 <HTS221_0_Probe+0x14c>)
 800b1b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800b1b6:	f107 031c 	add.w	r3, r7, #28
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4847      	ldr	r0, [pc, #284]	; (800b2dc <HTS221_0_Probe+0x150>)
 800b1be:	f7fb fbc7 	bl	8006950 <HTS221_RegisterBusIO>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1c8:	f06f 0306 	mvn.w	r3, #6
 800b1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1ce:	e076      	b.n	800b2be <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800b1d0:	f107 031b 	add.w	r3, r7, #27
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4841      	ldr	r0, [pc, #260]	; (800b2dc <HTS221_0_Probe+0x150>)
 800b1d8:	f7fb fc43 	bl	8006a62 <HTS221_ReadID>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1e2:	f06f 0306 	mvn.w	r3, #6
 800b1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1e8:	e069      	b.n	800b2be <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800b1ea:	7efb      	ldrb	r3, [r7, #27]
 800b1ec:	2bbc      	cmp	r3, #188	; 0xbc
 800b1ee:	d003      	beq.n	800b1f8 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1f0:	f06f 0306 	mvn.w	r3, #6
 800b1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f6:	e062      	b.n	800b2be <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800b1f8:	f107 0308 	add.w	r3, r7, #8
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4837      	ldr	r0, [pc, #220]	; (800b2dc <HTS221_0_Probe+0x150>)
 800b200:	f7fb fc46 	bl	8006a90 <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b204:	7a3b      	ldrb	r3, [r7, #8]
 800b206:	461a      	mov	r2, r3
 800b208:	7a7b      	ldrb	r3, [r7, #9]
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800b20e:	7abb      	ldrb	r3, [r7, #10]
 800b210:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b212:	4313      	orrs	r3, r2
 800b214:	4a32      	ldr	r2, [pc, #200]	; (800b2e0 <HTS221_0_Probe+0x154>)
 800b216:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800b218:	4b32      	ldr	r3, [pc, #200]	; (800b2e4 <HTS221_0_Probe+0x158>)
 800b21a:	4a30      	ldr	r2, [pc, #192]	; (800b2dc <HTS221_0_Probe+0x150>)
 800b21c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800b21e:	4b32      	ldr	r3, [pc, #200]	; (800b2e8 <HTS221_0_Probe+0x15c>)
 800b220:	4a32      	ldr	r2, [pc, #200]	; (800b2ec <HTS221_0_Probe+0x160>)
 800b222:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b226:	2b00      	cmp	r3, #0
 800b228:	d11d      	bne.n	800b266 <HTS221_0_Probe+0xda>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d018      	beq.n	800b266 <HTS221_0_Probe+0xda>
 800b234:	7a3b      	ldrb	r3, [r7, #8]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d115      	bne.n	800b266 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800b23a:	4b2d      	ldr	r3, [pc, #180]	; (800b2f0 <HTS221_0_Probe+0x164>)
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	4a2d      	ldr	r2, [pc, #180]	; (800b2f4 <HTS221_0_Probe+0x168>)
 800b240:	492d      	ldr	r1, [pc, #180]	; (800b2f8 <HTS221_0_Probe+0x16c>)
 800b242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800b246:	4b28      	ldr	r3, [pc, #160]	; (800b2e8 <HTS221_0_Probe+0x15c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a25      	ldr	r2, [pc, #148]	; (800b2e4 <HTS221_0_Probe+0x158>)
 800b24e:	6812      	ldr	r2, [r2, #0]
 800b250:	4610      	mov	r0, r2
 800b252:	4798      	blx	r3
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b25a:	f06f 0304 	mvn.w	r3, #4
 800b25e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b260:	e001      	b.n	800b266 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b262:	2300      	movs	r3, #0
 800b264:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d11d      	bne.n	800b2a8 <HTS221_0_Probe+0x11c>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f003 0304 	and.w	r3, r3, #4
 800b272:	2b00      	cmp	r3, #0
 800b274:	d018      	beq.n	800b2a8 <HTS221_0_Probe+0x11c>
 800b276:	7abb      	ldrb	r3, [r7, #10]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d115      	bne.n	800b2a8 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800b27c:	4b1c      	ldr	r3, [pc, #112]	; (800b2f0 <HTS221_0_Probe+0x164>)
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	4a1c      	ldr	r2, [pc, #112]	; (800b2f4 <HTS221_0_Probe+0x168>)
 800b282:	491e      	ldr	r1, [pc, #120]	; (800b2fc <HTS221_0_Probe+0x170>)
 800b284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <HTS221_0_Probe+0x15c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a15      	ldr	r2, [pc, #84]	; (800b2e4 <HTS221_0_Probe+0x158>)
 800b290:	6812      	ldr	r2, [r2, #0]
 800b292:	4610      	mov	r0, r2
 800b294:	4798      	blx	r3
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b29c:	f06f 0304 	mvn.w	r3, #4
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2a2:	e001      	b.n	800b2a8 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d107      	bne.n	800b2be <HTS221_0_Probe+0x132>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2b8:	f06f 0304 	mvn.w	r3, #4
 800b2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800b2be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3740      	adds	r7, #64	; 0x40
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	0800645d 	.word	0x0800645d
 800b2cc:	080064d9 	.word	0x080064d9
 800b2d0:	0800658d 	.word	0x0800658d
 800b2d4:	08006529 	.word	0x08006529
 800b2d8:	080065f1 	.word	0x080065f1
 800b2dc:	20001a3c 	.word	0x20001a3c
 800b2e0:	20001a34 	.word	0x20001a34
 800b2e4:	20001a0c 	.word	0x20001a0c
 800b2e8:	20001a2c 	.word	0x20001a2c
 800b2ec:	2000005c 	.word	0x2000005c
 800b2f0:	2000018c 	.word	0x2000018c
 800b2f4:	20001a14 	.word	0x20001a14
 800b2f8:	20000080 	.word	0x20000080
 800b2fc:	2000006c 	.word	0x2000006c

0800b300 <LPS22HB_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b090      	sub	sp, #64	; 0x40
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b308:	2300      	movs	r3, #0
 800b30a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800b30c:	2300      	movs	r3, #0
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800b310:	23bb      	movs	r3, #187	; 0xbb
 800b312:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b316:	4b4a      	ldr	r3, [pc, #296]	; (800b440 <LPS22HB_0_Probe+0x140>)
 800b318:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b31a:	4b4a      	ldr	r3, [pc, #296]	; (800b444 <LPS22HB_0_Probe+0x144>)
 800b31c:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b31e:	4b4a      	ldr	r3, [pc, #296]	; (800b448 <LPS22HB_0_Probe+0x148>)
 800b320:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b322:	4b4a      	ldr	r3, [pc, #296]	; (800b44c <LPS22HB_0_Probe+0x14c>)
 800b324:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b326:	4b4a      	ldr	r3, [pc, #296]	; (800b450 <LPS22HB_0_Probe+0x150>)
 800b328:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800b32a:	f107 031c 	add.w	r3, r7, #28
 800b32e:	4619      	mov	r1, r3
 800b330:	4848      	ldr	r0, [pc, #288]	; (800b454 <LPS22HB_0_Probe+0x154>)
 800b332:	f7fc f92f 	bl	8007594 <LPS22HB_RegisterBusIO>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b33c:	f06f 0306 	mvn.w	r3, #6
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b342:	e078      	b.n	800b436 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800b344:	f107 031b 	add.w	r3, r7, #27
 800b348:	4619      	mov	r1, r3
 800b34a:	4842      	ldr	r0, [pc, #264]	; (800b454 <LPS22HB_0_Probe+0x154>)
 800b34c:	f7fc f9cb 	bl	80076e6 <LPS22HB_ReadID>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d003      	beq.n	800b35e <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b356:	f06f 0306 	mvn.w	r3, #6
 800b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b35c:	e06b      	b.n	800b436 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800b35e:	7efb      	ldrb	r3, [r7, #27]
 800b360:	2bb1      	cmp	r3, #177	; 0xb1
 800b362:	d003      	beq.n	800b36c <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b364:	f06f 0306 	mvn.w	r3, #6
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b36a:	e064      	b.n	800b436 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800b36c:	f107 0308 	add.w	r3, r7, #8
 800b370:	4619      	mov	r1, r3
 800b372:	4838      	ldr	r0, [pc, #224]	; (800b454 <LPS22HB_0_Probe+0x154>)
 800b374:	f7fc f9ce 	bl	8007714 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b378:	7a3b      	ldrb	r3, [r7, #8]
 800b37a:	461a      	mov	r2, r3
 800b37c:	7a7b      	ldrb	r3, [r7, #9]
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800b382:	7abb      	ldrb	r3, [r7, #10]
 800b384:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800b386:	4313      	orrs	r3, r2
 800b388:	4a33      	ldr	r2, [pc, #204]	; (800b458 <LPS22HB_0_Probe+0x158>)
 800b38a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800b38c:	4b33      	ldr	r3, [pc, #204]	; (800b45c <LPS22HB_0_Probe+0x15c>)
 800b38e:	4a31      	ldr	r2, [pc, #196]	; (800b454 <LPS22HB_0_Probe+0x154>)
 800b390:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800b392:	4b33      	ldr	r3, [pc, #204]	; (800b460 <LPS22HB_0_Probe+0x160>)
 800b394:	4a33      	ldr	r2, [pc, #204]	; (800b464 <LPS22HB_0_Probe+0x164>)
 800b396:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d11e      	bne.n	800b3dc <LPS22HB_0_Probe+0xdc>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d019      	beq.n	800b3dc <LPS22HB_0_Probe+0xdc>
 800b3a8:	7a3b      	ldrb	r3, [r7, #8]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d116      	bne.n	800b3dc <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800b3ae:	4b2e      	ldr	r3, [pc, #184]	; (800b468 <LPS22HB_0_Probe+0x168>)
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <LPS22HB_0_Probe+0x16c>)
 800b3b4:	3303      	adds	r3, #3
 800b3b6:	492e      	ldr	r1, [pc, #184]	; (800b470 <LPS22HB_0_Probe+0x170>)
 800b3b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800b3bc:	4b28      	ldr	r3, [pc, #160]	; (800b460 <LPS22HB_0_Probe+0x160>)
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a26      	ldr	r2, [pc, #152]	; (800b45c <LPS22HB_0_Probe+0x15c>)
 800b3c4:	6852      	ldr	r2, [r2, #4]
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4798      	blx	r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3d0:	f06f 0304 	mvn.w	r3, #4
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3d6:	e001      	b.n	800b3dc <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d11e      	bne.n	800b420 <LPS22HB_0_Probe+0x120>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d019      	beq.n	800b420 <LPS22HB_0_Probe+0x120>
 800b3ec:	7a7b      	ldrb	r3, [r7, #9]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d116      	bne.n	800b420 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800b3f2:	4b1d      	ldr	r3, [pc, #116]	; (800b468 <LPS22HB_0_Probe+0x168>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	4a1d      	ldr	r2, [pc, #116]	; (800b46c <LPS22HB_0_Probe+0x16c>)
 800b3f8:	3303      	adds	r3, #3
 800b3fa:	491e      	ldr	r1, [pc, #120]	; (800b474 <LPS22HB_0_Probe+0x174>)
 800b3fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800b400:	4b17      	ldr	r3, [pc, #92]	; (800b460 <LPS22HB_0_Probe+0x160>)
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a15      	ldr	r2, [pc, #84]	; (800b45c <LPS22HB_0_Probe+0x15c>)
 800b408:	6852      	ldr	r2, [r2, #4]
 800b40a:	4610      	mov	r0, r2
 800b40c:	4798      	blx	r3
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b414:	f06f 0304 	mvn.w	r3, #4
 800b418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b41a:	e001      	b.n	800b420 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b422:	2b00      	cmp	r3, #0
 800b424:	d107      	bne.n	800b436 <LPS22HB_0_Probe+0x136>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d002      	beq.n	800b436 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b430:	f06f 0304 	mvn.w	r3, #4
 800b434:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800b436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3740      	adds	r7, #64	; 0x40
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	0800645d 	.word	0x0800645d
 800b444:	080064d9 	.word	0x080064d9
 800b448:	0800658d 	.word	0x0800658d
 800b44c:	08006529 	.word	0x08006529
 800b450:	080065f1 	.word	0x080065f1
 800b454:	20001a70 	.word	0x20001a70
 800b458:	20001a34 	.word	0x20001a34
 800b45c:	20001a0c 	.word	0x20001a0c
 800b460:	20001a2c 	.word	0x20001a2c
 800b464:	20000094 	.word	0x20000094
 800b468:	2000018c 	.word	0x2000018c
 800b46c:	20001a14 	.word	0x20001a14
 800b470:	200000b8 	.word	0x200000b8
 800b474:	200000a4 	.word	0x200000a4

0800b478 <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08e      	sub	sp, #56	; 0x38
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b482:	2300      	movs	r3, #0
 800b484:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800b486:	2301      	movs	r3, #1
 800b488:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b02      	cmp	r3, #2
 800b492:	d06e      	beq.n	800b572 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b02      	cmp	r3, #2
 800b498:	f200 809d 	bhi.w	800b5d6 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <IKS01A2_MOTION_SENSOR_Init+0x32>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d032      	beq.n	800b50e <IKS01A2_MOTION_SENSOR_Init+0x96>
 800b4a8:	e095      	b.n	800b5d6 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b4aa:	6838      	ldr	r0, [r7, #0]
 800b4ac:	f000 f966 	bl	800b77c <LSM6DSL_0_Probe>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	e0cc      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b4bc:	4a68      	ldr	r2, [pc, #416]	; (800b660 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	4967      	ldr	r1, [pc, #412]	; (800b664 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4ce:	f107 010c 	add.w	r1, r7, #12
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	4798      	blx	r3
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b4dc:	f06f 0306 	mvn.w	r3, #6
 800b4e0:	e0b9      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b4e2:	7b3b      	ldrb	r3, [r7, #12]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d103      	bne.n	800b4f0 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800b4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ea:	f043 0302 	orr.w	r3, r3, #2
 800b4ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b4f0:	7b7b      	ldrb	r3, [r7, #13]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d103      	bne.n	800b4fe <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	f043 0301 	orr.w	r3, r3, #1
 800b4fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d16c      	bne.n	800b5de <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	f043 0304 	orr.w	r3, r3, #4
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b50c:	e067      	b.n	800b5de <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800b50e:	6838      	ldr	r0, [r7, #0]
 800b510:	f000 f9f0 	bl	800b8f4 <LSM303AGR_ACC_0_Probe>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800b51a:	f04f 33ff 	mov.w	r3, #4294967295
 800b51e:	e09a      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b520:	4a4f      	ldr	r2, [pc, #316]	; (800b660 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	494e      	ldr	r1, [pc, #312]	; (800b664 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b532:	f107 010c 	add.w	r1, r7, #12
 800b536:	4610      	mov	r0, r2
 800b538:	4798      	blx	r3
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b540:	f06f 0306 	mvn.w	r3, #6
 800b544:	e087      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b546:	7b3b      	ldrb	r3, [r7, #12]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d103      	bne.n	800b554 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54e:	f043 0302 	orr.w	r3, r3, #2
 800b552:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b554:	7b7b      	ldrb	r3, [r7, #13]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d103      	bne.n	800b562 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55c:	f043 0301 	orr.w	r3, r3, #1
 800b560:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b562:	7bbb      	ldrb	r3, [r7, #14]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d13c      	bne.n	800b5e2 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56a:	f043 0304 	orr.w	r3, r3, #4
 800b56e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b570:	e037      	b.n	800b5e2 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800b572:	6838      	ldr	r0, [r7, #0]
 800b574:	f000 fa62 	bl	800ba3c <LSM303AGR_MAG_0_Probe>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800b57e:	f04f 33ff 	mov.w	r3, #4294967295
 800b582:	e068      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b584:	4a36      	ldr	r2, [pc, #216]	; (800b660 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	4935      	ldr	r1, [pc, #212]	; (800b664 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b596:	f107 010c 	add.w	r1, r7, #12
 800b59a:	4610      	mov	r0, r2
 800b59c:	4798      	blx	r3
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b5a4:	f06f 0306 	mvn.w	r3, #6
 800b5a8:	e055      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800b5aa:	7b3b      	ldrb	r3, [r7, #12]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d103      	bne.n	800b5b8 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800b5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b2:	f043 0302 	orr.w	r3, r3, #2
 800b5b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800b5b8:	7b7b      	ldrb	r3, [r7, #13]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d103      	bne.n	800b5c6 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d10c      	bne.n	800b5e6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ce:	f043 0304 	orr.w	r3, r3, #4
 800b5d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b5d4:	e007      	b.n	800b5e6 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b5d6:	f06f 0301 	mvn.w	r3, #1
 800b5da:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800b5dc:	e004      	b.n	800b5e8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b5de:	bf00      	nop
 800b5e0:	e002      	b.n	800b5e8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b5e2:	bf00      	nop
 800b5e4:	e000      	b.n	800b5e8 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b5e6:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800b5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f0:	e031      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5f6:	e02a      	b.n	800b64e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b600:	429a      	cmp	r2, r3
 800b602:	d11e      	bne.n	800b642 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 800b604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	4013      	ands	r3, r2
 800b60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d118      	bne.n	800b642 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b610:	4a15      	ldr	r2, [pc, #84]	; (800b668 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b618:	4814      	ldr	r0, [pc, #80]	; (800b66c <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	4613      	mov	r3, r2
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	4413      	add	r3, r2
 800b622:	440b      	add	r3, r1
 800b624:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	490e      	ldr	r1, [pc, #56]	; (800b664 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b632:	4610      	mov	r0, r2
 800b634:	4798      	blx	r3
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b63c:	f06f 0304 	mvn.w	r3, #4
 800b640:	e009      	b.n	800b656 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	3301      	adds	r3, #1
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	2b02      	cmp	r3, #2
 800b652:	d9d1      	bls.n	800b5f8 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b656:	4618      	mov	r0, r3
 800b658:	3738      	adds	r7, #56	; 0x38
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	20001ad4 	.word	0x20001ad4
 800b664:	20001aa4 	.word	0x20001aa4
 800b668:	200001a0 	.word	0x200001a0
 800b66c:	20001ab0 	.word	0x20001ab0

0800b670 <IKS01A2_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d903      	bls.n	800b688 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b680:	f06f 0301 	mvn.w	r3, #1
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	e028      	b.n	800b6da <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b688:	4a16      	ldr	r2, [pc, #88]	; (800b6e4 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	4013      	ands	r3, r2
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	d11c      	bne.n	800b6d4 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b69a:	4a13      	ldr	r2, [pc, #76]	; (800b6e8 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b6a2:	4812      	ldr	r0, [pc, #72]	; (800b6ec <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	4413      	add	r3, r2
 800b6ac:	440b      	add	r3, r1
 800b6ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	490e      	ldr	r1, [pc, #56]	; (800b6f0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6c6:	f06f 0304 	mvn.w	r3, #4
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	e005      	b.n	800b6da <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e002      	b.n	800b6da <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b6d4:	f06f 0301 	mvn.w	r3, #1
 800b6d8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b6da:	68fb      	ldr	r3, [r7, #12]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	20001ae0 	.word	0x20001ae0
 800b6e8:	200001a0 	.word	0x200001a0
 800b6ec:	20001ab0 	.word	0x20001ab0
 800b6f0:	20001aa4 	.word	0x20001aa4

0800b6f4 <IKS01A2_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d903      	bls.n	800b70e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b706:	f06f 0301 	mvn.w	r3, #1
 800b70a:	617b      	str	r3, [r7, #20]
 800b70c:	e029      	b.n	800b762 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b70e:	4a17      	ldr	r2, [pc, #92]	; (800b76c <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4013      	ands	r3, r2
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d11d      	bne.n	800b75c <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b720:	4a13      	ldr	r2, [pc, #76]	; (800b770 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b728:	4812      	ldr	r0, [pc, #72]	; (800b774 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4613      	mov	r3, r2
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	4413      	add	r3, r2
 800b732:	440b      	add	r3, r1
 800b734:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	490f      	ldr	r1, [pc, #60]	; (800b778 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	4610      	mov	r0, r2
 800b746:	4798      	blx	r3
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b74e:	f06f 0304 	mvn.w	r3, #4
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	e005      	b.n	800b762 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	e002      	b.n	800b762 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b75c:	f06f 0301 	mvn.w	r3, #1
 800b760:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b762:	697b      	ldr	r3, [r7, #20]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	20001ae0 	.word	0x20001ae0
 800b770:	200001a0 	.word	0x200001a0
 800b774:	20001ab0 	.word	0x20001ab0
 800b778:	20001aa4 	.word	0x20001aa4

0800b77c <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b094      	sub	sp, #80	; 0x50
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b784:	2300      	movs	r3, #0
 800b786:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800b788:	2300      	movs	r3, #0
 800b78a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800b78c:	23d7      	movs	r3, #215	; 0xd7
 800b78e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b792:	4b4a      	ldr	r3, [pc, #296]	; (800b8bc <LSM6DSL_0_Probe+0x140>)
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b796:	4b4a      	ldr	r3, [pc, #296]	; (800b8c0 <LSM6DSL_0_Probe+0x144>)
 800b798:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b79a:	4b4a      	ldr	r3, [pc, #296]	; (800b8c4 <LSM6DSL_0_Probe+0x148>)
 800b79c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b79e:	4b4a      	ldr	r3, [pc, #296]	; (800b8c8 <LSM6DSL_0_Probe+0x14c>)
 800b7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b7a2:	4b4a      	ldr	r3, [pc, #296]	; (800b8cc <LSM6DSL_0_Probe+0x150>)
 800b7a4:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800b7a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4848      	ldr	r0, [pc, #288]	; (800b8d0 <LSM6DSL_0_Probe+0x154>)
 800b7ae:	f7fe f88d 	bl	80098cc <LSM6DSL_RegisterBusIO>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d003      	beq.n	800b7c0 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b7b8:	f06f 0306 	mvn.w	r3, #6
 800b7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7be:	e077      	b.n	800b8b0 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800b7c0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4842      	ldr	r0, [pc, #264]	; (800b8d0 <LSM6DSL_0_Probe+0x154>)
 800b7c8:	f7fe f97a 	bl	8009ac0 <LSM6DSL_ReadID>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b7d2:	f06f 0306 	mvn.w	r3, #6
 800b7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7d8:	e06a      	b.n	800b8b0 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800b7da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7de:	2b6a      	cmp	r3, #106	; 0x6a
 800b7e0:	d003      	beq.n	800b7ea <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b7e2:	f06f 0306 	mvn.w	r3, #6
 800b7e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7e8:	e062      	b.n	800b8b0 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800b7ea:	f107 030c 	add.w	r3, r7, #12
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4837      	ldr	r0, [pc, #220]	; (800b8d0 <LSM6DSL_0_Probe+0x154>)
 800b7f2:	f7fe f97b 	bl	8009aec <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b7f6:	7b7b      	ldrb	r3, [r7, #13]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	7b3b      	ldrb	r3, [r7, #12]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	431a      	orrs	r2, r3
 800b800:	7bbb      	ldrb	r3, [r7, #14]
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4313      	orrs	r3, r2
 800b806:	4a33      	ldr	r2, [pc, #204]	; (800b8d4 <LSM6DSL_0_Probe+0x158>)
 800b808:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800b80a:	4b33      	ldr	r3, [pc, #204]	; (800b8d8 <LSM6DSL_0_Probe+0x15c>)
 800b80c:	4a30      	ldr	r2, [pc, #192]	; (800b8d0 <LSM6DSL_0_Probe+0x154>)
 800b80e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800b810:	4b32      	ldr	r3, [pc, #200]	; (800b8dc <LSM6DSL_0_Probe+0x160>)
 800b812:	4a33      	ldr	r2, [pc, #204]	; (800b8e0 <LSM6DSL_0_Probe+0x164>)
 800b814:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11d      	bne.n	800b858 <LSM6DSL_0_Probe+0xdc>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d018      	beq.n	800b858 <LSM6DSL_0_Probe+0xdc>
 800b826:	7b7b      	ldrb	r3, [r7, #13]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d115      	bne.n	800b858 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800b82c:	4b2d      	ldr	r3, [pc, #180]	; (800b8e4 <LSM6DSL_0_Probe+0x168>)
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	4a2d      	ldr	r2, [pc, #180]	; (800b8e8 <LSM6DSL_0_Probe+0x16c>)
 800b832:	492e      	ldr	r1, [pc, #184]	; (800b8ec <LSM6DSL_0_Probe+0x170>)
 800b834:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800b838:	4b28      	ldr	r3, [pc, #160]	; (800b8dc <LSM6DSL_0_Probe+0x160>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a26      	ldr	r2, [pc, #152]	; (800b8d8 <LSM6DSL_0_Probe+0x15c>)
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	4610      	mov	r0, r2
 800b844:	4798      	blx	r3
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b84c:	f06f 0304 	mvn.w	r3, #4
 800b850:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b852:	e001      	b.n	800b858 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b854:	2300      	movs	r3, #0
 800b856:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d11d      	bne.n	800b89a <LSM6DSL_0_Probe+0x11e>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f003 0302 	and.w	r3, r3, #2
 800b864:	2b00      	cmp	r3, #0
 800b866:	d018      	beq.n	800b89a <LSM6DSL_0_Probe+0x11e>
 800b868:	7b3b      	ldrb	r3, [r7, #12]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d115      	bne.n	800b89a <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b86e:	4b1d      	ldr	r3, [pc, #116]	; (800b8e4 <LSM6DSL_0_Probe+0x168>)
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	4a1d      	ldr	r2, [pc, #116]	; (800b8e8 <LSM6DSL_0_Probe+0x16c>)
 800b874:	491e      	ldr	r1, [pc, #120]	; (800b8f0 <LSM6DSL_0_Probe+0x174>)
 800b876:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800b87a:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <LSM6DSL_0_Probe+0x160>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a15      	ldr	r2, [pc, #84]	; (800b8d8 <LSM6DSL_0_Probe+0x15c>)
 800b882:	6812      	ldr	r2, [r2, #0]
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b88e:	f06f 0304 	mvn.w	r3, #4
 800b892:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b894:	e001      	b.n	800b89a <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b896:	2300      	movs	r3, #0
 800b898:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d107      	bne.n	800b8b0 <LSM6DSL_0_Probe+0x134>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f003 0304 	and.w	r3, r3, #4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8aa:	f06f 0304 	mvn.w	r3, #4
 800b8ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800b8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3750      	adds	r7, #80	; 0x50
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	0800645d 	.word	0x0800645d
 800b8c0:	080064d9 	.word	0x080064d9
 800b8c4:	0800658d 	.word	0x0800658d
 800b8c8:	08006529 	.word	0x08006529
 800b8cc:	080065f1 	.word	0x080065f1
 800b8d0:	20001aec 	.word	0x20001aec
 800b8d4:	20001ae0 	.word	0x20001ae0
 800b8d8:	20001aa4 	.word	0x20001aa4
 800b8dc:	20001ad4 	.word	0x20001ad4
 800b8e0:	20000134 	.word	0x20000134
 800b8e4:	200001a0 	.word	0x200001a0
 800b8e8:	20001ab0 	.word	0x20001ab0
 800b8ec:	20000168 	.word	0x20000168
 800b8f0:	20000144 	.word	0x20000144

0800b8f4 <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b094      	sub	sp, #80	; 0x50
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800b900:	2300      	movs	r3, #0
 800b902:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800b904:	2333      	movs	r3, #51	; 0x33
 800b906:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b90a:	4b3f      	ldr	r3, [pc, #252]	; (800ba08 <LSM303AGR_ACC_0_Probe+0x114>)
 800b90c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b90e:	4b3f      	ldr	r3, [pc, #252]	; (800ba0c <LSM303AGR_ACC_0_Probe+0x118>)
 800b910:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b912:	4b3f      	ldr	r3, [pc, #252]	; (800ba10 <LSM303AGR_ACC_0_Probe+0x11c>)
 800b914:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b916:	4b3f      	ldr	r3, [pc, #252]	; (800ba14 <LSM303AGR_ACC_0_Probe+0x120>)
 800b918:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b91a:	4b3f      	ldr	r3, [pc, #252]	; (800ba18 <LSM303AGR_ACC_0_Probe+0x124>)
 800b91c:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800b91e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b922:	4619      	mov	r1, r3
 800b924:	483d      	ldr	r0, [pc, #244]	; (800ba1c <LSM303AGR_ACC_0_Probe+0x128>)
 800b926:	f7fc fc17 	bl	8008158 <LSM303AGR_ACC_RegisterBusIO>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d003      	beq.n	800b938 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b930:	f06f 0306 	mvn.w	r3, #6
 800b934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b936:	e062      	b.n	800b9fe <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800b938:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b93c:	4619      	mov	r1, r3
 800b93e:	4837      	ldr	r0, [pc, #220]	; (800ba1c <LSM303AGR_ACC_0_Probe+0x128>)
 800b940:	f7fc fccf 	bl	80082e2 <LSM303AGR_ACC_ReadID>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b94a:	f06f 0306 	mvn.w	r3, #6
 800b94e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b950:	e055      	b.n	800b9fe <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800b952:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b956:	2b33      	cmp	r3, #51	; 0x33
 800b958:	d003      	beq.n	800b962 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b95a:	f06f 0306 	mvn.w	r3, #6
 800b95e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b960:	e04d      	b.n	800b9fe <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	4619      	mov	r1, r3
 800b968:	482c      	ldr	r0, [pc, #176]	; (800ba1c <LSM303AGR_ACC_0_Probe+0x128>)
 800b96a:	f7fc fcd1 	bl	8008310 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b96e:	7b7b      	ldrb	r3, [r7, #13]
 800b970:	461a      	mov	r2, r3
 800b972:	7b3b      	ldrb	r3, [r7, #12]
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b97c:	4313      	orrs	r3, r2
 800b97e:	4a28      	ldr	r2, [pc, #160]	; (800ba20 <LSM303AGR_ACC_0_Probe+0x12c>)
 800b980:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800b982:	4b28      	ldr	r3, [pc, #160]	; (800ba24 <LSM303AGR_ACC_0_Probe+0x130>)
 800b984:	4a25      	ldr	r2, [pc, #148]	; (800ba1c <LSM303AGR_ACC_0_Probe+0x128>)
 800b986:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800b988:	4b27      	ldr	r3, [pc, #156]	; (800ba28 <LSM303AGR_ACC_0_Probe+0x134>)
 800b98a:	4a28      	ldr	r2, [pc, #160]	; (800ba2c <LSM303AGR_ACC_0_Probe+0x138>)
 800b98c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11e      	bne.n	800b9d2 <LSM303AGR_ACC_0_Probe+0xde>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f003 0302 	and.w	r3, r3, #2
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d019      	beq.n	800b9d2 <LSM303AGR_ACC_0_Probe+0xde>
 800b99e:	7b3b      	ldrb	r3, [r7, #12]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d116      	bne.n	800b9d2 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b9a4:	4b22      	ldr	r3, [pc, #136]	; (800ba30 <LSM303AGR_ACC_0_Probe+0x13c>)
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	4a22      	ldr	r2, [pc, #136]	; (800ba34 <LSM303AGR_ACC_0_Probe+0x140>)
 800b9aa:	3303      	adds	r3, #3
 800b9ac:	4922      	ldr	r1, [pc, #136]	; (800ba38 <LSM303AGR_ACC_0_Probe+0x144>)
 800b9ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800b9b2:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <LSM303AGR_ACC_0_Probe+0x134>)
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a1a      	ldr	r2, [pc, #104]	; (800ba24 <LSM303AGR_ACC_0_Probe+0x130>)
 800b9ba:	6852      	ldr	r2, [r2, #4]
 800b9bc:	4610      	mov	r0, r2
 800b9be:	4798      	blx	r3
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9c6:	f06f 0304 	mvn.w	r3, #4
 800b9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9cc:	e001      	b.n	800b9d2 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d107      	bne.n	800b9e8 <LSM303AGR_ACC_0_Probe+0xf4>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d002      	beq.n	800b9e8 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9e2:	f06f 0304 	mvn.w	r3, #4
 800b9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d107      	bne.n	800b9fe <LSM303AGR_ACC_0_Probe+0x10a>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9f8:	f06f 0304 	mvn.w	r3, #4
 800b9fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800b9fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3750      	adds	r7, #80	; 0x50
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	0800645d 	.word	0x0800645d
 800ba0c:	080064d9 	.word	0x080064d9
 800ba10:	0800658d 	.word	0x0800658d
 800ba14:	08006529 	.word	0x08006529
 800ba18:	080065f1 	.word	0x080065f1
 800ba1c:	20001b24 	.word	0x20001b24
 800ba20:	20001ae0 	.word	0x20001ae0
 800ba24:	20001aa4 	.word	0x20001aa4
 800ba28:	20001ad4 	.word	0x20001ad4
 800ba2c:	200000cc 	.word	0x200000cc
 800ba30:	200001a0 	.word	0x200001a0
 800ba34:	20001ab0 	.word	0x20001ab0
 800ba38:	200000dc 	.word	0x200000dc

0800ba3c <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b094      	sub	sp, #80	; 0x50
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800ba44:	2300      	movs	r3, #0
 800ba46:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800ba48:	2300      	movs	r3, #0
 800ba4a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800ba4c:	233d      	movs	r3, #61	; 0x3d
 800ba4e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800ba52:	4b3f      	ldr	r3, [pc, #252]	; (800bb50 <LSM303AGR_MAG_0_Probe+0x114>)
 800ba54:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800ba56:	4b3f      	ldr	r3, [pc, #252]	; (800bb54 <LSM303AGR_MAG_0_Probe+0x118>)
 800ba58:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800ba5a:	4b3f      	ldr	r3, [pc, #252]	; (800bb58 <LSM303AGR_MAG_0_Probe+0x11c>)
 800ba5c:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800ba5e:	4b3f      	ldr	r3, [pc, #252]	; (800bb5c <LSM303AGR_MAG_0_Probe+0x120>)
 800ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800ba62:	4b3f      	ldr	r3, [pc, #252]	; (800bb60 <LSM303AGR_MAG_0_Probe+0x124>)
 800ba64:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800ba66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	483d      	ldr	r0, [pc, #244]	; (800bb64 <LSM303AGR_MAG_0_Probe+0x128>)
 800ba6e:	f7fc ff3d 	bl	80088ec <LSM303AGR_MAG_RegisterBusIO>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d003      	beq.n	800ba80 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba78:	f06f 0306 	mvn.w	r3, #6
 800ba7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba7e:	e062      	b.n	800bb46 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800ba80:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ba84:	4619      	mov	r1, r3
 800ba86:	4837      	ldr	r0, [pc, #220]	; (800bb64 <LSM303AGR_MAG_0_Probe+0x128>)
 800ba88:	f7fc ffe7 	bl	8008a5a <LSM303AGR_MAG_ReadID>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba92:	f06f 0306 	mvn.w	r3, #6
 800ba96:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba98:	e055      	b.n	800bb46 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800ba9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba9e:	2b40      	cmp	r3, #64	; 0x40
 800baa0:	d003      	beq.n	800baaa <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800baa2:	f06f 0306 	mvn.w	r3, #6
 800baa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baa8:	e04d      	b.n	800bb46 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800baaa:	f107 030c 	add.w	r3, r7, #12
 800baae:	4619      	mov	r1, r3
 800bab0:	482c      	ldr	r0, [pc, #176]	; (800bb64 <LSM303AGR_MAG_0_Probe+0x128>)
 800bab2:	f7fc ffe9 	bl	8008a88 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800bab6:	7b7b      	ldrb	r3, [r7, #13]
 800bab8:	461a      	mov	r2, r3
 800baba:	7b3b      	ldrb	r3, [r7, #12]
 800babc:	005b      	lsls	r3, r3, #1
 800babe:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800bac4:	4313      	orrs	r3, r2
 800bac6:	4a28      	ldr	r2, [pc, #160]	; (800bb68 <LSM303AGR_MAG_0_Probe+0x12c>)
 800bac8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800baca:	4b28      	ldr	r3, [pc, #160]	; (800bb6c <LSM303AGR_MAG_0_Probe+0x130>)
 800bacc:	4a25      	ldr	r2, [pc, #148]	; (800bb64 <LSM303AGR_MAG_0_Probe+0x128>)
 800bace:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <LSM303AGR_MAG_0_Probe+0x134>)
 800bad2:	4a28      	ldr	r2, [pc, #160]	; (800bb74 <LSM303AGR_MAG_0_Probe+0x138>)
 800bad4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d11e      	bne.n	800bb1a <LSM303AGR_MAG_0_Probe+0xde>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d019      	beq.n	800bb1a <LSM303AGR_MAG_0_Probe+0xde>
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d116      	bne.n	800bb1a <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800baec:	4b22      	ldr	r3, [pc, #136]	; (800bb78 <LSM303AGR_MAG_0_Probe+0x13c>)
 800baee:	691b      	ldr	r3, [r3, #16]
 800baf0:	4a22      	ldr	r2, [pc, #136]	; (800bb7c <LSM303AGR_MAG_0_Probe+0x140>)
 800baf2:	3306      	adds	r3, #6
 800baf4:	4922      	ldr	r1, [pc, #136]	; (800bb80 <LSM303AGR_MAG_0_Probe+0x144>)
 800baf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800bafa:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <LSM303AGR_MAG_0_Probe+0x134>)
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a1a      	ldr	r2, [pc, #104]	; (800bb6c <LSM303AGR_MAG_0_Probe+0x130>)
 800bb02:	6892      	ldr	r2, [r2, #8]
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb0e:	f06f 0304 	mvn.w	r3, #4
 800bb12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb14:	e001      	b.n	800bb1a <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb16:	2300      	movs	r3, #0
 800bb18:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800bb1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d107      	bne.n	800bb30 <LSM303AGR_MAG_0_Probe+0xf4>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f003 0302 	and.w	r3, r3, #2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb2a:	f06f 0304 	mvn.w	r3, #4
 800bb2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bb30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d107      	bne.n	800bb46 <LSM303AGR_MAG_0_Probe+0x10a>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb40:	f06f 0304 	mvn.w	r3, #4
 800bb44:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800bb46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3750      	adds	r7, #80	; 0x50
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	0800645d 	.word	0x0800645d
 800bb54:	080064d9 	.word	0x080064d9
 800bb58:	0800658d 	.word	0x0800658d
 800bb5c:	08006529 	.word	0x08006529
 800bb60:	080065f1 	.word	0x080065f1
 800bb64:	20001b58 	.word	0x20001b58
 800bb68:	20001ae0 	.word	0x20001ae0
 800bb6c:	20001aa4 	.word	0x20001aa4
 800bb70:	20001ad4 	.word	0x20001ad4
 800bb74:	20000100 	.word	0x20000100
 800bb78:	200001a0 	.word	0x200001a0
 800bb7c:	20001ab0 	.word	0x20001ab0
 800bb80:	20000110 	.word	0x20000110

0800bb84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb88:	2003      	movs	r0, #3
 800bb8a:	f000 f8fa 	bl	800bd82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bb8e:	200f      	movs	r0, #15
 800bb90:	f7fa fbd4 	bl	800633c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bb94:	f7fa fad0 	bl	8006138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bba0:	b480      	push	{r7}
 800bba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <HAL_IncTick+0x20>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <HAL_IncTick+0x24>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4413      	add	r3, r2
 800bbb0:	4a04      	ldr	r2, [pc, #16]	; (800bbc4 <HAL_IncTick+0x24>)
 800bbb2:	6013      	str	r3, [r2, #0]
}
 800bbb4:	bf00      	nop
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	200001b8 	.word	0x200001b8
 800bbc4:	20001b8c 	.word	0x20001b8c

0800bbc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	af00      	add	r7, sp, #0
  return uwTick;
 800bbcc:	4b03      	ldr	r3, [pc, #12]	; (800bbdc <HAL_GetTick+0x14>)
 800bbce:	681b      	ldr	r3, [r3, #0]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20001b8c 	.word	0x20001b8c

0800bbe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bbe8:	f7ff ffee 	bl	800bbc8 <HAL_GetTick>
 800bbec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf8:	d005      	beq.n	800bc06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bbfa:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <HAL_Delay+0x44>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4413      	add	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bc06:	bf00      	nop
 800bc08:	f7ff ffde 	bl	800bbc8 <HAL_GetTick>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d8f7      	bhi.n	800bc08 <HAL_Delay+0x28>
  {
  }
}
 800bc18:	bf00      	nop
 800bc1a:	bf00      	nop
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	200001b8 	.word	0x200001b8

0800bc28 <__NVIC_SetPriorityGrouping>:
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <__NVIC_SetPriorityGrouping+0x40>)
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bc44:	4013      	ands	r3, r2
 800bc46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <__NVIC_SetPriorityGrouping+0x44>)
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc56:	4a04      	ldr	r2, [pc, #16]	; (800bc68 <__NVIC_SetPriorityGrouping+0x40>)
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	60d3      	str	r3, [r2, #12]
}
 800bc5c:	bf00      	nop
 800bc5e:	3714      	adds	r7, #20
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr
 800bc68:	e000ed00 	.word	0xe000ed00
 800bc6c:	05fa0000 	.word	0x05fa0000

0800bc70 <__NVIC_GetPriorityGrouping>:
{
 800bc70:	b480      	push	{r7}
 800bc72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc74:	4b04      	ldr	r3, [pc, #16]	; (800bc88 <__NVIC_GetPriorityGrouping+0x18>)
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	0a1b      	lsrs	r3, r3, #8
 800bc7a:	f003 0307 	and.w	r3, r3, #7
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	e000ed00 	.word	0xe000ed00

0800bc8c <__NVIC_EnableIRQ>:
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	db0b      	blt.n	800bcb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	f003 021f 	and.w	r2, r3, #31
 800bca4:	4907      	ldr	r1, [pc, #28]	; (800bcc4 <__NVIC_EnableIRQ+0x38>)
 800bca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcaa:	095b      	lsrs	r3, r3, #5
 800bcac:	2001      	movs	r0, #1
 800bcae:	fa00 f202 	lsl.w	r2, r0, r2
 800bcb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bcb6:	bf00      	nop
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	e000e100 	.word	0xe000e100

0800bcc8 <__NVIC_SetPriority>:
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	4603      	mov	r3, r0
 800bcd0:	6039      	str	r1, [r7, #0]
 800bcd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	db0a      	blt.n	800bcf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	490c      	ldr	r1, [pc, #48]	; (800bd14 <__NVIC_SetPriority+0x4c>)
 800bce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce6:	0112      	lsls	r2, r2, #4
 800bce8:	b2d2      	uxtb	r2, r2
 800bcea:	440b      	add	r3, r1
 800bcec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcf0:	e00a      	b.n	800bd08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4908      	ldr	r1, [pc, #32]	; (800bd18 <__NVIC_SetPriority+0x50>)
 800bcf8:	79fb      	ldrb	r3, [r7, #7]
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	3b04      	subs	r3, #4
 800bd00:	0112      	lsls	r2, r2, #4
 800bd02:	b2d2      	uxtb	r2, r2
 800bd04:	440b      	add	r3, r1
 800bd06:	761a      	strb	r2, [r3, #24]
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr
 800bd14:	e000e100 	.word	0xe000e100
 800bd18:	e000ed00 	.word	0xe000ed00

0800bd1c <NVIC_EncodePriority>:
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b089      	sub	sp, #36	; 0x24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	f1c3 0307 	rsb	r3, r3, #7
 800bd36:	2b04      	cmp	r3, #4
 800bd38:	bf28      	it	cs
 800bd3a:	2304      	movcs	r3, #4
 800bd3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	3304      	adds	r3, #4
 800bd42:	2b06      	cmp	r3, #6
 800bd44:	d902      	bls.n	800bd4c <NVIC_EncodePriority+0x30>
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	3b03      	subs	r3, #3
 800bd4a:	e000      	b.n	800bd4e <NVIC_EncodePriority+0x32>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd50:	f04f 32ff 	mov.w	r2, #4294967295
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5a:	43da      	mvns	r2, r3
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	401a      	ands	r2, r3
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd64:	f04f 31ff 	mov.w	r1, #4294967295
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6e:	43d9      	mvns	r1, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd74:	4313      	orrs	r3, r2
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3724      	adds	r7, #36	; 0x24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd82:	b580      	push	{r7, lr}
 800bd84:	b082      	sub	sp, #8
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f7ff ff4c 	bl	800bc28 <__NVIC_SetPriorityGrouping>
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bdaa:	f7ff ff61 	bl	800bc70 <__NVIC_GetPriorityGrouping>
 800bdae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	6978      	ldr	r0, [r7, #20]
 800bdb6:	f7ff ffb1 	bl	800bd1c <NVIC_EncodePriority>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7ff ff80 	bl	800bcc8 <__NVIC_SetPriority>
}
 800bdc8:	bf00      	nop
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff ff54 	bl	800bc8c <__NVIC_EnableIRQ>
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b089      	sub	sp, #36	; 0x24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bdfe:	2300      	movs	r3, #0
 800be00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800be02:	2300      	movs	r3, #0
 800be04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800be06:	2300      	movs	r3, #0
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	e175      	b.n	800c0f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800be0c:	2201      	movs	r2, #1
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4013      	ands	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	429a      	cmp	r2, r3
 800be26:	f040 8164 	bne.w	800c0f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	2b01      	cmp	r3, #1
 800be34:	d005      	beq.n	800be42 <HAL_GPIO_Init+0x56>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	f003 0303 	and.w	r3, r3, #3
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d130      	bne.n	800bea4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	2203      	movs	r2, #3
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	43db      	mvns	r3, r3
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	4013      	ands	r3, r2
 800be58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	fa02 f303 	lsl.w	r3, r2, r3
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	4313      	orrs	r3, r2
 800be6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	69ba      	ldr	r2, [r7, #24]
 800be70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800be78:	2201      	movs	r2, #1
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	fa02 f303 	lsl.w	r3, r2, r3
 800be80:	43db      	mvns	r3, r3
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	4013      	ands	r3, r2
 800be86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	091b      	lsrs	r3, r3, #4
 800be8e:	f003 0201 	and.w	r2, r3, #1
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	fa02 f303 	lsl.w	r3, r2, r3
 800be98:	69ba      	ldr	r2, [r7, #24]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	2b03      	cmp	r3, #3
 800beae:	d017      	beq.n	800bee0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	2203      	movs	r2, #3
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	43db      	mvns	r3, r3
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	4013      	ands	r3, r2
 800bec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	fa02 f303 	lsl.w	r3, r2, r3
 800bed4:	69ba      	ldr	r2, [r7, #24]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	69ba      	ldr	r2, [r7, #24]
 800bede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f003 0303 	and.w	r3, r3, #3
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d123      	bne.n	800bf34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	08da      	lsrs	r2, r3, #3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3208      	adds	r2, #8
 800bef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	f003 0307 	and.w	r3, r3, #7
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	220f      	movs	r2, #15
 800bf04:	fa02 f303 	lsl.w	r3, r2, r3
 800bf08:	43db      	mvns	r3, r3
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	691a      	ldr	r2, [r3, #16]
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf20:	69ba      	ldr	r2, [r7, #24]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	08da      	lsrs	r2, r3, #3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	3208      	adds	r2, #8
 800bf2e:	69b9      	ldr	r1, [r7, #24]
 800bf30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	2203      	movs	r2, #3
 800bf40:	fa02 f303 	lsl.w	r3, r2, r3
 800bf44:	43db      	mvns	r3, r3
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	4013      	ands	r3, r2
 800bf4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	f003 0203 	and.w	r2, r3, #3
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	fa02 f303 	lsl.w	r3, r2, r3
 800bf5c:	69ba      	ldr	r2, [r7, #24]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	69ba      	ldr	r2, [r7, #24]
 800bf66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80be 	beq.w	800c0f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf76:	4b66      	ldr	r3, [pc, #408]	; (800c110 <HAL_GPIO_Init+0x324>)
 800bf78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7a:	4a65      	ldr	r2, [pc, #404]	; (800c110 <HAL_GPIO_Init+0x324>)
 800bf7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf80:	6453      	str	r3, [r2, #68]	; 0x44
 800bf82:	4b63      	ldr	r3, [pc, #396]	; (800c110 <HAL_GPIO_Init+0x324>)
 800bf84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800bf8e:	4a61      	ldr	r2, [pc, #388]	; (800c114 <HAL_GPIO_Init+0x328>)
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	089b      	lsrs	r3, r3, #2
 800bf94:	3302      	adds	r3, #2
 800bf96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	f003 0303 	and.w	r3, r3, #3
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	220f      	movs	r2, #15
 800bfa6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfaa:	43db      	mvns	r3, r3
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	4013      	ands	r3, r2
 800bfb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a58      	ldr	r2, [pc, #352]	; (800c118 <HAL_GPIO_Init+0x32c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d037      	beq.n	800c02a <HAL_GPIO_Init+0x23e>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a57      	ldr	r2, [pc, #348]	; (800c11c <HAL_GPIO_Init+0x330>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d031      	beq.n	800c026 <HAL_GPIO_Init+0x23a>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a56      	ldr	r2, [pc, #344]	; (800c120 <HAL_GPIO_Init+0x334>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d02b      	beq.n	800c022 <HAL_GPIO_Init+0x236>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a55      	ldr	r2, [pc, #340]	; (800c124 <HAL_GPIO_Init+0x338>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d025      	beq.n	800c01e <HAL_GPIO_Init+0x232>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a54      	ldr	r2, [pc, #336]	; (800c128 <HAL_GPIO_Init+0x33c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d01f      	beq.n	800c01a <HAL_GPIO_Init+0x22e>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a53      	ldr	r2, [pc, #332]	; (800c12c <HAL_GPIO_Init+0x340>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d019      	beq.n	800c016 <HAL_GPIO_Init+0x22a>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a52      	ldr	r2, [pc, #328]	; (800c130 <HAL_GPIO_Init+0x344>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d013      	beq.n	800c012 <HAL_GPIO_Init+0x226>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a51      	ldr	r2, [pc, #324]	; (800c134 <HAL_GPIO_Init+0x348>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00d      	beq.n	800c00e <HAL_GPIO_Init+0x222>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a50      	ldr	r2, [pc, #320]	; (800c138 <HAL_GPIO_Init+0x34c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <HAL_GPIO_Init+0x21e>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a4f      	ldr	r2, [pc, #316]	; (800c13c <HAL_GPIO_Init+0x350>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d101      	bne.n	800c006 <HAL_GPIO_Init+0x21a>
 800c002:	2309      	movs	r3, #9
 800c004:	e012      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c006:	230a      	movs	r3, #10
 800c008:	e010      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c00a:	2308      	movs	r3, #8
 800c00c:	e00e      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c00e:	2307      	movs	r3, #7
 800c010:	e00c      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c012:	2306      	movs	r3, #6
 800c014:	e00a      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c016:	2305      	movs	r3, #5
 800c018:	e008      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c01a:	2304      	movs	r3, #4
 800c01c:	e006      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c01e:	2303      	movs	r3, #3
 800c020:	e004      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c022:	2302      	movs	r3, #2
 800c024:	e002      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c026:	2301      	movs	r3, #1
 800c028:	e000      	b.n	800c02c <HAL_GPIO_Init+0x240>
 800c02a:	2300      	movs	r3, #0
 800c02c:	69fa      	ldr	r2, [r7, #28]
 800c02e:	f002 0203 	and.w	r2, r2, #3
 800c032:	0092      	lsls	r2, r2, #2
 800c034:	4093      	lsls	r3, r2
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	4313      	orrs	r3, r2
 800c03a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c03c:	4935      	ldr	r1, [pc, #212]	; (800c114 <HAL_GPIO_Init+0x328>)
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	089b      	lsrs	r3, r3, #2
 800c042:	3302      	adds	r3, #2
 800c044:	69ba      	ldr	r2, [r7, #24]
 800c046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c04a:	4b3d      	ldr	r3, [pc, #244]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	43db      	mvns	r3, r3
 800c054:	69ba      	ldr	r2, [r7, #24]
 800c056:	4013      	ands	r3, r2
 800c058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c06e:	4a34      	ldr	r2, [pc, #208]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c074:	4b32      	ldr	r3, [pc, #200]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	43db      	mvns	r3, r3
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	4013      	ands	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	4313      	orrs	r3, r2
 800c096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c098:	4a29      	ldr	r2, [pc, #164]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c09e:	4b28      	ldr	r3, [pc, #160]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	43db      	mvns	r3, r3
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c0ba:	69ba      	ldr	r2, [r7, #24]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c0c2:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	43db      	mvns	r3, r3
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d003      	beq.n	800c0ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c0ec:	4a14      	ldr	r2, [pc, #80]	; (800c140 <HAL_GPIO_Init+0x354>)
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	61fb      	str	r3, [r7, #28]
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	2b0f      	cmp	r3, #15
 800c0fc:	f67f ae86 	bls.w	800be0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	3724      	adds	r7, #36	; 0x24
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	40023800 	.word	0x40023800
 800c114:	40013800 	.word	0x40013800
 800c118:	40020000 	.word	0x40020000
 800c11c:	40020400 	.word	0x40020400
 800c120:	40020800 	.word	0x40020800
 800c124:	40020c00 	.word	0x40020c00
 800c128:	40021000 	.word	0x40021000
 800c12c:	40021400 	.word	0x40021400
 800c130:	40021800 	.word	0x40021800
 800c134:	40021c00 	.word	0x40021c00
 800c138:	40022000 	.word	0x40022000
 800c13c:	40022400 	.word	0x40022400
 800c140:	40013c00 	.word	0x40013c00

0800c144 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c144:	b480      	push	{r7}
 800c146:	b087      	sub	sp, #28
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800c14e:	2300      	movs	r3, #0
 800c150:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800c156:	2300      	movs	r3, #0
 800c158:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
 800c15e:	e0d9      	b.n	800c314 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800c160:	2201      	movs	r2, #1
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	fa02 f303 	lsl.w	r3, r2, r3
 800c168:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	4013      	ands	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	429a      	cmp	r2, r3
 800c178:	f040 80c9 	bne.w	800c30e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800c17c:	4a6b      	ldr	r2, [pc, #428]	; (800c32c <HAL_GPIO_DeInit+0x1e8>)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	089b      	lsrs	r3, r3, #2
 800c182:	3302      	adds	r3, #2
 800c184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c188:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f003 0303 	and.w	r3, r3, #3
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	220f      	movs	r2, #15
 800c194:	fa02 f303 	lsl.w	r3, r2, r3
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	4013      	ands	r3, r2
 800c19c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a63      	ldr	r2, [pc, #396]	; (800c330 <HAL_GPIO_DeInit+0x1ec>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d037      	beq.n	800c216 <HAL_GPIO_DeInit+0xd2>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a62      	ldr	r2, [pc, #392]	; (800c334 <HAL_GPIO_DeInit+0x1f0>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d031      	beq.n	800c212 <HAL_GPIO_DeInit+0xce>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a61      	ldr	r2, [pc, #388]	; (800c338 <HAL_GPIO_DeInit+0x1f4>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d02b      	beq.n	800c20e <HAL_GPIO_DeInit+0xca>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a60      	ldr	r2, [pc, #384]	; (800c33c <HAL_GPIO_DeInit+0x1f8>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d025      	beq.n	800c20a <HAL_GPIO_DeInit+0xc6>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a5f      	ldr	r2, [pc, #380]	; (800c340 <HAL_GPIO_DeInit+0x1fc>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d01f      	beq.n	800c206 <HAL_GPIO_DeInit+0xc2>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a5e      	ldr	r2, [pc, #376]	; (800c344 <HAL_GPIO_DeInit+0x200>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d019      	beq.n	800c202 <HAL_GPIO_DeInit+0xbe>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a5d      	ldr	r2, [pc, #372]	; (800c348 <HAL_GPIO_DeInit+0x204>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d013      	beq.n	800c1fe <HAL_GPIO_DeInit+0xba>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a5c      	ldr	r2, [pc, #368]	; (800c34c <HAL_GPIO_DeInit+0x208>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00d      	beq.n	800c1fa <HAL_GPIO_DeInit+0xb6>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a5b      	ldr	r2, [pc, #364]	; (800c350 <HAL_GPIO_DeInit+0x20c>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d007      	beq.n	800c1f6 <HAL_GPIO_DeInit+0xb2>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a5a      	ldr	r2, [pc, #360]	; (800c354 <HAL_GPIO_DeInit+0x210>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d101      	bne.n	800c1f2 <HAL_GPIO_DeInit+0xae>
 800c1ee:	2309      	movs	r3, #9
 800c1f0:	e012      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c1f2:	230a      	movs	r3, #10
 800c1f4:	e010      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c1f6:	2308      	movs	r3, #8
 800c1f8:	e00e      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c1fa:	2307      	movs	r3, #7
 800c1fc:	e00c      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c1fe:	2306      	movs	r3, #6
 800c200:	e00a      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c202:	2305      	movs	r3, #5
 800c204:	e008      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c206:	2304      	movs	r3, #4
 800c208:	e006      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c20a:	2303      	movs	r3, #3
 800c20c:	e004      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c20e:	2302      	movs	r3, #2
 800c210:	e002      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <HAL_GPIO_DeInit+0xd4>
 800c216:	2300      	movs	r3, #0
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	f002 0203 	and.w	r2, r2, #3
 800c21e:	0092      	lsls	r2, r2, #2
 800c220:	4093      	lsls	r3, r2
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	429a      	cmp	r2, r3
 800c226:	d132      	bne.n	800c28e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c228:	4b4b      	ldr	r3, [pc, #300]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	43db      	mvns	r3, r3
 800c230:	4949      	ldr	r1, [pc, #292]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c232:	4013      	ands	r3, r2
 800c234:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c236:	4b48      	ldr	r3, [pc, #288]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	43db      	mvns	r3, r3
 800c23e:	4946      	ldr	r1, [pc, #280]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c240:	4013      	ands	r3, r2
 800c242:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c244:	4b44      	ldr	r3, [pc, #272]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c246:	68da      	ldr	r2, [r3, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	43db      	mvns	r3, r3
 800c24c:	4942      	ldr	r1, [pc, #264]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c24e:	4013      	ands	r3, r2
 800c250:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c252:	4b41      	ldr	r3, [pc, #260]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	43db      	mvns	r3, r3
 800c25a:	493f      	ldr	r1, [pc, #252]	; (800c358 <HAL_GPIO_DeInit+0x214>)
 800c25c:	4013      	ands	r3, r2
 800c25e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f003 0303 	and.w	r3, r3, #3
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	220f      	movs	r2, #15
 800c26a:	fa02 f303 	lsl.w	r3, r2, r3
 800c26e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800c270:	4a2e      	ldr	r2, [pc, #184]	; (800c32c <HAL_GPIO_DeInit+0x1e8>)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	089b      	lsrs	r3, r3, #2
 800c276:	3302      	adds	r3, #2
 800c278:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	43da      	mvns	r2, r3
 800c280:	482a      	ldr	r0, [pc, #168]	; (800c32c <HAL_GPIO_DeInit+0x1e8>)
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	089b      	lsrs	r3, r3, #2
 800c286:	400a      	ands	r2, r1
 800c288:	3302      	adds	r3, #2
 800c28a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	2103      	movs	r1, #3
 800c298:	fa01 f303 	lsl.w	r3, r1, r3
 800c29c:	43db      	mvns	r3, r3
 800c29e:	401a      	ands	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	08da      	lsrs	r2, r3, #3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3208      	adds	r2, #8
 800c2ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f003 0307 	and.w	r3, r3, #7
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	220f      	movs	r2, #15
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	43db      	mvns	r3, r3
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	08d2      	lsrs	r2, r2, #3
 800c2c4:	4019      	ands	r1, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	3208      	adds	r2, #8
 800c2ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68da      	ldr	r2, [r3, #12]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	2103      	movs	r1, #3
 800c2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2dc:	43db      	mvns	r3, r3
 800c2de:	401a      	ands	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f0:	43db      	mvns	r3, r3
 800c2f2:	401a      	ands	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	2103      	movs	r1, #3
 800c302:	fa01 f303 	lsl.w	r3, r1, r3
 800c306:	43db      	mvns	r3, r3
 800c308:	401a      	ands	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	3301      	adds	r3, #1
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2b0f      	cmp	r3, #15
 800c318:	f67f af22 	bls.w	800c160 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c31c:	bf00      	nop
 800c31e:	bf00      	nop
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	40013800 	.word	0x40013800
 800c330:	40020000 	.word	0x40020000
 800c334:	40020400 	.word	0x40020400
 800c338:	40020800 	.word	0x40020800
 800c33c:	40020c00 	.word	0x40020c00
 800c340:	40021000 	.word	0x40021000
 800c344:	40021400 	.word	0x40021400
 800c348:	40021800 	.word	0x40021800
 800c34c:	40021c00 	.word	0x40021c00
 800c350:	40022000 	.word	0x40022000
 800c354:	40022400 	.word	0x40022400
 800c358:	40013c00 	.word	0x40013c00

0800c35c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	807b      	strh	r3, [r7, #2]
 800c368:	4613      	mov	r3, r2
 800c36a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c36c:	787b      	ldrb	r3, [r7, #1]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d003      	beq.n	800c37a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c372:	887a      	ldrh	r2, [r7, #2]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c378:	e003      	b.n	800c382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c37a:	887b      	ldrh	r3, [r7, #2]
 800c37c:	041a      	lsls	r2, r3, #16
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	619a      	str	r2, [r3, #24]
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
	...

0800c390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d101      	bne.n	800c3a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	e07f      	b.n	800c4a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f8a9 	bl	800c50e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2224      	movs	r2, #36	; 0x24
 800c3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0201 	bic.w	r2, r2, #1
 800c3d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c3e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c3f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d107      	bne.n	800c40a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c406:	609a      	str	r2, [r3, #8]
 800c408:	e006      	b.n	800c418 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	689a      	ldr	r2, [r3, #8]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c416:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d104      	bne.n	800c42a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c428:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	6859      	ldr	r1, [r3, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	4b1d      	ldr	r3, [pc, #116]	; (800c4ac <HAL_I2C_Init+0x11c>)
 800c436:	430b      	orrs	r3, r1
 800c438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68da      	ldr	r2, [r3, #12]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	691a      	ldr	r2, [r3, #16]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	430a      	orrs	r2, r1
 800c462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	69d9      	ldr	r1, [r3, #28]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a1a      	ldr	r2, [r3, #32]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	430a      	orrs	r2, r1
 800c472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f042 0201 	orr.w	r2, r2, #1
 800c482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	02008000 	.word	0x02008000

0800c4b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e021      	b.n	800c506 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2224      	movs	r2, #36	; 0x24
 800c4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f022 0201 	bic.w	r2, r2, #1
 800c4d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f821 	bl	800c522 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c516:	bf00      	nop
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c522:	b480      	push	{r7}
 800c524:	b083      	sub	sp, #12
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c52a:	bf00      	nop
 800c52c:	370c      	adds	r7, #12
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
	...

0800c538 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b088      	sub	sp, #32
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	4608      	mov	r0, r1
 800c542:	4611      	mov	r1, r2
 800c544:	461a      	mov	r2, r3
 800c546:	4603      	mov	r3, r0
 800c548:	817b      	strh	r3, [r7, #10]
 800c54a:	460b      	mov	r3, r1
 800c54c:	813b      	strh	r3, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	2b20      	cmp	r3, #32
 800c55c:	f040 80f9 	bne.w	800c752 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c560:	6a3b      	ldr	r3, [r7, #32]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d002      	beq.n	800c56c <HAL_I2C_Mem_Write+0x34>
 800c566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d105      	bne.n	800c578 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	e0ed      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <HAL_I2C_Mem_Write+0x4e>
 800c582:	2302      	movs	r3, #2
 800c584:	e0e6      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c58e:	f7ff fb1b 	bl	800bbc8 <HAL_GetTick>
 800c592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	2319      	movs	r3, #25
 800c59a:	2201      	movs	r2, #1
 800c59c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f000 fadd 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e0d1      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2221      	movs	r2, #33	; 0x21
 800c5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2240      	movs	r2, #64	; 0x40
 800c5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a3a      	ldr	r2, [r7, #32]
 800c5ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c5d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c5d8:	88f8      	ldrh	r0, [r7, #6]
 800c5da:	893a      	ldrh	r2, [r7, #8]
 800c5dc:	8979      	ldrh	r1, [r7, #10]
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 f9ed 	bl	800c9c8 <I2C_RequestMemoryWrite>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d005      	beq.n	800c600 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	e0a9      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c604:	b29b      	uxth	r3, r3
 800c606:	2bff      	cmp	r3, #255	; 0xff
 800c608:	d90e      	bls.n	800c628 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	22ff      	movs	r2, #255	; 0xff
 800c60e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c614:	b2da      	uxtb	r2, r3
 800c616:	8979      	ldrh	r1, [r7, #10]
 800c618:	2300      	movs	r3, #0
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 fc39 	bl	800ce98 <I2C_TransferConfig>
 800c626:	e00f      	b.n	800c648 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c636:	b2da      	uxtb	r2, r3
 800c638:	8979      	ldrh	r1, [r7, #10]
 800c63a:	2300      	movs	r3, #0
 800c63c:	9300      	str	r3, [sp, #0]
 800c63e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f000 fc28 	bl	800ce98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c648:	697a      	ldr	r2, [r7, #20]
 800c64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f000 fac7 	bl	800cbe0 <I2C_WaitOnTXISFlagUntilTimeout>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	e07b      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c660:	781a      	ldrb	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c676:	b29b      	uxth	r3, r3
 800c678:	3b01      	subs	r3, #1
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c684:	3b01      	subs	r3, #1
 800c686:	b29a      	uxth	r2, r3
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c690:	b29b      	uxth	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d034      	beq.n	800c700 <HAL_I2C_Mem_Write+0x1c8>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d130      	bne.n	800c700 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	9300      	str	r3, [sp, #0]
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2180      	movs	r1, #128	; 0x80
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f000 fa59 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e04d      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2bff      	cmp	r3, #255	; 0xff
 800c6c0:	d90e      	bls.n	800c6e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	22ff      	movs	r2, #255	; 0xff
 800c6c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6cc:	b2da      	uxtb	r2, r3
 800c6ce:	8979      	ldrh	r1, [r7, #10]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f000 fbdd 	bl	800ce98 <I2C_TransferConfig>
 800c6de:	e00f      	b.n	800c700 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	8979      	ldrh	r1, [r7, #10]
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f000 fbcc 	bl	800ce98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c704:	b29b      	uxth	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d19e      	bne.n	800c648 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c70e:	68f8      	ldr	r0, [r7, #12]
 800c710:	f000 faa6 	bl	800cc60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e01a      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2220      	movs	r2, #32
 800c724:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	6859      	ldr	r1, [r3, #4]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	4b0a      	ldr	r3, [pc, #40]	; (800c75c <HAL_I2C_Mem_Write+0x224>)
 800c732:	400b      	ands	r3, r1
 800c734:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2220      	movs	r2, #32
 800c73a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	e000      	b.n	800c754 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c752:	2302      	movs	r3, #2
  }
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	fe00e800 	.word	0xfe00e800

0800c760 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b088      	sub	sp, #32
 800c764:	af02      	add	r7, sp, #8
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	4608      	mov	r0, r1
 800c76a:	4611      	mov	r1, r2
 800c76c:	461a      	mov	r2, r3
 800c76e:	4603      	mov	r3, r0
 800c770:	817b      	strh	r3, [r7, #10]
 800c772:	460b      	mov	r3, r1
 800c774:	813b      	strh	r3, [r7, #8]
 800c776:	4613      	mov	r3, r2
 800c778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b20      	cmp	r3, #32
 800c784:	f040 80fd 	bne.w	800c982 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d002      	beq.n	800c794 <HAL_I2C_Mem_Read+0x34>
 800c78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c790:	2b00      	cmp	r3, #0
 800c792:	d105      	bne.n	800c7a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c79a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	e0f1      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d101      	bne.n	800c7ae <HAL_I2C_Mem_Read+0x4e>
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	e0ea      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c7b6:	f7ff fa07 	bl	800bbc8 <HAL_GetTick>
 800c7ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	2319      	movs	r3, #25
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f000 f9c9 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e0d5      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2222      	movs	r2, #34	; 0x22
 800c7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2240      	movs	r2, #64	; 0x40
 800c7e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6a3a      	ldr	r2, [r7, #32]
 800c7f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c7f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c800:	88f8      	ldrh	r0, [r7, #6]
 800c802:	893a      	ldrh	r2, [r7, #8]
 800c804:	8979      	ldrh	r1, [r7, #10]
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	9301      	str	r3, [sp, #4]
 800c80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	4603      	mov	r3, r0
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	f000 f92d 	bl	800ca70 <I2C_RequestMemoryRead>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d005      	beq.n	800c828 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2200      	movs	r2, #0
 800c820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	e0ad      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	2bff      	cmp	r3, #255	; 0xff
 800c830:	d90e      	bls.n	800c850 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	22ff      	movs	r2, #255	; 0xff
 800c836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	8979      	ldrh	r1, [r7, #10]
 800c840:	4b52      	ldr	r3, [pc, #328]	; (800c98c <HAL_I2C_Mem_Read+0x22c>)
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 fb25 	bl	800ce98 <I2C_TransferConfig>
 800c84e:	e00f      	b.n	800c870 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c854:	b29a      	uxth	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	8979      	ldrh	r1, [r7, #10]
 800c862:	4b4a      	ldr	r3, [pc, #296]	; (800c98c <HAL_I2C_Mem_Read+0x22c>)
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 fb14 	bl	800ce98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	9300      	str	r3, [sp, #0]
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	2200      	movs	r2, #0
 800c878:	2104      	movs	r1, #4
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 f970 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d001      	beq.n	800c88a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e07c      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d034      	beq.n	800c930 <HAL_I2C_Mem_Read+0x1d0>
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d130      	bne.n	800c930 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2180      	movs	r1, #128	; 0x80
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 f941 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	e04d      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	2bff      	cmp	r3, #255	; 0xff
 800c8f0:	d90e      	bls.n	800c910 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	22ff      	movs	r2, #255	; 0xff
 800c8f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	8979      	ldrh	r1, [r7, #10]
 800c900:	2300      	movs	r3, #0
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 fac5 	bl	800ce98 <I2C_TransferConfig>
 800c90e:	e00f      	b.n	800c930 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c914:	b29a      	uxth	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	8979      	ldrh	r1, [r7, #10]
 800c922:	2300      	movs	r3, #0
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f000 fab4 	bl	800ce98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c934:	b29b      	uxth	r3, r3
 800c936:	2b00      	cmp	r3, #0
 800c938:	d19a      	bne.n	800c870 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c93a:	697a      	ldr	r2, [r7, #20]
 800c93c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 f98e 	bl	800cc60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e01a      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2220      	movs	r2, #32
 800c954:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6859      	ldr	r1, [r3, #4]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	4b0b      	ldr	r3, [pc, #44]	; (800c990 <HAL_I2C_Mem_Read+0x230>)
 800c962:	400b      	ands	r3, r1
 800c964:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2220      	movs	r2, #32
 800c96a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c97e:	2300      	movs	r3, #0
 800c980:	e000      	b.n	800c984 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c982:	2302      	movs	r3, #2
  }
}
 800c984:	4618      	mov	r0, r3
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	80002400 	.word	0x80002400
 800c990:	fe00e800 	.word	0xfe00e800

0800c994 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9a2:	b2db      	uxtb	r3, r3
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	817b      	strh	r3, [r7, #10]
 800c9da:	460b      	mov	r3, r1
 800c9dc:	813b      	strh	r3, [r7, #8]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c9e2:	88fb      	ldrh	r3, [r7, #6]
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	8979      	ldrh	r1, [r7, #10]
 800c9e8:	4b20      	ldr	r3, [pc, #128]	; (800ca6c <I2C_RequestMemoryWrite+0xa4>)
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 fa51 	bl	800ce98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c9f6:	69fa      	ldr	r2, [r7, #28]
 800c9f8:	69b9      	ldr	r1, [r7, #24]
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 f8f0 	bl	800cbe0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e02c      	b.n	800ca64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ca0a:	88fb      	ldrh	r3, [r7, #6]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d105      	bne.n	800ca1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca10:	893b      	ldrh	r3, [r7, #8]
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	629a      	str	r2, [r3, #40]	; 0x28
 800ca1a:	e015      	b.n	800ca48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ca1c:	893b      	ldrh	r3, [r7, #8]
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca2a:	69fa      	ldr	r2, [r7, #28]
 800ca2c:	69b9      	ldr	r1, [r7, #24]
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f000 f8d6 	bl	800cbe0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d001      	beq.n	800ca3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e012      	b.n	800ca64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca3e:	893b      	ldrh	r3, [r7, #8]
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	2180      	movs	r1, #128	; 0x80
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f000 f884 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e000      	b.n	800ca64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	80002000 	.word	0x80002000

0800ca70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b086      	sub	sp, #24
 800ca74:	af02      	add	r7, sp, #8
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	4608      	mov	r0, r1
 800ca7a:	4611      	mov	r1, r2
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4603      	mov	r3, r0
 800ca80:	817b      	strh	r3, [r7, #10]
 800ca82:	460b      	mov	r3, r1
 800ca84:	813b      	strh	r3, [r7, #8]
 800ca86:	4613      	mov	r3, r2
 800ca88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ca8a:	88fb      	ldrh	r3, [r7, #6]
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	8979      	ldrh	r1, [r7, #10]
 800ca90:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <I2C_RequestMemoryRead+0xa4>)
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	2300      	movs	r3, #0
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 f9fe 	bl	800ce98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca9c:	69fa      	ldr	r2, [r7, #28]
 800ca9e:	69b9      	ldr	r1, [r7, #24]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 f89d 	bl	800cbe0 <I2C_WaitOnTXISFlagUntilTimeout>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800caac:	2301      	movs	r3, #1
 800caae:	e02c      	b.n	800cb0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d105      	bne.n	800cac2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cab6:	893b      	ldrh	r3, [r7, #8]
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	629a      	str	r2, [r3, #40]	; 0x28
 800cac0:	e015      	b.n	800caee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cac2:	893b      	ldrh	r3, [r7, #8]
 800cac4:	0a1b      	lsrs	r3, r3, #8
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cad0:	69fa      	ldr	r2, [r7, #28]
 800cad2:	69b9      	ldr	r1, [r7, #24]
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f000 f883 	bl	800cbe0 <I2C_WaitOnTXISFlagUntilTimeout>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e012      	b.n	800cb0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cae4:	893b      	ldrh	r3, [r7, #8]
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800caee:	69fb      	ldr	r3, [r7, #28]
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	2200      	movs	r2, #0
 800caf6:	2140      	movs	r1, #64	; 0x40
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 f831 	bl	800cb60 <I2C_WaitOnFlagUntilTimeout>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	e000      	b.n	800cb0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	80002000 	.word	0x80002000

0800cb18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	699b      	ldr	r3, [r3, #24]
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b02      	cmp	r3, #2
 800cb2c:	d103      	bne.n	800cb36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	2200      	movs	r2, #0
 800cb34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d007      	beq.n	800cb54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	699a      	ldr	r2, [r3, #24]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f042 0201 	orr.w	r2, r2, #1
 800cb52:	619a      	str	r2, [r3, #24]
  }
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cb70:	e022      	b.n	800cbb8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb78:	d01e      	beq.n	800cbb8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb7a:	f7ff f825 	bl	800bbc8 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d302      	bcc.n	800cb90 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d113      	bne.n	800cbb8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb94:	f043 0220 	orr.w	r2, r3, #32
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2220      	movs	r2, #32
 800cba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e00f      	b.n	800cbd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	699a      	ldr	r2, [r3, #24]
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	bf0c      	ite	eq
 800cbc8:	2301      	moveq	r3, #1
 800cbca:	2300      	movne	r3, #0
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	461a      	mov	r2, r3
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d0cd      	beq.n	800cb72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cbec:	e02c      	b.n	800cc48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f000 f870 	bl	800ccd8 <I2C_IsErrorOccurred>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e02a      	b.n	800cc58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d01e      	beq.n	800cc48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc0a:	f7fe ffdd 	bl	800bbc8 <HAL_GetTick>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	68ba      	ldr	r2, [r7, #8]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d302      	bcc.n	800cc20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d113      	bne.n	800cc48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc24:	f043 0220 	orr.w	r2, r3, #32
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e007      	b.n	800cc58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	699b      	ldr	r3, [r3, #24]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d1cb      	bne.n	800cbee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cc6c:	e028      	b.n	800ccc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f000 f830 	bl	800ccd8 <I2C_IsErrorOccurred>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e026      	b.n	800ccd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc82:	f7fe ffa1 	bl	800bbc8 <HAL_GetTick>
 800cc86:	4602      	mov	r2, r0
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d302      	bcc.n	800cc98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d113      	bne.n	800ccc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc9c:	f043 0220 	orr.w	r2, r3, #32
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2220      	movs	r2, #32
 800cca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e007      	b.n	800ccd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	f003 0320 	and.w	r3, r3, #32
 800ccca:	2b20      	cmp	r3, #32
 800cccc:	d1cf      	bne.n	800cc6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08a      	sub	sp, #40	; 0x28
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d068      	beq.n	800cdd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2210      	movs	r2, #16
 800cd0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cd0c:	e049      	b.n	800cda2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd14:	d045      	beq.n	800cda2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cd16:	f7fe ff57 	bl	800bbc8 <HAL_GetTick>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d302      	bcc.n	800cd2c <I2C_IsErrorOccurred+0x54>
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d13a      	bne.n	800cda2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd4e:	d121      	bne.n	800cd94 <I2C_IsErrorOccurred+0xbc>
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd56:	d01d      	beq.n	800cd94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800cd58:	7cfb      	ldrb	r3, [r7, #19]
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	d01a      	beq.n	800cd94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685a      	ldr	r2, [r3, #4]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cd6e:	f7fe ff2b 	bl	800bbc8 <HAL_GetTick>
 800cd72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd74:	e00e      	b.n	800cd94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cd76:	f7fe ff27 	bl	800bbc8 <HAL_GetTick>
 800cd7a:	4602      	mov	r2, r0
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	2b19      	cmp	r3, #25
 800cd82:	d907      	bls.n	800cd94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	f043 0320 	orr.w	r3, r3, #32
 800cd8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800cd92:	e006      	b.n	800cda2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	f003 0320 	and.w	r3, r3, #32
 800cd9e:	2b20      	cmp	r3, #32
 800cda0:	d1e9      	bne.n	800cd76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	699b      	ldr	r3, [r3, #24]
 800cda8:	f003 0320 	and.w	r3, r3, #32
 800cdac:	2b20      	cmp	r3, #32
 800cdae:	d003      	beq.n	800cdb8 <I2C_IsErrorOccurred+0xe0>
 800cdb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0aa      	beq.n	800cd0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cdb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d103      	bne.n	800cdc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2220      	movs	r2, #32
 800cdc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cdc8:	6a3b      	ldr	r3, [r7, #32]
 800cdca:	f043 0304 	orr.w	r3, r3, #4
 800cdce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d00b      	beq.n	800ce00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	f043 0301 	orr.w	r3, r3, #1
 800cdee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00b      	beq.n	800ce22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ce0a:	6a3b      	ldr	r3, [r7, #32]
 800ce0c:	f043 0308 	orr.w	r3, r3, #8
 800ce10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	f043 0302 	orr.w	r3, r3, #2
 800ce32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ce44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d01c      	beq.n	800ce86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f7ff fe63 	bl	800cb18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6859      	ldr	r1, [r3, #4]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <I2C_IsErrorOccurred+0x1bc>)
 800ce5e:	400b      	ands	r3, r1
 800ce60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	431a      	orrs	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2220      	movs	r2, #32
 800ce72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ce86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3728      	adds	r7, #40	; 0x28
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	fe00e800 	.word	0xfe00e800

0800ce98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b087      	sub	sp, #28
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	607b      	str	r3, [r7, #4]
 800cea2:	460b      	mov	r3, r1
 800cea4:	817b      	strh	r3, [r7, #10]
 800cea6:	4613      	mov	r3, r2
 800cea8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ceaa:	897b      	ldrh	r3, [r7, #10]
 800ceac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ceb0:	7a7b      	ldrb	r3, [r7, #9]
 800ceb2:	041b      	lsls	r3, r3, #16
 800ceb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ceb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cec6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	0d5b      	lsrs	r3, r3, #21
 800ced2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ced6:	4b08      	ldr	r3, [pc, #32]	; (800cef8 <I2C_TransferConfig+0x60>)
 800ced8:	430b      	orrs	r3, r1
 800ceda:	43db      	mvns	r3, r3
 800cedc:	ea02 0103 	and.w	r1, r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	430a      	orrs	r2, r1
 800cee8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ceea:	bf00      	nop
 800ceec:	371c      	adds	r7, #28
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	03ff63ff 	.word	0x03ff63ff

0800cefc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf0c:	b2db      	uxtb	r3, r3
 800cf0e:	2b20      	cmp	r3, #32
 800cf10:	d138      	bne.n	800cf84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d101      	bne.n	800cf20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	e032      	b.n	800cf86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2224      	movs	r2, #36	; 0x24
 800cf2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f022 0201 	bic.w	r2, r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6819      	ldr	r1, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	430a      	orrs	r2, r1
 800cf5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f042 0201 	orr.w	r2, r2, #1
 800cf6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2220      	movs	r2, #32
 800cf74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	e000      	b.n	800cf86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cf84:	2302      	movs	r3, #2
  }
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b085      	sub	sp, #20
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b20      	cmp	r3, #32
 800cfa6:	d139      	bne.n	800d01c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d101      	bne.n	800cfb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	e033      	b.n	800d01e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2224      	movs	r2, #36	; 0x24
 800cfc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f022 0201 	bic.w	r2, r2, #1
 800cfd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cfe4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	021b      	lsls	r3, r3, #8
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	4313      	orrs	r3, r2
 800cfee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2220      	movs	r2, #32
 800d00c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	e000      	b.n	800d01e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d01c:	2302      	movs	r3, #2
  }
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d02a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02c:	b08f      	sub	sp, #60	; 0x3c
 800d02e:	af0a      	add	r7, sp, #40	; 0x28
 800d030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d101      	bne.n	800d03c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e116      	b.n	800d26a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d106      	bne.n	800d05c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7f9 f8f6 	bl	8006248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2203      	movs	r2, #3
 800d060:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d102      	bne.n	800d076 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4618      	mov	r0, r3
 800d07c:	f002 fad0 	bl	800f620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	603b      	str	r3, [r7, #0]
 800d086:	687e      	ldr	r6, [r7, #4]
 800d088:	466d      	mov	r5, sp
 800d08a:	f106 0410 	add.w	r4, r6, #16
 800d08e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d096:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d09a:	e885 0003 	stmia.w	r5, {r0, r1}
 800d09e:	1d33      	adds	r3, r6, #4
 800d0a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0a2:	6838      	ldr	r0, [r7, #0]
 800d0a4:	f002 fa64 	bl	800f570 <USB_CoreInit>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d005      	beq.n	800d0ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e0d7      	b.n	800d26a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2100      	movs	r1, #0
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f002 fabe 	bl	800f642 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
 800d0ca:	e04a      	b.n	800d162 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d0cc:	7bfa      	ldrb	r2, [r7, #15]
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	440b      	add	r3, r1
 800d0da:	333d      	adds	r3, #61	; 0x3d
 800d0dc:	2201      	movs	r2, #1
 800d0de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d0e0:	7bfa      	ldrb	r2, [r7, #15]
 800d0e2:	6879      	ldr	r1, [r7, #4]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	440b      	add	r3, r1
 800d0ee:	333c      	adds	r3, #60	; 0x3c
 800d0f0:	7bfa      	ldrb	r2, [r7, #15]
 800d0f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d0f4:	7bfa      	ldrb	r2, [r7, #15]
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	b298      	uxth	r0, r3
 800d0fa:	6879      	ldr	r1, [r7, #4]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	440b      	add	r3, r1
 800d106:	3344      	adds	r3, #68	; 0x44
 800d108:	4602      	mov	r2, r0
 800d10a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d10c:	7bfa      	ldrb	r2, [r7, #15]
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	4613      	mov	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4413      	add	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	440b      	add	r3, r1
 800d11a:	3340      	adds	r3, #64	; 0x40
 800d11c:	2200      	movs	r2, #0
 800d11e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d120:	7bfa      	ldrb	r2, [r7, #15]
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	4613      	mov	r3, r2
 800d126:	00db      	lsls	r3, r3, #3
 800d128:	4413      	add	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	440b      	add	r3, r1
 800d12e:	3348      	adds	r3, #72	; 0x48
 800d130:	2200      	movs	r2, #0
 800d132:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d134:	7bfa      	ldrb	r2, [r7, #15]
 800d136:	6879      	ldr	r1, [r7, #4]
 800d138:	4613      	mov	r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	4413      	add	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	440b      	add	r3, r1
 800d142:	334c      	adds	r3, #76	; 0x4c
 800d144:	2200      	movs	r2, #0
 800d146:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d148:	7bfa      	ldrb	r2, [r7, #15]
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	4613      	mov	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	440b      	add	r3, r1
 800d156:	3354      	adds	r3, #84	; 0x54
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d15c:	7bfb      	ldrb	r3, [r7, #15]
 800d15e:	3301      	adds	r3, #1
 800d160:	73fb      	strb	r3, [r7, #15]
 800d162:	7bfa      	ldrb	r2, [r7, #15]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d3af      	bcc.n	800d0cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d16c:	2300      	movs	r3, #0
 800d16e:	73fb      	strb	r3, [r7, #15]
 800d170:	e044      	b.n	800d1fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d172:	7bfa      	ldrb	r2, [r7, #15]
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	4613      	mov	r3, r2
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	4413      	add	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	440b      	add	r3, r1
 800d180:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800d184:	2200      	movs	r2, #0
 800d186:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d188:	7bfa      	ldrb	r2, [r7, #15]
 800d18a:	6879      	ldr	r1, [r7, #4]
 800d18c:	4613      	mov	r3, r2
 800d18e:	00db      	lsls	r3, r3, #3
 800d190:	4413      	add	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	440b      	add	r3, r1
 800d196:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d19e:	7bfa      	ldrb	r2, [r7, #15]
 800d1a0:	6879      	ldr	r1, [r7, #4]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	4413      	add	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	440b      	add	r3, r1
 800d1ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d1b4:	7bfa      	ldrb	r2, [r7, #15]
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	00db      	lsls	r3, r3, #3
 800d1bc:	4413      	add	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	440b      	add	r3, r1
 800d1c2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d1ca:	7bfa      	ldrb	r2, [r7, #15]
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	4413      	add	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	440b      	add	r3, r1
 800d1d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d1dc:	2200      	movs	r2, #0
 800d1de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d1e0:	7bfa      	ldrb	r2, [r7, #15]
 800d1e2:	6879      	ldr	r1, [r7, #4]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	4413      	add	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	440b      	add	r3, r1
 800d1ee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	73fb      	strb	r3, [r7, #15]
 800d1fc:	7bfa      	ldrb	r2, [r7, #15]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	429a      	cmp	r2, r3
 800d204:	d3b5      	bcc.n	800d172 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	603b      	str	r3, [r7, #0]
 800d20c:	687e      	ldr	r6, [r7, #4]
 800d20e:	466d      	mov	r5, sp
 800d210:	f106 0410 	add.w	r4, r6, #16
 800d214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d21a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d21c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d220:	e885 0003 	stmia.w	r5, {r0, r1}
 800d224:	1d33      	adds	r3, r6, #4
 800d226:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d228:	6838      	ldr	r0, [r7, #0]
 800d22a:	f002 fa57 	bl	800f6dc <USB_DevInit>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2202      	movs	r2, #2
 800d238:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e014      	b.n	800d26a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	2b01      	cmp	r3, #1
 800d256:	d102      	bne.n	800d25e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f80b 	bl	800d274 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4618      	mov	r0, r3
 800d264:	f002 fc15 	bl	800fa92 <USB_DevDisconnect>

  return HAL_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3714      	adds	r7, #20
 800d26e:	46bd      	mov	sp, r7
 800d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d274 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2a2:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <HAL_PCDEx_ActivateLPM+0x44>)
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr
 800d2b8:	10000003 	.word	0x10000003

0800d2bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d2c0:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a04      	ldr	r2, [pc, #16]	; (800d2d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d2c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2ca:	6013      	str	r3, [r2, #0]
}
 800d2cc:	bf00      	nop
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	40007000 	.word	0x40007000

0800d2dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d2e6:	4b23      	ldr	r3, [pc, #140]	; (800d374 <HAL_PWREx_EnableOverDrive+0x98>)
 800d2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ea:	4a22      	ldr	r2, [pc, #136]	; (800d374 <HAL_PWREx_EnableOverDrive+0x98>)
 800d2ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d2f0:	6413      	str	r3, [r2, #64]	; 0x40
 800d2f2:	4b20      	ldr	r3, [pc, #128]	; (800d374 <HAL_PWREx_EnableOverDrive+0x98>)
 800d2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2fa:	603b      	str	r3, [r7, #0]
 800d2fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d2fe:	4b1e      	ldr	r3, [pc, #120]	; (800d378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a1d      	ldr	r2, [pc, #116]	; (800d378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d308:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d30a:	f7fe fc5d 	bl	800bbc8 <HAL_GetTick>
 800d30e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d310:	e009      	b.n	800d326 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d312:	f7fe fc59 	bl	800bbc8 <HAL_GetTick>
 800d316:	4602      	mov	r2, r0
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d320:	d901      	bls.n	800d326 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d322:	2303      	movs	r3, #3
 800d324:	e022      	b.n	800d36c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d326:	4b14      	ldr	r3, [pc, #80]	; (800d378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d32e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d332:	d1ee      	bne.n	800d312 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d334:	4b10      	ldr	r3, [pc, #64]	; (800d378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4a0f      	ldr	r2, [pc, #60]	; (800d378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d33a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d33e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d340:	f7fe fc42 	bl	800bbc8 <HAL_GetTick>
 800d344:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d346:	e009      	b.n	800d35c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d348:	f7fe fc3e 	bl	800bbc8 <HAL_GetTick>
 800d34c:	4602      	mov	r2, r0
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d356:	d901      	bls.n	800d35c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d358:	2303      	movs	r3, #3
 800d35a:	e007      	b.n	800d36c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d35c:	4b06      	ldr	r3, [pc, #24]	; (800d378 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d368:	d1ee      	bne.n	800d348 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3708      	adds	r7, #8
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	40023800 	.word	0x40023800
 800d378:	40007000 	.word	0x40007000

0800d37c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d384:	2300      	movs	r3, #0
 800d386:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	e29b      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 8087 	beq.w	800d4ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d3a0:	4b96      	ldr	r3, [pc, #600]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f003 030c 	and.w	r3, r3, #12
 800d3a8:	2b04      	cmp	r3, #4
 800d3aa:	d00c      	beq.n	800d3c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d3ac:	4b93      	ldr	r3, [pc, #588]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	f003 030c 	and.w	r3, r3, #12
 800d3b4:	2b08      	cmp	r3, #8
 800d3b6:	d112      	bne.n	800d3de <HAL_RCC_OscConfig+0x62>
 800d3b8:	4b90      	ldr	r3, [pc, #576]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3c4:	d10b      	bne.n	800d3de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d3c6:	4b8d      	ldr	r3, [pc, #564]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d06c      	beq.n	800d4ac <HAL_RCC_OscConfig+0x130>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d168      	bne.n	800d4ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e275      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3e6:	d106      	bne.n	800d3f6 <HAL_RCC_OscConfig+0x7a>
 800d3e8:	4b84      	ldr	r3, [pc, #528]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a83      	ldr	r2, [pc, #524]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d3ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3f2:	6013      	str	r3, [r2, #0]
 800d3f4:	e02e      	b.n	800d454 <HAL_RCC_OscConfig+0xd8>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10c      	bne.n	800d418 <HAL_RCC_OscConfig+0x9c>
 800d3fe:	4b7f      	ldr	r3, [pc, #508]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a7e      	ldr	r2, [pc, #504]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d408:	6013      	str	r3, [r2, #0]
 800d40a:	4b7c      	ldr	r3, [pc, #496]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a7b      	ldr	r2, [pc, #492]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	e01d      	b.n	800d454 <HAL_RCC_OscConfig+0xd8>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d420:	d10c      	bne.n	800d43c <HAL_RCC_OscConfig+0xc0>
 800d422:	4b76      	ldr	r3, [pc, #472]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a75      	ldr	r2, [pc, #468]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	4b73      	ldr	r3, [pc, #460]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a72      	ldr	r2, [pc, #456]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d438:	6013      	str	r3, [r2, #0]
 800d43a:	e00b      	b.n	800d454 <HAL_RCC_OscConfig+0xd8>
 800d43c:	4b6f      	ldr	r3, [pc, #444]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a6e      	ldr	r2, [pc, #440]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d446:	6013      	str	r3, [r2, #0]
 800d448:	4b6c      	ldr	r3, [pc, #432]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a6b      	ldr	r2, [pc, #428]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d44e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d013      	beq.n	800d484 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d45c:	f7fe fbb4 	bl	800bbc8 <HAL_GetTick>
 800d460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d462:	e008      	b.n	800d476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d464:	f7fe fbb0 	bl	800bbc8 <HAL_GetTick>
 800d468:	4602      	mov	r2, r0
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	2b64      	cmp	r3, #100	; 0x64
 800d470:	d901      	bls.n	800d476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d472:	2303      	movs	r3, #3
 800d474:	e229      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d476:	4b61      	ldr	r3, [pc, #388]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d0f0      	beq.n	800d464 <HAL_RCC_OscConfig+0xe8>
 800d482:	e014      	b.n	800d4ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d484:	f7fe fba0 	bl	800bbc8 <HAL_GetTick>
 800d488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d48a:	e008      	b.n	800d49e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d48c:	f7fe fb9c 	bl	800bbc8 <HAL_GetTick>
 800d490:	4602      	mov	r2, r0
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	1ad3      	subs	r3, r2, r3
 800d496:	2b64      	cmp	r3, #100	; 0x64
 800d498:	d901      	bls.n	800d49e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d49a:	2303      	movs	r3, #3
 800d49c:	e215      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d49e:	4b57      	ldr	r3, [pc, #348]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1f0      	bne.n	800d48c <HAL_RCC_OscConfig+0x110>
 800d4aa:	e000      	b.n	800d4ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d4ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f003 0302 	and.w	r3, r3, #2
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d069      	beq.n	800d58e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d4ba:	4b50      	ldr	r3, [pc, #320]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	f003 030c 	and.w	r3, r3, #12
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00b      	beq.n	800d4de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d4c6:	4b4d      	ldr	r3, [pc, #308]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d4c8:	689b      	ldr	r3, [r3, #8]
 800d4ca:	f003 030c 	and.w	r3, r3, #12
 800d4ce:	2b08      	cmp	r3, #8
 800d4d0:	d11c      	bne.n	800d50c <HAL_RCC_OscConfig+0x190>
 800d4d2:	4b4a      	ldr	r3, [pc, #296]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d116      	bne.n	800d50c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d4de:	4b47      	ldr	r3, [pc, #284]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f003 0302 	and.w	r3, r3, #2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d005      	beq.n	800d4f6 <HAL_RCC_OscConfig+0x17a>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d001      	beq.n	800d4f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e1e9      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d4f6:	4b41      	ldr	r3, [pc, #260]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	493d      	ldr	r1, [pc, #244]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d506:	4313      	orrs	r3, r2
 800d508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d50a:	e040      	b.n	800d58e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d023      	beq.n	800d55c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d514:	4b39      	ldr	r3, [pc, #228]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a38      	ldr	r2, [pc, #224]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d51a:	f043 0301 	orr.w	r3, r3, #1
 800d51e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d520:	f7fe fb52 	bl	800bbc8 <HAL_GetTick>
 800d524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d526:	e008      	b.n	800d53a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d528:	f7fe fb4e 	bl	800bbc8 <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	2b02      	cmp	r3, #2
 800d534:	d901      	bls.n	800d53a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d536:	2303      	movs	r3, #3
 800d538:	e1c7      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d53a:	4b30      	ldr	r3, [pc, #192]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	2b00      	cmp	r3, #0
 800d544:	d0f0      	beq.n	800d528 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d546:	4b2d      	ldr	r3, [pc, #180]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	4929      	ldr	r1, [pc, #164]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d556:	4313      	orrs	r3, r2
 800d558:	600b      	str	r3, [r1, #0]
 800d55a:	e018      	b.n	800d58e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d55c:	4b27      	ldr	r3, [pc, #156]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a26      	ldr	r2, [pc, #152]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d562:	f023 0301 	bic.w	r3, r3, #1
 800d566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d568:	f7fe fb2e 	bl	800bbc8 <HAL_GetTick>
 800d56c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d56e:	e008      	b.n	800d582 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d570:	f7fe fb2a 	bl	800bbc8 <HAL_GetTick>
 800d574:	4602      	mov	r2, r0
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d901      	bls.n	800d582 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d57e:	2303      	movs	r3, #3
 800d580:	e1a3      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d582:	4b1e      	ldr	r3, [pc, #120]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0302 	and.w	r3, r3, #2
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f0      	bne.n	800d570 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 0308 	and.w	r3, r3, #8
 800d596:	2b00      	cmp	r3, #0
 800d598:	d038      	beq.n	800d60c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	695b      	ldr	r3, [r3, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d019      	beq.n	800d5d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d5a2:	4b16      	ldr	r3, [pc, #88]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d5a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5a6:	4a15      	ldr	r2, [pc, #84]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d5a8:	f043 0301 	orr.w	r3, r3, #1
 800d5ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5ae:	f7fe fb0b 	bl	800bbc8 <HAL_GetTick>
 800d5b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5b4:	e008      	b.n	800d5c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5b6:	f7fe fb07 	bl	800bbc8 <HAL_GetTick>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d901      	bls.n	800d5c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e180      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d5c8:	4b0c      	ldr	r3, [pc, #48]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5cc:	f003 0302 	and.w	r3, r3, #2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d0f0      	beq.n	800d5b6 <HAL_RCC_OscConfig+0x23a>
 800d5d4:	e01a      	b.n	800d60c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5d6:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5da:	4a08      	ldr	r2, [pc, #32]	; (800d5fc <HAL_RCC_OscConfig+0x280>)
 800d5dc:	f023 0301 	bic.w	r3, r3, #1
 800d5e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5e2:	f7fe faf1 	bl	800bbc8 <HAL_GetTick>
 800d5e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d5e8:	e00a      	b.n	800d600 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d5ea:	f7fe faed 	bl	800bbc8 <HAL_GetTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d903      	bls.n	800d600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	e166      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
 800d5fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d600:	4b92      	ldr	r3, [pc, #584]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1ee      	bne.n	800d5ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 0304 	and.w	r3, r3, #4
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 80a4 	beq.w	800d762 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d61a:	4b8c      	ldr	r3, [pc, #560]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10d      	bne.n	800d642 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d626:	4b89      	ldr	r3, [pc, #548]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	4a88      	ldr	r2, [pc, #544]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d630:	6413      	str	r3, [r2, #64]	; 0x40
 800d632:	4b86      	ldr	r3, [pc, #536]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d63a:	60bb      	str	r3, [r7, #8]
 800d63c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d63e:	2301      	movs	r3, #1
 800d640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d642:	4b83      	ldr	r3, [pc, #524]	; (800d850 <HAL_RCC_OscConfig+0x4d4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d118      	bne.n	800d680 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d64e:	4b80      	ldr	r3, [pc, #512]	; (800d850 <HAL_RCC_OscConfig+0x4d4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a7f      	ldr	r2, [pc, #508]	; (800d850 <HAL_RCC_OscConfig+0x4d4>)
 800d654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d65a:	f7fe fab5 	bl	800bbc8 <HAL_GetTick>
 800d65e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d660:	e008      	b.n	800d674 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d662:	f7fe fab1 	bl	800bbc8 <HAL_GetTick>
 800d666:	4602      	mov	r2, r0
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	2b64      	cmp	r3, #100	; 0x64
 800d66e:	d901      	bls.n	800d674 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d670:	2303      	movs	r3, #3
 800d672:	e12a      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d674:	4b76      	ldr	r3, [pc, #472]	; (800d850 <HAL_RCC_OscConfig+0x4d4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d0f0      	beq.n	800d662 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	2b01      	cmp	r3, #1
 800d686:	d106      	bne.n	800d696 <HAL_RCC_OscConfig+0x31a>
 800d688:	4b70      	ldr	r3, [pc, #448]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d68c:	4a6f      	ldr	r2, [pc, #444]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	6713      	str	r3, [r2, #112]	; 0x70
 800d694:	e02d      	b.n	800d6f2 <HAL_RCC_OscConfig+0x376>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10c      	bne.n	800d6b8 <HAL_RCC_OscConfig+0x33c>
 800d69e:	4b6b      	ldr	r3, [pc, #428]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6a2:	4a6a      	ldr	r2, [pc, #424]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6a4:	f023 0301 	bic.w	r3, r3, #1
 800d6a8:	6713      	str	r3, [r2, #112]	; 0x70
 800d6aa:	4b68      	ldr	r3, [pc, #416]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	4a67      	ldr	r2, [pc, #412]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6b0:	f023 0304 	bic.w	r3, r3, #4
 800d6b4:	6713      	str	r3, [r2, #112]	; 0x70
 800d6b6:	e01c      	b.n	800d6f2 <HAL_RCC_OscConfig+0x376>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	2b05      	cmp	r3, #5
 800d6be:	d10c      	bne.n	800d6da <HAL_RCC_OscConfig+0x35e>
 800d6c0:	4b62      	ldr	r3, [pc, #392]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c4:	4a61      	ldr	r2, [pc, #388]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6c6:	f043 0304 	orr.w	r3, r3, #4
 800d6ca:	6713      	str	r3, [r2, #112]	; 0x70
 800d6cc:	4b5f      	ldr	r3, [pc, #380]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d0:	4a5e      	ldr	r2, [pc, #376]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6d2:	f043 0301 	orr.w	r3, r3, #1
 800d6d6:	6713      	str	r3, [r2, #112]	; 0x70
 800d6d8:	e00b      	b.n	800d6f2 <HAL_RCC_OscConfig+0x376>
 800d6da:	4b5c      	ldr	r3, [pc, #368]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6de:	4a5b      	ldr	r2, [pc, #364]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6e0:	f023 0301 	bic.w	r3, r3, #1
 800d6e4:	6713      	str	r3, [r2, #112]	; 0x70
 800d6e6:	4b59      	ldr	r3, [pc, #356]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ea:	4a58      	ldr	r2, [pc, #352]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d6ec:	f023 0304 	bic.w	r3, r3, #4
 800d6f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d015      	beq.n	800d726 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6fa:	f7fe fa65 	bl	800bbc8 <HAL_GetTick>
 800d6fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d700:	e00a      	b.n	800d718 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d702:	f7fe fa61 	bl	800bbc8 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d710:	4293      	cmp	r3, r2
 800d712:	d901      	bls.n	800d718 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	e0d8      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d718:	4b4c      	ldr	r3, [pc, #304]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d71c:	f003 0302 	and.w	r3, r3, #2
 800d720:	2b00      	cmp	r3, #0
 800d722:	d0ee      	beq.n	800d702 <HAL_RCC_OscConfig+0x386>
 800d724:	e014      	b.n	800d750 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d726:	f7fe fa4f 	bl	800bbc8 <HAL_GetTick>
 800d72a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d72c:	e00a      	b.n	800d744 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d72e:	f7fe fa4b 	bl	800bbc8 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	f241 3288 	movw	r2, #5000	; 0x1388
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d901      	bls.n	800d744 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800d740:	2303      	movs	r3, #3
 800d742:	e0c2      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d744:	4b41      	ldr	r3, [pc, #260]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d748:	f003 0302 	and.w	r3, r3, #2
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1ee      	bne.n	800d72e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	2b01      	cmp	r3, #1
 800d754:	d105      	bne.n	800d762 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d756:	4b3d      	ldr	r3, [pc, #244]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	4a3c      	ldr	r2, [pc, #240]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d75c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80ae 	beq.w	800d8c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d76c:	4b37      	ldr	r3, [pc, #220]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	f003 030c 	and.w	r3, r3, #12
 800d774:	2b08      	cmp	r3, #8
 800d776:	d06d      	beq.n	800d854 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	2b02      	cmp	r3, #2
 800d77e:	d14b      	bne.n	800d818 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d780:	4b32      	ldr	r3, [pc, #200]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a31      	ldr	r2, [pc, #196]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d78a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d78c:	f7fe fa1c 	bl	800bbc8 <HAL_GetTick>
 800d790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d792:	e008      	b.n	800d7a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d794:	f7fe fa18 	bl	800bbc8 <HAL_GetTick>
 800d798:	4602      	mov	r2, r0
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d901      	bls.n	800d7a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800d7a2:	2303      	movs	r3, #3
 800d7a4:	e091      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d7a6:	4b29      	ldr	r3, [pc, #164]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1f0      	bne.n	800d794 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	69da      	ldr	r2, [r3, #28]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a1b      	ldr	r3, [r3, #32]
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	019b      	lsls	r3, r3, #6
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c8:	085b      	lsrs	r3, r3, #1
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	041b      	lsls	r3, r3, #16
 800d7ce:	431a      	orrs	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	061b      	lsls	r3, r3, #24
 800d7d6:	431a      	orrs	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7dc:	071b      	lsls	r3, r3, #28
 800d7de:	491b      	ldr	r1, [pc, #108]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d7e4:	4b19      	ldr	r3, [pc, #100]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a18      	ldr	r2, [pc, #96]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d7ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7f0:	f7fe f9ea 	bl	800bbc8 <HAL_GetTick>
 800d7f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d7f6:	e008      	b.n	800d80a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d7f8:	f7fe f9e6 	bl	800bbc8 <HAL_GetTick>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	2b02      	cmp	r3, #2
 800d804:	d901      	bls.n	800d80a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800d806:	2303      	movs	r3, #3
 800d808:	e05f      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d80a:	4b10      	ldr	r3, [pc, #64]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d0f0      	beq.n	800d7f8 <HAL_RCC_OscConfig+0x47c>
 800d816:	e057      	b.n	800d8c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d818:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a0b      	ldr	r2, [pc, #44]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d81e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d824:	f7fe f9d0 	bl	800bbc8 <HAL_GetTick>
 800d828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d82a:	e008      	b.n	800d83e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d82c:	f7fe f9cc 	bl	800bbc8 <HAL_GetTick>
 800d830:	4602      	mov	r2, r0
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	2b02      	cmp	r3, #2
 800d838:	d901      	bls.n	800d83e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e045      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d83e:	4b03      	ldr	r3, [pc, #12]	; (800d84c <HAL_RCC_OscConfig+0x4d0>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1f0      	bne.n	800d82c <HAL_RCC_OscConfig+0x4b0>
 800d84a:	e03d      	b.n	800d8c8 <HAL_RCC_OscConfig+0x54c>
 800d84c:	40023800 	.word	0x40023800
 800d850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d854:	4b1f      	ldr	r3, [pc, #124]	; (800d8d4 <HAL_RCC_OscConfig+0x558>)
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d030      	beq.n	800d8c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d129      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d122      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d884:	4013      	ands	r3, r2
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d88a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d119      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89a:	085b      	lsrs	r3, r3, #1
 800d89c:	3b01      	subs	r3, #1
 800d89e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d10f      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d107      	bne.n	800d8c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d001      	beq.n	800d8c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	40023800 	.word	0x40023800

0800d8d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d101      	bne.n	800d8f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e0d0      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d8f0:	4b6a      	ldr	r3, [pc, #424]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 030f 	and.w	r3, r3, #15
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d910      	bls.n	800d920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8fe:	4b67      	ldr	r3, [pc, #412]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f023 020f 	bic.w	r2, r3, #15
 800d906:	4965      	ldr	r1, [pc, #404]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d90e:	4b63      	ldr	r3, [pc, #396]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f003 030f 	and.w	r3, r3, #15
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d001      	beq.n	800d920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e0b8      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d020      	beq.n	800d96e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	f003 0304 	and.w	r3, r3, #4
 800d934:	2b00      	cmp	r3, #0
 800d936:	d005      	beq.n	800d944 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d938:	4b59      	ldr	r3, [pc, #356]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	4a58      	ldr	r2, [pc, #352]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d93e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f003 0308 	and.w	r3, r3, #8
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d005      	beq.n	800d95c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d950:	4b53      	ldr	r3, [pc, #332]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d952:	689b      	ldr	r3, [r3, #8]
 800d954:	4a52      	ldr	r2, [pc, #328]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d95a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d95c:	4b50      	ldr	r3, [pc, #320]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	494d      	ldr	r1, [pc, #308]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d96a:	4313      	orrs	r3, r2
 800d96c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d040      	beq.n	800d9fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d107      	bne.n	800d992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d982:	4b47      	ldr	r3, [pc, #284]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d115      	bne.n	800d9ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e07f      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d107      	bne.n	800d9aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d99a:	4b41      	ldr	r3, [pc, #260]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d109      	bne.n	800d9ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e073      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d9aa:	4b3d      	ldr	r3, [pc, #244]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 0302 	and.w	r3, r3, #2
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e06b      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d9ba:	4b39      	ldr	r3, [pc, #228]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f023 0203 	bic.w	r2, r3, #3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	685b      	ldr	r3, [r3, #4]
 800d9c6:	4936      	ldr	r1, [pc, #216]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9cc:	f7fe f8fc 	bl	800bbc8 <HAL_GetTick>
 800d9d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9d2:	e00a      	b.n	800d9ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d9d4:	f7fe f8f8 	bl	800bbc8 <HAL_GetTick>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d901      	bls.n	800d9ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e053      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d9ea:	4b2d      	ldr	r3, [pc, #180]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800d9ec:	689b      	ldr	r3, [r3, #8]
 800d9ee:	f003 020c 	and.w	r2, r3, #12
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d1eb      	bne.n	800d9d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d9fc:	4b27      	ldr	r3, [pc, #156]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f003 030f 	and.w	r3, r3, #15
 800da04:	683a      	ldr	r2, [r7, #0]
 800da06:	429a      	cmp	r2, r3
 800da08:	d210      	bcs.n	800da2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da0a:	4b24      	ldr	r3, [pc, #144]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	f023 020f 	bic.w	r2, r3, #15
 800da12:	4922      	ldr	r1, [pc, #136]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	4313      	orrs	r3, r2
 800da18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da1a:	4b20      	ldr	r3, [pc, #128]	; (800da9c <HAL_RCC_ClockConfig+0x1c4>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 030f 	and.w	r3, r3, #15
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	429a      	cmp	r2, r3
 800da26:	d001      	beq.n	800da2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e032      	b.n	800da92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 0304 	and.w	r3, r3, #4
 800da34:	2b00      	cmp	r3, #0
 800da36:	d008      	beq.n	800da4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800da38:	4b19      	ldr	r3, [pc, #100]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	4916      	ldr	r1, [pc, #88]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800da46:	4313      	orrs	r3, r2
 800da48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f003 0308 	and.w	r3, r3, #8
 800da52:	2b00      	cmp	r3, #0
 800da54:	d009      	beq.n	800da6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800da56:	4b12      	ldr	r3, [pc, #72]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	00db      	lsls	r3, r3, #3
 800da64:	490e      	ldr	r1, [pc, #56]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800da66:	4313      	orrs	r3, r2
 800da68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800da6a:	f000 f821 	bl	800dab0 <HAL_RCC_GetSysClockFreq>
 800da6e:	4602      	mov	r2, r0
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <HAL_RCC_ClockConfig+0x1c8>)
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	091b      	lsrs	r3, r3, #4
 800da76:	f003 030f 	and.w	r3, r3, #15
 800da7a:	490a      	ldr	r1, [pc, #40]	; (800daa4 <HAL_RCC_ClockConfig+0x1cc>)
 800da7c:	5ccb      	ldrb	r3, [r1, r3]
 800da7e:	fa22 f303 	lsr.w	r3, r2, r3
 800da82:	4a09      	ldr	r2, [pc, #36]	; (800daa8 <HAL_RCC_ClockConfig+0x1d0>)
 800da84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800da86:	4b09      	ldr	r3, [pc, #36]	; (800daac <HAL_RCC_ClockConfig+0x1d4>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7f8 fc56 	bl	800633c <HAL_InitTick>

  return HAL_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	40023c00 	.word	0x40023c00
 800daa0:	40023800 	.word	0x40023800
 800daa4:	08018314 	.word	0x08018314
 800daa8:	20000058 	.word	0x20000058
 800daac:	200001b4 	.word	0x200001b4

0800dab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dab4:	b094      	sub	sp, #80	; 0x50
 800dab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	647b      	str	r3, [r7, #68]	; 0x44
 800dabc:	2300      	movs	r3, #0
 800dabe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dac0:	2300      	movs	r3, #0
 800dac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800dac4:	2300      	movs	r3, #0
 800dac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dac8:	4b79      	ldr	r3, [pc, #484]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	f003 030c 	and.w	r3, r3, #12
 800dad0:	2b08      	cmp	r3, #8
 800dad2:	d00d      	beq.n	800daf0 <HAL_RCC_GetSysClockFreq+0x40>
 800dad4:	2b08      	cmp	r3, #8
 800dad6:	f200 80e1 	bhi.w	800dc9c <HAL_RCC_GetSysClockFreq+0x1ec>
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d002      	beq.n	800dae4 <HAL_RCC_GetSysClockFreq+0x34>
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d003      	beq.n	800daea <HAL_RCC_GetSysClockFreq+0x3a>
 800dae2:	e0db      	b.n	800dc9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dae4:	4b73      	ldr	r3, [pc, #460]	; (800dcb4 <HAL_RCC_GetSysClockFreq+0x204>)
 800dae6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dae8:	e0db      	b.n	800dca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800daea:	4b73      	ldr	r3, [pc, #460]	; (800dcb8 <HAL_RCC_GetSysClockFreq+0x208>)
 800daec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800daee:	e0d8      	b.n	800dca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800daf0:	4b6f      	ldr	r3, [pc, #444]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daf8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800dafa:	4b6d      	ldr	r3, [pc, #436]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db02:	2b00      	cmp	r3, #0
 800db04:	d063      	beq.n	800dbce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800db06:	4b6a      	ldr	r3, [pc, #424]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	099b      	lsrs	r3, r3, #6
 800db0c:	2200      	movs	r2, #0
 800db0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800db10:	63fa      	str	r2, [r7, #60]	; 0x3c
 800db12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db18:	633b      	str	r3, [r7, #48]	; 0x30
 800db1a:	2300      	movs	r3, #0
 800db1c:	637b      	str	r3, [r7, #52]	; 0x34
 800db1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800db22:	4622      	mov	r2, r4
 800db24:	462b      	mov	r3, r5
 800db26:	f04f 0000 	mov.w	r0, #0
 800db2a:	f04f 0100 	mov.w	r1, #0
 800db2e:	0159      	lsls	r1, r3, #5
 800db30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800db34:	0150      	lsls	r0, r2, #5
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	4621      	mov	r1, r4
 800db3c:	1a51      	subs	r1, r2, r1
 800db3e:	6139      	str	r1, [r7, #16]
 800db40:	4629      	mov	r1, r5
 800db42:	eb63 0301 	sbc.w	r3, r3, r1
 800db46:	617b      	str	r3, [r7, #20]
 800db48:	f04f 0200 	mov.w	r2, #0
 800db4c:	f04f 0300 	mov.w	r3, #0
 800db50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800db54:	4659      	mov	r1, fp
 800db56:	018b      	lsls	r3, r1, #6
 800db58:	4651      	mov	r1, sl
 800db5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800db5e:	4651      	mov	r1, sl
 800db60:	018a      	lsls	r2, r1, #6
 800db62:	4651      	mov	r1, sl
 800db64:	ebb2 0801 	subs.w	r8, r2, r1
 800db68:	4659      	mov	r1, fp
 800db6a:	eb63 0901 	sbc.w	r9, r3, r1
 800db6e:	f04f 0200 	mov.w	r2, #0
 800db72:	f04f 0300 	mov.w	r3, #0
 800db76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800db7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800db7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800db82:	4690      	mov	r8, r2
 800db84:	4699      	mov	r9, r3
 800db86:	4623      	mov	r3, r4
 800db88:	eb18 0303 	adds.w	r3, r8, r3
 800db8c:	60bb      	str	r3, [r7, #8]
 800db8e:	462b      	mov	r3, r5
 800db90:	eb49 0303 	adc.w	r3, r9, r3
 800db94:	60fb      	str	r3, [r7, #12]
 800db96:	f04f 0200 	mov.w	r2, #0
 800db9a:	f04f 0300 	mov.w	r3, #0
 800db9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800dba2:	4629      	mov	r1, r5
 800dba4:	024b      	lsls	r3, r1, #9
 800dba6:	4621      	mov	r1, r4
 800dba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800dbac:	4621      	mov	r1, r4
 800dbae:	024a      	lsls	r2, r1, #9
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dbbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dbc0:	f7f2 fd52 	bl	8000668 <__aeabi_uldivmod>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	4613      	mov	r3, r2
 800dbca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbcc:	e058      	b.n	800dc80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dbce:	4b38      	ldr	r3, [pc, #224]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	099b      	lsrs	r3, r3, #6
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	4611      	mov	r1, r2
 800dbda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800dbde:	623b      	str	r3, [r7, #32]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800dbe8:	4642      	mov	r2, r8
 800dbea:	464b      	mov	r3, r9
 800dbec:	f04f 0000 	mov.w	r0, #0
 800dbf0:	f04f 0100 	mov.w	r1, #0
 800dbf4:	0159      	lsls	r1, r3, #5
 800dbf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dbfa:	0150      	lsls	r0, r2, #5
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4641      	mov	r1, r8
 800dc02:	ebb2 0a01 	subs.w	sl, r2, r1
 800dc06:	4649      	mov	r1, r9
 800dc08:	eb63 0b01 	sbc.w	fp, r3, r1
 800dc0c:	f04f 0200 	mov.w	r2, #0
 800dc10:	f04f 0300 	mov.w	r3, #0
 800dc14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800dc18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800dc1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800dc20:	ebb2 040a 	subs.w	r4, r2, sl
 800dc24:	eb63 050b 	sbc.w	r5, r3, fp
 800dc28:	f04f 0200 	mov.w	r2, #0
 800dc2c:	f04f 0300 	mov.w	r3, #0
 800dc30:	00eb      	lsls	r3, r5, #3
 800dc32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dc36:	00e2      	lsls	r2, r4, #3
 800dc38:	4614      	mov	r4, r2
 800dc3a:	461d      	mov	r5, r3
 800dc3c:	4643      	mov	r3, r8
 800dc3e:	18e3      	adds	r3, r4, r3
 800dc40:	603b      	str	r3, [r7, #0]
 800dc42:	464b      	mov	r3, r9
 800dc44:	eb45 0303 	adc.w	r3, r5, r3
 800dc48:	607b      	str	r3, [r7, #4]
 800dc4a:	f04f 0200 	mov.w	r2, #0
 800dc4e:	f04f 0300 	mov.w	r3, #0
 800dc52:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dc56:	4629      	mov	r1, r5
 800dc58:	028b      	lsls	r3, r1, #10
 800dc5a:	4621      	mov	r1, r4
 800dc5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dc60:	4621      	mov	r1, r4
 800dc62:	028a      	lsls	r2, r1, #10
 800dc64:	4610      	mov	r0, r2
 800dc66:	4619      	mov	r1, r3
 800dc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	61bb      	str	r3, [r7, #24]
 800dc6e:	61fa      	str	r2, [r7, #28]
 800dc70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dc74:	f7f2 fcf8 	bl	8000668 <__aeabi_uldivmod>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800dc80:	4b0b      	ldr	r3, [pc, #44]	; (800dcb0 <HAL_RCC_GetSysClockFreq+0x200>)
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	0c1b      	lsrs	r3, r3, #16
 800dc86:	f003 0303 	and.w	r3, r3, #3
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800dc90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dc9a:	e002      	b.n	800dca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800dc9c:	4b05      	ldr	r3, [pc, #20]	; (800dcb4 <HAL_RCC_GetSysClockFreq+0x204>)
 800dc9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800dca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800dca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3750      	adds	r7, #80	; 0x50
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcae:	bf00      	nop
 800dcb0:	40023800 	.word	0x40023800
 800dcb4:	00f42400 	.word	0x00f42400
 800dcb8:	007a1200 	.word	0x007a1200

0800dcbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dcc0:	4b03      	ldr	r3, [pc, #12]	; (800dcd0 <HAL_RCC_GetHCLKFreq+0x14>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	20000058 	.word	0x20000058

0800dcd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dcd8:	f7ff fff0 	bl	800dcbc <HAL_RCC_GetHCLKFreq>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	0a9b      	lsrs	r3, r3, #10
 800dce4:	f003 0307 	and.w	r3, r3, #7
 800dce8:	4903      	ldr	r1, [pc, #12]	; (800dcf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dcea:	5ccb      	ldrb	r3, [r1, r3]
 800dcec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	40023800 	.word	0x40023800
 800dcf8:	08018324 	.word	0x08018324

0800dcfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dd00:	f7ff ffdc 	bl	800dcbc <HAL_RCC_GetHCLKFreq>
 800dd04:	4602      	mov	r2, r0
 800dd06:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	0b5b      	lsrs	r3, r3, #13
 800dd0c:	f003 0307 	and.w	r3, r3, #7
 800dd10:	4903      	ldr	r1, [pc, #12]	; (800dd20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dd12:	5ccb      	ldrb	r3, [r1, r3]
 800dd14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	40023800 	.word	0x40023800
 800dd20:	08018324 	.word	0x08018324

0800dd24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	220f      	movs	r2, #15
 800dd32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd34:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <HAL_RCC_GetClockConfig+0x5c>)
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	f003 0203 	and.w	r2, r3, #3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dd40:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <HAL_RCC_GetClockConfig+0x5c>)
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dd4c:	4b0c      	ldr	r3, [pc, #48]	; (800dd80 <HAL_RCC_GetClockConfig+0x5c>)
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800dd58:	4b09      	ldr	r3, [pc, #36]	; (800dd80 <HAL_RCC_GetClockConfig+0x5c>)
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	08db      	lsrs	r3, r3, #3
 800dd5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dd66:	4b07      	ldr	r3, [pc, #28]	; (800dd84 <HAL_RCC_GetClockConfig+0x60>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f003 020f 	and.w	r2, r3, #15
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	601a      	str	r2, [r3, #0]
}
 800dd72:	bf00      	nop
 800dd74:	370c      	adds	r7, #12
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	40023800 	.word	0x40023800
 800dd84:	40023c00 	.word	0x40023c00

0800dd88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b088      	sub	sp, #32
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f003 0301 	and.w	r3, r3, #1
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d012      	beq.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ddb0:	4b69      	ldr	r3, [pc, #420]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddb2:	689b      	ldr	r3, [r3, #8]
 800ddb4:	4a68      	ldr	r2, [pc, #416]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddb6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ddba:	6093      	str	r3, [r2, #8]
 800ddbc:	4b66      	ldr	r3, [pc, #408]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddbe:	689a      	ldr	r2, [r3, #8]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc4:	4964      	ldr	r1, [pc, #400]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d101      	bne.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d017      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dde2:	4b5d      	ldr	r3, [pc, #372]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dde8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf0:	4959      	ldr	r1, [pc, #356]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de00:	d101      	bne.n	800de06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800de02:	2301      	movs	r3, #1
 800de04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d101      	bne.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800de0e:	2301      	movs	r3, #1
 800de10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d017      	beq.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800de1e:	4b4e      	ldr	r3, [pc, #312]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2c:	494a      	ldr	r1, [pc, #296]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de2e:	4313      	orrs	r3, r2
 800de30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de3c:	d101      	bne.n	800de42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800de3e:	2301      	movs	r3, #1
 800de40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800de4a:	2301      	movs	r3, #1
 800de4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800de5a:	2301      	movs	r3, #1
 800de5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f003 0320 	and.w	r3, r3, #32
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 808b 	beq.w	800df82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800de6c:	4b3a      	ldr	r3, [pc, #232]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de70:	4a39      	ldr	r2, [pc, #228]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de76:	6413      	str	r3, [r2, #64]	; 0x40
 800de78:	4b37      	ldr	r3, [pc, #220]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800de7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de80:	60bb      	str	r3, [r7, #8]
 800de82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800de84:	4b35      	ldr	r3, [pc, #212]	; (800df5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a34      	ldr	r2, [pc, #208]	; (800df5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800de8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de90:	f7fd fe9a 	bl	800bbc8 <HAL_GetTick>
 800de94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800de96:	e008      	b.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de98:	f7fd fe96 	bl	800bbc8 <HAL_GetTick>
 800de9c:	4602      	mov	r2, r0
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	2b64      	cmp	r3, #100	; 0x64
 800dea4:	d901      	bls.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e38f      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800deaa:	4b2c      	ldr	r3, [pc, #176]	; (800df5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d0f0      	beq.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800deb6:	4b28      	ldr	r3, [pc, #160]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800deb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800debe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d035      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d02e      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ded4:	4b20      	ldr	r3, [pc, #128]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ded6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dedc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800dede:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dee2:	4a1d      	ldr	r2, [pc, #116]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dee8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800deea:	4b1b      	ldr	r3, [pc, #108]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800deec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deee:	4a1a      	ldr	r2, [pc, #104]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800def0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800def4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800def6:	4a18      	ldr	r2, [pc, #96]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800defc:	4b16      	ldr	r3, [pc, #88]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800defe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	2b01      	cmp	r3, #1
 800df06:	d114      	bne.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df08:	f7fd fe5e 	bl	800bbc8 <HAL_GetTick>
 800df0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800df0e:	e00a      	b.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800df10:	f7fd fe5a 	bl	800bbc8 <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800df1e:	4293      	cmp	r3, r2
 800df20:	d901      	bls.n	800df26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e351      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df2a:	f003 0302 	and.w	r3, r3, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d0ee      	beq.n	800df10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df3e:	d111      	bne.n	800df64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800df40:	4b05      	ldr	r3, [pc, #20]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800df4c:	4b04      	ldr	r3, [pc, #16]	; (800df60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800df4e:	400b      	ands	r3, r1
 800df50:	4901      	ldr	r1, [pc, #4]	; (800df58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800df52:	4313      	orrs	r3, r2
 800df54:	608b      	str	r3, [r1, #8]
 800df56:	e00b      	b.n	800df70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800df58:	40023800 	.word	0x40023800
 800df5c:	40007000 	.word	0x40007000
 800df60:	0ffffcff 	.word	0x0ffffcff
 800df64:	4bac      	ldr	r3, [pc, #688]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	4aab      	ldr	r2, [pc, #684]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800df6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800df6e:	6093      	str	r3, [r2, #8]
 800df70:	4ba9      	ldr	r3, [pc, #676]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800df72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df7c:	49a6      	ldr	r1, [pc, #664]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800df7e:	4313      	orrs	r3, r2
 800df80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0310 	and.w	r3, r3, #16
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d010      	beq.n	800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800df8e:	4ba2      	ldr	r3, [pc, #648]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800df90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df94:	4aa0      	ldr	r2, [pc, #640]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800df96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800df9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800df9e:	4b9e      	ldr	r3, [pc, #632]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dfa0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa8:	499b      	ldr	r1, [pc, #620]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00a      	beq.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dfbc:	4b96      	ldr	r3, [pc, #600]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfca:	4993      	ldr	r1, [pc, #588]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dfde:	4b8e      	ldr	r3, [pc, #568]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dfe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfec:	498a      	ldr	r1, [pc, #552]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800dfee:	4313      	orrs	r3, r2
 800dff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00a      	beq.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e000:	4b85      	ldr	r3, [pc, #532]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e006:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e00e:	4982      	ldr	r1, [pc, #520]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e010:	4313      	orrs	r3, r2
 800e012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00a      	beq.n	800e038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e022:	4b7d      	ldr	r3, [pc, #500]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e028:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e030:	4979      	ldr	r1, [pc, #484]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e032:	4313      	orrs	r3, r2
 800e034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e040:	2b00      	cmp	r3, #0
 800e042:	d00a      	beq.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e044:	4b74      	ldr	r3, [pc, #464]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e04a:	f023 0203 	bic.w	r2, r3, #3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e052:	4971      	ldr	r1, [pc, #452]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e054:	4313      	orrs	r3, r2
 800e056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00a      	beq.n	800e07c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e066:	4b6c      	ldr	r3, [pc, #432]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e06c:	f023 020c 	bic.w	r2, r3, #12
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e074:	4968      	ldr	r1, [pc, #416]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e076:	4313      	orrs	r3, r2
 800e078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00a      	beq.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e088:	4b63      	ldr	r3, [pc, #396]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e08e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e096:	4960      	ldr	r1, [pc, #384]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e098:	4313      	orrs	r3, r2
 800e09a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00a      	beq.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e0aa:	4b5b      	ldr	r3, [pc, #364]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b8:	4957      	ldr	r1, [pc, #348]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00a      	beq.n	800e0e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e0cc:	4b52      	ldr	r3, [pc, #328]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0da:	494f      	ldr	r1, [pc, #316]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e0dc:	4313      	orrs	r3, r2
 800e0de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00a      	beq.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e0ee:	4b4a      	ldr	r3, [pc, #296]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0fc:	4946      	ldr	r1, [pc, #280]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e0fe:	4313      	orrs	r3, r2
 800e100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00a      	beq.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e110:	4b41      	ldr	r3, [pc, #260]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e11e:	493e      	ldr	r1, [pc, #248]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e120:	4313      	orrs	r3, r2
 800e122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e132:	4b39      	ldr	r3, [pc, #228]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e140:	4935      	ldr	r1, [pc, #212]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e142:	4313      	orrs	r3, r2
 800e144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00a      	beq.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e154:	4b30      	ldr	r3, [pc, #192]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e15a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e162:	492d      	ldr	r1, [pc, #180]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e164:	4313      	orrs	r3, r2
 800e166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e172:	2b00      	cmp	r3, #0
 800e174:	d011      	beq.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e176:	4b28      	ldr	r3, [pc, #160]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e17c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e184:	4924      	ldr	r1, [pc, #144]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e186:	4313      	orrs	r3, r2
 800e188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e194:	d101      	bne.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e196:	2301      	movs	r3, #1
 800e198:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f003 0308 	and.w	r3, r3, #8
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00a      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e1b6:	4b18      	ldr	r3, [pc, #96]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e1b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1c4:	4914      	ldr	r1, [pc, #80]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00b      	beq.n	800e1f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e1d8:	4b0f      	ldr	r3, [pc, #60]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1e8:	490b      	ldr	r1, [pc, #44]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00f      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e1fc:	4b06      	ldr	r3, [pc, #24]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e1fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e202:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e20c:	4902      	ldr	r1, [pc, #8]	; (800e218 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800e20e:	4313      	orrs	r3, r2
 800e210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e214:	e002      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x494>
 800e216:	bf00      	nop
 800e218:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e224:	2b00      	cmp	r3, #0
 800e226:	d00b      	beq.n	800e240 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e228:	4b8a      	ldr	r3, [pc, #552]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e22a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e22e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e238:	4986      	ldr	r1, [pc, #536]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e23a:	4313      	orrs	r3, r2
 800e23c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00b      	beq.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e24c:	4b81      	ldr	r3, [pc, #516]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e25c:	497d      	ldr	r1, [pc, #500]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	2b01      	cmp	r3, #1
 800e268:	d006      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e272:	2b00      	cmp	r3, #0
 800e274:	f000 80d6 	beq.w	800e424 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e278:	4b76      	ldr	r3, [pc, #472]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a75      	ldr	r2, [pc, #468]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e27e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e284:	f7fd fca0 	bl	800bbc8 <HAL_GetTick>
 800e288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e28a:	e008      	b.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e28c:	f7fd fc9c 	bl	800bbc8 <HAL_GetTick>
 800e290:	4602      	mov	r2, r0
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	2b64      	cmp	r3, #100	; 0x64
 800e298:	d901      	bls.n	800e29e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e29a:	2303      	movs	r3, #3
 800e29c:	e195      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e29e:	4b6d      	ldr	r3, [pc, #436]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1f0      	bne.n	800e28c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d021      	beq.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d11d      	bne.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e2be:	4b65      	ldr	r3, [pc, #404]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e2c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2c4:	0c1b      	lsrs	r3, r3, #16
 800e2c6:	f003 0303 	and.w	r3, r3, #3
 800e2ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e2cc:	4b61      	ldr	r3, [pc, #388]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2d2:	0e1b      	lsrs	r3, r3, #24
 800e2d4:	f003 030f 	and.w	r3, r3, #15
 800e2d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	019a      	lsls	r2, r3, #6
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	041b      	lsls	r3, r3, #16
 800e2e4:	431a      	orrs	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	061b      	lsls	r3, r3, #24
 800e2ea:	431a      	orrs	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	689b      	ldr	r3, [r3, #8]
 800e2f0:	071b      	lsls	r3, r3, #28
 800e2f2:	4958      	ldr	r1, [pc, #352]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e302:	2b00      	cmp	r3, #0
 800e304:	d004      	beq.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e30e:	d00a      	beq.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d02e      	beq.n	800e37a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e324:	d129      	bne.n	800e37a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e326:	4b4b      	ldr	r3, [pc, #300]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e32c:	0c1b      	lsrs	r3, r3, #16
 800e32e:	f003 0303 	and.w	r3, r3, #3
 800e332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e334:	4b47      	ldr	r3, [pc, #284]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e33a:	0f1b      	lsrs	r3, r3, #28
 800e33c:	f003 0307 	and.w	r3, r3, #7
 800e340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	019a      	lsls	r2, r3, #6
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	041b      	lsls	r3, r3, #16
 800e34c:	431a      	orrs	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	061b      	lsls	r3, r3, #24
 800e354:	431a      	orrs	r2, r3
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	071b      	lsls	r3, r3, #28
 800e35a:	493e      	ldr	r1, [pc, #248]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e35c:	4313      	orrs	r3, r2
 800e35e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e362:	4b3c      	ldr	r3, [pc, #240]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e368:	f023 021f 	bic.w	r2, r3, #31
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	3b01      	subs	r3, #1
 800e372:	4938      	ldr	r1, [pc, #224]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e374:	4313      	orrs	r3, r2
 800e376:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e382:	2b00      	cmp	r3, #0
 800e384:	d01d      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e386:	4b33      	ldr	r3, [pc, #204]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e38c:	0e1b      	lsrs	r3, r3, #24
 800e38e:	f003 030f 	and.w	r3, r3, #15
 800e392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e394:	4b2f      	ldr	r3, [pc, #188]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e39a:	0f1b      	lsrs	r3, r3, #28
 800e39c:	f003 0307 	and.w	r3, r3, #7
 800e3a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	019a      	lsls	r2, r3, #6
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	041b      	lsls	r3, r3, #16
 800e3ae:	431a      	orrs	r2, r3
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	061b      	lsls	r3, r3, #24
 800e3b4:	431a      	orrs	r2, r3
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	071b      	lsls	r3, r3, #28
 800e3ba:	4926      	ldr	r1, [pc, #152]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d011      	beq.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	019a      	lsls	r2, r3, #6
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	691b      	ldr	r3, [r3, #16]
 800e3d8:	041b      	lsls	r3, r3, #16
 800e3da:	431a      	orrs	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	061b      	lsls	r3, r3, #24
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	071b      	lsls	r3, r3, #28
 800e3ea:	491a      	ldr	r1, [pc, #104]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e3f2:	4b18      	ldr	r3, [pc, #96]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a17      	ldr	r2, [pc, #92]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e3f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e3fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3fe:	f7fd fbe3 	bl	800bbc8 <HAL_GetTick>
 800e402:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e404:	e008      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e406:	f7fd fbdf 	bl	800bbc8 <HAL_GetTick>
 800e40a:	4602      	mov	r2, r0
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	2b64      	cmp	r3, #100	; 0x64
 800e412:	d901      	bls.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e414:	2303      	movs	r3, #3
 800e416:	e0d8      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e418:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0f0      	beq.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	2b01      	cmp	r3, #1
 800e428:	f040 80ce 	bne.w	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e42c:	4b09      	ldr	r3, [pc, #36]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4a08      	ldr	r2, [pc, #32]	; (800e454 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800e432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e438:	f7fd fbc6 	bl	800bbc8 <HAL_GetTick>
 800e43c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e43e:	e00b      	b.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e440:	f7fd fbc2 	bl	800bbc8 <HAL_GetTick>
 800e444:	4602      	mov	r2, r0
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	2b64      	cmp	r3, #100	; 0x64
 800e44c:	d904      	bls.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	e0bb      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 800e452:	bf00      	nop
 800e454:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e458:	4b5e      	ldr	r3, [pc, #376]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e464:	d0ec      	beq.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d009      	beq.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e482:	2b00      	cmp	r3, #0
 800e484:	d02e      	beq.n	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d12a      	bne.n	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e48e:	4b51      	ldr	r3, [pc, #324]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e494:	0c1b      	lsrs	r3, r3, #16
 800e496:	f003 0303 	and.w	r3, r3, #3
 800e49a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e49c:	4b4d      	ldr	r3, [pc, #308]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4a2:	0f1b      	lsrs	r3, r3, #28
 800e4a4:	f003 0307 	and.w	r3, r3, #7
 800e4a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	695b      	ldr	r3, [r3, #20]
 800e4ae:	019a      	lsls	r2, r3, #6
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	041b      	lsls	r3, r3, #16
 800e4b4:	431a      	orrs	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	699b      	ldr	r3, [r3, #24]
 800e4ba:	061b      	lsls	r3, r3, #24
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	071b      	lsls	r3, r3, #28
 800e4c2:	4944      	ldr	r1, [pc, #272]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e4ca:	4b42      	ldr	r3, [pc, #264]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e4cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	021b      	lsls	r3, r3, #8
 800e4dc:	493d      	ldr	r1, [pc, #244]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d022      	beq.n	800e536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4f8:	d11d      	bne.n	800e536 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e4fa:	4b36      	ldr	r3, [pc, #216]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e500:	0e1b      	lsrs	r3, r3, #24
 800e502:	f003 030f 	and.w	r3, r3, #15
 800e506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e508:	4b32      	ldr	r3, [pc, #200]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e50e:	0f1b      	lsrs	r3, r3, #28
 800e510:	f003 0307 	and.w	r3, r3, #7
 800e514:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	695b      	ldr	r3, [r3, #20]
 800e51a:	019a      	lsls	r2, r3, #6
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	041b      	lsls	r3, r3, #16
 800e522:	431a      	orrs	r2, r3
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	061b      	lsls	r3, r3, #24
 800e528:	431a      	orrs	r2, r3
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	071b      	lsls	r3, r3, #28
 800e52e:	4929      	ldr	r1, [pc, #164]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e530:	4313      	orrs	r3, r2
 800e532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f003 0308 	and.w	r3, r3, #8
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d028      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e542:	4b24      	ldr	r3, [pc, #144]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e548:	0e1b      	lsrs	r3, r3, #24
 800e54a:	f003 030f 	and.w	r3, r3, #15
 800e54e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e550:	4b20      	ldr	r3, [pc, #128]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e556:	0c1b      	lsrs	r3, r3, #16
 800e558:	f003 0303 	and.w	r3, r3, #3
 800e55c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	695b      	ldr	r3, [r3, #20]
 800e562:	019a      	lsls	r2, r3, #6
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	041b      	lsls	r3, r3, #16
 800e568:	431a      	orrs	r2, r3
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	061b      	lsls	r3, r3, #24
 800e56e:	431a      	orrs	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	69db      	ldr	r3, [r3, #28]
 800e574:	071b      	lsls	r3, r3, #28
 800e576:	4917      	ldr	r1, [pc, #92]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e578:	4313      	orrs	r3, r2
 800e57a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e57e:	4b15      	ldr	r3, [pc, #84]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58c:	4911      	ldr	r1, [pc, #68]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e58e:	4313      	orrs	r3, r2
 800e590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e594:	4b0f      	ldr	r3, [pc, #60]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a0e      	ldr	r2, [pc, #56]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e59a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e59e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5a0:	f7fd fb12 	bl	800bbc8 <HAL_GetTick>
 800e5a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e5a6:	e008      	b.n	800e5ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e5a8:	f7fd fb0e 	bl	800bbc8 <HAL_GetTick>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	2b64      	cmp	r3, #100	; 0x64
 800e5b4:	d901      	bls.n	800e5ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	e007      	b.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e5ba:	4b06      	ldr	r3, [pc, #24]	; (800e5d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5c6:	d1ef      	bne.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3720      	adds	r7, #32
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	40023800 	.word	0x40023800

0800e5d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d101      	bne.n	800e5ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e049      	b.n	800e67e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 f841 	bl	800e686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2202      	movs	r2, #2
 800e608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	3304      	adds	r3, #4
 800e614:	4619      	mov	r1, r3
 800e616:	4610      	mov	r0, r2
 800e618:	f000 fa00 	bl	800ea1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2201      	movs	r2, #1
 800e620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2201      	movs	r2, #1
 800e628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2201      	movs	r2, #1
 800e650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2201      	movs	r2, #1
 800e658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2201      	movs	r2, #1
 800e660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2201      	movs	r2, #1
 800e670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e68e:	bf00      	nop
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
	...

0800e69c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d001      	beq.n	800e6b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e054      	b.n	800e75e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68da      	ldr	r2, [r3, #12]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f042 0201 	orr.w	r2, r2, #1
 800e6ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a26      	ldr	r2, [pc, #152]	; (800e76c <HAL_TIM_Base_Start_IT+0xd0>)
 800e6d2:	4293      	cmp	r3, r2
 800e6d4:	d022      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6de:	d01d      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4a22      	ldr	r2, [pc, #136]	; (800e770 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d018      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4a21      	ldr	r2, [pc, #132]	; (800e774 <HAL_TIM_Base_Start_IT+0xd8>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d013      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a1f      	ldr	r2, [pc, #124]	; (800e778 <HAL_TIM_Base_Start_IT+0xdc>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d00e      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	4a1e      	ldr	r2, [pc, #120]	; (800e77c <HAL_TIM_Base_Start_IT+0xe0>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d009      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a1c      	ldr	r2, [pc, #112]	; (800e780 <HAL_TIM_Base_Start_IT+0xe4>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d004      	beq.n	800e71c <HAL_TIM_Base_Start_IT+0x80>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	4a1b      	ldr	r2, [pc, #108]	; (800e784 <HAL_TIM_Base_Start_IT+0xe8>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d115      	bne.n	800e748 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	689a      	ldr	r2, [r3, #8]
 800e722:	4b19      	ldr	r3, [pc, #100]	; (800e788 <HAL_TIM_Base_Start_IT+0xec>)
 800e724:	4013      	ands	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b06      	cmp	r3, #6
 800e72c:	d015      	beq.n	800e75a <HAL_TIM_Base_Start_IT+0xbe>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e734:	d011      	beq.n	800e75a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f042 0201 	orr.w	r2, r2, #1
 800e744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e746:	e008      	b.n	800e75a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f042 0201 	orr.w	r2, r2, #1
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	e000      	b.n	800e75c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e75a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3714      	adds	r7, #20
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	40010000 	.word	0x40010000
 800e770:	40000400 	.word	0x40000400
 800e774:	40000800 	.word	0x40000800
 800e778:	40000c00 	.word	0x40000c00
 800e77c:	40010400 	.word	0x40010400
 800e780:	40014000 	.word	0x40014000
 800e784:	40001800 	.word	0x40001800
 800e788:	00010007 	.word	0x00010007

0800e78c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	691b      	ldr	r3, [r3, #16]
 800e79a:	f003 0302 	and.w	r3, r3, #2
 800e79e:	2b02      	cmp	r3, #2
 800e7a0:	d122      	bne.n	800e7e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	f003 0302 	and.w	r3, r3, #2
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d11b      	bne.n	800e7e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f06f 0202 	mvn.w	r2, #2
 800e7b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	699b      	ldr	r3, [r3, #24]
 800e7c6:	f003 0303 	and.w	r3, r3, #3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d003      	beq.n	800e7d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f905 	bl	800e9de <HAL_TIM_IC_CaptureCallback>
 800e7d4:	e005      	b.n	800e7e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f8f7 	bl	800e9ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f908 	bl	800e9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	f003 0304 	and.w	r3, r3, #4
 800e7f2:	2b04      	cmp	r3, #4
 800e7f4:	d122      	bne.n	800e83c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	f003 0304 	and.w	r3, r3, #4
 800e800:	2b04      	cmp	r3, #4
 800e802:	d11b      	bne.n	800e83c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f06f 0204 	mvn.w	r2, #4
 800e80c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2202      	movs	r2, #2
 800e812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	699b      	ldr	r3, [r3, #24]
 800e81a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d003      	beq.n	800e82a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 f8db 	bl	800e9de <HAL_TIM_IC_CaptureCallback>
 800e828:	e005      	b.n	800e836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f8cd 	bl	800e9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 f8de 	bl	800e9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2200      	movs	r2, #0
 800e83a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	f003 0308 	and.w	r3, r3, #8
 800e846:	2b08      	cmp	r3, #8
 800e848:	d122      	bne.n	800e890 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	f003 0308 	and.w	r3, r3, #8
 800e854:	2b08      	cmp	r3, #8
 800e856:	d11b      	bne.n	800e890 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f06f 0208 	mvn.w	r2, #8
 800e860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2204      	movs	r2, #4
 800e866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	f003 0303 	and.w	r3, r3, #3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d003      	beq.n	800e87e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f8b1 	bl	800e9de <HAL_TIM_IC_CaptureCallback>
 800e87c:	e005      	b.n	800e88a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f000 f8a3 	bl	800e9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 f8b4 	bl	800e9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	f003 0310 	and.w	r3, r3, #16
 800e89a:	2b10      	cmp	r3, #16
 800e89c:	d122      	bne.n	800e8e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	f003 0310 	and.w	r3, r3, #16
 800e8a8:	2b10      	cmp	r3, #16
 800e8aa:	d11b      	bne.n	800e8e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f06f 0210 	mvn.w	r2, #16
 800e8b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2208      	movs	r2, #8
 800e8ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	69db      	ldr	r3, [r3, #28]
 800e8c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f000 f887 	bl	800e9de <HAL_TIM_IC_CaptureCallback>
 800e8d0:	e005      	b.n	800e8de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f000 f879 	bl	800e9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f88a 	bl	800e9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	691b      	ldr	r3, [r3, #16]
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	2b01      	cmp	r3, #1
 800e8f0:	d10e      	bne.n	800e910 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	f003 0301 	and.w	r3, r3, #1
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d107      	bne.n	800e910 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f06f 0201 	mvn.w	r2, #1
 800e908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f7f5 fea4 	bl	8004658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e91a:	2b80      	cmp	r3, #128	; 0x80
 800e91c:	d10e      	bne.n	800e93c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e928:	2b80      	cmp	r3, #128	; 0x80
 800e92a:	d107      	bne.n	800e93c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 f91a 	bl	800eb70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e94a:	d10e      	bne.n	800e96a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e956:	2b80      	cmp	r3, #128	; 0x80
 800e958:	d107      	bne.n	800e96a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f90d 	bl	800eb84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e974:	2b40      	cmp	r3, #64	; 0x40
 800e976:	d10e      	bne.n	800e996 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e982:	2b40      	cmp	r3, #64	; 0x40
 800e984:	d107      	bne.n	800e996 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e98e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 f838 	bl	800ea06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	f003 0320 	and.w	r3, r3, #32
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d10e      	bne.n	800e9c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	f003 0320 	and.w	r3, r3, #32
 800e9ae:	2b20      	cmp	r3, #32
 800e9b0:	d107      	bne.n	800e9c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f06f 0220 	mvn.w	r2, #32
 800e9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f000 f8cd 	bl	800eb5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e9c2:	bf00      	nop
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b083      	sub	sp, #12
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9d2:	bf00      	nop
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b083      	sub	sp, #12
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e9e6:	bf00      	nop
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b083      	sub	sp, #12
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e9fa:	bf00      	nop
 800e9fc:	370c      	adds	r7, #12
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr

0800ea06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ea06:	b480      	push	{r7}
 800ea08:	b083      	sub	sp, #12
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ea0e:	bf00      	nop
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
	...

0800ea1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b085      	sub	sp, #20
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a40      	ldr	r2, [pc, #256]	; (800eb30 <TIM_Base_SetConfig+0x114>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d013      	beq.n	800ea5c <TIM_Base_SetConfig+0x40>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea3a:	d00f      	beq.n	800ea5c <TIM_Base_SetConfig+0x40>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a3d      	ldr	r2, [pc, #244]	; (800eb34 <TIM_Base_SetConfig+0x118>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d00b      	beq.n	800ea5c <TIM_Base_SetConfig+0x40>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a3c      	ldr	r2, [pc, #240]	; (800eb38 <TIM_Base_SetConfig+0x11c>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d007      	beq.n	800ea5c <TIM_Base_SetConfig+0x40>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a3b      	ldr	r2, [pc, #236]	; (800eb3c <TIM_Base_SetConfig+0x120>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d003      	beq.n	800ea5c <TIM_Base_SetConfig+0x40>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a3a      	ldr	r2, [pc, #232]	; (800eb40 <TIM_Base_SetConfig+0x124>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d108      	bne.n	800ea6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a2f      	ldr	r2, [pc, #188]	; (800eb30 <TIM_Base_SetConfig+0x114>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d02b      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea7c:	d027      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a2c      	ldr	r2, [pc, #176]	; (800eb34 <TIM_Base_SetConfig+0x118>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d023      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4a2b      	ldr	r2, [pc, #172]	; (800eb38 <TIM_Base_SetConfig+0x11c>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d01f      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4a2a      	ldr	r2, [pc, #168]	; (800eb3c <TIM_Base_SetConfig+0x120>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d01b      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a29      	ldr	r2, [pc, #164]	; (800eb40 <TIM_Base_SetConfig+0x124>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d017      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a28      	ldr	r2, [pc, #160]	; (800eb44 <TIM_Base_SetConfig+0x128>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d013      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a27      	ldr	r2, [pc, #156]	; (800eb48 <TIM_Base_SetConfig+0x12c>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d00f      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a26      	ldr	r2, [pc, #152]	; (800eb4c <TIM_Base_SetConfig+0x130>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d00b      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a25      	ldr	r2, [pc, #148]	; (800eb50 <TIM_Base_SetConfig+0x134>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d007      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a24      	ldr	r2, [pc, #144]	; (800eb54 <TIM_Base_SetConfig+0x138>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d003      	beq.n	800eace <TIM_Base_SetConfig+0xb2>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a23      	ldr	r2, [pc, #140]	; (800eb58 <TIM_Base_SetConfig+0x13c>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d108      	bne.n	800eae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ead4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	68fa      	ldr	r2, [r7, #12]
 800eadc:	4313      	orrs	r3, r2
 800eade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	689a      	ldr	r2, [r3, #8]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4a0a      	ldr	r2, [pc, #40]	; (800eb30 <TIM_Base_SetConfig+0x114>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d003      	beq.n	800eb14 <TIM_Base_SetConfig+0xf8>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4a0c      	ldr	r2, [pc, #48]	; (800eb40 <TIM_Base_SetConfig+0x124>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d103      	bne.n	800eb1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	691a      	ldr	r2, [r3, #16]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	615a      	str	r2, [r3, #20]
}
 800eb22:	bf00      	nop
 800eb24:	3714      	adds	r7, #20
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	40010000 	.word	0x40010000
 800eb34:	40000400 	.word	0x40000400
 800eb38:	40000800 	.word	0x40000800
 800eb3c:	40000c00 	.word	0x40000c00
 800eb40:	40010400 	.word	0x40010400
 800eb44:	40014000 	.word	0x40014000
 800eb48:	40014400 	.word	0x40014400
 800eb4c:	40014800 	.word	0x40014800
 800eb50:	40001800 	.word	0x40001800
 800eb54:	40001c00 	.word	0x40001c00
 800eb58:	40002000 	.word	0x40002000

0800eb5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb64:	bf00      	nop
 800eb66:	370c      	adds	r7, #12
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr

0800eb70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e040      	b.n	800ec2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d106      	bne.n	800ebc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7f7 fae4 	bl	8006188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2224      	movs	r2, #36	; 0x24
 800ebc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f022 0201 	bic.w	r2, r2, #1
 800ebd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 f8b0 	bl	800ed3c <UART_SetConfig>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d101      	bne.n	800ebe6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e022      	b.n	800ec2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fb08 	bl	800f204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	689a      	ldr	r2, [r3, #8]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f042 0201 	orr.w	r2, r2, #1
 800ec22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fb8f 	bl	800f348 <UART_CheckIdleState>
 800ec2a:	4603      	mov	r3, r0
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b08a      	sub	sp, #40	; 0x28
 800ec38:	af02      	add	r7, sp, #8
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	4613      	mov	r3, r2
 800ec42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec48:	2b20      	cmp	r3, #32
 800ec4a:	d171      	bne.n	800ed30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <HAL_UART_Transmit+0x24>
 800ec52:	88fb      	ldrh	r3, [r7, #6]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d101      	bne.n	800ec5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e06a      	b.n	800ed32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2221      	movs	r2, #33	; 0x21
 800ec68:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec6a:	f7fc ffad 	bl	800bbc8 <HAL_GetTick>
 800ec6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	88fa      	ldrh	r2, [r7, #6]
 800ec74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	88fa      	ldrh	r2, [r7, #6]
 800ec7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec88:	d108      	bne.n	800ec9c <HAL_UART_Transmit+0x68>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d104      	bne.n	800ec9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	61bb      	str	r3, [r7, #24]
 800ec9a:	e003      	b.n	800eca4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eca4:	e02c      	b.n	800ed00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2200      	movs	r2, #0
 800ecae:	2180      	movs	r1, #128	; 0x80
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f000 fb96 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d001      	beq.n	800ecc0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e038      	b.n	800ed32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10b      	bne.n	800ecde <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	881b      	ldrh	r3, [r3, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	3302      	adds	r3, #2
 800ecda:	61bb      	str	r3, [r7, #24]
 800ecdc:	e007      	b.n	800ecee <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	781a      	ldrb	r2, [r3, #0]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	3301      	adds	r3, #1
 800ecec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	3b01      	subs	r3, #1
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1cc      	bne.n	800eca6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	2200      	movs	r2, #0
 800ed14:	2140      	movs	r1, #64	; 0x40
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	f000 fb63 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d001      	beq.n	800ed26 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800ed22:	2303      	movs	r3, #3
 800ed24:	e005      	b.n	800ed32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2220      	movs	r2, #32
 800ed2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e000      	b.n	800ed32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ed30:	2302      	movs	r3, #2
  }
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3720      	adds	r7, #32
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
	...

0800ed3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b088      	sub	sp, #32
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed44:	2300      	movs	r3, #0
 800ed46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	689a      	ldr	r2, [r3, #8]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	691b      	ldr	r3, [r3, #16]
 800ed50:	431a      	orrs	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	431a      	orrs	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	69db      	ldr	r3, [r3, #28]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	4ba6      	ldr	r3, [pc, #664]	; (800f000 <UART_SetConfig+0x2c4>)
 800ed68:	4013      	ands	r3, r2
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	6812      	ldr	r2, [r2, #0]
 800ed6e:	6979      	ldr	r1, [r7, #20]
 800ed70:	430b      	orrs	r3, r1
 800ed72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	68da      	ldr	r2, [r3, #12]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	430a      	orrs	r2, r1
 800ed88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	699b      	ldr	r3, [r3, #24]
 800ed8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	4313      	orrs	r3, r2
 800ed98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	689b      	ldr	r3, [r3, #8]
 800eda0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	697a      	ldr	r2, [r7, #20]
 800edaa:	430a      	orrs	r2, r1
 800edac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a94      	ldr	r2, [pc, #592]	; (800f004 <UART_SetConfig+0x2c8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d120      	bne.n	800edfa <UART_SetConfig+0xbe>
 800edb8:	4b93      	ldr	r3, [pc, #588]	; (800f008 <UART_SetConfig+0x2cc>)
 800edba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edbe:	f003 0303 	and.w	r3, r3, #3
 800edc2:	2b03      	cmp	r3, #3
 800edc4:	d816      	bhi.n	800edf4 <UART_SetConfig+0xb8>
 800edc6:	a201      	add	r2, pc, #4	; (adr r2, 800edcc <UART_SetConfig+0x90>)
 800edc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edcc:	0800eddd 	.word	0x0800eddd
 800edd0:	0800ede9 	.word	0x0800ede9
 800edd4:	0800ede3 	.word	0x0800ede3
 800edd8:	0800edef 	.word	0x0800edef
 800eddc:	2301      	movs	r3, #1
 800edde:	77fb      	strb	r3, [r7, #31]
 800ede0:	e150      	b.n	800f084 <UART_SetConfig+0x348>
 800ede2:	2302      	movs	r3, #2
 800ede4:	77fb      	strb	r3, [r7, #31]
 800ede6:	e14d      	b.n	800f084 <UART_SetConfig+0x348>
 800ede8:	2304      	movs	r3, #4
 800edea:	77fb      	strb	r3, [r7, #31]
 800edec:	e14a      	b.n	800f084 <UART_SetConfig+0x348>
 800edee:	2308      	movs	r3, #8
 800edf0:	77fb      	strb	r3, [r7, #31]
 800edf2:	e147      	b.n	800f084 <UART_SetConfig+0x348>
 800edf4:	2310      	movs	r3, #16
 800edf6:	77fb      	strb	r3, [r7, #31]
 800edf8:	e144      	b.n	800f084 <UART_SetConfig+0x348>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a83      	ldr	r2, [pc, #524]	; (800f00c <UART_SetConfig+0x2d0>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d132      	bne.n	800ee6a <UART_SetConfig+0x12e>
 800ee04:	4b80      	ldr	r3, [pc, #512]	; (800f008 <UART_SetConfig+0x2cc>)
 800ee06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee0a:	f003 030c 	and.w	r3, r3, #12
 800ee0e:	2b0c      	cmp	r3, #12
 800ee10:	d828      	bhi.n	800ee64 <UART_SetConfig+0x128>
 800ee12:	a201      	add	r2, pc, #4	; (adr r2, 800ee18 <UART_SetConfig+0xdc>)
 800ee14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee18:	0800ee4d 	.word	0x0800ee4d
 800ee1c:	0800ee65 	.word	0x0800ee65
 800ee20:	0800ee65 	.word	0x0800ee65
 800ee24:	0800ee65 	.word	0x0800ee65
 800ee28:	0800ee59 	.word	0x0800ee59
 800ee2c:	0800ee65 	.word	0x0800ee65
 800ee30:	0800ee65 	.word	0x0800ee65
 800ee34:	0800ee65 	.word	0x0800ee65
 800ee38:	0800ee53 	.word	0x0800ee53
 800ee3c:	0800ee65 	.word	0x0800ee65
 800ee40:	0800ee65 	.word	0x0800ee65
 800ee44:	0800ee65 	.word	0x0800ee65
 800ee48:	0800ee5f 	.word	0x0800ee5f
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	77fb      	strb	r3, [r7, #31]
 800ee50:	e118      	b.n	800f084 <UART_SetConfig+0x348>
 800ee52:	2302      	movs	r3, #2
 800ee54:	77fb      	strb	r3, [r7, #31]
 800ee56:	e115      	b.n	800f084 <UART_SetConfig+0x348>
 800ee58:	2304      	movs	r3, #4
 800ee5a:	77fb      	strb	r3, [r7, #31]
 800ee5c:	e112      	b.n	800f084 <UART_SetConfig+0x348>
 800ee5e:	2308      	movs	r3, #8
 800ee60:	77fb      	strb	r3, [r7, #31]
 800ee62:	e10f      	b.n	800f084 <UART_SetConfig+0x348>
 800ee64:	2310      	movs	r3, #16
 800ee66:	77fb      	strb	r3, [r7, #31]
 800ee68:	e10c      	b.n	800f084 <UART_SetConfig+0x348>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4a68      	ldr	r2, [pc, #416]	; (800f010 <UART_SetConfig+0x2d4>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d120      	bne.n	800eeb6 <UART_SetConfig+0x17a>
 800ee74:	4b64      	ldr	r3, [pc, #400]	; (800f008 <UART_SetConfig+0x2cc>)
 800ee76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee7a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee7e:	2b30      	cmp	r3, #48	; 0x30
 800ee80:	d013      	beq.n	800eeaa <UART_SetConfig+0x16e>
 800ee82:	2b30      	cmp	r3, #48	; 0x30
 800ee84:	d814      	bhi.n	800eeb0 <UART_SetConfig+0x174>
 800ee86:	2b20      	cmp	r3, #32
 800ee88:	d009      	beq.n	800ee9e <UART_SetConfig+0x162>
 800ee8a:	2b20      	cmp	r3, #32
 800ee8c:	d810      	bhi.n	800eeb0 <UART_SetConfig+0x174>
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d002      	beq.n	800ee98 <UART_SetConfig+0x15c>
 800ee92:	2b10      	cmp	r3, #16
 800ee94:	d006      	beq.n	800eea4 <UART_SetConfig+0x168>
 800ee96:	e00b      	b.n	800eeb0 <UART_SetConfig+0x174>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	77fb      	strb	r3, [r7, #31]
 800ee9c:	e0f2      	b.n	800f084 <UART_SetConfig+0x348>
 800ee9e:	2302      	movs	r3, #2
 800eea0:	77fb      	strb	r3, [r7, #31]
 800eea2:	e0ef      	b.n	800f084 <UART_SetConfig+0x348>
 800eea4:	2304      	movs	r3, #4
 800eea6:	77fb      	strb	r3, [r7, #31]
 800eea8:	e0ec      	b.n	800f084 <UART_SetConfig+0x348>
 800eeaa:	2308      	movs	r3, #8
 800eeac:	77fb      	strb	r3, [r7, #31]
 800eeae:	e0e9      	b.n	800f084 <UART_SetConfig+0x348>
 800eeb0:	2310      	movs	r3, #16
 800eeb2:	77fb      	strb	r3, [r7, #31]
 800eeb4:	e0e6      	b.n	800f084 <UART_SetConfig+0x348>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	4a56      	ldr	r2, [pc, #344]	; (800f014 <UART_SetConfig+0x2d8>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d120      	bne.n	800ef02 <UART_SetConfig+0x1c6>
 800eec0:	4b51      	ldr	r3, [pc, #324]	; (800f008 <UART_SetConfig+0x2cc>)
 800eec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eec6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eeca:	2bc0      	cmp	r3, #192	; 0xc0
 800eecc:	d013      	beq.n	800eef6 <UART_SetConfig+0x1ba>
 800eece:	2bc0      	cmp	r3, #192	; 0xc0
 800eed0:	d814      	bhi.n	800eefc <UART_SetConfig+0x1c0>
 800eed2:	2b80      	cmp	r3, #128	; 0x80
 800eed4:	d009      	beq.n	800eeea <UART_SetConfig+0x1ae>
 800eed6:	2b80      	cmp	r3, #128	; 0x80
 800eed8:	d810      	bhi.n	800eefc <UART_SetConfig+0x1c0>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d002      	beq.n	800eee4 <UART_SetConfig+0x1a8>
 800eede:	2b40      	cmp	r3, #64	; 0x40
 800eee0:	d006      	beq.n	800eef0 <UART_SetConfig+0x1b4>
 800eee2:	e00b      	b.n	800eefc <UART_SetConfig+0x1c0>
 800eee4:	2300      	movs	r3, #0
 800eee6:	77fb      	strb	r3, [r7, #31]
 800eee8:	e0cc      	b.n	800f084 <UART_SetConfig+0x348>
 800eeea:	2302      	movs	r3, #2
 800eeec:	77fb      	strb	r3, [r7, #31]
 800eeee:	e0c9      	b.n	800f084 <UART_SetConfig+0x348>
 800eef0:	2304      	movs	r3, #4
 800eef2:	77fb      	strb	r3, [r7, #31]
 800eef4:	e0c6      	b.n	800f084 <UART_SetConfig+0x348>
 800eef6:	2308      	movs	r3, #8
 800eef8:	77fb      	strb	r3, [r7, #31]
 800eefa:	e0c3      	b.n	800f084 <UART_SetConfig+0x348>
 800eefc:	2310      	movs	r3, #16
 800eefe:	77fb      	strb	r3, [r7, #31]
 800ef00:	e0c0      	b.n	800f084 <UART_SetConfig+0x348>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a44      	ldr	r2, [pc, #272]	; (800f018 <UART_SetConfig+0x2dc>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d125      	bne.n	800ef58 <UART_SetConfig+0x21c>
 800ef0c:	4b3e      	ldr	r3, [pc, #248]	; (800f008 <UART_SetConfig+0x2cc>)
 800ef0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef1a:	d017      	beq.n	800ef4c <UART_SetConfig+0x210>
 800ef1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ef20:	d817      	bhi.n	800ef52 <UART_SetConfig+0x216>
 800ef22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef26:	d00b      	beq.n	800ef40 <UART_SetConfig+0x204>
 800ef28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef2c:	d811      	bhi.n	800ef52 <UART_SetConfig+0x216>
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d003      	beq.n	800ef3a <UART_SetConfig+0x1fe>
 800ef32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef36:	d006      	beq.n	800ef46 <UART_SetConfig+0x20a>
 800ef38:	e00b      	b.n	800ef52 <UART_SetConfig+0x216>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	77fb      	strb	r3, [r7, #31]
 800ef3e:	e0a1      	b.n	800f084 <UART_SetConfig+0x348>
 800ef40:	2302      	movs	r3, #2
 800ef42:	77fb      	strb	r3, [r7, #31]
 800ef44:	e09e      	b.n	800f084 <UART_SetConfig+0x348>
 800ef46:	2304      	movs	r3, #4
 800ef48:	77fb      	strb	r3, [r7, #31]
 800ef4a:	e09b      	b.n	800f084 <UART_SetConfig+0x348>
 800ef4c:	2308      	movs	r3, #8
 800ef4e:	77fb      	strb	r3, [r7, #31]
 800ef50:	e098      	b.n	800f084 <UART_SetConfig+0x348>
 800ef52:	2310      	movs	r3, #16
 800ef54:	77fb      	strb	r3, [r7, #31]
 800ef56:	e095      	b.n	800f084 <UART_SetConfig+0x348>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a2f      	ldr	r2, [pc, #188]	; (800f01c <UART_SetConfig+0x2e0>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d125      	bne.n	800efae <UART_SetConfig+0x272>
 800ef62:	4b29      	ldr	r3, [pc, #164]	; (800f008 <UART_SetConfig+0x2cc>)
 800ef64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ef6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef70:	d017      	beq.n	800efa2 <UART_SetConfig+0x266>
 800ef72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ef76:	d817      	bhi.n	800efa8 <UART_SetConfig+0x26c>
 800ef78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef7c:	d00b      	beq.n	800ef96 <UART_SetConfig+0x25a>
 800ef7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef82:	d811      	bhi.n	800efa8 <UART_SetConfig+0x26c>
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <UART_SetConfig+0x254>
 800ef88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef8c:	d006      	beq.n	800ef9c <UART_SetConfig+0x260>
 800ef8e:	e00b      	b.n	800efa8 <UART_SetConfig+0x26c>
 800ef90:	2301      	movs	r3, #1
 800ef92:	77fb      	strb	r3, [r7, #31]
 800ef94:	e076      	b.n	800f084 <UART_SetConfig+0x348>
 800ef96:	2302      	movs	r3, #2
 800ef98:	77fb      	strb	r3, [r7, #31]
 800ef9a:	e073      	b.n	800f084 <UART_SetConfig+0x348>
 800ef9c:	2304      	movs	r3, #4
 800ef9e:	77fb      	strb	r3, [r7, #31]
 800efa0:	e070      	b.n	800f084 <UART_SetConfig+0x348>
 800efa2:	2308      	movs	r3, #8
 800efa4:	77fb      	strb	r3, [r7, #31]
 800efa6:	e06d      	b.n	800f084 <UART_SetConfig+0x348>
 800efa8:	2310      	movs	r3, #16
 800efaa:	77fb      	strb	r3, [r7, #31]
 800efac:	e06a      	b.n	800f084 <UART_SetConfig+0x348>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a1b      	ldr	r2, [pc, #108]	; (800f020 <UART_SetConfig+0x2e4>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d138      	bne.n	800f02a <UART_SetConfig+0x2ee>
 800efb8:	4b13      	ldr	r3, [pc, #76]	; (800f008 <UART_SetConfig+0x2cc>)
 800efba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efbe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800efc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efc6:	d017      	beq.n	800eff8 <UART_SetConfig+0x2bc>
 800efc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800efcc:	d82a      	bhi.n	800f024 <UART_SetConfig+0x2e8>
 800efce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efd2:	d00b      	beq.n	800efec <UART_SetConfig+0x2b0>
 800efd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efd8:	d824      	bhi.n	800f024 <UART_SetConfig+0x2e8>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d003      	beq.n	800efe6 <UART_SetConfig+0x2aa>
 800efde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efe2:	d006      	beq.n	800eff2 <UART_SetConfig+0x2b6>
 800efe4:	e01e      	b.n	800f024 <UART_SetConfig+0x2e8>
 800efe6:	2300      	movs	r3, #0
 800efe8:	77fb      	strb	r3, [r7, #31]
 800efea:	e04b      	b.n	800f084 <UART_SetConfig+0x348>
 800efec:	2302      	movs	r3, #2
 800efee:	77fb      	strb	r3, [r7, #31]
 800eff0:	e048      	b.n	800f084 <UART_SetConfig+0x348>
 800eff2:	2304      	movs	r3, #4
 800eff4:	77fb      	strb	r3, [r7, #31]
 800eff6:	e045      	b.n	800f084 <UART_SetConfig+0x348>
 800eff8:	2308      	movs	r3, #8
 800effa:	77fb      	strb	r3, [r7, #31]
 800effc:	e042      	b.n	800f084 <UART_SetConfig+0x348>
 800effe:	bf00      	nop
 800f000:	efff69f3 	.word	0xefff69f3
 800f004:	40011000 	.word	0x40011000
 800f008:	40023800 	.word	0x40023800
 800f00c:	40004400 	.word	0x40004400
 800f010:	40004800 	.word	0x40004800
 800f014:	40004c00 	.word	0x40004c00
 800f018:	40005000 	.word	0x40005000
 800f01c:	40011400 	.word	0x40011400
 800f020:	40007800 	.word	0x40007800
 800f024:	2310      	movs	r3, #16
 800f026:	77fb      	strb	r3, [r7, #31]
 800f028:	e02c      	b.n	800f084 <UART_SetConfig+0x348>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4a72      	ldr	r2, [pc, #456]	; (800f1f8 <UART_SetConfig+0x4bc>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d125      	bne.n	800f080 <UART_SetConfig+0x344>
 800f034:	4b71      	ldr	r3, [pc, #452]	; (800f1fc <UART_SetConfig+0x4c0>)
 800f036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f03a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f03e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f042:	d017      	beq.n	800f074 <UART_SetConfig+0x338>
 800f044:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f048:	d817      	bhi.n	800f07a <UART_SetConfig+0x33e>
 800f04a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f04e:	d00b      	beq.n	800f068 <UART_SetConfig+0x32c>
 800f050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f054:	d811      	bhi.n	800f07a <UART_SetConfig+0x33e>
 800f056:	2b00      	cmp	r3, #0
 800f058:	d003      	beq.n	800f062 <UART_SetConfig+0x326>
 800f05a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f05e:	d006      	beq.n	800f06e <UART_SetConfig+0x332>
 800f060:	e00b      	b.n	800f07a <UART_SetConfig+0x33e>
 800f062:	2300      	movs	r3, #0
 800f064:	77fb      	strb	r3, [r7, #31]
 800f066:	e00d      	b.n	800f084 <UART_SetConfig+0x348>
 800f068:	2302      	movs	r3, #2
 800f06a:	77fb      	strb	r3, [r7, #31]
 800f06c:	e00a      	b.n	800f084 <UART_SetConfig+0x348>
 800f06e:	2304      	movs	r3, #4
 800f070:	77fb      	strb	r3, [r7, #31]
 800f072:	e007      	b.n	800f084 <UART_SetConfig+0x348>
 800f074:	2308      	movs	r3, #8
 800f076:	77fb      	strb	r3, [r7, #31]
 800f078:	e004      	b.n	800f084 <UART_SetConfig+0x348>
 800f07a:	2310      	movs	r3, #16
 800f07c:	77fb      	strb	r3, [r7, #31]
 800f07e:	e001      	b.n	800f084 <UART_SetConfig+0x348>
 800f080:	2310      	movs	r3, #16
 800f082:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	69db      	ldr	r3, [r3, #28]
 800f088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f08c:	d15b      	bne.n	800f146 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f08e:	7ffb      	ldrb	r3, [r7, #31]
 800f090:	2b08      	cmp	r3, #8
 800f092:	d828      	bhi.n	800f0e6 <UART_SetConfig+0x3aa>
 800f094:	a201      	add	r2, pc, #4	; (adr r2, 800f09c <UART_SetConfig+0x360>)
 800f096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f09a:	bf00      	nop
 800f09c:	0800f0c1 	.word	0x0800f0c1
 800f0a0:	0800f0c9 	.word	0x0800f0c9
 800f0a4:	0800f0d1 	.word	0x0800f0d1
 800f0a8:	0800f0e7 	.word	0x0800f0e7
 800f0ac:	0800f0d7 	.word	0x0800f0d7
 800f0b0:	0800f0e7 	.word	0x0800f0e7
 800f0b4:	0800f0e7 	.word	0x0800f0e7
 800f0b8:	0800f0e7 	.word	0x0800f0e7
 800f0bc:	0800f0df 	.word	0x0800f0df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0c0:	f7fe fe08 	bl	800dcd4 <HAL_RCC_GetPCLK1Freq>
 800f0c4:	61b8      	str	r0, [r7, #24]
        break;
 800f0c6:	e013      	b.n	800f0f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0c8:	f7fe fe18 	bl	800dcfc <HAL_RCC_GetPCLK2Freq>
 800f0cc:	61b8      	str	r0, [r7, #24]
        break;
 800f0ce:	e00f      	b.n	800f0f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0d0:	4b4b      	ldr	r3, [pc, #300]	; (800f200 <UART_SetConfig+0x4c4>)
 800f0d2:	61bb      	str	r3, [r7, #24]
        break;
 800f0d4:	e00c      	b.n	800f0f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0d6:	f7fe fceb 	bl	800dab0 <HAL_RCC_GetSysClockFreq>
 800f0da:	61b8      	str	r0, [r7, #24]
        break;
 800f0dc:	e008      	b.n	800f0f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0e2:	61bb      	str	r3, [r7, #24]
        break;
 800f0e4:	e004      	b.n	800f0f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	77bb      	strb	r3, [r7, #30]
        break;
 800f0ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0f0:	69bb      	ldr	r3, [r7, #24]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d074      	beq.n	800f1e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	005a      	lsls	r2, r3, #1
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	085b      	lsrs	r3, r3, #1
 800f100:	441a      	add	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	fbb2 f3f3 	udiv	r3, r2, r3
 800f10a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	2b0f      	cmp	r3, #15
 800f110:	d916      	bls.n	800f140 <UART_SetConfig+0x404>
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f118:	d212      	bcs.n	800f140 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	f023 030f 	bic.w	r3, r3, #15
 800f122:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	085b      	lsrs	r3, r3, #1
 800f128:	b29b      	uxth	r3, r3
 800f12a:	f003 0307 	and.w	r3, r3, #7
 800f12e:	b29a      	uxth	r2, r3
 800f130:	89fb      	ldrh	r3, [r7, #14]
 800f132:	4313      	orrs	r3, r2
 800f134:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	89fa      	ldrh	r2, [r7, #14]
 800f13c:	60da      	str	r2, [r3, #12]
 800f13e:	e04f      	b.n	800f1e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f140:	2301      	movs	r3, #1
 800f142:	77bb      	strb	r3, [r7, #30]
 800f144:	e04c      	b.n	800f1e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f146:	7ffb      	ldrb	r3, [r7, #31]
 800f148:	2b08      	cmp	r3, #8
 800f14a:	d828      	bhi.n	800f19e <UART_SetConfig+0x462>
 800f14c:	a201      	add	r2, pc, #4	; (adr r2, 800f154 <UART_SetConfig+0x418>)
 800f14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f152:	bf00      	nop
 800f154:	0800f179 	.word	0x0800f179
 800f158:	0800f181 	.word	0x0800f181
 800f15c:	0800f189 	.word	0x0800f189
 800f160:	0800f19f 	.word	0x0800f19f
 800f164:	0800f18f 	.word	0x0800f18f
 800f168:	0800f19f 	.word	0x0800f19f
 800f16c:	0800f19f 	.word	0x0800f19f
 800f170:	0800f19f 	.word	0x0800f19f
 800f174:	0800f197 	.word	0x0800f197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f178:	f7fe fdac 	bl	800dcd4 <HAL_RCC_GetPCLK1Freq>
 800f17c:	61b8      	str	r0, [r7, #24]
        break;
 800f17e:	e013      	b.n	800f1a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f180:	f7fe fdbc 	bl	800dcfc <HAL_RCC_GetPCLK2Freq>
 800f184:	61b8      	str	r0, [r7, #24]
        break;
 800f186:	e00f      	b.n	800f1a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f188:	4b1d      	ldr	r3, [pc, #116]	; (800f200 <UART_SetConfig+0x4c4>)
 800f18a:	61bb      	str	r3, [r7, #24]
        break;
 800f18c:	e00c      	b.n	800f1a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f18e:	f7fe fc8f 	bl	800dab0 <HAL_RCC_GetSysClockFreq>
 800f192:	61b8      	str	r0, [r7, #24]
        break;
 800f194:	e008      	b.n	800f1a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f19a:	61bb      	str	r3, [r7, #24]
        break;
 800f19c:	e004      	b.n	800f1a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	77bb      	strb	r3, [r7, #30]
        break;
 800f1a6:	bf00      	nop
    }

    if (pclk != 0U)
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d018      	beq.n	800f1e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	085a      	lsrs	r2, r3, #1
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	441a      	add	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2b0f      	cmp	r3, #15
 800f1c6:	d909      	bls.n	800f1dc <UART_SetConfig+0x4a0>
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1ce:	d205      	bcs.n	800f1dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	60da      	str	r2, [r3, #12]
 800f1da:	e001      	b.n	800f1e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800f1ec:	7fbb      	ldrb	r3, [r7, #30]
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3720      	adds	r7, #32
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	40007c00 	.word	0x40007c00
 800f1fc:	40023800 	.word	0x40023800
 800f200:	00f42400 	.word	0x00f42400

0800f204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00a      	beq.n	800f22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	430a      	orrs	r2, r1
 800f22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00a      	beq.n	800f250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	430a      	orrs	r2, r1
 800f24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f254:	f003 0304 	and.w	r3, r3, #4
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	430a      	orrs	r2, r1
 800f270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f276:	f003 0308 	and.w	r3, r3, #8
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00a      	beq.n	800f294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	430a      	orrs	r2, r1
 800f292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	f003 0310 	and.w	r3, r3, #16
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00a      	beq.n	800f2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ba:	f003 0320 	and.w	r3, r3, #32
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	430a      	orrs	r2, r1
 800f2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01a      	beq.n	800f31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	430a      	orrs	r2, r1
 800f2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f302:	d10a      	bne.n	800f31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	430a      	orrs	r2, r1
 800f318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00a      	beq.n	800f33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	430a      	orrs	r2, r1
 800f33a:	605a      	str	r2, [r3, #4]
  }
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b086      	sub	sp, #24
 800f34c:	af02      	add	r7, sp, #8
 800f34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f358:	f7fc fc36 	bl	800bbc8 <HAL_GetTick>
 800f35c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 0308 	and.w	r3, r3, #8
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d10e      	bne.n	800f38a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f36c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2200      	movs	r2, #0
 800f376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f831 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d001      	beq.n	800f38a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f386:	2303      	movs	r3, #3
 800f388:	e027      	b.n	800f3da <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f003 0304 	and.w	r3, r3, #4
 800f394:	2b04      	cmp	r3, #4
 800f396:	d10e      	bne.n	800f3b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 f81b 	bl	800f3e2 <UART_WaitOnFlagUntilTimeout>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	e011      	b.n	800f3da <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2220      	movs	r2, #32
 800f3ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2220      	movs	r2, #32
 800f3c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b09c      	sub	sp, #112	; 0x70
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	60f8      	str	r0, [r7, #12]
 800f3ea:	60b9      	str	r1, [r7, #8]
 800f3ec:	603b      	str	r3, [r7, #0]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3f2:	e0a7      	b.n	800f544 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fa:	f000 80a3 	beq.w	800f544 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f3fe:	f7fc fbe3 	bl	800bbc8 <HAL_GetTick>
 800f402:	4602      	mov	r2, r0
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d302      	bcc.n	800f414 <UART_WaitOnFlagUntilTimeout+0x32>
 800f40e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f410:	2b00      	cmp	r3, #0
 800f412:	d13f      	bne.n	800f494 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f41c:	e853 3f00 	ldrex	r3, [r3]
 800f420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f428:	667b      	str	r3, [r7, #100]	; 0x64
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	461a      	mov	r2, r3
 800f430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f432:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f434:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f43a:	e841 2300 	strex	r3, r2, [r1]
 800f43e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e6      	bne.n	800f414 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3308      	adds	r3, #8
 800f44c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	e853 3f00 	ldrex	r3, [r3]
 800f454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f458:	f023 0301 	bic.w	r3, r3, #1
 800f45c:	663b      	str	r3, [r7, #96]	; 0x60
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3308      	adds	r3, #8
 800f464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f466:	64ba      	str	r2, [r7, #72]	; 0x48
 800f468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f46c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f46e:	e841 2300 	strex	r3, r2, [r1]
 800f472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1e5      	bne.n	800f446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2220      	movs	r2, #32
 800f47e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2220      	movs	r2, #32
 800f484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800f490:	2303      	movs	r3, #3
 800f492:	e068      	b.n	800f566 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f003 0304 	and.w	r3, r3, #4
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d050      	beq.n	800f544 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	69db      	ldr	r3, [r3, #28]
 800f4a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4b0:	d148      	bne.n	800f544 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	e853 3f00 	ldrex	r3, [r3]
 800f4c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f4d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4da:	637b      	str	r3, [r7, #52]	; 0x34
 800f4dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e2:	e841 2300 	strex	r3, r2, [r1]
 800f4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1e6      	bne.n	800f4bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3308      	adds	r3, #8
 800f4f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	e853 3f00 	ldrex	r3, [r3]
 800f4fc:	613b      	str	r3, [r7, #16]
   return(result);
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	f023 0301 	bic.w	r3, r3, #1
 800f504:	66bb      	str	r3, [r7, #104]	; 0x68
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3308      	adds	r3, #8
 800f50c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f50e:	623a      	str	r2, [r7, #32]
 800f510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f512:	69f9      	ldr	r1, [r7, #28]
 800f514:	6a3a      	ldr	r2, [r7, #32]
 800f516:	e841 2300 	strex	r3, r2, [r1]
 800f51a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1e5      	bne.n	800f4ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2220      	movs	r2, #32
 800f526:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2220      	movs	r2, #32
 800f52c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	2220      	movs	r2, #32
 800f534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800f540:	2303      	movs	r3, #3
 800f542:	e010      	b.n	800f566 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	69da      	ldr	r2, [r3, #28]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	4013      	ands	r3, r2
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	429a      	cmp	r2, r3
 800f552:	bf0c      	ite	eq
 800f554:	2301      	moveq	r3, #1
 800f556:	2300      	movne	r3, #0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	461a      	mov	r2, r3
 800f55c:	79fb      	ldrb	r3, [r7, #7]
 800f55e:	429a      	cmp	r2, r3
 800f560:	f43f af48 	beq.w	800f3f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3770      	adds	r7, #112	; 0x70
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
	...

0800f570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f570:	b084      	sub	sp, #16
 800f572:	b580      	push	{r7, lr}
 800f574:	b084      	sub	sp, #16
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	f107 001c 	add.w	r0, r7, #28
 800f57e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f584:	2b01      	cmp	r3, #1
 800f586:	d120      	bne.n	800f5ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f58c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	68da      	ldr	r2, [r3, #12]
 800f598:	4b20      	ldr	r3, [pc, #128]	; (800f61c <USB_CoreInit+0xac>)
 800f59a:	4013      	ands	r3, r2
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d105      	bne.n	800f5be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 fa96 	bl	800faf0 <USB_CoreReset>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]
 800f5c8:	e010      	b.n	800f5ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 fa8a 	bl	800faf0 <USB_CoreReset>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d10b      	bne.n	800f60a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	f043 0206 	orr.w	r2, r3, #6
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	f043 0220 	orr.w	r2, r3, #32
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f616:	b004      	add	sp, #16
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	ffbdffbf 	.word	0xffbdffbf

0800f620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	f023 0201 	bic.w	r2, r3, #1
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f634:	2300      	movs	r3, #0
}
 800f636:	4618      	mov	r0, r3
 800f638:	370c      	adds	r7, #12
 800f63a:	46bd      	mov	sp, r7
 800f63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b084      	sub	sp, #16
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	460b      	mov	r3, r1
 800f64c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f65e:	78fb      	ldrb	r3, [r7, #3]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d115      	bne.n	800f690 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f670:	2001      	movs	r0, #1
 800f672:	f7fc fab5 	bl	800bbe0 <HAL_Delay>
      ms++;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	3301      	adds	r3, #1
 800f67a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 fa29 	bl	800fad4 <USB_GetMode>
 800f682:	4603      	mov	r3, r0
 800f684:	2b01      	cmp	r3, #1
 800f686:	d01e      	beq.n	800f6c6 <USB_SetCurrentMode+0x84>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	2b31      	cmp	r3, #49	; 0x31
 800f68c:	d9f0      	bls.n	800f670 <USB_SetCurrentMode+0x2e>
 800f68e:	e01a      	b.n	800f6c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d115      	bne.n	800f6c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	f7fc fa9c 	bl	800bbe0 <HAL_Delay>
      ms++;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f000 fa10 	bl	800fad4 <USB_GetMode>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d005      	beq.n	800f6c6 <USB_SetCurrentMode+0x84>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2b31      	cmp	r3, #49	; 0x31
 800f6be:	d9f0      	bls.n	800f6a2 <USB_SetCurrentMode+0x60>
 800f6c0:	e001      	b.n	800f6c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e005      	b.n	800f6d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b32      	cmp	r3, #50	; 0x32
 800f6ca:	d101      	bne.n	800f6d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e000      	b.n	800f6d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f6d0:	2300      	movs	r3, #0
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
	...

0800f6dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f6dc:	b084      	sub	sp, #16
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b086      	sub	sp, #24
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
 800f6e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	613b      	str	r3, [r7, #16]
 800f6fa:	e009      	b.n	800f710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	3340      	adds	r3, #64	; 0x40
 800f702:	009b      	lsls	r3, r3, #2
 800f704:	4413      	add	r3, r2
 800f706:	2200      	movs	r2, #0
 800f708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	3301      	adds	r3, #1
 800f70e:	613b      	str	r3, [r7, #16]
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	2b0e      	cmp	r3, #14
 800f714:	d9f2      	bls.n	800f6fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d11c      	bne.n	800f756 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f72a:	f043 0302 	orr.w	r3, r3, #2
 800f72e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f734:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	601a      	str	r2, [r3, #0]
 800f754:	e005      	b.n	800f762 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f75a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f768:	461a      	mov	r2, r3
 800f76a:	2300      	movs	r3, #0
 800f76c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f774:	4619      	mov	r1, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77c:	461a      	mov	r2, r3
 800f77e:	680b      	ldr	r3, [r1, #0]
 800f780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f784:	2b01      	cmp	r3, #1
 800f786:	d10c      	bne.n	800f7a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d104      	bne.n	800f798 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f78e:	2100      	movs	r1, #0
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 f965 	bl	800fa60 <USB_SetDevSpeed>
 800f796:	e008      	b.n	800f7aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f798:	2101      	movs	r1, #1
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f960 	bl	800fa60 <USB_SetDevSpeed>
 800f7a0:	e003      	b.n	800f7aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f7a2:	2103      	movs	r1, #3
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f95b 	bl	800fa60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f7aa:	2110      	movs	r1, #16
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f8f3 	bl	800f998 <USB_FlushTxFifo>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 f91f 	bl	800fa00 <USB_FlushRxFifo>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7de:	461a      	mov	r2, r3
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	613b      	str	r3, [r7, #16]
 800f7f4:	e043      	b.n	800f87e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	015a      	lsls	r2, r3, #5
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f80c:	d118      	bne.n	800f840 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10a      	bne.n	800f82a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	015a      	lsls	r2, r3, #5
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	4413      	add	r3, r2
 800f81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f820:	461a      	mov	r2, r3
 800f822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f826:	6013      	str	r3, [r2, #0]
 800f828:	e013      	b.n	800f852 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	015a      	lsls	r2, r3, #5
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4413      	add	r3, r2
 800f832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f836:	461a      	mov	r2, r3
 800f838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f83c:	6013      	str	r3, [r2, #0]
 800f83e:	e008      	b.n	800f852 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f84c:	461a      	mov	r2, r3
 800f84e:	2300      	movs	r3, #0
 800f850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	015a      	lsls	r2, r3, #5
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	4413      	add	r3, r2
 800f85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f85e:	461a      	mov	r2, r3
 800f860:	2300      	movs	r3, #0
 800f862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	015a      	lsls	r2, r3, #5
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	4413      	add	r3, r2
 800f86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f870:	461a      	mov	r2, r3
 800f872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	3301      	adds	r3, #1
 800f87c:	613b      	str	r3, [r7, #16]
 800f87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f880:	693a      	ldr	r2, [r7, #16]
 800f882:	429a      	cmp	r2, r3
 800f884:	d3b7      	bcc.n	800f7f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f886:	2300      	movs	r3, #0
 800f888:	613b      	str	r3, [r7, #16]
 800f88a:	e043      	b.n	800f914 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	015a      	lsls	r2, r3, #5
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	4413      	add	r3, r2
 800f894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f89e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f8a2:	d118      	bne.n	800f8d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d10a      	bne.n	800f8c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	015a      	lsls	r2, r3, #5
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8bc:	6013      	str	r3, [r2, #0]
 800f8be:	e013      	b.n	800f8e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	015a      	lsls	r2, r3, #5
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f8d2:	6013      	str	r3, [r2, #0]
 800f8d4:	e008      	b.n	800f8e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	015a      	lsls	r2, r3, #5
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	015a      	lsls	r2, r3, #5
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	4413      	add	r3, r2
 800f902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f906:	461a      	mov	r2, r3
 800f908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f90c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	3301      	adds	r3, #1
 800f912:	613b      	str	r3, [r7, #16]
 800f914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f916:	693a      	ldr	r2, [r7, #16]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d3b7      	bcc.n	800f88c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f922:	691b      	ldr	r3, [r3, #16]
 800f924:	68fa      	ldr	r2, [r7, #12]
 800f926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f92a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f92e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f93c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	2b00      	cmp	r3, #0
 800f942:	d105      	bne.n	800f950 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	f043 0210 	orr.w	r2, r3, #16
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	699a      	ldr	r2, [r3, #24]
 800f954:	4b0e      	ldr	r3, [pc, #56]	; (800f990 <USB_DevInit+0x2b4>)
 800f956:	4313      	orrs	r3, r2
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d005      	beq.n	800f96e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	699b      	ldr	r3, [r3, #24]
 800f966:	f043 0208 	orr.w	r2, r3, #8
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f970:	2b01      	cmp	r3, #1
 800f972:	d105      	bne.n	800f980 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	699a      	ldr	r2, [r3, #24]
 800f978:	4b06      	ldr	r3, [pc, #24]	; (800f994 <USB_DevInit+0x2b8>)
 800f97a:	4313      	orrs	r3, r2
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f980:	7dfb      	ldrb	r3, [r7, #23]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f98c:	b004      	add	sp, #16
 800f98e:	4770      	bx	lr
 800f990:	803c3800 	.word	0x803c3800
 800f994:	40000004 	.word	0x40000004

0800f998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f998:	b480      	push	{r7}
 800f99a:	b085      	sub	sp, #20
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	4a13      	ldr	r2, [pc, #76]	; (800f9fc <USB_FlushTxFifo+0x64>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d901      	bls.n	800f9b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f9b4:	2303      	movs	r3, #3
 800f9b6:	e01b      	b.n	800f9f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	daf2      	bge.n	800f9a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	019b      	lsls	r3, r3, #6
 800f9c8:	f043 0220 	orr.w	r2, r3, #32
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	4a08      	ldr	r2, [pc, #32]	; (800f9fc <USB_FlushTxFifo+0x64>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d901      	bls.n	800f9e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	e006      	b.n	800f9f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	691b      	ldr	r3, [r3, #16]
 800f9e6:	f003 0320 	and.w	r3, r3, #32
 800f9ea:	2b20      	cmp	r3, #32
 800f9ec:	d0f0      	beq.n	800f9d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3714      	adds	r7, #20
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	00030d40 	.word	0x00030d40

0800fa00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	4a11      	ldr	r2, [pc, #68]	; (800fa5c <USB_FlushRxFifo+0x5c>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d901      	bls.n	800fa1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fa1a:	2303      	movs	r3, #3
 800fa1c:	e018      	b.n	800fa50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	daf2      	bge.n	800fa0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fa26:	2300      	movs	r3, #0
 800fa28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2210      	movs	r2, #16
 800fa2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	3301      	adds	r3, #1
 800fa34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	4a08      	ldr	r2, [pc, #32]	; (800fa5c <USB_FlushRxFifo+0x5c>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d901      	bls.n	800fa42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fa3e:	2303      	movs	r3, #3
 800fa40:	e006      	b.n	800fa50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	f003 0310 	and.w	r3, r3, #16
 800fa4a:	2b10      	cmp	r3, #16
 800fa4c:	d0f0      	beq.n	800fa30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3714      	adds	r7, #20
 800fa54:	46bd      	mov	sp, r7
 800fa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5a:	4770      	bx	lr
 800fa5c:	00030d40 	.word	0x00030d40

0800fa60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b085      	sub	sp, #20
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	460b      	mov	r3, r1
 800fa6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	78fb      	ldrb	r3, [r7, #3]
 800fa7a:	68f9      	ldr	r1, [r7, #12]
 800fa7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa80:	4313      	orrs	r3, r2
 800fa82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fa92:	b480      	push	{r7}
 800fa94:	b085      	sub	sp, #20
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800faac:	f023 0303 	bic.w	r3, r3, #3
 800fab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fac0:	f043 0302 	orr.w	r3, r3, #2
 800fac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fac6:	2300      	movs	r3, #0
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3714      	adds	r7, #20
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	695b      	ldr	r3, [r3, #20]
 800fae0:	f003 0301 	and.w	r3, r3, #1
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800faf0:	b480      	push	{r7}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800faf8:	2300      	movs	r3, #0
 800fafa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	3301      	adds	r3, #1
 800fb00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	4a13      	ldr	r2, [pc, #76]	; (800fb54 <USB_CoreReset+0x64>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d901      	bls.n	800fb0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	e01b      	b.n	800fb46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	daf2      	bge.n	800fafc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fb16:	2300      	movs	r3, #0
 800fb18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	691b      	ldr	r3, [r3, #16]
 800fb1e:	f043 0201 	orr.w	r2, r3, #1
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	4a09      	ldr	r2, [pc, #36]	; (800fb54 <USB_CoreReset+0x64>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d901      	bls.n	800fb38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fb34:	2303      	movs	r3, #3
 800fb36:	e006      	b.n	800fb46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	691b      	ldr	r3, [r3, #16]
 800fb3c:	f003 0301 	and.w	r3, r3, #1
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d0f0      	beq.n	800fb26 <USB_CoreReset+0x36>

  return HAL_OK;
 800fb44:	2300      	movs	r3, #0
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	00030d40 	.word	0x00030d40

0800fb58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fb58:	b480      	push	{r7}
 800fb5a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fb5c:	bf00      	nop
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
	...

0800fb68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb6e:	f3ef 8305 	mrs	r3, IPSR
 800fb72:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10f      	bne.n	800fb9a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb7a:	f3ef 8310 	mrs	r3, PRIMASK
 800fb7e:	607b      	str	r3, [r7, #4]
  return(result);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d105      	bne.n	800fb92 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb86:	f3ef 8311 	mrs	r3, BASEPRI
 800fb8a:	603b      	str	r3, [r7, #0]
  return(result);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d007      	beq.n	800fba2 <osKernelInitialize+0x3a>
 800fb92:	4b0e      	ldr	r3, [pc, #56]	; (800fbcc <osKernelInitialize+0x64>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d103      	bne.n	800fba2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fb9a:	f06f 0305 	mvn.w	r3, #5
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	e00c      	b.n	800fbbc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fba2:	4b0a      	ldr	r3, [pc, #40]	; (800fbcc <osKernelInitialize+0x64>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d105      	bne.n	800fbb6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fbaa:	4b08      	ldr	r3, [pc, #32]	; (800fbcc <osKernelInitialize+0x64>)
 800fbac:	2201      	movs	r2, #1
 800fbae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e002      	b.n	800fbbc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800fbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800fbba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fbbc:	68fb      	ldr	r3, [r7, #12]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	20001b90 	.word	0x20001b90

0800fbd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b084      	sub	sp, #16
 800fbd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbd6:	f3ef 8305 	mrs	r3, IPSR
 800fbda:	60bb      	str	r3, [r7, #8]
  return(result);
 800fbdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d10f      	bne.n	800fc02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbe2:	f3ef 8310 	mrs	r3, PRIMASK
 800fbe6:	607b      	str	r3, [r7, #4]
  return(result);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d105      	bne.n	800fbfa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fbee:	f3ef 8311 	mrs	r3, BASEPRI
 800fbf2:	603b      	str	r3, [r7, #0]
  return(result);
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d007      	beq.n	800fc0a <osKernelStart+0x3a>
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <osKernelStart+0x68>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d103      	bne.n	800fc0a <osKernelStart+0x3a>
    stat = osErrorISR;
 800fc02:	f06f 0305 	mvn.w	r3, #5
 800fc06:	60fb      	str	r3, [r7, #12]
 800fc08:	e010      	b.n	800fc2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fc0a:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <osKernelStart+0x68>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d109      	bne.n	800fc26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fc12:	f7ff ffa1 	bl	800fb58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fc16:	4b08      	ldr	r3, [pc, #32]	; (800fc38 <osKernelStart+0x68>)
 800fc18:	2202      	movs	r2, #2
 800fc1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fc1c:	f001 fd70 	bl	8011700 <vTaskStartScheduler>
      stat = osOK;
 800fc20:	2300      	movs	r3, #0
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e002      	b.n	800fc2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800fc26:	f04f 33ff 	mov.w	r3, #4294967295
 800fc2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	20001b90 	.word	0x20001b90

0800fc3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b090      	sub	sp, #64	; 0x40
 800fc40:	af04      	add	r7, sp, #16
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc4c:	f3ef 8305 	mrs	r3, IPSR
 800fc50:	61fb      	str	r3, [r7, #28]
  return(result);
 800fc52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f040 808f 	bne.w	800fd78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc5a:	f3ef 8310 	mrs	r3, PRIMASK
 800fc5e:	61bb      	str	r3, [r7, #24]
  return(result);
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d105      	bne.n	800fc72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc66:	f3ef 8311 	mrs	r3, BASEPRI
 800fc6a:	617b      	str	r3, [r7, #20]
  return(result);
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <osThreadNew+0x3e>
 800fc72:	4b44      	ldr	r3, [pc, #272]	; (800fd84 <osThreadNew+0x148>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	d07e      	beq.n	800fd78 <osThreadNew+0x13c>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d07b      	beq.n	800fd78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800fc80:	2380      	movs	r3, #128	; 0x80
 800fc82:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800fc84:	2318      	movs	r3, #24
 800fc86:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d045      	beq.n	800fd24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d002      	beq.n	800fca6 <osThreadNew+0x6a>
        name = attr->name;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	699b      	ldr	r3, [r3, #24]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d008      	beq.n	800fccc <osThreadNew+0x90>
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbc:	2b38      	cmp	r3, #56	; 0x38
 800fcbe:	d805      	bhi.n	800fccc <osThreadNew+0x90>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f003 0301 	and.w	r3, r3, #1
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <osThreadNew+0x94>
        return (NULL);
 800fccc:	2300      	movs	r3, #0
 800fcce:	e054      	b.n	800fd7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	695b      	ldr	r3, [r3, #20]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d003      	beq.n	800fce0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	089b      	lsrs	r3, r3, #2
 800fcde:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d00e      	beq.n	800fd06 <osThreadNew+0xca>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	2bbb      	cmp	r3, #187	; 0xbb
 800fcee:	d90a      	bls.n	800fd06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d006      	beq.n	800fd06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	695b      	ldr	r3, [r3, #20]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d002      	beq.n	800fd06 <osThreadNew+0xca>
        mem = 1;
 800fd00:	2301      	movs	r3, #1
 800fd02:	623b      	str	r3, [r7, #32]
 800fd04:	e010      	b.n	800fd28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d10c      	bne.n	800fd28 <osThreadNew+0xec>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d108      	bne.n	800fd28 <osThreadNew+0xec>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d104      	bne.n	800fd28 <osThreadNew+0xec>
          mem = 0;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	623b      	str	r3, [r7, #32]
 800fd22:	e001      	b.n	800fd28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800fd24:	2300      	movs	r3, #0
 800fd26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d110      	bne.n	800fd50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fd36:	9202      	str	r2, [sp, #8]
 800fd38:	9301      	str	r3, [sp, #4]
 800fd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f001 fae5 	bl	8011314 <xTaskCreateStatic>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	613b      	str	r3, [r7, #16]
 800fd4e:	e013      	b.n	800fd78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800fd50:	6a3b      	ldr	r3, [r7, #32]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d110      	bne.n	800fd78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	f107 0310 	add.w	r3, r7, #16
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fd68:	68f8      	ldr	r0, [r7, #12]
 800fd6a:	f001 fb36 	bl	80113da <xTaskCreate>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d001      	beq.n	800fd78 <osThreadNew+0x13c>
          hTask = NULL;
 800fd74:	2300      	movs	r3, #0
 800fd76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fd78:	693b      	ldr	r3, [r7, #16]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3730      	adds	r7, #48	; 0x30
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	20001b90 	.word	0x20001b90

0800fd88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd90:	f3ef 8305 	mrs	r3, IPSR
 800fd94:	613b      	str	r3, [r7, #16]
  return(result);
 800fd96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10f      	bne.n	800fdbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd9c:	f3ef 8310 	mrs	r3, PRIMASK
 800fda0:	60fb      	str	r3, [r7, #12]
  return(result);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d105      	bne.n	800fdb4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fda8:	f3ef 8311 	mrs	r3, BASEPRI
 800fdac:	60bb      	str	r3, [r7, #8]
  return(result);
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d007      	beq.n	800fdc4 <osDelay+0x3c>
 800fdb4:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <osDelay+0x58>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b02      	cmp	r3, #2
 800fdba:	d103      	bne.n	800fdc4 <osDelay+0x3c>
    stat = osErrorISR;
 800fdbc:	f06f 0305 	mvn.w	r3, #5
 800fdc0:	617b      	str	r3, [r7, #20]
 800fdc2:	e007      	b.n	800fdd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d002      	beq.n	800fdd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f001 fc60 	bl	8011694 <vTaskDelay>
    }
  }

  return (stat);
 800fdd4:	697b      	ldr	r3, [r7, #20]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3718      	adds	r7, #24
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	20001b90 	.word	0x20001b90

0800fde4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08c      	sub	sp, #48	; 0x30
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdf4:	f3ef 8305 	mrs	r3, IPSR
 800fdf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800fdfa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f040 8086 	bne.w	800ff0e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe02:	f3ef 8310 	mrs	r3, PRIMASK
 800fe06:	617b      	str	r3, [r7, #20]
  return(result);
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d105      	bne.n	800fe1a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fe0e:	f3ef 8311 	mrs	r3, BASEPRI
 800fe12:	613b      	str	r3, [r7, #16]
  return(result);
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d003      	beq.n	800fe22 <osSemaphoreNew+0x3e>
 800fe1a:	4b3f      	ldr	r3, [pc, #252]	; (800ff18 <osSemaphoreNew+0x134>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d075      	beq.n	800ff0e <osSemaphoreNew+0x12a>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d072      	beq.n	800ff0e <osSemaphoreNew+0x12a>
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d86e      	bhi.n	800ff0e <osSemaphoreNew+0x12a>
    mem = -1;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295
 800fe34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d015      	beq.n	800fe68 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d006      	beq.n	800fe52 <osSemaphoreNew+0x6e>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	2b4f      	cmp	r3, #79	; 0x4f
 800fe4a:	d902      	bls.n	800fe52 <osSemaphoreNew+0x6e>
        mem = 1;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	623b      	str	r3, [r7, #32]
 800fe50:	e00c      	b.n	800fe6c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d108      	bne.n	800fe6c <osSemaphoreNew+0x88>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d104      	bne.n	800fe6c <osSemaphoreNew+0x88>
          mem = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	623b      	str	r3, [r7, #32]
 800fe66:	e001      	b.n	800fe6c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe72:	d04c      	beq.n	800ff0e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d128      	bne.n	800fecc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800fe7a:	6a3b      	ldr	r3, [r7, #32]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d10a      	bne.n	800fe96 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	2203      	movs	r2, #3
 800fe86:	9200      	str	r2, [sp, #0]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	2001      	movs	r0, #1
 800fe8e:	f000 fa55 	bl	801033c <xQueueGenericCreateStatic>
 800fe92:	6278      	str	r0, [r7, #36]	; 0x24
 800fe94:	e005      	b.n	800fea2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800fe96:	2203      	movs	r2, #3
 800fe98:	2100      	movs	r1, #0
 800fe9a:	2001      	movs	r0, #1
 800fe9c:	f000 fad0 	bl	8010440 <xQueueGenericCreate>
 800fea0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d022      	beq.n	800feee <osSemaphoreNew+0x10a>
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d01f      	beq.n	800feee <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800feae:	2300      	movs	r3, #0
 800feb0:	2200      	movs	r2, #0
 800feb2:	2100      	movs	r1, #0
 800feb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800feb6:	f000 fb9b 	bl	80105f0 <xQueueGenericSend>
 800feba:	4603      	mov	r3, r0
 800febc:	2b01      	cmp	r3, #1
 800febe:	d016      	beq.n	800feee <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800fec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fec2:	f001 f851 	bl	8010f68 <vQueueDelete>
            hSemaphore = NULL;
 800fec6:	2300      	movs	r3, #0
 800fec8:	627b      	str	r3, [r7, #36]	; 0x24
 800feca:	e010      	b.n	800feee <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800fecc:	6a3b      	ldr	r3, [r7, #32]
 800fece:	2b01      	cmp	r3, #1
 800fed0:	d108      	bne.n	800fee4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	461a      	mov	r2, r3
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f000 fb15 	bl	801050a <xQueueCreateCountingSemaphoreStatic>
 800fee0:	6278      	str	r0, [r7, #36]	; 0x24
 800fee2:	e004      	b.n	800feee <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fee4:	68b9      	ldr	r1, [r7, #8]
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f000 fb4a 	bl	8010580 <xQueueCreateCountingSemaphore>
 800feec:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d00c      	beq.n	800ff0e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <osSemaphoreNew+0x11e>
          name = attr->name;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	61fb      	str	r3, [r7, #28]
 800ff00:	e001      	b.n	800ff06 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ff02:	2300      	movs	r3, #0
 800ff04:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ff06:	69f9      	ldr	r1, [r7, #28]
 800ff08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff0a:	f001 f97b 	bl	8011204 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3728      	adds	r7, #40	; 0x28
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20001b90 	.word	0x20001b90

0800ff1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b088      	sub	sp, #32
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ff2e:	69bb      	ldr	r3, [r7, #24]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d103      	bne.n	800ff3c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ff34:	f06f 0303 	mvn.w	r3, #3
 800ff38:	61fb      	str	r3, [r7, #28]
 800ff3a:	e04b      	b.n	800ffd4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff3c:	f3ef 8305 	mrs	r3, IPSR
 800ff40:	617b      	str	r3, [r7, #20]
  return(result);
 800ff42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d10f      	bne.n	800ff68 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff48:	f3ef 8310 	mrs	r3, PRIMASK
 800ff4c:	613b      	str	r3, [r7, #16]
  return(result);
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d105      	bne.n	800ff60 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff54:	f3ef 8311 	mrs	r3, BASEPRI
 800ff58:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d026      	beq.n	800ffae <osSemaphoreAcquire+0x92>
 800ff60:	4b1f      	ldr	r3, [pc, #124]	; (800ffe0 <osSemaphoreAcquire+0xc4>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b02      	cmp	r3, #2
 800ff66:	d122      	bne.n	800ffae <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d003      	beq.n	800ff76 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800ff6e:	f06f 0303 	mvn.w	r3, #3
 800ff72:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ff74:	e02d      	b.n	800ffd2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ff7a:	f107 0308 	add.w	r3, r7, #8
 800ff7e:	461a      	mov	r2, r3
 800ff80:	2100      	movs	r1, #0
 800ff82:	69b8      	ldr	r0, [r7, #24]
 800ff84:	f000 ff6a 	bl	8010e5c <xQueueReceiveFromISR>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d003      	beq.n	800ff96 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ff8e:	f06f 0302 	mvn.w	r3, #2
 800ff92:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ff94:	e01d      	b.n	800ffd2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01a      	beq.n	800ffd2 <osSemaphoreAcquire+0xb6>
 800ff9c:	4b11      	ldr	r3, [pc, #68]	; (800ffe4 <osSemaphoreAcquire+0xc8>)
 800ff9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	f3bf 8f4f 	dsb	sy
 800ffa8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ffac:	e011      	b.n	800ffd2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ffae:	6839      	ldr	r1, [r7, #0]
 800ffb0:	69b8      	ldr	r0, [r7, #24]
 800ffb2:	f000 fe3f 	bl	8010c34 <xQueueSemaphoreTake>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d00b      	beq.n	800ffd4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d003      	beq.n	800ffca <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ffc2:	f06f 0301 	mvn.w	r3, #1
 800ffc6:	61fb      	str	r3, [r7, #28]
 800ffc8:	e004      	b.n	800ffd4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ffca:	f06f 0302 	mvn.w	r3, #2
 800ffce:	61fb      	str	r3, [r7, #28]
 800ffd0:	e000      	b.n	800ffd4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ffd2:	bf00      	nop
      }
    }
  }

  return (stat);
 800ffd4:	69fb      	ldr	r3, [r7, #28]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3720      	adds	r7, #32
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd80      	pop	{r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	20001b90 	.word	0x20001b90
 800ffe4:	e000ed04 	.word	0xe000ed04

0800ffe8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b088      	sub	sp, #32
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fff4:	2300      	movs	r3, #0
 800fff6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d103      	bne.n	8010006 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fffe:	f06f 0303 	mvn.w	r3, #3
 8010002:	61fb      	str	r3, [r7, #28]
 8010004:	e03e      	b.n	8010084 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010006:	f3ef 8305 	mrs	r3, IPSR
 801000a:	617b      	str	r3, [r7, #20]
  return(result);
 801000c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801000e:	2b00      	cmp	r3, #0
 8010010:	d10f      	bne.n	8010032 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010012:	f3ef 8310 	mrs	r3, PRIMASK
 8010016:	613b      	str	r3, [r7, #16]
  return(result);
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d105      	bne.n	801002a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801001e:	f3ef 8311 	mrs	r3, BASEPRI
 8010022:	60fb      	str	r3, [r7, #12]
  return(result);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d01e      	beq.n	8010068 <osSemaphoreRelease+0x80>
 801002a:	4b19      	ldr	r3, [pc, #100]	; (8010090 <osSemaphoreRelease+0xa8>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2b02      	cmp	r3, #2
 8010030:	d11a      	bne.n	8010068 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010032:	2300      	movs	r3, #0
 8010034:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010036:	f107 0308 	add.w	r3, r7, #8
 801003a:	4619      	mov	r1, r3
 801003c:	69b8      	ldr	r0, [r7, #24]
 801003e:	f000 fc7d 	bl	801093c <xQueueGiveFromISR>
 8010042:	4603      	mov	r3, r0
 8010044:	2b01      	cmp	r3, #1
 8010046:	d003      	beq.n	8010050 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010048:	f06f 0302 	mvn.w	r3, #2
 801004c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801004e:	e018      	b.n	8010082 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d015      	beq.n	8010082 <osSemaphoreRelease+0x9a>
 8010056:	4b0f      	ldr	r3, [pc, #60]	; (8010094 <osSemaphoreRelease+0xac>)
 8010058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010066:	e00c      	b.n	8010082 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010068:	2300      	movs	r3, #0
 801006a:	2200      	movs	r2, #0
 801006c:	2100      	movs	r1, #0
 801006e:	69b8      	ldr	r0, [r7, #24]
 8010070:	f000 fabe 	bl	80105f0 <xQueueGenericSend>
 8010074:	4603      	mov	r3, r0
 8010076:	2b01      	cmp	r3, #1
 8010078:	d004      	beq.n	8010084 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801007a:	f06f 0302 	mvn.w	r3, #2
 801007e:	61fb      	str	r3, [r7, #28]
 8010080:	e000      	b.n	8010084 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010082:	bf00      	nop
    }
  }

  return (stat);
 8010084:	69fb      	ldr	r3, [r7, #28]
}
 8010086:	4618      	mov	r0, r3
 8010088:	3720      	adds	r7, #32
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	20001b90 	.word	0x20001b90
 8010094:	e000ed04 	.word	0xe000ed04

08010098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	4a07      	ldr	r2, [pc, #28]	; (80100c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80100a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	4a06      	ldr	r2, [pc, #24]	; (80100c8 <vApplicationGetIdleTaskMemory+0x30>)
 80100ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2280      	movs	r2, #128	; 0x80
 80100b4:	601a      	str	r2, [r3, #0]
}
 80100b6:	bf00      	nop
 80100b8:	3714      	adds	r7, #20
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr
 80100c2:	bf00      	nop
 80100c4:	20001b94 	.word	0x20001b94
 80100c8:	20001c50 	.word	0x20001c50

080100cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80100cc:	b480      	push	{r7}
 80100ce:	b085      	sub	sp, #20
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4a07      	ldr	r2, [pc, #28]	; (80100f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80100dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	4a06      	ldr	r2, [pc, #24]	; (80100fc <vApplicationGetTimerTaskMemory+0x30>)
 80100e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100ea:	601a      	str	r2, [r3, #0]
}
 80100ec:	bf00      	nop
 80100ee:	3714      	adds	r7, #20
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	20001e50 	.word	0x20001e50
 80100fc:	20001f0c 	.word	0x20001f0c

08010100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f103 0208 	add.w	r2, r3, #8
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f04f 32ff 	mov.w	r2, #4294967295
 8010118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f103 0208 	add.w	r2, r3, #8
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f103 0208 	add.w	r2, r3, #8
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010134:	bf00      	nop
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr

08010140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801014e:	bf00      	nop
 8010150:	370c      	adds	r7, #12
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr

0801015a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801015a:	b480      	push	{r7}
 801015c:	b085      	sub	sp, #20
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
 8010162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	689a      	ldr	r2, [r3, #8]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	683a      	ldr	r2, [r7, #0]
 801017e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	683a      	ldr	r2, [r7, #0]
 8010184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	687a      	ldr	r2, [r7, #4]
 801018a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	1c5a      	adds	r2, r3, #1
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	601a      	str	r2, [r3, #0]
}
 8010196:	bf00      	nop
 8010198:	3714      	adds	r7, #20
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101a2:	b480      	push	{r7}
 80101a4:	b085      	sub	sp, #20
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b8:	d103      	bne.n	80101c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	60fb      	str	r3, [r7, #12]
 80101c0:	e00c      	b.n	80101dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	3308      	adds	r3, #8
 80101c6:	60fb      	str	r3, [r7, #12]
 80101c8:	e002      	b.n	80101d0 <vListInsert+0x2e>
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	60fb      	str	r3, [r7, #12]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d2f6      	bcs.n	80101ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	685a      	ldr	r2, [r3, #4]
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	683a      	ldr	r2, [r7, #0]
 80101ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	683a      	ldr	r2, [r7, #0]
 80101f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	1c5a      	adds	r2, r3, #1
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	601a      	str	r2, [r3, #0]
}
 8010208:	bf00      	nop
 801020a:	3714      	adds	r7, #20
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	691b      	ldr	r3, [r3, #16]
 8010220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	6892      	ldr	r2, [r2, #8]
 801022a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	689b      	ldr	r3, [r3, #8]
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	6852      	ldr	r2, [r2, #4]
 8010234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	687a      	ldr	r2, [r7, #4]
 801023c:	429a      	cmp	r2, r3
 801023e:	d103      	bne.n	8010248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	689a      	ldr	r2, [r3, #8]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	1e5a      	subs	r2, r3, #1
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	681b      	ldr	r3, [r3, #0]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3714      	adds	r7, #20
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10c      	bne.n	8010296 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801027c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010280:	b672      	cpsid	i
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	b662      	cpsie	i
 8010290:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010292:	bf00      	nop
 8010294:	e7fe      	b.n	8010294 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010296:	f002 fcf1 	bl	8012c7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102a2:	68f9      	ldr	r1, [r7, #12]
 80102a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102a6:	fb01 f303 	mul.w	r3, r1, r3
 80102aa:	441a      	add	r2, r3
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2200      	movs	r2, #0
 80102b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102c6:	3b01      	subs	r3, #1
 80102c8:	68f9      	ldr	r1, [r7, #12]
 80102ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102cc:	fb01 f303 	mul.w	r3, r1, r3
 80102d0:	441a      	add	r2, r3
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	22ff      	movs	r2, #255	; 0xff
 80102da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	22ff      	movs	r2, #255	; 0xff
 80102e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d114      	bne.n	8010316 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d01a      	beq.n	801032a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3310      	adds	r3, #16
 80102f8:	4618      	mov	r0, r3
 80102fa:	f001 fca9 	bl	8011c50 <xTaskRemoveFromEventList>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d012      	beq.n	801032a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010304:	4b0c      	ldr	r3, [pc, #48]	; (8010338 <xQueueGenericReset+0xd0>)
 8010306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801030a:	601a      	str	r2, [r3, #0]
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	e009      	b.n	801032a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	3310      	adds	r3, #16
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fef0 	bl	8010100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	3324      	adds	r3, #36	; 0x24
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff feeb 	bl	8010100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801032a:	f002 fcdb 	bl	8012ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801032e:	2301      	movs	r3, #1
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	e000ed04 	.word	0xe000ed04

0801033c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801033c:	b580      	push	{r7, lr}
 801033e:	b08e      	sub	sp, #56	; 0x38
 8010340:	af02      	add	r7, sp, #8
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
 8010348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d10c      	bne.n	801036a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8010350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010354:	b672      	cpsid	i
 8010356:	f383 8811 	msr	BASEPRI, r3
 801035a:	f3bf 8f6f 	isb	sy
 801035e:	f3bf 8f4f 	dsb	sy
 8010362:	b662      	cpsie	i
 8010364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010366:	bf00      	nop
 8010368:	e7fe      	b.n	8010368 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10c      	bne.n	801038a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010374:	b672      	cpsid	i
 8010376:	f383 8811 	msr	BASEPRI, r3
 801037a:	f3bf 8f6f 	isb	sy
 801037e:	f3bf 8f4f 	dsb	sy
 8010382:	b662      	cpsie	i
 8010384:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010386:	bf00      	nop
 8010388:	e7fe      	b.n	8010388 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d002      	beq.n	8010396 <xQueueGenericCreateStatic+0x5a>
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d001      	beq.n	801039a <xQueueGenericCreateStatic+0x5e>
 8010396:	2301      	movs	r3, #1
 8010398:	e000      	b.n	801039c <xQueueGenericCreateStatic+0x60>
 801039a:	2300      	movs	r3, #0
 801039c:	2b00      	cmp	r3, #0
 801039e:	d10c      	bne.n	80103ba <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80103a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a4:	b672      	cpsid	i
 80103a6:	f383 8811 	msr	BASEPRI, r3
 80103aa:	f3bf 8f6f 	isb	sy
 80103ae:	f3bf 8f4f 	dsb	sy
 80103b2:	b662      	cpsie	i
 80103b4:	623b      	str	r3, [r7, #32]
}
 80103b6:	bf00      	nop
 80103b8:	e7fe      	b.n	80103b8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d102      	bne.n	80103c6 <xQueueGenericCreateStatic+0x8a>
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d101      	bne.n	80103ca <xQueueGenericCreateStatic+0x8e>
 80103c6:	2301      	movs	r3, #1
 80103c8:	e000      	b.n	80103cc <xQueueGenericCreateStatic+0x90>
 80103ca:	2300      	movs	r3, #0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10c      	bne.n	80103ea <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80103d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d4:	b672      	cpsid	i
 80103d6:	f383 8811 	msr	BASEPRI, r3
 80103da:	f3bf 8f6f 	isb	sy
 80103de:	f3bf 8f4f 	dsb	sy
 80103e2:	b662      	cpsie	i
 80103e4:	61fb      	str	r3, [r7, #28]
}
 80103e6:	bf00      	nop
 80103e8:	e7fe      	b.n	80103e8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80103ea:	2350      	movs	r3, #80	; 0x50
 80103ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	2b50      	cmp	r3, #80	; 0x50
 80103f2:	d00c      	beq.n	801040e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f8:	b672      	cpsid	i
 80103fa:	f383 8811 	msr	BASEPRI, r3
 80103fe:	f3bf 8f6f 	isb	sy
 8010402:	f3bf 8f4f 	dsb	sy
 8010406:	b662      	cpsie	i
 8010408:	61bb      	str	r3, [r7, #24]
}
 801040a:	bf00      	nop
 801040c:	e7fe      	b.n	801040c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801040e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00d      	beq.n	8010436 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801041a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041c:	2201      	movs	r2, #1
 801041e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	4613      	mov	r3, r2
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	68b9      	ldr	r1, [r7, #8]
 8010430:	68f8      	ldr	r0, [r7, #12]
 8010432:	f000 f847 	bl	80104c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010438:	4618      	mov	r0, r3
 801043a:	3730      	adds	r7, #48	; 0x30
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010440:	b580      	push	{r7, lr}
 8010442:	b08a      	sub	sp, #40	; 0x28
 8010444:	af02      	add	r7, sp, #8
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	4613      	mov	r3, r2
 801044c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10c      	bne.n	801046e <xQueueGenericCreate+0x2e>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	b672      	cpsid	i
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	b662      	cpsie	i
 8010468:	613b      	str	r3, [r7, #16]
}
 801046a:	bf00      	nop
 801046c:	e7fe      	b.n	801046c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d102      	bne.n	801047a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010474:	2300      	movs	r3, #0
 8010476:	61fb      	str	r3, [r7, #28]
 8010478:	e004      	b.n	8010484 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	fb02 f303 	mul.w	r3, r2, r3
 8010482:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	3350      	adds	r3, #80	; 0x50
 8010488:	4618      	mov	r0, r3
 801048a:	f002 fd23 	bl	8012ed4 <pvPortMalloc>
 801048e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d011      	beq.n	80104ba <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	3350      	adds	r3, #80	; 0x50
 801049e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80104a8:	79fa      	ldrb	r2, [r7, #7]
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4613      	mov	r3, r2
 80104b0:	697a      	ldr	r2, [r7, #20]
 80104b2:	68b9      	ldr	r1, [r7, #8]
 80104b4:	68f8      	ldr	r0, [r7, #12]
 80104b6:	f000 f805 	bl	80104c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80104ba:	69bb      	ldr	r3, [r7, #24]
	}
 80104bc:	4618      	mov	r0, r3
 80104be:	3720      	adds	r7, #32
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
 80104d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d103      	bne.n	80104e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	69ba      	ldr	r2, [r7, #24]
 80104dc:	601a      	str	r2, [r3, #0]
 80104de:	e002      	b.n	80104e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80104e0:	69bb      	ldr	r3, [r7, #24]
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80104e6:	69bb      	ldr	r3, [r7, #24]
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80104f2:	2101      	movs	r1, #1
 80104f4:	69b8      	ldr	r0, [r7, #24]
 80104f6:	f7ff feb7 	bl	8010268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	78fa      	ldrb	r2, [r7, #3]
 80104fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010502:	bf00      	nop
 8010504:	3710      	adds	r7, #16
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801050a:	b580      	push	{r7, lr}
 801050c:	b08a      	sub	sp, #40	; 0x28
 801050e:	af02      	add	r7, sp, #8
 8010510:	60f8      	str	r0, [r7, #12]
 8010512:	60b9      	str	r1, [r7, #8]
 8010514:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10c      	bne.n	8010536 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 801051c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010520:	b672      	cpsid	i
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	b662      	cpsie	i
 8010530:	61bb      	str	r3, [r7, #24]
}
 8010532:	bf00      	nop
 8010534:	e7fe      	b.n	8010534 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010536:	68ba      	ldr	r2, [r7, #8]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	429a      	cmp	r2, r3
 801053c:	d90c      	bls.n	8010558 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010542:	b672      	cpsid	i
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	b662      	cpsie	i
 8010552:	617b      	str	r3, [r7, #20]
}
 8010554:	bf00      	nop
 8010556:	e7fe      	b.n	8010556 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010558:	2302      	movs	r3, #2
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	2100      	movs	r1, #0
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f7ff feea 	bl	801033c <xQueueGenericCreateStatic>
 8010568:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010576:	69fb      	ldr	r3, [r7, #28]
	}
 8010578:	4618      	mov	r0, r3
 801057a:	3720      	adds	r7, #32
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010580:	b580      	push	{r7, lr}
 8010582:	b086      	sub	sp, #24
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d10c      	bne.n	80105aa <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8010590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010594:	b672      	cpsid	i
 8010596:	f383 8811 	msr	BASEPRI, r3
 801059a:	f3bf 8f6f 	isb	sy
 801059e:	f3bf 8f4f 	dsb	sy
 80105a2:	b662      	cpsie	i
 80105a4:	613b      	str	r3, [r7, #16]
}
 80105a6:	bf00      	nop
 80105a8:	e7fe      	b.n	80105a8 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80105aa:	683a      	ldr	r2, [r7, #0]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d90c      	bls.n	80105cc <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80105b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105b6:	b672      	cpsid	i
 80105b8:	f383 8811 	msr	BASEPRI, r3
 80105bc:	f3bf 8f6f 	isb	sy
 80105c0:	f3bf 8f4f 	dsb	sy
 80105c4:	b662      	cpsie	i
 80105c6:	60fb      	str	r3, [r7, #12]
}
 80105c8:	bf00      	nop
 80105ca:	e7fe      	b.n	80105ca <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80105cc:	2202      	movs	r2, #2
 80105ce:	2100      	movs	r1, #0
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f7ff ff35 	bl	8010440 <xQueueGenericCreate>
 80105d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	683a      	ldr	r2, [r7, #0]
 80105e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80105e4:	697b      	ldr	r3, [r7, #20]
	}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
	...

080105f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b08e      	sub	sp, #56	; 0x38
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	607a      	str	r2, [r7, #4]
 80105fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80105fe:	2300      	movs	r3, #0
 8010600:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <xQueueGenericSend+0x36>
	__asm volatile
 801060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010610:	b672      	cpsid	i
 8010612:	f383 8811 	msr	BASEPRI, r3
 8010616:	f3bf 8f6f 	isb	sy
 801061a:	f3bf 8f4f 	dsb	sy
 801061e:	b662      	cpsie	i
 8010620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d103      	bne.n	8010634 <xQueueGenericSend+0x44>
 801062c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010630:	2b00      	cmp	r3, #0
 8010632:	d101      	bne.n	8010638 <xQueueGenericSend+0x48>
 8010634:	2301      	movs	r3, #1
 8010636:	e000      	b.n	801063a <xQueueGenericSend+0x4a>
 8010638:	2300      	movs	r3, #0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10c      	bne.n	8010658 <xQueueGenericSend+0x68>
	__asm volatile
 801063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010642:	b672      	cpsid	i
 8010644:	f383 8811 	msr	BASEPRI, r3
 8010648:	f3bf 8f6f 	isb	sy
 801064c:	f3bf 8f4f 	dsb	sy
 8010650:	b662      	cpsie	i
 8010652:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010654:	bf00      	nop
 8010656:	e7fe      	b.n	8010656 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	2b02      	cmp	r3, #2
 801065c:	d103      	bne.n	8010666 <xQueueGenericSend+0x76>
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010662:	2b01      	cmp	r3, #1
 8010664:	d101      	bne.n	801066a <xQueueGenericSend+0x7a>
 8010666:	2301      	movs	r3, #1
 8010668:	e000      	b.n	801066c <xQueueGenericSend+0x7c>
 801066a:	2300      	movs	r3, #0
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10c      	bne.n	801068a <xQueueGenericSend+0x9a>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	b672      	cpsid	i
 8010676:	f383 8811 	msr	BASEPRI, r3
 801067a:	f3bf 8f6f 	isb	sy
 801067e:	f3bf 8f4f 	dsb	sy
 8010682:	b662      	cpsie	i
 8010684:	623b      	str	r3, [r7, #32]
}
 8010686:	bf00      	nop
 8010688:	e7fe      	b.n	8010688 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801068a:	f001 fcab 	bl	8011fe4 <xTaskGetSchedulerState>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d102      	bne.n	801069a <xQueueGenericSend+0xaa>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d101      	bne.n	801069e <xQueueGenericSend+0xae>
 801069a:	2301      	movs	r3, #1
 801069c:	e000      	b.n	80106a0 <xQueueGenericSend+0xb0>
 801069e:	2300      	movs	r3, #0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10c      	bne.n	80106be <xQueueGenericSend+0xce>
	__asm volatile
 80106a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a8:	b672      	cpsid	i
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	b662      	cpsie	i
 80106b8:	61fb      	str	r3, [r7, #28]
}
 80106ba:	bf00      	nop
 80106bc:	e7fe      	b.n	80106bc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80106be:	f002 fadd 	bl	8012c7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d302      	bcc.n	80106d4 <xQueueGenericSend+0xe4>
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	2b02      	cmp	r3, #2
 80106d2:	d129      	bne.n	8010728 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106d4:	683a      	ldr	r2, [r7, #0]
 80106d6:	68b9      	ldr	r1, [r7, #8]
 80106d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106da:	f000 fc82 	bl	8010fe2 <prvCopyDataToQueue>
 80106de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d010      	beq.n	801070a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ea:	3324      	adds	r3, #36	; 0x24
 80106ec:	4618      	mov	r0, r3
 80106ee:	f001 faaf 	bl	8011c50 <xTaskRemoveFromEventList>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d013      	beq.n	8010720 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80106f8:	4b3f      	ldr	r3, [pc, #252]	; (80107f8 <xQueueGenericSend+0x208>)
 80106fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106fe:	601a      	str	r2, [r3, #0]
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	e00a      	b.n	8010720 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	2b00      	cmp	r3, #0
 801070e:	d007      	beq.n	8010720 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010710:	4b39      	ldr	r3, [pc, #228]	; (80107f8 <xQueueGenericSend+0x208>)
 8010712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010716:	601a      	str	r2, [r3, #0]
 8010718:	f3bf 8f4f 	dsb	sy
 801071c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010720:	f002 fae0 	bl	8012ce4 <vPortExitCritical>
				return pdPASS;
 8010724:	2301      	movs	r3, #1
 8010726:	e063      	b.n	80107f0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d103      	bne.n	8010736 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801072e:	f002 fad9 	bl	8012ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010732:	2300      	movs	r3, #0
 8010734:	e05c      	b.n	80107f0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010738:	2b00      	cmp	r3, #0
 801073a:	d106      	bne.n	801074a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801073c:	f107 0314 	add.w	r3, r7, #20
 8010740:	4618      	mov	r0, r3
 8010742:	f001 faeb 	bl	8011d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010746:	2301      	movs	r3, #1
 8010748:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801074a:	f002 facb 	bl	8012ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801074e:	f001 f84b 	bl	80117e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010752:	f002 fa93 	bl	8012c7c <vPortEnterCritical>
 8010756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801075c:	b25b      	sxtb	r3, r3
 801075e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010762:	d103      	bne.n	801076c <xQueueGenericSend+0x17c>
 8010764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010766:	2200      	movs	r2, #0
 8010768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010772:	b25b      	sxtb	r3, r3
 8010774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010778:	d103      	bne.n	8010782 <xQueueGenericSend+0x192>
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	2200      	movs	r2, #0
 801077e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010782:	f002 faaf 	bl	8012ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010786:	1d3a      	adds	r2, r7, #4
 8010788:	f107 0314 	add.w	r3, r7, #20
 801078c:	4611      	mov	r1, r2
 801078e:	4618      	mov	r0, r3
 8010790:	f001 fada 	bl	8011d48 <xTaskCheckForTimeOut>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d124      	bne.n	80107e4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801079a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801079c:	f000 fd19 	bl	80111d2 <prvIsQueueFull>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d018      	beq.n	80107d8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80107a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a8:	3310      	adds	r3, #16
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	4611      	mov	r1, r2
 80107ae:	4618      	mov	r0, r3
 80107b0:	f001 f9fa 	bl	8011ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80107b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107b6:	f000 fca4 	bl	8011102 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80107ba:	f001 f823 	bl	8011804 <xTaskResumeAll>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f47f af7c 	bne.w	80106be <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80107c6:	4b0c      	ldr	r3, [pc, #48]	; (80107f8 <xQueueGenericSend+0x208>)
 80107c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	e772      	b.n	80106be <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80107d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107da:	f000 fc92 	bl	8011102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107de:	f001 f811 	bl	8011804 <xTaskResumeAll>
 80107e2:	e76c      	b.n	80106be <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80107e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107e6:	f000 fc8c 	bl	8011102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107ea:	f001 f80b 	bl	8011804 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80107ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3738      	adds	r7, #56	; 0x38
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08e      	sub	sp, #56	; 0x38
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
 8010808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10c      	bne.n	801082e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	b672      	cpsid	i
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	b662      	cpsie	i
 8010828:	627b      	str	r3, [r7, #36]	; 0x24
}
 801082a:	bf00      	nop
 801082c:	e7fe      	b.n	801082c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d103      	bne.n	801083c <xQueueGenericSendFromISR+0x40>
 8010834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <xQueueGenericSendFromISR+0x44>
 801083c:	2301      	movs	r3, #1
 801083e:	e000      	b.n	8010842 <xQueueGenericSendFromISR+0x46>
 8010840:	2300      	movs	r3, #0
 8010842:	2b00      	cmp	r3, #0
 8010844:	d10c      	bne.n	8010860 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010846:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084a:	b672      	cpsid	i
 801084c:	f383 8811 	msr	BASEPRI, r3
 8010850:	f3bf 8f6f 	isb	sy
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	b662      	cpsie	i
 801085a:	623b      	str	r3, [r7, #32]
}
 801085c:	bf00      	nop
 801085e:	e7fe      	b.n	801085e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	2b02      	cmp	r3, #2
 8010864:	d103      	bne.n	801086e <xQueueGenericSendFromISR+0x72>
 8010866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801086a:	2b01      	cmp	r3, #1
 801086c:	d101      	bne.n	8010872 <xQueueGenericSendFromISR+0x76>
 801086e:	2301      	movs	r3, #1
 8010870:	e000      	b.n	8010874 <xQueueGenericSendFromISR+0x78>
 8010872:	2300      	movs	r3, #0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d10c      	bne.n	8010892 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087c:	b672      	cpsid	i
 801087e:	f383 8811 	msr	BASEPRI, r3
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	f3bf 8f4f 	dsb	sy
 801088a:	b662      	cpsie	i
 801088c:	61fb      	str	r3, [r7, #28]
}
 801088e:	bf00      	nop
 8010890:	e7fe      	b.n	8010890 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010892:	f002 fadb 	bl	8012e4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010896:	f3ef 8211 	mrs	r2, BASEPRI
 801089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089e:	b672      	cpsid	i
 80108a0:	f383 8811 	msr	BASEPRI, r3
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	f3bf 8f4f 	dsb	sy
 80108ac:	b662      	cpsie	i
 80108ae:	61ba      	str	r2, [r7, #24]
 80108b0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80108b2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80108b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108be:	429a      	cmp	r2, r3
 80108c0:	d302      	bcc.n	80108c8 <xQueueGenericSendFromISR+0xcc>
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d12c      	bne.n	8010922 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	68b9      	ldr	r1, [r7, #8]
 80108d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108d8:	f000 fb83 	bl	8010fe2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80108dc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80108e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e4:	d112      	bne.n	801090c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d016      	beq.n	801091c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f0:	3324      	adds	r3, #36	; 0x24
 80108f2:	4618      	mov	r0, r3
 80108f4:	f001 f9ac 	bl	8011c50 <xTaskRemoveFromEventList>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00e      	beq.n	801091c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d00b      	beq.n	801091c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2201      	movs	r2, #1
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	e007      	b.n	801091c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801090c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010910:	3301      	adds	r3, #1
 8010912:	b2db      	uxtb	r3, r3
 8010914:	b25a      	sxtb	r2, r3
 8010916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801091c:	2301      	movs	r3, #1
 801091e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010920:	e001      	b.n	8010926 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010922:	2300      	movs	r3, #0
 8010924:	637b      	str	r3, [r7, #52]	; 0x34
 8010926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010928:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801092a:	693b      	ldr	r3, [r7, #16]
 801092c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010930:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010934:	4618      	mov	r0, r3
 8010936:	3738      	adds	r7, #56	; 0x38
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}

0801093c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b08e      	sub	sp, #56	; 0x38
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094c:	2b00      	cmp	r3, #0
 801094e:	d10c      	bne.n	801096a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8010950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010954:	b672      	cpsid	i
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	b662      	cpsie	i
 8010964:	623b      	str	r3, [r7, #32]
}
 8010966:	bf00      	nop
 8010968:	e7fe      	b.n	8010968 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00c      	beq.n	801098c <xQueueGiveFromISR+0x50>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010976:	b672      	cpsid	i
 8010978:	f383 8811 	msr	BASEPRI, r3
 801097c:	f3bf 8f6f 	isb	sy
 8010980:	f3bf 8f4f 	dsb	sy
 8010984:	b662      	cpsie	i
 8010986:	61fb      	str	r3, [r7, #28]
}
 8010988:	bf00      	nop
 801098a:	e7fe      	b.n	801098a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801098c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d103      	bne.n	801099c <xQueueGiveFromISR+0x60>
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <xQueueGiveFromISR+0x64>
 801099c:	2301      	movs	r3, #1
 801099e:	e000      	b.n	80109a2 <xQueueGiveFromISR+0x66>
 80109a0:	2300      	movs	r3, #0
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d10c      	bne.n	80109c0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80109a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109aa:	b672      	cpsid	i
 80109ac:	f383 8811 	msr	BASEPRI, r3
 80109b0:	f3bf 8f6f 	isb	sy
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	b662      	cpsie	i
 80109ba:	61bb      	str	r3, [r7, #24]
}
 80109bc:	bf00      	nop
 80109be:	e7fe      	b.n	80109be <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109c0:	f002 fa44 	bl	8012e4c <vPortValidateInterruptPriority>
	__asm volatile
 80109c4:	f3ef 8211 	mrs	r2, BASEPRI
 80109c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109cc:	b672      	cpsid	i
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	b662      	cpsie	i
 80109dc:	617a      	str	r2, [r7, #20]
 80109de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80109e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d22b      	bcs.n	8010a4c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	1c5a      	adds	r2, r3, #1
 8010a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a04:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a0e:	d112      	bne.n	8010a36 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d016      	beq.n	8010a46 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1a:	3324      	adds	r3, #36	; 0x24
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f001 f917 	bl	8011c50 <xTaskRemoveFromEventList>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d00e      	beq.n	8010a46 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00b      	beq.n	8010a46 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	2201      	movs	r2, #1
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	e007      	b.n	8010a46 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	b2db      	uxtb	r3, r3
 8010a3e:	b25a      	sxtb	r2, r3
 8010a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a46:	2301      	movs	r3, #1
 8010a48:	637b      	str	r3, [r7, #52]	; 0x34
 8010a4a:	e001      	b.n	8010a50 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8010a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a52:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f383 8811 	msr	BASEPRI, r3
}
 8010a5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3738      	adds	r7, #56	; 0x38
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
	...

08010a68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b08c      	sub	sp, #48	; 0x30
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a74:	2300      	movs	r3, #0
 8010a76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d10c      	bne.n	8010a9c <xQueueReceive+0x34>
	__asm volatile
 8010a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a86:	b672      	cpsid	i
 8010a88:	f383 8811 	msr	BASEPRI, r3
 8010a8c:	f3bf 8f6f 	isb	sy
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	b662      	cpsie	i
 8010a96:	623b      	str	r3, [r7, #32]
}
 8010a98:	bf00      	nop
 8010a9a:	e7fe      	b.n	8010a9a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d103      	bne.n	8010aaa <xQueueReceive+0x42>
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <xQueueReceive+0x46>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e000      	b.n	8010ab0 <xQueueReceive+0x48>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d10c      	bne.n	8010ace <xQueueReceive+0x66>
	__asm volatile
 8010ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab8:	b672      	cpsid	i
 8010aba:	f383 8811 	msr	BASEPRI, r3
 8010abe:	f3bf 8f6f 	isb	sy
 8010ac2:	f3bf 8f4f 	dsb	sy
 8010ac6:	b662      	cpsie	i
 8010ac8:	61fb      	str	r3, [r7, #28]
}
 8010aca:	bf00      	nop
 8010acc:	e7fe      	b.n	8010acc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ace:	f001 fa89 	bl	8011fe4 <xTaskGetSchedulerState>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d102      	bne.n	8010ade <xQueueReceive+0x76>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d101      	bne.n	8010ae2 <xQueueReceive+0x7a>
 8010ade:	2301      	movs	r3, #1
 8010ae0:	e000      	b.n	8010ae4 <xQueueReceive+0x7c>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10c      	bne.n	8010b02 <xQueueReceive+0x9a>
	__asm volatile
 8010ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aec:	b672      	cpsid	i
 8010aee:	f383 8811 	msr	BASEPRI, r3
 8010af2:	f3bf 8f6f 	isb	sy
 8010af6:	f3bf 8f4f 	dsb	sy
 8010afa:	b662      	cpsie	i
 8010afc:	61bb      	str	r3, [r7, #24]
}
 8010afe:	bf00      	nop
 8010b00:	e7fe      	b.n	8010b00 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b02:	f002 f8bb 	bl	8012c7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d01f      	beq.n	8010b52 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b12:	68b9      	ldr	r1, [r7, #8]
 8010b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b16:	f000 face 	bl	80110b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1c:	1e5a      	subs	r2, r3, #1
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00f      	beq.n	8010b4a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2c:	3310      	adds	r3, #16
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f001 f88e 	bl	8011c50 <xTaskRemoveFromEventList>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d007      	beq.n	8010b4a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b3a:	4b3d      	ldr	r3, [pc, #244]	; (8010c30 <xQueueReceive+0x1c8>)
 8010b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b40:	601a      	str	r2, [r3, #0]
 8010b42:	f3bf 8f4f 	dsb	sy
 8010b46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b4a:	f002 f8cb 	bl	8012ce4 <vPortExitCritical>
				return pdPASS;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e069      	b.n	8010c26 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d103      	bne.n	8010b60 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b58:	f002 f8c4 	bl	8012ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	e062      	b.n	8010c26 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d106      	bne.n	8010b74 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b66:	f107 0310 	add.w	r3, r7, #16
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f001 f8d6 	bl	8011d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b70:	2301      	movs	r3, #1
 8010b72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b74:	f002 f8b6 	bl	8012ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b78:	f000 fe36 	bl	80117e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b7c:	f002 f87e 	bl	8012c7c <vPortEnterCritical>
 8010b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b86:	b25b      	sxtb	r3, r3
 8010b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b8c:	d103      	bne.n	8010b96 <xQueueReceive+0x12e>
 8010b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b9c:	b25b      	sxtb	r3, r3
 8010b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba2:	d103      	bne.n	8010bac <xQueueReceive+0x144>
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bac:	f002 f89a 	bl	8012ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bb0:	1d3a      	adds	r2, r7, #4
 8010bb2:	f107 0310 	add.w	r3, r7, #16
 8010bb6:	4611      	mov	r1, r2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f001 f8c5 	bl	8011d48 <xTaskCheckForTimeOut>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d123      	bne.n	8010c0c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bc6:	f000 faee 	bl	80111a6 <prvIsQueueEmpty>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d017      	beq.n	8010c00 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd2:	3324      	adds	r3, #36	; 0x24
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f000 ffe5 	bl	8011ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010be0:	f000 fa8f 	bl	8011102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010be4:	f000 fe0e 	bl	8011804 <xTaskResumeAll>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d189      	bne.n	8010b02 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010bee:	4b10      	ldr	r3, [pc, #64]	; (8010c30 <xQueueReceive+0x1c8>)
 8010bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bf4:	601a      	str	r2, [r3, #0]
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	e780      	b.n	8010b02 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c02:	f000 fa7e 	bl	8011102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c06:	f000 fdfd 	bl	8011804 <xTaskResumeAll>
 8010c0a:	e77a      	b.n	8010b02 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c0e:	f000 fa78 	bl	8011102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c12:	f000 fdf7 	bl	8011804 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c18:	f000 fac5 	bl	80111a6 <prvIsQueueEmpty>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f43f af6f 	beq.w	8010b02 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3730      	adds	r7, #48	; 0x30
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	e000ed04 	.word	0xe000ed04

08010c34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b08e      	sub	sp, #56	; 0x38
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010c46:	2300      	movs	r3, #0
 8010c48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10c      	bne.n	8010c6a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	b672      	cpsid	i
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	b662      	cpsie	i
 8010c64:	623b      	str	r3, [r7, #32]
}
 8010c66:	bf00      	nop
 8010c68:	e7fe      	b.n	8010c68 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00c      	beq.n	8010c8c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8010c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c76:	b672      	cpsid	i
 8010c78:	f383 8811 	msr	BASEPRI, r3
 8010c7c:	f3bf 8f6f 	isb	sy
 8010c80:	f3bf 8f4f 	dsb	sy
 8010c84:	b662      	cpsie	i
 8010c86:	61fb      	str	r3, [r7, #28]
}
 8010c88:	bf00      	nop
 8010c8a:	e7fe      	b.n	8010c8a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c8c:	f001 f9aa 	bl	8011fe4 <xTaskGetSchedulerState>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d102      	bne.n	8010c9c <xQueueSemaphoreTake+0x68>
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d101      	bne.n	8010ca0 <xQueueSemaphoreTake+0x6c>
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	e000      	b.n	8010ca2 <xQueueSemaphoreTake+0x6e>
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d10c      	bne.n	8010cc0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8010ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010caa:	b672      	cpsid	i
 8010cac:	f383 8811 	msr	BASEPRI, r3
 8010cb0:	f3bf 8f6f 	isb	sy
 8010cb4:	f3bf 8f4f 	dsb	sy
 8010cb8:	b662      	cpsie	i
 8010cba:	61bb      	str	r3, [r7, #24]
}
 8010cbc:	bf00      	nop
 8010cbe:	e7fe      	b.n	8010cbe <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cc0:	f001 ffdc 	bl	8012c7c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d024      	beq.n	8010d1a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	1e5a      	subs	r2, r3, #1
 8010cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d104      	bne.n	8010cea <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010ce0:	f001 fafe 	bl	80122e0 <pvTaskIncrementMutexHeldCount>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cec:	691b      	ldr	r3, [r3, #16]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00f      	beq.n	8010d12 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	3310      	adds	r3, #16
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f000 ffaa 	bl	8011c50 <xTaskRemoveFromEventList>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d007      	beq.n	8010d12 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d02:	4b55      	ldr	r3, [pc, #340]	; (8010e58 <xQueueSemaphoreTake+0x224>)
 8010d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d08:	601a      	str	r2, [r3, #0]
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d12:	f001 ffe7 	bl	8012ce4 <vPortExitCritical>
				return pdPASS;
 8010d16:	2301      	movs	r3, #1
 8010d18:	e099      	b.n	8010e4e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d113      	bne.n	8010d48 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00c      	beq.n	8010d40 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2a:	b672      	cpsid	i
 8010d2c:	f383 8811 	msr	BASEPRI, r3
 8010d30:	f3bf 8f6f 	isb	sy
 8010d34:	f3bf 8f4f 	dsb	sy
 8010d38:	b662      	cpsie	i
 8010d3a:	617b      	str	r3, [r7, #20]
}
 8010d3c:	bf00      	nop
 8010d3e:	e7fe      	b.n	8010d3e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010d40:	f001 ffd0 	bl	8012ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d44:	2300      	movs	r3, #0
 8010d46:	e082      	b.n	8010e4e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d106      	bne.n	8010d5c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d4e:	f107 030c 	add.w	r3, r7, #12
 8010d52:	4618      	mov	r0, r3
 8010d54:	f000 ffe2 	bl	8011d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d58:	2301      	movs	r3, #1
 8010d5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d5c:	f001 ffc2 	bl	8012ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d60:	f000 fd42 	bl	80117e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d64:	f001 ff8a 	bl	8012c7c <vPortEnterCritical>
 8010d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d6e:	b25b      	sxtb	r3, r3
 8010d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d74:	d103      	bne.n	8010d7e <xQueueSemaphoreTake+0x14a>
 8010d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d84:	b25b      	sxtb	r3, r3
 8010d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d8a:	d103      	bne.n	8010d94 <xQueueSemaphoreTake+0x160>
 8010d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d94:	f001 ffa6 	bl	8012ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d98:	463a      	mov	r2, r7
 8010d9a:	f107 030c 	add.w	r3, r7, #12
 8010d9e:	4611      	mov	r1, r2
 8010da0:	4618      	mov	r0, r3
 8010da2:	f000 ffd1 	bl	8011d48 <xTaskCheckForTimeOut>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d132      	bne.n	8010e12 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010dac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dae:	f000 f9fa 	bl	80111a6 <prvIsQueueEmpty>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d026      	beq.n	8010e06 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d109      	bne.n	8010dd4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8010dc0:	f001 ff5c 	bl	8012c7c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f001 f929 	bl	8012020 <xTaskPriorityInherit>
 8010dce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010dd0:	f001 ff88 	bl	8012ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	3324      	adds	r3, #36	; 0x24
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	4611      	mov	r1, r2
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f000 fee3 	bl	8011ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010de4:	f000 f98d 	bl	8011102 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010de8:	f000 fd0c 	bl	8011804 <xTaskResumeAll>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f47f af66 	bne.w	8010cc0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8010df4:	4b18      	ldr	r3, [pc, #96]	; (8010e58 <xQueueSemaphoreTake+0x224>)
 8010df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dfa:	601a      	str	r2, [r3, #0]
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	f3bf 8f6f 	isb	sy
 8010e04:	e75c      	b.n	8010cc0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e08:	f000 f97b 	bl	8011102 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e0c:	f000 fcfa 	bl	8011804 <xTaskResumeAll>
 8010e10:	e756      	b.n	8010cc0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e14:	f000 f975 	bl	8011102 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e18:	f000 fcf4 	bl	8011804 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e1e:	f000 f9c2 	bl	80111a6 <prvIsQueueEmpty>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f43f af4b 	beq.w	8010cc0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00d      	beq.n	8010e4c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8010e30:	f001 ff24 	bl	8012c7c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010e34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e36:	f000 f8bc 	bl	8010fb2 <prvGetDisinheritPriorityAfterTimeout>
 8010e3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3e:	689b      	ldr	r3, [r3, #8]
 8010e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e42:	4618      	mov	r0, r3
 8010e44:	f001 f9c6 	bl	80121d4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010e48:	f001 ff4c 	bl	8012ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3738      	adds	r7, #56	; 0x38
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	e000ed04 	.word	0xe000ed04

08010e5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b08e      	sub	sp, #56	; 0x38
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d10c      	bne.n	8010e8c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8010e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e76:	b672      	cpsid	i
 8010e78:	f383 8811 	msr	BASEPRI, r3
 8010e7c:	f3bf 8f6f 	isb	sy
 8010e80:	f3bf 8f4f 	dsb	sy
 8010e84:	b662      	cpsie	i
 8010e86:	623b      	str	r3, [r7, #32]
}
 8010e88:	bf00      	nop
 8010e8a:	e7fe      	b.n	8010e8a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d103      	bne.n	8010e9a <xQueueReceiveFromISR+0x3e>
 8010e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <xQueueReceiveFromISR+0x42>
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e000      	b.n	8010ea0 <xQueueReceiveFromISR+0x44>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d10c      	bne.n	8010ebe <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea8:	b672      	cpsid	i
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	b662      	cpsie	i
 8010eb8:	61fb      	str	r3, [r7, #28]
}
 8010eba:	bf00      	nop
 8010ebc:	e7fe      	b.n	8010ebc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ebe:	f001 ffc5 	bl	8012e4c <vPortValidateInterruptPriority>
	__asm volatile
 8010ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8010ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eca:	b672      	cpsid	i
 8010ecc:	f383 8811 	msr	BASEPRI, r3
 8010ed0:	f3bf 8f6f 	isb	sy
 8010ed4:	f3bf 8f4f 	dsb	sy
 8010ed8:	b662      	cpsie	i
 8010eda:	61ba      	str	r2, [r7, #24]
 8010edc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010ede:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d02f      	beq.n	8010f4e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ef8:	68b9      	ldr	r1, [r7, #8]
 8010efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010efc:	f000 f8db 	bl	80110b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f02:	1e5a      	subs	r2, r3, #1
 8010f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f10:	d112      	bne.n	8010f38 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f14:	691b      	ldr	r3, [r3, #16]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d016      	beq.n	8010f48 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	3310      	adds	r3, #16
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f000 fe96 	bl	8011c50 <xTaskRemoveFromEventList>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00e      	beq.n	8010f48 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00b      	beq.n	8010f48 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2201      	movs	r2, #1
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	e007      	b.n	8010f48 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	b25a      	sxtb	r2, r3
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f4c:	e001      	b.n	8010f52 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	637b      	str	r3, [r7, #52]	; 0x34
 8010f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	f383 8811 	msr	BASEPRI, r3
}
 8010f5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3738      	adds	r7, #56	; 0x38
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10c      	bne.n	8010f94 <vQueueDelete+0x2c>
	__asm volatile
 8010f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7e:	b672      	cpsid	i
 8010f80:	f383 8811 	msr	BASEPRI, r3
 8010f84:	f3bf 8f6f 	isb	sy
 8010f88:	f3bf 8f4f 	dsb	sy
 8010f8c:	b662      	cpsie	i
 8010f8e:	60bb      	str	r3, [r7, #8]
}
 8010f90:	bf00      	nop
 8010f92:	e7fe      	b.n	8010f92 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	f000 f95f 	bl	8011258 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8010fa4:	68f8      	ldr	r0, [r7, #12]
 8010fa6:	f002 f85f 	bl	8013068 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010faa:	bf00      	nop
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}

08010fb2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010fb2:	b480      	push	{r7}
 8010fb4:	b085      	sub	sp, #20
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d006      	beq.n	8010fd0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010fcc:	60fb      	str	r3, [r7, #12]
 8010fce:	e001      	b.n	8010fd4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
	}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3714      	adds	r7, #20
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr

08010fe2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010fe2:	b580      	push	{r7, lr}
 8010fe4:	b086      	sub	sp, #24
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	60f8      	str	r0, [r7, #12]
 8010fea:	60b9      	str	r1, [r7, #8]
 8010fec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d10d      	bne.n	801101c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d14d      	bne.n	80110a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	689b      	ldr	r3, [r3, #8]
 801100c:	4618      	mov	r0, r3
 801100e:	f001 f86f 	bl	80120f0 <xTaskPriorityDisinherit>
 8011012:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	609a      	str	r2, [r3, #8]
 801101a:	e043      	b.n	80110a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d119      	bne.n	8011056 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	6858      	ldr	r0, [r3, #4]
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102a:	461a      	mov	r2, r3
 801102c:	68b9      	ldr	r1, [r7, #8]
 801102e:	f002 fa58 	bl	80134e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	685a      	ldr	r2, [r3, #4]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801103a:	441a      	add	r2, r3
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	429a      	cmp	r2, r3
 801104a:	d32b      	bcc.n	80110a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	605a      	str	r2, [r3, #4]
 8011054:	e026      	b.n	80110a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	68d8      	ldr	r0, [r3, #12]
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105e:	461a      	mov	r2, r3
 8011060:	68b9      	ldr	r1, [r7, #8]
 8011062:	f002 fa3e 	bl	80134e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	68da      	ldr	r2, [r3, #12]
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106e:	425b      	negs	r3, r3
 8011070:	441a      	add	r2, r3
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	68da      	ldr	r2, [r3, #12]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	429a      	cmp	r2, r3
 8011080:	d207      	bcs.n	8011092 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	689a      	ldr	r2, [r3, #8]
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108a:	425b      	negs	r3, r3
 801108c:	441a      	add	r2, r3
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b02      	cmp	r3, #2
 8011096:	d105      	bne.n	80110a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d002      	beq.n	80110a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	3b01      	subs	r3, #1
 80110a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	1c5a      	adds	r2, r3, #1
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110ac:	697b      	ldr	r3, [r7, #20]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
 80110be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d018      	beq.n	80110fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68da      	ldr	r2, [r3, #12]
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d0:	441a      	add	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	68da      	ldr	r2, [r3, #12]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	689b      	ldr	r3, [r3, #8]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d303      	bcc.n	80110ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	68d9      	ldr	r1, [r3, #12]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f2:	461a      	mov	r2, r3
 80110f4:	6838      	ldr	r0, [r7, #0]
 80110f6:	f002 f9f4 	bl	80134e2 <memcpy>
	}
}
 80110fa:	bf00      	nop
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b084      	sub	sp, #16
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801110a:	f001 fdb7 	bl	8012c7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011114:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011116:	e011      	b.n	801113c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801111c:	2b00      	cmp	r3, #0
 801111e:	d012      	beq.n	8011146 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	3324      	adds	r3, #36	; 0x24
 8011124:	4618      	mov	r0, r3
 8011126:	f000 fd93 	bl	8011c50 <xTaskRemoveFromEventList>
 801112a:	4603      	mov	r3, r0
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011130:	f000 fe70 	bl	8011e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011134:	7bfb      	ldrb	r3, [r7, #15]
 8011136:	3b01      	subs	r3, #1
 8011138:	b2db      	uxtb	r3, r3
 801113a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011140:	2b00      	cmp	r3, #0
 8011142:	dce9      	bgt.n	8011118 <prvUnlockQueue+0x16>
 8011144:	e000      	b.n	8011148 <prvUnlockQueue+0x46>
					break;
 8011146:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	22ff      	movs	r2, #255	; 0xff
 801114c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011150:	f001 fdc8 	bl	8012ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011154:	f001 fd92 	bl	8012c7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801115e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011160:	e011      	b.n	8011186 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d012      	beq.n	8011190 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	3310      	adds	r3, #16
 801116e:	4618      	mov	r0, r3
 8011170:	f000 fd6e 	bl	8011c50 <xTaskRemoveFromEventList>
 8011174:	4603      	mov	r3, r0
 8011176:	2b00      	cmp	r3, #0
 8011178:	d001      	beq.n	801117e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801117a:	f000 fe4b 	bl	8011e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801117e:	7bbb      	ldrb	r3, [r7, #14]
 8011180:	3b01      	subs	r3, #1
 8011182:	b2db      	uxtb	r3, r3
 8011184:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801118a:	2b00      	cmp	r3, #0
 801118c:	dce9      	bgt.n	8011162 <prvUnlockQueue+0x60>
 801118e:	e000      	b.n	8011192 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011190:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	22ff      	movs	r2, #255	; 0xff
 8011196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801119a:	f001 fda3 	bl	8012ce4 <vPortExitCritical>
}
 801119e:	bf00      	nop
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b084      	sub	sp, #16
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111ae:	f001 fd65 	bl	8012c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d102      	bne.n	80111c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80111ba:	2301      	movs	r3, #1
 80111bc:	60fb      	str	r3, [r7, #12]
 80111be:	e001      	b.n	80111c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80111c0:	2300      	movs	r3, #0
 80111c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111c4:	f001 fd8e 	bl	8012ce4 <vPortExitCritical>

	return xReturn;
 80111c8:	68fb      	ldr	r3, [r7, #12]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b084      	sub	sp, #16
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111da:	f001 fd4f 	bl	8012c7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111e6:	429a      	cmp	r2, r3
 80111e8:	d102      	bne.n	80111f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80111ea:	2301      	movs	r3, #1
 80111ec:	60fb      	str	r3, [r7, #12]
 80111ee:	e001      	b.n	80111f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80111f0:	2300      	movs	r3, #0
 80111f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111f4:	f001 fd76 	bl	8012ce4 <vPortExitCritical>

	return xReturn;
 80111f8:	68fb      	ldr	r3, [r7, #12]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801120e:	2300      	movs	r3, #0
 8011210:	60fb      	str	r3, [r7, #12]
 8011212:	e014      	b.n	801123e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011214:	4a0f      	ldr	r2, [pc, #60]	; (8011254 <vQueueAddToRegistry+0x50>)
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d10b      	bne.n	8011238 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011220:	490c      	ldr	r1, [pc, #48]	; (8011254 <vQueueAddToRegistry+0x50>)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801122a:	4a0a      	ldr	r2, [pc, #40]	; (8011254 <vQueueAddToRegistry+0x50>)
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	00db      	lsls	r3, r3, #3
 8011230:	4413      	add	r3, r2
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011236:	e006      	b.n	8011246 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	3301      	adds	r3, #1
 801123c:	60fb      	str	r3, [r7, #12]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b07      	cmp	r3, #7
 8011242:	d9e7      	bls.n	8011214 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011244:	bf00      	nop
 8011246:	bf00      	nop
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	2000230c 	.word	0x2000230c

08011258 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011260:	2300      	movs	r3, #0
 8011262:	60fb      	str	r3, [r7, #12]
 8011264:	e016      	b.n	8011294 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011266:	4a10      	ldr	r2, [pc, #64]	; (80112a8 <vQueueUnregisterQueue+0x50>)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	4413      	add	r3, r2
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	429a      	cmp	r2, r3
 8011274:	d10b      	bne.n	801128e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011276:	4a0c      	ldr	r2, [pc, #48]	; (80112a8 <vQueueUnregisterQueue+0x50>)
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2100      	movs	r1, #0
 801127c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011280:	4a09      	ldr	r2, [pc, #36]	; (80112a8 <vQueueUnregisterQueue+0x50>)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	00db      	lsls	r3, r3, #3
 8011286:	4413      	add	r3, r2
 8011288:	2200      	movs	r2, #0
 801128a:	605a      	str	r2, [r3, #4]
				break;
 801128c:	e006      	b.n	801129c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	3301      	adds	r3, #1
 8011292:	60fb      	str	r3, [r7, #12]
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	2b07      	cmp	r3, #7
 8011298:	d9e5      	bls.n	8011266 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801129a:	bf00      	nop
 801129c:	bf00      	nop
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	2000230c 	.word	0x2000230c

080112ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b086      	sub	sp, #24
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	60f8      	str	r0, [r7, #12]
 80112b4:	60b9      	str	r1, [r7, #8]
 80112b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80112bc:	f001 fcde 	bl	8012c7c <vPortEnterCritical>
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112c6:	b25b      	sxtb	r3, r3
 80112c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112cc:	d103      	bne.n	80112d6 <vQueueWaitForMessageRestricted+0x2a>
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2200      	movs	r2, #0
 80112d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112dc:	b25b      	sxtb	r3, r3
 80112de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e2:	d103      	bne.n	80112ec <vQueueWaitForMessageRestricted+0x40>
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112ec:	f001 fcfa 	bl	8012ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d106      	bne.n	8011306 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	3324      	adds	r3, #36	; 0x24
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	68b9      	ldr	r1, [r7, #8]
 8011300:	4618      	mov	r0, r3
 8011302:	f000 fc77 	bl	8011bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011306:	6978      	ldr	r0, [r7, #20]
 8011308:	f7ff fefb 	bl	8011102 <prvUnlockQueue>
	}
 801130c:	bf00      	nop
 801130e:	3718      	adds	r7, #24
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011314:	b580      	push	{r7, lr}
 8011316:	b08e      	sub	sp, #56	; 0x38
 8011318:	af04      	add	r7, sp, #16
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	607a      	str	r2, [r7, #4]
 8011320:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10c      	bne.n	8011342 <xTaskCreateStatic+0x2e>
	__asm volatile
 8011328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132c:	b672      	cpsid	i
 801132e:	f383 8811 	msr	BASEPRI, r3
 8011332:	f3bf 8f6f 	isb	sy
 8011336:	f3bf 8f4f 	dsb	sy
 801133a:	b662      	cpsie	i
 801133c:	623b      	str	r3, [r7, #32]
}
 801133e:	bf00      	nop
 8011340:	e7fe      	b.n	8011340 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011344:	2b00      	cmp	r3, #0
 8011346:	d10c      	bne.n	8011362 <xTaskCreateStatic+0x4e>
	__asm volatile
 8011348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134c:	b672      	cpsid	i
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	b662      	cpsie	i
 801135c:	61fb      	str	r3, [r7, #28]
}
 801135e:	bf00      	nop
 8011360:	e7fe      	b.n	8011360 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011362:	23bc      	movs	r3, #188	; 0xbc
 8011364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011366:	693b      	ldr	r3, [r7, #16]
 8011368:	2bbc      	cmp	r3, #188	; 0xbc
 801136a:	d00c      	beq.n	8011386 <xTaskCreateStatic+0x72>
	__asm volatile
 801136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011370:	b672      	cpsid	i
 8011372:	f383 8811 	msr	BASEPRI, r3
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	f3bf 8f4f 	dsb	sy
 801137e:	b662      	cpsie	i
 8011380:	61bb      	str	r3, [r7, #24]
}
 8011382:	bf00      	nop
 8011384:	e7fe      	b.n	8011384 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011386:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	2b00      	cmp	r3, #0
 801138c:	d01e      	beq.n	80113cc <xTaskCreateStatic+0xb8>
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	2b00      	cmp	r3, #0
 8011392:	d01b      	beq.n	80113cc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011396:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801139c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	2202      	movs	r2, #2
 80113a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80113a6:	2300      	movs	r3, #0
 80113a8:	9303      	str	r3, [sp, #12]
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	9302      	str	r3, [sp, #8]
 80113ae:	f107 0314 	add.w	r3, r7, #20
 80113b2:	9301      	str	r3, [sp, #4]
 80113b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	68b9      	ldr	r1, [r7, #8]
 80113be:	68f8      	ldr	r0, [r7, #12]
 80113c0:	f000 f850 	bl	8011464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113c6:	f000 f8f5 	bl	80115b4 <prvAddNewTaskToReadyList>
 80113ca:	e001      	b.n	80113d0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80113d0:	697b      	ldr	r3, [r7, #20]
	}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3728      	adds	r7, #40	; 0x28
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}

080113da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b08c      	sub	sp, #48	; 0x30
 80113de:	af04      	add	r7, sp, #16
 80113e0:	60f8      	str	r0, [r7, #12]
 80113e2:	60b9      	str	r1, [r7, #8]
 80113e4:	603b      	str	r3, [r7, #0]
 80113e6:	4613      	mov	r3, r2
 80113e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80113ea:	88fb      	ldrh	r3, [r7, #6]
 80113ec:	009b      	lsls	r3, r3, #2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f001 fd70 	bl	8012ed4 <pvPortMalloc>
 80113f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00e      	beq.n	801141a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80113fc:	20bc      	movs	r0, #188	; 0xbc
 80113fe:	f001 fd69 	bl	8012ed4 <pvPortMalloc>
 8011402:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d003      	beq.n	8011412 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	697a      	ldr	r2, [r7, #20]
 801140e:	631a      	str	r2, [r3, #48]	; 0x30
 8011410:	e005      	b.n	801141e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011412:	6978      	ldr	r0, [r7, #20]
 8011414:	f001 fe28 	bl	8013068 <vPortFree>
 8011418:	e001      	b.n	801141e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801141a:	2300      	movs	r3, #0
 801141c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d017      	beq.n	8011454 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	2200      	movs	r2, #0
 8011428:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801142c:	88fa      	ldrh	r2, [r7, #6]
 801142e:	2300      	movs	r3, #0
 8011430:	9303      	str	r3, [sp, #12]
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	9302      	str	r3, [sp, #8]
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	9301      	str	r3, [sp, #4]
 801143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	68b9      	ldr	r1, [r7, #8]
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f000 f80e 	bl	8011464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011448:	69f8      	ldr	r0, [r7, #28]
 801144a:	f000 f8b3 	bl	80115b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801144e:	2301      	movs	r3, #1
 8011450:	61bb      	str	r3, [r7, #24]
 8011452:	e002      	b.n	801145a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011454:	f04f 33ff 	mov.w	r3, #4294967295
 8011458:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801145a:	69bb      	ldr	r3, [r7, #24]
	}
 801145c:	4618      	mov	r0, r3
 801145e:	3720      	adds	r7, #32
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
 8011470:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	461a      	mov	r2, r3
 801147c:	21a5      	movs	r1, #165	; 0xa5
 801147e:	f002 f83e 	bl	80134fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011486:	6879      	ldr	r1, [r7, #4]
 8011488:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801148c:	440b      	add	r3, r1
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4413      	add	r3, r2
 8011492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	f023 0307 	bic.w	r3, r3, #7
 801149a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	f003 0307 	and.w	r3, r3, #7
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00c      	beq.n	80114c0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80114a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114aa:	b672      	cpsid	i
 80114ac:	f383 8811 	msr	BASEPRI, r3
 80114b0:	f3bf 8f6f 	isb	sy
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	b662      	cpsie	i
 80114ba:	617b      	str	r3, [r7, #20]
}
 80114bc:	bf00      	nop
 80114be:	e7fe      	b.n	80114be <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d01f      	beq.n	8011506 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114c6:	2300      	movs	r3, #0
 80114c8:	61fb      	str	r3, [r7, #28]
 80114ca:	e012      	b.n	80114f2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	4413      	add	r3, r2
 80114d2:	7819      	ldrb	r1, [r3, #0]
 80114d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	4413      	add	r3, r2
 80114da:	3334      	adds	r3, #52	; 0x34
 80114dc:	460a      	mov	r2, r1
 80114de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80114e0:	68ba      	ldr	r2, [r7, #8]
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	4413      	add	r3, r2
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d006      	beq.n	80114fa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	3301      	adds	r3, #1
 80114f0:	61fb      	str	r3, [r7, #28]
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	2b0f      	cmp	r3, #15
 80114f6:	d9e9      	bls.n	80114cc <prvInitialiseNewTask+0x68>
 80114f8:	e000      	b.n	80114fc <prvInitialiseNewTask+0x98>
			{
				break;
 80114fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011504:	e003      	b.n	801150e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011508:	2200      	movs	r2, #0
 801150a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011510:	2b37      	cmp	r3, #55	; 0x37
 8011512:	d901      	bls.n	8011518 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011514:	2337      	movs	r3, #55	; 0x37
 8011516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801151c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801151e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011526:	2200      	movs	r2, #0
 8011528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152c:	3304      	adds	r3, #4
 801152e:	4618      	mov	r0, r3
 8011530:	f7fe fe06 	bl	8010140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011536:	3318      	adds	r3, #24
 8011538:	4618      	mov	r0, r3
 801153a:	f7fe fe01 	bl	8010140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011556:	2200      	movs	r2, #0
 8011558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155e:	2200      	movs	r2, #0
 8011560:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	3354      	adds	r3, #84	; 0x54
 8011568:	2260      	movs	r2, #96	; 0x60
 801156a:	2100      	movs	r1, #0
 801156c:	4618      	mov	r0, r3
 801156e:	f001 ffc6 	bl	80134fe <memset>
 8011572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011574:	4a0c      	ldr	r2, [pc, #48]	; (80115a8 <prvInitialiseNewTask+0x144>)
 8011576:	659a      	str	r2, [r3, #88]	; 0x58
 8011578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157a:	4a0c      	ldr	r2, [pc, #48]	; (80115ac <prvInitialiseNewTask+0x148>)
 801157c:	65da      	str	r2, [r3, #92]	; 0x5c
 801157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011580:	4a0b      	ldr	r2, [pc, #44]	; (80115b0 <prvInitialiseNewTask+0x14c>)
 8011582:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011584:	683a      	ldr	r2, [r7, #0]
 8011586:	68f9      	ldr	r1, [r7, #12]
 8011588:	69b8      	ldr	r0, [r7, #24]
 801158a:	f001 fa6d 	bl	8012a68 <pxPortInitialiseStack>
 801158e:	4602      	mov	r2, r0
 8011590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	2b00      	cmp	r3, #0
 8011598:	d002      	beq.n	80115a0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801159e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115a0:	bf00      	nop
 80115a2:	3720      	adds	r7, #32
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bd80      	pop	{r7, pc}
 80115a8:	0801834c 	.word	0x0801834c
 80115ac:	0801836c 	.word	0x0801836c
 80115b0:	0801832c 	.word	0x0801832c

080115b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80115bc:	f001 fb5e 	bl	8012c7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80115c0:	4b2d      	ldr	r3, [pc, #180]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	3301      	adds	r3, #1
 80115c6:	4a2c      	ldr	r2, [pc, #176]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
 80115c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80115ca:	4b2c      	ldr	r3, [pc, #176]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d109      	bne.n	80115e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80115d2:	4a2a      	ldr	r2, [pc, #168]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115d8:	4b27      	ldr	r3, [pc, #156]	; (8011678 <prvAddNewTaskToReadyList+0xc4>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d110      	bne.n	8011602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80115e0:	f000 fc3c 	bl	8011e5c <prvInitialiseTaskLists>
 80115e4:	e00d      	b.n	8011602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80115e6:	4b26      	ldr	r3, [pc, #152]	; (8011680 <prvAddNewTaskToReadyList+0xcc>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d109      	bne.n	8011602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80115ee:	4b23      	ldr	r3, [pc, #140]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d802      	bhi.n	8011602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80115fc:	4a1f      	ldr	r2, [pc, #124]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011602:	4b20      	ldr	r3, [pc, #128]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3301      	adds	r3, #1
 8011608:	4a1e      	ldr	r2, [pc, #120]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 801160a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801160c:	4b1d      	ldr	r3, [pc, #116]	; (8011684 <prvAddNewTaskToReadyList+0xd0>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011618:	4b1b      	ldr	r3, [pc, #108]	; (8011688 <prvAddNewTaskToReadyList+0xd4>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	429a      	cmp	r2, r3
 801161e:	d903      	bls.n	8011628 <prvAddNewTaskToReadyList+0x74>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011624:	4a18      	ldr	r2, [pc, #96]	; (8011688 <prvAddNewTaskToReadyList+0xd4>)
 8011626:	6013      	str	r3, [r2, #0]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801162c:	4613      	mov	r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	4413      	add	r3, r2
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	4a15      	ldr	r2, [pc, #84]	; (801168c <prvAddNewTaskToReadyList+0xd8>)
 8011636:	441a      	add	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	3304      	adds	r3, #4
 801163c:	4619      	mov	r1, r3
 801163e:	4610      	mov	r0, r2
 8011640:	f7fe fd8b 	bl	801015a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011644:	f001 fb4e 	bl	8012ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011648:	4b0d      	ldr	r3, [pc, #52]	; (8011680 <prvAddNewTaskToReadyList+0xcc>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00e      	beq.n	801166e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011650:	4b0a      	ldr	r3, [pc, #40]	; (801167c <prvAddNewTaskToReadyList+0xc8>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801165a:	429a      	cmp	r2, r3
 801165c:	d207      	bcs.n	801166e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801165e:	4b0c      	ldr	r3, [pc, #48]	; (8011690 <prvAddNewTaskToReadyList+0xdc>)
 8011660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	f3bf 8f4f 	dsb	sy
 801166a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801166e:	bf00      	nop
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20002820 	.word	0x20002820
 801167c:	2000234c 	.word	0x2000234c
 8011680:	2000282c 	.word	0x2000282c
 8011684:	2000283c 	.word	0x2000283c
 8011688:	20002828 	.word	0x20002828
 801168c:	20002350 	.word	0x20002350
 8011690:	e000ed04 	.word	0xe000ed04

08011694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801169c:	2300      	movs	r3, #0
 801169e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d019      	beq.n	80116da <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80116a6:	4b14      	ldr	r3, [pc, #80]	; (80116f8 <vTaskDelay+0x64>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00c      	beq.n	80116c8 <vTaskDelay+0x34>
	__asm volatile
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	b672      	cpsid	i
 80116b4:	f383 8811 	msr	BASEPRI, r3
 80116b8:	f3bf 8f6f 	isb	sy
 80116bc:	f3bf 8f4f 	dsb	sy
 80116c0:	b662      	cpsie	i
 80116c2:	60bb      	str	r3, [r7, #8]
}
 80116c4:	bf00      	nop
 80116c6:	e7fe      	b.n	80116c6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80116c8:	f000 f88e 	bl	80117e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80116cc:	2100      	movs	r1, #0
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 fe1a 	bl	8012308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80116d4:	f000 f896 	bl	8011804 <xTaskResumeAll>
 80116d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d107      	bne.n	80116f0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80116e0:	4b06      	ldr	r3, [pc, #24]	; (80116fc <vTaskDelay+0x68>)
 80116e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116f0:	bf00      	nop
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	20002848 	.word	0x20002848
 80116fc:	e000ed04 	.word	0xe000ed04

08011700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b08a      	sub	sp, #40	; 0x28
 8011704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011706:	2300      	movs	r3, #0
 8011708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801170a:	2300      	movs	r3, #0
 801170c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801170e:	463a      	mov	r2, r7
 8011710:	1d39      	adds	r1, r7, #4
 8011712:	f107 0308 	add.w	r3, r7, #8
 8011716:	4618      	mov	r0, r3
 8011718:	f7fe fcbe 	bl	8010098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801171c:	6839      	ldr	r1, [r7, #0]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	9202      	str	r2, [sp, #8]
 8011724:	9301      	str	r3, [sp, #4]
 8011726:	2300      	movs	r3, #0
 8011728:	9300      	str	r3, [sp, #0]
 801172a:	2300      	movs	r3, #0
 801172c:	460a      	mov	r2, r1
 801172e:	4926      	ldr	r1, [pc, #152]	; (80117c8 <vTaskStartScheduler+0xc8>)
 8011730:	4826      	ldr	r0, [pc, #152]	; (80117cc <vTaskStartScheduler+0xcc>)
 8011732:	f7ff fdef 	bl	8011314 <xTaskCreateStatic>
 8011736:	4603      	mov	r3, r0
 8011738:	4a25      	ldr	r2, [pc, #148]	; (80117d0 <vTaskStartScheduler+0xd0>)
 801173a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801173c:	4b24      	ldr	r3, [pc, #144]	; (80117d0 <vTaskStartScheduler+0xd0>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d002      	beq.n	801174a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011744:	2301      	movs	r3, #1
 8011746:	617b      	str	r3, [r7, #20]
 8011748:	e001      	b.n	801174e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801174a:	2300      	movs	r3, #0
 801174c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d102      	bne.n	801175a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011754:	f000 fe2c 	bl	80123b0 <xTimerCreateTimerTask>
 8011758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d11d      	bne.n	801179c <vTaskStartScheduler+0x9c>
	__asm volatile
 8011760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011764:	b672      	cpsid	i
 8011766:	f383 8811 	msr	BASEPRI, r3
 801176a:	f3bf 8f6f 	isb	sy
 801176e:	f3bf 8f4f 	dsb	sy
 8011772:	b662      	cpsie	i
 8011774:	613b      	str	r3, [r7, #16]
}
 8011776:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011778:	4b16      	ldr	r3, [pc, #88]	; (80117d4 <vTaskStartScheduler+0xd4>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	3354      	adds	r3, #84	; 0x54
 801177e:	4a16      	ldr	r2, [pc, #88]	; (80117d8 <vTaskStartScheduler+0xd8>)
 8011780:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011782:	4b16      	ldr	r3, [pc, #88]	; (80117dc <vTaskStartScheduler+0xdc>)
 8011784:	f04f 32ff 	mov.w	r2, #4294967295
 8011788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801178a:	4b15      	ldr	r3, [pc, #84]	; (80117e0 <vTaskStartScheduler+0xe0>)
 801178c:	2201      	movs	r2, #1
 801178e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011790:	4b14      	ldr	r3, [pc, #80]	; (80117e4 <vTaskStartScheduler+0xe4>)
 8011792:	2200      	movs	r2, #0
 8011794:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011796:	f001 f9f3 	bl	8012b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801179a:	e010      	b.n	80117be <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a2:	d10c      	bne.n	80117be <vTaskStartScheduler+0xbe>
	__asm volatile
 80117a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117a8:	b672      	cpsid	i
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	b662      	cpsie	i
 80117b8:	60fb      	str	r3, [r7, #12]
}
 80117ba:	bf00      	nop
 80117bc:	e7fe      	b.n	80117bc <vTaskStartScheduler+0xbc>
}
 80117be:	bf00      	nop
 80117c0:	3718      	adds	r7, #24
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	080180c4 	.word	0x080180c4
 80117cc:	08011e2d 	.word	0x08011e2d
 80117d0:	20002844 	.word	0x20002844
 80117d4:	2000234c 	.word	0x2000234c
 80117d8:	200001c0 	.word	0x200001c0
 80117dc:	20002840 	.word	0x20002840
 80117e0:	2000282c 	.word	0x2000282c
 80117e4:	20002824 	.word	0x20002824

080117e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80117e8:	b480      	push	{r7}
 80117ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80117ec:	4b04      	ldr	r3, [pc, #16]	; (8011800 <vTaskSuspendAll+0x18>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	3301      	adds	r3, #1
 80117f2:	4a03      	ldr	r2, [pc, #12]	; (8011800 <vTaskSuspendAll+0x18>)
 80117f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80117f6:	bf00      	nop
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	20002848 	.word	0x20002848

08011804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801180a:	2300      	movs	r3, #0
 801180c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801180e:	2300      	movs	r3, #0
 8011810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011812:	4b43      	ldr	r3, [pc, #268]	; (8011920 <xTaskResumeAll+0x11c>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d10c      	bne.n	8011834 <xTaskResumeAll+0x30>
	__asm volatile
 801181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181e:	b672      	cpsid	i
 8011820:	f383 8811 	msr	BASEPRI, r3
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	b662      	cpsie	i
 801182e:	603b      	str	r3, [r7, #0]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011834:	f001 fa22 	bl	8012c7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011838:	4b39      	ldr	r3, [pc, #228]	; (8011920 <xTaskResumeAll+0x11c>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	3b01      	subs	r3, #1
 801183e:	4a38      	ldr	r2, [pc, #224]	; (8011920 <xTaskResumeAll+0x11c>)
 8011840:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011842:	4b37      	ldr	r3, [pc, #220]	; (8011920 <xTaskResumeAll+0x11c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d162      	bne.n	8011910 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801184a:	4b36      	ldr	r3, [pc, #216]	; (8011924 <xTaskResumeAll+0x120>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d05e      	beq.n	8011910 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011852:	e02f      	b.n	80118b4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011854:	4b34      	ldr	r3, [pc, #208]	; (8011928 <xTaskResumeAll+0x124>)
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	3318      	adds	r3, #24
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe fcd7 	bl	8010214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	3304      	adds	r3, #4
 801186a:	4618      	mov	r0, r3
 801186c:	f7fe fcd2 	bl	8010214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011874:	4b2d      	ldr	r3, [pc, #180]	; (801192c <xTaskResumeAll+0x128>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	429a      	cmp	r2, r3
 801187a:	d903      	bls.n	8011884 <xTaskResumeAll+0x80>
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011880:	4a2a      	ldr	r2, [pc, #168]	; (801192c <xTaskResumeAll+0x128>)
 8011882:	6013      	str	r3, [r2, #0]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011888:	4613      	mov	r3, r2
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	4413      	add	r3, r2
 801188e:	009b      	lsls	r3, r3, #2
 8011890:	4a27      	ldr	r2, [pc, #156]	; (8011930 <xTaskResumeAll+0x12c>)
 8011892:	441a      	add	r2, r3
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	3304      	adds	r3, #4
 8011898:	4619      	mov	r1, r3
 801189a:	4610      	mov	r0, r2
 801189c:	f7fe fc5d 	bl	801015a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a4:	4b23      	ldr	r3, [pc, #140]	; (8011934 <xTaskResumeAll+0x130>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d302      	bcc.n	80118b4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80118ae:	4b22      	ldr	r3, [pc, #136]	; (8011938 <xTaskResumeAll+0x134>)
 80118b0:	2201      	movs	r2, #1
 80118b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118b4:	4b1c      	ldr	r3, [pc, #112]	; (8011928 <xTaskResumeAll+0x124>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1cb      	bne.n	8011854 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80118c2:	f000 fb6f 	bl	8011fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80118c6:	4b1d      	ldr	r3, [pc, #116]	; (801193c <xTaskResumeAll+0x138>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d010      	beq.n	80118f4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80118d2:	f000 f847 	bl	8011964 <xTaskIncrementTick>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d002      	beq.n	80118e2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80118dc:	4b16      	ldr	r3, [pc, #88]	; (8011938 <xTaskResumeAll+0x134>)
 80118de:	2201      	movs	r2, #1
 80118e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	3b01      	subs	r3, #1
 80118e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d1f1      	bne.n	80118d2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80118ee:	4b13      	ldr	r3, [pc, #76]	; (801193c <xTaskResumeAll+0x138>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80118f4:	4b10      	ldr	r3, [pc, #64]	; (8011938 <xTaskResumeAll+0x134>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d009      	beq.n	8011910 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80118fc:	2301      	movs	r3, #1
 80118fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011900:	4b0f      	ldr	r3, [pc, #60]	; (8011940 <xTaskResumeAll+0x13c>)
 8011902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011906:	601a      	str	r2, [r3, #0]
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011910:	f001 f9e8 	bl	8012ce4 <vPortExitCritical>

	return xAlreadyYielded;
 8011914:	68bb      	ldr	r3, [r7, #8]
}
 8011916:	4618      	mov	r0, r3
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	20002848 	.word	0x20002848
 8011924:	20002820 	.word	0x20002820
 8011928:	200027e0 	.word	0x200027e0
 801192c:	20002828 	.word	0x20002828
 8011930:	20002350 	.word	0x20002350
 8011934:	2000234c 	.word	0x2000234c
 8011938:	20002834 	.word	0x20002834
 801193c:	20002830 	.word	0x20002830
 8011940:	e000ed04 	.word	0xe000ed04

08011944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011944:	b480      	push	{r7}
 8011946:	b083      	sub	sp, #12
 8011948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801194a:	4b05      	ldr	r3, [pc, #20]	; (8011960 <xTaskGetTickCount+0x1c>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011950:	687b      	ldr	r3, [r7, #4]
}
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	20002824 	.word	0x20002824

08011964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b086      	sub	sp, #24
 8011968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801196a:	2300      	movs	r3, #0
 801196c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801196e:	4b50      	ldr	r3, [pc, #320]	; (8011ab0 <xTaskIncrementTick+0x14c>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	f040 808b 	bne.w	8011a8e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011978:	4b4e      	ldr	r3, [pc, #312]	; (8011ab4 <xTaskIncrementTick+0x150>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	3301      	adds	r3, #1
 801197e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011980:	4a4c      	ldr	r2, [pc, #304]	; (8011ab4 <xTaskIncrementTick+0x150>)
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d122      	bne.n	80119d2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 801198c:	4b4a      	ldr	r3, [pc, #296]	; (8011ab8 <xTaskIncrementTick+0x154>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00c      	beq.n	80119b0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8011996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801199a:	b672      	cpsid	i
 801199c:	f383 8811 	msr	BASEPRI, r3
 80119a0:	f3bf 8f6f 	isb	sy
 80119a4:	f3bf 8f4f 	dsb	sy
 80119a8:	b662      	cpsie	i
 80119aa:	603b      	str	r3, [r7, #0]
}
 80119ac:	bf00      	nop
 80119ae:	e7fe      	b.n	80119ae <xTaskIncrementTick+0x4a>
 80119b0:	4b41      	ldr	r3, [pc, #260]	; (8011ab8 <xTaskIncrementTick+0x154>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	60fb      	str	r3, [r7, #12]
 80119b6:	4b41      	ldr	r3, [pc, #260]	; (8011abc <xTaskIncrementTick+0x158>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a3f      	ldr	r2, [pc, #252]	; (8011ab8 <xTaskIncrementTick+0x154>)
 80119bc:	6013      	str	r3, [r2, #0]
 80119be:	4a3f      	ldr	r2, [pc, #252]	; (8011abc <xTaskIncrementTick+0x158>)
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6013      	str	r3, [r2, #0]
 80119c4:	4b3e      	ldr	r3, [pc, #248]	; (8011ac0 <xTaskIncrementTick+0x15c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	3301      	adds	r3, #1
 80119ca:	4a3d      	ldr	r2, [pc, #244]	; (8011ac0 <xTaskIncrementTick+0x15c>)
 80119cc:	6013      	str	r3, [r2, #0]
 80119ce:	f000 fae9 	bl	8011fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80119d2:	4b3c      	ldr	r3, [pc, #240]	; (8011ac4 <xTaskIncrementTick+0x160>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	693a      	ldr	r2, [r7, #16]
 80119d8:	429a      	cmp	r2, r3
 80119da:	d349      	bcc.n	8011a70 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119dc:	4b36      	ldr	r3, [pc, #216]	; (8011ab8 <xTaskIncrementTick+0x154>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d104      	bne.n	80119f0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119e6:	4b37      	ldr	r3, [pc, #220]	; (8011ac4 <xTaskIncrementTick+0x160>)
 80119e8:	f04f 32ff 	mov.w	r2, #4294967295
 80119ec:	601a      	str	r2, [r3, #0]
					break;
 80119ee:	e03f      	b.n	8011a70 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119f0:	4b31      	ldr	r3, [pc, #196]	; (8011ab8 <xTaskIncrementTick+0x154>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a00:	693a      	ldr	r2, [r7, #16]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d203      	bcs.n	8011a10 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a08:	4a2e      	ldr	r2, [pc, #184]	; (8011ac4 <xTaskIncrementTick+0x160>)
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a0e:	e02f      	b.n	8011a70 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	3304      	adds	r3, #4
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fe fbfd 	bl	8010214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d004      	beq.n	8011a2c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	3318      	adds	r3, #24
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fe fbf4 	bl	8010214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a30:	4b25      	ldr	r3, [pc, #148]	; (8011ac8 <xTaskIncrementTick+0x164>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d903      	bls.n	8011a40 <xTaskIncrementTick+0xdc>
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a3c:	4a22      	ldr	r2, [pc, #136]	; (8011ac8 <xTaskIncrementTick+0x164>)
 8011a3e:	6013      	str	r3, [r2, #0]
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a44:	4613      	mov	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	4413      	add	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4a1f      	ldr	r2, [pc, #124]	; (8011acc <xTaskIncrementTick+0x168>)
 8011a4e:	441a      	add	r2, r3
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	3304      	adds	r3, #4
 8011a54:	4619      	mov	r1, r3
 8011a56:	4610      	mov	r0, r2
 8011a58:	f7fe fb7f 	bl	801015a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a60:	4b1b      	ldr	r3, [pc, #108]	; (8011ad0 <xTaskIncrementTick+0x16c>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d3b8      	bcc.n	80119dc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a6e:	e7b5      	b.n	80119dc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011a70:	4b17      	ldr	r3, [pc, #92]	; (8011ad0 <xTaskIncrementTick+0x16c>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a76:	4915      	ldr	r1, [pc, #84]	; (8011acc <xTaskIncrementTick+0x168>)
 8011a78:	4613      	mov	r3, r2
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4413      	add	r3, r2
 8011a7e:	009b      	lsls	r3, r3, #2
 8011a80:	440b      	add	r3, r1
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d907      	bls.n	8011a98 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	617b      	str	r3, [r7, #20]
 8011a8c:	e004      	b.n	8011a98 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011a8e:	4b11      	ldr	r3, [pc, #68]	; (8011ad4 <xTaskIncrementTick+0x170>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3301      	adds	r3, #1
 8011a94:	4a0f      	ldr	r2, [pc, #60]	; (8011ad4 <xTaskIncrementTick+0x170>)
 8011a96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011a98:	4b0f      	ldr	r3, [pc, #60]	; (8011ad8 <xTaskIncrementTick+0x174>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d001      	beq.n	8011aa4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8011aa0:	2301      	movs	r3, #1
 8011aa2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011aa4:	697b      	ldr	r3, [r7, #20]
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3718      	adds	r7, #24
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	20002848 	.word	0x20002848
 8011ab4:	20002824 	.word	0x20002824
 8011ab8:	200027d8 	.word	0x200027d8
 8011abc:	200027dc 	.word	0x200027dc
 8011ac0:	20002838 	.word	0x20002838
 8011ac4:	20002840 	.word	0x20002840
 8011ac8:	20002828 	.word	0x20002828
 8011acc:	20002350 	.word	0x20002350
 8011ad0:	2000234c 	.word	0x2000234c
 8011ad4:	20002830 	.word	0x20002830
 8011ad8:	20002834 	.word	0x20002834

08011adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011adc:	b480      	push	{r7}
 8011ade:	b085      	sub	sp, #20
 8011ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011ae2:	4b2b      	ldr	r3, [pc, #172]	; (8011b90 <vTaskSwitchContext+0xb4>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d003      	beq.n	8011af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011aea:	4b2a      	ldr	r3, [pc, #168]	; (8011b94 <vTaskSwitchContext+0xb8>)
 8011aec:	2201      	movs	r2, #1
 8011aee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011af0:	e048      	b.n	8011b84 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8011af2:	4b28      	ldr	r3, [pc, #160]	; (8011b94 <vTaskSwitchContext+0xb8>)
 8011af4:	2200      	movs	r2, #0
 8011af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011af8:	4b27      	ldr	r3, [pc, #156]	; (8011b98 <vTaskSwitchContext+0xbc>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	60fb      	str	r3, [r7, #12]
 8011afe:	e012      	b.n	8011b26 <vTaskSwitchContext+0x4a>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d10c      	bne.n	8011b20 <vTaskSwitchContext+0x44>
	__asm volatile
 8011b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0a:	b672      	cpsid	i
 8011b0c:	f383 8811 	msr	BASEPRI, r3
 8011b10:	f3bf 8f6f 	isb	sy
 8011b14:	f3bf 8f4f 	dsb	sy
 8011b18:	b662      	cpsie	i
 8011b1a:	607b      	str	r3, [r7, #4]
}
 8011b1c:	bf00      	nop
 8011b1e:	e7fe      	b.n	8011b1e <vTaskSwitchContext+0x42>
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	3b01      	subs	r3, #1
 8011b24:	60fb      	str	r3, [r7, #12]
 8011b26:	491d      	ldr	r1, [pc, #116]	; (8011b9c <vTaskSwitchContext+0xc0>)
 8011b28:	68fa      	ldr	r2, [r7, #12]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	4413      	add	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	440b      	add	r3, r1
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d0e2      	beq.n	8011b00 <vTaskSwitchContext+0x24>
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	4413      	add	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4a15      	ldr	r2, [pc, #84]	; (8011b9c <vTaskSwitchContext+0xc0>)
 8011b46:	4413      	add	r3, r2
 8011b48:	60bb      	str	r3, [r7, #8]
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	685a      	ldr	r2, [r3, #4]
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	605a      	str	r2, [r3, #4]
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	685a      	ldr	r2, [r3, #4]
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	3308      	adds	r3, #8
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d104      	bne.n	8011b6a <vTaskSwitchContext+0x8e>
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	685a      	ldr	r2, [r3, #4]
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	605a      	str	r2, [r3, #4]
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	4a0b      	ldr	r2, [pc, #44]	; (8011ba0 <vTaskSwitchContext+0xc4>)
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	4a08      	ldr	r2, [pc, #32]	; (8011b98 <vTaskSwitchContext+0xbc>)
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011b7a:	4b09      	ldr	r3, [pc, #36]	; (8011ba0 <vTaskSwitchContext+0xc4>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	3354      	adds	r3, #84	; 0x54
 8011b80:	4a08      	ldr	r2, [pc, #32]	; (8011ba4 <vTaskSwitchContext+0xc8>)
 8011b82:	6013      	str	r3, [r2, #0]
}
 8011b84:	bf00      	nop
 8011b86:	3714      	adds	r7, #20
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8e:	4770      	bx	lr
 8011b90:	20002848 	.word	0x20002848
 8011b94:	20002834 	.word	0x20002834
 8011b98:	20002828 	.word	0x20002828
 8011b9c:	20002350 	.word	0x20002350
 8011ba0:	2000234c 	.word	0x2000234c
 8011ba4:	200001c0 	.word	0x200001c0

08011ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d10c      	bne.n	8011bd2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bbc:	b672      	cpsid	i
 8011bbe:	f383 8811 	msr	BASEPRI, r3
 8011bc2:	f3bf 8f6f 	isb	sy
 8011bc6:	f3bf 8f4f 	dsb	sy
 8011bca:	b662      	cpsie	i
 8011bcc:	60fb      	str	r3, [r7, #12]
}
 8011bce:	bf00      	nop
 8011bd0:	e7fe      	b.n	8011bd0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011bd2:	4b07      	ldr	r3, [pc, #28]	; (8011bf0 <vTaskPlaceOnEventList+0x48>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	3318      	adds	r3, #24
 8011bd8:	4619      	mov	r1, r3
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7fe fae1 	bl	80101a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011be0:	2101      	movs	r1, #1
 8011be2:	6838      	ldr	r0, [r7, #0]
 8011be4:	f000 fb90 	bl	8012308 <prvAddCurrentTaskToDelayedList>
}
 8011be8:	bf00      	nop
 8011bea:	3710      	adds	r7, #16
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	2000234c 	.word	0x2000234c

08011bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d10c      	bne.n	8011c20 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8011c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0a:	b672      	cpsid	i
 8011c0c:	f383 8811 	msr	BASEPRI, r3
 8011c10:	f3bf 8f6f 	isb	sy
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	b662      	cpsie	i
 8011c1a:	617b      	str	r3, [r7, #20]
}
 8011c1c:	bf00      	nop
 8011c1e:	e7fe      	b.n	8011c1e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c20:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <vTaskPlaceOnEventListRestricted+0x58>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3318      	adds	r3, #24
 8011c26:	4619      	mov	r1, r3
 8011c28:	68f8      	ldr	r0, [r7, #12]
 8011c2a:	f7fe fa96 	bl	801015a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d002      	beq.n	8011c3a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8011c34:	f04f 33ff 	mov.w	r3, #4294967295
 8011c38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011c3a:	6879      	ldr	r1, [r7, #4]
 8011c3c:	68b8      	ldr	r0, [r7, #8]
 8011c3e:	f000 fb63 	bl	8012308 <prvAddCurrentTaskToDelayedList>
	}
 8011c42:	bf00      	nop
 8011c44:	3718      	adds	r7, #24
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	2000234c 	.word	0x2000234c

08011c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b086      	sub	sp, #24
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d10c      	bne.n	8011c80 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6a:	b672      	cpsid	i
 8011c6c:	f383 8811 	msr	BASEPRI, r3
 8011c70:	f3bf 8f6f 	isb	sy
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	b662      	cpsie	i
 8011c7a:	60fb      	str	r3, [r7, #12]
}
 8011c7c:	bf00      	nop
 8011c7e:	e7fe      	b.n	8011c7e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	3318      	adds	r3, #24
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fe fac5 	bl	8010214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c8a:	4b1e      	ldr	r3, [pc, #120]	; (8011d04 <xTaskRemoveFromEventList+0xb4>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d11d      	bne.n	8011cce <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	3304      	adds	r3, #4
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fe fabc 	bl	8010214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca0:	4b19      	ldr	r3, [pc, #100]	; (8011d08 <xTaskRemoveFromEventList+0xb8>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d903      	bls.n	8011cb0 <xTaskRemoveFromEventList+0x60>
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cac:	4a16      	ldr	r2, [pc, #88]	; (8011d08 <xTaskRemoveFromEventList+0xb8>)
 8011cae:	6013      	str	r3, [r2, #0]
 8011cb0:	693b      	ldr	r3, [r7, #16]
 8011cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	4413      	add	r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	4a13      	ldr	r2, [pc, #76]	; (8011d0c <xTaskRemoveFromEventList+0xbc>)
 8011cbe:	441a      	add	r2, r3
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	3304      	adds	r3, #4
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	f7fe fa47 	bl	801015a <vListInsertEnd>
 8011ccc:	e005      	b.n	8011cda <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	3318      	adds	r3, #24
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	480e      	ldr	r0, [pc, #56]	; (8011d10 <xTaskRemoveFromEventList+0xc0>)
 8011cd6:	f7fe fa40 	bl	801015a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011cda:	693b      	ldr	r3, [r7, #16]
 8011cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cde:	4b0d      	ldr	r3, [pc, #52]	; (8011d14 <xTaskRemoveFromEventList+0xc4>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d905      	bls.n	8011cf4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011cec:	4b0a      	ldr	r3, [pc, #40]	; (8011d18 <xTaskRemoveFromEventList+0xc8>)
 8011cee:	2201      	movs	r2, #1
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	e001      	b.n	8011cf8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011cf8:	697b      	ldr	r3, [r7, #20]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20002848 	.word	0x20002848
 8011d08:	20002828 	.word	0x20002828
 8011d0c:	20002350 	.word	0x20002350
 8011d10:	200027e0 	.word	0x200027e0
 8011d14:	2000234c 	.word	0x2000234c
 8011d18:	20002834 	.word	0x20002834

08011d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	b083      	sub	sp, #12
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d24:	4b06      	ldr	r3, [pc, #24]	; (8011d40 <vTaskInternalSetTimeOutState+0x24>)
 8011d26:	681a      	ldr	r2, [r3, #0]
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011d2c:	4b05      	ldr	r3, [pc, #20]	; (8011d44 <vTaskInternalSetTimeOutState+0x28>)
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	605a      	str	r2, [r3, #4]
}
 8011d34:	bf00      	nop
 8011d36:	370c      	adds	r7, #12
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	20002838 	.word	0x20002838
 8011d44:	20002824 	.word	0x20002824

08011d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b088      	sub	sp, #32
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d10c      	bne.n	8011d72 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8011d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d5c:	b672      	cpsid	i
 8011d5e:	f383 8811 	msr	BASEPRI, r3
 8011d62:	f3bf 8f6f 	isb	sy
 8011d66:	f3bf 8f4f 	dsb	sy
 8011d6a:	b662      	cpsie	i
 8011d6c:	613b      	str	r3, [r7, #16]
}
 8011d6e:	bf00      	nop
 8011d70:	e7fe      	b.n	8011d70 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d10c      	bne.n	8011d92 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7c:	b672      	cpsid	i
 8011d7e:	f383 8811 	msr	BASEPRI, r3
 8011d82:	f3bf 8f6f 	isb	sy
 8011d86:	f3bf 8f4f 	dsb	sy
 8011d8a:	b662      	cpsie	i
 8011d8c:	60fb      	str	r3, [r7, #12]
}
 8011d8e:	bf00      	nop
 8011d90:	e7fe      	b.n	8011d90 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011d92:	f000 ff73 	bl	8012c7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011d96:	4b1d      	ldr	r3, [pc, #116]	; (8011e0c <xTaskCheckForTimeOut+0xc4>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	69ba      	ldr	r2, [r7, #24]
 8011da2:	1ad3      	subs	r3, r2, r3
 8011da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dae:	d102      	bne.n	8011db6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011db0:	2300      	movs	r3, #0
 8011db2:	61fb      	str	r3, [r7, #28]
 8011db4:	e023      	b.n	8011dfe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	4b15      	ldr	r3, [pc, #84]	; (8011e10 <xTaskCheckForTimeOut+0xc8>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d007      	beq.n	8011dd2 <xTaskCheckForTimeOut+0x8a>
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	69ba      	ldr	r2, [r7, #24]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d302      	bcc.n	8011dd2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	61fb      	str	r3, [r7, #28]
 8011dd0:	e015      	b.n	8011dfe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	697a      	ldr	r2, [r7, #20]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d20b      	bcs.n	8011df4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	1ad2      	subs	r2, r2, r3
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f7ff ff97 	bl	8011d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011dee:	2300      	movs	r3, #0
 8011df0:	61fb      	str	r3, [r7, #28]
 8011df2:	e004      	b.n	8011dfe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	2200      	movs	r2, #0
 8011df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011dfe:	f000 ff71 	bl	8012ce4 <vPortExitCritical>

	return xReturn;
 8011e02:	69fb      	ldr	r3, [r7, #28]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3720      	adds	r7, #32
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	20002824 	.word	0x20002824
 8011e10:	20002838 	.word	0x20002838

08011e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e14:	b480      	push	{r7}
 8011e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e18:	4b03      	ldr	r3, [pc, #12]	; (8011e28 <vTaskMissedYield+0x14>)
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	601a      	str	r2, [r3, #0]
}
 8011e1e:	bf00      	nop
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr
 8011e28:	20002834 	.word	0x20002834

08011e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011e34:	f000 f852 	bl	8011edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011e38:	4b06      	ldr	r3, [pc, #24]	; (8011e54 <prvIdleTask+0x28>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d9f9      	bls.n	8011e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011e40:	4b05      	ldr	r3, [pc, #20]	; (8011e58 <prvIdleTask+0x2c>)
 8011e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e46:	601a      	str	r2, [r3, #0]
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011e50:	e7f0      	b.n	8011e34 <prvIdleTask+0x8>
 8011e52:	bf00      	nop
 8011e54:	20002350 	.word	0x20002350
 8011e58:	e000ed04 	.word	0xe000ed04

08011e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e62:	2300      	movs	r3, #0
 8011e64:	607b      	str	r3, [r7, #4]
 8011e66:	e00c      	b.n	8011e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4a12      	ldr	r2, [pc, #72]	; (8011ebc <prvInitialiseTaskLists+0x60>)
 8011e74:	4413      	add	r3, r2
 8011e76:	4618      	mov	r0, r3
 8011e78:	f7fe f942 	bl	8010100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3301      	adds	r3, #1
 8011e80:	607b      	str	r3, [r7, #4]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b37      	cmp	r3, #55	; 0x37
 8011e86:	d9ef      	bls.n	8011e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011e88:	480d      	ldr	r0, [pc, #52]	; (8011ec0 <prvInitialiseTaskLists+0x64>)
 8011e8a:	f7fe f939 	bl	8010100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011e8e:	480d      	ldr	r0, [pc, #52]	; (8011ec4 <prvInitialiseTaskLists+0x68>)
 8011e90:	f7fe f936 	bl	8010100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011e94:	480c      	ldr	r0, [pc, #48]	; (8011ec8 <prvInitialiseTaskLists+0x6c>)
 8011e96:	f7fe f933 	bl	8010100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011e9a:	480c      	ldr	r0, [pc, #48]	; (8011ecc <prvInitialiseTaskLists+0x70>)
 8011e9c:	f7fe f930 	bl	8010100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011ea0:	480b      	ldr	r0, [pc, #44]	; (8011ed0 <prvInitialiseTaskLists+0x74>)
 8011ea2:	f7fe f92d 	bl	8010100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011ea6:	4b0b      	ldr	r3, [pc, #44]	; (8011ed4 <prvInitialiseTaskLists+0x78>)
 8011ea8:	4a05      	ldr	r2, [pc, #20]	; (8011ec0 <prvInitialiseTaskLists+0x64>)
 8011eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011eac:	4b0a      	ldr	r3, [pc, #40]	; (8011ed8 <prvInitialiseTaskLists+0x7c>)
 8011eae:	4a05      	ldr	r2, [pc, #20]	; (8011ec4 <prvInitialiseTaskLists+0x68>)
 8011eb0:	601a      	str	r2, [r3, #0]
}
 8011eb2:	bf00      	nop
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	20002350 	.word	0x20002350
 8011ec0:	200027b0 	.word	0x200027b0
 8011ec4:	200027c4 	.word	0x200027c4
 8011ec8:	200027e0 	.word	0x200027e0
 8011ecc:	200027f4 	.word	0x200027f4
 8011ed0:	2000280c 	.word	0x2000280c
 8011ed4:	200027d8 	.word	0x200027d8
 8011ed8:	200027dc 	.word	0x200027dc

08011edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011ee2:	e019      	b.n	8011f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011ee4:	f000 feca 	bl	8012c7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ee8:	4b10      	ldr	r3, [pc, #64]	; (8011f2c <prvCheckTasksWaitingTermination+0x50>)
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	68db      	ldr	r3, [r3, #12]
 8011eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	3304      	adds	r3, #4
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe f98d 	bl	8010214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011efa:	4b0d      	ldr	r3, [pc, #52]	; (8011f30 <prvCheckTasksWaitingTermination+0x54>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	3b01      	subs	r3, #1
 8011f00:	4a0b      	ldr	r2, [pc, #44]	; (8011f30 <prvCheckTasksWaitingTermination+0x54>)
 8011f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f04:	4b0b      	ldr	r3, [pc, #44]	; (8011f34 <prvCheckTasksWaitingTermination+0x58>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	3b01      	subs	r3, #1
 8011f0a:	4a0a      	ldr	r2, [pc, #40]	; (8011f34 <prvCheckTasksWaitingTermination+0x58>)
 8011f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f0e:	f000 fee9 	bl	8012ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f000 f810 	bl	8011f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f18:	4b06      	ldr	r3, [pc, #24]	; (8011f34 <prvCheckTasksWaitingTermination+0x58>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d1e1      	bne.n	8011ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f20:	bf00      	nop
 8011f22:	bf00      	nop
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	200027f4 	.word	0x200027f4
 8011f30:	20002820 	.word	0x20002820
 8011f34:	20002808 	.word	0x20002808

08011f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	3354      	adds	r3, #84	; 0x54
 8011f44:	4618      	mov	r0, r3
 8011f46:	f002 f9cd 	bl	80142e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d108      	bne.n	8011f66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f001 f885 	bl	8013068 <vPortFree>
				vPortFree( pxTCB );
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f001 f882 	bl	8013068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011f64:	e01a      	b.n	8011f9c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	d103      	bne.n	8011f78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f001 f879 	bl	8013068 <vPortFree>
	}
 8011f76:	e011      	b.n	8011f9c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011f7e:	2b02      	cmp	r3, #2
 8011f80:	d00c      	beq.n	8011f9c <prvDeleteTCB+0x64>
	__asm volatile
 8011f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f86:	b672      	cpsid	i
 8011f88:	f383 8811 	msr	BASEPRI, r3
 8011f8c:	f3bf 8f6f 	isb	sy
 8011f90:	f3bf 8f4f 	dsb	sy
 8011f94:	b662      	cpsie	i
 8011f96:	60fb      	str	r3, [r7, #12]
}
 8011f98:	bf00      	nop
 8011f9a:	e7fe      	b.n	8011f9a <prvDeleteTCB+0x62>
	}
 8011f9c:	bf00      	nop
 8011f9e:	3710      	adds	r7, #16
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011faa:	4b0c      	ldr	r3, [pc, #48]	; (8011fdc <prvResetNextTaskUnblockTime+0x38>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d104      	bne.n	8011fbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011fb4:	4b0a      	ldr	r3, [pc, #40]	; (8011fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8011fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011fba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011fbc:	e008      	b.n	8011fd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fbe:	4b07      	ldr	r3, [pc, #28]	; (8011fdc <prvResetNextTaskUnblockTime+0x38>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	685b      	ldr	r3, [r3, #4]
 8011fcc:	4a04      	ldr	r2, [pc, #16]	; (8011fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8011fce:	6013      	str	r3, [r2, #0]
}
 8011fd0:	bf00      	nop
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr
 8011fdc:	200027d8 	.word	0x200027d8
 8011fe0:	20002840 	.word	0x20002840

08011fe4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b083      	sub	sp, #12
 8011fe8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011fea:	4b0b      	ldr	r3, [pc, #44]	; (8012018 <xTaskGetSchedulerState+0x34>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d102      	bne.n	8011ff8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	607b      	str	r3, [r7, #4]
 8011ff6:	e008      	b.n	801200a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ff8:	4b08      	ldr	r3, [pc, #32]	; (801201c <xTaskGetSchedulerState+0x38>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d102      	bne.n	8012006 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012000:	2302      	movs	r3, #2
 8012002:	607b      	str	r3, [r7, #4]
 8012004:	e001      	b.n	801200a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012006:	2300      	movs	r3, #0
 8012008:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801200a:	687b      	ldr	r3, [r7, #4]
	}
 801200c:	4618      	mov	r0, r3
 801200e:	370c      	adds	r7, #12
 8012010:	46bd      	mov	sp, r7
 8012012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012016:	4770      	bx	lr
 8012018:	2000282c 	.word	0x2000282c
 801201c:	20002848 	.word	0x20002848

08012020 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012020:	b580      	push	{r7, lr}
 8012022:	b084      	sub	sp, #16
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801202c:	2300      	movs	r3, #0
 801202e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d051      	beq.n	80120da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801203a:	4b2a      	ldr	r3, [pc, #168]	; (80120e4 <xTaskPriorityInherit+0xc4>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012040:	429a      	cmp	r2, r3
 8012042:	d241      	bcs.n	80120c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	699b      	ldr	r3, [r3, #24]
 8012048:	2b00      	cmp	r3, #0
 801204a:	db06      	blt.n	801205a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801204c:	4b25      	ldr	r3, [pc, #148]	; (80120e4 <xTaskPriorityInherit+0xc4>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012052:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	6959      	ldr	r1, [r3, #20]
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012062:	4613      	mov	r3, r2
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	4413      	add	r3, r2
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	4a1f      	ldr	r2, [pc, #124]	; (80120e8 <xTaskPriorityInherit+0xc8>)
 801206c:	4413      	add	r3, r2
 801206e:	4299      	cmp	r1, r3
 8012070:	d122      	bne.n	80120b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	3304      	adds	r3, #4
 8012076:	4618      	mov	r0, r3
 8012078:	f7fe f8cc 	bl	8010214 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801207c:	4b19      	ldr	r3, [pc, #100]	; (80120e4 <xTaskPriorityInherit+0xc4>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208a:	4b18      	ldr	r3, [pc, #96]	; (80120ec <xTaskPriorityInherit+0xcc>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	429a      	cmp	r2, r3
 8012090:	d903      	bls.n	801209a <xTaskPriorityInherit+0x7a>
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012096:	4a15      	ldr	r2, [pc, #84]	; (80120ec <xTaskPriorityInherit+0xcc>)
 8012098:	6013      	str	r3, [r2, #0]
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801209e:	4613      	mov	r3, r2
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	4413      	add	r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	4a10      	ldr	r2, [pc, #64]	; (80120e8 <xTaskPriorityInherit+0xc8>)
 80120a8:	441a      	add	r2, r3
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	3304      	adds	r3, #4
 80120ae:	4619      	mov	r1, r3
 80120b0:	4610      	mov	r0, r2
 80120b2:	f7fe f852 	bl	801015a <vListInsertEnd>
 80120b6:	e004      	b.n	80120c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120b8:	4b0a      	ldr	r3, [pc, #40]	; (80120e4 <xTaskPriorityInherit+0xc4>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80120c2:	2301      	movs	r3, #1
 80120c4:	60fb      	str	r3, [r7, #12]
 80120c6:	e008      	b.n	80120da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80120cc:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <xTaskPriorityInherit+0xc4>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d201      	bcs.n	80120da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80120d6:	2301      	movs	r3, #1
 80120d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80120da:	68fb      	ldr	r3, [r7, #12]
	}
 80120dc:	4618      	mov	r0, r3
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	2000234c 	.word	0x2000234c
 80120e8:	20002350 	.word	0x20002350
 80120ec:	20002828 	.word	0x20002828

080120f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b086      	sub	sp, #24
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80120fc:	2300      	movs	r3, #0
 80120fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d05a      	beq.n	80121bc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012106:	4b30      	ldr	r3, [pc, #192]	; (80121c8 <xTaskPriorityDisinherit+0xd8>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	693a      	ldr	r2, [r7, #16]
 801210c:	429a      	cmp	r2, r3
 801210e:	d00c      	beq.n	801212a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8012110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012114:	b672      	cpsid	i
 8012116:	f383 8811 	msr	BASEPRI, r3
 801211a:	f3bf 8f6f 	isb	sy
 801211e:	f3bf 8f4f 	dsb	sy
 8012122:	b662      	cpsie	i
 8012124:	60fb      	str	r3, [r7, #12]
}
 8012126:	bf00      	nop
 8012128:	e7fe      	b.n	8012128 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801212e:	2b00      	cmp	r3, #0
 8012130:	d10c      	bne.n	801214c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8012132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012136:	b672      	cpsid	i
 8012138:	f383 8811 	msr	BASEPRI, r3
 801213c:	f3bf 8f6f 	isb	sy
 8012140:	f3bf 8f4f 	dsb	sy
 8012144:	b662      	cpsie	i
 8012146:	60bb      	str	r3, [r7, #8]
}
 8012148:	bf00      	nop
 801214a:	e7fe      	b.n	801214a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012150:	1e5a      	subs	r2, r3, #1
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801215e:	429a      	cmp	r2, r3
 8012160:	d02c      	beq.n	80121bc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012166:	2b00      	cmp	r3, #0
 8012168:	d128      	bne.n	80121bc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	3304      	adds	r3, #4
 801216e:	4618      	mov	r0, r3
 8012170:	f7fe f850 	bl	8010214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012180:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801218c:	4b0f      	ldr	r3, [pc, #60]	; (80121cc <xTaskPriorityDisinherit+0xdc>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	429a      	cmp	r2, r3
 8012192:	d903      	bls.n	801219c <xTaskPriorityDisinherit+0xac>
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012198:	4a0c      	ldr	r2, [pc, #48]	; (80121cc <xTaskPriorityDisinherit+0xdc>)
 801219a:	6013      	str	r3, [r2, #0]
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a0:	4613      	mov	r3, r2
 80121a2:	009b      	lsls	r3, r3, #2
 80121a4:	4413      	add	r3, r2
 80121a6:	009b      	lsls	r3, r3, #2
 80121a8:	4a09      	ldr	r2, [pc, #36]	; (80121d0 <xTaskPriorityDisinherit+0xe0>)
 80121aa:	441a      	add	r2, r3
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	3304      	adds	r3, #4
 80121b0:	4619      	mov	r1, r3
 80121b2:	4610      	mov	r0, r2
 80121b4:	f7fd ffd1 	bl	801015a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121b8:	2301      	movs	r3, #1
 80121ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121bc:	697b      	ldr	r3, [r7, #20]
	}
 80121be:	4618      	mov	r0, r3
 80121c0:	3718      	adds	r7, #24
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	2000234c 	.word	0x2000234c
 80121cc:	20002828 	.word	0x20002828
 80121d0:	20002350 	.word	0x20002350

080121d4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b088      	sub	sp, #32
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80121e2:	2301      	movs	r3, #1
 80121e4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d06e      	beq.n	80122ca <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80121ec:	69bb      	ldr	r3, [r7, #24]
 80121ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10c      	bne.n	801220e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80121f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f8:	b672      	cpsid	i
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	b662      	cpsie	i
 8012208:	60fb      	str	r3, [r7, #12]
}
 801220a:	bf00      	nop
 801220c:	e7fe      	b.n	801220c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012212:	683a      	ldr	r2, [r7, #0]
 8012214:	429a      	cmp	r2, r3
 8012216:	d902      	bls.n	801221e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	61fb      	str	r3, [r7, #28]
 801221c:	e002      	b.n	8012224 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012222:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012228:	69fa      	ldr	r2, [r7, #28]
 801222a:	429a      	cmp	r2, r3
 801222c:	d04d      	beq.n	80122ca <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012232:	697a      	ldr	r2, [r7, #20]
 8012234:	429a      	cmp	r2, r3
 8012236:	d148      	bne.n	80122ca <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012238:	4b26      	ldr	r3, [pc, #152]	; (80122d4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	69ba      	ldr	r2, [r7, #24]
 801223e:	429a      	cmp	r2, r3
 8012240:	d10c      	bne.n	801225c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8012242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012246:	b672      	cpsid	i
 8012248:	f383 8811 	msr	BASEPRI, r3
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f3bf 8f4f 	dsb	sy
 8012254:	b662      	cpsie	i
 8012256:	60bb      	str	r3, [r7, #8]
}
 8012258:	bf00      	nop
 801225a:	e7fe      	b.n	801225a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012260:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012262:	69bb      	ldr	r3, [r7, #24]
 8012264:	69fa      	ldr	r2, [r7, #28]
 8012266:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	699b      	ldr	r3, [r3, #24]
 801226c:	2b00      	cmp	r3, #0
 801226e:	db04      	blt.n	801227a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801227a:	69bb      	ldr	r3, [r7, #24]
 801227c:	6959      	ldr	r1, [r3, #20]
 801227e:	693a      	ldr	r2, [r7, #16]
 8012280:	4613      	mov	r3, r2
 8012282:	009b      	lsls	r3, r3, #2
 8012284:	4413      	add	r3, r2
 8012286:	009b      	lsls	r3, r3, #2
 8012288:	4a13      	ldr	r2, [pc, #76]	; (80122d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801228a:	4413      	add	r3, r2
 801228c:	4299      	cmp	r1, r3
 801228e:	d11c      	bne.n	80122ca <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	3304      	adds	r3, #4
 8012294:	4618      	mov	r0, r3
 8012296:	f7fd ffbd 	bl	8010214 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801229e:	4b0f      	ldr	r3, [pc, #60]	; (80122dc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d903      	bls.n	80122ae <vTaskPriorityDisinheritAfterTimeout+0xda>
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122aa:	4a0c      	ldr	r2, [pc, #48]	; (80122dc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80122ac:	6013      	str	r3, [r2, #0]
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b2:	4613      	mov	r3, r2
 80122b4:	009b      	lsls	r3, r3, #2
 80122b6:	4413      	add	r3, r2
 80122b8:	009b      	lsls	r3, r3, #2
 80122ba:	4a07      	ldr	r2, [pc, #28]	; (80122d8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80122bc:	441a      	add	r2, r3
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	3304      	adds	r3, #4
 80122c2:	4619      	mov	r1, r3
 80122c4:	4610      	mov	r0, r2
 80122c6:	f7fd ff48 	bl	801015a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80122ca:	bf00      	nop
 80122cc:	3720      	adds	r7, #32
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	2000234c 	.word	0x2000234c
 80122d8:	20002350 	.word	0x20002350
 80122dc:	20002828 	.word	0x20002828

080122e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80122e0:	b480      	push	{r7}
 80122e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80122e4:	4b07      	ldr	r3, [pc, #28]	; (8012304 <pvTaskIncrementMutexHeldCount+0x24>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d004      	beq.n	80122f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80122ec:	4b05      	ldr	r3, [pc, #20]	; (8012304 <pvTaskIncrementMutexHeldCount+0x24>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122f2:	3201      	adds	r2, #1
 80122f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80122f6:	4b03      	ldr	r3, [pc, #12]	; (8012304 <pvTaskIncrementMutexHeldCount+0x24>)
 80122f8:	681b      	ldr	r3, [r3, #0]
	}
 80122fa:	4618      	mov	r0, r3
 80122fc:	46bd      	mov	sp, r7
 80122fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012302:	4770      	bx	lr
 8012304:	2000234c 	.word	0x2000234c

08012308 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012312:	4b21      	ldr	r3, [pc, #132]	; (8012398 <prvAddCurrentTaskToDelayedList+0x90>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012318:	4b20      	ldr	r3, [pc, #128]	; (801239c <prvAddCurrentTaskToDelayedList+0x94>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	3304      	adds	r3, #4
 801231e:	4618      	mov	r0, r3
 8012320:	f7fd ff78 	bl	8010214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232a:	d10a      	bne.n	8012342 <prvAddCurrentTaskToDelayedList+0x3a>
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d007      	beq.n	8012342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012332:	4b1a      	ldr	r3, [pc, #104]	; (801239c <prvAddCurrentTaskToDelayedList+0x94>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	3304      	adds	r3, #4
 8012338:	4619      	mov	r1, r3
 801233a:	4819      	ldr	r0, [pc, #100]	; (80123a0 <prvAddCurrentTaskToDelayedList+0x98>)
 801233c:	f7fd ff0d 	bl	801015a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012340:	e026      	b.n	8012390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012342:	68fa      	ldr	r2, [r7, #12]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4413      	add	r3, r2
 8012348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801234a:	4b14      	ldr	r3, [pc, #80]	; (801239c <prvAddCurrentTaskToDelayedList+0x94>)
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012352:	68ba      	ldr	r2, [r7, #8]
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	429a      	cmp	r2, r3
 8012358:	d209      	bcs.n	801236e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801235a:	4b12      	ldr	r3, [pc, #72]	; (80123a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	4b0f      	ldr	r3, [pc, #60]	; (801239c <prvAddCurrentTaskToDelayedList+0x94>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	3304      	adds	r3, #4
 8012364:	4619      	mov	r1, r3
 8012366:	4610      	mov	r0, r2
 8012368:	f7fd ff1b 	bl	80101a2 <vListInsert>
}
 801236c:	e010      	b.n	8012390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801236e:	4b0e      	ldr	r3, [pc, #56]	; (80123a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	4b0a      	ldr	r3, [pc, #40]	; (801239c <prvAddCurrentTaskToDelayedList+0x94>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	3304      	adds	r3, #4
 8012378:	4619      	mov	r1, r3
 801237a:	4610      	mov	r0, r2
 801237c:	f7fd ff11 	bl	80101a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012380:	4b0a      	ldr	r3, [pc, #40]	; (80123ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68ba      	ldr	r2, [r7, #8]
 8012386:	429a      	cmp	r2, r3
 8012388:	d202      	bcs.n	8012390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801238a:	4a08      	ldr	r2, [pc, #32]	; (80123ac <prvAddCurrentTaskToDelayedList+0xa4>)
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	6013      	str	r3, [r2, #0]
}
 8012390:	bf00      	nop
 8012392:	3710      	adds	r7, #16
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	20002824 	.word	0x20002824
 801239c:	2000234c 	.word	0x2000234c
 80123a0:	2000280c 	.word	0x2000280c
 80123a4:	200027dc 	.word	0x200027dc
 80123a8:	200027d8 	.word	0x200027d8
 80123ac:	20002840 	.word	0x20002840

080123b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b08a      	sub	sp, #40	; 0x28
 80123b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80123b6:	2300      	movs	r3, #0
 80123b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80123ba:	f000 fb15 	bl	80129e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80123be:	4b1d      	ldr	r3, [pc, #116]	; (8012434 <xTimerCreateTimerTask+0x84>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d021      	beq.n	801240a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80123c6:	2300      	movs	r3, #0
 80123c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80123ca:	2300      	movs	r3, #0
 80123cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80123ce:	1d3a      	adds	r2, r7, #4
 80123d0:	f107 0108 	add.w	r1, r7, #8
 80123d4:	f107 030c 	add.w	r3, r7, #12
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fd fe77 	bl	80100cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80123de:	6879      	ldr	r1, [r7, #4]
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	68fa      	ldr	r2, [r7, #12]
 80123e4:	9202      	str	r2, [sp, #8]
 80123e6:	9301      	str	r3, [sp, #4]
 80123e8:	2302      	movs	r3, #2
 80123ea:	9300      	str	r3, [sp, #0]
 80123ec:	2300      	movs	r3, #0
 80123ee:	460a      	mov	r2, r1
 80123f0:	4911      	ldr	r1, [pc, #68]	; (8012438 <xTimerCreateTimerTask+0x88>)
 80123f2:	4812      	ldr	r0, [pc, #72]	; (801243c <xTimerCreateTimerTask+0x8c>)
 80123f4:	f7fe ff8e 	bl	8011314 <xTaskCreateStatic>
 80123f8:	4603      	mov	r3, r0
 80123fa:	4a11      	ldr	r2, [pc, #68]	; (8012440 <xTimerCreateTimerTask+0x90>)
 80123fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80123fe:	4b10      	ldr	r3, [pc, #64]	; (8012440 <xTimerCreateTimerTask+0x90>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d001      	beq.n	801240a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012406:	2301      	movs	r3, #1
 8012408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d10c      	bne.n	801242a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8012410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012414:	b672      	cpsid	i
 8012416:	f383 8811 	msr	BASEPRI, r3
 801241a:	f3bf 8f6f 	isb	sy
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	b662      	cpsie	i
 8012424:	613b      	str	r3, [r7, #16]
}
 8012426:	bf00      	nop
 8012428:	e7fe      	b.n	8012428 <xTimerCreateTimerTask+0x78>
	return xReturn;
 801242a:	697b      	ldr	r3, [r7, #20]
}
 801242c:	4618      	mov	r0, r3
 801242e:	3718      	adds	r7, #24
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	2000287c 	.word	0x2000287c
 8012438:	080180cc 	.word	0x080180cc
 801243c:	08012581 	.word	0x08012581
 8012440:	20002880 	.word	0x20002880

08012444 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b08a      	sub	sp, #40	; 0x28
 8012448:	af00      	add	r7, sp, #0
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	607a      	str	r2, [r7, #4]
 8012450:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012452:	2300      	movs	r3, #0
 8012454:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10c      	bne.n	8012476 <xTimerGenericCommand+0x32>
	__asm volatile
 801245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012460:	b672      	cpsid	i
 8012462:	f383 8811 	msr	BASEPRI, r3
 8012466:	f3bf 8f6f 	isb	sy
 801246a:	f3bf 8f4f 	dsb	sy
 801246e:	b662      	cpsie	i
 8012470:	623b      	str	r3, [r7, #32]
}
 8012472:	bf00      	nop
 8012474:	e7fe      	b.n	8012474 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012476:	4b1a      	ldr	r3, [pc, #104]	; (80124e0 <xTimerGenericCommand+0x9c>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d02a      	beq.n	80124d4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	2b05      	cmp	r3, #5
 801248e:	dc18      	bgt.n	80124c2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012490:	f7ff fda8 	bl	8011fe4 <xTaskGetSchedulerState>
 8012494:	4603      	mov	r3, r0
 8012496:	2b02      	cmp	r3, #2
 8012498:	d109      	bne.n	80124ae <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801249a:	4b11      	ldr	r3, [pc, #68]	; (80124e0 <xTimerGenericCommand+0x9c>)
 801249c:	6818      	ldr	r0, [r3, #0]
 801249e:	f107 0110 	add.w	r1, r7, #16
 80124a2:	2300      	movs	r3, #0
 80124a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124a6:	f7fe f8a3 	bl	80105f0 <xQueueGenericSend>
 80124aa:	6278      	str	r0, [r7, #36]	; 0x24
 80124ac:	e012      	b.n	80124d4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80124ae:	4b0c      	ldr	r3, [pc, #48]	; (80124e0 <xTimerGenericCommand+0x9c>)
 80124b0:	6818      	ldr	r0, [r3, #0]
 80124b2:	f107 0110 	add.w	r1, r7, #16
 80124b6:	2300      	movs	r3, #0
 80124b8:	2200      	movs	r2, #0
 80124ba:	f7fe f899 	bl	80105f0 <xQueueGenericSend>
 80124be:	6278      	str	r0, [r7, #36]	; 0x24
 80124c0:	e008      	b.n	80124d4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80124c2:	4b07      	ldr	r3, [pc, #28]	; (80124e0 <xTimerGenericCommand+0x9c>)
 80124c4:	6818      	ldr	r0, [r3, #0]
 80124c6:	f107 0110 	add.w	r1, r7, #16
 80124ca:	2300      	movs	r3, #0
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	f7fe f995 	bl	80107fc <xQueueGenericSendFromISR>
 80124d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3728      	adds	r7, #40	; 0x28
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	2000287c 	.word	0x2000287c

080124e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b088      	sub	sp, #32
 80124e8:	af02      	add	r7, sp, #8
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124ee:	4b23      	ldr	r3, [pc, #140]	; (801257c <prvProcessExpiredTimer+0x98>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	68db      	ldr	r3, [r3, #12]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	3304      	adds	r3, #4
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fd fe89 	bl	8010214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012508:	f003 0304 	and.w	r3, r3, #4
 801250c:	2b00      	cmp	r3, #0
 801250e:	d024      	beq.n	801255a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	699a      	ldr	r2, [r3, #24]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	18d1      	adds	r1, r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	683a      	ldr	r2, [r7, #0]
 801251c:	6978      	ldr	r0, [r7, #20]
 801251e:	f000 f8d3 	bl	80126c8 <prvInsertTimerInActiveList>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	d021      	beq.n	801256c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012528:	2300      	movs	r3, #0
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	2300      	movs	r3, #0
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	2100      	movs	r1, #0
 8012532:	6978      	ldr	r0, [r7, #20]
 8012534:	f7ff ff86 	bl	8012444 <xTimerGenericCommand>
 8012538:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d115      	bne.n	801256c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8012540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012544:	b672      	cpsid	i
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	b662      	cpsie	i
 8012554:	60fb      	str	r3, [r7, #12]
}
 8012556:	bf00      	nop
 8012558:	e7fe      	b.n	8012558 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012560:	f023 0301 	bic.w	r3, r3, #1
 8012564:	b2da      	uxtb	r2, r3
 8012566:	697b      	ldr	r3, [r7, #20]
 8012568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	6a1b      	ldr	r3, [r3, #32]
 8012570:	6978      	ldr	r0, [r7, #20]
 8012572:	4798      	blx	r3
}
 8012574:	bf00      	nop
 8012576:	3718      	adds	r7, #24
 8012578:	46bd      	mov	sp, r7
 801257a:	bd80      	pop	{r7, pc}
 801257c:	20002874 	.word	0x20002874

08012580 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b084      	sub	sp, #16
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012588:	f107 0308 	add.w	r3, r7, #8
 801258c:	4618      	mov	r0, r3
 801258e:	f000 f857 	bl	8012640 <prvGetNextExpireTime>
 8012592:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	4619      	mov	r1, r3
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f000 f803 	bl	80125a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801259e:	f000 f8d5 	bl	801274c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80125a2:	e7f1      	b.n	8012588 <prvTimerTask+0x8>

080125a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b084      	sub	sp, #16
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80125ae:	f7ff f91b 	bl	80117e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80125b2:	f107 0308 	add.w	r3, r7, #8
 80125b6:	4618      	mov	r0, r3
 80125b8:	f000 f866 	bl	8012688 <prvSampleTimeNow>
 80125bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d130      	bne.n	8012626 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d10a      	bne.n	80125e0 <prvProcessTimerOrBlockTask+0x3c>
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d806      	bhi.n	80125e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80125d2:	f7ff f917 	bl	8011804 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80125d6:	68f9      	ldr	r1, [r7, #12]
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7ff ff83 	bl	80124e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80125de:	e024      	b.n	801262a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d008      	beq.n	80125f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80125e6:	4b13      	ldr	r3, [pc, #76]	; (8012634 <prvProcessTimerOrBlockTask+0x90>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d101      	bne.n	80125f4 <prvProcessTimerOrBlockTask+0x50>
 80125f0:	2301      	movs	r3, #1
 80125f2:	e000      	b.n	80125f6 <prvProcessTimerOrBlockTask+0x52>
 80125f4:	2300      	movs	r3, #0
 80125f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80125f8:	4b0f      	ldr	r3, [pc, #60]	; (8012638 <prvProcessTimerOrBlockTask+0x94>)
 80125fa:	6818      	ldr	r0, [r3, #0]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	1ad3      	subs	r3, r2, r3
 8012602:	683a      	ldr	r2, [r7, #0]
 8012604:	4619      	mov	r1, r3
 8012606:	f7fe fe51 	bl	80112ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801260a:	f7ff f8fb 	bl	8011804 <xTaskResumeAll>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10a      	bne.n	801262a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012614:	4b09      	ldr	r3, [pc, #36]	; (801263c <prvProcessTimerOrBlockTask+0x98>)
 8012616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	f3bf 8f6f 	isb	sy
}
 8012624:	e001      	b.n	801262a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012626:	f7ff f8ed 	bl	8011804 <xTaskResumeAll>
}
 801262a:	bf00      	nop
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}
 8012632:	bf00      	nop
 8012634:	20002878 	.word	0x20002878
 8012638:	2000287c 	.word	0x2000287c
 801263c:	e000ed04 	.word	0xe000ed04

08012640 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012640:	b480      	push	{r7}
 8012642:	b085      	sub	sp, #20
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012648:	4b0e      	ldr	r3, [pc, #56]	; (8012684 <prvGetNextExpireTime+0x44>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <prvGetNextExpireTime+0x16>
 8012652:	2201      	movs	r2, #1
 8012654:	e000      	b.n	8012658 <prvGetNextExpireTime+0x18>
 8012656:	2200      	movs	r2, #0
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d105      	bne.n	8012670 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012664:	4b07      	ldr	r3, [pc, #28]	; (8012684 <prvGetNextExpireTime+0x44>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	60fb      	str	r3, [r7, #12]
 801266e:	e001      	b.n	8012674 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012670:	2300      	movs	r3, #0
 8012672:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012674:	68fb      	ldr	r3, [r7, #12]
}
 8012676:	4618      	mov	r0, r3
 8012678:	3714      	adds	r7, #20
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr
 8012682:	bf00      	nop
 8012684:	20002874 	.word	0x20002874

08012688 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012690:	f7ff f958 	bl	8011944 <xTaskGetTickCount>
 8012694:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012696:	4b0b      	ldr	r3, [pc, #44]	; (80126c4 <prvSampleTimeNow+0x3c>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	68fa      	ldr	r2, [r7, #12]
 801269c:	429a      	cmp	r2, r3
 801269e:	d205      	bcs.n	80126ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80126a0:	f000 f93c 	bl	801291c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	601a      	str	r2, [r3, #0]
 80126aa:	e002      	b.n	80126b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2200      	movs	r2, #0
 80126b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80126b2:	4a04      	ldr	r2, [pc, #16]	; (80126c4 <prvSampleTimeNow+0x3c>)
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80126b8:	68fb      	ldr	r3, [r7, #12]
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3710      	adds	r7, #16
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	20002884 	.word	0x20002884

080126c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
 80126d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80126d6:	2300      	movs	r3, #0
 80126d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	68fa      	ldr	r2, [r7, #12]
 80126e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80126e6:	68ba      	ldr	r2, [r7, #8]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d812      	bhi.n	8012714 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	1ad2      	subs	r2, r2, r3
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	699b      	ldr	r3, [r3, #24]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d302      	bcc.n	8012702 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80126fc:	2301      	movs	r3, #1
 80126fe:	617b      	str	r3, [r7, #20]
 8012700:	e01b      	b.n	801273a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012702:	4b10      	ldr	r3, [pc, #64]	; (8012744 <prvInsertTimerInActiveList+0x7c>)
 8012704:	681a      	ldr	r2, [r3, #0]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	3304      	adds	r3, #4
 801270a:	4619      	mov	r1, r3
 801270c:	4610      	mov	r0, r2
 801270e:	f7fd fd48 	bl	80101a2 <vListInsert>
 8012712:	e012      	b.n	801273a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	429a      	cmp	r2, r3
 801271a:	d206      	bcs.n	801272a <prvInsertTimerInActiveList+0x62>
 801271c:	68ba      	ldr	r2, [r7, #8]
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	429a      	cmp	r2, r3
 8012722:	d302      	bcc.n	801272a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012724:	2301      	movs	r3, #1
 8012726:	617b      	str	r3, [r7, #20]
 8012728:	e007      	b.n	801273a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801272a:	4b07      	ldr	r3, [pc, #28]	; (8012748 <prvInsertTimerInActiveList+0x80>)
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	3304      	adds	r3, #4
 8012732:	4619      	mov	r1, r3
 8012734:	4610      	mov	r0, r2
 8012736:	f7fd fd34 	bl	80101a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801273a:	697b      	ldr	r3, [r7, #20]
}
 801273c:	4618      	mov	r0, r3
 801273e:	3718      	adds	r7, #24
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	20002878 	.word	0x20002878
 8012748:	20002874 	.word	0x20002874

0801274c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b08e      	sub	sp, #56	; 0x38
 8012750:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012752:	e0d0      	b.n	80128f6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	da1a      	bge.n	8012790 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801275a:	1d3b      	adds	r3, r7, #4
 801275c:	3304      	adds	r3, #4
 801275e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	2b00      	cmp	r3, #0
 8012764:	d10c      	bne.n	8012780 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8012766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276a:	b672      	cpsid	i
 801276c:	f383 8811 	msr	BASEPRI, r3
 8012770:	f3bf 8f6f 	isb	sy
 8012774:	f3bf 8f4f 	dsb	sy
 8012778:	b662      	cpsie	i
 801277a:	61fb      	str	r3, [r7, #28]
}
 801277c:	bf00      	nop
 801277e:	e7fe      	b.n	801277e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012786:	6850      	ldr	r0, [r2, #4]
 8012788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801278a:	6892      	ldr	r2, [r2, #8]
 801278c:	4611      	mov	r1, r2
 801278e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	f2c0 80ae 	blt.w	80128f4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279e:	695b      	ldr	r3, [r3, #20]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d004      	beq.n	80127ae <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a6:	3304      	adds	r3, #4
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7fd fd33 	bl	8010214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80127ae:	463b      	mov	r3, r7
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7ff ff69 	bl	8012688 <prvSampleTimeNow>
 80127b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2b09      	cmp	r3, #9
 80127bc:	f200 809b 	bhi.w	80128f6 <prvProcessReceivedCommands+0x1aa>
 80127c0:	a201      	add	r2, pc, #4	; (adr r2, 80127c8 <prvProcessReceivedCommands+0x7c>)
 80127c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127c6:	bf00      	nop
 80127c8:	080127f1 	.word	0x080127f1
 80127cc:	080127f1 	.word	0x080127f1
 80127d0:	080127f1 	.word	0x080127f1
 80127d4:	08012869 	.word	0x08012869
 80127d8:	0801287d 	.word	0x0801287d
 80127dc:	080128cb 	.word	0x080128cb
 80127e0:	080127f1 	.word	0x080127f1
 80127e4:	080127f1 	.word	0x080127f1
 80127e8:	08012869 	.word	0x08012869
 80127ec:	0801287d 	.word	0x0801287d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80127f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127f6:	f043 0301 	orr.w	r3, r3, #1
 80127fa:	b2da      	uxtb	r2, r3
 80127fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012802:	68ba      	ldr	r2, [r7, #8]
 8012804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012806:	699b      	ldr	r3, [r3, #24]
 8012808:	18d1      	adds	r1, r2, r3
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801280e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012810:	f7ff ff5a 	bl	80126c8 <prvInsertTimerInActiveList>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d06d      	beq.n	80128f6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281c:	6a1b      	ldr	r3, [r3, #32]
 801281e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012828:	f003 0304 	and.w	r3, r3, #4
 801282c:	2b00      	cmp	r3, #0
 801282e:	d062      	beq.n	80128f6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	441a      	add	r2, r3
 8012838:	2300      	movs	r3, #0
 801283a:	9300      	str	r3, [sp, #0]
 801283c:	2300      	movs	r3, #0
 801283e:	2100      	movs	r1, #0
 8012840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012842:	f7ff fdff 	bl	8012444 <xTimerGenericCommand>
 8012846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012848:	6a3b      	ldr	r3, [r7, #32]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d153      	bne.n	80128f6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 801284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012852:	b672      	cpsid	i
 8012854:	f383 8811 	msr	BASEPRI, r3
 8012858:	f3bf 8f6f 	isb	sy
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	b662      	cpsie	i
 8012862:	61bb      	str	r3, [r7, #24]
}
 8012864:	bf00      	nop
 8012866:	e7fe      	b.n	8012866 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801286e:	f023 0301 	bic.w	r3, r3, #1
 8012872:	b2da      	uxtb	r2, r3
 8012874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801287a:	e03c      	b.n	80128f6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012882:	f043 0301 	orr.w	r3, r3, #1
 8012886:	b2da      	uxtb	r2, r3
 8012888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801288a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012892:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012896:	699b      	ldr	r3, [r3, #24]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10c      	bne.n	80128b6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a0:	b672      	cpsid	i
 80128a2:	f383 8811 	msr	BASEPRI, r3
 80128a6:	f3bf 8f6f 	isb	sy
 80128aa:	f3bf 8f4f 	dsb	sy
 80128ae:	b662      	cpsie	i
 80128b0:	617b      	str	r3, [r7, #20]
}
 80128b2:	bf00      	nop
 80128b4:	e7fe      	b.n	80128b4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80128b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b8:	699a      	ldr	r2, [r3, #24]
 80128ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128bc:	18d1      	adds	r1, r2, r3
 80128be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128c4:	f7ff ff00 	bl	80126c8 <prvInsertTimerInActiveList>
					break;
 80128c8:	e015      	b.n	80128f6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80128ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128d0:	f003 0302 	and.w	r3, r3, #2
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d103      	bne.n	80128e0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80128d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128da:	f000 fbc5 	bl	8013068 <vPortFree>
 80128de:	e00a      	b.n	80128f6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80128e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128e6:	f023 0301 	bic.w	r3, r3, #1
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80128f2:	e000      	b.n	80128f6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80128f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80128f6:	4b08      	ldr	r3, [pc, #32]	; (8012918 <prvProcessReceivedCommands+0x1cc>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	1d39      	adds	r1, r7, #4
 80128fc:	2200      	movs	r2, #0
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fe f8b2 	bl	8010a68 <xQueueReceive>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	f47f af24 	bne.w	8012754 <prvProcessReceivedCommands+0x8>
	}
}
 801290c:	bf00      	nop
 801290e:	bf00      	nop
 8012910:	3730      	adds	r7, #48	; 0x30
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	2000287c 	.word	0x2000287c

0801291c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b088      	sub	sp, #32
 8012920:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012922:	e04a      	b.n	80129ba <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012924:	4b2e      	ldr	r3, [pc, #184]	; (80129e0 <prvSwitchTimerLists+0xc4>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801292e:	4b2c      	ldr	r3, [pc, #176]	; (80129e0 <prvSwitchTimerLists+0xc4>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	68db      	ldr	r3, [r3, #12]
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	3304      	adds	r3, #4
 801293c:	4618      	mov	r0, r3
 801293e:	f7fd fc69 	bl	8010214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6a1b      	ldr	r3, [r3, #32]
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012950:	f003 0304 	and.w	r3, r3, #4
 8012954:	2b00      	cmp	r3, #0
 8012956:	d030      	beq.n	80129ba <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	699b      	ldr	r3, [r3, #24]
 801295c:	693a      	ldr	r2, [r7, #16]
 801295e:	4413      	add	r3, r2
 8012960:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012962:	68ba      	ldr	r2, [r7, #8]
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	429a      	cmp	r2, r3
 8012968:	d90e      	bls.n	8012988 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	68ba      	ldr	r2, [r7, #8]
 801296e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	68fa      	ldr	r2, [r7, #12]
 8012974:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012976:	4b1a      	ldr	r3, [pc, #104]	; (80129e0 <prvSwitchTimerLists+0xc4>)
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	3304      	adds	r3, #4
 801297e:	4619      	mov	r1, r3
 8012980:	4610      	mov	r0, r2
 8012982:	f7fd fc0e 	bl	80101a2 <vListInsert>
 8012986:	e018      	b.n	80129ba <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012988:	2300      	movs	r3, #0
 801298a:	9300      	str	r3, [sp, #0]
 801298c:	2300      	movs	r3, #0
 801298e:	693a      	ldr	r2, [r7, #16]
 8012990:	2100      	movs	r1, #0
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f7ff fd56 	bl	8012444 <xTimerGenericCommand>
 8012998:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d10c      	bne.n	80129ba <prvSwitchTimerLists+0x9e>
	__asm volatile
 80129a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a4:	b672      	cpsid	i
 80129a6:	f383 8811 	msr	BASEPRI, r3
 80129aa:	f3bf 8f6f 	isb	sy
 80129ae:	f3bf 8f4f 	dsb	sy
 80129b2:	b662      	cpsie	i
 80129b4:	603b      	str	r3, [r7, #0]
}
 80129b6:	bf00      	nop
 80129b8:	e7fe      	b.n	80129b8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80129ba:	4b09      	ldr	r3, [pc, #36]	; (80129e0 <prvSwitchTimerLists+0xc4>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d1af      	bne.n	8012924 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80129c4:	4b06      	ldr	r3, [pc, #24]	; (80129e0 <prvSwitchTimerLists+0xc4>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80129ca:	4b06      	ldr	r3, [pc, #24]	; (80129e4 <prvSwitchTimerLists+0xc8>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	4a04      	ldr	r2, [pc, #16]	; (80129e0 <prvSwitchTimerLists+0xc4>)
 80129d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80129d2:	4a04      	ldr	r2, [pc, #16]	; (80129e4 <prvSwitchTimerLists+0xc8>)
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	6013      	str	r3, [r2, #0]
}
 80129d8:	bf00      	nop
 80129da:	3718      	adds	r7, #24
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	20002874 	.word	0x20002874
 80129e4:	20002878 	.word	0x20002878

080129e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80129ee:	f000 f945 	bl	8012c7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80129f2:	4b15      	ldr	r3, [pc, #84]	; (8012a48 <prvCheckForValidListAndQueue+0x60>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d120      	bne.n	8012a3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80129fa:	4814      	ldr	r0, [pc, #80]	; (8012a4c <prvCheckForValidListAndQueue+0x64>)
 80129fc:	f7fd fb80 	bl	8010100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012a00:	4813      	ldr	r0, [pc, #76]	; (8012a50 <prvCheckForValidListAndQueue+0x68>)
 8012a02:	f7fd fb7d 	bl	8010100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012a06:	4b13      	ldr	r3, [pc, #76]	; (8012a54 <prvCheckForValidListAndQueue+0x6c>)
 8012a08:	4a10      	ldr	r2, [pc, #64]	; (8012a4c <prvCheckForValidListAndQueue+0x64>)
 8012a0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012a0c:	4b12      	ldr	r3, [pc, #72]	; (8012a58 <prvCheckForValidListAndQueue+0x70>)
 8012a0e:	4a10      	ldr	r2, [pc, #64]	; (8012a50 <prvCheckForValidListAndQueue+0x68>)
 8012a10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012a12:	2300      	movs	r3, #0
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	4b11      	ldr	r3, [pc, #68]	; (8012a5c <prvCheckForValidListAndQueue+0x74>)
 8012a18:	4a11      	ldr	r2, [pc, #68]	; (8012a60 <prvCheckForValidListAndQueue+0x78>)
 8012a1a:	2110      	movs	r1, #16
 8012a1c:	200a      	movs	r0, #10
 8012a1e:	f7fd fc8d 	bl	801033c <xQueueGenericCreateStatic>
 8012a22:	4603      	mov	r3, r0
 8012a24:	4a08      	ldr	r2, [pc, #32]	; (8012a48 <prvCheckForValidListAndQueue+0x60>)
 8012a26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012a28:	4b07      	ldr	r3, [pc, #28]	; (8012a48 <prvCheckForValidListAndQueue+0x60>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d005      	beq.n	8012a3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012a30:	4b05      	ldr	r3, [pc, #20]	; (8012a48 <prvCheckForValidListAndQueue+0x60>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	490b      	ldr	r1, [pc, #44]	; (8012a64 <prvCheckForValidListAndQueue+0x7c>)
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fe fbe4 	bl	8011204 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012a3c:	f000 f952 	bl	8012ce4 <vPortExitCritical>
}
 8012a40:	bf00      	nop
 8012a42:	46bd      	mov	sp, r7
 8012a44:	bd80      	pop	{r7, pc}
 8012a46:	bf00      	nop
 8012a48:	2000287c 	.word	0x2000287c
 8012a4c:	2000284c 	.word	0x2000284c
 8012a50:	20002860 	.word	0x20002860
 8012a54:	20002874 	.word	0x20002874
 8012a58:	20002878 	.word	0x20002878
 8012a5c:	20002928 	.word	0x20002928
 8012a60:	20002888 	.word	0x20002888
 8012a64:	080180d4 	.word	0x080180d4

08012a68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012a68:	b480      	push	{r7}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	3b04      	subs	r3, #4
 8012a78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	3b04      	subs	r3, #4
 8012a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	f023 0201 	bic.w	r2, r3, #1
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	3b04      	subs	r3, #4
 8012a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a98:	4a0c      	ldr	r2, [pc, #48]	; (8012acc <pxPortInitialiseStack+0x64>)
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	3b14      	subs	r3, #20
 8012aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012aa4:	687a      	ldr	r2, [r7, #4]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	3b04      	subs	r3, #4
 8012aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f06f 0202 	mvn.w	r2, #2
 8012ab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	3b20      	subs	r3, #32
 8012abc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012abe:	68fb      	ldr	r3, [r7, #12]
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3714      	adds	r7, #20
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	08012ad1 	.word	0x08012ad1

08012ad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ad0:	b480      	push	{r7}
 8012ad2:	b085      	sub	sp, #20
 8012ad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012ada:	4b14      	ldr	r3, [pc, #80]	; (8012b2c <prvTaskExitError+0x5c>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae2:	d00c      	beq.n	8012afe <prvTaskExitError+0x2e>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	b672      	cpsid	i
 8012aea:	f383 8811 	msr	BASEPRI, r3
 8012aee:	f3bf 8f6f 	isb	sy
 8012af2:	f3bf 8f4f 	dsb	sy
 8012af6:	b662      	cpsie	i
 8012af8:	60fb      	str	r3, [r7, #12]
}
 8012afa:	bf00      	nop
 8012afc:	e7fe      	b.n	8012afc <prvTaskExitError+0x2c>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	b672      	cpsid	i
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	b662      	cpsie	i
 8012b12:	60bb      	str	r3, [r7, #8]
}
 8012b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012b16:	bf00      	nop
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d0fc      	beq.n	8012b18 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012b1e:	bf00      	nop
 8012b20:	bf00      	nop
 8012b22:	3714      	adds	r7, #20
 8012b24:	46bd      	mov	sp, r7
 8012b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2a:	4770      	bx	lr
 8012b2c:	200001bc 	.word	0x200001bc

08012b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012b30:	4b07      	ldr	r3, [pc, #28]	; (8012b50 <pxCurrentTCBConst2>)
 8012b32:	6819      	ldr	r1, [r3, #0]
 8012b34:	6808      	ldr	r0, [r1, #0]
 8012b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3a:	f380 8809 	msr	PSP, r0
 8012b3e:	f3bf 8f6f 	isb	sy
 8012b42:	f04f 0000 	mov.w	r0, #0
 8012b46:	f380 8811 	msr	BASEPRI, r0
 8012b4a:	4770      	bx	lr
 8012b4c:	f3af 8000 	nop.w

08012b50 <pxCurrentTCBConst2>:
 8012b50:	2000234c 	.word	0x2000234c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012b54:	bf00      	nop
 8012b56:	bf00      	nop

08012b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012b58:	4808      	ldr	r0, [pc, #32]	; (8012b7c <prvPortStartFirstTask+0x24>)
 8012b5a:	6800      	ldr	r0, [r0, #0]
 8012b5c:	6800      	ldr	r0, [r0, #0]
 8012b5e:	f380 8808 	msr	MSP, r0
 8012b62:	f04f 0000 	mov.w	r0, #0
 8012b66:	f380 8814 	msr	CONTROL, r0
 8012b6a:	b662      	cpsie	i
 8012b6c:	b661      	cpsie	f
 8012b6e:	f3bf 8f4f 	dsb	sy
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	df00      	svc	0
 8012b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012b7a:	bf00      	nop
 8012b7c:	e000ed08 	.word	0xe000ed08

08012b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b86:	4b37      	ldr	r3, [pc, #220]	; (8012c64 <xPortStartScheduler+0xe4>)
 8012b88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	22ff      	movs	r2, #255	; 0xff
 8012b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012ba0:	78fb      	ldrb	r3, [r7, #3]
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012ba8:	b2da      	uxtb	r2, r3
 8012baa:	4b2f      	ldr	r3, [pc, #188]	; (8012c68 <xPortStartScheduler+0xe8>)
 8012bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012bae:	4b2f      	ldr	r3, [pc, #188]	; (8012c6c <xPortStartScheduler+0xec>)
 8012bb0:	2207      	movs	r2, #7
 8012bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bb4:	e009      	b.n	8012bca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012bb6:	4b2d      	ldr	r3, [pc, #180]	; (8012c6c <xPortStartScheduler+0xec>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	4a2b      	ldr	r2, [pc, #172]	; (8012c6c <xPortStartScheduler+0xec>)
 8012bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012bc0:	78fb      	ldrb	r3, [r7, #3]
 8012bc2:	b2db      	uxtb	r3, r3
 8012bc4:	005b      	lsls	r3, r3, #1
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bca:	78fb      	ldrb	r3, [r7, #3]
 8012bcc:	b2db      	uxtb	r3, r3
 8012bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bd2:	2b80      	cmp	r3, #128	; 0x80
 8012bd4:	d0ef      	beq.n	8012bb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012bd6:	4b25      	ldr	r3, [pc, #148]	; (8012c6c <xPortStartScheduler+0xec>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f1c3 0307 	rsb	r3, r3, #7
 8012bde:	2b04      	cmp	r3, #4
 8012be0:	d00c      	beq.n	8012bfc <xPortStartScheduler+0x7c>
	__asm volatile
 8012be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be6:	b672      	cpsid	i
 8012be8:	f383 8811 	msr	BASEPRI, r3
 8012bec:	f3bf 8f6f 	isb	sy
 8012bf0:	f3bf 8f4f 	dsb	sy
 8012bf4:	b662      	cpsie	i
 8012bf6:	60bb      	str	r3, [r7, #8]
}
 8012bf8:	bf00      	nop
 8012bfa:	e7fe      	b.n	8012bfa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012bfc:	4b1b      	ldr	r3, [pc, #108]	; (8012c6c <xPortStartScheduler+0xec>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	021b      	lsls	r3, r3, #8
 8012c02:	4a1a      	ldr	r2, [pc, #104]	; (8012c6c <xPortStartScheduler+0xec>)
 8012c04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012c06:	4b19      	ldr	r3, [pc, #100]	; (8012c6c <xPortStartScheduler+0xec>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012c0e:	4a17      	ldr	r2, [pc, #92]	; (8012c6c <xPortStartScheduler+0xec>)
 8012c10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	b2da      	uxtb	r2, r3
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012c1a:	4b15      	ldr	r3, [pc, #84]	; (8012c70 <xPortStartScheduler+0xf0>)
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4a14      	ldr	r2, [pc, #80]	; (8012c70 <xPortStartScheduler+0xf0>)
 8012c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012c26:	4b12      	ldr	r3, [pc, #72]	; (8012c70 <xPortStartScheduler+0xf0>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4a11      	ldr	r2, [pc, #68]	; (8012c70 <xPortStartScheduler+0xf0>)
 8012c2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012c30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012c32:	f000 f8dd 	bl	8012df0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012c36:	4b0f      	ldr	r3, [pc, #60]	; (8012c74 <xPortStartScheduler+0xf4>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012c3c:	f000 f8fc 	bl	8012e38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012c40:	4b0d      	ldr	r3, [pc, #52]	; (8012c78 <xPortStartScheduler+0xf8>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a0c      	ldr	r2, [pc, #48]	; (8012c78 <xPortStartScheduler+0xf8>)
 8012c46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012c4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012c4c:	f7ff ff84 	bl	8012b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012c50:	f7fe ff44 	bl	8011adc <vTaskSwitchContext>
	prvTaskExitError();
 8012c54:	f7ff ff3c 	bl	8012ad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c58:	2300      	movs	r3, #0
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	e000e400 	.word	0xe000e400
 8012c68:	20002978 	.word	0x20002978
 8012c6c:	2000297c 	.word	0x2000297c
 8012c70:	e000ed20 	.word	0xe000ed20
 8012c74:	200001bc 	.word	0x200001bc
 8012c78:	e000ef34 	.word	0xe000ef34

08012c7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
	__asm volatile
 8012c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c86:	b672      	cpsid	i
 8012c88:	f383 8811 	msr	BASEPRI, r3
 8012c8c:	f3bf 8f6f 	isb	sy
 8012c90:	f3bf 8f4f 	dsb	sy
 8012c94:	b662      	cpsie	i
 8012c96:	607b      	str	r3, [r7, #4]
}
 8012c98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c9a:	4b10      	ldr	r3, [pc, #64]	; (8012cdc <vPortEnterCritical+0x60>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	4a0e      	ldr	r2, [pc, #56]	; (8012cdc <vPortEnterCritical+0x60>)
 8012ca2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ca4:	4b0d      	ldr	r3, [pc, #52]	; (8012cdc <vPortEnterCritical+0x60>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	d111      	bne.n	8012cd0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012cac:	4b0c      	ldr	r3, [pc, #48]	; (8012ce0 <vPortEnterCritical+0x64>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00c      	beq.n	8012cd0 <vPortEnterCritical+0x54>
	__asm volatile
 8012cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cba:	b672      	cpsid	i
 8012cbc:	f383 8811 	msr	BASEPRI, r3
 8012cc0:	f3bf 8f6f 	isb	sy
 8012cc4:	f3bf 8f4f 	dsb	sy
 8012cc8:	b662      	cpsie	i
 8012cca:	603b      	str	r3, [r7, #0]
}
 8012ccc:	bf00      	nop
 8012cce:	e7fe      	b.n	8012cce <vPortEnterCritical+0x52>
	}
}
 8012cd0:	bf00      	nop
 8012cd2:	370c      	adds	r7, #12
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr
 8012cdc:	200001bc 	.word	0x200001bc
 8012ce0:	e000ed04 	.word	0xe000ed04

08012ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b083      	sub	sp, #12
 8012ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012cea:	4b13      	ldr	r3, [pc, #76]	; (8012d38 <vPortExitCritical+0x54>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d10c      	bne.n	8012d0c <vPortExitCritical+0x28>
	__asm volatile
 8012cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf6:	b672      	cpsid	i
 8012cf8:	f383 8811 	msr	BASEPRI, r3
 8012cfc:	f3bf 8f6f 	isb	sy
 8012d00:	f3bf 8f4f 	dsb	sy
 8012d04:	b662      	cpsie	i
 8012d06:	607b      	str	r3, [r7, #4]
}
 8012d08:	bf00      	nop
 8012d0a:	e7fe      	b.n	8012d0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012d0c:	4b0a      	ldr	r3, [pc, #40]	; (8012d38 <vPortExitCritical+0x54>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	3b01      	subs	r3, #1
 8012d12:	4a09      	ldr	r2, [pc, #36]	; (8012d38 <vPortExitCritical+0x54>)
 8012d14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012d16:	4b08      	ldr	r3, [pc, #32]	; (8012d38 <vPortExitCritical+0x54>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d105      	bne.n	8012d2a <vPortExitCritical+0x46>
 8012d1e:	2300      	movs	r3, #0
 8012d20:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	f383 8811 	msr	BASEPRI, r3
}
 8012d28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012d2a:	bf00      	nop
 8012d2c:	370c      	adds	r7, #12
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr
 8012d36:	bf00      	nop
 8012d38:	200001bc 	.word	0x200001bc
 8012d3c:	00000000 	.word	0x00000000

08012d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012d40:	f3ef 8009 	mrs	r0, PSP
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	4b15      	ldr	r3, [pc, #84]	; (8012da0 <pxCurrentTCBConst>)
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	f01e 0f10 	tst.w	lr, #16
 8012d50:	bf08      	it	eq
 8012d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5a:	6010      	str	r0, [r2, #0]
 8012d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012d64:	b672      	cpsid	i
 8012d66:	f380 8811 	msr	BASEPRI, r0
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	f3bf 8f6f 	isb	sy
 8012d72:	b662      	cpsie	i
 8012d74:	f7fe feb2 	bl	8011adc <vTaskSwitchContext>
 8012d78:	f04f 0000 	mov.w	r0, #0
 8012d7c:	f380 8811 	msr	BASEPRI, r0
 8012d80:	bc09      	pop	{r0, r3}
 8012d82:	6819      	ldr	r1, [r3, #0]
 8012d84:	6808      	ldr	r0, [r1, #0]
 8012d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d8a:	f01e 0f10 	tst.w	lr, #16
 8012d8e:	bf08      	it	eq
 8012d90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d94:	f380 8809 	msr	PSP, r0
 8012d98:	f3bf 8f6f 	isb	sy
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop

08012da0 <pxCurrentTCBConst>:
 8012da0:	2000234c 	.word	0x2000234c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012da4:	bf00      	nop
 8012da6:	bf00      	nop

08012da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
	__asm volatile
 8012dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db2:	b672      	cpsid	i
 8012db4:	f383 8811 	msr	BASEPRI, r3
 8012db8:	f3bf 8f6f 	isb	sy
 8012dbc:	f3bf 8f4f 	dsb	sy
 8012dc0:	b662      	cpsie	i
 8012dc2:	607b      	str	r3, [r7, #4]
}
 8012dc4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012dc6:	f7fe fdcd 	bl	8011964 <xTaskIncrementTick>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d003      	beq.n	8012dd8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012dd0:	4b06      	ldr	r3, [pc, #24]	; (8012dec <SysTick_Handler+0x44>)
 8012dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dd6:	601a      	str	r2, [r3, #0]
 8012dd8:	2300      	movs	r3, #0
 8012dda:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	f383 8811 	msr	BASEPRI, r3
}
 8012de2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012de4:	bf00      	nop
 8012de6:	3708      	adds	r7, #8
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}
 8012dec:	e000ed04 	.word	0xe000ed04

08012df0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012df0:	b480      	push	{r7}
 8012df2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012df4:	4b0b      	ldr	r3, [pc, #44]	; (8012e24 <vPortSetupTimerInterrupt+0x34>)
 8012df6:	2200      	movs	r2, #0
 8012df8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012dfa:	4b0b      	ldr	r3, [pc, #44]	; (8012e28 <vPortSetupTimerInterrupt+0x38>)
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012e00:	4b0a      	ldr	r3, [pc, #40]	; (8012e2c <vPortSetupTimerInterrupt+0x3c>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4a0a      	ldr	r2, [pc, #40]	; (8012e30 <vPortSetupTimerInterrupt+0x40>)
 8012e06:	fba2 2303 	umull	r2, r3, r2, r3
 8012e0a:	099b      	lsrs	r3, r3, #6
 8012e0c:	4a09      	ldr	r2, [pc, #36]	; (8012e34 <vPortSetupTimerInterrupt+0x44>)
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012e12:	4b04      	ldr	r3, [pc, #16]	; (8012e24 <vPortSetupTimerInterrupt+0x34>)
 8012e14:	2207      	movs	r2, #7
 8012e16:	601a      	str	r2, [r3, #0]
}
 8012e18:	bf00      	nop
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop
 8012e24:	e000e010 	.word	0xe000e010
 8012e28:	e000e018 	.word	0xe000e018
 8012e2c:	20000058 	.word	0x20000058
 8012e30:	10624dd3 	.word	0x10624dd3
 8012e34:	e000e014 	.word	0xe000e014

08012e38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012e38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012e48 <vPortEnableVFP+0x10>
 8012e3c:	6801      	ldr	r1, [r0, #0]
 8012e3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012e42:	6001      	str	r1, [r0, #0]
 8012e44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012e46:	bf00      	nop
 8012e48:	e000ed88 	.word	0xe000ed88

08012e4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b085      	sub	sp, #20
 8012e50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012e52:	f3ef 8305 	mrs	r3, IPSR
 8012e56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b0f      	cmp	r3, #15
 8012e5c:	d916      	bls.n	8012e8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e5e:	4a19      	ldr	r2, [pc, #100]	; (8012ec4 <vPortValidateInterruptPriority+0x78>)
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	4413      	add	r3, r2
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012e68:	4b17      	ldr	r3, [pc, #92]	; (8012ec8 <vPortValidateInterruptPriority+0x7c>)
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	7afa      	ldrb	r2, [r7, #11]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d20c      	bcs.n	8012e8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e76:	b672      	cpsid	i
 8012e78:	f383 8811 	msr	BASEPRI, r3
 8012e7c:	f3bf 8f6f 	isb	sy
 8012e80:	f3bf 8f4f 	dsb	sy
 8012e84:	b662      	cpsie	i
 8012e86:	607b      	str	r3, [r7, #4]
}
 8012e88:	bf00      	nop
 8012e8a:	e7fe      	b.n	8012e8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e8c:	4b0f      	ldr	r3, [pc, #60]	; (8012ecc <vPortValidateInterruptPriority+0x80>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012e94:	4b0e      	ldr	r3, [pc, #56]	; (8012ed0 <vPortValidateInterruptPriority+0x84>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d90c      	bls.n	8012eb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8012e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea0:	b672      	cpsid	i
 8012ea2:	f383 8811 	msr	BASEPRI, r3
 8012ea6:	f3bf 8f6f 	isb	sy
 8012eaa:	f3bf 8f4f 	dsb	sy
 8012eae:	b662      	cpsie	i
 8012eb0:	603b      	str	r3, [r7, #0]
}
 8012eb2:	bf00      	nop
 8012eb4:	e7fe      	b.n	8012eb4 <vPortValidateInterruptPriority+0x68>
	}
 8012eb6:	bf00      	nop
 8012eb8:	3714      	adds	r7, #20
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr
 8012ec2:	bf00      	nop
 8012ec4:	e000e3f0 	.word	0xe000e3f0
 8012ec8:	20002978 	.word	0x20002978
 8012ecc:	e000ed0c 	.word	0xe000ed0c
 8012ed0:	2000297c 	.word	0x2000297c

08012ed4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b08a      	sub	sp, #40	; 0x28
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012edc:	2300      	movs	r3, #0
 8012ede:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ee0:	f7fe fc82 	bl	80117e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012ee4:	4b5b      	ldr	r3, [pc, #364]	; (8013054 <pvPortMalloc+0x180>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d101      	bne.n	8012ef0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012eec:	f000 f91a 	bl	8013124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ef0:	4b59      	ldr	r3, [pc, #356]	; (8013058 <pvPortMalloc+0x184>)
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	4013      	ands	r3, r2
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	f040 8092 	bne.w	8013022 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d01f      	beq.n	8012f44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012f04:	2208      	movs	r2, #8
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4413      	add	r3, r2
 8012f0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f003 0307 	and.w	r3, r3, #7
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d016      	beq.n	8012f44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f023 0307 	bic.w	r3, r3, #7
 8012f1c:	3308      	adds	r3, #8
 8012f1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f003 0307 	and.w	r3, r3, #7
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00c      	beq.n	8012f44 <pvPortMalloc+0x70>
	__asm volatile
 8012f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2e:	b672      	cpsid	i
 8012f30:	f383 8811 	msr	BASEPRI, r3
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	f3bf 8f4f 	dsb	sy
 8012f3c:	b662      	cpsie	i
 8012f3e:	617b      	str	r3, [r7, #20]
}
 8012f40:	bf00      	nop
 8012f42:	e7fe      	b.n	8012f42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d06b      	beq.n	8013022 <pvPortMalloc+0x14e>
 8012f4a:	4b44      	ldr	r3, [pc, #272]	; (801305c <pvPortMalloc+0x188>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d866      	bhi.n	8013022 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012f54:	4b42      	ldr	r3, [pc, #264]	; (8013060 <pvPortMalloc+0x18c>)
 8012f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012f58:	4b41      	ldr	r3, [pc, #260]	; (8013060 <pvPortMalloc+0x18c>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f5e:	e004      	b.n	8012f6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d903      	bls.n	8012f7c <pvPortMalloc+0xa8>
 8012f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d1f1      	bne.n	8012f60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f7c:	4b35      	ldr	r3, [pc, #212]	; (8013054 <pvPortMalloc+0x180>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d04d      	beq.n	8013022 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f86:	6a3b      	ldr	r3, [r7, #32]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2208      	movs	r2, #8
 8012f8c:	4413      	add	r3, r2
 8012f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f92:	681a      	ldr	r2, [r3, #0]
 8012f94:	6a3b      	ldr	r3, [r7, #32]
 8012f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9a:	685a      	ldr	r2, [r3, #4]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	1ad2      	subs	r2, r2, r3
 8012fa0:	2308      	movs	r3, #8
 8012fa2:	005b      	lsls	r3, r3, #1
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d921      	bls.n	8012fec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	4413      	add	r3, r2
 8012fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	f003 0307 	and.w	r3, r3, #7
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d00c      	beq.n	8012fd4 <pvPortMalloc+0x100>
	__asm volatile
 8012fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbe:	b672      	cpsid	i
 8012fc0:	f383 8811 	msr	BASEPRI, r3
 8012fc4:	f3bf 8f6f 	isb	sy
 8012fc8:	f3bf 8f4f 	dsb	sy
 8012fcc:	b662      	cpsie	i
 8012fce:	613b      	str	r3, [r7, #16]
}
 8012fd0:	bf00      	nop
 8012fd2:	e7fe      	b.n	8012fd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd6:	685a      	ldr	r2, [r3, #4]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	1ad2      	subs	r2, r2, r3
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe2:	687a      	ldr	r2, [r7, #4]
 8012fe4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012fe6:	69b8      	ldr	r0, [r7, #24]
 8012fe8:	f000 f8fe 	bl	80131e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012fec:	4b1b      	ldr	r3, [pc, #108]	; (801305c <pvPortMalloc+0x188>)
 8012fee:	681a      	ldr	r2, [r3, #0]
 8012ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	1ad3      	subs	r3, r2, r3
 8012ff6:	4a19      	ldr	r2, [pc, #100]	; (801305c <pvPortMalloc+0x188>)
 8012ff8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012ffa:	4b18      	ldr	r3, [pc, #96]	; (801305c <pvPortMalloc+0x188>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	4b19      	ldr	r3, [pc, #100]	; (8013064 <pvPortMalloc+0x190>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	429a      	cmp	r2, r3
 8013004:	d203      	bcs.n	801300e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013006:	4b15      	ldr	r3, [pc, #84]	; (801305c <pvPortMalloc+0x188>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	4a16      	ldr	r2, [pc, #88]	; (8013064 <pvPortMalloc+0x190>)
 801300c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013010:	685a      	ldr	r2, [r3, #4]
 8013012:	4b11      	ldr	r3, [pc, #68]	; (8013058 <pvPortMalloc+0x184>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	431a      	orrs	r2, r3
 8013018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	2200      	movs	r2, #0
 8013020:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013022:	f7fe fbef 	bl	8011804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	f003 0307 	and.w	r3, r3, #7
 801302c:	2b00      	cmp	r3, #0
 801302e:	d00c      	beq.n	801304a <pvPortMalloc+0x176>
	__asm volatile
 8013030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013034:	b672      	cpsid	i
 8013036:	f383 8811 	msr	BASEPRI, r3
 801303a:	f3bf 8f6f 	isb	sy
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	b662      	cpsie	i
 8013044:	60fb      	str	r3, [r7, #12]
}
 8013046:	bf00      	nop
 8013048:	e7fe      	b.n	8013048 <pvPortMalloc+0x174>
	return pvReturn;
 801304a:	69fb      	ldr	r3, [r7, #28]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3728      	adds	r7, #40	; 0x28
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	20006588 	.word	0x20006588
 8013058:	20006594 	.word	0x20006594
 801305c:	2000658c 	.word	0x2000658c
 8013060:	20006580 	.word	0x20006580
 8013064:	20006590 	.word	0x20006590

08013068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d04c      	beq.n	8013114 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801307a:	2308      	movs	r3, #8
 801307c:	425b      	negs	r3, r3
 801307e:	697a      	ldr	r2, [r7, #20]
 8013080:	4413      	add	r3, r2
 8013082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	685a      	ldr	r2, [r3, #4]
 801308c:	4b23      	ldr	r3, [pc, #140]	; (801311c <vPortFree+0xb4>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4013      	ands	r3, r2
 8013092:	2b00      	cmp	r3, #0
 8013094:	d10c      	bne.n	80130b0 <vPortFree+0x48>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309a:	b672      	cpsid	i
 801309c:	f383 8811 	msr	BASEPRI, r3
 80130a0:	f3bf 8f6f 	isb	sy
 80130a4:	f3bf 8f4f 	dsb	sy
 80130a8:	b662      	cpsie	i
 80130aa:	60fb      	str	r3, [r7, #12]
}
 80130ac:	bf00      	nop
 80130ae:	e7fe      	b.n	80130ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d00c      	beq.n	80130d2 <vPortFree+0x6a>
	__asm volatile
 80130b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130bc:	b672      	cpsid	i
 80130be:	f383 8811 	msr	BASEPRI, r3
 80130c2:	f3bf 8f6f 	isb	sy
 80130c6:	f3bf 8f4f 	dsb	sy
 80130ca:	b662      	cpsie	i
 80130cc:	60bb      	str	r3, [r7, #8]
}
 80130ce:	bf00      	nop
 80130d0:	e7fe      	b.n	80130d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	4b11      	ldr	r3, [pc, #68]	; (801311c <vPortFree+0xb4>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4013      	ands	r3, r2
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d019      	beq.n	8013114 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d115      	bne.n	8013114 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	685a      	ldr	r2, [r3, #4]
 80130ec:	4b0b      	ldr	r3, [pc, #44]	; (801311c <vPortFree+0xb4>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	43db      	mvns	r3, r3
 80130f2:	401a      	ands	r2, r3
 80130f4:	693b      	ldr	r3, [r7, #16]
 80130f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80130f8:	f7fe fb76 	bl	80117e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	685a      	ldr	r2, [r3, #4]
 8013100:	4b07      	ldr	r3, [pc, #28]	; (8013120 <vPortFree+0xb8>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	4413      	add	r3, r2
 8013106:	4a06      	ldr	r2, [pc, #24]	; (8013120 <vPortFree+0xb8>)
 8013108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801310a:	6938      	ldr	r0, [r7, #16]
 801310c:	f000 f86c 	bl	80131e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013110:	f7fe fb78 	bl	8011804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013114:	bf00      	nop
 8013116:	3718      	adds	r7, #24
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	20006594 	.word	0x20006594
 8013120:	2000658c 	.word	0x2000658c

08013124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013124:	b480      	push	{r7}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801312a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801312e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013130:	4b27      	ldr	r3, [pc, #156]	; (80131d0 <prvHeapInit+0xac>)
 8013132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f003 0307 	and.w	r3, r3, #7
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00c      	beq.n	8013158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	3307      	adds	r3, #7
 8013142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f023 0307 	bic.w	r3, r3, #7
 801314a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801314c:	68ba      	ldr	r2, [r7, #8]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	4a1f      	ldr	r2, [pc, #124]	; (80131d0 <prvHeapInit+0xac>)
 8013154:	4413      	add	r3, r2
 8013156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801315c:	4a1d      	ldr	r2, [pc, #116]	; (80131d4 <prvHeapInit+0xb0>)
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013162:	4b1c      	ldr	r3, [pc, #112]	; (80131d4 <prvHeapInit+0xb0>)
 8013164:	2200      	movs	r2, #0
 8013166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	68ba      	ldr	r2, [r7, #8]
 801316c:	4413      	add	r3, r2
 801316e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013170:	2208      	movs	r2, #8
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	1a9b      	subs	r3, r3, r2
 8013176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f023 0307 	bic.w	r3, r3, #7
 801317e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	4a15      	ldr	r2, [pc, #84]	; (80131d8 <prvHeapInit+0xb4>)
 8013184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013186:	4b14      	ldr	r3, [pc, #80]	; (80131d8 <prvHeapInit+0xb4>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2200      	movs	r2, #0
 801318c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801318e:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <prvHeapInit+0xb4>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2200      	movs	r2, #0
 8013194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	68fa      	ldr	r2, [r7, #12]
 801319e:	1ad2      	subs	r2, r2, r3
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80131a4:	4b0c      	ldr	r3, [pc, #48]	; (80131d8 <prvHeapInit+0xb4>)
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	4a0a      	ldr	r2, [pc, #40]	; (80131dc <prvHeapInit+0xb8>)
 80131b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	4a09      	ldr	r2, [pc, #36]	; (80131e0 <prvHeapInit+0xbc>)
 80131ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80131bc:	4b09      	ldr	r3, [pc, #36]	; (80131e4 <prvHeapInit+0xc0>)
 80131be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80131c2:	601a      	str	r2, [r3, #0]
}
 80131c4:	bf00      	nop
 80131c6:	3714      	adds	r7, #20
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr
 80131d0:	20002980 	.word	0x20002980
 80131d4:	20006580 	.word	0x20006580
 80131d8:	20006588 	.word	0x20006588
 80131dc:	20006590 	.word	0x20006590
 80131e0:	2000658c 	.word	0x2000658c
 80131e4:	20006594 	.word	0x20006594

080131e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80131e8:	b480      	push	{r7}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131f0:	4b28      	ldr	r3, [pc, #160]	; (8013294 <prvInsertBlockIntoFreeList+0xac>)
 80131f2:	60fb      	str	r3, [r7, #12]
 80131f4:	e002      	b.n	80131fc <prvInsertBlockIntoFreeList+0x14>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	60fb      	str	r3, [r7, #12]
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	429a      	cmp	r2, r3
 8013204:	d8f7      	bhi.n	80131f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	685b      	ldr	r3, [r3, #4]
 801320e:	68ba      	ldr	r2, [r7, #8]
 8013210:	4413      	add	r3, r2
 8013212:	687a      	ldr	r2, [r7, #4]
 8013214:	429a      	cmp	r2, r3
 8013216:	d108      	bne.n	801322a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	685a      	ldr	r2, [r3, #4]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	685b      	ldr	r3, [r3, #4]
 8013220:	441a      	add	r2, r3
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	441a      	add	r2, r3
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	429a      	cmp	r2, r3
 801323c:	d118      	bne.n	8013270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681a      	ldr	r2, [r3, #0]
 8013242:	4b15      	ldr	r3, [pc, #84]	; (8013298 <prvInsertBlockIntoFreeList+0xb0>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	429a      	cmp	r2, r3
 8013248:	d00d      	beq.n	8013266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685a      	ldr	r2, [r3, #4]
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	441a      	add	r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	601a      	str	r2, [r3, #0]
 8013264:	e008      	b.n	8013278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013266:	4b0c      	ldr	r3, [pc, #48]	; (8013298 <prvInsertBlockIntoFreeList+0xb0>)
 8013268:	681a      	ldr	r2, [r3, #0]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	e003      	b.n	8013278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	681a      	ldr	r2, [r3, #0]
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013278:	68fa      	ldr	r2, [r7, #12]
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	429a      	cmp	r2, r3
 801327e:	d002      	beq.n	8013286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013286:	bf00      	nop
 8013288:	3714      	adds	r7, #20
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr
 8013292:	bf00      	nop
 8013294:	20006580 	.word	0x20006580
 8013298:	20006588 	.word	0x20006588

0801329c <__errno>:
 801329c:	4b01      	ldr	r3, [pc, #4]	; (80132a4 <__errno+0x8>)
 801329e:	6818      	ldr	r0, [r3, #0]
 80132a0:	4770      	bx	lr
 80132a2:	bf00      	nop
 80132a4:	200001c0 	.word	0x200001c0

080132a8 <std>:
 80132a8:	2300      	movs	r3, #0
 80132aa:	b510      	push	{r4, lr}
 80132ac:	4604      	mov	r4, r0
 80132ae:	e9c0 3300 	strd	r3, r3, [r0]
 80132b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132b6:	6083      	str	r3, [r0, #8]
 80132b8:	8181      	strh	r1, [r0, #12]
 80132ba:	6643      	str	r3, [r0, #100]	; 0x64
 80132bc:	81c2      	strh	r2, [r0, #14]
 80132be:	6183      	str	r3, [r0, #24]
 80132c0:	4619      	mov	r1, r3
 80132c2:	2208      	movs	r2, #8
 80132c4:	305c      	adds	r0, #92	; 0x5c
 80132c6:	f000 f91a 	bl	80134fe <memset>
 80132ca:	4b05      	ldr	r3, [pc, #20]	; (80132e0 <std+0x38>)
 80132cc:	6263      	str	r3, [r4, #36]	; 0x24
 80132ce:	4b05      	ldr	r3, [pc, #20]	; (80132e4 <std+0x3c>)
 80132d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80132d2:	4b05      	ldr	r3, [pc, #20]	; (80132e8 <std+0x40>)
 80132d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132d6:	4b05      	ldr	r3, [pc, #20]	; (80132ec <std+0x44>)
 80132d8:	6224      	str	r4, [r4, #32]
 80132da:	6323      	str	r3, [r4, #48]	; 0x30
 80132dc:	bd10      	pop	{r4, pc}
 80132de:	bf00      	nop
 80132e0:	08014409 	.word	0x08014409
 80132e4:	0801442b 	.word	0x0801442b
 80132e8:	08014463 	.word	0x08014463
 80132ec:	08014487 	.word	0x08014487

080132f0 <_cleanup_r>:
 80132f0:	4901      	ldr	r1, [pc, #4]	; (80132f8 <_cleanup_r+0x8>)
 80132f2:	f000 b8af 	b.w	8013454 <_fwalk_reent>
 80132f6:	bf00      	nop
 80132f8:	08015e91 	.word	0x08015e91

080132fc <__sfmoreglue>:
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	2268      	movs	r2, #104	; 0x68
 8013300:	1e4d      	subs	r5, r1, #1
 8013302:	4355      	muls	r5, r2
 8013304:	460e      	mov	r6, r1
 8013306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801330a:	f000 f921 	bl	8013550 <_malloc_r>
 801330e:	4604      	mov	r4, r0
 8013310:	b140      	cbz	r0, 8013324 <__sfmoreglue+0x28>
 8013312:	2100      	movs	r1, #0
 8013314:	e9c0 1600 	strd	r1, r6, [r0]
 8013318:	300c      	adds	r0, #12
 801331a:	60a0      	str	r0, [r4, #8]
 801331c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013320:	f000 f8ed 	bl	80134fe <memset>
 8013324:	4620      	mov	r0, r4
 8013326:	bd70      	pop	{r4, r5, r6, pc}

08013328 <__sfp_lock_acquire>:
 8013328:	4801      	ldr	r0, [pc, #4]	; (8013330 <__sfp_lock_acquire+0x8>)
 801332a:	f000 b8d8 	b.w	80134de <__retarget_lock_acquire_recursive>
 801332e:	bf00      	nop
 8013330:	20006599 	.word	0x20006599

08013334 <__sfp_lock_release>:
 8013334:	4801      	ldr	r0, [pc, #4]	; (801333c <__sfp_lock_release+0x8>)
 8013336:	f000 b8d3 	b.w	80134e0 <__retarget_lock_release_recursive>
 801333a:	bf00      	nop
 801333c:	20006599 	.word	0x20006599

08013340 <__sinit_lock_acquire>:
 8013340:	4801      	ldr	r0, [pc, #4]	; (8013348 <__sinit_lock_acquire+0x8>)
 8013342:	f000 b8cc 	b.w	80134de <__retarget_lock_acquire_recursive>
 8013346:	bf00      	nop
 8013348:	2000659a 	.word	0x2000659a

0801334c <__sinit_lock_release>:
 801334c:	4801      	ldr	r0, [pc, #4]	; (8013354 <__sinit_lock_release+0x8>)
 801334e:	f000 b8c7 	b.w	80134e0 <__retarget_lock_release_recursive>
 8013352:	bf00      	nop
 8013354:	2000659a 	.word	0x2000659a

08013358 <__sinit>:
 8013358:	b510      	push	{r4, lr}
 801335a:	4604      	mov	r4, r0
 801335c:	f7ff fff0 	bl	8013340 <__sinit_lock_acquire>
 8013360:	69a3      	ldr	r3, [r4, #24]
 8013362:	b11b      	cbz	r3, 801336c <__sinit+0x14>
 8013364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013368:	f7ff bff0 	b.w	801334c <__sinit_lock_release>
 801336c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013370:	6523      	str	r3, [r4, #80]	; 0x50
 8013372:	4b13      	ldr	r3, [pc, #76]	; (80133c0 <__sinit+0x68>)
 8013374:	4a13      	ldr	r2, [pc, #76]	; (80133c4 <__sinit+0x6c>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	62a2      	str	r2, [r4, #40]	; 0x28
 801337a:	42a3      	cmp	r3, r4
 801337c:	bf04      	itt	eq
 801337e:	2301      	moveq	r3, #1
 8013380:	61a3      	streq	r3, [r4, #24]
 8013382:	4620      	mov	r0, r4
 8013384:	f000 f820 	bl	80133c8 <__sfp>
 8013388:	6060      	str	r0, [r4, #4]
 801338a:	4620      	mov	r0, r4
 801338c:	f000 f81c 	bl	80133c8 <__sfp>
 8013390:	60a0      	str	r0, [r4, #8]
 8013392:	4620      	mov	r0, r4
 8013394:	f000 f818 	bl	80133c8 <__sfp>
 8013398:	2200      	movs	r2, #0
 801339a:	60e0      	str	r0, [r4, #12]
 801339c:	2104      	movs	r1, #4
 801339e:	6860      	ldr	r0, [r4, #4]
 80133a0:	f7ff ff82 	bl	80132a8 <std>
 80133a4:	68a0      	ldr	r0, [r4, #8]
 80133a6:	2201      	movs	r2, #1
 80133a8:	2109      	movs	r1, #9
 80133aa:	f7ff ff7d 	bl	80132a8 <std>
 80133ae:	68e0      	ldr	r0, [r4, #12]
 80133b0:	2202      	movs	r2, #2
 80133b2:	2112      	movs	r1, #18
 80133b4:	f7ff ff78 	bl	80132a8 <std>
 80133b8:	2301      	movs	r3, #1
 80133ba:	61a3      	str	r3, [r4, #24]
 80133bc:	e7d2      	b.n	8013364 <__sinit+0xc>
 80133be:	bf00      	nop
 80133c0:	0801838c 	.word	0x0801838c
 80133c4:	080132f1 	.word	0x080132f1

080133c8 <__sfp>:
 80133c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ca:	4607      	mov	r7, r0
 80133cc:	f7ff ffac 	bl	8013328 <__sfp_lock_acquire>
 80133d0:	4b1e      	ldr	r3, [pc, #120]	; (801344c <__sfp+0x84>)
 80133d2:	681e      	ldr	r6, [r3, #0]
 80133d4:	69b3      	ldr	r3, [r6, #24]
 80133d6:	b913      	cbnz	r3, 80133de <__sfp+0x16>
 80133d8:	4630      	mov	r0, r6
 80133da:	f7ff ffbd 	bl	8013358 <__sinit>
 80133de:	3648      	adds	r6, #72	; 0x48
 80133e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133e4:	3b01      	subs	r3, #1
 80133e6:	d503      	bpl.n	80133f0 <__sfp+0x28>
 80133e8:	6833      	ldr	r3, [r6, #0]
 80133ea:	b30b      	cbz	r3, 8013430 <__sfp+0x68>
 80133ec:	6836      	ldr	r6, [r6, #0]
 80133ee:	e7f7      	b.n	80133e0 <__sfp+0x18>
 80133f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133f4:	b9d5      	cbnz	r5, 801342c <__sfp+0x64>
 80133f6:	4b16      	ldr	r3, [pc, #88]	; (8013450 <__sfp+0x88>)
 80133f8:	60e3      	str	r3, [r4, #12]
 80133fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133fe:	6665      	str	r5, [r4, #100]	; 0x64
 8013400:	f000 f86c 	bl	80134dc <__retarget_lock_init_recursive>
 8013404:	f7ff ff96 	bl	8013334 <__sfp_lock_release>
 8013408:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801340c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013410:	6025      	str	r5, [r4, #0]
 8013412:	61a5      	str	r5, [r4, #24]
 8013414:	2208      	movs	r2, #8
 8013416:	4629      	mov	r1, r5
 8013418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801341c:	f000 f86f 	bl	80134fe <memset>
 8013420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013428:	4620      	mov	r0, r4
 801342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801342c:	3468      	adds	r4, #104	; 0x68
 801342e:	e7d9      	b.n	80133e4 <__sfp+0x1c>
 8013430:	2104      	movs	r1, #4
 8013432:	4638      	mov	r0, r7
 8013434:	f7ff ff62 	bl	80132fc <__sfmoreglue>
 8013438:	4604      	mov	r4, r0
 801343a:	6030      	str	r0, [r6, #0]
 801343c:	2800      	cmp	r0, #0
 801343e:	d1d5      	bne.n	80133ec <__sfp+0x24>
 8013440:	f7ff ff78 	bl	8013334 <__sfp_lock_release>
 8013444:	230c      	movs	r3, #12
 8013446:	603b      	str	r3, [r7, #0]
 8013448:	e7ee      	b.n	8013428 <__sfp+0x60>
 801344a:	bf00      	nop
 801344c:	0801838c 	.word	0x0801838c
 8013450:	ffff0001 	.word	0xffff0001

08013454 <_fwalk_reent>:
 8013454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013458:	4606      	mov	r6, r0
 801345a:	4688      	mov	r8, r1
 801345c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013460:	2700      	movs	r7, #0
 8013462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013466:	f1b9 0901 	subs.w	r9, r9, #1
 801346a:	d505      	bpl.n	8013478 <_fwalk_reent+0x24>
 801346c:	6824      	ldr	r4, [r4, #0]
 801346e:	2c00      	cmp	r4, #0
 8013470:	d1f7      	bne.n	8013462 <_fwalk_reent+0xe>
 8013472:	4638      	mov	r0, r7
 8013474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013478:	89ab      	ldrh	r3, [r5, #12]
 801347a:	2b01      	cmp	r3, #1
 801347c:	d907      	bls.n	801348e <_fwalk_reent+0x3a>
 801347e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013482:	3301      	adds	r3, #1
 8013484:	d003      	beq.n	801348e <_fwalk_reent+0x3a>
 8013486:	4629      	mov	r1, r5
 8013488:	4630      	mov	r0, r6
 801348a:	47c0      	blx	r8
 801348c:	4307      	orrs	r7, r0
 801348e:	3568      	adds	r5, #104	; 0x68
 8013490:	e7e9      	b.n	8013466 <_fwalk_reent+0x12>
	...

08013494 <__libc_init_array>:
 8013494:	b570      	push	{r4, r5, r6, lr}
 8013496:	4d0d      	ldr	r5, [pc, #52]	; (80134cc <__libc_init_array+0x38>)
 8013498:	4c0d      	ldr	r4, [pc, #52]	; (80134d0 <__libc_init_array+0x3c>)
 801349a:	1b64      	subs	r4, r4, r5
 801349c:	10a4      	asrs	r4, r4, #2
 801349e:	2600      	movs	r6, #0
 80134a0:	42a6      	cmp	r6, r4
 80134a2:	d109      	bne.n	80134b8 <__libc_init_array+0x24>
 80134a4:	4d0b      	ldr	r5, [pc, #44]	; (80134d4 <__libc_init_array+0x40>)
 80134a6:	4c0c      	ldr	r4, [pc, #48]	; (80134d8 <__libc_init_array+0x44>)
 80134a8:	f004 fd24 	bl	8017ef4 <_init>
 80134ac:	1b64      	subs	r4, r4, r5
 80134ae:	10a4      	asrs	r4, r4, #2
 80134b0:	2600      	movs	r6, #0
 80134b2:	42a6      	cmp	r6, r4
 80134b4:	d105      	bne.n	80134c2 <__libc_init_array+0x2e>
 80134b6:	bd70      	pop	{r4, r5, r6, pc}
 80134b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80134bc:	4798      	blx	r3
 80134be:	3601      	adds	r6, #1
 80134c0:	e7ee      	b.n	80134a0 <__libc_init_array+0xc>
 80134c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80134c6:	4798      	blx	r3
 80134c8:	3601      	adds	r6, #1
 80134ca:	e7f2      	b.n	80134b2 <__libc_init_array+0x1e>
 80134cc:	08018a58 	.word	0x08018a58
 80134d0:	08018a58 	.word	0x08018a58
 80134d4:	08018a58 	.word	0x08018a58
 80134d8:	08018a5c 	.word	0x08018a5c

080134dc <__retarget_lock_init_recursive>:
 80134dc:	4770      	bx	lr

080134de <__retarget_lock_acquire_recursive>:
 80134de:	4770      	bx	lr

080134e0 <__retarget_lock_release_recursive>:
 80134e0:	4770      	bx	lr

080134e2 <memcpy>:
 80134e2:	440a      	add	r2, r1
 80134e4:	4291      	cmp	r1, r2
 80134e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80134ea:	d100      	bne.n	80134ee <memcpy+0xc>
 80134ec:	4770      	bx	lr
 80134ee:	b510      	push	{r4, lr}
 80134f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134f8:	4291      	cmp	r1, r2
 80134fa:	d1f9      	bne.n	80134f0 <memcpy+0xe>
 80134fc:	bd10      	pop	{r4, pc}

080134fe <memset>:
 80134fe:	4402      	add	r2, r0
 8013500:	4603      	mov	r3, r0
 8013502:	4293      	cmp	r3, r2
 8013504:	d100      	bne.n	8013508 <memset+0xa>
 8013506:	4770      	bx	lr
 8013508:	f803 1b01 	strb.w	r1, [r3], #1
 801350c:	e7f9      	b.n	8013502 <memset+0x4>
	...

08013510 <sbrk_aligned>:
 8013510:	b570      	push	{r4, r5, r6, lr}
 8013512:	4e0e      	ldr	r6, [pc, #56]	; (801354c <sbrk_aligned+0x3c>)
 8013514:	460c      	mov	r4, r1
 8013516:	6831      	ldr	r1, [r6, #0]
 8013518:	4605      	mov	r5, r0
 801351a:	b911      	cbnz	r1, 8013522 <sbrk_aligned+0x12>
 801351c:	f000 ff3e 	bl	801439c <_sbrk_r>
 8013520:	6030      	str	r0, [r6, #0]
 8013522:	4621      	mov	r1, r4
 8013524:	4628      	mov	r0, r5
 8013526:	f000 ff39 	bl	801439c <_sbrk_r>
 801352a:	1c43      	adds	r3, r0, #1
 801352c:	d00a      	beq.n	8013544 <sbrk_aligned+0x34>
 801352e:	1cc4      	adds	r4, r0, #3
 8013530:	f024 0403 	bic.w	r4, r4, #3
 8013534:	42a0      	cmp	r0, r4
 8013536:	d007      	beq.n	8013548 <sbrk_aligned+0x38>
 8013538:	1a21      	subs	r1, r4, r0
 801353a:	4628      	mov	r0, r5
 801353c:	f000 ff2e 	bl	801439c <_sbrk_r>
 8013540:	3001      	adds	r0, #1
 8013542:	d101      	bne.n	8013548 <sbrk_aligned+0x38>
 8013544:	f04f 34ff 	mov.w	r4, #4294967295
 8013548:	4620      	mov	r0, r4
 801354a:	bd70      	pop	{r4, r5, r6, pc}
 801354c:	200065a0 	.word	0x200065a0

08013550 <_malloc_r>:
 8013550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013554:	1ccd      	adds	r5, r1, #3
 8013556:	f025 0503 	bic.w	r5, r5, #3
 801355a:	3508      	adds	r5, #8
 801355c:	2d0c      	cmp	r5, #12
 801355e:	bf38      	it	cc
 8013560:	250c      	movcc	r5, #12
 8013562:	2d00      	cmp	r5, #0
 8013564:	4607      	mov	r7, r0
 8013566:	db01      	blt.n	801356c <_malloc_r+0x1c>
 8013568:	42a9      	cmp	r1, r5
 801356a:	d905      	bls.n	8013578 <_malloc_r+0x28>
 801356c:	230c      	movs	r3, #12
 801356e:	603b      	str	r3, [r7, #0]
 8013570:	2600      	movs	r6, #0
 8013572:	4630      	mov	r0, r6
 8013574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013578:	4e2e      	ldr	r6, [pc, #184]	; (8013634 <_malloc_r+0xe4>)
 801357a:	f003 f865 	bl	8016648 <__malloc_lock>
 801357e:	6833      	ldr	r3, [r6, #0]
 8013580:	461c      	mov	r4, r3
 8013582:	bb34      	cbnz	r4, 80135d2 <_malloc_r+0x82>
 8013584:	4629      	mov	r1, r5
 8013586:	4638      	mov	r0, r7
 8013588:	f7ff ffc2 	bl	8013510 <sbrk_aligned>
 801358c:	1c43      	adds	r3, r0, #1
 801358e:	4604      	mov	r4, r0
 8013590:	d14d      	bne.n	801362e <_malloc_r+0xde>
 8013592:	6834      	ldr	r4, [r6, #0]
 8013594:	4626      	mov	r6, r4
 8013596:	2e00      	cmp	r6, #0
 8013598:	d140      	bne.n	801361c <_malloc_r+0xcc>
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	4631      	mov	r1, r6
 801359e:	4638      	mov	r0, r7
 80135a0:	eb04 0803 	add.w	r8, r4, r3
 80135a4:	f000 fefa 	bl	801439c <_sbrk_r>
 80135a8:	4580      	cmp	r8, r0
 80135aa:	d13a      	bne.n	8013622 <_malloc_r+0xd2>
 80135ac:	6821      	ldr	r1, [r4, #0]
 80135ae:	3503      	adds	r5, #3
 80135b0:	1a6d      	subs	r5, r5, r1
 80135b2:	f025 0503 	bic.w	r5, r5, #3
 80135b6:	3508      	adds	r5, #8
 80135b8:	2d0c      	cmp	r5, #12
 80135ba:	bf38      	it	cc
 80135bc:	250c      	movcc	r5, #12
 80135be:	4629      	mov	r1, r5
 80135c0:	4638      	mov	r0, r7
 80135c2:	f7ff ffa5 	bl	8013510 <sbrk_aligned>
 80135c6:	3001      	adds	r0, #1
 80135c8:	d02b      	beq.n	8013622 <_malloc_r+0xd2>
 80135ca:	6823      	ldr	r3, [r4, #0]
 80135cc:	442b      	add	r3, r5
 80135ce:	6023      	str	r3, [r4, #0]
 80135d0:	e00e      	b.n	80135f0 <_malloc_r+0xa0>
 80135d2:	6822      	ldr	r2, [r4, #0]
 80135d4:	1b52      	subs	r2, r2, r5
 80135d6:	d41e      	bmi.n	8013616 <_malloc_r+0xc6>
 80135d8:	2a0b      	cmp	r2, #11
 80135da:	d916      	bls.n	801360a <_malloc_r+0xba>
 80135dc:	1961      	adds	r1, r4, r5
 80135de:	42a3      	cmp	r3, r4
 80135e0:	6025      	str	r5, [r4, #0]
 80135e2:	bf18      	it	ne
 80135e4:	6059      	strne	r1, [r3, #4]
 80135e6:	6863      	ldr	r3, [r4, #4]
 80135e8:	bf08      	it	eq
 80135ea:	6031      	streq	r1, [r6, #0]
 80135ec:	5162      	str	r2, [r4, r5]
 80135ee:	604b      	str	r3, [r1, #4]
 80135f0:	4638      	mov	r0, r7
 80135f2:	f104 060b 	add.w	r6, r4, #11
 80135f6:	f003 f82d 	bl	8016654 <__malloc_unlock>
 80135fa:	f026 0607 	bic.w	r6, r6, #7
 80135fe:	1d23      	adds	r3, r4, #4
 8013600:	1af2      	subs	r2, r6, r3
 8013602:	d0b6      	beq.n	8013572 <_malloc_r+0x22>
 8013604:	1b9b      	subs	r3, r3, r6
 8013606:	50a3      	str	r3, [r4, r2]
 8013608:	e7b3      	b.n	8013572 <_malloc_r+0x22>
 801360a:	6862      	ldr	r2, [r4, #4]
 801360c:	42a3      	cmp	r3, r4
 801360e:	bf0c      	ite	eq
 8013610:	6032      	streq	r2, [r6, #0]
 8013612:	605a      	strne	r2, [r3, #4]
 8013614:	e7ec      	b.n	80135f0 <_malloc_r+0xa0>
 8013616:	4623      	mov	r3, r4
 8013618:	6864      	ldr	r4, [r4, #4]
 801361a:	e7b2      	b.n	8013582 <_malloc_r+0x32>
 801361c:	4634      	mov	r4, r6
 801361e:	6876      	ldr	r6, [r6, #4]
 8013620:	e7b9      	b.n	8013596 <_malloc_r+0x46>
 8013622:	230c      	movs	r3, #12
 8013624:	603b      	str	r3, [r7, #0]
 8013626:	4638      	mov	r0, r7
 8013628:	f003 f814 	bl	8016654 <__malloc_unlock>
 801362c:	e7a1      	b.n	8013572 <_malloc_r+0x22>
 801362e:	6025      	str	r5, [r4, #0]
 8013630:	e7de      	b.n	80135f0 <_malloc_r+0xa0>
 8013632:	bf00      	nop
 8013634:	2000659c 	.word	0x2000659c

08013638 <__cvt>:
 8013638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801363a:	ed2d 8b02 	vpush	{d8}
 801363e:	eeb0 8b40 	vmov.f64	d8, d0
 8013642:	b085      	sub	sp, #20
 8013644:	4617      	mov	r7, r2
 8013646:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013648:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801364a:	ee18 2a90 	vmov	r2, s17
 801364e:	f025 0520 	bic.w	r5, r5, #32
 8013652:	2a00      	cmp	r2, #0
 8013654:	bfb6      	itet	lt
 8013656:	222d      	movlt	r2, #45	; 0x2d
 8013658:	2200      	movge	r2, #0
 801365a:	eeb1 8b40 	vneglt.f64	d8, d0
 801365e:	2d46      	cmp	r5, #70	; 0x46
 8013660:	460c      	mov	r4, r1
 8013662:	701a      	strb	r2, [r3, #0]
 8013664:	d004      	beq.n	8013670 <__cvt+0x38>
 8013666:	2d45      	cmp	r5, #69	; 0x45
 8013668:	d100      	bne.n	801366c <__cvt+0x34>
 801366a:	3401      	adds	r4, #1
 801366c:	2102      	movs	r1, #2
 801366e:	e000      	b.n	8013672 <__cvt+0x3a>
 8013670:	2103      	movs	r1, #3
 8013672:	ab03      	add	r3, sp, #12
 8013674:	9301      	str	r3, [sp, #4]
 8013676:	ab02      	add	r3, sp, #8
 8013678:	9300      	str	r3, [sp, #0]
 801367a:	4622      	mov	r2, r4
 801367c:	4633      	mov	r3, r6
 801367e:	eeb0 0b48 	vmov.f64	d0, d8
 8013682:	f001 fe11 	bl	80152a8 <_dtoa_r>
 8013686:	2d47      	cmp	r5, #71	; 0x47
 8013688:	d101      	bne.n	801368e <__cvt+0x56>
 801368a:	07fb      	lsls	r3, r7, #31
 801368c:	d51a      	bpl.n	80136c4 <__cvt+0x8c>
 801368e:	2d46      	cmp	r5, #70	; 0x46
 8013690:	eb00 0204 	add.w	r2, r0, r4
 8013694:	d10c      	bne.n	80136b0 <__cvt+0x78>
 8013696:	7803      	ldrb	r3, [r0, #0]
 8013698:	2b30      	cmp	r3, #48	; 0x30
 801369a:	d107      	bne.n	80136ac <__cvt+0x74>
 801369c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80136a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136a4:	bf1c      	itt	ne
 80136a6:	f1c4 0401 	rsbne	r4, r4, #1
 80136aa:	6034      	strne	r4, [r6, #0]
 80136ac:	6833      	ldr	r3, [r6, #0]
 80136ae:	441a      	add	r2, r3
 80136b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80136b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b8:	bf08      	it	eq
 80136ba:	9203      	streq	r2, [sp, #12]
 80136bc:	2130      	movs	r1, #48	; 0x30
 80136be:	9b03      	ldr	r3, [sp, #12]
 80136c0:	4293      	cmp	r3, r2
 80136c2:	d307      	bcc.n	80136d4 <__cvt+0x9c>
 80136c4:	9b03      	ldr	r3, [sp, #12]
 80136c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80136c8:	1a1b      	subs	r3, r3, r0
 80136ca:	6013      	str	r3, [r2, #0]
 80136cc:	b005      	add	sp, #20
 80136ce:	ecbd 8b02 	vpop	{d8}
 80136d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d4:	1c5c      	adds	r4, r3, #1
 80136d6:	9403      	str	r4, [sp, #12]
 80136d8:	7019      	strb	r1, [r3, #0]
 80136da:	e7f0      	b.n	80136be <__cvt+0x86>

080136dc <__exponent>:
 80136dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136de:	4603      	mov	r3, r0
 80136e0:	2900      	cmp	r1, #0
 80136e2:	bfb8      	it	lt
 80136e4:	4249      	neglt	r1, r1
 80136e6:	f803 2b02 	strb.w	r2, [r3], #2
 80136ea:	bfb4      	ite	lt
 80136ec:	222d      	movlt	r2, #45	; 0x2d
 80136ee:	222b      	movge	r2, #43	; 0x2b
 80136f0:	2909      	cmp	r1, #9
 80136f2:	7042      	strb	r2, [r0, #1]
 80136f4:	dd2a      	ble.n	801374c <__exponent+0x70>
 80136f6:	f10d 0407 	add.w	r4, sp, #7
 80136fa:	46a4      	mov	ip, r4
 80136fc:	270a      	movs	r7, #10
 80136fe:	46a6      	mov	lr, r4
 8013700:	460a      	mov	r2, r1
 8013702:	fb91 f6f7 	sdiv	r6, r1, r7
 8013706:	fb07 1516 	mls	r5, r7, r6, r1
 801370a:	3530      	adds	r5, #48	; 0x30
 801370c:	2a63      	cmp	r2, #99	; 0x63
 801370e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013716:	4631      	mov	r1, r6
 8013718:	dcf1      	bgt.n	80136fe <__exponent+0x22>
 801371a:	3130      	adds	r1, #48	; 0x30
 801371c:	f1ae 0502 	sub.w	r5, lr, #2
 8013720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013724:	1c44      	adds	r4, r0, #1
 8013726:	4629      	mov	r1, r5
 8013728:	4561      	cmp	r1, ip
 801372a:	d30a      	bcc.n	8013742 <__exponent+0x66>
 801372c:	f10d 0209 	add.w	r2, sp, #9
 8013730:	eba2 020e 	sub.w	r2, r2, lr
 8013734:	4565      	cmp	r5, ip
 8013736:	bf88      	it	hi
 8013738:	2200      	movhi	r2, #0
 801373a:	4413      	add	r3, r2
 801373c:	1a18      	subs	r0, r3, r0
 801373e:	b003      	add	sp, #12
 8013740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013746:	f804 2f01 	strb.w	r2, [r4, #1]!
 801374a:	e7ed      	b.n	8013728 <__exponent+0x4c>
 801374c:	2330      	movs	r3, #48	; 0x30
 801374e:	3130      	adds	r1, #48	; 0x30
 8013750:	7083      	strb	r3, [r0, #2]
 8013752:	70c1      	strb	r1, [r0, #3]
 8013754:	1d03      	adds	r3, r0, #4
 8013756:	e7f1      	b.n	801373c <__exponent+0x60>

08013758 <_printf_float>:
 8013758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801375c:	b08b      	sub	sp, #44	; 0x2c
 801375e:	460c      	mov	r4, r1
 8013760:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013764:	4616      	mov	r6, r2
 8013766:	461f      	mov	r7, r3
 8013768:	4605      	mov	r5, r0
 801376a:	f002 ff3d 	bl	80165e8 <_localeconv_r>
 801376e:	f8d0 b000 	ldr.w	fp, [r0]
 8013772:	4658      	mov	r0, fp
 8013774:	f7ec fd64 	bl	8000240 <strlen>
 8013778:	2300      	movs	r3, #0
 801377a:	9308      	str	r3, [sp, #32]
 801377c:	f8d8 3000 	ldr.w	r3, [r8]
 8013780:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013784:	6822      	ldr	r2, [r4, #0]
 8013786:	3307      	adds	r3, #7
 8013788:	f023 0307 	bic.w	r3, r3, #7
 801378c:	f103 0108 	add.w	r1, r3, #8
 8013790:	f8c8 1000 	str.w	r1, [r8]
 8013794:	4682      	mov	sl, r0
 8013796:	e9d3 0100 	ldrd	r0, r1, [r3]
 801379a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801379e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013a00 <_printf_float+0x2a8>
 80137a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80137a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80137aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80137ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b2:	dd24      	ble.n	80137fe <_printf_float+0xa6>
 80137b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80137b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137bc:	d502      	bpl.n	80137c4 <_printf_float+0x6c>
 80137be:	232d      	movs	r3, #45	; 0x2d
 80137c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80137c4:	4b90      	ldr	r3, [pc, #576]	; (8013a08 <_printf_float+0x2b0>)
 80137c6:	4891      	ldr	r0, [pc, #580]	; (8013a0c <_printf_float+0x2b4>)
 80137c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80137cc:	bf94      	ite	ls
 80137ce:	4698      	movls	r8, r3
 80137d0:	4680      	movhi	r8, r0
 80137d2:	2303      	movs	r3, #3
 80137d4:	6123      	str	r3, [r4, #16]
 80137d6:	f022 0204 	bic.w	r2, r2, #4
 80137da:	2300      	movs	r3, #0
 80137dc:	6022      	str	r2, [r4, #0]
 80137de:	9304      	str	r3, [sp, #16]
 80137e0:	9700      	str	r7, [sp, #0]
 80137e2:	4633      	mov	r3, r6
 80137e4:	aa09      	add	r2, sp, #36	; 0x24
 80137e6:	4621      	mov	r1, r4
 80137e8:	4628      	mov	r0, r5
 80137ea:	f000 f9d3 	bl	8013b94 <_printf_common>
 80137ee:	3001      	adds	r0, #1
 80137f0:	f040 808a 	bne.w	8013908 <_printf_float+0x1b0>
 80137f4:	f04f 30ff 	mov.w	r0, #4294967295
 80137f8:	b00b      	add	sp, #44	; 0x2c
 80137fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8013802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013806:	d709      	bvc.n	801381c <_printf_float+0xc4>
 8013808:	ee10 3a90 	vmov	r3, s1
 801380c:	2b00      	cmp	r3, #0
 801380e:	bfbc      	itt	lt
 8013810:	232d      	movlt	r3, #45	; 0x2d
 8013812:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013816:	487e      	ldr	r0, [pc, #504]	; (8013a10 <_printf_float+0x2b8>)
 8013818:	4b7e      	ldr	r3, [pc, #504]	; (8013a14 <_printf_float+0x2bc>)
 801381a:	e7d5      	b.n	80137c8 <_printf_float+0x70>
 801381c:	6863      	ldr	r3, [r4, #4]
 801381e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013822:	9104      	str	r1, [sp, #16]
 8013824:	1c59      	adds	r1, r3, #1
 8013826:	d13c      	bne.n	80138a2 <_printf_float+0x14a>
 8013828:	2306      	movs	r3, #6
 801382a:	6063      	str	r3, [r4, #4]
 801382c:	2300      	movs	r3, #0
 801382e:	9303      	str	r3, [sp, #12]
 8013830:	ab08      	add	r3, sp, #32
 8013832:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013836:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801383a:	ab07      	add	r3, sp, #28
 801383c:	6861      	ldr	r1, [r4, #4]
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	6022      	str	r2, [r4, #0]
 8013842:	f10d 031b 	add.w	r3, sp, #27
 8013846:	4628      	mov	r0, r5
 8013848:	f7ff fef6 	bl	8013638 <__cvt>
 801384c:	9b04      	ldr	r3, [sp, #16]
 801384e:	9907      	ldr	r1, [sp, #28]
 8013850:	2b47      	cmp	r3, #71	; 0x47
 8013852:	4680      	mov	r8, r0
 8013854:	d108      	bne.n	8013868 <_printf_float+0x110>
 8013856:	1cc8      	adds	r0, r1, #3
 8013858:	db02      	blt.n	8013860 <_printf_float+0x108>
 801385a:	6863      	ldr	r3, [r4, #4]
 801385c:	4299      	cmp	r1, r3
 801385e:	dd41      	ble.n	80138e4 <_printf_float+0x18c>
 8013860:	f1a9 0902 	sub.w	r9, r9, #2
 8013864:	fa5f f989 	uxtb.w	r9, r9
 8013868:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801386c:	d820      	bhi.n	80138b0 <_printf_float+0x158>
 801386e:	3901      	subs	r1, #1
 8013870:	464a      	mov	r2, r9
 8013872:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013876:	9107      	str	r1, [sp, #28]
 8013878:	f7ff ff30 	bl	80136dc <__exponent>
 801387c:	9a08      	ldr	r2, [sp, #32]
 801387e:	9004      	str	r0, [sp, #16]
 8013880:	1813      	adds	r3, r2, r0
 8013882:	2a01      	cmp	r2, #1
 8013884:	6123      	str	r3, [r4, #16]
 8013886:	dc02      	bgt.n	801388e <_printf_float+0x136>
 8013888:	6822      	ldr	r2, [r4, #0]
 801388a:	07d2      	lsls	r2, r2, #31
 801388c:	d501      	bpl.n	8013892 <_printf_float+0x13a>
 801388e:	3301      	adds	r3, #1
 8013890:	6123      	str	r3, [r4, #16]
 8013892:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d0a2      	beq.n	80137e0 <_printf_float+0x88>
 801389a:	232d      	movs	r3, #45	; 0x2d
 801389c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138a0:	e79e      	b.n	80137e0 <_printf_float+0x88>
 80138a2:	9904      	ldr	r1, [sp, #16]
 80138a4:	2947      	cmp	r1, #71	; 0x47
 80138a6:	d1c1      	bne.n	801382c <_printf_float+0xd4>
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d1bf      	bne.n	801382c <_printf_float+0xd4>
 80138ac:	2301      	movs	r3, #1
 80138ae:	e7bc      	b.n	801382a <_printf_float+0xd2>
 80138b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80138b4:	d118      	bne.n	80138e8 <_printf_float+0x190>
 80138b6:	2900      	cmp	r1, #0
 80138b8:	6863      	ldr	r3, [r4, #4]
 80138ba:	dd0b      	ble.n	80138d4 <_printf_float+0x17c>
 80138bc:	6121      	str	r1, [r4, #16]
 80138be:	b913      	cbnz	r3, 80138c6 <_printf_float+0x16e>
 80138c0:	6822      	ldr	r2, [r4, #0]
 80138c2:	07d0      	lsls	r0, r2, #31
 80138c4:	d502      	bpl.n	80138cc <_printf_float+0x174>
 80138c6:	3301      	adds	r3, #1
 80138c8:	440b      	add	r3, r1
 80138ca:	6123      	str	r3, [r4, #16]
 80138cc:	2300      	movs	r3, #0
 80138ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80138d0:	9304      	str	r3, [sp, #16]
 80138d2:	e7de      	b.n	8013892 <_printf_float+0x13a>
 80138d4:	b913      	cbnz	r3, 80138dc <_printf_float+0x184>
 80138d6:	6822      	ldr	r2, [r4, #0]
 80138d8:	07d2      	lsls	r2, r2, #31
 80138da:	d501      	bpl.n	80138e0 <_printf_float+0x188>
 80138dc:	3302      	adds	r3, #2
 80138de:	e7f4      	b.n	80138ca <_printf_float+0x172>
 80138e0:	2301      	movs	r3, #1
 80138e2:	e7f2      	b.n	80138ca <_printf_float+0x172>
 80138e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80138e8:	9b08      	ldr	r3, [sp, #32]
 80138ea:	4299      	cmp	r1, r3
 80138ec:	db05      	blt.n	80138fa <_printf_float+0x1a2>
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	6121      	str	r1, [r4, #16]
 80138f2:	07d8      	lsls	r0, r3, #31
 80138f4:	d5ea      	bpl.n	80138cc <_printf_float+0x174>
 80138f6:	1c4b      	adds	r3, r1, #1
 80138f8:	e7e7      	b.n	80138ca <_printf_float+0x172>
 80138fa:	2900      	cmp	r1, #0
 80138fc:	bfd4      	ite	le
 80138fe:	f1c1 0202 	rsble	r2, r1, #2
 8013902:	2201      	movgt	r2, #1
 8013904:	4413      	add	r3, r2
 8013906:	e7e0      	b.n	80138ca <_printf_float+0x172>
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	055a      	lsls	r2, r3, #21
 801390c:	d407      	bmi.n	801391e <_printf_float+0x1c6>
 801390e:	6923      	ldr	r3, [r4, #16]
 8013910:	4642      	mov	r2, r8
 8013912:	4631      	mov	r1, r6
 8013914:	4628      	mov	r0, r5
 8013916:	47b8      	blx	r7
 8013918:	3001      	adds	r0, #1
 801391a:	d12a      	bne.n	8013972 <_printf_float+0x21a>
 801391c:	e76a      	b.n	80137f4 <_printf_float+0x9c>
 801391e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013922:	f240 80e2 	bls.w	8013aea <_printf_float+0x392>
 8013926:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801392a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013932:	d133      	bne.n	801399c <_printf_float+0x244>
 8013934:	4a38      	ldr	r2, [pc, #224]	; (8013a18 <_printf_float+0x2c0>)
 8013936:	2301      	movs	r3, #1
 8013938:	4631      	mov	r1, r6
 801393a:	4628      	mov	r0, r5
 801393c:	47b8      	blx	r7
 801393e:	3001      	adds	r0, #1
 8013940:	f43f af58 	beq.w	80137f4 <_printf_float+0x9c>
 8013944:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013948:	429a      	cmp	r2, r3
 801394a:	db02      	blt.n	8013952 <_printf_float+0x1fa>
 801394c:	6823      	ldr	r3, [r4, #0]
 801394e:	07d8      	lsls	r0, r3, #31
 8013950:	d50f      	bpl.n	8013972 <_printf_float+0x21a>
 8013952:	4653      	mov	r3, sl
 8013954:	465a      	mov	r2, fp
 8013956:	4631      	mov	r1, r6
 8013958:	4628      	mov	r0, r5
 801395a:	47b8      	blx	r7
 801395c:	3001      	adds	r0, #1
 801395e:	f43f af49 	beq.w	80137f4 <_printf_float+0x9c>
 8013962:	f04f 0800 	mov.w	r8, #0
 8013966:	f104 091a 	add.w	r9, r4, #26
 801396a:	9b08      	ldr	r3, [sp, #32]
 801396c:	3b01      	subs	r3, #1
 801396e:	4543      	cmp	r3, r8
 8013970:	dc09      	bgt.n	8013986 <_printf_float+0x22e>
 8013972:	6823      	ldr	r3, [r4, #0]
 8013974:	079b      	lsls	r3, r3, #30
 8013976:	f100 8108 	bmi.w	8013b8a <_printf_float+0x432>
 801397a:	68e0      	ldr	r0, [r4, #12]
 801397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801397e:	4298      	cmp	r0, r3
 8013980:	bfb8      	it	lt
 8013982:	4618      	movlt	r0, r3
 8013984:	e738      	b.n	80137f8 <_printf_float+0xa0>
 8013986:	2301      	movs	r3, #1
 8013988:	464a      	mov	r2, r9
 801398a:	4631      	mov	r1, r6
 801398c:	4628      	mov	r0, r5
 801398e:	47b8      	blx	r7
 8013990:	3001      	adds	r0, #1
 8013992:	f43f af2f 	beq.w	80137f4 <_printf_float+0x9c>
 8013996:	f108 0801 	add.w	r8, r8, #1
 801399a:	e7e6      	b.n	801396a <_printf_float+0x212>
 801399c:	9b07      	ldr	r3, [sp, #28]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	dc3c      	bgt.n	8013a1c <_printf_float+0x2c4>
 80139a2:	4a1d      	ldr	r2, [pc, #116]	; (8013a18 <_printf_float+0x2c0>)
 80139a4:	2301      	movs	r3, #1
 80139a6:	4631      	mov	r1, r6
 80139a8:	4628      	mov	r0, r5
 80139aa:	47b8      	blx	r7
 80139ac:	3001      	adds	r0, #1
 80139ae:	f43f af21 	beq.w	80137f4 <_printf_float+0x9c>
 80139b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80139b6:	4313      	orrs	r3, r2
 80139b8:	d102      	bne.n	80139c0 <_printf_float+0x268>
 80139ba:	6823      	ldr	r3, [r4, #0]
 80139bc:	07d9      	lsls	r1, r3, #31
 80139be:	d5d8      	bpl.n	8013972 <_printf_float+0x21a>
 80139c0:	4653      	mov	r3, sl
 80139c2:	465a      	mov	r2, fp
 80139c4:	4631      	mov	r1, r6
 80139c6:	4628      	mov	r0, r5
 80139c8:	47b8      	blx	r7
 80139ca:	3001      	adds	r0, #1
 80139cc:	f43f af12 	beq.w	80137f4 <_printf_float+0x9c>
 80139d0:	f04f 0900 	mov.w	r9, #0
 80139d4:	f104 0a1a 	add.w	sl, r4, #26
 80139d8:	9b07      	ldr	r3, [sp, #28]
 80139da:	425b      	negs	r3, r3
 80139dc:	454b      	cmp	r3, r9
 80139de:	dc01      	bgt.n	80139e4 <_printf_float+0x28c>
 80139e0:	9b08      	ldr	r3, [sp, #32]
 80139e2:	e795      	b.n	8013910 <_printf_float+0x1b8>
 80139e4:	2301      	movs	r3, #1
 80139e6:	4652      	mov	r2, sl
 80139e8:	4631      	mov	r1, r6
 80139ea:	4628      	mov	r0, r5
 80139ec:	47b8      	blx	r7
 80139ee:	3001      	adds	r0, #1
 80139f0:	f43f af00 	beq.w	80137f4 <_printf_float+0x9c>
 80139f4:	f109 0901 	add.w	r9, r9, #1
 80139f8:	e7ee      	b.n	80139d8 <_printf_float+0x280>
 80139fa:	bf00      	nop
 80139fc:	f3af 8000 	nop.w
 8013a00:	ffffffff 	.word	0xffffffff
 8013a04:	7fefffff 	.word	0x7fefffff
 8013a08:	08018390 	.word	0x08018390
 8013a0c:	08018394 	.word	0x08018394
 8013a10:	0801839c 	.word	0x0801839c
 8013a14:	08018398 	.word	0x08018398
 8013a18:	080183a0 	.word	0x080183a0
 8013a1c:	9a08      	ldr	r2, [sp, #32]
 8013a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a20:	429a      	cmp	r2, r3
 8013a22:	bfa8      	it	ge
 8013a24:	461a      	movge	r2, r3
 8013a26:	2a00      	cmp	r2, #0
 8013a28:	4691      	mov	r9, r2
 8013a2a:	dc38      	bgt.n	8013a9e <_printf_float+0x346>
 8013a2c:	2300      	movs	r3, #0
 8013a2e:	9305      	str	r3, [sp, #20]
 8013a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a34:	f104 021a 	add.w	r2, r4, #26
 8013a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013a3a:	9905      	ldr	r1, [sp, #20]
 8013a3c:	9304      	str	r3, [sp, #16]
 8013a3e:	eba3 0309 	sub.w	r3, r3, r9
 8013a42:	428b      	cmp	r3, r1
 8013a44:	dc33      	bgt.n	8013aae <_printf_float+0x356>
 8013a46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	db3c      	blt.n	8013ac8 <_printf_float+0x370>
 8013a4e:	6823      	ldr	r3, [r4, #0]
 8013a50:	07da      	lsls	r2, r3, #31
 8013a52:	d439      	bmi.n	8013ac8 <_printf_float+0x370>
 8013a54:	9b08      	ldr	r3, [sp, #32]
 8013a56:	9a04      	ldr	r2, [sp, #16]
 8013a58:	9907      	ldr	r1, [sp, #28]
 8013a5a:	1a9a      	subs	r2, r3, r2
 8013a5c:	eba3 0901 	sub.w	r9, r3, r1
 8013a60:	4591      	cmp	r9, r2
 8013a62:	bfa8      	it	ge
 8013a64:	4691      	movge	r9, r2
 8013a66:	f1b9 0f00 	cmp.w	r9, #0
 8013a6a:	dc35      	bgt.n	8013ad8 <_printf_float+0x380>
 8013a6c:	f04f 0800 	mov.w	r8, #0
 8013a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013a74:	f104 0a1a 	add.w	sl, r4, #26
 8013a78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a7c:	1a9b      	subs	r3, r3, r2
 8013a7e:	eba3 0309 	sub.w	r3, r3, r9
 8013a82:	4543      	cmp	r3, r8
 8013a84:	f77f af75 	ble.w	8013972 <_printf_float+0x21a>
 8013a88:	2301      	movs	r3, #1
 8013a8a:	4652      	mov	r2, sl
 8013a8c:	4631      	mov	r1, r6
 8013a8e:	4628      	mov	r0, r5
 8013a90:	47b8      	blx	r7
 8013a92:	3001      	adds	r0, #1
 8013a94:	f43f aeae 	beq.w	80137f4 <_printf_float+0x9c>
 8013a98:	f108 0801 	add.w	r8, r8, #1
 8013a9c:	e7ec      	b.n	8013a78 <_printf_float+0x320>
 8013a9e:	4613      	mov	r3, r2
 8013aa0:	4631      	mov	r1, r6
 8013aa2:	4642      	mov	r2, r8
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	47b8      	blx	r7
 8013aa8:	3001      	adds	r0, #1
 8013aaa:	d1bf      	bne.n	8013a2c <_printf_float+0x2d4>
 8013aac:	e6a2      	b.n	80137f4 <_printf_float+0x9c>
 8013aae:	2301      	movs	r3, #1
 8013ab0:	4631      	mov	r1, r6
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	9204      	str	r2, [sp, #16]
 8013ab6:	47b8      	blx	r7
 8013ab8:	3001      	adds	r0, #1
 8013aba:	f43f ae9b 	beq.w	80137f4 <_printf_float+0x9c>
 8013abe:	9b05      	ldr	r3, [sp, #20]
 8013ac0:	9a04      	ldr	r2, [sp, #16]
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	9305      	str	r3, [sp, #20]
 8013ac6:	e7b7      	b.n	8013a38 <_printf_float+0x2e0>
 8013ac8:	4653      	mov	r3, sl
 8013aca:	465a      	mov	r2, fp
 8013acc:	4631      	mov	r1, r6
 8013ace:	4628      	mov	r0, r5
 8013ad0:	47b8      	blx	r7
 8013ad2:	3001      	adds	r0, #1
 8013ad4:	d1be      	bne.n	8013a54 <_printf_float+0x2fc>
 8013ad6:	e68d      	b.n	80137f4 <_printf_float+0x9c>
 8013ad8:	9a04      	ldr	r2, [sp, #16]
 8013ada:	464b      	mov	r3, r9
 8013adc:	4442      	add	r2, r8
 8013ade:	4631      	mov	r1, r6
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	47b8      	blx	r7
 8013ae4:	3001      	adds	r0, #1
 8013ae6:	d1c1      	bne.n	8013a6c <_printf_float+0x314>
 8013ae8:	e684      	b.n	80137f4 <_printf_float+0x9c>
 8013aea:	9a08      	ldr	r2, [sp, #32]
 8013aec:	2a01      	cmp	r2, #1
 8013aee:	dc01      	bgt.n	8013af4 <_printf_float+0x39c>
 8013af0:	07db      	lsls	r3, r3, #31
 8013af2:	d537      	bpl.n	8013b64 <_printf_float+0x40c>
 8013af4:	2301      	movs	r3, #1
 8013af6:	4642      	mov	r2, r8
 8013af8:	4631      	mov	r1, r6
 8013afa:	4628      	mov	r0, r5
 8013afc:	47b8      	blx	r7
 8013afe:	3001      	adds	r0, #1
 8013b00:	f43f ae78 	beq.w	80137f4 <_printf_float+0x9c>
 8013b04:	4653      	mov	r3, sl
 8013b06:	465a      	mov	r2, fp
 8013b08:	4631      	mov	r1, r6
 8013b0a:	4628      	mov	r0, r5
 8013b0c:	47b8      	blx	r7
 8013b0e:	3001      	adds	r0, #1
 8013b10:	f43f ae70 	beq.w	80137f4 <_printf_float+0x9c>
 8013b14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013b18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b20:	d01b      	beq.n	8013b5a <_printf_float+0x402>
 8013b22:	9b08      	ldr	r3, [sp, #32]
 8013b24:	f108 0201 	add.w	r2, r8, #1
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	4631      	mov	r1, r6
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	47b8      	blx	r7
 8013b30:	3001      	adds	r0, #1
 8013b32:	d10e      	bne.n	8013b52 <_printf_float+0x3fa>
 8013b34:	e65e      	b.n	80137f4 <_printf_float+0x9c>
 8013b36:	2301      	movs	r3, #1
 8013b38:	464a      	mov	r2, r9
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	47b8      	blx	r7
 8013b40:	3001      	adds	r0, #1
 8013b42:	f43f ae57 	beq.w	80137f4 <_printf_float+0x9c>
 8013b46:	f108 0801 	add.w	r8, r8, #1
 8013b4a:	9b08      	ldr	r3, [sp, #32]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	4543      	cmp	r3, r8
 8013b50:	dcf1      	bgt.n	8013b36 <_printf_float+0x3de>
 8013b52:	9b04      	ldr	r3, [sp, #16]
 8013b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013b58:	e6db      	b.n	8013912 <_printf_float+0x1ba>
 8013b5a:	f04f 0800 	mov.w	r8, #0
 8013b5e:	f104 091a 	add.w	r9, r4, #26
 8013b62:	e7f2      	b.n	8013b4a <_printf_float+0x3f2>
 8013b64:	2301      	movs	r3, #1
 8013b66:	4642      	mov	r2, r8
 8013b68:	e7df      	b.n	8013b2a <_printf_float+0x3d2>
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	464a      	mov	r2, r9
 8013b6e:	4631      	mov	r1, r6
 8013b70:	4628      	mov	r0, r5
 8013b72:	47b8      	blx	r7
 8013b74:	3001      	adds	r0, #1
 8013b76:	f43f ae3d 	beq.w	80137f4 <_printf_float+0x9c>
 8013b7a:	f108 0801 	add.w	r8, r8, #1
 8013b7e:	68e3      	ldr	r3, [r4, #12]
 8013b80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013b82:	1a5b      	subs	r3, r3, r1
 8013b84:	4543      	cmp	r3, r8
 8013b86:	dcf0      	bgt.n	8013b6a <_printf_float+0x412>
 8013b88:	e6f7      	b.n	801397a <_printf_float+0x222>
 8013b8a:	f04f 0800 	mov.w	r8, #0
 8013b8e:	f104 0919 	add.w	r9, r4, #25
 8013b92:	e7f4      	b.n	8013b7e <_printf_float+0x426>

08013b94 <_printf_common>:
 8013b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b98:	4616      	mov	r6, r2
 8013b9a:	4699      	mov	r9, r3
 8013b9c:	688a      	ldr	r2, [r1, #8]
 8013b9e:	690b      	ldr	r3, [r1, #16]
 8013ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	bfb8      	it	lt
 8013ba8:	4613      	movlt	r3, r2
 8013baa:	6033      	str	r3, [r6, #0]
 8013bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013bb0:	4607      	mov	r7, r0
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	b10a      	cbz	r2, 8013bba <_printf_common+0x26>
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	6033      	str	r3, [r6, #0]
 8013bba:	6823      	ldr	r3, [r4, #0]
 8013bbc:	0699      	lsls	r1, r3, #26
 8013bbe:	bf42      	ittt	mi
 8013bc0:	6833      	ldrmi	r3, [r6, #0]
 8013bc2:	3302      	addmi	r3, #2
 8013bc4:	6033      	strmi	r3, [r6, #0]
 8013bc6:	6825      	ldr	r5, [r4, #0]
 8013bc8:	f015 0506 	ands.w	r5, r5, #6
 8013bcc:	d106      	bne.n	8013bdc <_printf_common+0x48>
 8013bce:	f104 0a19 	add.w	sl, r4, #25
 8013bd2:	68e3      	ldr	r3, [r4, #12]
 8013bd4:	6832      	ldr	r2, [r6, #0]
 8013bd6:	1a9b      	subs	r3, r3, r2
 8013bd8:	42ab      	cmp	r3, r5
 8013bda:	dc26      	bgt.n	8013c2a <_printf_common+0x96>
 8013bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013be0:	1e13      	subs	r3, r2, #0
 8013be2:	6822      	ldr	r2, [r4, #0]
 8013be4:	bf18      	it	ne
 8013be6:	2301      	movne	r3, #1
 8013be8:	0692      	lsls	r2, r2, #26
 8013bea:	d42b      	bmi.n	8013c44 <_printf_common+0xb0>
 8013bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bf0:	4649      	mov	r1, r9
 8013bf2:	4638      	mov	r0, r7
 8013bf4:	47c0      	blx	r8
 8013bf6:	3001      	adds	r0, #1
 8013bf8:	d01e      	beq.n	8013c38 <_printf_common+0xa4>
 8013bfa:	6823      	ldr	r3, [r4, #0]
 8013bfc:	68e5      	ldr	r5, [r4, #12]
 8013bfe:	6832      	ldr	r2, [r6, #0]
 8013c00:	f003 0306 	and.w	r3, r3, #6
 8013c04:	2b04      	cmp	r3, #4
 8013c06:	bf08      	it	eq
 8013c08:	1aad      	subeq	r5, r5, r2
 8013c0a:	68a3      	ldr	r3, [r4, #8]
 8013c0c:	6922      	ldr	r2, [r4, #16]
 8013c0e:	bf0c      	ite	eq
 8013c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c14:	2500      	movne	r5, #0
 8013c16:	4293      	cmp	r3, r2
 8013c18:	bfc4      	itt	gt
 8013c1a:	1a9b      	subgt	r3, r3, r2
 8013c1c:	18ed      	addgt	r5, r5, r3
 8013c1e:	2600      	movs	r6, #0
 8013c20:	341a      	adds	r4, #26
 8013c22:	42b5      	cmp	r5, r6
 8013c24:	d11a      	bne.n	8013c5c <_printf_common+0xc8>
 8013c26:	2000      	movs	r0, #0
 8013c28:	e008      	b.n	8013c3c <_printf_common+0xa8>
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	4652      	mov	r2, sl
 8013c2e:	4649      	mov	r1, r9
 8013c30:	4638      	mov	r0, r7
 8013c32:	47c0      	blx	r8
 8013c34:	3001      	adds	r0, #1
 8013c36:	d103      	bne.n	8013c40 <_printf_common+0xac>
 8013c38:	f04f 30ff 	mov.w	r0, #4294967295
 8013c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c40:	3501      	adds	r5, #1
 8013c42:	e7c6      	b.n	8013bd2 <_printf_common+0x3e>
 8013c44:	18e1      	adds	r1, r4, r3
 8013c46:	1c5a      	adds	r2, r3, #1
 8013c48:	2030      	movs	r0, #48	; 0x30
 8013c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c4e:	4422      	add	r2, r4
 8013c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c58:	3302      	adds	r3, #2
 8013c5a:	e7c7      	b.n	8013bec <_printf_common+0x58>
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	4622      	mov	r2, r4
 8013c60:	4649      	mov	r1, r9
 8013c62:	4638      	mov	r0, r7
 8013c64:	47c0      	blx	r8
 8013c66:	3001      	adds	r0, #1
 8013c68:	d0e6      	beq.n	8013c38 <_printf_common+0xa4>
 8013c6a:	3601      	adds	r6, #1
 8013c6c:	e7d9      	b.n	8013c22 <_printf_common+0x8e>
	...

08013c70 <_printf_i>:
 8013c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013c74:	7e0f      	ldrb	r7, [r1, #24]
 8013c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013c78:	2f78      	cmp	r7, #120	; 0x78
 8013c7a:	4691      	mov	r9, r2
 8013c7c:	4680      	mov	r8, r0
 8013c7e:	460c      	mov	r4, r1
 8013c80:	469a      	mov	sl, r3
 8013c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013c86:	d807      	bhi.n	8013c98 <_printf_i+0x28>
 8013c88:	2f62      	cmp	r7, #98	; 0x62
 8013c8a:	d80a      	bhi.n	8013ca2 <_printf_i+0x32>
 8013c8c:	2f00      	cmp	r7, #0
 8013c8e:	f000 80d8 	beq.w	8013e42 <_printf_i+0x1d2>
 8013c92:	2f58      	cmp	r7, #88	; 0x58
 8013c94:	f000 80a3 	beq.w	8013dde <_printf_i+0x16e>
 8013c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ca0:	e03a      	b.n	8013d18 <_printf_i+0xa8>
 8013ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ca6:	2b15      	cmp	r3, #21
 8013ca8:	d8f6      	bhi.n	8013c98 <_printf_i+0x28>
 8013caa:	a101      	add	r1, pc, #4	; (adr r1, 8013cb0 <_printf_i+0x40>)
 8013cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013cb0:	08013d09 	.word	0x08013d09
 8013cb4:	08013d1d 	.word	0x08013d1d
 8013cb8:	08013c99 	.word	0x08013c99
 8013cbc:	08013c99 	.word	0x08013c99
 8013cc0:	08013c99 	.word	0x08013c99
 8013cc4:	08013c99 	.word	0x08013c99
 8013cc8:	08013d1d 	.word	0x08013d1d
 8013ccc:	08013c99 	.word	0x08013c99
 8013cd0:	08013c99 	.word	0x08013c99
 8013cd4:	08013c99 	.word	0x08013c99
 8013cd8:	08013c99 	.word	0x08013c99
 8013cdc:	08013e29 	.word	0x08013e29
 8013ce0:	08013d4d 	.word	0x08013d4d
 8013ce4:	08013e0b 	.word	0x08013e0b
 8013ce8:	08013c99 	.word	0x08013c99
 8013cec:	08013c99 	.word	0x08013c99
 8013cf0:	08013e4b 	.word	0x08013e4b
 8013cf4:	08013c99 	.word	0x08013c99
 8013cf8:	08013d4d 	.word	0x08013d4d
 8013cfc:	08013c99 	.word	0x08013c99
 8013d00:	08013c99 	.word	0x08013c99
 8013d04:	08013e13 	.word	0x08013e13
 8013d08:	682b      	ldr	r3, [r5, #0]
 8013d0a:	1d1a      	adds	r2, r3, #4
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	602a      	str	r2, [r5, #0]
 8013d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d18:	2301      	movs	r3, #1
 8013d1a:	e0a3      	b.n	8013e64 <_printf_i+0x1f4>
 8013d1c:	6820      	ldr	r0, [r4, #0]
 8013d1e:	6829      	ldr	r1, [r5, #0]
 8013d20:	0606      	lsls	r6, r0, #24
 8013d22:	f101 0304 	add.w	r3, r1, #4
 8013d26:	d50a      	bpl.n	8013d3e <_printf_i+0xce>
 8013d28:	680e      	ldr	r6, [r1, #0]
 8013d2a:	602b      	str	r3, [r5, #0]
 8013d2c:	2e00      	cmp	r6, #0
 8013d2e:	da03      	bge.n	8013d38 <_printf_i+0xc8>
 8013d30:	232d      	movs	r3, #45	; 0x2d
 8013d32:	4276      	negs	r6, r6
 8013d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d38:	485e      	ldr	r0, [pc, #376]	; (8013eb4 <_printf_i+0x244>)
 8013d3a:	230a      	movs	r3, #10
 8013d3c:	e019      	b.n	8013d72 <_printf_i+0x102>
 8013d3e:	680e      	ldr	r6, [r1, #0]
 8013d40:	602b      	str	r3, [r5, #0]
 8013d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d46:	bf18      	it	ne
 8013d48:	b236      	sxthne	r6, r6
 8013d4a:	e7ef      	b.n	8013d2c <_printf_i+0xbc>
 8013d4c:	682b      	ldr	r3, [r5, #0]
 8013d4e:	6820      	ldr	r0, [r4, #0]
 8013d50:	1d19      	adds	r1, r3, #4
 8013d52:	6029      	str	r1, [r5, #0]
 8013d54:	0601      	lsls	r1, r0, #24
 8013d56:	d501      	bpl.n	8013d5c <_printf_i+0xec>
 8013d58:	681e      	ldr	r6, [r3, #0]
 8013d5a:	e002      	b.n	8013d62 <_printf_i+0xf2>
 8013d5c:	0646      	lsls	r6, r0, #25
 8013d5e:	d5fb      	bpl.n	8013d58 <_printf_i+0xe8>
 8013d60:	881e      	ldrh	r6, [r3, #0]
 8013d62:	4854      	ldr	r0, [pc, #336]	; (8013eb4 <_printf_i+0x244>)
 8013d64:	2f6f      	cmp	r7, #111	; 0x6f
 8013d66:	bf0c      	ite	eq
 8013d68:	2308      	moveq	r3, #8
 8013d6a:	230a      	movne	r3, #10
 8013d6c:	2100      	movs	r1, #0
 8013d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d72:	6865      	ldr	r5, [r4, #4]
 8013d74:	60a5      	str	r5, [r4, #8]
 8013d76:	2d00      	cmp	r5, #0
 8013d78:	bfa2      	ittt	ge
 8013d7a:	6821      	ldrge	r1, [r4, #0]
 8013d7c:	f021 0104 	bicge.w	r1, r1, #4
 8013d80:	6021      	strge	r1, [r4, #0]
 8013d82:	b90e      	cbnz	r6, 8013d88 <_printf_i+0x118>
 8013d84:	2d00      	cmp	r5, #0
 8013d86:	d04d      	beq.n	8013e24 <_printf_i+0x1b4>
 8013d88:	4615      	mov	r5, r2
 8013d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8013d92:	5dc7      	ldrb	r7, [r0, r7]
 8013d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013d98:	4637      	mov	r7, r6
 8013d9a:	42bb      	cmp	r3, r7
 8013d9c:	460e      	mov	r6, r1
 8013d9e:	d9f4      	bls.n	8013d8a <_printf_i+0x11a>
 8013da0:	2b08      	cmp	r3, #8
 8013da2:	d10b      	bne.n	8013dbc <_printf_i+0x14c>
 8013da4:	6823      	ldr	r3, [r4, #0]
 8013da6:	07de      	lsls	r6, r3, #31
 8013da8:	d508      	bpl.n	8013dbc <_printf_i+0x14c>
 8013daa:	6923      	ldr	r3, [r4, #16]
 8013dac:	6861      	ldr	r1, [r4, #4]
 8013dae:	4299      	cmp	r1, r3
 8013db0:	bfde      	ittt	le
 8013db2:	2330      	movle	r3, #48	; 0x30
 8013db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013dbc:	1b52      	subs	r2, r2, r5
 8013dbe:	6122      	str	r2, [r4, #16]
 8013dc0:	f8cd a000 	str.w	sl, [sp]
 8013dc4:	464b      	mov	r3, r9
 8013dc6:	aa03      	add	r2, sp, #12
 8013dc8:	4621      	mov	r1, r4
 8013dca:	4640      	mov	r0, r8
 8013dcc:	f7ff fee2 	bl	8013b94 <_printf_common>
 8013dd0:	3001      	adds	r0, #1
 8013dd2:	d14c      	bne.n	8013e6e <_printf_i+0x1fe>
 8013dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd8:	b004      	add	sp, #16
 8013dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dde:	4835      	ldr	r0, [pc, #212]	; (8013eb4 <_printf_i+0x244>)
 8013de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013de4:	6829      	ldr	r1, [r5, #0]
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8013dec:	6029      	str	r1, [r5, #0]
 8013dee:	061d      	lsls	r5, r3, #24
 8013df0:	d514      	bpl.n	8013e1c <_printf_i+0x1ac>
 8013df2:	07df      	lsls	r7, r3, #31
 8013df4:	bf44      	itt	mi
 8013df6:	f043 0320 	orrmi.w	r3, r3, #32
 8013dfa:	6023      	strmi	r3, [r4, #0]
 8013dfc:	b91e      	cbnz	r6, 8013e06 <_printf_i+0x196>
 8013dfe:	6823      	ldr	r3, [r4, #0]
 8013e00:	f023 0320 	bic.w	r3, r3, #32
 8013e04:	6023      	str	r3, [r4, #0]
 8013e06:	2310      	movs	r3, #16
 8013e08:	e7b0      	b.n	8013d6c <_printf_i+0xfc>
 8013e0a:	6823      	ldr	r3, [r4, #0]
 8013e0c:	f043 0320 	orr.w	r3, r3, #32
 8013e10:	6023      	str	r3, [r4, #0]
 8013e12:	2378      	movs	r3, #120	; 0x78
 8013e14:	4828      	ldr	r0, [pc, #160]	; (8013eb8 <_printf_i+0x248>)
 8013e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e1a:	e7e3      	b.n	8013de4 <_printf_i+0x174>
 8013e1c:	0659      	lsls	r1, r3, #25
 8013e1e:	bf48      	it	mi
 8013e20:	b2b6      	uxthmi	r6, r6
 8013e22:	e7e6      	b.n	8013df2 <_printf_i+0x182>
 8013e24:	4615      	mov	r5, r2
 8013e26:	e7bb      	b.n	8013da0 <_printf_i+0x130>
 8013e28:	682b      	ldr	r3, [r5, #0]
 8013e2a:	6826      	ldr	r6, [r4, #0]
 8013e2c:	6961      	ldr	r1, [r4, #20]
 8013e2e:	1d18      	adds	r0, r3, #4
 8013e30:	6028      	str	r0, [r5, #0]
 8013e32:	0635      	lsls	r5, r6, #24
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	d501      	bpl.n	8013e3c <_printf_i+0x1cc>
 8013e38:	6019      	str	r1, [r3, #0]
 8013e3a:	e002      	b.n	8013e42 <_printf_i+0x1d2>
 8013e3c:	0670      	lsls	r0, r6, #25
 8013e3e:	d5fb      	bpl.n	8013e38 <_printf_i+0x1c8>
 8013e40:	8019      	strh	r1, [r3, #0]
 8013e42:	2300      	movs	r3, #0
 8013e44:	6123      	str	r3, [r4, #16]
 8013e46:	4615      	mov	r5, r2
 8013e48:	e7ba      	b.n	8013dc0 <_printf_i+0x150>
 8013e4a:	682b      	ldr	r3, [r5, #0]
 8013e4c:	1d1a      	adds	r2, r3, #4
 8013e4e:	602a      	str	r2, [r5, #0]
 8013e50:	681d      	ldr	r5, [r3, #0]
 8013e52:	6862      	ldr	r2, [r4, #4]
 8013e54:	2100      	movs	r1, #0
 8013e56:	4628      	mov	r0, r5
 8013e58:	f7ec f9fa 	bl	8000250 <memchr>
 8013e5c:	b108      	cbz	r0, 8013e62 <_printf_i+0x1f2>
 8013e5e:	1b40      	subs	r0, r0, r5
 8013e60:	6060      	str	r0, [r4, #4]
 8013e62:	6863      	ldr	r3, [r4, #4]
 8013e64:	6123      	str	r3, [r4, #16]
 8013e66:	2300      	movs	r3, #0
 8013e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e6c:	e7a8      	b.n	8013dc0 <_printf_i+0x150>
 8013e6e:	6923      	ldr	r3, [r4, #16]
 8013e70:	462a      	mov	r2, r5
 8013e72:	4649      	mov	r1, r9
 8013e74:	4640      	mov	r0, r8
 8013e76:	47d0      	blx	sl
 8013e78:	3001      	adds	r0, #1
 8013e7a:	d0ab      	beq.n	8013dd4 <_printf_i+0x164>
 8013e7c:	6823      	ldr	r3, [r4, #0]
 8013e7e:	079b      	lsls	r3, r3, #30
 8013e80:	d413      	bmi.n	8013eaa <_printf_i+0x23a>
 8013e82:	68e0      	ldr	r0, [r4, #12]
 8013e84:	9b03      	ldr	r3, [sp, #12]
 8013e86:	4298      	cmp	r0, r3
 8013e88:	bfb8      	it	lt
 8013e8a:	4618      	movlt	r0, r3
 8013e8c:	e7a4      	b.n	8013dd8 <_printf_i+0x168>
 8013e8e:	2301      	movs	r3, #1
 8013e90:	4632      	mov	r2, r6
 8013e92:	4649      	mov	r1, r9
 8013e94:	4640      	mov	r0, r8
 8013e96:	47d0      	blx	sl
 8013e98:	3001      	adds	r0, #1
 8013e9a:	d09b      	beq.n	8013dd4 <_printf_i+0x164>
 8013e9c:	3501      	adds	r5, #1
 8013e9e:	68e3      	ldr	r3, [r4, #12]
 8013ea0:	9903      	ldr	r1, [sp, #12]
 8013ea2:	1a5b      	subs	r3, r3, r1
 8013ea4:	42ab      	cmp	r3, r5
 8013ea6:	dcf2      	bgt.n	8013e8e <_printf_i+0x21e>
 8013ea8:	e7eb      	b.n	8013e82 <_printf_i+0x212>
 8013eaa:	2500      	movs	r5, #0
 8013eac:	f104 0619 	add.w	r6, r4, #25
 8013eb0:	e7f5      	b.n	8013e9e <_printf_i+0x22e>
 8013eb2:	bf00      	nop
 8013eb4:	080183a2 	.word	0x080183a2
 8013eb8:	080183b3 	.word	0x080183b3

08013ebc <_scanf_float>:
 8013ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ec0:	b087      	sub	sp, #28
 8013ec2:	4617      	mov	r7, r2
 8013ec4:	9303      	str	r3, [sp, #12]
 8013ec6:	688b      	ldr	r3, [r1, #8]
 8013ec8:	1e5a      	subs	r2, r3, #1
 8013eca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013ece:	bf83      	ittte	hi
 8013ed0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013ed4:	195b      	addhi	r3, r3, r5
 8013ed6:	9302      	strhi	r3, [sp, #8]
 8013ed8:	2300      	movls	r3, #0
 8013eda:	bf86      	itte	hi
 8013edc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013ee0:	608b      	strhi	r3, [r1, #8]
 8013ee2:	9302      	strls	r3, [sp, #8]
 8013ee4:	680b      	ldr	r3, [r1, #0]
 8013ee6:	468b      	mov	fp, r1
 8013ee8:	2500      	movs	r5, #0
 8013eea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013eee:	f84b 3b1c 	str.w	r3, [fp], #28
 8013ef2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013ef6:	4680      	mov	r8, r0
 8013ef8:	460c      	mov	r4, r1
 8013efa:	465e      	mov	r6, fp
 8013efc:	46aa      	mov	sl, r5
 8013efe:	46a9      	mov	r9, r5
 8013f00:	9501      	str	r5, [sp, #4]
 8013f02:	68a2      	ldr	r2, [r4, #8]
 8013f04:	b152      	cbz	r2, 8013f1c <_scanf_float+0x60>
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	2b4e      	cmp	r3, #78	; 0x4e
 8013f0c:	d864      	bhi.n	8013fd8 <_scanf_float+0x11c>
 8013f0e:	2b40      	cmp	r3, #64	; 0x40
 8013f10:	d83c      	bhi.n	8013f8c <_scanf_float+0xd0>
 8013f12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013f16:	b2c8      	uxtb	r0, r1
 8013f18:	280e      	cmp	r0, #14
 8013f1a:	d93a      	bls.n	8013f92 <_scanf_float+0xd6>
 8013f1c:	f1b9 0f00 	cmp.w	r9, #0
 8013f20:	d003      	beq.n	8013f2a <_scanf_float+0x6e>
 8013f22:	6823      	ldr	r3, [r4, #0]
 8013f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f28:	6023      	str	r3, [r4, #0]
 8013f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f2e:	f1ba 0f01 	cmp.w	sl, #1
 8013f32:	f200 8113 	bhi.w	801415c <_scanf_float+0x2a0>
 8013f36:	455e      	cmp	r6, fp
 8013f38:	f200 8105 	bhi.w	8014146 <_scanf_float+0x28a>
 8013f3c:	2501      	movs	r5, #1
 8013f3e:	4628      	mov	r0, r5
 8013f40:	b007      	add	sp, #28
 8013f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013f4a:	2a0d      	cmp	r2, #13
 8013f4c:	d8e6      	bhi.n	8013f1c <_scanf_float+0x60>
 8013f4e:	a101      	add	r1, pc, #4	; (adr r1, 8013f54 <_scanf_float+0x98>)
 8013f50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013f54:	08014093 	.word	0x08014093
 8013f58:	08013f1d 	.word	0x08013f1d
 8013f5c:	08013f1d 	.word	0x08013f1d
 8013f60:	08013f1d 	.word	0x08013f1d
 8013f64:	080140f3 	.word	0x080140f3
 8013f68:	080140cb 	.word	0x080140cb
 8013f6c:	08013f1d 	.word	0x08013f1d
 8013f70:	08013f1d 	.word	0x08013f1d
 8013f74:	080140a1 	.word	0x080140a1
 8013f78:	08013f1d 	.word	0x08013f1d
 8013f7c:	08013f1d 	.word	0x08013f1d
 8013f80:	08013f1d 	.word	0x08013f1d
 8013f84:	08013f1d 	.word	0x08013f1d
 8013f88:	08014059 	.word	0x08014059
 8013f8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013f90:	e7db      	b.n	8013f4a <_scanf_float+0x8e>
 8013f92:	290e      	cmp	r1, #14
 8013f94:	d8c2      	bhi.n	8013f1c <_scanf_float+0x60>
 8013f96:	a001      	add	r0, pc, #4	; (adr r0, 8013f9c <_scanf_float+0xe0>)
 8013f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013f9c:	0801404b 	.word	0x0801404b
 8013fa0:	08013f1d 	.word	0x08013f1d
 8013fa4:	0801404b 	.word	0x0801404b
 8013fa8:	080140df 	.word	0x080140df
 8013fac:	08013f1d 	.word	0x08013f1d
 8013fb0:	08013ff9 	.word	0x08013ff9
 8013fb4:	08014035 	.word	0x08014035
 8013fb8:	08014035 	.word	0x08014035
 8013fbc:	08014035 	.word	0x08014035
 8013fc0:	08014035 	.word	0x08014035
 8013fc4:	08014035 	.word	0x08014035
 8013fc8:	08014035 	.word	0x08014035
 8013fcc:	08014035 	.word	0x08014035
 8013fd0:	08014035 	.word	0x08014035
 8013fd4:	08014035 	.word	0x08014035
 8013fd8:	2b6e      	cmp	r3, #110	; 0x6e
 8013fda:	d809      	bhi.n	8013ff0 <_scanf_float+0x134>
 8013fdc:	2b60      	cmp	r3, #96	; 0x60
 8013fde:	d8b2      	bhi.n	8013f46 <_scanf_float+0x8a>
 8013fe0:	2b54      	cmp	r3, #84	; 0x54
 8013fe2:	d077      	beq.n	80140d4 <_scanf_float+0x218>
 8013fe4:	2b59      	cmp	r3, #89	; 0x59
 8013fe6:	d199      	bne.n	8013f1c <_scanf_float+0x60>
 8013fe8:	2d07      	cmp	r5, #7
 8013fea:	d197      	bne.n	8013f1c <_scanf_float+0x60>
 8013fec:	2508      	movs	r5, #8
 8013fee:	e029      	b.n	8014044 <_scanf_float+0x188>
 8013ff0:	2b74      	cmp	r3, #116	; 0x74
 8013ff2:	d06f      	beq.n	80140d4 <_scanf_float+0x218>
 8013ff4:	2b79      	cmp	r3, #121	; 0x79
 8013ff6:	e7f6      	b.n	8013fe6 <_scanf_float+0x12a>
 8013ff8:	6821      	ldr	r1, [r4, #0]
 8013ffa:	05c8      	lsls	r0, r1, #23
 8013ffc:	d51a      	bpl.n	8014034 <_scanf_float+0x178>
 8013ffe:	9b02      	ldr	r3, [sp, #8]
 8014000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014004:	6021      	str	r1, [r4, #0]
 8014006:	f109 0901 	add.w	r9, r9, #1
 801400a:	b11b      	cbz	r3, 8014014 <_scanf_float+0x158>
 801400c:	3b01      	subs	r3, #1
 801400e:	3201      	adds	r2, #1
 8014010:	9302      	str	r3, [sp, #8]
 8014012:	60a2      	str	r2, [r4, #8]
 8014014:	68a3      	ldr	r3, [r4, #8]
 8014016:	3b01      	subs	r3, #1
 8014018:	60a3      	str	r3, [r4, #8]
 801401a:	6923      	ldr	r3, [r4, #16]
 801401c:	3301      	adds	r3, #1
 801401e:	6123      	str	r3, [r4, #16]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	3b01      	subs	r3, #1
 8014024:	2b00      	cmp	r3, #0
 8014026:	607b      	str	r3, [r7, #4]
 8014028:	f340 8084 	ble.w	8014134 <_scanf_float+0x278>
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	3301      	adds	r3, #1
 8014030:	603b      	str	r3, [r7, #0]
 8014032:	e766      	b.n	8013f02 <_scanf_float+0x46>
 8014034:	eb1a 0f05 	cmn.w	sl, r5
 8014038:	f47f af70 	bne.w	8013f1c <_scanf_float+0x60>
 801403c:	6822      	ldr	r2, [r4, #0]
 801403e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8014042:	6022      	str	r2, [r4, #0]
 8014044:	f806 3b01 	strb.w	r3, [r6], #1
 8014048:	e7e4      	b.n	8014014 <_scanf_float+0x158>
 801404a:	6822      	ldr	r2, [r4, #0]
 801404c:	0610      	lsls	r0, r2, #24
 801404e:	f57f af65 	bpl.w	8013f1c <_scanf_float+0x60>
 8014052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014056:	e7f4      	b.n	8014042 <_scanf_float+0x186>
 8014058:	f1ba 0f00 	cmp.w	sl, #0
 801405c:	d10e      	bne.n	801407c <_scanf_float+0x1c0>
 801405e:	f1b9 0f00 	cmp.w	r9, #0
 8014062:	d10e      	bne.n	8014082 <_scanf_float+0x1c6>
 8014064:	6822      	ldr	r2, [r4, #0]
 8014066:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801406a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801406e:	d108      	bne.n	8014082 <_scanf_float+0x1c6>
 8014070:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014074:	6022      	str	r2, [r4, #0]
 8014076:	f04f 0a01 	mov.w	sl, #1
 801407a:	e7e3      	b.n	8014044 <_scanf_float+0x188>
 801407c:	f1ba 0f02 	cmp.w	sl, #2
 8014080:	d055      	beq.n	801412e <_scanf_float+0x272>
 8014082:	2d01      	cmp	r5, #1
 8014084:	d002      	beq.n	801408c <_scanf_float+0x1d0>
 8014086:	2d04      	cmp	r5, #4
 8014088:	f47f af48 	bne.w	8013f1c <_scanf_float+0x60>
 801408c:	3501      	adds	r5, #1
 801408e:	b2ed      	uxtb	r5, r5
 8014090:	e7d8      	b.n	8014044 <_scanf_float+0x188>
 8014092:	f1ba 0f01 	cmp.w	sl, #1
 8014096:	f47f af41 	bne.w	8013f1c <_scanf_float+0x60>
 801409a:	f04f 0a02 	mov.w	sl, #2
 801409e:	e7d1      	b.n	8014044 <_scanf_float+0x188>
 80140a0:	b97d      	cbnz	r5, 80140c2 <_scanf_float+0x206>
 80140a2:	f1b9 0f00 	cmp.w	r9, #0
 80140a6:	f47f af3c 	bne.w	8013f22 <_scanf_float+0x66>
 80140aa:	6822      	ldr	r2, [r4, #0]
 80140ac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80140b0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80140b4:	f47f af39 	bne.w	8013f2a <_scanf_float+0x6e>
 80140b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80140bc:	6022      	str	r2, [r4, #0]
 80140be:	2501      	movs	r5, #1
 80140c0:	e7c0      	b.n	8014044 <_scanf_float+0x188>
 80140c2:	2d03      	cmp	r5, #3
 80140c4:	d0e2      	beq.n	801408c <_scanf_float+0x1d0>
 80140c6:	2d05      	cmp	r5, #5
 80140c8:	e7de      	b.n	8014088 <_scanf_float+0x1cc>
 80140ca:	2d02      	cmp	r5, #2
 80140cc:	f47f af26 	bne.w	8013f1c <_scanf_float+0x60>
 80140d0:	2503      	movs	r5, #3
 80140d2:	e7b7      	b.n	8014044 <_scanf_float+0x188>
 80140d4:	2d06      	cmp	r5, #6
 80140d6:	f47f af21 	bne.w	8013f1c <_scanf_float+0x60>
 80140da:	2507      	movs	r5, #7
 80140dc:	e7b2      	b.n	8014044 <_scanf_float+0x188>
 80140de:	6822      	ldr	r2, [r4, #0]
 80140e0:	0591      	lsls	r1, r2, #22
 80140e2:	f57f af1b 	bpl.w	8013f1c <_scanf_float+0x60>
 80140e6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80140ea:	6022      	str	r2, [r4, #0]
 80140ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80140f0:	e7a8      	b.n	8014044 <_scanf_float+0x188>
 80140f2:	6822      	ldr	r2, [r4, #0]
 80140f4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80140f8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80140fc:	d006      	beq.n	801410c <_scanf_float+0x250>
 80140fe:	0550      	lsls	r0, r2, #21
 8014100:	f57f af0c 	bpl.w	8013f1c <_scanf_float+0x60>
 8014104:	f1b9 0f00 	cmp.w	r9, #0
 8014108:	f43f af0f 	beq.w	8013f2a <_scanf_float+0x6e>
 801410c:	0591      	lsls	r1, r2, #22
 801410e:	bf58      	it	pl
 8014110:	9901      	ldrpl	r1, [sp, #4]
 8014112:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014116:	bf58      	it	pl
 8014118:	eba9 0101 	subpl.w	r1, r9, r1
 801411c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014120:	bf58      	it	pl
 8014122:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014126:	6022      	str	r2, [r4, #0]
 8014128:	f04f 0900 	mov.w	r9, #0
 801412c:	e78a      	b.n	8014044 <_scanf_float+0x188>
 801412e:	f04f 0a03 	mov.w	sl, #3
 8014132:	e787      	b.n	8014044 <_scanf_float+0x188>
 8014134:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014138:	4639      	mov	r1, r7
 801413a:	4640      	mov	r0, r8
 801413c:	4798      	blx	r3
 801413e:	2800      	cmp	r0, #0
 8014140:	f43f aedf 	beq.w	8013f02 <_scanf_float+0x46>
 8014144:	e6ea      	b.n	8013f1c <_scanf_float+0x60>
 8014146:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801414a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801414e:	463a      	mov	r2, r7
 8014150:	4640      	mov	r0, r8
 8014152:	4798      	blx	r3
 8014154:	6923      	ldr	r3, [r4, #16]
 8014156:	3b01      	subs	r3, #1
 8014158:	6123      	str	r3, [r4, #16]
 801415a:	e6ec      	b.n	8013f36 <_scanf_float+0x7a>
 801415c:	1e6b      	subs	r3, r5, #1
 801415e:	2b06      	cmp	r3, #6
 8014160:	d825      	bhi.n	80141ae <_scanf_float+0x2f2>
 8014162:	2d02      	cmp	r5, #2
 8014164:	d836      	bhi.n	80141d4 <_scanf_float+0x318>
 8014166:	455e      	cmp	r6, fp
 8014168:	f67f aee8 	bls.w	8013f3c <_scanf_float+0x80>
 801416c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014170:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014174:	463a      	mov	r2, r7
 8014176:	4640      	mov	r0, r8
 8014178:	4798      	blx	r3
 801417a:	6923      	ldr	r3, [r4, #16]
 801417c:	3b01      	subs	r3, #1
 801417e:	6123      	str	r3, [r4, #16]
 8014180:	e7f1      	b.n	8014166 <_scanf_float+0x2aa>
 8014182:	9802      	ldr	r0, [sp, #8]
 8014184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014188:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801418c:	9002      	str	r0, [sp, #8]
 801418e:	463a      	mov	r2, r7
 8014190:	4640      	mov	r0, r8
 8014192:	4798      	blx	r3
 8014194:	6923      	ldr	r3, [r4, #16]
 8014196:	3b01      	subs	r3, #1
 8014198:	6123      	str	r3, [r4, #16]
 801419a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801419e:	fa5f fa8a 	uxtb.w	sl, sl
 80141a2:	f1ba 0f02 	cmp.w	sl, #2
 80141a6:	d1ec      	bne.n	8014182 <_scanf_float+0x2c6>
 80141a8:	3d03      	subs	r5, #3
 80141aa:	b2ed      	uxtb	r5, r5
 80141ac:	1b76      	subs	r6, r6, r5
 80141ae:	6823      	ldr	r3, [r4, #0]
 80141b0:	05da      	lsls	r2, r3, #23
 80141b2:	d52f      	bpl.n	8014214 <_scanf_float+0x358>
 80141b4:	055b      	lsls	r3, r3, #21
 80141b6:	d510      	bpl.n	80141da <_scanf_float+0x31e>
 80141b8:	455e      	cmp	r6, fp
 80141ba:	f67f aebf 	bls.w	8013f3c <_scanf_float+0x80>
 80141be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80141c6:	463a      	mov	r2, r7
 80141c8:	4640      	mov	r0, r8
 80141ca:	4798      	blx	r3
 80141cc:	6923      	ldr	r3, [r4, #16]
 80141ce:	3b01      	subs	r3, #1
 80141d0:	6123      	str	r3, [r4, #16]
 80141d2:	e7f1      	b.n	80141b8 <_scanf_float+0x2fc>
 80141d4:	46aa      	mov	sl, r5
 80141d6:	9602      	str	r6, [sp, #8]
 80141d8:	e7df      	b.n	801419a <_scanf_float+0x2de>
 80141da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80141de:	6923      	ldr	r3, [r4, #16]
 80141e0:	2965      	cmp	r1, #101	; 0x65
 80141e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80141e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80141ea:	6123      	str	r3, [r4, #16]
 80141ec:	d00c      	beq.n	8014208 <_scanf_float+0x34c>
 80141ee:	2945      	cmp	r1, #69	; 0x45
 80141f0:	d00a      	beq.n	8014208 <_scanf_float+0x34c>
 80141f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141f6:	463a      	mov	r2, r7
 80141f8:	4640      	mov	r0, r8
 80141fa:	4798      	blx	r3
 80141fc:	6923      	ldr	r3, [r4, #16]
 80141fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014202:	3b01      	subs	r3, #1
 8014204:	1eb5      	subs	r5, r6, #2
 8014206:	6123      	str	r3, [r4, #16]
 8014208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801420c:	463a      	mov	r2, r7
 801420e:	4640      	mov	r0, r8
 8014210:	4798      	blx	r3
 8014212:	462e      	mov	r6, r5
 8014214:	6825      	ldr	r5, [r4, #0]
 8014216:	f015 0510 	ands.w	r5, r5, #16
 801421a:	d14e      	bne.n	80142ba <_scanf_float+0x3fe>
 801421c:	7035      	strb	r5, [r6, #0]
 801421e:	6823      	ldr	r3, [r4, #0]
 8014220:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014228:	d119      	bne.n	801425e <_scanf_float+0x3a2>
 801422a:	9b01      	ldr	r3, [sp, #4]
 801422c:	454b      	cmp	r3, r9
 801422e:	eba3 0209 	sub.w	r2, r3, r9
 8014232:	d121      	bne.n	8014278 <_scanf_float+0x3bc>
 8014234:	2200      	movs	r2, #0
 8014236:	4659      	mov	r1, fp
 8014238:	4640      	mov	r0, r8
 801423a:	f000 fefb 	bl	8015034 <_strtod_r>
 801423e:	6822      	ldr	r2, [r4, #0]
 8014240:	9b03      	ldr	r3, [sp, #12]
 8014242:	f012 0f02 	tst.w	r2, #2
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	d021      	beq.n	801428e <_scanf_float+0x3d2>
 801424a:	9903      	ldr	r1, [sp, #12]
 801424c:	1d1a      	adds	r2, r3, #4
 801424e:	600a      	str	r2, [r1, #0]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	ed83 0b00 	vstr	d0, [r3]
 8014256:	68e3      	ldr	r3, [r4, #12]
 8014258:	3301      	adds	r3, #1
 801425a:	60e3      	str	r3, [r4, #12]
 801425c:	e66f      	b.n	8013f3e <_scanf_float+0x82>
 801425e:	9b04      	ldr	r3, [sp, #16]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d0e7      	beq.n	8014234 <_scanf_float+0x378>
 8014264:	9905      	ldr	r1, [sp, #20]
 8014266:	230a      	movs	r3, #10
 8014268:	462a      	mov	r2, r5
 801426a:	3101      	adds	r1, #1
 801426c:	4640      	mov	r0, r8
 801426e:	f000 ff69 	bl	8015144 <_strtol_r>
 8014272:	9b04      	ldr	r3, [sp, #16]
 8014274:	9e05      	ldr	r6, [sp, #20]
 8014276:	1ac2      	subs	r2, r0, r3
 8014278:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801427c:	429e      	cmp	r6, r3
 801427e:	bf28      	it	cs
 8014280:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014284:	490e      	ldr	r1, [pc, #56]	; (80142c0 <_scanf_float+0x404>)
 8014286:	4630      	mov	r0, r6
 8014288:	f000 f89e 	bl	80143c8 <siprintf>
 801428c:	e7d2      	b.n	8014234 <_scanf_float+0x378>
 801428e:	9903      	ldr	r1, [sp, #12]
 8014290:	f012 0f04 	tst.w	r2, #4
 8014294:	f103 0204 	add.w	r2, r3, #4
 8014298:	600a      	str	r2, [r1, #0]
 801429a:	d1d9      	bne.n	8014250 <_scanf_float+0x394>
 801429c:	eeb4 0b40 	vcmp.f64	d0, d0
 80142a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a4:	681e      	ldr	r6, [r3, #0]
 80142a6:	d705      	bvc.n	80142b4 <_scanf_float+0x3f8>
 80142a8:	4806      	ldr	r0, [pc, #24]	; (80142c4 <_scanf_float+0x408>)
 80142aa:	f000 f887 	bl	80143bc <nanf>
 80142ae:	ed86 0a00 	vstr	s0, [r6]
 80142b2:	e7d0      	b.n	8014256 <_scanf_float+0x39a>
 80142b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80142b8:	e7f9      	b.n	80142ae <_scanf_float+0x3f2>
 80142ba:	2500      	movs	r5, #0
 80142bc:	e63f      	b.n	8013f3e <_scanf_float+0x82>
 80142be:	bf00      	nop
 80142c0:	080183c4 	.word	0x080183c4
 80142c4:	080187d0 	.word	0x080187d0

080142c8 <cleanup_glue>:
 80142c8:	b538      	push	{r3, r4, r5, lr}
 80142ca:	460c      	mov	r4, r1
 80142cc:	6809      	ldr	r1, [r1, #0]
 80142ce:	4605      	mov	r5, r0
 80142d0:	b109      	cbz	r1, 80142d6 <cleanup_glue+0xe>
 80142d2:	f7ff fff9 	bl	80142c8 <cleanup_glue>
 80142d6:	4621      	mov	r1, r4
 80142d8:	4628      	mov	r0, r5
 80142da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142de:	f002 be93 	b.w	8017008 <_free_r>
	...

080142e4 <_reclaim_reent>:
 80142e4:	4b2c      	ldr	r3, [pc, #176]	; (8014398 <_reclaim_reent+0xb4>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	4283      	cmp	r3, r0
 80142ea:	b570      	push	{r4, r5, r6, lr}
 80142ec:	4604      	mov	r4, r0
 80142ee:	d051      	beq.n	8014394 <_reclaim_reent+0xb0>
 80142f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80142f2:	b143      	cbz	r3, 8014306 <_reclaim_reent+0x22>
 80142f4:	68db      	ldr	r3, [r3, #12]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d14a      	bne.n	8014390 <_reclaim_reent+0xac>
 80142fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142fc:	6819      	ldr	r1, [r3, #0]
 80142fe:	b111      	cbz	r1, 8014306 <_reclaim_reent+0x22>
 8014300:	4620      	mov	r0, r4
 8014302:	f002 fe81 	bl	8017008 <_free_r>
 8014306:	6961      	ldr	r1, [r4, #20]
 8014308:	b111      	cbz	r1, 8014310 <_reclaim_reent+0x2c>
 801430a:	4620      	mov	r0, r4
 801430c:	f002 fe7c 	bl	8017008 <_free_r>
 8014310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014312:	b111      	cbz	r1, 801431a <_reclaim_reent+0x36>
 8014314:	4620      	mov	r0, r4
 8014316:	f002 fe77 	bl	8017008 <_free_r>
 801431a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801431c:	b111      	cbz	r1, 8014324 <_reclaim_reent+0x40>
 801431e:	4620      	mov	r0, r4
 8014320:	f002 fe72 	bl	8017008 <_free_r>
 8014324:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014326:	b111      	cbz	r1, 801432e <_reclaim_reent+0x4a>
 8014328:	4620      	mov	r0, r4
 801432a:	f002 fe6d 	bl	8017008 <_free_r>
 801432e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014330:	b111      	cbz	r1, 8014338 <_reclaim_reent+0x54>
 8014332:	4620      	mov	r0, r4
 8014334:	f002 fe68 	bl	8017008 <_free_r>
 8014338:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801433a:	b111      	cbz	r1, 8014342 <_reclaim_reent+0x5e>
 801433c:	4620      	mov	r0, r4
 801433e:	f002 fe63 	bl	8017008 <_free_r>
 8014342:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014344:	b111      	cbz	r1, 801434c <_reclaim_reent+0x68>
 8014346:	4620      	mov	r0, r4
 8014348:	f002 fe5e 	bl	8017008 <_free_r>
 801434c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801434e:	b111      	cbz	r1, 8014356 <_reclaim_reent+0x72>
 8014350:	4620      	mov	r0, r4
 8014352:	f002 fe59 	bl	8017008 <_free_r>
 8014356:	69a3      	ldr	r3, [r4, #24]
 8014358:	b1e3      	cbz	r3, 8014394 <_reclaim_reent+0xb0>
 801435a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801435c:	4620      	mov	r0, r4
 801435e:	4798      	blx	r3
 8014360:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014362:	b1b9      	cbz	r1, 8014394 <_reclaim_reent+0xb0>
 8014364:	4620      	mov	r0, r4
 8014366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801436a:	f7ff bfad 	b.w	80142c8 <cleanup_glue>
 801436e:	5949      	ldr	r1, [r1, r5]
 8014370:	b941      	cbnz	r1, 8014384 <_reclaim_reent+0xa0>
 8014372:	3504      	adds	r5, #4
 8014374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014376:	2d80      	cmp	r5, #128	; 0x80
 8014378:	68d9      	ldr	r1, [r3, #12]
 801437a:	d1f8      	bne.n	801436e <_reclaim_reent+0x8a>
 801437c:	4620      	mov	r0, r4
 801437e:	f002 fe43 	bl	8017008 <_free_r>
 8014382:	e7ba      	b.n	80142fa <_reclaim_reent+0x16>
 8014384:	680e      	ldr	r6, [r1, #0]
 8014386:	4620      	mov	r0, r4
 8014388:	f002 fe3e 	bl	8017008 <_free_r>
 801438c:	4631      	mov	r1, r6
 801438e:	e7ef      	b.n	8014370 <_reclaim_reent+0x8c>
 8014390:	2500      	movs	r5, #0
 8014392:	e7ef      	b.n	8014374 <_reclaim_reent+0x90>
 8014394:	bd70      	pop	{r4, r5, r6, pc}
 8014396:	bf00      	nop
 8014398:	200001c0 	.word	0x200001c0

0801439c <_sbrk_r>:
 801439c:	b538      	push	{r3, r4, r5, lr}
 801439e:	4d06      	ldr	r5, [pc, #24]	; (80143b8 <_sbrk_r+0x1c>)
 80143a0:	2300      	movs	r3, #0
 80143a2:	4604      	mov	r4, r0
 80143a4:	4608      	mov	r0, r1
 80143a6:	602b      	str	r3, [r5, #0]
 80143a8:	f7f2 fa60 	bl	800686c <_sbrk>
 80143ac:	1c43      	adds	r3, r0, #1
 80143ae:	d102      	bne.n	80143b6 <_sbrk_r+0x1a>
 80143b0:	682b      	ldr	r3, [r5, #0]
 80143b2:	b103      	cbz	r3, 80143b6 <_sbrk_r+0x1a>
 80143b4:	6023      	str	r3, [r4, #0]
 80143b6:	bd38      	pop	{r3, r4, r5, pc}
 80143b8:	200065a4 	.word	0x200065a4

080143bc <nanf>:
 80143bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80143c4 <nanf+0x8>
 80143c0:	4770      	bx	lr
 80143c2:	bf00      	nop
 80143c4:	7fc00000 	.word	0x7fc00000

080143c8 <siprintf>:
 80143c8:	b40e      	push	{r1, r2, r3}
 80143ca:	b500      	push	{lr}
 80143cc:	b09c      	sub	sp, #112	; 0x70
 80143ce:	ab1d      	add	r3, sp, #116	; 0x74
 80143d0:	9002      	str	r0, [sp, #8]
 80143d2:	9006      	str	r0, [sp, #24]
 80143d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80143d8:	4809      	ldr	r0, [pc, #36]	; (8014400 <siprintf+0x38>)
 80143da:	9107      	str	r1, [sp, #28]
 80143dc:	9104      	str	r1, [sp, #16]
 80143de:	4909      	ldr	r1, [pc, #36]	; (8014404 <siprintf+0x3c>)
 80143e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80143e4:	9105      	str	r1, [sp, #20]
 80143e6:	6800      	ldr	r0, [r0, #0]
 80143e8:	9301      	str	r3, [sp, #4]
 80143ea:	a902      	add	r1, sp, #8
 80143ec:	f002 feb4 	bl	8017158 <_svfiprintf_r>
 80143f0:	9b02      	ldr	r3, [sp, #8]
 80143f2:	2200      	movs	r2, #0
 80143f4:	701a      	strb	r2, [r3, #0]
 80143f6:	b01c      	add	sp, #112	; 0x70
 80143f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80143fc:	b003      	add	sp, #12
 80143fe:	4770      	bx	lr
 8014400:	200001c0 	.word	0x200001c0
 8014404:	ffff0208 	.word	0xffff0208

08014408 <__sread>:
 8014408:	b510      	push	{r4, lr}
 801440a:	460c      	mov	r4, r1
 801440c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014410:	f002 ffa2 	bl	8017358 <_read_r>
 8014414:	2800      	cmp	r0, #0
 8014416:	bfab      	itete	ge
 8014418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801441a:	89a3      	ldrhlt	r3, [r4, #12]
 801441c:	181b      	addge	r3, r3, r0
 801441e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014422:	bfac      	ite	ge
 8014424:	6563      	strge	r3, [r4, #84]	; 0x54
 8014426:	81a3      	strhlt	r3, [r4, #12]
 8014428:	bd10      	pop	{r4, pc}

0801442a <__swrite>:
 801442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801442e:	461f      	mov	r7, r3
 8014430:	898b      	ldrh	r3, [r1, #12]
 8014432:	05db      	lsls	r3, r3, #23
 8014434:	4605      	mov	r5, r0
 8014436:	460c      	mov	r4, r1
 8014438:	4616      	mov	r6, r2
 801443a:	d505      	bpl.n	8014448 <__swrite+0x1e>
 801443c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014440:	2302      	movs	r3, #2
 8014442:	2200      	movs	r2, #0
 8014444:	f002 f8d4 	bl	80165f0 <_lseek_r>
 8014448:	89a3      	ldrh	r3, [r4, #12]
 801444a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801444e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014452:	81a3      	strh	r3, [r4, #12]
 8014454:	4632      	mov	r2, r6
 8014456:	463b      	mov	r3, r7
 8014458:	4628      	mov	r0, r5
 801445a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801445e:	f000 be73 	b.w	8015148 <_write_r>

08014462 <__sseek>:
 8014462:	b510      	push	{r4, lr}
 8014464:	460c      	mov	r4, r1
 8014466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446a:	f002 f8c1 	bl	80165f0 <_lseek_r>
 801446e:	1c43      	adds	r3, r0, #1
 8014470:	89a3      	ldrh	r3, [r4, #12]
 8014472:	bf15      	itete	ne
 8014474:	6560      	strne	r0, [r4, #84]	; 0x54
 8014476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801447a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801447e:	81a3      	strheq	r3, [r4, #12]
 8014480:	bf18      	it	ne
 8014482:	81a3      	strhne	r3, [r4, #12]
 8014484:	bd10      	pop	{r4, pc}

08014486 <__sclose>:
 8014486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801448a:	f000 be6f 	b.w	801516c <_close_r>

0801448e <sulp>:
 801448e:	b570      	push	{r4, r5, r6, lr}
 8014490:	4604      	mov	r4, r0
 8014492:	460d      	mov	r5, r1
 8014494:	4616      	mov	r6, r2
 8014496:	ec45 4b10 	vmov	d0, r4, r5
 801449a:	f002 fc53 	bl	8016d44 <__ulp>
 801449e:	b17e      	cbz	r6, 80144c0 <sulp+0x32>
 80144a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80144a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	dd09      	ble.n	80144c0 <sulp+0x32>
 80144ac:	051b      	lsls	r3, r3, #20
 80144ae:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80144b2:	2000      	movs	r0, #0
 80144b4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80144b8:	ec41 0b17 	vmov	d7, r0, r1
 80144bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80144c0:	bd70      	pop	{r4, r5, r6, pc}
 80144c2:	0000      	movs	r0, r0
 80144c4:	0000      	movs	r0, r0
	...

080144c8 <_strtod_l>:
 80144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144cc:	ed2d 8b0e 	vpush	{d8-d14}
 80144d0:	b097      	sub	sp, #92	; 0x5c
 80144d2:	461f      	mov	r7, r3
 80144d4:	2300      	movs	r3, #0
 80144d6:	9312      	str	r3, [sp, #72]	; 0x48
 80144d8:	4ba1      	ldr	r3, [pc, #644]	; (8014760 <_strtod_l+0x298>)
 80144da:	920d      	str	r2, [sp, #52]	; 0x34
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	9307      	str	r3, [sp, #28]
 80144e0:	4604      	mov	r4, r0
 80144e2:	4618      	mov	r0, r3
 80144e4:	468b      	mov	fp, r1
 80144e6:	f7eb feab 	bl	8000240 <strlen>
 80144ea:	f04f 0800 	mov.w	r8, #0
 80144ee:	4605      	mov	r5, r0
 80144f0:	f04f 0900 	mov.w	r9, #0
 80144f4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80144f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144fa:	7813      	ldrb	r3, [r2, #0]
 80144fc:	2b2b      	cmp	r3, #43	; 0x2b
 80144fe:	d04d      	beq.n	801459c <_strtod_l+0xd4>
 8014500:	d83a      	bhi.n	8014578 <_strtod_l+0xb0>
 8014502:	2b0d      	cmp	r3, #13
 8014504:	d833      	bhi.n	801456e <_strtod_l+0xa6>
 8014506:	2b08      	cmp	r3, #8
 8014508:	d833      	bhi.n	8014572 <_strtod_l+0xaa>
 801450a:	2b00      	cmp	r3, #0
 801450c:	d03d      	beq.n	801458a <_strtod_l+0xc2>
 801450e:	2300      	movs	r3, #0
 8014510:	9308      	str	r3, [sp, #32]
 8014512:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014514:	7833      	ldrb	r3, [r6, #0]
 8014516:	2b30      	cmp	r3, #48	; 0x30
 8014518:	f040 80b0 	bne.w	801467c <_strtod_l+0x1b4>
 801451c:	7873      	ldrb	r3, [r6, #1]
 801451e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014522:	2b58      	cmp	r3, #88	; 0x58
 8014524:	d167      	bne.n	80145f6 <_strtod_l+0x12e>
 8014526:	9b08      	ldr	r3, [sp, #32]
 8014528:	9301      	str	r3, [sp, #4]
 801452a:	ab12      	add	r3, sp, #72	; 0x48
 801452c:	9702      	str	r7, [sp, #8]
 801452e:	9300      	str	r3, [sp, #0]
 8014530:	4a8c      	ldr	r2, [pc, #560]	; (8014764 <_strtod_l+0x29c>)
 8014532:	ab13      	add	r3, sp, #76	; 0x4c
 8014534:	a911      	add	r1, sp, #68	; 0x44
 8014536:	4620      	mov	r0, r4
 8014538:	f001 fd4e 	bl	8015fd8 <__gethex>
 801453c:	f010 0507 	ands.w	r5, r0, #7
 8014540:	4607      	mov	r7, r0
 8014542:	d005      	beq.n	8014550 <_strtod_l+0x88>
 8014544:	2d06      	cmp	r5, #6
 8014546:	d12b      	bne.n	80145a0 <_strtod_l+0xd8>
 8014548:	3601      	adds	r6, #1
 801454a:	2300      	movs	r3, #0
 801454c:	9611      	str	r6, [sp, #68]	; 0x44
 801454e:	9308      	str	r3, [sp, #32]
 8014550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014552:	2b00      	cmp	r3, #0
 8014554:	f040 854e 	bne.w	8014ff4 <_strtod_l+0xb2c>
 8014558:	9b08      	ldr	r3, [sp, #32]
 801455a:	b1e3      	cbz	r3, 8014596 <_strtod_l+0xce>
 801455c:	ec49 8b17 	vmov	d7, r8, r9
 8014560:	eeb1 0b47 	vneg.f64	d0, d7
 8014564:	b017      	add	sp, #92	; 0x5c
 8014566:	ecbd 8b0e 	vpop	{d8-d14}
 801456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801456e:	2b20      	cmp	r3, #32
 8014570:	d1cd      	bne.n	801450e <_strtod_l+0x46>
 8014572:	3201      	adds	r2, #1
 8014574:	9211      	str	r2, [sp, #68]	; 0x44
 8014576:	e7bf      	b.n	80144f8 <_strtod_l+0x30>
 8014578:	2b2d      	cmp	r3, #45	; 0x2d
 801457a:	d1c8      	bne.n	801450e <_strtod_l+0x46>
 801457c:	2301      	movs	r3, #1
 801457e:	9308      	str	r3, [sp, #32]
 8014580:	1c53      	adds	r3, r2, #1
 8014582:	9311      	str	r3, [sp, #68]	; 0x44
 8014584:	7853      	ldrb	r3, [r2, #1]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d1c3      	bne.n	8014512 <_strtod_l+0x4a>
 801458a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801458c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014590:	2b00      	cmp	r3, #0
 8014592:	f040 852d 	bne.w	8014ff0 <_strtod_l+0xb28>
 8014596:	ec49 8b10 	vmov	d0, r8, r9
 801459a:	e7e3      	b.n	8014564 <_strtod_l+0x9c>
 801459c:	2300      	movs	r3, #0
 801459e:	e7ee      	b.n	801457e <_strtod_l+0xb6>
 80145a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80145a2:	b13a      	cbz	r2, 80145b4 <_strtod_l+0xec>
 80145a4:	2135      	movs	r1, #53	; 0x35
 80145a6:	a814      	add	r0, sp, #80	; 0x50
 80145a8:	f002 fcd4 	bl	8016f54 <__copybits>
 80145ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80145ae:	4620      	mov	r0, r4
 80145b0:	f002 f896 	bl	80166e0 <_Bfree>
 80145b4:	3d01      	subs	r5, #1
 80145b6:	2d04      	cmp	r5, #4
 80145b8:	d806      	bhi.n	80145c8 <_strtod_l+0x100>
 80145ba:	e8df f005 	tbb	[pc, r5]
 80145be:	030a      	.short	0x030a
 80145c0:	1714      	.short	0x1714
 80145c2:	0a          	.byte	0x0a
 80145c3:	00          	.byte	0x00
 80145c4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80145c8:	073f      	lsls	r7, r7, #28
 80145ca:	d5c1      	bpl.n	8014550 <_strtod_l+0x88>
 80145cc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80145d0:	e7be      	b.n	8014550 <_strtod_l+0x88>
 80145d2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80145d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80145d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80145dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80145e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80145e4:	e7f0      	b.n	80145c8 <_strtod_l+0x100>
 80145e6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014768 <_strtod_l+0x2a0>
 80145ea:	e7ed      	b.n	80145c8 <_strtod_l+0x100>
 80145ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80145f0:	f04f 38ff 	mov.w	r8, #4294967295
 80145f4:	e7e8      	b.n	80145c8 <_strtod_l+0x100>
 80145f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145f8:	1c5a      	adds	r2, r3, #1
 80145fa:	9211      	str	r2, [sp, #68]	; 0x44
 80145fc:	785b      	ldrb	r3, [r3, #1]
 80145fe:	2b30      	cmp	r3, #48	; 0x30
 8014600:	d0f9      	beq.n	80145f6 <_strtod_l+0x12e>
 8014602:	2b00      	cmp	r3, #0
 8014604:	d0a4      	beq.n	8014550 <_strtod_l+0x88>
 8014606:	2301      	movs	r3, #1
 8014608:	f04f 0a00 	mov.w	sl, #0
 801460c:	9304      	str	r3, [sp, #16]
 801460e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014610:	930a      	str	r3, [sp, #40]	; 0x28
 8014612:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014616:	f8cd a018 	str.w	sl, [sp, #24]
 801461a:	220a      	movs	r2, #10
 801461c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801461e:	7807      	ldrb	r7, [r0, #0]
 8014620:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014624:	b2d9      	uxtb	r1, r3
 8014626:	2909      	cmp	r1, #9
 8014628:	d92a      	bls.n	8014680 <_strtod_l+0x1b8>
 801462a:	9907      	ldr	r1, [sp, #28]
 801462c:	462a      	mov	r2, r5
 801462e:	f002 feaf 	bl	8017390 <strncmp>
 8014632:	2800      	cmp	r0, #0
 8014634:	d033      	beq.n	801469e <_strtod_l+0x1d6>
 8014636:	2000      	movs	r0, #0
 8014638:	9b06      	ldr	r3, [sp, #24]
 801463a:	463a      	mov	r2, r7
 801463c:	4601      	mov	r1, r0
 801463e:	4607      	mov	r7, r0
 8014640:	2a65      	cmp	r2, #101	; 0x65
 8014642:	d001      	beq.n	8014648 <_strtod_l+0x180>
 8014644:	2a45      	cmp	r2, #69	; 0x45
 8014646:	d117      	bne.n	8014678 <_strtod_l+0x1b0>
 8014648:	b91b      	cbnz	r3, 8014652 <_strtod_l+0x18a>
 801464a:	9b04      	ldr	r3, [sp, #16]
 801464c:	4303      	orrs	r3, r0
 801464e:	d09c      	beq.n	801458a <_strtod_l+0xc2>
 8014650:	2300      	movs	r3, #0
 8014652:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8014656:	f10b 0201 	add.w	r2, fp, #1
 801465a:	9211      	str	r2, [sp, #68]	; 0x44
 801465c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8014660:	2a2b      	cmp	r2, #43	; 0x2b
 8014662:	d071      	beq.n	8014748 <_strtod_l+0x280>
 8014664:	2a2d      	cmp	r2, #45	; 0x2d
 8014666:	d077      	beq.n	8014758 <_strtod_l+0x290>
 8014668:	f04f 0e00 	mov.w	lr, #0
 801466c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8014670:	2d09      	cmp	r5, #9
 8014672:	d97f      	bls.n	8014774 <_strtod_l+0x2ac>
 8014674:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8014678:	2500      	movs	r5, #0
 801467a:	e09b      	b.n	80147b4 <_strtod_l+0x2ec>
 801467c:	2300      	movs	r3, #0
 801467e:	e7c3      	b.n	8014608 <_strtod_l+0x140>
 8014680:	9906      	ldr	r1, [sp, #24]
 8014682:	2908      	cmp	r1, #8
 8014684:	bfdd      	ittte	le
 8014686:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014688:	fb02 3301 	mlale	r3, r2, r1, r3
 801468c:	9309      	strle	r3, [sp, #36]	; 0x24
 801468e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014692:	9b06      	ldr	r3, [sp, #24]
 8014694:	3001      	adds	r0, #1
 8014696:	3301      	adds	r3, #1
 8014698:	9306      	str	r3, [sp, #24]
 801469a:	9011      	str	r0, [sp, #68]	; 0x44
 801469c:	e7be      	b.n	801461c <_strtod_l+0x154>
 801469e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146a0:	195a      	adds	r2, r3, r5
 80146a2:	9211      	str	r2, [sp, #68]	; 0x44
 80146a4:	5d5a      	ldrb	r2, [r3, r5]
 80146a6:	9b06      	ldr	r3, [sp, #24]
 80146a8:	b3a3      	cbz	r3, 8014714 <_strtod_l+0x24c>
 80146aa:	4607      	mov	r7, r0
 80146ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80146b0:	2909      	cmp	r1, #9
 80146b2:	d912      	bls.n	80146da <_strtod_l+0x212>
 80146b4:	2101      	movs	r1, #1
 80146b6:	e7c3      	b.n	8014640 <_strtod_l+0x178>
 80146b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146ba:	1c5a      	adds	r2, r3, #1
 80146bc:	9211      	str	r2, [sp, #68]	; 0x44
 80146be:	785a      	ldrb	r2, [r3, #1]
 80146c0:	3001      	adds	r0, #1
 80146c2:	2a30      	cmp	r2, #48	; 0x30
 80146c4:	d0f8      	beq.n	80146b8 <_strtod_l+0x1f0>
 80146c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80146ca:	2b08      	cmp	r3, #8
 80146cc:	f200 8497 	bhi.w	8014ffe <_strtod_l+0xb36>
 80146d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146d2:	930a      	str	r3, [sp, #40]	; 0x28
 80146d4:	4607      	mov	r7, r0
 80146d6:	2000      	movs	r0, #0
 80146d8:	4603      	mov	r3, r0
 80146da:	3a30      	subs	r2, #48	; 0x30
 80146dc:	f100 0101 	add.w	r1, r0, #1
 80146e0:	d012      	beq.n	8014708 <_strtod_l+0x240>
 80146e2:	440f      	add	r7, r1
 80146e4:	eb00 0c03 	add.w	ip, r0, r3
 80146e8:	4619      	mov	r1, r3
 80146ea:	250a      	movs	r5, #10
 80146ec:	4561      	cmp	r1, ip
 80146ee:	d113      	bne.n	8014718 <_strtod_l+0x250>
 80146f0:	1819      	adds	r1, r3, r0
 80146f2:	2908      	cmp	r1, #8
 80146f4:	f103 0301 	add.w	r3, r3, #1
 80146f8:	4403      	add	r3, r0
 80146fa:	dc1c      	bgt.n	8014736 <_strtod_l+0x26e>
 80146fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146fe:	210a      	movs	r1, #10
 8014700:	fb01 2200 	mla	r2, r1, r0, r2
 8014704:	9209      	str	r2, [sp, #36]	; 0x24
 8014706:	2100      	movs	r1, #0
 8014708:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801470a:	1c50      	adds	r0, r2, #1
 801470c:	9011      	str	r0, [sp, #68]	; 0x44
 801470e:	7852      	ldrb	r2, [r2, #1]
 8014710:	4608      	mov	r0, r1
 8014712:	e7cb      	b.n	80146ac <_strtod_l+0x1e4>
 8014714:	9806      	ldr	r0, [sp, #24]
 8014716:	e7d4      	b.n	80146c2 <_strtod_l+0x1fa>
 8014718:	2908      	cmp	r1, #8
 801471a:	dc04      	bgt.n	8014726 <_strtod_l+0x25e>
 801471c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801471e:	436e      	muls	r6, r5
 8014720:	9609      	str	r6, [sp, #36]	; 0x24
 8014722:	3101      	adds	r1, #1
 8014724:	e7e2      	b.n	80146ec <_strtod_l+0x224>
 8014726:	f101 0e01 	add.w	lr, r1, #1
 801472a:	f1be 0f10 	cmp.w	lr, #16
 801472e:	bfd8      	it	le
 8014730:	fb05 fa0a 	mulle.w	sl, r5, sl
 8014734:	e7f5      	b.n	8014722 <_strtod_l+0x25a>
 8014736:	2b10      	cmp	r3, #16
 8014738:	bfdc      	itt	le
 801473a:	210a      	movle	r1, #10
 801473c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8014740:	e7e1      	b.n	8014706 <_strtod_l+0x23e>
 8014742:	2700      	movs	r7, #0
 8014744:	2101      	movs	r1, #1
 8014746:	e780      	b.n	801464a <_strtod_l+0x182>
 8014748:	f04f 0e00 	mov.w	lr, #0
 801474c:	f10b 0202 	add.w	r2, fp, #2
 8014750:	9211      	str	r2, [sp, #68]	; 0x44
 8014752:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8014756:	e789      	b.n	801466c <_strtod_l+0x1a4>
 8014758:	f04f 0e01 	mov.w	lr, #1
 801475c:	e7f6      	b.n	801474c <_strtod_l+0x284>
 801475e:	bf00      	nop
 8014760:	08018618 	.word	0x08018618
 8014764:	080183cc 	.word	0x080183cc
 8014768:	7ff00000 	.word	0x7ff00000
 801476c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801476e:	1c55      	adds	r5, r2, #1
 8014770:	9511      	str	r5, [sp, #68]	; 0x44
 8014772:	7852      	ldrb	r2, [r2, #1]
 8014774:	2a30      	cmp	r2, #48	; 0x30
 8014776:	d0f9      	beq.n	801476c <_strtod_l+0x2a4>
 8014778:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801477c:	2d08      	cmp	r5, #8
 801477e:	f63f af7b 	bhi.w	8014678 <_strtod_l+0x1b0>
 8014782:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8014786:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014788:	9207      	str	r2, [sp, #28]
 801478a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801478c:	1c55      	adds	r5, r2, #1
 801478e:	9511      	str	r5, [sp, #68]	; 0x44
 8014790:	7852      	ldrb	r2, [r2, #1]
 8014792:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8014796:	2e09      	cmp	r6, #9
 8014798:	d937      	bls.n	801480a <_strtod_l+0x342>
 801479a:	9e07      	ldr	r6, [sp, #28]
 801479c:	1bad      	subs	r5, r5, r6
 801479e:	2d08      	cmp	r5, #8
 80147a0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80147a4:	dc02      	bgt.n	80147ac <_strtod_l+0x2e4>
 80147a6:	4565      	cmp	r5, ip
 80147a8:	bfa8      	it	ge
 80147aa:	4665      	movge	r5, ip
 80147ac:	f1be 0f00 	cmp.w	lr, #0
 80147b0:	d000      	beq.n	80147b4 <_strtod_l+0x2ec>
 80147b2:	426d      	negs	r5, r5
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d14d      	bne.n	8014854 <_strtod_l+0x38c>
 80147b8:	9b04      	ldr	r3, [sp, #16]
 80147ba:	4303      	orrs	r3, r0
 80147bc:	f47f aec8 	bne.w	8014550 <_strtod_l+0x88>
 80147c0:	2900      	cmp	r1, #0
 80147c2:	f47f aee2 	bne.w	801458a <_strtod_l+0xc2>
 80147c6:	2a69      	cmp	r2, #105	; 0x69
 80147c8:	d027      	beq.n	801481a <_strtod_l+0x352>
 80147ca:	dc24      	bgt.n	8014816 <_strtod_l+0x34e>
 80147cc:	2a49      	cmp	r2, #73	; 0x49
 80147ce:	d024      	beq.n	801481a <_strtod_l+0x352>
 80147d0:	2a4e      	cmp	r2, #78	; 0x4e
 80147d2:	f47f aeda 	bne.w	801458a <_strtod_l+0xc2>
 80147d6:	4996      	ldr	r1, [pc, #600]	; (8014a30 <_strtod_l+0x568>)
 80147d8:	a811      	add	r0, sp, #68	; 0x44
 80147da:	f001 fe55 	bl	8016488 <__match>
 80147de:	2800      	cmp	r0, #0
 80147e0:	f43f aed3 	beq.w	801458a <_strtod_l+0xc2>
 80147e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	2b28      	cmp	r3, #40	; 0x28
 80147ea:	d12d      	bne.n	8014848 <_strtod_l+0x380>
 80147ec:	4991      	ldr	r1, [pc, #580]	; (8014a34 <_strtod_l+0x56c>)
 80147ee:	aa14      	add	r2, sp, #80	; 0x50
 80147f0:	a811      	add	r0, sp, #68	; 0x44
 80147f2:	f001 fe5d 	bl	80164b0 <__hexnan>
 80147f6:	2805      	cmp	r0, #5
 80147f8:	d126      	bne.n	8014848 <_strtod_l+0x380>
 80147fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80147fc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014800:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014804:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014808:	e6a2      	b.n	8014550 <_strtod_l+0x88>
 801480a:	250a      	movs	r5, #10
 801480c:	fb05 250c 	mla	r5, r5, ip, r2
 8014810:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014814:	e7b9      	b.n	801478a <_strtod_l+0x2c2>
 8014816:	2a6e      	cmp	r2, #110	; 0x6e
 8014818:	e7db      	b.n	80147d2 <_strtod_l+0x30a>
 801481a:	4987      	ldr	r1, [pc, #540]	; (8014a38 <_strtod_l+0x570>)
 801481c:	a811      	add	r0, sp, #68	; 0x44
 801481e:	f001 fe33 	bl	8016488 <__match>
 8014822:	2800      	cmp	r0, #0
 8014824:	f43f aeb1 	beq.w	801458a <_strtod_l+0xc2>
 8014828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801482a:	4984      	ldr	r1, [pc, #528]	; (8014a3c <_strtod_l+0x574>)
 801482c:	3b01      	subs	r3, #1
 801482e:	a811      	add	r0, sp, #68	; 0x44
 8014830:	9311      	str	r3, [sp, #68]	; 0x44
 8014832:	f001 fe29 	bl	8016488 <__match>
 8014836:	b910      	cbnz	r0, 801483e <_strtod_l+0x376>
 8014838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801483a:	3301      	adds	r3, #1
 801483c:	9311      	str	r3, [sp, #68]	; 0x44
 801483e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8014a50 <_strtod_l+0x588>
 8014842:	f04f 0800 	mov.w	r8, #0
 8014846:	e683      	b.n	8014550 <_strtod_l+0x88>
 8014848:	487d      	ldr	r0, [pc, #500]	; (8014a40 <_strtod_l+0x578>)
 801484a:	f002 fd99 	bl	8017380 <nan>
 801484e:	ec59 8b10 	vmov	r8, r9, d0
 8014852:	e67d      	b.n	8014550 <_strtod_l+0x88>
 8014854:	1bea      	subs	r2, r5, r7
 8014856:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801485a:	9207      	str	r2, [sp, #28]
 801485c:	9a06      	ldr	r2, [sp, #24]
 801485e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014862:	2a00      	cmp	r2, #0
 8014864:	bf08      	it	eq
 8014866:	461a      	moveq	r2, r3
 8014868:	2b10      	cmp	r3, #16
 801486a:	9206      	str	r2, [sp, #24]
 801486c:	461a      	mov	r2, r3
 801486e:	bfa8      	it	ge
 8014870:	2210      	movge	r2, #16
 8014872:	2b09      	cmp	r3, #9
 8014874:	ec59 8b17 	vmov	r8, r9, d7
 8014878:	dd0c      	ble.n	8014894 <_strtod_l+0x3cc>
 801487a:	4972      	ldr	r1, [pc, #456]	; (8014a44 <_strtod_l+0x57c>)
 801487c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014880:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8014884:	ee06 aa90 	vmov	s13, sl
 8014888:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801488c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014890:	ec59 8b16 	vmov	r8, r9, d6
 8014894:	2b0f      	cmp	r3, #15
 8014896:	dc36      	bgt.n	8014906 <_strtod_l+0x43e>
 8014898:	9907      	ldr	r1, [sp, #28]
 801489a:	2900      	cmp	r1, #0
 801489c:	f43f ae58 	beq.w	8014550 <_strtod_l+0x88>
 80148a0:	dd23      	ble.n	80148ea <_strtod_l+0x422>
 80148a2:	2916      	cmp	r1, #22
 80148a4:	dc0b      	bgt.n	80148be <_strtod_l+0x3f6>
 80148a6:	4b67      	ldr	r3, [pc, #412]	; (8014a44 <_strtod_l+0x57c>)
 80148a8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80148ac:	ed93 7b00 	vldr	d7, [r3]
 80148b0:	ec49 8b16 	vmov	d6, r8, r9
 80148b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80148b8:	ec59 8b17 	vmov	r8, r9, d7
 80148bc:	e648      	b.n	8014550 <_strtod_l+0x88>
 80148be:	9807      	ldr	r0, [sp, #28]
 80148c0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80148c4:	4281      	cmp	r1, r0
 80148c6:	db1e      	blt.n	8014906 <_strtod_l+0x43e>
 80148c8:	4a5e      	ldr	r2, [pc, #376]	; (8014a44 <_strtod_l+0x57c>)
 80148ca:	f1c3 030f 	rsb	r3, r3, #15
 80148ce:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80148d2:	ed91 7b00 	vldr	d7, [r1]
 80148d6:	ec49 8b16 	vmov	d6, r8, r9
 80148da:	1ac3      	subs	r3, r0, r3
 80148dc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80148e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80148e4:	ed92 6b00 	vldr	d6, [r2]
 80148e8:	e7e4      	b.n	80148b4 <_strtod_l+0x3ec>
 80148ea:	9907      	ldr	r1, [sp, #28]
 80148ec:	3116      	adds	r1, #22
 80148ee:	db0a      	blt.n	8014906 <_strtod_l+0x43e>
 80148f0:	4b54      	ldr	r3, [pc, #336]	; (8014a44 <_strtod_l+0x57c>)
 80148f2:	1b7d      	subs	r5, r7, r5
 80148f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80148f8:	ed95 7b00 	vldr	d7, [r5]
 80148fc:	ec49 8b16 	vmov	d6, r8, r9
 8014900:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014904:	e7d8      	b.n	80148b8 <_strtod_l+0x3f0>
 8014906:	9907      	ldr	r1, [sp, #28]
 8014908:	1a9a      	subs	r2, r3, r2
 801490a:	440a      	add	r2, r1
 801490c:	2a00      	cmp	r2, #0
 801490e:	dd6f      	ble.n	80149f0 <_strtod_l+0x528>
 8014910:	f012 000f 	ands.w	r0, r2, #15
 8014914:	d00a      	beq.n	801492c <_strtod_l+0x464>
 8014916:	494b      	ldr	r1, [pc, #300]	; (8014a44 <_strtod_l+0x57c>)
 8014918:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801491c:	ed91 7b00 	vldr	d7, [r1]
 8014920:	ec49 8b16 	vmov	d6, r8, r9
 8014924:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014928:	ec59 8b17 	vmov	r8, r9, d7
 801492c:	f032 020f 	bics.w	r2, r2, #15
 8014930:	d04f      	beq.n	80149d2 <_strtod_l+0x50a>
 8014932:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014936:	dd22      	ble.n	801497e <_strtod_l+0x4b6>
 8014938:	2500      	movs	r5, #0
 801493a:	462e      	mov	r6, r5
 801493c:	9506      	str	r5, [sp, #24]
 801493e:	462f      	mov	r7, r5
 8014940:	2322      	movs	r3, #34	; 0x22
 8014942:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014a50 <_strtod_l+0x588>
 8014946:	6023      	str	r3, [r4, #0]
 8014948:	f04f 0800 	mov.w	r8, #0
 801494c:	9b06      	ldr	r3, [sp, #24]
 801494e:	2b00      	cmp	r3, #0
 8014950:	f43f adfe 	beq.w	8014550 <_strtod_l+0x88>
 8014954:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014956:	4620      	mov	r0, r4
 8014958:	f001 fec2 	bl	80166e0 <_Bfree>
 801495c:	4639      	mov	r1, r7
 801495e:	4620      	mov	r0, r4
 8014960:	f001 febe 	bl	80166e0 <_Bfree>
 8014964:	4631      	mov	r1, r6
 8014966:	4620      	mov	r0, r4
 8014968:	f001 feba 	bl	80166e0 <_Bfree>
 801496c:	9906      	ldr	r1, [sp, #24]
 801496e:	4620      	mov	r0, r4
 8014970:	f001 feb6 	bl	80166e0 <_Bfree>
 8014974:	4629      	mov	r1, r5
 8014976:	4620      	mov	r0, r4
 8014978:	f001 feb2 	bl	80166e0 <_Bfree>
 801497c:	e5e8      	b.n	8014550 <_strtod_l+0x88>
 801497e:	2000      	movs	r0, #0
 8014980:	ec49 8b17 	vmov	d7, r8, r9
 8014984:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014a48 <_strtod_l+0x580>
 8014988:	1112      	asrs	r2, r2, #4
 801498a:	4601      	mov	r1, r0
 801498c:	2a01      	cmp	r2, #1
 801498e:	dc23      	bgt.n	80149d8 <_strtod_l+0x510>
 8014990:	b108      	cbz	r0, 8014996 <_strtod_l+0x4ce>
 8014992:	ec59 8b17 	vmov	r8, r9, d7
 8014996:	4a2c      	ldr	r2, [pc, #176]	; (8014a48 <_strtod_l+0x580>)
 8014998:	482c      	ldr	r0, [pc, #176]	; (8014a4c <_strtod_l+0x584>)
 801499a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801499e:	ed92 7b00 	vldr	d7, [r2]
 80149a2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80149a6:	ec49 8b16 	vmov	d6, r8, r9
 80149aa:	4a29      	ldr	r2, [pc, #164]	; (8014a50 <_strtod_l+0x588>)
 80149ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80149b0:	ee17 1a90 	vmov	r1, s15
 80149b4:	400a      	ands	r2, r1
 80149b6:	4282      	cmp	r2, r0
 80149b8:	ec59 8b17 	vmov	r8, r9, d7
 80149bc:	d8bc      	bhi.n	8014938 <_strtod_l+0x470>
 80149be:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80149c2:	4282      	cmp	r2, r0
 80149c4:	bf86      	itte	hi
 80149c6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8014a54 <_strtod_l+0x58c>
 80149ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80149ce:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80149d2:	2200      	movs	r2, #0
 80149d4:	9204      	str	r2, [sp, #16]
 80149d6:	e078      	b.n	8014aca <_strtod_l+0x602>
 80149d8:	07d6      	lsls	r6, r2, #31
 80149da:	d504      	bpl.n	80149e6 <_strtod_l+0x51e>
 80149dc:	ed9c 6b00 	vldr	d6, [ip]
 80149e0:	2001      	movs	r0, #1
 80149e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80149e6:	3101      	adds	r1, #1
 80149e8:	1052      	asrs	r2, r2, #1
 80149ea:	f10c 0c08 	add.w	ip, ip, #8
 80149ee:	e7cd      	b.n	801498c <_strtod_l+0x4c4>
 80149f0:	d0ef      	beq.n	80149d2 <_strtod_l+0x50a>
 80149f2:	4252      	negs	r2, r2
 80149f4:	f012 000f 	ands.w	r0, r2, #15
 80149f8:	d00a      	beq.n	8014a10 <_strtod_l+0x548>
 80149fa:	4912      	ldr	r1, [pc, #72]	; (8014a44 <_strtod_l+0x57c>)
 80149fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014a00:	ed91 7b00 	vldr	d7, [r1]
 8014a04:	ec49 8b16 	vmov	d6, r8, r9
 8014a08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014a0c:	ec59 8b17 	vmov	r8, r9, d7
 8014a10:	1112      	asrs	r2, r2, #4
 8014a12:	d0de      	beq.n	80149d2 <_strtod_l+0x50a>
 8014a14:	2a1f      	cmp	r2, #31
 8014a16:	dd1f      	ble.n	8014a58 <_strtod_l+0x590>
 8014a18:	2500      	movs	r5, #0
 8014a1a:	462e      	mov	r6, r5
 8014a1c:	9506      	str	r5, [sp, #24]
 8014a1e:	462f      	mov	r7, r5
 8014a20:	2322      	movs	r3, #34	; 0x22
 8014a22:	f04f 0800 	mov.w	r8, #0
 8014a26:	f04f 0900 	mov.w	r9, #0
 8014a2a:	6023      	str	r3, [r4, #0]
 8014a2c:	e78e      	b.n	801494c <_strtod_l+0x484>
 8014a2e:	bf00      	nop
 8014a30:	0801839d 	.word	0x0801839d
 8014a34:	080183e0 	.word	0x080183e0
 8014a38:	08018395 	.word	0x08018395
 8014a3c:	08018524 	.word	0x08018524
 8014a40:	080187d0 	.word	0x080187d0
 8014a44:	080186b0 	.word	0x080186b0
 8014a48:	08018688 	.word	0x08018688
 8014a4c:	7ca00000 	.word	0x7ca00000
 8014a50:	7ff00000 	.word	0x7ff00000
 8014a54:	7fefffff 	.word	0x7fefffff
 8014a58:	f012 0110 	ands.w	r1, r2, #16
 8014a5c:	bf18      	it	ne
 8014a5e:	216a      	movne	r1, #106	; 0x6a
 8014a60:	9104      	str	r1, [sp, #16]
 8014a62:	ec49 8b17 	vmov	d7, r8, r9
 8014a66:	49be      	ldr	r1, [pc, #760]	; (8014d60 <_strtod_l+0x898>)
 8014a68:	2000      	movs	r0, #0
 8014a6a:	07d6      	lsls	r6, r2, #31
 8014a6c:	d504      	bpl.n	8014a78 <_strtod_l+0x5b0>
 8014a6e:	ed91 6b00 	vldr	d6, [r1]
 8014a72:	2001      	movs	r0, #1
 8014a74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014a78:	1052      	asrs	r2, r2, #1
 8014a7a:	f101 0108 	add.w	r1, r1, #8
 8014a7e:	d1f4      	bne.n	8014a6a <_strtod_l+0x5a2>
 8014a80:	b108      	cbz	r0, 8014a86 <_strtod_l+0x5be>
 8014a82:	ec59 8b17 	vmov	r8, r9, d7
 8014a86:	9a04      	ldr	r2, [sp, #16]
 8014a88:	b1c2      	cbz	r2, 8014abc <_strtod_l+0x5f4>
 8014a8a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8014a8e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8014a92:	2a00      	cmp	r2, #0
 8014a94:	4648      	mov	r0, r9
 8014a96:	dd11      	ble.n	8014abc <_strtod_l+0x5f4>
 8014a98:	2a1f      	cmp	r2, #31
 8014a9a:	f340 812e 	ble.w	8014cfa <_strtod_l+0x832>
 8014a9e:	2a34      	cmp	r2, #52	; 0x34
 8014aa0:	bfde      	ittt	le
 8014aa2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8014aa6:	f04f 32ff 	movle.w	r2, #4294967295
 8014aaa:	fa02 f101 	lslle.w	r1, r2, r1
 8014aae:	f04f 0800 	mov.w	r8, #0
 8014ab2:	bfcc      	ite	gt
 8014ab4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8014ab8:	ea01 0900 	andle.w	r9, r1, r0
 8014abc:	ec49 8b17 	vmov	d7, r8, r9
 8014ac0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac8:	d0a6      	beq.n	8014a18 <_strtod_l+0x550>
 8014aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014acc:	9200      	str	r2, [sp, #0]
 8014ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014ad0:	9a06      	ldr	r2, [sp, #24]
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	f001 fe6c 	bl	80167b0 <__s2b>
 8014ad8:	9006      	str	r0, [sp, #24]
 8014ada:	2800      	cmp	r0, #0
 8014adc:	f43f af2c 	beq.w	8014938 <_strtod_l+0x470>
 8014ae0:	9b07      	ldr	r3, [sp, #28]
 8014ae2:	1b7d      	subs	r5, r7, r5
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	bfb4      	ite	lt
 8014ae8:	462b      	movlt	r3, r5
 8014aea:	2300      	movge	r3, #0
 8014aec:	9309      	str	r3, [sp, #36]	; 0x24
 8014aee:	9b07      	ldr	r3, [sp, #28]
 8014af0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8014d40 <_strtod_l+0x878>
 8014af4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8014d48 <_strtod_l+0x880>
 8014af8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8014d50 <_strtod_l+0x888>
 8014afc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b00:	2500      	movs	r5, #0
 8014b02:	930c      	str	r3, [sp, #48]	; 0x30
 8014b04:	462e      	mov	r6, r5
 8014b06:	9b06      	ldr	r3, [sp, #24]
 8014b08:	4620      	mov	r0, r4
 8014b0a:	6859      	ldr	r1, [r3, #4]
 8014b0c:	f001 fda8 	bl	8016660 <_Balloc>
 8014b10:	4607      	mov	r7, r0
 8014b12:	2800      	cmp	r0, #0
 8014b14:	f43f af14 	beq.w	8014940 <_strtod_l+0x478>
 8014b18:	9b06      	ldr	r3, [sp, #24]
 8014b1a:	691a      	ldr	r2, [r3, #16]
 8014b1c:	3202      	adds	r2, #2
 8014b1e:	f103 010c 	add.w	r1, r3, #12
 8014b22:	0092      	lsls	r2, r2, #2
 8014b24:	300c      	adds	r0, #12
 8014b26:	f7fe fcdc 	bl	80134e2 <memcpy>
 8014b2a:	ec49 8b10 	vmov	d0, r8, r9
 8014b2e:	aa14      	add	r2, sp, #80	; 0x50
 8014b30:	a913      	add	r1, sp, #76	; 0x4c
 8014b32:	4620      	mov	r0, r4
 8014b34:	f002 f982 	bl	8016e3c <__d2b>
 8014b38:	ec49 8b18 	vmov	d8, r8, r9
 8014b3c:	9012      	str	r0, [sp, #72]	; 0x48
 8014b3e:	2800      	cmp	r0, #0
 8014b40:	f43f aefe 	beq.w	8014940 <_strtod_l+0x478>
 8014b44:	2101      	movs	r1, #1
 8014b46:	4620      	mov	r0, r4
 8014b48:	f001 fecc 	bl	80168e4 <__i2b>
 8014b4c:	4606      	mov	r6, r0
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	f43f aef6 	beq.w	8014940 <_strtod_l+0x478>
 8014b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b56:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	bfab      	itete	ge
 8014b5c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8014b5e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8014b60:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8014b64:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8014b68:	bfac      	ite	ge
 8014b6a:	eb03 0b02 	addge.w	fp, r3, r2
 8014b6e:	eba2 0a03 	sublt.w	sl, r2, r3
 8014b72:	9a04      	ldr	r2, [sp, #16]
 8014b74:	1a9b      	subs	r3, r3, r2
 8014b76:	440b      	add	r3, r1
 8014b78:	4a7a      	ldr	r2, [pc, #488]	; (8014d64 <_strtod_l+0x89c>)
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	4293      	cmp	r3, r2
 8014b7e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8014b82:	f280 80cd 	bge.w	8014d20 <_strtod_l+0x858>
 8014b86:	1ad2      	subs	r2, r2, r3
 8014b88:	2a1f      	cmp	r2, #31
 8014b8a:	eba1 0102 	sub.w	r1, r1, r2
 8014b8e:	f04f 0001 	mov.w	r0, #1
 8014b92:	f300 80b9 	bgt.w	8014d08 <_strtod_l+0x840>
 8014b96:	fa00 f302 	lsl.w	r3, r0, r2
 8014b9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8014ba0:	eb0b 0301 	add.w	r3, fp, r1
 8014ba4:	9a04      	ldr	r2, [sp, #16]
 8014ba6:	459b      	cmp	fp, r3
 8014ba8:	448a      	add	sl, r1
 8014baa:	4492      	add	sl, r2
 8014bac:	465a      	mov	r2, fp
 8014bae:	bfa8      	it	ge
 8014bb0:	461a      	movge	r2, r3
 8014bb2:	4552      	cmp	r2, sl
 8014bb4:	bfa8      	it	ge
 8014bb6:	4652      	movge	r2, sl
 8014bb8:	2a00      	cmp	r2, #0
 8014bba:	bfc2      	ittt	gt
 8014bbc:	1a9b      	subgt	r3, r3, r2
 8014bbe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8014bc2:	ebab 0b02 	subgt.w	fp, fp, r2
 8014bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bc8:	2a00      	cmp	r2, #0
 8014bca:	dd18      	ble.n	8014bfe <_strtod_l+0x736>
 8014bcc:	4631      	mov	r1, r6
 8014bce:	4620      	mov	r0, r4
 8014bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bd2:	f001 ff47 	bl	8016a64 <__pow5mult>
 8014bd6:	4606      	mov	r6, r0
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	f43f aeb1 	beq.w	8014940 <_strtod_l+0x478>
 8014bde:	4601      	mov	r1, r0
 8014be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014be2:	4620      	mov	r0, r4
 8014be4:	f001 fe94 	bl	8016910 <__multiply>
 8014be8:	900e      	str	r0, [sp, #56]	; 0x38
 8014bea:	2800      	cmp	r0, #0
 8014bec:	f43f aea8 	beq.w	8014940 <_strtod_l+0x478>
 8014bf0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f001 fd74 	bl	80166e0 <_Bfree>
 8014bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014bfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014bfc:	9212      	str	r2, [sp, #72]	; 0x48
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	f300 8093 	bgt.w	8014d2a <_strtod_l+0x862>
 8014c04:	9b07      	ldr	r3, [sp, #28]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	dd08      	ble.n	8014c1c <_strtod_l+0x754>
 8014c0a:	4639      	mov	r1, r7
 8014c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f001 ff28 	bl	8016a64 <__pow5mult>
 8014c14:	4607      	mov	r7, r0
 8014c16:	2800      	cmp	r0, #0
 8014c18:	f43f ae92 	beq.w	8014940 <_strtod_l+0x478>
 8014c1c:	f1ba 0f00 	cmp.w	sl, #0
 8014c20:	dd08      	ble.n	8014c34 <_strtod_l+0x76c>
 8014c22:	4639      	mov	r1, r7
 8014c24:	4652      	mov	r2, sl
 8014c26:	4620      	mov	r0, r4
 8014c28:	f001 ff76 	bl	8016b18 <__lshift>
 8014c2c:	4607      	mov	r7, r0
 8014c2e:	2800      	cmp	r0, #0
 8014c30:	f43f ae86 	beq.w	8014940 <_strtod_l+0x478>
 8014c34:	f1bb 0f00 	cmp.w	fp, #0
 8014c38:	dd08      	ble.n	8014c4c <_strtod_l+0x784>
 8014c3a:	4631      	mov	r1, r6
 8014c3c:	465a      	mov	r2, fp
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f001 ff6a 	bl	8016b18 <__lshift>
 8014c44:	4606      	mov	r6, r0
 8014c46:	2800      	cmp	r0, #0
 8014c48:	f43f ae7a 	beq.w	8014940 <_strtod_l+0x478>
 8014c4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014c4e:	463a      	mov	r2, r7
 8014c50:	4620      	mov	r0, r4
 8014c52:	f001 ffed 	bl	8016c30 <__mdiff>
 8014c56:	4605      	mov	r5, r0
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	f43f ae71 	beq.w	8014940 <_strtod_l+0x478>
 8014c5e:	2300      	movs	r3, #0
 8014c60:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8014c64:	60c3      	str	r3, [r0, #12]
 8014c66:	4631      	mov	r1, r6
 8014c68:	f001 ffc6 	bl	8016bf8 <__mcmp>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	da7d      	bge.n	8014d6c <_strtod_l+0x8a4>
 8014c70:	ea5a 0308 	orrs.w	r3, sl, r8
 8014c74:	f040 80a3 	bne.w	8014dbe <_strtod_l+0x8f6>
 8014c78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	f040 809e 	bne.w	8014dbe <_strtod_l+0x8f6>
 8014c82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014c86:	0d1b      	lsrs	r3, r3, #20
 8014c88:	051b      	lsls	r3, r3, #20
 8014c8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014c8e:	f240 8096 	bls.w	8014dbe <_strtod_l+0x8f6>
 8014c92:	696b      	ldr	r3, [r5, #20]
 8014c94:	b91b      	cbnz	r3, 8014c9e <_strtod_l+0x7d6>
 8014c96:	692b      	ldr	r3, [r5, #16]
 8014c98:	2b01      	cmp	r3, #1
 8014c9a:	f340 8090 	ble.w	8014dbe <_strtod_l+0x8f6>
 8014c9e:	4629      	mov	r1, r5
 8014ca0:	2201      	movs	r2, #1
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f001 ff38 	bl	8016b18 <__lshift>
 8014ca8:	4631      	mov	r1, r6
 8014caa:	4605      	mov	r5, r0
 8014cac:	f001 ffa4 	bl	8016bf8 <__mcmp>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	f340 8084 	ble.w	8014dbe <_strtod_l+0x8f6>
 8014cb6:	9904      	ldr	r1, [sp, #16]
 8014cb8:	4a2b      	ldr	r2, [pc, #172]	; (8014d68 <_strtod_l+0x8a0>)
 8014cba:	464b      	mov	r3, r9
 8014cbc:	2900      	cmp	r1, #0
 8014cbe:	f000 809d 	beq.w	8014dfc <_strtod_l+0x934>
 8014cc2:	ea02 0109 	and.w	r1, r2, r9
 8014cc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014cca:	f300 8097 	bgt.w	8014dfc <_strtod_l+0x934>
 8014cce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014cd2:	f77f aea5 	ble.w	8014a20 <_strtod_l+0x558>
 8014cd6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014d58 <_strtod_l+0x890>
 8014cda:	ec49 8b16 	vmov	d6, r8, r9
 8014cde:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014ce2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014ce6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014cea:	4313      	orrs	r3, r2
 8014cec:	bf08      	it	eq
 8014cee:	2322      	moveq	r3, #34	; 0x22
 8014cf0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014cf4:	bf08      	it	eq
 8014cf6:	6023      	streq	r3, [r4, #0]
 8014cf8:	e62c      	b.n	8014954 <_strtod_l+0x48c>
 8014cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8014cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8014d02:	ea02 0808 	and.w	r8, r2, r8
 8014d06:	e6d9      	b.n	8014abc <_strtod_l+0x5f4>
 8014d08:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8014d0c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014d10:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8014d14:	33e2      	adds	r3, #226	; 0xe2
 8014d16:	fa00 f303 	lsl.w	r3, r0, r3
 8014d1a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8014d1e:	e73f      	b.n	8014ba0 <_strtod_l+0x6d8>
 8014d20:	2200      	movs	r2, #0
 8014d22:	2301      	movs	r3, #1
 8014d24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014d28:	e73a      	b.n	8014ba0 <_strtod_l+0x6d8>
 8014d2a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014d2c:	461a      	mov	r2, r3
 8014d2e:	4620      	mov	r0, r4
 8014d30:	f001 fef2 	bl	8016b18 <__lshift>
 8014d34:	9012      	str	r0, [sp, #72]	; 0x48
 8014d36:	2800      	cmp	r0, #0
 8014d38:	f47f af64 	bne.w	8014c04 <_strtod_l+0x73c>
 8014d3c:	e600      	b.n	8014940 <_strtod_l+0x478>
 8014d3e:	bf00      	nop
 8014d40:	94a03595 	.word	0x94a03595
 8014d44:	3fcfffff 	.word	0x3fcfffff
 8014d48:	94a03595 	.word	0x94a03595
 8014d4c:	3fdfffff 	.word	0x3fdfffff
 8014d50:	35afe535 	.word	0x35afe535
 8014d54:	3fe00000 	.word	0x3fe00000
 8014d58:	00000000 	.word	0x00000000
 8014d5c:	39500000 	.word	0x39500000
 8014d60:	080183f8 	.word	0x080183f8
 8014d64:	fffffc02 	.word	0xfffffc02
 8014d68:	7ff00000 	.word	0x7ff00000
 8014d6c:	46cb      	mov	fp, r9
 8014d6e:	d15f      	bne.n	8014e30 <_strtod_l+0x968>
 8014d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d74:	f1ba 0f00 	cmp.w	sl, #0
 8014d78:	d02a      	beq.n	8014dd0 <_strtod_l+0x908>
 8014d7a:	4aa7      	ldr	r2, [pc, #668]	; (8015018 <_strtod_l+0xb50>)
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d12b      	bne.n	8014dd8 <_strtod_l+0x910>
 8014d80:	9b04      	ldr	r3, [sp, #16]
 8014d82:	4642      	mov	r2, r8
 8014d84:	b1fb      	cbz	r3, 8014dc6 <_strtod_l+0x8fe>
 8014d86:	4ba5      	ldr	r3, [pc, #660]	; (801501c <_strtod_l+0xb54>)
 8014d88:	ea09 0303 	and.w	r3, r9, r3
 8014d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014d90:	f04f 31ff 	mov.w	r1, #4294967295
 8014d94:	d81a      	bhi.n	8014dcc <_strtod_l+0x904>
 8014d96:	0d1b      	lsrs	r3, r3, #20
 8014d98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d119      	bne.n	8014dd8 <_strtod_l+0x910>
 8014da4:	4b9e      	ldr	r3, [pc, #632]	; (8015020 <_strtod_l+0xb58>)
 8014da6:	459b      	cmp	fp, r3
 8014da8:	d102      	bne.n	8014db0 <_strtod_l+0x8e8>
 8014daa:	3201      	adds	r2, #1
 8014dac:	f43f adc8 	beq.w	8014940 <_strtod_l+0x478>
 8014db0:	4b9a      	ldr	r3, [pc, #616]	; (801501c <_strtod_l+0xb54>)
 8014db2:	ea0b 0303 	and.w	r3, fp, r3
 8014db6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8014dba:	f04f 0800 	mov.w	r8, #0
 8014dbe:	9b04      	ldr	r3, [sp, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d188      	bne.n	8014cd6 <_strtod_l+0x80e>
 8014dc4:	e5c6      	b.n	8014954 <_strtod_l+0x48c>
 8014dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dca:	e7e9      	b.n	8014da0 <_strtod_l+0x8d8>
 8014dcc:	460b      	mov	r3, r1
 8014dce:	e7e7      	b.n	8014da0 <_strtod_l+0x8d8>
 8014dd0:	ea53 0308 	orrs.w	r3, r3, r8
 8014dd4:	f43f af6f 	beq.w	8014cb6 <_strtod_l+0x7ee>
 8014dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dda:	b1cb      	cbz	r3, 8014e10 <_strtod_l+0x948>
 8014ddc:	ea13 0f0b 	tst.w	r3, fp
 8014de0:	d0ed      	beq.n	8014dbe <_strtod_l+0x8f6>
 8014de2:	9a04      	ldr	r2, [sp, #16]
 8014de4:	4640      	mov	r0, r8
 8014de6:	4649      	mov	r1, r9
 8014de8:	f1ba 0f00 	cmp.w	sl, #0
 8014dec:	d014      	beq.n	8014e18 <_strtod_l+0x950>
 8014dee:	f7ff fb4e 	bl	801448e <sulp>
 8014df2:	ee38 7b00 	vadd.f64	d7, d8, d0
 8014df6:	ec59 8b17 	vmov	r8, r9, d7
 8014dfa:	e7e0      	b.n	8014dbe <_strtod_l+0x8f6>
 8014dfc:	4013      	ands	r3, r2
 8014dfe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014e02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014e06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8014e0a:	f04f 38ff 	mov.w	r8, #4294967295
 8014e0e:	e7d6      	b.n	8014dbe <_strtod_l+0x8f6>
 8014e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e12:	ea13 0f08 	tst.w	r3, r8
 8014e16:	e7e3      	b.n	8014de0 <_strtod_l+0x918>
 8014e18:	f7ff fb39 	bl	801448e <sulp>
 8014e1c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8014e20:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e28:	ec59 8b10 	vmov	r8, r9, d0
 8014e2c:	d1c7      	bne.n	8014dbe <_strtod_l+0x8f6>
 8014e2e:	e5f7      	b.n	8014a20 <_strtod_l+0x558>
 8014e30:	4631      	mov	r1, r6
 8014e32:	4628      	mov	r0, r5
 8014e34:	f002 f85e 	bl	8016ef4 <__ratio>
 8014e38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014e3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e44:	d865      	bhi.n	8014f12 <_strtod_l+0xa4a>
 8014e46:	f1ba 0f00 	cmp.w	sl, #0
 8014e4a:	d042      	beq.n	8014ed2 <_strtod_l+0xa0a>
 8014e4c:	4b75      	ldr	r3, [pc, #468]	; (8015024 <_strtod_l+0xb5c>)
 8014e4e:	2200      	movs	r2, #0
 8014e50:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8014e54:	4871      	ldr	r0, [pc, #452]	; (801501c <_strtod_l+0xb54>)
 8014e56:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8015030 <_strtod_l+0xb68>
 8014e5a:	ea0b 0100 	and.w	r1, fp, r0
 8014e5e:	4561      	cmp	r1, ip
 8014e60:	f040 808e 	bne.w	8014f80 <_strtod_l+0xab8>
 8014e64:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8014e68:	ec49 8b10 	vmov	d0, r8, r9
 8014e6c:	ec43 2b1c 	vmov	d12, r2, r3
 8014e70:	910a      	str	r1, [sp, #40]	; 0x28
 8014e72:	f001 ff67 	bl	8016d44 <__ulp>
 8014e76:	ec49 8b1e 	vmov	d14, r8, r9
 8014e7a:	4868      	ldr	r0, [pc, #416]	; (801501c <_strtod_l+0xb54>)
 8014e7c:	eeac eb00 	vfma.f64	d14, d12, d0
 8014e80:	ee1e 3a90 	vmov	r3, s29
 8014e84:	4a68      	ldr	r2, [pc, #416]	; (8015028 <_strtod_l+0xb60>)
 8014e86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e88:	4018      	ands	r0, r3
 8014e8a:	4290      	cmp	r0, r2
 8014e8c:	ec59 8b1e 	vmov	r8, r9, d14
 8014e90:	d94e      	bls.n	8014f30 <_strtod_l+0xa68>
 8014e92:	ee18 3a90 	vmov	r3, s17
 8014e96:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014e9a:	4293      	cmp	r3, r2
 8014e9c:	d104      	bne.n	8014ea8 <_strtod_l+0x9e0>
 8014e9e:	ee18 3a10 	vmov	r3, s16
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	f43f ad4c 	beq.w	8014940 <_strtod_l+0x478>
 8014ea8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8015020 <_strtod_l+0xb58>
 8014eac:	f04f 38ff 	mov.w	r8, #4294967295
 8014eb0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f001 fc14 	bl	80166e0 <_Bfree>
 8014eb8:	4639      	mov	r1, r7
 8014eba:	4620      	mov	r0, r4
 8014ebc:	f001 fc10 	bl	80166e0 <_Bfree>
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	4620      	mov	r0, r4
 8014ec4:	f001 fc0c 	bl	80166e0 <_Bfree>
 8014ec8:	4629      	mov	r1, r5
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f001 fc08 	bl	80166e0 <_Bfree>
 8014ed0:	e619      	b.n	8014b06 <_strtod_l+0x63e>
 8014ed2:	f1b8 0f00 	cmp.w	r8, #0
 8014ed6:	d112      	bne.n	8014efe <_strtod_l+0xa36>
 8014ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014edc:	b9b3      	cbnz	r3, 8014f0c <_strtod_l+0xa44>
 8014ede:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014ee2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eea:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8014eee:	bf58      	it	pl
 8014ef0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8014ef4:	eeb1 7b4d 	vneg.f64	d7, d13
 8014ef8:	ec53 2b17 	vmov	r2, r3, d7
 8014efc:	e7aa      	b.n	8014e54 <_strtod_l+0x98c>
 8014efe:	f1b8 0f01 	cmp.w	r8, #1
 8014f02:	d103      	bne.n	8014f0c <_strtod_l+0xa44>
 8014f04:	f1b9 0f00 	cmp.w	r9, #0
 8014f08:	f43f ad8a 	beq.w	8014a20 <_strtod_l+0x558>
 8014f0c:	4b47      	ldr	r3, [pc, #284]	; (801502c <_strtod_l+0xb64>)
 8014f0e:	2200      	movs	r2, #0
 8014f10:	e79e      	b.n	8014e50 <_strtod_l+0x988>
 8014f12:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8014f16:	ee20 db0d 	vmul.f64	d13, d0, d13
 8014f1a:	f1ba 0f00 	cmp.w	sl, #0
 8014f1e:	d104      	bne.n	8014f2a <_strtod_l+0xa62>
 8014f20:	eeb1 7b4d 	vneg.f64	d7, d13
 8014f24:	ec53 2b17 	vmov	r2, r3, d7
 8014f28:	e794      	b.n	8014e54 <_strtod_l+0x98c>
 8014f2a:	eeb0 7b4d 	vmov.f64	d7, d13
 8014f2e:	e7f9      	b.n	8014f24 <_strtod_l+0xa5c>
 8014f30:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014f34:	9b04      	ldr	r3, [sp, #16]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d1ba      	bne.n	8014eb0 <_strtod_l+0x9e8>
 8014f3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014f3e:	0d1b      	lsrs	r3, r3, #20
 8014f40:	051b      	lsls	r3, r3, #20
 8014f42:	4299      	cmp	r1, r3
 8014f44:	d1b4      	bne.n	8014eb0 <_strtod_l+0x9e8>
 8014f46:	ec51 0b1d 	vmov	r0, r1, d13
 8014f4a:	f7eb fba5 	bl	8000698 <__aeabi_d2lz>
 8014f4e:	f7eb fb5d 	bl	800060c <__aeabi_l2d>
 8014f52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014f56:	ec41 0b17 	vmov	d7, r0, r1
 8014f5a:	ea43 0308 	orr.w	r3, r3, r8
 8014f5e:	ea53 030a 	orrs.w	r3, r3, sl
 8014f62:	ee3d db47 	vsub.f64	d13, d13, d7
 8014f66:	d03c      	beq.n	8014fe2 <_strtod_l+0xb1a>
 8014f68:	eeb4 dbca 	vcmpe.f64	d13, d10
 8014f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f70:	f53f acf0 	bmi.w	8014954 <_strtod_l+0x48c>
 8014f74:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8014f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f7c:	dd98      	ble.n	8014eb0 <_strtod_l+0x9e8>
 8014f7e:	e4e9      	b.n	8014954 <_strtod_l+0x48c>
 8014f80:	9804      	ldr	r0, [sp, #16]
 8014f82:	b1f0      	cbz	r0, 8014fc2 <_strtod_l+0xafa>
 8014f84:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8014f88:	d81b      	bhi.n	8014fc2 <_strtod_l+0xafa>
 8014f8a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8015010 <_strtod_l+0xb48>
 8014f8e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8014f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f96:	d811      	bhi.n	8014fbc <_strtod_l+0xaf4>
 8014f98:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8014f9c:	ee1d 3a10 	vmov	r3, s26
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	bf38      	it	cc
 8014fa4:	2301      	movcc	r3, #1
 8014fa6:	ee0d 3a10 	vmov	s26, r3
 8014faa:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8014fae:	f1ba 0f00 	cmp.w	sl, #0
 8014fb2:	d113      	bne.n	8014fdc <_strtod_l+0xb14>
 8014fb4:	eeb1 7b4d 	vneg.f64	d7, d13
 8014fb8:	ec53 2b17 	vmov	r2, r3, d7
 8014fbc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8014fc0:	1a43      	subs	r3, r0, r1
 8014fc2:	eeb0 0b48 	vmov.f64	d0, d8
 8014fc6:	ec43 2b1c 	vmov	d12, r2, r3
 8014fca:	910a      	str	r1, [sp, #40]	; 0x28
 8014fcc:	f001 feba 	bl	8016d44 <__ulp>
 8014fd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fd2:	eeac 8b00 	vfma.f64	d8, d12, d0
 8014fd6:	ec59 8b18 	vmov	r8, r9, d8
 8014fda:	e7ab      	b.n	8014f34 <_strtod_l+0xa6c>
 8014fdc:	eeb0 7b4d 	vmov.f64	d7, d13
 8014fe0:	e7ea      	b.n	8014fb8 <_strtod_l+0xaf0>
 8014fe2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8014fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fea:	f57f af61 	bpl.w	8014eb0 <_strtod_l+0x9e8>
 8014fee:	e4b1      	b.n	8014954 <_strtod_l+0x48c>
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	9308      	str	r3, [sp, #32]
 8014ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ff8:	6013      	str	r3, [r2, #0]
 8014ffa:	f7ff baad 	b.w	8014558 <_strtod_l+0x90>
 8014ffe:	2a65      	cmp	r2, #101	; 0x65
 8015000:	f43f ab9f 	beq.w	8014742 <_strtod_l+0x27a>
 8015004:	2a45      	cmp	r2, #69	; 0x45
 8015006:	f43f ab9c 	beq.w	8014742 <_strtod_l+0x27a>
 801500a:	2101      	movs	r1, #1
 801500c:	f7ff bbd4 	b.w	80147b8 <_strtod_l+0x2f0>
 8015010:	ffc00000 	.word	0xffc00000
 8015014:	41dfffff 	.word	0x41dfffff
 8015018:	000fffff 	.word	0x000fffff
 801501c:	7ff00000 	.word	0x7ff00000
 8015020:	7fefffff 	.word	0x7fefffff
 8015024:	3ff00000 	.word	0x3ff00000
 8015028:	7c9fffff 	.word	0x7c9fffff
 801502c:	bff00000 	.word	0xbff00000
 8015030:	7fe00000 	.word	0x7fe00000

08015034 <_strtod_r>:
 8015034:	4b01      	ldr	r3, [pc, #4]	; (801503c <_strtod_r+0x8>)
 8015036:	f7ff ba47 	b.w	80144c8 <_strtod_l>
 801503a:	bf00      	nop
 801503c:	20000228 	.word	0x20000228

08015040 <_strtol_l.constprop.0>:
 8015040:	2b01      	cmp	r3, #1
 8015042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015046:	d001      	beq.n	801504c <_strtol_l.constprop.0+0xc>
 8015048:	2b24      	cmp	r3, #36	; 0x24
 801504a:	d906      	bls.n	801505a <_strtol_l.constprop.0+0x1a>
 801504c:	f7fe f926 	bl	801329c <__errno>
 8015050:	2316      	movs	r3, #22
 8015052:	6003      	str	r3, [r0, #0]
 8015054:	2000      	movs	r0, #0
 8015056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801505a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015140 <_strtol_l.constprop.0+0x100>
 801505e:	460d      	mov	r5, r1
 8015060:	462e      	mov	r6, r5
 8015062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015066:	f814 700c 	ldrb.w	r7, [r4, ip]
 801506a:	f017 0708 	ands.w	r7, r7, #8
 801506e:	d1f7      	bne.n	8015060 <_strtol_l.constprop.0+0x20>
 8015070:	2c2d      	cmp	r4, #45	; 0x2d
 8015072:	d132      	bne.n	80150da <_strtol_l.constprop.0+0x9a>
 8015074:	782c      	ldrb	r4, [r5, #0]
 8015076:	2701      	movs	r7, #1
 8015078:	1cb5      	adds	r5, r6, #2
 801507a:	2b00      	cmp	r3, #0
 801507c:	d05b      	beq.n	8015136 <_strtol_l.constprop.0+0xf6>
 801507e:	2b10      	cmp	r3, #16
 8015080:	d109      	bne.n	8015096 <_strtol_l.constprop.0+0x56>
 8015082:	2c30      	cmp	r4, #48	; 0x30
 8015084:	d107      	bne.n	8015096 <_strtol_l.constprop.0+0x56>
 8015086:	782c      	ldrb	r4, [r5, #0]
 8015088:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801508c:	2c58      	cmp	r4, #88	; 0x58
 801508e:	d14d      	bne.n	801512c <_strtol_l.constprop.0+0xec>
 8015090:	786c      	ldrb	r4, [r5, #1]
 8015092:	2310      	movs	r3, #16
 8015094:	3502      	adds	r5, #2
 8015096:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801509a:	f108 38ff 	add.w	r8, r8, #4294967295
 801509e:	f04f 0c00 	mov.w	ip, #0
 80150a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80150a6:	4666      	mov	r6, ip
 80150a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80150ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80150b0:	f1be 0f09 	cmp.w	lr, #9
 80150b4:	d816      	bhi.n	80150e4 <_strtol_l.constprop.0+0xa4>
 80150b6:	4674      	mov	r4, lr
 80150b8:	42a3      	cmp	r3, r4
 80150ba:	dd24      	ble.n	8015106 <_strtol_l.constprop.0+0xc6>
 80150bc:	f1bc 0f00 	cmp.w	ip, #0
 80150c0:	db1e      	blt.n	8015100 <_strtol_l.constprop.0+0xc0>
 80150c2:	45b1      	cmp	r9, r6
 80150c4:	d31c      	bcc.n	8015100 <_strtol_l.constprop.0+0xc0>
 80150c6:	d101      	bne.n	80150cc <_strtol_l.constprop.0+0x8c>
 80150c8:	45a2      	cmp	sl, r4
 80150ca:	db19      	blt.n	8015100 <_strtol_l.constprop.0+0xc0>
 80150cc:	fb06 4603 	mla	r6, r6, r3, r4
 80150d0:	f04f 0c01 	mov.w	ip, #1
 80150d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80150d8:	e7e8      	b.n	80150ac <_strtol_l.constprop.0+0x6c>
 80150da:	2c2b      	cmp	r4, #43	; 0x2b
 80150dc:	bf04      	itt	eq
 80150de:	782c      	ldrbeq	r4, [r5, #0]
 80150e0:	1cb5      	addeq	r5, r6, #2
 80150e2:	e7ca      	b.n	801507a <_strtol_l.constprop.0+0x3a>
 80150e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80150e8:	f1be 0f19 	cmp.w	lr, #25
 80150ec:	d801      	bhi.n	80150f2 <_strtol_l.constprop.0+0xb2>
 80150ee:	3c37      	subs	r4, #55	; 0x37
 80150f0:	e7e2      	b.n	80150b8 <_strtol_l.constprop.0+0x78>
 80150f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80150f6:	f1be 0f19 	cmp.w	lr, #25
 80150fa:	d804      	bhi.n	8015106 <_strtol_l.constprop.0+0xc6>
 80150fc:	3c57      	subs	r4, #87	; 0x57
 80150fe:	e7db      	b.n	80150b8 <_strtol_l.constprop.0+0x78>
 8015100:	f04f 3cff 	mov.w	ip, #4294967295
 8015104:	e7e6      	b.n	80150d4 <_strtol_l.constprop.0+0x94>
 8015106:	f1bc 0f00 	cmp.w	ip, #0
 801510a:	da05      	bge.n	8015118 <_strtol_l.constprop.0+0xd8>
 801510c:	2322      	movs	r3, #34	; 0x22
 801510e:	6003      	str	r3, [r0, #0]
 8015110:	4646      	mov	r6, r8
 8015112:	b942      	cbnz	r2, 8015126 <_strtol_l.constprop.0+0xe6>
 8015114:	4630      	mov	r0, r6
 8015116:	e79e      	b.n	8015056 <_strtol_l.constprop.0+0x16>
 8015118:	b107      	cbz	r7, 801511c <_strtol_l.constprop.0+0xdc>
 801511a:	4276      	negs	r6, r6
 801511c:	2a00      	cmp	r2, #0
 801511e:	d0f9      	beq.n	8015114 <_strtol_l.constprop.0+0xd4>
 8015120:	f1bc 0f00 	cmp.w	ip, #0
 8015124:	d000      	beq.n	8015128 <_strtol_l.constprop.0+0xe8>
 8015126:	1e69      	subs	r1, r5, #1
 8015128:	6011      	str	r1, [r2, #0]
 801512a:	e7f3      	b.n	8015114 <_strtol_l.constprop.0+0xd4>
 801512c:	2430      	movs	r4, #48	; 0x30
 801512e:	2b00      	cmp	r3, #0
 8015130:	d1b1      	bne.n	8015096 <_strtol_l.constprop.0+0x56>
 8015132:	2308      	movs	r3, #8
 8015134:	e7af      	b.n	8015096 <_strtol_l.constprop.0+0x56>
 8015136:	2c30      	cmp	r4, #48	; 0x30
 8015138:	d0a5      	beq.n	8015086 <_strtol_l.constprop.0+0x46>
 801513a:	230a      	movs	r3, #10
 801513c:	e7ab      	b.n	8015096 <_strtol_l.constprop.0+0x56>
 801513e:	bf00      	nop
 8015140:	08018421 	.word	0x08018421

08015144 <_strtol_r>:
 8015144:	f7ff bf7c 	b.w	8015040 <_strtol_l.constprop.0>

08015148 <_write_r>:
 8015148:	b538      	push	{r3, r4, r5, lr}
 801514a:	4d07      	ldr	r5, [pc, #28]	; (8015168 <_write_r+0x20>)
 801514c:	4604      	mov	r4, r0
 801514e:	4608      	mov	r0, r1
 8015150:	4611      	mov	r1, r2
 8015152:	2200      	movs	r2, #0
 8015154:	602a      	str	r2, [r5, #0]
 8015156:	461a      	mov	r2, r3
 8015158:	f7ee fc3b 	bl	80039d2 <_write>
 801515c:	1c43      	adds	r3, r0, #1
 801515e:	d102      	bne.n	8015166 <_write_r+0x1e>
 8015160:	682b      	ldr	r3, [r5, #0]
 8015162:	b103      	cbz	r3, 8015166 <_write_r+0x1e>
 8015164:	6023      	str	r3, [r4, #0]
 8015166:	bd38      	pop	{r3, r4, r5, pc}
 8015168:	200065a4 	.word	0x200065a4

0801516c <_close_r>:
 801516c:	b538      	push	{r3, r4, r5, lr}
 801516e:	4d06      	ldr	r5, [pc, #24]	; (8015188 <_close_r+0x1c>)
 8015170:	2300      	movs	r3, #0
 8015172:	4604      	mov	r4, r0
 8015174:	4608      	mov	r0, r1
 8015176:	602b      	str	r3, [r5, #0]
 8015178:	f7f1 fb43 	bl	8006802 <_close>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d102      	bne.n	8015186 <_close_r+0x1a>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	b103      	cbz	r3, 8015186 <_close_r+0x1a>
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	bd38      	pop	{r3, r4, r5, pc}
 8015188:	200065a4 	.word	0x200065a4

0801518c <quorem>:
 801518c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015190:	6903      	ldr	r3, [r0, #16]
 8015192:	690c      	ldr	r4, [r1, #16]
 8015194:	42a3      	cmp	r3, r4
 8015196:	4607      	mov	r7, r0
 8015198:	f2c0 8081 	blt.w	801529e <quorem+0x112>
 801519c:	3c01      	subs	r4, #1
 801519e:	f101 0814 	add.w	r8, r1, #20
 80151a2:	f100 0514 	add.w	r5, r0, #20
 80151a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80151aa:	9301      	str	r3, [sp, #4]
 80151ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80151b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80151b4:	3301      	adds	r3, #1
 80151b6:	429a      	cmp	r2, r3
 80151b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80151bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80151c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80151c4:	d331      	bcc.n	801522a <quorem+0x9e>
 80151c6:	f04f 0e00 	mov.w	lr, #0
 80151ca:	4640      	mov	r0, r8
 80151cc:	46ac      	mov	ip, r5
 80151ce:	46f2      	mov	sl, lr
 80151d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80151d4:	b293      	uxth	r3, r2
 80151d6:	fb06 e303 	mla	r3, r6, r3, lr
 80151da:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80151de:	b29b      	uxth	r3, r3
 80151e0:	ebaa 0303 	sub.w	r3, sl, r3
 80151e4:	f8dc a000 	ldr.w	sl, [ip]
 80151e8:	0c12      	lsrs	r2, r2, #16
 80151ea:	fa13 f38a 	uxtah	r3, r3, sl
 80151ee:	fb06 e202 	mla	r2, r6, r2, lr
 80151f2:	9300      	str	r3, [sp, #0]
 80151f4:	9b00      	ldr	r3, [sp, #0]
 80151f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80151fa:	b292      	uxth	r2, r2
 80151fc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015204:	f8bd 3000 	ldrh.w	r3, [sp]
 8015208:	4581      	cmp	r9, r0
 801520a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801520e:	f84c 3b04 	str.w	r3, [ip], #4
 8015212:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015216:	d2db      	bcs.n	80151d0 <quorem+0x44>
 8015218:	f855 300b 	ldr.w	r3, [r5, fp]
 801521c:	b92b      	cbnz	r3, 801522a <quorem+0x9e>
 801521e:	9b01      	ldr	r3, [sp, #4]
 8015220:	3b04      	subs	r3, #4
 8015222:	429d      	cmp	r5, r3
 8015224:	461a      	mov	r2, r3
 8015226:	d32e      	bcc.n	8015286 <quorem+0xfa>
 8015228:	613c      	str	r4, [r7, #16]
 801522a:	4638      	mov	r0, r7
 801522c:	f001 fce4 	bl	8016bf8 <__mcmp>
 8015230:	2800      	cmp	r0, #0
 8015232:	db24      	blt.n	801527e <quorem+0xf2>
 8015234:	3601      	adds	r6, #1
 8015236:	4628      	mov	r0, r5
 8015238:	f04f 0c00 	mov.w	ip, #0
 801523c:	f858 2b04 	ldr.w	r2, [r8], #4
 8015240:	f8d0 e000 	ldr.w	lr, [r0]
 8015244:	b293      	uxth	r3, r2
 8015246:	ebac 0303 	sub.w	r3, ip, r3
 801524a:	0c12      	lsrs	r2, r2, #16
 801524c:	fa13 f38e 	uxtah	r3, r3, lr
 8015250:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015258:	b29b      	uxth	r3, r3
 801525a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801525e:	45c1      	cmp	r9, r8
 8015260:	f840 3b04 	str.w	r3, [r0], #4
 8015264:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015268:	d2e8      	bcs.n	801523c <quorem+0xb0>
 801526a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801526e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015272:	b922      	cbnz	r2, 801527e <quorem+0xf2>
 8015274:	3b04      	subs	r3, #4
 8015276:	429d      	cmp	r5, r3
 8015278:	461a      	mov	r2, r3
 801527a:	d30a      	bcc.n	8015292 <quorem+0x106>
 801527c:	613c      	str	r4, [r7, #16]
 801527e:	4630      	mov	r0, r6
 8015280:	b003      	add	sp, #12
 8015282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015286:	6812      	ldr	r2, [r2, #0]
 8015288:	3b04      	subs	r3, #4
 801528a:	2a00      	cmp	r2, #0
 801528c:	d1cc      	bne.n	8015228 <quorem+0x9c>
 801528e:	3c01      	subs	r4, #1
 8015290:	e7c7      	b.n	8015222 <quorem+0x96>
 8015292:	6812      	ldr	r2, [r2, #0]
 8015294:	3b04      	subs	r3, #4
 8015296:	2a00      	cmp	r2, #0
 8015298:	d1f0      	bne.n	801527c <quorem+0xf0>
 801529a:	3c01      	subs	r4, #1
 801529c:	e7eb      	b.n	8015276 <quorem+0xea>
 801529e:	2000      	movs	r0, #0
 80152a0:	e7ee      	b.n	8015280 <quorem+0xf4>
 80152a2:	0000      	movs	r0, r0
 80152a4:	0000      	movs	r0, r0
	...

080152a8 <_dtoa_r>:
 80152a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152ac:	ed2d 8b02 	vpush	{d8}
 80152b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80152b2:	b091      	sub	sp, #68	; 0x44
 80152b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80152b8:	ec59 8b10 	vmov	r8, r9, d0
 80152bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80152be:	9106      	str	r1, [sp, #24]
 80152c0:	4606      	mov	r6, r0
 80152c2:	9208      	str	r2, [sp, #32]
 80152c4:	930c      	str	r3, [sp, #48]	; 0x30
 80152c6:	b975      	cbnz	r5, 80152e6 <_dtoa_r+0x3e>
 80152c8:	2010      	movs	r0, #16
 80152ca:	f001 f9a3 	bl	8016614 <malloc>
 80152ce:	4602      	mov	r2, r0
 80152d0:	6270      	str	r0, [r6, #36]	; 0x24
 80152d2:	b920      	cbnz	r0, 80152de <_dtoa_r+0x36>
 80152d4:	4baa      	ldr	r3, [pc, #680]	; (8015580 <_dtoa_r+0x2d8>)
 80152d6:	21ea      	movs	r1, #234	; 0xea
 80152d8:	48aa      	ldr	r0, [pc, #680]	; (8015584 <_dtoa_r+0x2dc>)
 80152da:	f002 f87b 	bl	80173d4 <__assert_func>
 80152de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80152e2:	6005      	str	r5, [r0, #0]
 80152e4:	60c5      	str	r5, [r0, #12]
 80152e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80152e8:	6819      	ldr	r1, [r3, #0]
 80152ea:	b151      	cbz	r1, 8015302 <_dtoa_r+0x5a>
 80152ec:	685a      	ldr	r2, [r3, #4]
 80152ee:	604a      	str	r2, [r1, #4]
 80152f0:	2301      	movs	r3, #1
 80152f2:	4093      	lsls	r3, r2
 80152f4:	608b      	str	r3, [r1, #8]
 80152f6:	4630      	mov	r0, r6
 80152f8:	f001 f9f2 	bl	80166e0 <_Bfree>
 80152fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80152fe:	2200      	movs	r2, #0
 8015300:	601a      	str	r2, [r3, #0]
 8015302:	f1b9 0300 	subs.w	r3, r9, #0
 8015306:	bfbb      	ittet	lt
 8015308:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801530c:	9303      	strlt	r3, [sp, #12]
 801530e:	2300      	movge	r3, #0
 8015310:	2201      	movlt	r2, #1
 8015312:	bfac      	ite	ge
 8015314:	6023      	strge	r3, [r4, #0]
 8015316:	6022      	strlt	r2, [r4, #0]
 8015318:	4b9b      	ldr	r3, [pc, #620]	; (8015588 <_dtoa_r+0x2e0>)
 801531a:	9c03      	ldr	r4, [sp, #12]
 801531c:	43a3      	bics	r3, r4
 801531e:	d11c      	bne.n	801535a <_dtoa_r+0xb2>
 8015320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015322:	f242 730f 	movw	r3, #9999	; 0x270f
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801532c:	ea53 0308 	orrs.w	r3, r3, r8
 8015330:	f000 84fd 	beq.w	8015d2e <_dtoa_r+0xa86>
 8015334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015336:	b963      	cbnz	r3, 8015352 <_dtoa_r+0xaa>
 8015338:	4b94      	ldr	r3, [pc, #592]	; (801558c <_dtoa_r+0x2e4>)
 801533a:	e01f      	b.n	801537c <_dtoa_r+0xd4>
 801533c:	4b94      	ldr	r3, [pc, #592]	; (8015590 <_dtoa_r+0x2e8>)
 801533e:	9301      	str	r3, [sp, #4]
 8015340:	3308      	adds	r3, #8
 8015342:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015344:	6013      	str	r3, [r2, #0]
 8015346:	9801      	ldr	r0, [sp, #4]
 8015348:	b011      	add	sp, #68	; 0x44
 801534a:	ecbd 8b02 	vpop	{d8}
 801534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015352:	4b8e      	ldr	r3, [pc, #568]	; (801558c <_dtoa_r+0x2e4>)
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	3303      	adds	r3, #3
 8015358:	e7f3      	b.n	8015342 <_dtoa_r+0x9a>
 801535a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801535e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015366:	d10b      	bne.n	8015380 <_dtoa_r+0xd8>
 8015368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801536a:	2301      	movs	r3, #1
 801536c:	6013      	str	r3, [r2, #0]
 801536e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015370:	2b00      	cmp	r3, #0
 8015372:	f000 84d9 	beq.w	8015d28 <_dtoa_r+0xa80>
 8015376:	4887      	ldr	r0, [pc, #540]	; (8015594 <_dtoa_r+0x2ec>)
 8015378:	6018      	str	r0, [r3, #0]
 801537a:	1e43      	subs	r3, r0, #1
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	e7e2      	b.n	8015346 <_dtoa_r+0x9e>
 8015380:	a90f      	add	r1, sp, #60	; 0x3c
 8015382:	aa0e      	add	r2, sp, #56	; 0x38
 8015384:	4630      	mov	r0, r6
 8015386:	eeb0 0b48 	vmov.f64	d0, d8
 801538a:	f001 fd57 	bl	8016e3c <__d2b>
 801538e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8015392:	4605      	mov	r5, r0
 8015394:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015396:	2900      	cmp	r1, #0
 8015398:	d046      	beq.n	8015428 <_dtoa_r+0x180>
 801539a:	ee18 4a90 	vmov	r4, s17
 801539e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80153a2:	ec53 2b18 	vmov	r2, r3, d8
 80153a6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80153aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80153ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80153b2:	2400      	movs	r4, #0
 80153b4:	ec43 2b16 	vmov	d6, r2, r3
 80153b8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80153bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015568 <_dtoa_r+0x2c0>
 80153c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80153c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015570 <_dtoa_r+0x2c8>
 80153c8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80153cc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015578 <_dtoa_r+0x2d0>
 80153d0:	ee07 1a90 	vmov	s15, r1
 80153d4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80153d8:	eeb0 7b46 	vmov.f64	d7, d6
 80153dc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80153e0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80153e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80153e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ec:	ee16 ba90 	vmov	fp, s13
 80153f0:	940a      	str	r4, [sp, #40]	; 0x28
 80153f2:	d508      	bpl.n	8015406 <_dtoa_r+0x15e>
 80153f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80153f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80153fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015400:	bf18      	it	ne
 8015402:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015406:	f1bb 0f16 	cmp.w	fp, #22
 801540a:	d82f      	bhi.n	801546c <_dtoa_r+0x1c4>
 801540c:	4b62      	ldr	r3, [pc, #392]	; (8015598 <_dtoa_r+0x2f0>)
 801540e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015412:	ed93 7b00 	vldr	d7, [r3]
 8015416:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801541e:	d501      	bpl.n	8015424 <_dtoa_r+0x17c>
 8015420:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015424:	2300      	movs	r3, #0
 8015426:	e022      	b.n	801546e <_dtoa_r+0x1c6>
 8015428:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801542a:	4401      	add	r1, r0
 801542c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015430:	2b20      	cmp	r3, #32
 8015432:	bfc1      	itttt	gt
 8015434:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015438:	fa04 f303 	lslgt.w	r3, r4, r3
 801543c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015440:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015444:	bfd6      	itet	le
 8015446:	f1c3 0320 	rsble	r3, r3, #32
 801544a:	ea43 0808 	orrgt.w	r8, r3, r8
 801544e:	fa08 f803 	lslle.w	r8, r8, r3
 8015452:	ee07 8a90 	vmov	s15, r8
 8015456:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801545a:	3901      	subs	r1, #1
 801545c:	ee17 4a90 	vmov	r4, s15
 8015460:	ec53 2b17 	vmov	r2, r3, d7
 8015464:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015468:	2401      	movs	r4, #1
 801546a:	e7a3      	b.n	80153b4 <_dtoa_r+0x10c>
 801546c:	2301      	movs	r3, #1
 801546e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015470:	1a43      	subs	r3, r0, r1
 8015472:	1e5a      	subs	r2, r3, #1
 8015474:	bf45      	ittet	mi
 8015476:	f1c3 0301 	rsbmi	r3, r3, #1
 801547a:	9304      	strmi	r3, [sp, #16]
 801547c:	2300      	movpl	r3, #0
 801547e:	2300      	movmi	r3, #0
 8015480:	9205      	str	r2, [sp, #20]
 8015482:	bf54      	ite	pl
 8015484:	9304      	strpl	r3, [sp, #16]
 8015486:	9305      	strmi	r3, [sp, #20]
 8015488:	f1bb 0f00 	cmp.w	fp, #0
 801548c:	db18      	blt.n	80154c0 <_dtoa_r+0x218>
 801548e:	9b05      	ldr	r3, [sp, #20]
 8015490:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015494:	445b      	add	r3, fp
 8015496:	9305      	str	r3, [sp, #20]
 8015498:	2300      	movs	r3, #0
 801549a:	9a06      	ldr	r2, [sp, #24]
 801549c:	2a09      	cmp	r2, #9
 801549e:	d849      	bhi.n	8015534 <_dtoa_r+0x28c>
 80154a0:	2a05      	cmp	r2, #5
 80154a2:	bfc4      	itt	gt
 80154a4:	3a04      	subgt	r2, #4
 80154a6:	9206      	strgt	r2, [sp, #24]
 80154a8:	9a06      	ldr	r2, [sp, #24]
 80154aa:	f1a2 0202 	sub.w	r2, r2, #2
 80154ae:	bfcc      	ite	gt
 80154b0:	2400      	movgt	r4, #0
 80154b2:	2401      	movle	r4, #1
 80154b4:	2a03      	cmp	r2, #3
 80154b6:	d848      	bhi.n	801554a <_dtoa_r+0x2a2>
 80154b8:	e8df f002 	tbb	[pc, r2]
 80154bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80154c0:	9b04      	ldr	r3, [sp, #16]
 80154c2:	2200      	movs	r2, #0
 80154c4:	eba3 030b 	sub.w	r3, r3, fp
 80154c8:	9304      	str	r3, [sp, #16]
 80154ca:	9209      	str	r2, [sp, #36]	; 0x24
 80154cc:	f1cb 0300 	rsb	r3, fp, #0
 80154d0:	e7e3      	b.n	801549a <_dtoa_r+0x1f2>
 80154d2:	2200      	movs	r2, #0
 80154d4:	9207      	str	r2, [sp, #28]
 80154d6:	9a08      	ldr	r2, [sp, #32]
 80154d8:	2a00      	cmp	r2, #0
 80154da:	dc39      	bgt.n	8015550 <_dtoa_r+0x2a8>
 80154dc:	f04f 0a01 	mov.w	sl, #1
 80154e0:	46d1      	mov	r9, sl
 80154e2:	4652      	mov	r2, sl
 80154e4:	f8cd a020 	str.w	sl, [sp, #32]
 80154e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80154ea:	2100      	movs	r1, #0
 80154ec:	6079      	str	r1, [r7, #4]
 80154ee:	2004      	movs	r0, #4
 80154f0:	f100 0c14 	add.w	ip, r0, #20
 80154f4:	4594      	cmp	ip, r2
 80154f6:	6879      	ldr	r1, [r7, #4]
 80154f8:	d92f      	bls.n	801555a <_dtoa_r+0x2b2>
 80154fa:	4630      	mov	r0, r6
 80154fc:	930d      	str	r3, [sp, #52]	; 0x34
 80154fe:	f001 f8af 	bl	8016660 <_Balloc>
 8015502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015504:	9001      	str	r0, [sp, #4]
 8015506:	4602      	mov	r2, r0
 8015508:	2800      	cmp	r0, #0
 801550a:	d149      	bne.n	80155a0 <_dtoa_r+0x2f8>
 801550c:	4b23      	ldr	r3, [pc, #140]	; (801559c <_dtoa_r+0x2f4>)
 801550e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015512:	e6e1      	b.n	80152d8 <_dtoa_r+0x30>
 8015514:	2201      	movs	r2, #1
 8015516:	e7dd      	b.n	80154d4 <_dtoa_r+0x22c>
 8015518:	2200      	movs	r2, #0
 801551a:	9207      	str	r2, [sp, #28]
 801551c:	9a08      	ldr	r2, [sp, #32]
 801551e:	eb0b 0a02 	add.w	sl, fp, r2
 8015522:	f10a 0901 	add.w	r9, sl, #1
 8015526:	464a      	mov	r2, r9
 8015528:	2a01      	cmp	r2, #1
 801552a:	bfb8      	it	lt
 801552c:	2201      	movlt	r2, #1
 801552e:	e7db      	b.n	80154e8 <_dtoa_r+0x240>
 8015530:	2201      	movs	r2, #1
 8015532:	e7f2      	b.n	801551a <_dtoa_r+0x272>
 8015534:	2401      	movs	r4, #1
 8015536:	2200      	movs	r2, #0
 8015538:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801553c:	f04f 3aff 	mov.w	sl, #4294967295
 8015540:	2100      	movs	r1, #0
 8015542:	46d1      	mov	r9, sl
 8015544:	2212      	movs	r2, #18
 8015546:	9108      	str	r1, [sp, #32]
 8015548:	e7ce      	b.n	80154e8 <_dtoa_r+0x240>
 801554a:	2201      	movs	r2, #1
 801554c:	9207      	str	r2, [sp, #28]
 801554e:	e7f5      	b.n	801553c <_dtoa_r+0x294>
 8015550:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015554:	46d1      	mov	r9, sl
 8015556:	4652      	mov	r2, sl
 8015558:	e7c6      	b.n	80154e8 <_dtoa_r+0x240>
 801555a:	3101      	adds	r1, #1
 801555c:	6079      	str	r1, [r7, #4]
 801555e:	0040      	lsls	r0, r0, #1
 8015560:	e7c6      	b.n	80154f0 <_dtoa_r+0x248>
 8015562:	bf00      	nop
 8015564:	f3af 8000 	nop.w
 8015568:	636f4361 	.word	0x636f4361
 801556c:	3fd287a7 	.word	0x3fd287a7
 8015570:	8b60c8b3 	.word	0x8b60c8b3
 8015574:	3fc68a28 	.word	0x3fc68a28
 8015578:	509f79fb 	.word	0x509f79fb
 801557c:	3fd34413 	.word	0x3fd34413
 8015580:	0801852e 	.word	0x0801852e
 8015584:	08018545 	.word	0x08018545
 8015588:	7ff00000 	.word	0x7ff00000
 801558c:	0801852a 	.word	0x0801852a
 8015590:	08018521 	.word	0x08018521
 8015594:	080183a1 	.word	0x080183a1
 8015598:	080186b0 	.word	0x080186b0
 801559c:	080185a0 	.word	0x080185a0
 80155a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80155a2:	9901      	ldr	r1, [sp, #4]
 80155a4:	6011      	str	r1, [r2, #0]
 80155a6:	f1b9 0f0e 	cmp.w	r9, #14
 80155aa:	d86c      	bhi.n	8015686 <_dtoa_r+0x3de>
 80155ac:	2c00      	cmp	r4, #0
 80155ae:	d06a      	beq.n	8015686 <_dtoa_r+0x3de>
 80155b0:	f1bb 0f00 	cmp.w	fp, #0
 80155b4:	f340 80a0 	ble.w	80156f8 <_dtoa_r+0x450>
 80155b8:	49c1      	ldr	r1, [pc, #772]	; (80158c0 <_dtoa_r+0x618>)
 80155ba:	f00b 020f 	and.w	r2, fp, #15
 80155be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80155c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80155c6:	ed92 7b00 	vldr	d7, [r2]
 80155ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80155ce:	f000 8087 	beq.w	80156e0 <_dtoa_r+0x438>
 80155d2:	4abc      	ldr	r2, [pc, #752]	; (80158c4 <_dtoa_r+0x61c>)
 80155d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80155d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80155dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80155e0:	f001 010f 	and.w	r1, r1, #15
 80155e4:	2203      	movs	r2, #3
 80155e6:	48b7      	ldr	r0, [pc, #732]	; (80158c4 <_dtoa_r+0x61c>)
 80155e8:	2900      	cmp	r1, #0
 80155ea:	d17b      	bne.n	80156e4 <_dtoa_r+0x43c>
 80155ec:	ed9d 6b02 	vldr	d6, [sp, #8]
 80155f0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80155f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155fa:	2900      	cmp	r1, #0
 80155fc:	f000 80a2 	beq.w	8015744 <_dtoa_r+0x49c>
 8015600:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015608:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015610:	f140 8098 	bpl.w	8015744 <_dtoa_r+0x49c>
 8015614:	f1b9 0f00 	cmp.w	r9, #0
 8015618:	f000 8094 	beq.w	8015744 <_dtoa_r+0x49c>
 801561c:	f1ba 0f00 	cmp.w	sl, #0
 8015620:	dd2f      	ble.n	8015682 <_dtoa_r+0x3da>
 8015622:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015626:	ee27 7b06 	vmul.f64	d7, d7, d6
 801562a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801562e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015632:	3201      	adds	r2, #1
 8015634:	4650      	mov	r0, sl
 8015636:	ed9d 6b02 	vldr	d6, [sp, #8]
 801563a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801563e:	ee07 2a90 	vmov	s15, r2
 8015642:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015646:	eea7 5b06 	vfma.f64	d5, d7, d6
 801564a:	ee15 4a90 	vmov	r4, s11
 801564e:	ec52 1b15 	vmov	r1, r2, d5
 8015652:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015656:	2800      	cmp	r0, #0
 8015658:	d177      	bne.n	801574a <_dtoa_r+0x4a2>
 801565a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801565e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015662:	ec42 1b17 	vmov	d7, r1, r2
 8015666:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566e:	f300 8263 	bgt.w	8015b38 <_dtoa_r+0x890>
 8015672:	eeb1 7b47 	vneg.f64	d7, d7
 8015676:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801567a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801567e:	f100 8258 	bmi.w	8015b32 <_dtoa_r+0x88a>
 8015682:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015688:	2a00      	cmp	r2, #0
 801568a:	f2c0 811d 	blt.w	80158c8 <_dtoa_r+0x620>
 801568e:	f1bb 0f0e 	cmp.w	fp, #14
 8015692:	f300 8119 	bgt.w	80158c8 <_dtoa_r+0x620>
 8015696:	4b8a      	ldr	r3, [pc, #552]	; (80158c0 <_dtoa_r+0x618>)
 8015698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801569c:	ed93 6b00 	vldr	d6, [r3]
 80156a0:	9b08      	ldr	r3, [sp, #32]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	f280 80b7 	bge.w	8015816 <_dtoa_r+0x56e>
 80156a8:	f1b9 0f00 	cmp.w	r9, #0
 80156ac:	f300 80b3 	bgt.w	8015816 <_dtoa_r+0x56e>
 80156b0:	f040 823f 	bne.w	8015b32 <_dtoa_r+0x88a>
 80156b4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80156b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80156bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80156c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80156c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c8:	464c      	mov	r4, r9
 80156ca:	464f      	mov	r7, r9
 80156cc:	f280 8215 	bge.w	8015afa <_dtoa_r+0x852>
 80156d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80156d4:	2331      	movs	r3, #49	; 0x31
 80156d6:	f808 3b01 	strb.w	r3, [r8], #1
 80156da:	f10b 0b01 	add.w	fp, fp, #1
 80156de:	e211      	b.n	8015b04 <_dtoa_r+0x85c>
 80156e0:	2202      	movs	r2, #2
 80156e2:	e780      	b.n	80155e6 <_dtoa_r+0x33e>
 80156e4:	07cc      	lsls	r4, r1, #31
 80156e6:	d504      	bpl.n	80156f2 <_dtoa_r+0x44a>
 80156e8:	ed90 6b00 	vldr	d6, [r0]
 80156ec:	3201      	adds	r2, #1
 80156ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80156f2:	1049      	asrs	r1, r1, #1
 80156f4:	3008      	adds	r0, #8
 80156f6:	e777      	b.n	80155e8 <_dtoa_r+0x340>
 80156f8:	d022      	beq.n	8015740 <_dtoa_r+0x498>
 80156fa:	f1cb 0100 	rsb	r1, fp, #0
 80156fe:	4a70      	ldr	r2, [pc, #448]	; (80158c0 <_dtoa_r+0x618>)
 8015700:	f001 000f 	and.w	r0, r1, #15
 8015704:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015708:	ed92 7b00 	vldr	d7, [r2]
 801570c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015710:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015714:	486b      	ldr	r0, [pc, #428]	; (80158c4 <_dtoa_r+0x61c>)
 8015716:	1109      	asrs	r1, r1, #4
 8015718:	2400      	movs	r4, #0
 801571a:	2202      	movs	r2, #2
 801571c:	b929      	cbnz	r1, 801572a <_dtoa_r+0x482>
 801571e:	2c00      	cmp	r4, #0
 8015720:	f43f af6a 	beq.w	80155f8 <_dtoa_r+0x350>
 8015724:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015728:	e766      	b.n	80155f8 <_dtoa_r+0x350>
 801572a:	07cf      	lsls	r7, r1, #31
 801572c:	d505      	bpl.n	801573a <_dtoa_r+0x492>
 801572e:	ed90 6b00 	vldr	d6, [r0]
 8015732:	3201      	adds	r2, #1
 8015734:	2401      	movs	r4, #1
 8015736:	ee27 7b06 	vmul.f64	d7, d7, d6
 801573a:	1049      	asrs	r1, r1, #1
 801573c:	3008      	adds	r0, #8
 801573e:	e7ed      	b.n	801571c <_dtoa_r+0x474>
 8015740:	2202      	movs	r2, #2
 8015742:	e759      	b.n	80155f8 <_dtoa_r+0x350>
 8015744:	465f      	mov	r7, fp
 8015746:	4648      	mov	r0, r9
 8015748:	e775      	b.n	8015636 <_dtoa_r+0x38e>
 801574a:	ec42 1b17 	vmov	d7, r1, r2
 801574e:	4a5c      	ldr	r2, [pc, #368]	; (80158c0 <_dtoa_r+0x618>)
 8015750:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015754:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015758:	9a01      	ldr	r2, [sp, #4]
 801575a:	1814      	adds	r4, r2, r0
 801575c:	9a07      	ldr	r2, [sp, #28]
 801575e:	b352      	cbz	r2, 80157b6 <_dtoa_r+0x50e>
 8015760:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015764:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015768:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801576c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015770:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015774:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015778:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801577c:	ee14 2a90 	vmov	r2, s9
 8015780:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015784:	3230      	adds	r2, #48	; 0x30
 8015786:	ee36 6b45 	vsub.f64	d6, d6, d5
 801578a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015792:	f808 2b01 	strb.w	r2, [r8], #1
 8015796:	d439      	bmi.n	801580c <_dtoa_r+0x564>
 8015798:	ee32 5b46 	vsub.f64	d5, d2, d6
 801579c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80157a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157a4:	d472      	bmi.n	801588c <_dtoa_r+0x5e4>
 80157a6:	45a0      	cmp	r8, r4
 80157a8:	f43f af6b 	beq.w	8015682 <_dtoa_r+0x3da>
 80157ac:	ee27 7b03 	vmul.f64	d7, d7, d3
 80157b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80157b4:	e7e0      	b.n	8015778 <_dtoa_r+0x4d0>
 80157b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80157ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80157be:	4621      	mov	r1, r4
 80157c0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80157c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80157c8:	ee14 2a90 	vmov	r2, s9
 80157cc:	3230      	adds	r2, #48	; 0x30
 80157ce:	f808 2b01 	strb.w	r2, [r8], #1
 80157d2:	45a0      	cmp	r8, r4
 80157d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80157d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80157dc:	d118      	bne.n	8015810 <_dtoa_r+0x568>
 80157de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80157e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80157e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80157ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ee:	dc4d      	bgt.n	801588c <_dtoa_r+0x5e4>
 80157f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80157f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80157f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157fc:	f57f af41 	bpl.w	8015682 <_dtoa_r+0x3da>
 8015800:	4688      	mov	r8, r1
 8015802:	3901      	subs	r1, #1
 8015804:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015808:	2b30      	cmp	r3, #48	; 0x30
 801580a:	d0f9      	beq.n	8015800 <_dtoa_r+0x558>
 801580c:	46bb      	mov	fp, r7
 801580e:	e02a      	b.n	8015866 <_dtoa_r+0x5be>
 8015810:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015814:	e7d6      	b.n	80157c4 <_dtoa_r+0x51c>
 8015816:	ed9d 7b02 	vldr	d7, [sp, #8]
 801581a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801581e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015822:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015826:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801582a:	ee15 3a10 	vmov	r3, s10
 801582e:	3330      	adds	r3, #48	; 0x30
 8015830:	f808 3b01 	strb.w	r3, [r8], #1
 8015834:	9b01      	ldr	r3, [sp, #4]
 8015836:	eba8 0303 	sub.w	r3, r8, r3
 801583a:	4599      	cmp	r9, r3
 801583c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015840:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015844:	d133      	bne.n	80158ae <_dtoa_r+0x606>
 8015846:	ee37 7b07 	vadd.f64	d7, d7, d7
 801584a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015852:	dc1a      	bgt.n	801588a <_dtoa_r+0x5e2>
 8015854:	eeb4 7b46 	vcmp.f64	d7, d6
 8015858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801585c:	d103      	bne.n	8015866 <_dtoa_r+0x5be>
 801585e:	ee15 3a10 	vmov	r3, s10
 8015862:	07d9      	lsls	r1, r3, #31
 8015864:	d411      	bmi.n	801588a <_dtoa_r+0x5e2>
 8015866:	4629      	mov	r1, r5
 8015868:	4630      	mov	r0, r6
 801586a:	f000 ff39 	bl	80166e0 <_Bfree>
 801586e:	2300      	movs	r3, #0
 8015870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015872:	f888 3000 	strb.w	r3, [r8]
 8015876:	f10b 0301 	add.w	r3, fp, #1
 801587a:	6013      	str	r3, [r2, #0]
 801587c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801587e:	2b00      	cmp	r3, #0
 8015880:	f43f ad61 	beq.w	8015346 <_dtoa_r+0x9e>
 8015884:	f8c3 8000 	str.w	r8, [r3]
 8015888:	e55d      	b.n	8015346 <_dtoa_r+0x9e>
 801588a:	465f      	mov	r7, fp
 801588c:	4643      	mov	r3, r8
 801588e:	4698      	mov	r8, r3
 8015890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015894:	2a39      	cmp	r2, #57	; 0x39
 8015896:	d106      	bne.n	80158a6 <_dtoa_r+0x5fe>
 8015898:	9a01      	ldr	r2, [sp, #4]
 801589a:	429a      	cmp	r2, r3
 801589c:	d1f7      	bne.n	801588e <_dtoa_r+0x5e6>
 801589e:	9901      	ldr	r1, [sp, #4]
 80158a0:	2230      	movs	r2, #48	; 0x30
 80158a2:	3701      	adds	r7, #1
 80158a4:	700a      	strb	r2, [r1, #0]
 80158a6:	781a      	ldrb	r2, [r3, #0]
 80158a8:	3201      	adds	r2, #1
 80158aa:	701a      	strb	r2, [r3, #0]
 80158ac:	e7ae      	b.n	801580c <_dtoa_r+0x564>
 80158ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80158b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80158b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158ba:	d1b2      	bne.n	8015822 <_dtoa_r+0x57a>
 80158bc:	e7d3      	b.n	8015866 <_dtoa_r+0x5be>
 80158be:	bf00      	nop
 80158c0:	080186b0 	.word	0x080186b0
 80158c4:	08018688 	.word	0x08018688
 80158c8:	9907      	ldr	r1, [sp, #28]
 80158ca:	2900      	cmp	r1, #0
 80158cc:	f000 80d0 	beq.w	8015a70 <_dtoa_r+0x7c8>
 80158d0:	9906      	ldr	r1, [sp, #24]
 80158d2:	2901      	cmp	r1, #1
 80158d4:	f300 80b4 	bgt.w	8015a40 <_dtoa_r+0x798>
 80158d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80158da:	2900      	cmp	r1, #0
 80158dc:	f000 80ac 	beq.w	8015a38 <_dtoa_r+0x790>
 80158e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80158e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80158e8:	461c      	mov	r4, r3
 80158ea:	930a      	str	r3, [sp, #40]	; 0x28
 80158ec:	9b04      	ldr	r3, [sp, #16]
 80158ee:	4413      	add	r3, r2
 80158f0:	9304      	str	r3, [sp, #16]
 80158f2:	9b05      	ldr	r3, [sp, #20]
 80158f4:	2101      	movs	r1, #1
 80158f6:	4413      	add	r3, r2
 80158f8:	4630      	mov	r0, r6
 80158fa:	9305      	str	r3, [sp, #20]
 80158fc:	f000 fff2 	bl	80168e4 <__i2b>
 8015900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015902:	4607      	mov	r7, r0
 8015904:	f1b8 0f00 	cmp.w	r8, #0
 8015908:	dd0d      	ble.n	8015926 <_dtoa_r+0x67e>
 801590a:	9a05      	ldr	r2, [sp, #20]
 801590c:	2a00      	cmp	r2, #0
 801590e:	dd0a      	ble.n	8015926 <_dtoa_r+0x67e>
 8015910:	4542      	cmp	r2, r8
 8015912:	9904      	ldr	r1, [sp, #16]
 8015914:	bfa8      	it	ge
 8015916:	4642      	movge	r2, r8
 8015918:	1a89      	subs	r1, r1, r2
 801591a:	9104      	str	r1, [sp, #16]
 801591c:	9905      	ldr	r1, [sp, #20]
 801591e:	eba8 0802 	sub.w	r8, r8, r2
 8015922:	1a8a      	subs	r2, r1, r2
 8015924:	9205      	str	r2, [sp, #20]
 8015926:	b303      	cbz	r3, 801596a <_dtoa_r+0x6c2>
 8015928:	9a07      	ldr	r2, [sp, #28]
 801592a:	2a00      	cmp	r2, #0
 801592c:	f000 80a5 	beq.w	8015a7a <_dtoa_r+0x7d2>
 8015930:	2c00      	cmp	r4, #0
 8015932:	dd13      	ble.n	801595c <_dtoa_r+0x6b4>
 8015934:	4639      	mov	r1, r7
 8015936:	4622      	mov	r2, r4
 8015938:	4630      	mov	r0, r6
 801593a:	930d      	str	r3, [sp, #52]	; 0x34
 801593c:	f001 f892 	bl	8016a64 <__pow5mult>
 8015940:	462a      	mov	r2, r5
 8015942:	4601      	mov	r1, r0
 8015944:	4607      	mov	r7, r0
 8015946:	4630      	mov	r0, r6
 8015948:	f000 ffe2 	bl	8016910 <__multiply>
 801594c:	4629      	mov	r1, r5
 801594e:	900a      	str	r0, [sp, #40]	; 0x28
 8015950:	4630      	mov	r0, r6
 8015952:	f000 fec5 	bl	80166e0 <_Bfree>
 8015956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801595a:	4615      	mov	r5, r2
 801595c:	1b1a      	subs	r2, r3, r4
 801595e:	d004      	beq.n	801596a <_dtoa_r+0x6c2>
 8015960:	4629      	mov	r1, r5
 8015962:	4630      	mov	r0, r6
 8015964:	f001 f87e 	bl	8016a64 <__pow5mult>
 8015968:	4605      	mov	r5, r0
 801596a:	2101      	movs	r1, #1
 801596c:	4630      	mov	r0, r6
 801596e:	f000 ffb9 	bl	80168e4 <__i2b>
 8015972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015974:	2b00      	cmp	r3, #0
 8015976:	4604      	mov	r4, r0
 8015978:	f340 8081 	ble.w	8015a7e <_dtoa_r+0x7d6>
 801597c:	461a      	mov	r2, r3
 801597e:	4601      	mov	r1, r0
 8015980:	4630      	mov	r0, r6
 8015982:	f001 f86f 	bl	8016a64 <__pow5mult>
 8015986:	9b06      	ldr	r3, [sp, #24]
 8015988:	2b01      	cmp	r3, #1
 801598a:	4604      	mov	r4, r0
 801598c:	dd7a      	ble.n	8015a84 <_dtoa_r+0x7dc>
 801598e:	2300      	movs	r3, #0
 8015990:	930a      	str	r3, [sp, #40]	; 0x28
 8015992:	6922      	ldr	r2, [r4, #16]
 8015994:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015998:	6910      	ldr	r0, [r2, #16]
 801599a:	f000 ff53 	bl	8016844 <__hi0bits>
 801599e:	f1c0 0020 	rsb	r0, r0, #32
 80159a2:	9b05      	ldr	r3, [sp, #20]
 80159a4:	4418      	add	r0, r3
 80159a6:	f010 001f 	ands.w	r0, r0, #31
 80159aa:	f000 808c 	beq.w	8015ac6 <_dtoa_r+0x81e>
 80159ae:	f1c0 0220 	rsb	r2, r0, #32
 80159b2:	2a04      	cmp	r2, #4
 80159b4:	f340 8085 	ble.w	8015ac2 <_dtoa_r+0x81a>
 80159b8:	f1c0 001c 	rsb	r0, r0, #28
 80159bc:	9b04      	ldr	r3, [sp, #16]
 80159be:	4403      	add	r3, r0
 80159c0:	9304      	str	r3, [sp, #16]
 80159c2:	9b05      	ldr	r3, [sp, #20]
 80159c4:	4403      	add	r3, r0
 80159c6:	4480      	add	r8, r0
 80159c8:	9305      	str	r3, [sp, #20]
 80159ca:	9b04      	ldr	r3, [sp, #16]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	dd05      	ble.n	80159dc <_dtoa_r+0x734>
 80159d0:	4629      	mov	r1, r5
 80159d2:	461a      	mov	r2, r3
 80159d4:	4630      	mov	r0, r6
 80159d6:	f001 f89f 	bl	8016b18 <__lshift>
 80159da:	4605      	mov	r5, r0
 80159dc:	9b05      	ldr	r3, [sp, #20]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	dd05      	ble.n	80159ee <_dtoa_r+0x746>
 80159e2:	4621      	mov	r1, r4
 80159e4:	461a      	mov	r2, r3
 80159e6:	4630      	mov	r0, r6
 80159e8:	f001 f896 	bl	8016b18 <__lshift>
 80159ec:	4604      	mov	r4, r0
 80159ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d06a      	beq.n	8015aca <_dtoa_r+0x822>
 80159f4:	4621      	mov	r1, r4
 80159f6:	4628      	mov	r0, r5
 80159f8:	f001 f8fe 	bl	8016bf8 <__mcmp>
 80159fc:	2800      	cmp	r0, #0
 80159fe:	da64      	bge.n	8015aca <_dtoa_r+0x822>
 8015a00:	2300      	movs	r3, #0
 8015a02:	4629      	mov	r1, r5
 8015a04:	220a      	movs	r2, #10
 8015a06:	4630      	mov	r0, r6
 8015a08:	f000 fe8c 	bl	8016724 <__multadd>
 8015a0c:	9b07      	ldr	r3, [sp, #28]
 8015a0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015a12:	4605      	mov	r5, r0
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f000 8191 	beq.w	8015d3c <_dtoa_r+0xa94>
 8015a1a:	4639      	mov	r1, r7
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	220a      	movs	r2, #10
 8015a20:	4630      	mov	r0, r6
 8015a22:	f000 fe7f 	bl	8016724 <__multadd>
 8015a26:	f1ba 0f00 	cmp.w	sl, #0
 8015a2a:	4607      	mov	r7, r0
 8015a2c:	f300 808d 	bgt.w	8015b4a <_dtoa_r+0x8a2>
 8015a30:	9b06      	ldr	r3, [sp, #24]
 8015a32:	2b02      	cmp	r3, #2
 8015a34:	dc50      	bgt.n	8015ad8 <_dtoa_r+0x830>
 8015a36:	e088      	b.n	8015b4a <_dtoa_r+0x8a2>
 8015a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015a3e:	e751      	b.n	80158e4 <_dtoa_r+0x63c>
 8015a40:	f109 34ff 	add.w	r4, r9, #4294967295
 8015a44:	42a3      	cmp	r3, r4
 8015a46:	bfbf      	itttt	lt
 8015a48:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8015a4a:	1ae3      	sublt	r3, r4, r3
 8015a4c:	18d2      	addlt	r2, r2, r3
 8015a4e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8015a50:	bfb6      	itet	lt
 8015a52:	4623      	movlt	r3, r4
 8015a54:	1b1c      	subge	r4, r3, r4
 8015a56:	2400      	movlt	r4, #0
 8015a58:	f1b9 0f00 	cmp.w	r9, #0
 8015a5c:	bfb5      	itete	lt
 8015a5e:	9a04      	ldrlt	r2, [sp, #16]
 8015a60:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015a64:	eba2 0809 	sublt.w	r8, r2, r9
 8015a68:	464a      	movge	r2, r9
 8015a6a:	bfb8      	it	lt
 8015a6c:	2200      	movlt	r2, #0
 8015a6e:	e73c      	b.n	80158ea <_dtoa_r+0x642>
 8015a70:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015a74:	9f07      	ldr	r7, [sp, #28]
 8015a76:	461c      	mov	r4, r3
 8015a78:	e744      	b.n	8015904 <_dtoa_r+0x65c>
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	e770      	b.n	8015960 <_dtoa_r+0x6b8>
 8015a7e:	9b06      	ldr	r3, [sp, #24]
 8015a80:	2b01      	cmp	r3, #1
 8015a82:	dc18      	bgt.n	8015ab6 <_dtoa_r+0x80e>
 8015a84:	9b02      	ldr	r3, [sp, #8]
 8015a86:	b9b3      	cbnz	r3, 8015ab6 <_dtoa_r+0x80e>
 8015a88:	9b03      	ldr	r3, [sp, #12]
 8015a8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015a8e:	b9a2      	cbnz	r2, 8015aba <_dtoa_r+0x812>
 8015a90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015a94:	0d12      	lsrs	r2, r2, #20
 8015a96:	0512      	lsls	r2, r2, #20
 8015a98:	b18a      	cbz	r2, 8015abe <_dtoa_r+0x816>
 8015a9a:	9b04      	ldr	r3, [sp, #16]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	9304      	str	r3, [sp, #16]
 8015aa0:	9b05      	ldr	r3, [sp, #20]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	9305      	str	r3, [sp, #20]
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8015aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	f47f af70 	bne.w	8015992 <_dtoa_r+0x6ea>
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	e775      	b.n	80159a2 <_dtoa_r+0x6fa>
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	e7f6      	b.n	8015aa8 <_dtoa_r+0x800>
 8015aba:	9b02      	ldr	r3, [sp, #8]
 8015abc:	e7f4      	b.n	8015aa8 <_dtoa_r+0x800>
 8015abe:	920a      	str	r2, [sp, #40]	; 0x28
 8015ac0:	e7f3      	b.n	8015aaa <_dtoa_r+0x802>
 8015ac2:	d082      	beq.n	80159ca <_dtoa_r+0x722>
 8015ac4:	4610      	mov	r0, r2
 8015ac6:	301c      	adds	r0, #28
 8015ac8:	e778      	b.n	80159bc <_dtoa_r+0x714>
 8015aca:	f1b9 0f00 	cmp.w	r9, #0
 8015ace:	dc37      	bgt.n	8015b40 <_dtoa_r+0x898>
 8015ad0:	9b06      	ldr	r3, [sp, #24]
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	dd34      	ble.n	8015b40 <_dtoa_r+0x898>
 8015ad6:	46ca      	mov	sl, r9
 8015ad8:	f1ba 0f00 	cmp.w	sl, #0
 8015adc:	d10d      	bne.n	8015afa <_dtoa_r+0x852>
 8015ade:	4621      	mov	r1, r4
 8015ae0:	4653      	mov	r3, sl
 8015ae2:	2205      	movs	r2, #5
 8015ae4:	4630      	mov	r0, r6
 8015ae6:	f000 fe1d 	bl	8016724 <__multadd>
 8015aea:	4601      	mov	r1, r0
 8015aec:	4604      	mov	r4, r0
 8015aee:	4628      	mov	r0, r5
 8015af0:	f001 f882 	bl	8016bf8 <__mcmp>
 8015af4:	2800      	cmp	r0, #0
 8015af6:	f73f adeb 	bgt.w	80156d0 <_dtoa_r+0x428>
 8015afa:	9b08      	ldr	r3, [sp, #32]
 8015afc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015b00:	ea6f 0b03 	mvn.w	fp, r3
 8015b04:	f04f 0900 	mov.w	r9, #0
 8015b08:	4621      	mov	r1, r4
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	f000 fde8 	bl	80166e0 <_Bfree>
 8015b10:	2f00      	cmp	r7, #0
 8015b12:	f43f aea8 	beq.w	8015866 <_dtoa_r+0x5be>
 8015b16:	f1b9 0f00 	cmp.w	r9, #0
 8015b1a:	d005      	beq.n	8015b28 <_dtoa_r+0x880>
 8015b1c:	45b9      	cmp	r9, r7
 8015b1e:	d003      	beq.n	8015b28 <_dtoa_r+0x880>
 8015b20:	4649      	mov	r1, r9
 8015b22:	4630      	mov	r0, r6
 8015b24:	f000 fddc 	bl	80166e0 <_Bfree>
 8015b28:	4639      	mov	r1, r7
 8015b2a:	4630      	mov	r0, r6
 8015b2c:	f000 fdd8 	bl	80166e0 <_Bfree>
 8015b30:	e699      	b.n	8015866 <_dtoa_r+0x5be>
 8015b32:	2400      	movs	r4, #0
 8015b34:	4627      	mov	r7, r4
 8015b36:	e7e0      	b.n	8015afa <_dtoa_r+0x852>
 8015b38:	46bb      	mov	fp, r7
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	4607      	mov	r7, r0
 8015b3e:	e5c7      	b.n	80156d0 <_dtoa_r+0x428>
 8015b40:	9b07      	ldr	r3, [sp, #28]
 8015b42:	46ca      	mov	sl, r9
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f000 8100 	beq.w	8015d4a <_dtoa_r+0xaa2>
 8015b4a:	f1b8 0f00 	cmp.w	r8, #0
 8015b4e:	dd05      	ble.n	8015b5c <_dtoa_r+0x8b4>
 8015b50:	4639      	mov	r1, r7
 8015b52:	4642      	mov	r2, r8
 8015b54:	4630      	mov	r0, r6
 8015b56:	f000 ffdf 	bl	8016b18 <__lshift>
 8015b5a:	4607      	mov	r7, r0
 8015b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d05d      	beq.n	8015c1e <_dtoa_r+0x976>
 8015b62:	6879      	ldr	r1, [r7, #4]
 8015b64:	4630      	mov	r0, r6
 8015b66:	f000 fd7b 	bl	8016660 <_Balloc>
 8015b6a:	4680      	mov	r8, r0
 8015b6c:	b928      	cbnz	r0, 8015b7a <_dtoa_r+0x8d2>
 8015b6e:	4b82      	ldr	r3, [pc, #520]	; (8015d78 <_dtoa_r+0xad0>)
 8015b70:	4602      	mov	r2, r0
 8015b72:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015b76:	f7ff bbaf 	b.w	80152d8 <_dtoa_r+0x30>
 8015b7a:	693a      	ldr	r2, [r7, #16]
 8015b7c:	3202      	adds	r2, #2
 8015b7e:	0092      	lsls	r2, r2, #2
 8015b80:	f107 010c 	add.w	r1, r7, #12
 8015b84:	300c      	adds	r0, #12
 8015b86:	f7fd fcac 	bl	80134e2 <memcpy>
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	4641      	mov	r1, r8
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f000 ffc2 	bl	8016b18 <__lshift>
 8015b94:	9b01      	ldr	r3, [sp, #4]
 8015b96:	3301      	adds	r3, #1
 8015b98:	9304      	str	r3, [sp, #16]
 8015b9a:	9b01      	ldr	r3, [sp, #4]
 8015b9c:	4453      	add	r3, sl
 8015b9e:	9308      	str	r3, [sp, #32]
 8015ba0:	9b02      	ldr	r3, [sp, #8]
 8015ba2:	f003 0301 	and.w	r3, r3, #1
 8015ba6:	46b9      	mov	r9, r7
 8015ba8:	9307      	str	r3, [sp, #28]
 8015baa:	4607      	mov	r7, r0
 8015bac:	9b04      	ldr	r3, [sp, #16]
 8015bae:	4621      	mov	r1, r4
 8015bb0:	3b01      	subs	r3, #1
 8015bb2:	4628      	mov	r0, r5
 8015bb4:	9302      	str	r3, [sp, #8]
 8015bb6:	f7ff fae9 	bl	801518c <quorem>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	3330      	adds	r3, #48	; 0x30
 8015bbe:	9005      	str	r0, [sp, #20]
 8015bc0:	4649      	mov	r1, r9
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8015bc6:	f001 f817 	bl	8016bf8 <__mcmp>
 8015bca:	463a      	mov	r2, r7
 8015bcc:	4682      	mov	sl, r0
 8015bce:	4621      	mov	r1, r4
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f001 f82d 	bl	8016c30 <__mdiff>
 8015bd6:	68c2      	ldr	r2, [r0, #12]
 8015bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bda:	4680      	mov	r8, r0
 8015bdc:	bb0a      	cbnz	r2, 8015c22 <_dtoa_r+0x97a>
 8015bde:	4601      	mov	r1, r0
 8015be0:	4628      	mov	r0, r5
 8015be2:	f001 f809 	bl	8016bf8 <__mcmp>
 8015be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015be8:	4602      	mov	r2, r0
 8015bea:	4641      	mov	r1, r8
 8015bec:	4630      	mov	r0, r6
 8015bee:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015bf2:	f000 fd75 	bl	80166e0 <_Bfree>
 8015bf6:	9b06      	ldr	r3, [sp, #24]
 8015bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015bfa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015bfe:	ea43 0102 	orr.w	r1, r3, r2
 8015c02:	9b07      	ldr	r3, [sp, #28]
 8015c04:	430b      	orrs	r3, r1
 8015c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c08:	d10d      	bne.n	8015c26 <_dtoa_r+0x97e>
 8015c0a:	2b39      	cmp	r3, #57	; 0x39
 8015c0c:	d029      	beq.n	8015c62 <_dtoa_r+0x9ba>
 8015c0e:	f1ba 0f00 	cmp.w	sl, #0
 8015c12:	dd01      	ble.n	8015c18 <_dtoa_r+0x970>
 8015c14:	9b05      	ldr	r3, [sp, #20]
 8015c16:	3331      	adds	r3, #49	; 0x31
 8015c18:	9a02      	ldr	r2, [sp, #8]
 8015c1a:	7013      	strb	r3, [r2, #0]
 8015c1c:	e774      	b.n	8015b08 <_dtoa_r+0x860>
 8015c1e:	4638      	mov	r0, r7
 8015c20:	e7b8      	b.n	8015b94 <_dtoa_r+0x8ec>
 8015c22:	2201      	movs	r2, #1
 8015c24:	e7e1      	b.n	8015bea <_dtoa_r+0x942>
 8015c26:	f1ba 0f00 	cmp.w	sl, #0
 8015c2a:	db06      	blt.n	8015c3a <_dtoa_r+0x992>
 8015c2c:	9906      	ldr	r1, [sp, #24]
 8015c2e:	ea41 0a0a 	orr.w	sl, r1, sl
 8015c32:	9907      	ldr	r1, [sp, #28]
 8015c34:	ea5a 0101 	orrs.w	r1, sl, r1
 8015c38:	d120      	bne.n	8015c7c <_dtoa_r+0x9d4>
 8015c3a:	2a00      	cmp	r2, #0
 8015c3c:	ddec      	ble.n	8015c18 <_dtoa_r+0x970>
 8015c3e:	4629      	mov	r1, r5
 8015c40:	2201      	movs	r2, #1
 8015c42:	4630      	mov	r0, r6
 8015c44:	9304      	str	r3, [sp, #16]
 8015c46:	f000 ff67 	bl	8016b18 <__lshift>
 8015c4a:	4621      	mov	r1, r4
 8015c4c:	4605      	mov	r5, r0
 8015c4e:	f000 ffd3 	bl	8016bf8 <__mcmp>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	9b04      	ldr	r3, [sp, #16]
 8015c56:	dc02      	bgt.n	8015c5e <_dtoa_r+0x9b6>
 8015c58:	d1de      	bne.n	8015c18 <_dtoa_r+0x970>
 8015c5a:	07da      	lsls	r2, r3, #31
 8015c5c:	d5dc      	bpl.n	8015c18 <_dtoa_r+0x970>
 8015c5e:	2b39      	cmp	r3, #57	; 0x39
 8015c60:	d1d8      	bne.n	8015c14 <_dtoa_r+0x96c>
 8015c62:	9a02      	ldr	r2, [sp, #8]
 8015c64:	2339      	movs	r3, #57	; 0x39
 8015c66:	7013      	strb	r3, [r2, #0]
 8015c68:	4643      	mov	r3, r8
 8015c6a:	4698      	mov	r8, r3
 8015c6c:	3b01      	subs	r3, #1
 8015c6e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015c72:	2a39      	cmp	r2, #57	; 0x39
 8015c74:	d051      	beq.n	8015d1a <_dtoa_r+0xa72>
 8015c76:	3201      	adds	r2, #1
 8015c78:	701a      	strb	r2, [r3, #0]
 8015c7a:	e745      	b.n	8015b08 <_dtoa_r+0x860>
 8015c7c:	2a00      	cmp	r2, #0
 8015c7e:	dd03      	ble.n	8015c88 <_dtoa_r+0x9e0>
 8015c80:	2b39      	cmp	r3, #57	; 0x39
 8015c82:	d0ee      	beq.n	8015c62 <_dtoa_r+0x9ba>
 8015c84:	3301      	adds	r3, #1
 8015c86:	e7c7      	b.n	8015c18 <_dtoa_r+0x970>
 8015c88:	9a04      	ldr	r2, [sp, #16]
 8015c8a:	9908      	ldr	r1, [sp, #32]
 8015c8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015c90:	428a      	cmp	r2, r1
 8015c92:	d02b      	beq.n	8015cec <_dtoa_r+0xa44>
 8015c94:	4629      	mov	r1, r5
 8015c96:	2300      	movs	r3, #0
 8015c98:	220a      	movs	r2, #10
 8015c9a:	4630      	mov	r0, r6
 8015c9c:	f000 fd42 	bl	8016724 <__multadd>
 8015ca0:	45b9      	cmp	r9, r7
 8015ca2:	4605      	mov	r5, r0
 8015ca4:	f04f 0300 	mov.w	r3, #0
 8015ca8:	f04f 020a 	mov.w	r2, #10
 8015cac:	4649      	mov	r1, r9
 8015cae:	4630      	mov	r0, r6
 8015cb0:	d107      	bne.n	8015cc2 <_dtoa_r+0xa1a>
 8015cb2:	f000 fd37 	bl	8016724 <__multadd>
 8015cb6:	4681      	mov	r9, r0
 8015cb8:	4607      	mov	r7, r0
 8015cba:	9b04      	ldr	r3, [sp, #16]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	9304      	str	r3, [sp, #16]
 8015cc0:	e774      	b.n	8015bac <_dtoa_r+0x904>
 8015cc2:	f000 fd2f 	bl	8016724 <__multadd>
 8015cc6:	4639      	mov	r1, r7
 8015cc8:	4681      	mov	r9, r0
 8015cca:	2300      	movs	r3, #0
 8015ccc:	220a      	movs	r2, #10
 8015cce:	4630      	mov	r0, r6
 8015cd0:	f000 fd28 	bl	8016724 <__multadd>
 8015cd4:	4607      	mov	r7, r0
 8015cd6:	e7f0      	b.n	8015cba <_dtoa_r+0xa12>
 8015cd8:	f1ba 0f00 	cmp.w	sl, #0
 8015cdc:	9a01      	ldr	r2, [sp, #4]
 8015cde:	bfcc      	ite	gt
 8015ce0:	46d0      	movgt	r8, sl
 8015ce2:	f04f 0801 	movle.w	r8, #1
 8015ce6:	4490      	add	r8, r2
 8015ce8:	f04f 0900 	mov.w	r9, #0
 8015cec:	4629      	mov	r1, r5
 8015cee:	2201      	movs	r2, #1
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	9302      	str	r3, [sp, #8]
 8015cf4:	f000 ff10 	bl	8016b18 <__lshift>
 8015cf8:	4621      	mov	r1, r4
 8015cfa:	4605      	mov	r5, r0
 8015cfc:	f000 ff7c 	bl	8016bf8 <__mcmp>
 8015d00:	2800      	cmp	r0, #0
 8015d02:	dcb1      	bgt.n	8015c68 <_dtoa_r+0x9c0>
 8015d04:	d102      	bne.n	8015d0c <_dtoa_r+0xa64>
 8015d06:	9b02      	ldr	r3, [sp, #8]
 8015d08:	07db      	lsls	r3, r3, #31
 8015d0a:	d4ad      	bmi.n	8015c68 <_dtoa_r+0x9c0>
 8015d0c:	4643      	mov	r3, r8
 8015d0e:	4698      	mov	r8, r3
 8015d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d14:	2a30      	cmp	r2, #48	; 0x30
 8015d16:	d0fa      	beq.n	8015d0e <_dtoa_r+0xa66>
 8015d18:	e6f6      	b.n	8015b08 <_dtoa_r+0x860>
 8015d1a:	9a01      	ldr	r2, [sp, #4]
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d1a4      	bne.n	8015c6a <_dtoa_r+0x9c2>
 8015d20:	f10b 0b01 	add.w	fp, fp, #1
 8015d24:	2331      	movs	r3, #49	; 0x31
 8015d26:	e778      	b.n	8015c1a <_dtoa_r+0x972>
 8015d28:	4b14      	ldr	r3, [pc, #80]	; (8015d7c <_dtoa_r+0xad4>)
 8015d2a:	f7ff bb27 	b.w	801537c <_dtoa_r+0xd4>
 8015d2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	f47f ab03 	bne.w	801533c <_dtoa_r+0x94>
 8015d36:	4b12      	ldr	r3, [pc, #72]	; (8015d80 <_dtoa_r+0xad8>)
 8015d38:	f7ff bb20 	b.w	801537c <_dtoa_r+0xd4>
 8015d3c:	f1ba 0f00 	cmp.w	sl, #0
 8015d40:	dc03      	bgt.n	8015d4a <_dtoa_r+0xaa2>
 8015d42:	9b06      	ldr	r3, [sp, #24]
 8015d44:	2b02      	cmp	r3, #2
 8015d46:	f73f aec7 	bgt.w	8015ad8 <_dtoa_r+0x830>
 8015d4a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d4e:	4621      	mov	r1, r4
 8015d50:	4628      	mov	r0, r5
 8015d52:	f7ff fa1b 	bl	801518c <quorem>
 8015d56:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015d5a:	f808 3b01 	strb.w	r3, [r8], #1
 8015d5e:	9a01      	ldr	r2, [sp, #4]
 8015d60:	eba8 0202 	sub.w	r2, r8, r2
 8015d64:	4592      	cmp	sl, r2
 8015d66:	ddb7      	ble.n	8015cd8 <_dtoa_r+0xa30>
 8015d68:	4629      	mov	r1, r5
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	220a      	movs	r2, #10
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f000 fcd8 	bl	8016724 <__multadd>
 8015d74:	4605      	mov	r5, r0
 8015d76:	e7ea      	b.n	8015d4e <_dtoa_r+0xaa6>
 8015d78:	080185a0 	.word	0x080185a0
 8015d7c:	080183a0 	.word	0x080183a0
 8015d80:	08018521 	.word	0x08018521

08015d84 <__sflush_r>:
 8015d84:	898a      	ldrh	r2, [r1, #12]
 8015d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d8a:	4605      	mov	r5, r0
 8015d8c:	0710      	lsls	r0, r2, #28
 8015d8e:	460c      	mov	r4, r1
 8015d90:	d458      	bmi.n	8015e44 <__sflush_r+0xc0>
 8015d92:	684b      	ldr	r3, [r1, #4]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	dc05      	bgt.n	8015da4 <__sflush_r+0x20>
 8015d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	dc02      	bgt.n	8015da4 <__sflush_r+0x20>
 8015d9e:	2000      	movs	r0, #0
 8015da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015da6:	2e00      	cmp	r6, #0
 8015da8:	d0f9      	beq.n	8015d9e <__sflush_r+0x1a>
 8015daa:	2300      	movs	r3, #0
 8015dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015db0:	682f      	ldr	r7, [r5, #0]
 8015db2:	602b      	str	r3, [r5, #0]
 8015db4:	d032      	beq.n	8015e1c <__sflush_r+0x98>
 8015db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015db8:	89a3      	ldrh	r3, [r4, #12]
 8015dba:	075a      	lsls	r2, r3, #29
 8015dbc:	d505      	bpl.n	8015dca <__sflush_r+0x46>
 8015dbe:	6863      	ldr	r3, [r4, #4]
 8015dc0:	1ac0      	subs	r0, r0, r3
 8015dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015dc4:	b10b      	cbz	r3, 8015dca <__sflush_r+0x46>
 8015dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dc8:	1ac0      	subs	r0, r0, r3
 8015dca:	2300      	movs	r3, #0
 8015dcc:	4602      	mov	r2, r0
 8015dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dd0:	6a21      	ldr	r1, [r4, #32]
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	47b0      	blx	r6
 8015dd6:	1c43      	adds	r3, r0, #1
 8015dd8:	89a3      	ldrh	r3, [r4, #12]
 8015dda:	d106      	bne.n	8015dea <__sflush_r+0x66>
 8015ddc:	6829      	ldr	r1, [r5, #0]
 8015dde:	291d      	cmp	r1, #29
 8015de0:	d82c      	bhi.n	8015e3c <__sflush_r+0xb8>
 8015de2:	4a2a      	ldr	r2, [pc, #168]	; (8015e8c <__sflush_r+0x108>)
 8015de4:	40ca      	lsrs	r2, r1
 8015de6:	07d6      	lsls	r6, r2, #31
 8015de8:	d528      	bpl.n	8015e3c <__sflush_r+0xb8>
 8015dea:	2200      	movs	r2, #0
 8015dec:	6062      	str	r2, [r4, #4]
 8015dee:	04d9      	lsls	r1, r3, #19
 8015df0:	6922      	ldr	r2, [r4, #16]
 8015df2:	6022      	str	r2, [r4, #0]
 8015df4:	d504      	bpl.n	8015e00 <__sflush_r+0x7c>
 8015df6:	1c42      	adds	r2, r0, #1
 8015df8:	d101      	bne.n	8015dfe <__sflush_r+0x7a>
 8015dfa:	682b      	ldr	r3, [r5, #0]
 8015dfc:	b903      	cbnz	r3, 8015e00 <__sflush_r+0x7c>
 8015dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8015e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e02:	602f      	str	r7, [r5, #0]
 8015e04:	2900      	cmp	r1, #0
 8015e06:	d0ca      	beq.n	8015d9e <__sflush_r+0x1a>
 8015e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e0c:	4299      	cmp	r1, r3
 8015e0e:	d002      	beq.n	8015e16 <__sflush_r+0x92>
 8015e10:	4628      	mov	r0, r5
 8015e12:	f001 f8f9 	bl	8017008 <_free_r>
 8015e16:	2000      	movs	r0, #0
 8015e18:	6360      	str	r0, [r4, #52]	; 0x34
 8015e1a:	e7c1      	b.n	8015da0 <__sflush_r+0x1c>
 8015e1c:	6a21      	ldr	r1, [r4, #32]
 8015e1e:	2301      	movs	r3, #1
 8015e20:	4628      	mov	r0, r5
 8015e22:	47b0      	blx	r6
 8015e24:	1c41      	adds	r1, r0, #1
 8015e26:	d1c7      	bne.n	8015db8 <__sflush_r+0x34>
 8015e28:	682b      	ldr	r3, [r5, #0]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d0c4      	beq.n	8015db8 <__sflush_r+0x34>
 8015e2e:	2b1d      	cmp	r3, #29
 8015e30:	d001      	beq.n	8015e36 <__sflush_r+0xb2>
 8015e32:	2b16      	cmp	r3, #22
 8015e34:	d101      	bne.n	8015e3a <__sflush_r+0xb6>
 8015e36:	602f      	str	r7, [r5, #0]
 8015e38:	e7b1      	b.n	8015d9e <__sflush_r+0x1a>
 8015e3a:	89a3      	ldrh	r3, [r4, #12]
 8015e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e40:	81a3      	strh	r3, [r4, #12]
 8015e42:	e7ad      	b.n	8015da0 <__sflush_r+0x1c>
 8015e44:	690f      	ldr	r7, [r1, #16]
 8015e46:	2f00      	cmp	r7, #0
 8015e48:	d0a9      	beq.n	8015d9e <__sflush_r+0x1a>
 8015e4a:	0793      	lsls	r3, r2, #30
 8015e4c:	680e      	ldr	r6, [r1, #0]
 8015e4e:	bf08      	it	eq
 8015e50:	694b      	ldreq	r3, [r1, #20]
 8015e52:	600f      	str	r7, [r1, #0]
 8015e54:	bf18      	it	ne
 8015e56:	2300      	movne	r3, #0
 8015e58:	eba6 0807 	sub.w	r8, r6, r7
 8015e5c:	608b      	str	r3, [r1, #8]
 8015e5e:	f1b8 0f00 	cmp.w	r8, #0
 8015e62:	dd9c      	ble.n	8015d9e <__sflush_r+0x1a>
 8015e64:	6a21      	ldr	r1, [r4, #32]
 8015e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e68:	4643      	mov	r3, r8
 8015e6a:	463a      	mov	r2, r7
 8015e6c:	4628      	mov	r0, r5
 8015e6e:	47b0      	blx	r6
 8015e70:	2800      	cmp	r0, #0
 8015e72:	dc06      	bgt.n	8015e82 <__sflush_r+0xfe>
 8015e74:	89a3      	ldrh	r3, [r4, #12]
 8015e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e7a:	81a3      	strh	r3, [r4, #12]
 8015e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e80:	e78e      	b.n	8015da0 <__sflush_r+0x1c>
 8015e82:	4407      	add	r7, r0
 8015e84:	eba8 0800 	sub.w	r8, r8, r0
 8015e88:	e7e9      	b.n	8015e5e <__sflush_r+0xda>
 8015e8a:	bf00      	nop
 8015e8c:	20400001 	.word	0x20400001

08015e90 <_fflush_r>:
 8015e90:	b538      	push	{r3, r4, r5, lr}
 8015e92:	690b      	ldr	r3, [r1, #16]
 8015e94:	4605      	mov	r5, r0
 8015e96:	460c      	mov	r4, r1
 8015e98:	b913      	cbnz	r3, 8015ea0 <_fflush_r+0x10>
 8015e9a:	2500      	movs	r5, #0
 8015e9c:	4628      	mov	r0, r5
 8015e9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ea0:	b118      	cbz	r0, 8015eaa <_fflush_r+0x1a>
 8015ea2:	6983      	ldr	r3, [r0, #24]
 8015ea4:	b90b      	cbnz	r3, 8015eaa <_fflush_r+0x1a>
 8015ea6:	f7fd fa57 	bl	8013358 <__sinit>
 8015eaa:	4b14      	ldr	r3, [pc, #80]	; (8015efc <_fflush_r+0x6c>)
 8015eac:	429c      	cmp	r4, r3
 8015eae:	d11b      	bne.n	8015ee8 <_fflush_r+0x58>
 8015eb0:	686c      	ldr	r4, [r5, #4]
 8015eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d0ef      	beq.n	8015e9a <_fflush_r+0xa>
 8015eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ebc:	07d0      	lsls	r0, r2, #31
 8015ebe:	d404      	bmi.n	8015eca <_fflush_r+0x3a>
 8015ec0:	0599      	lsls	r1, r3, #22
 8015ec2:	d402      	bmi.n	8015eca <_fflush_r+0x3a>
 8015ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ec6:	f7fd fb0a 	bl	80134de <__retarget_lock_acquire_recursive>
 8015eca:	4628      	mov	r0, r5
 8015ecc:	4621      	mov	r1, r4
 8015ece:	f7ff ff59 	bl	8015d84 <__sflush_r>
 8015ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ed4:	07da      	lsls	r2, r3, #31
 8015ed6:	4605      	mov	r5, r0
 8015ed8:	d4e0      	bmi.n	8015e9c <_fflush_r+0xc>
 8015eda:	89a3      	ldrh	r3, [r4, #12]
 8015edc:	059b      	lsls	r3, r3, #22
 8015ede:	d4dd      	bmi.n	8015e9c <_fflush_r+0xc>
 8015ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ee2:	f7fd fafd 	bl	80134e0 <__retarget_lock_release_recursive>
 8015ee6:	e7d9      	b.n	8015e9c <_fflush_r+0xc>
 8015ee8:	4b05      	ldr	r3, [pc, #20]	; (8015f00 <_fflush_r+0x70>)
 8015eea:	429c      	cmp	r4, r3
 8015eec:	d101      	bne.n	8015ef2 <_fflush_r+0x62>
 8015eee:	68ac      	ldr	r4, [r5, #8]
 8015ef0:	e7df      	b.n	8015eb2 <_fflush_r+0x22>
 8015ef2:	4b04      	ldr	r3, [pc, #16]	; (8015f04 <_fflush_r+0x74>)
 8015ef4:	429c      	cmp	r4, r3
 8015ef6:	bf08      	it	eq
 8015ef8:	68ec      	ldreq	r4, [r5, #12]
 8015efa:	e7da      	b.n	8015eb2 <_fflush_r+0x22>
 8015efc:	0801834c 	.word	0x0801834c
 8015f00:	0801836c 	.word	0x0801836c
 8015f04:	0801832c 	.word	0x0801832c

08015f08 <rshift>:
 8015f08:	6903      	ldr	r3, [r0, #16]
 8015f0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015f0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f12:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015f16:	f100 0414 	add.w	r4, r0, #20
 8015f1a:	dd45      	ble.n	8015fa8 <rshift+0xa0>
 8015f1c:	f011 011f 	ands.w	r1, r1, #31
 8015f20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015f24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015f28:	d10c      	bne.n	8015f44 <rshift+0x3c>
 8015f2a:	f100 0710 	add.w	r7, r0, #16
 8015f2e:	4629      	mov	r1, r5
 8015f30:	42b1      	cmp	r1, r6
 8015f32:	d334      	bcc.n	8015f9e <rshift+0x96>
 8015f34:	1a9b      	subs	r3, r3, r2
 8015f36:	009b      	lsls	r3, r3, #2
 8015f38:	1eea      	subs	r2, r5, #3
 8015f3a:	4296      	cmp	r6, r2
 8015f3c:	bf38      	it	cc
 8015f3e:	2300      	movcc	r3, #0
 8015f40:	4423      	add	r3, r4
 8015f42:	e015      	b.n	8015f70 <rshift+0x68>
 8015f44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015f48:	f1c1 0820 	rsb	r8, r1, #32
 8015f4c:	40cf      	lsrs	r7, r1
 8015f4e:	f105 0e04 	add.w	lr, r5, #4
 8015f52:	46a1      	mov	r9, r4
 8015f54:	4576      	cmp	r6, lr
 8015f56:	46f4      	mov	ip, lr
 8015f58:	d815      	bhi.n	8015f86 <rshift+0x7e>
 8015f5a:	1a9a      	subs	r2, r3, r2
 8015f5c:	0092      	lsls	r2, r2, #2
 8015f5e:	3a04      	subs	r2, #4
 8015f60:	3501      	adds	r5, #1
 8015f62:	42ae      	cmp	r6, r5
 8015f64:	bf38      	it	cc
 8015f66:	2200      	movcc	r2, #0
 8015f68:	18a3      	adds	r3, r4, r2
 8015f6a:	50a7      	str	r7, [r4, r2]
 8015f6c:	b107      	cbz	r7, 8015f70 <rshift+0x68>
 8015f6e:	3304      	adds	r3, #4
 8015f70:	1b1a      	subs	r2, r3, r4
 8015f72:	42a3      	cmp	r3, r4
 8015f74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015f78:	bf08      	it	eq
 8015f7a:	2300      	moveq	r3, #0
 8015f7c:	6102      	str	r2, [r0, #16]
 8015f7e:	bf08      	it	eq
 8015f80:	6143      	streq	r3, [r0, #20]
 8015f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f86:	f8dc c000 	ldr.w	ip, [ip]
 8015f8a:	fa0c fc08 	lsl.w	ip, ip, r8
 8015f8e:	ea4c 0707 	orr.w	r7, ip, r7
 8015f92:	f849 7b04 	str.w	r7, [r9], #4
 8015f96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015f9a:	40cf      	lsrs	r7, r1
 8015f9c:	e7da      	b.n	8015f54 <rshift+0x4c>
 8015f9e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015fa2:	f847 cf04 	str.w	ip, [r7, #4]!
 8015fa6:	e7c3      	b.n	8015f30 <rshift+0x28>
 8015fa8:	4623      	mov	r3, r4
 8015faa:	e7e1      	b.n	8015f70 <rshift+0x68>

08015fac <__hexdig_fun>:
 8015fac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015fb0:	2b09      	cmp	r3, #9
 8015fb2:	d802      	bhi.n	8015fba <__hexdig_fun+0xe>
 8015fb4:	3820      	subs	r0, #32
 8015fb6:	b2c0      	uxtb	r0, r0
 8015fb8:	4770      	bx	lr
 8015fba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015fbe:	2b05      	cmp	r3, #5
 8015fc0:	d801      	bhi.n	8015fc6 <__hexdig_fun+0x1a>
 8015fc2:	3847      	subs	r0, #71	; 0x47
 8015fc4:	e7f7      	b.n	8015fb6 <__hexdig_fun+0xa>
 8015fc6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015fca:	2b05      	cmp	r3, #5
 8015fcc:	d801      	bhi.n	8015fd2 <__hexdig_fun+0x26>
 8015fce:	3827      	subs	r0, #39	; 0x27
 8015fd0:	e7f1      	b.n	8015fb6 <__hexdig_fun+0xa>
 8015fd2:	2000      	movs	r0, #0
 8015fd4:	4770      	bx	lr
	...

08015fd8 <__gethex>:
 8015fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fdc:	ed2d 8b02 	vpush	{d8}
 8015fe0:	b089      	sub	sp, #36	; 0x24
 8015fe2:	ee08 0a10 	vmov	s16, r0
 8015fe6:	9304      	str	r3, [sp, #16]
 8015fe8:	4bb4      	ldr	r3, [pc, #720]	; (80162bc <__gethex+0x2e4>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	9301      	str	r3, [sp, #4]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	468b      	mov	fp, r1
 8015ff2:	4690      	mov	r8, r2
 8015ff4:	f7ea f924 	bl	8000240 <strlen>
 8015ff8:	9b01      	ldr	r3, [sp, #4]
 8015ffa:	f8db 2000 	ldr.w	r2, [fp]
 8015ffe:	4403      	add	r3, r0
 8016000:	4682      	mov	sl, r0
 8016002:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016006:	9305      	str	r3, [sp, #20]
 8016008:	1c93      	adds	r3, r2, #2
 801600a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801600e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016012:	32fe      	adds	r2, #254	; 0xfe
 8016014:	18d1      	adds	r1, r2, r3
 8016016:	461f      	mov	r7, r3
 8016018:	f813 0b01 	ldrb.w	r0, [r3], #1
 801601c:	9100      	str	r1, [sp, #0]
 801601e:	2830      	cmp	r0, #48	; 0x30
 8016020:	d0f8      	beq.n	8016014 <__gethex+0x3c>
 8016022:	f7ff ffc3 	bl	8015fac <__hexdig_fun>
 8016026:	4604      	mov	r4, r0
 8016028:	2800      	cmp	r0, #0
 801602a:	d13a      	bne.n	80160a2 <__gethex+0xca>
 801602c:	9901      	ldr	r1, [sp, #4]
 801602e:	4652      	mov	r2, sl
 8016030:	4638      	mov	r0, r7
 8016032:	f001 f9ad 	bl	8017390 <strncmp>
 8016036:	4605      	mov	r5, r0
 8016038:	2800      	cmp	r0, #0
 801603a:	d168      	bne.n	801610e <__gethex+0x136>
 801603c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016040:	eb07 060a 	add.w	r6, r7, sl
 8016044:	f7ff ffb2 	bl	8015fac <__hexdig_fun>
 8016048:	2800      	cmp	r0, #0
 801604a:	d062      	beq.n	8016112 <__gethex+0x13a>
 801604c:	4633      	mov	r3, r6
 801604e:	7818      	ldrb	r0, [r3, #0]
 8016050:	2830      	cmp	r0, #48	; 0x30
 8016052:	461f      	mov	r7, r3
 8016054:	f103 0301 	add.w	r3, r3, #1
 8016058:	d0f9      	beq.n	801604e <__gethex+0x76>
 801605a:	f7ff ffa7 	bl	8015fac <__hexdig_fun>
 801605e:	2301      	movs	r3, #1
 8016060:	fab0 f480 	clz	r4, r0
 8016064:	0964      	lsrs	r4, r4, #5
 8016066:	4635      	mov	r5, r6
 8016068:	9300      	str	r3, [sp, #0]
 801606a:	463a      	mov	r2, r7
 801606c:	4616      	mov	r6, r2
 801606e:	3201      	adds	r2, #1
 8016070:	7830      	ldrb	r0, [r6, #0]
 8016072:	f7ff ff9b 	bl	8015fac <__hexdig_fun>
 8016076:	2800      	cmp	r0, #0
 8016078:	d1f8      	bne.n	801606c <__gethex+0x94>
 801607a:	9901      	ldr	r1, [sp, #4]
 801607c:	4652      	mov	r2, sl
 801607e:	4630      	mov	r0, r6
 8016080:	f001 f986 	bl	8017390 <strncmp>
 8016084:	b980      	cbnz	r0, 80160a8 <__gethex+0xd0>
 8016086:	b94d      	cbnz	r5, 801609c <__gethex+0xc4>
 8016088:	eb06 050a 	add.w	r5, r6, sl
 801608c:	462a      	mov	r2, r5
 801608e:	4616      	mov	r6, r2
 8016090:	3201      	adds	r2, #1
 8016092:	7830      	ldrb	r0, [r6, #0]
 8016094:	f7ff ff8a 	bl	8015fac <__hexdig_fun>
 8016098:	2800      	cmp	r0, #0
 801609a:	d1f8      	bne.n	801608e <__gethex+0xb6>
 801609c:	1bad      	subs	r5, r5, r6
 801609e:	00ad      	lsls	r5, r5, #2
 80160a0:	e004      	b.n	80160ac <__gethex+0xd4>
 80160a2:	2400      	movs	r4, #0
 80160a4:	4625      	mov	r5, r4
 80160a6:	e7e0      	b.n	801606a <__gethex+0x92>
 80160a8:	2d00      	cmp	r5, #0
 80160aa:	d1f7      	bne.n	801609c <__gethex+0xc4>
 80160ac:	7833      	ldrb	r3, [r6, #0]
 80160ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80160b2:	2b50      	cmp	r3, #80	; 0x50
 80160b4:	d13b      	bne.n	801612e <__gethex+0x156>
 80160b6:	7873      	ldrb	r3, [r6, #1]
 80160b8:	2b2b      	cmp	r3, #43	; 0x2b
 80160ba:	d02c      	beq.n	8016116 <__gethex+0x13e>
 80160bc:	2b2d      	cmp	r3, #45	; 0x2d
 80160be:	d02e      	beq.n	801611e <__gethex+0x146>
 80160c0:	1c71      	adds	r1, r6, #1
 80160c2:	f04f 0900 	mov.w	r9, #0
 80160c6:	7808      	ldrb	r0, [r1, #0]
 80160c8:	f7ff ff70 	bl	8015fac <__hexdig_fun>
 80160cc:	1e43      	subs	r3, r0, #1
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	2b18      	cmp	r3, #24
 80160d2:	d82c      	bhi.n	801612e <__gethex+0x156>
 80160d4:	f1a0 0210 	sub.w	r2, r0, #16
 80160d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80160dc:	f7ff ff66 	bl	8015fac <__hexdig_fun>
 80160e0:	1e43      	subs	r3, r0, #1
 80160e2:	b2db      	uxtb	r3, r3
 80160e4:	2b18      	cmp	r3, #24
 80160e6:	d91d      	bls.n	8016124 <__gethex+0x14c>
 80160e8:	f1b9 0f00 	cmp.w	r9, #0
 80160ec:	d000      	beq.n	80160f0 <__gethex+0x118>
 80160ee:	4252      	negs	r2, r2
 80160f0:	4415      	add	r5, r2
 80160f2:	f8cb 1000 	str.w	r1, [fp]
 80160f6:	b1e4      	cbz	r4, 8016132 <__gethex+0x15a>
 80160f8:	9b00      	ldr	r3, [sp, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	bf14      	ite	ne
 80160fe:	2700      	movne	r7, #0
 8016100:	2706      	moveq	r7, #6
 8016102:	4638      	mov	r0, r7
 8016104:	b009      	add	sp, #36	; 0x24
 8016106:	ecbd 8b02 	vpop	{d8}
 801610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801610e:	463e      	mov	r6, r7
 8016110:	4625      	mov	r5, r4
 8016112:	2401      	movs	r4, #1
 8016114:	e7ca      	b.n	80160ac <__gethex+0xd4>
 8016116:	f04f 0900 	mov.w	r9, #0
 801611a:	1cb1      	adds	r1, r6, #2
 801611c:	e7d3      	b.n	80160c6 <__gethex+0xee>
 801611e:	f04f 0901 	mov.w	r9, #1
 8016122:	e7fa      	b.n	801611a <__gethex+0x142>
 8016124:	230a      	movs	r3, #10
 8016126:	fb03 0202 	mla	r2, r3, r2, r0
 801612a:	3a10      	subs	r2, #16
 801612c:	e7d4      	b.n	80160d8 <__gethex+0x100>
 801612e:	4631      	mov	r1, r6
 8016130:	e7df      	b.n	80160f2 <__gethex+0x11a>
 8016132:	1bf3      	subs	r3, r6, r7
 8016134:	3b01      	subs	r3, #1
 8016136:	4621      	mov	r1, r4
 8016138:	2b07      	cmp	r3, #7
 801613a:	dc0b      	bgt.n	8016154 <__gethex+0x17c>
 801613c:	ee18 0a10 	vmov	r0, s16
 8016140:	f000 fa8e 	bl	8016660 <_Balloc>
 8016144:	4604      	mov	r4, r0
 8016146:	b940      	cbnz	r0, 801615a <__gethex+0x182>
 8016148:	4b5d      	ldr	r3, [pc, #372]	; (80162c0 <__gethex+0x2e8>)
 801614a:	4602      	mov	r2, r0
 801614c:	21de      	movs	r1, #222	; 0xde
 801614e:	485d      	ldr	r0, [pc, #372]	; (80162c4 <__gethex+0x2ec>)
 8016150:	f001 f940 	bl	80173d4 <__assert_func>
 8016154:	3101      	adds	r1, #1
 8016156:	105b      	asrs	r3, r3, #1
 8016158:	e7ee      	b.n	8016138 <__gethex+0x160>
 801615a:	f100 0914 	add.w	r9, r0, #20
 801615e:	f04f 0b00 	mov.w	fp, #0
 8016162:	f1ca 0301 	rsb	r3, sl, #1
 8016166:	f8cd 9008 	str.w	r9, [sp, #8]
 801616a:	f8cd b000 	str.w	fp, [sp]
 801616e:	9306      	str	r3, [sp, #24]
 8016170:	42b7      	cmp	r7, r6
 8016172:	d340      	bcc.n	80161f6 <__gethex+0x21e>
 8016174:	9802      	ldr	r0, [sp, #8]
 8016176:	9b00      	ldr	r3, [sp, #0]
 8016178:	f840 3b04 	str.w	r3, [r0], #4
 801617c:	eba0 0009 	sub.w	r0, r0, r9
 8016180:	1080      	asrs	r0, r0, #2
 8016182:	0146      	lsls	r6, r0, #5
 8016184:	6120      	str	r0, [r4, #16]
 8016186:	4618      	mov	r0, r3
 8016188:	f000 fb5c 	bl	8016844 <__hi0bits>
 801618c:	1a30      	subs	r0, r6, r0
 801618e:	f8d8 6000 	ldr.w	r6, [r8]
 8016192:	42b0      	cmp	r0, r6
 8016194:	dd63      	ble.n	801625e <__gethex+0x286>
 8016196:	1b87      	subs	r7, r0, r6
 8016198:	4639      	mov	r1, r7
 801619a:	4620      	mov	r0, r4
 801619c:	f000 fefd 	bl	8016f9a <__any_on>
 80161a0:	4682      	mov	sl, r0
 80161a2:	b1a8      	cbz	r0, 80161d0 <__gethex+0x1f8>
 80161a4:	1e7b      	subs	r3, r7, #1
 80161a6:	1159      	asrs	r1, r3, #5
 80161a8:	f003 021f 	and.w	r2, r3, #31
 80161ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80161b0:	f04f 0a01 	mov.w	sl, #1
 80161b4:	fa0a f202 	lsl.w	r2, sl, r2
 80161b8:	420a      	tst	r2, r1
 80161ba:	d009      	beq.n	80161d0 <__gethex+0x1f8>
 80161bc:	4553      	cmp	r3, sl
 80161be:	dd05      	ble.n	80161cc <__gethex+0x1f4>
 80161c0:	1eb9      	subs	r1, r7, #2
 80161c2:	4620      	mov	r0, r4
 80161c4:	f000 fee9 	bl	8016f9a <__any_on>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d145      	bne.n	8016258 <__gethex+0x280>
 80161cc:	f04f 0a02 	mov.w	sl, #2
 80161d0:	4639      	mov	r1, r7
 80161d2:	4620      	mov	r0, r4
 80161d4:	f7ff fe98 	bl	8015f08 <rshift>
 80161d8:	443d      	add	r5, r7
 80161da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80161de:	42ab      	cmp	r3, r5
 80161e0:	da4c      	bge.n	801627c <__gethex+0x2a4>
 80161e2:	ee18 0a10 	vmov	r0, s16
 80161e6:	4621      	mov	r1, r4
 80161e8:	f000 fa7a 	bl	80166e0 <_Bfree>
 80161ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80161ee:	2300      	movs	r3, #0
 80161f0:	6013      	str	r3, [r2, #0]
 80161f2:	27a3      	movs	r7, #163	; 0xa3
 80161f4:	e785      	b.n	8016102 <__gethex+0x12a>
 80161f6:	1e73      	subs	r3, r6, #1
 80161f8:	9a05      	ldr	r2, [sp, #20]
 80161fa:	9303      	str	r3, [sp, #12]
 80161fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016200:	4293      	cmp	r3, r2
 8016202:	d019      	beq.n	8016238 <__gethex+0x260>
 8016204:	f1bb 0f20 	cmp.w	fp, #32
 8016208:	d107      	bne.n	801621a <__gethex+0x242>
 801620a:	9b02      	ldr	r3, [sp, #8]
 801620c:	9a00      	ldr	r2, [sp, #0]
 801620e:	f843 2b04 	str.w	r2, [r3], #4
 8016212:	9302      	str	r3, [sp, #8]
 8016214:	2300      	movs	r3, #0
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	469b      	mov	fp, r3
 801621a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801621e:	f7ff fec5 	bl	8015fac <__hexdig_fun>
 8016222:	9b00      	ldr	r3, [sp, #0]
 8016224:	f000 000f 	and.w	r0, r0, #15
 8016228:	fa00 f00b 	lsl.w	r0, r0, fp
 801622c:	4303      	orrs	r3, r0
 801622e:	9300      	str	r3, [sp, #0]
 8016230:	f10b 0b04 	add.w	fp, fp, #4
 8016234:	9b03      	ldr	r3, [sp, #12]
 8016236:	e00d      	b.n	8016254 <__gethex+0x27c>
 8016238:	9b03      	ldr	r3, [sp, #12]
 801623a:	9a06      	ldr	r2, [sp, #24]
 801623c:	4413      	add	r3, r2
 801623e:	42bb      	cmp	r3, r7
 8016240:	d3e0      	bcc.n	8016204 <__gethex+0x22c>
 8016242:	4618      	mov	r0, r3
 8016244:	9901      	ldr	r1, [sp, #4]
 8016246:	9307      	str	r3, [sp, #28]
 8016248:	4652      	mov	r2, sl
 801624a:	f001 f8a1 	bl	8017390 <strncmp>
 801624e:	9b07      	ldr	r3, [sp, #28]
 8016250:	2800      	cmp	r0, #0
 8016252:	d1d7      	bne.n	8016204 <__gethex+0x22c>
 8016254:	461e      	mov	r6, r3
 8016256:	e78b      	b.n	8016170 <__gethex+0x198>
 8016258:	f04f 0a03 	mov.w	sl, #3
 801625c:	e7b8      	b.n	80161d0 <__gethex+0x1f8>
 801625e:	da0a      	bge.n	8016276 <__gethex+0x29e>
 8016260:	1a37      	subs	r7, r6, r0
 8016262:	4621      	mov	r1, r4
 8016264:	ee18 0a10 	vmov	r0, s16
 8016268:	463a      	mov	r2, r7
 801626a:	f000 fc55 	bl	8016b18 <__lshift>
 801626e:	1bed      	subs	r5, r5, r7
 8016270:	4604      	mov	r4, r0
 8016272:	f100 0914 	add.w	r9, r0, #20
 8016276:	f04f 0a00 	mov.w	sl, #0
 801627a:	e7ae      	b.n	80161da <__gethex+0x202>
 801627c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016280:	42a8      	cmp	r0, r5
 8016282:	dd72      	ble.n	801636a <__gethex+0x392>
 8016284:	1b45      	subs	r5, r0, r5
 8016286:	42ae      	cmp	r6, r5
 8016288:	dc36      	bgt.n	80162f8 <__gethex+0x320>
 801628a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801628e:	2b02      	cmp	r3, #2
 8016290:	d02a      	beq.n	80162e8 <__gethex+0x310>
 8016292:	2b03      	cmp	r3, #3
 8016294:	d02c      	beq.n	80162f0 <__gethex+0x318>
 8016296:	2b01      	cmp	r3, #1
 8016298:	d11c      	bne.n	80162d4 <__gethex+0x2fc>
 801629a:	42ae      	cmp	r6, r5
 801629c:	d11a      	bne.n	80162d4 <__gethex+0x2fc>
 801629e:	2e01      	cmp	r6, #1
 80162a0:	d112      	bne.n	80162c8 <__gethex+0x2f0>
 80162a2:	9a04      	ldr	r2, [sp, #16]
 80162a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162a8:	6013      	str	r3, [r2, #0]
 80162aa:	2301      	movs	r3, #1
 80162ac:	6123      	str	r3, [r4, #16]
 80162ae:	f8c9 3000 	str.w	r3, [r9]
 80162b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162b4:	2762      	movs	r7, #98	; 0x62
 80162b6:	601c      	str	r4, [r3, #0]
 80162b8:	e723      	b.n	8016102 <__gethex+0x12a>
 80162ba:	bf00      	nop
 80162bc:	08018618 	.word	0x08018618
 80162c0:	080185a0 	.word	0x080185a0
 80162c4:	080185b1 	.word	0x080185b1
 80162c8:	1e71      	subs	r1, r6, #1
 80162ca:	4620      	mov	r0, r4
 80162cc:	f000 fe65 	bl	8016f9a <__any_on>
 80162d0:	2800      	cmp	r0, #0
 80162d2:	d1e6      	bne.n	80162a2 <__gethex+0x2ca>
 80162d4:	ee18 0a10 	vmov	r0, s16
 80162d8:	4621      	mov	r1, r4
 80162da:	f000 fa01 	bl	80166e0 <_Bfree>
 80162de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80162e0:	2300      	movs	r3, #0
 80162e2:	6013      	str	r3, [r2, #0]
 80162e4:	2750      	movs	r7, #80	; 0x50
 80162e6:	e70c      	b.n	8016102 <__gethex+0x12a>
 80162e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d1f2      	bne.n	80162d4 <__gethex+0x2fc>
 80162ee:	e7d8      	b.n	80162a2 <__gethex+0x2ca>
 80162f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1d5      	bne.n	80162a2 <__gethex+0x2ca>
 80162f6:	e7ed      	b.n	80162d4 <__gethex+0x2fc>
 80162f8:	1e6f      	subs	r7, r5, #1
 80162fa:	f1ba 0f00 	cmp.w	sl, #0
 80162fe:	d131      	bne.n	8016364 <__gethex+0x38c>
 8016300:	b127      	cbz	r7, 801630c <__gethex+0x334>
 8016302:	4639      	mov	r1, r7
 8016304:	4620      	mov	r0, r4
 8016306:	f000 fe48 	bl	8016f9a <__any_on>
 801630a:	4682      	mov	sl, r0
 801630c:	117b      	asrs	r3, r7, #5
 801630e:	2101      	movs	r1, #1
 8016310:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016314:	f007 071f 	and.w	r7, r7, #31
 8016318:	fa01 f707 	lsl.w	r7, r1, r7
 801631c:	421f      	tst	r7, r3
 801631e:	4629      	mov	r1, r5
 8016320:	4620      	mov	r0, r4
 8016322:	bf18      	it	ne
 8016324:	f04a 0a02 	orrne.w	sl, sl, #2
 8016328:	1b76      	subs	r6, r6, r5
 801632a:	f7ff fded 	bl	8015f08 <rshift>
 801632e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016332:	2702      	movs	r7, #2
 8016334:	f1ba 0f00 	cmp.w	sl, #0
 8016338:	d048      	beq.n	80163cc <__gethex+0x3f4>
 801633a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801633e:	2b02      	cmp	r3, #2
 8016340:	d015      	beq.n	801636e <__gethex+0x396>
 8016342:	2b03      	cmp	r3, #3
 8016344:	d017      	beq.n	8016376 <__gethex+0x39e>
 8016346:	2b01      	cmp	r3, #1
 8016348:	d109      	bne.n	801635e <__gethex+0x386>
 801634a:	f01a 0f02 	tst.w	sl, #2
 801634e:	d006      	beq.n	801635e <__gethex+0x386>
 8016350:	f8d9 0000 	ldr.w	r0, [r9]
 8016354:	ea4a 0a00 	orr.w	sl, sl, r0
 8016358:	f01a 0f01 	tst.w	sl, #1
 801635c:	d10e      	bne.n	801637c <__gethex+0x3a4>
 801635e:	f047 0710 	orr.w	r7, r7, #16
 8016362:	e033      	b.n	80163cc <__gethex+0x3f4>
 8016364:	f04f 0a01 	mov.w	sl, #1
 8016368:	e7d0      	b.n	801630c <__gethex+0x334>
 801636a:	2701      	movs	r7, #1
 801636c:	e7e2      	b.n	8016334 <__gethex+0x35c>
 801636e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016370:	f1c3 0301 	rsb	r3, r3, #1
 8016374:	9315      	str	r3, [sp, #84]	; 0x54
 8016376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016378:	2b00      	cmp	r3, #0
 801637a:	d0f0      	beq.n	801635e <__gethex+0x386>
 801637c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016380:	f104 0314 	add.w	r3, r4, #20
 8016384:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016388:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801638c:	f04f 0c00 	mov.w	ip, #0
 8016390:	4618      	mov	r0, r3
 8016392:	f853 2b04 	ldr.w	r2, [r3], #4
 8016396:	f1b2 3fff 	cmp.w	r2, #4294967295
 801639a:	d01c      	beq.n	80163d6 <__gethex+0x3fe>
 801639c:	3201      	adds	r2, #1
 801639e:	6002      	str	r2, [r0, #0]
 80163a0:	2f02      	cmp	r7, #2
 80163a2:	f104 0314 	add.w	r3, r4, #20
 80163a6:	d13f      	bne.n	8016428 <__gethex+0x450>
 80163a8:	f8d8 2000 	ldr.w	r2, [r8]
 80163ac:	3a01      	subs	r2, #1
 80163ae:	42b2      	cmp	r2, r6
 80163b0:	d10a      	bne.n	80163c8 <__gethex+0x3f0>
 80163b2:	1171      	asrs	r1, r6, #5
 80163b4:	2201      	movs	r2, #1
 80163b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80163ba:	f006 061f 	and.w	r6, r6, #31
 80163be:	fa02 f606 	lsl.w	r6, r2, r6
 80163c2:	421e      	tst	r6, r3
 80163c4:	bf18      	it	ne
 80163c6:	4617      	movne	r7, r2
 80163c8:	f047 0720 	orr.w	r7, r7, #32
 80163cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163ce:	601c      	str	r4, [r3, #0]
 80163d0:	9b04      	ldr	r3, [sp, #16]
 80163d2:	601d      	str	r5, [r3, #0]
 80163d4:	e695      	b.n	8016102 <__gethex+0x12a>
 80163d6:	4299      	cmp	r1, r3
 80163d8:	f843 cc04 	str.w	ip, [r3, #-4]
 80163dc:	d8d8      	bhi.n	8016390 <__gethex+0x3b8>
 80163de:	68a3      	ldr	r3, [r4, #8]
 80163e0:	459b      	cmp	fp, r3
 80163e2:	db19      	blt.n	8016418 <__gethex+0x440>
 80163e4:	6861      	ldr	r1, [r4, #4]
 80163e6:	ee18 0a10 	vmov	r0, s16
 80163ea:	3101      	adds	r1, #1
 80163ec:	f000 f938 	bl	8016660 <_Balloc>
 80163f0:	4681      	mov	r9, r0
 80163f2:	b918      	cbnz	r0, 80163fc <__gethex+0x424>
 80163f4:	4b1a      	ldr	r3, [pc, #104]	; (8016460 <__gethex+0x488>)
 80163f6:	4602      	mov	r2, r0
 80163f8:	2184      	movs	r1, #132	; 0x84
 80163fa:	e6a8      	b.n	801614e <__gethex+0x176>
 80163fc:	6922      	ldr	r2, [r4, #16]
 80163fe:	3202      	adds	r2, #2
 8016400:	f104 010c 	add.w	r1, r4, #12
 8016404:	0092      	lsls	r2, r2, #2
 8016406:	300c      	adds	r0, #12
 8016408:	f7fd f86b 	bl	80134e2 <memcpy>
 801640c:	4621      	mov	r1, r4
 801640e:	ee18 0a10 	vmov	r0, s16
 8016412:	f000 f965 	bl	80166e0 <_Bfree>
 8016416:	464c      	mov	r4, r9
 8016418:	6923      	ldr	r3, [r4, #16]
 801641a:	1c5a      	adds	r2, r3, #1
 801641c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016420:	6122      	str	r2, [r4, #16]
 8016422:	2201      	movs	r2, #1
 8016424:	615a      	str	r2, [r3, #20]
 8016426:	e7bb      	b.n	80163a0 <__gethex+0x3c8>
 8016428:	6922      	ldr	r2, [r4, #16]
 801642a:	455a      	cmp	r2, fp
 801642c:	dd0b      	ble.n	8016446 <__gethex+0x46e>
 801642e:	2101      	movs	r1, #1
 8016430:	4620      	mov	r0, r4
 8016432:	f7ff fd69 	bl	8015f08 <rshift>
 8016436:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801643a:	3501      	adds	r5, #1
 801643c:	42ab      	cmp	r3, r5
 801643e:	f6ff aed0 	blt.w	80161e2 <__gethex+0x20a>
 8016442:	2701      	movs	r7, #1
 8016444:	e7c0      	b.n	80163c8 <__gethex+0x3f0>
 8016446:	f016 061f 	ands.w	r6, r6, #31
 801644a:	d0fa      	beq.n	8016442 <__gethex+0x46a>
 801644c:	4453      	add	r3, sl
 801644e:	f1c6 0620 	rsb	r6, r6, #32
 8016452:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016456:	f000 f9f5 	bl	8016844 <__hi0bits>
 801645a:	42b0      	cmp	r0, r6
 801645c:	dbe7      	blt.n	801642e <__gethex+0x456>
 801645e:	e7f0      	b.n	8016442 <__gethex+0x46a>
 8016460:	080185a0 	.word	0x080185a0

08016464 <L_shift>:
 8016464:	f1c2 0208 	rsb	r2, r2, #8
 8016468:	0092      	lsls	r2, r2, #2
 801646a:	b570      	push	{r4, r5, r6, lr}
 801646c:	f1c2 0620 	rsb	r6, r2, #32
 8016470:	6843      	ldr	r3, [r0, #4]
 8016472:	6804      	ldr	r4, [r0, #0]
 8016474:	fa03 f506 	lsl.w	r5, r3, r6
 8016478:	432c      	orrs	r4, r5
 801647a:	40d3      	lsrs	r3, r2
 801647c:	6004      	str	r4, [r0, #0]
 801647e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016482:	4288      	cmp	r0, r1
 8016484:	d3f4      	bcc.n	8016470 <L_shift+0xc>
 8016486:	bd70      	pop	{r4, r5, r6, pc}

08016488 <__match>:
 8016488:	b530      	push	{r4, r5, lr}
 801648a:	6803      	ldr	r3, [r0, #0]
 801648c:	3301      	adds	r3, #1
 801648e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016492:	b914      	cbnz	r4, 801649a <__match+0x12>
 8016494:	6003      	str	r3, [r0, #0]
 8016496:	2001      	movs	r0, #1
 8016498:	bd30      	pop	{r4, r5, pc}
 801649a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801649e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80164a2:	2d19      	cmp	r5, #25
 80164a4:	bf98      	it	ls
 80164a6:	3220      	addls	r2, #32
 80164a8:	42a2      	cmp	r2, r4
 80164aa:	d0f0      	beq.n	801648e <__match+0x6>
 80164ac:	2000      	movs	r0, #0
 80164ae:	e7f3      	b.n	8016498 <__match+0x10>

080164b0 <__hexnan>:
 80164b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b4:	680b      	ldr	r3, [r1, #0]
 80164b6:	115e      	asrs	r6, r3, #5
 80164b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80164bc:	f013 031f 	ands.w	r3, r3, #31
 80164c0:	b087      	sub	sp, #28
 80164c2:	bf18      	it	ne
 80164c4:	3604      	addne	r6, #4
 80164c6:	2500      	movs	r5, #0
 80164c8:	1f37      	subs	r7, r6, #4
 80164ca:	4690      	mov	r8, r2
 80164cc:	6802      	ldr	r2, [r0, #0]
 80164ce:	9301      	str	r3, [sp, #4]
 80164d0:	4682      	mov	sl, r0
 80164d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80164d6:	46b9      	mov	r9, r7
 80164d8:	463c      	mov	r4, r7
 80164da:	9502      	str	r5, [sp, #8]
 80164dc:	46ab      	mov	fp, r5
 80164de:	7851      	ldrb	r1, [r2, #1]
 80164e0:	1c53      	adds	r3, r2, #1
 80164e2:	9303      	str	r3, [sp, #12]
 80164e4:	b341      	cbz	r1, 8016538 <__hexnan+0x88>
 80164e6:	4608      	mov	r0, r1
 80164e8:	9205      	str	r2, [sp, #20]
 80164ea:	9104      	str	r1, [sp, #16]
 80164ec:	f7ff fd5e 	bl	8015fac <__hexdig_fun>
 80164f0:	2800      	cmp	r0, #0
 80164f2:	d14f      	bne.n	8016594 <__hexnan+0xe4>
 80164f4:	9904      	ldr	r1, [sp, #16]
 80164f6:	9a05      	ldr	r2, [sp, #20]
 80164f8:	2920      	cmp	r1, #32
 80164fa:	d818      	bhi.n	801652e <__hexnan+0x7e>
 80164fc:	9b02      	ldr	r3, [sp, #8]
 80164fe:	459b      	cmp	fp, r3
 8016500:	dd13      	ble.n	801652a <__hexnan+0x7a>
 8016502:	454c      	cmp	r4, r9
 8016504:	d206      	bcs.n	8016514 <__hexnan+0x64>
 8016506:	2d07      	cmp	r5, #7
 8016508:	dc04      	bgt.n	8016514 <__hexnan+0x64>
 801650a:	462a      	mov	r2, r5
 801650c:	4649      	mov	r1, r9
 801650e:	4620      	mov	r0, r4
 8016510:	f7ff ffa8 	bl	8016464 <L_shift>
 8016514:	4544      	cmp	r4, r8
 8016516:	d950      	bls.n	80165ba <__hexnan+0x10a>
 8016518:	2300      	movs	r3, #0
 801651a:	f1a4 0904 	sub.w	r9, r4, #4
 801651e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016522:	f8cd b008 	str.w	fp, [sp, #8]
 8016526:	464c      	mov	r4, r9
 8016528:	461d      	mov	r5, r3
 801652a:	9a03      	ldr	r2, [sp, #12]
 801652c:	e7d7      	b.n	80164de <__hexnan+0x2e>
 801652e:	2929      	cmp	r1, #41	; 0x29
 8016530:	d156      	bne.n	80165e0 <__hexnan+0x130>
 8016532:	3202      	adds	r2, #2
 8016534:	f8ca 2000 	str.w	r2, [sl]
 8016538:	f1bb 0f00 	cmp.w	fp, #0
 801653c:	d050      	beq.n	80165e0 <__hexnan+0x130>
 801653e:	454c      	cmp	r4, r9
 8016540:	d206      	bcs.n	8016550 <__hexnan+0xa0>
 8016542:	2d07      	cmp	r5, #7
 8016544:	dc04      	bgt.n	8016550 <__hexnan+0xa0>
 8016546:	462a      	mov	r2, r5
 8016548:	4649      	mov	r1, r9
 801654a:	4620      	mov	r0, r4
 801654c:	f7ff ff8a 	bl	8016464 <L_shift>
 8016550:	4544      	cmp	r4, r8
 8016552:	d934      	bls.n	80165be <__hexnan+0x10e>
 8016554:	f1a8 0204 	sub.w	r2, r8, #4
 8016558:	4623      	mov	r3, r4
 801655a:	f853 1b04 	ldr.w	r1, [r3], #4
 801655e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016562:	429f      	cmp	r7, r3
 8016564:	d2f9      	bcs.n	801655a <__hexnan+0xaa>
 8016566:	1b3b      	subs	r3, r7, r4
 8016568:	f023 0303 	bic.w	r3, r3, #3
 801656c:	3304      	adds	r3, #4
 801656e:	3401      	adds	r4, #1
 8016570:	3e03      	subs	r6, #3
 8016572:	42b4      	cmp	r4, r6
 8016574:	bf88      	it	hi
 8016576:	2304      	movhi	r3, #4
 8016578:	4443      	add	r3, r8
 801657a:	2200      	movs	r2, #0
 801657c:	f843 2b04 	str.w	r2, [r3], #4
 8016580:	429f      	cmp	r7, r3
 8016582:	d2fb      	bcs.n	801657c <__hexnan+0xcc>
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	b91b      	cbnz	r3, 8016590 <__hexnan+0xe0>
 8016588:	4547      	cmp	r7, r8
 801658a:	d127      	bne.n	80165dc <__hexnan+0x12c>
 801658c:	2301      	movs	r3, #1
 801658e:	603b      	str	r3, [r7, #0]
 8016590:	2005      	movs	r0, #5
 8016592:	e026      	b.n	80165e2 <__hexnan+0x132>
 8016594:	3501      	adds	r5, #1
 8016596:	2d08      	cmp	r5, #8
 8016598:	f10b 0b01 	add.w	fp, fp, #1
 801659c:	dd06      	ble.n	80165ac <__hexnan+0xfc>
 801659e:	4544      	cmp	r4, r8
 80165a0:	d9c3      	bls.n	801652a <__hexnan+0x7a>
 80165a2:	2300      	movs	r3, #0
 80165a4:	f844 3c04 	str.w	r3, [r4, #-4]
 80165a8:	2501      	movs	r5, #1
 80165aa:	3c04      	subs	r4, #4
 80165ac:	6822      	ldr	r2, [r4, #0]
 80165ae:	f000 000f 	and.w	r0, r0, #15
 80165b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80165b6:	6022      	str	r2, [r4, #0]
 80165b8:	e7b7      	b.n	801652a <__hexnan+0x7a>
 80165ba:	2508      	movs	r5, #8
 80165bc:	e7b5      	b.n	801652a <__hexnan+0x7a>
 80165be:	9b01      	ldr	r3, [sp, #4]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d0df      	beq.n	8016584 <__hexnan+0xd4>
 80165c4:	f04f 32ff 	mov.w	r2, #4294967295
 80165c8:	f1c3 0320 	rsb	r3, r3, #32
 80165cc:	fa22 f303 	lsr.w	r3, r2, r3
 80165d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80165d4:	401a      	ands	r2, r3
 80165d6:	f846 2c04 	str.w	r2, [r6, #-4]
 80165da:	e7d3      	b.n	8016584 <__hexnan+0xd4>
 80165dc:	3f04      	subs	r7, #4
 80165de:	e7d1      	b.n	8016584 <__hexnan+0xd4>
 80165e0:	2004      	movs	r0, #4
 80165e2:	b007      	add	sp, #28
 80165e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165e8 <_localeconv_r>:
 80165e8:	4800      	ldr	r0, [pc, #0]	; (80165ec <_localeconv_r+0x4>)
 80165ea:	4770      	bx	lr
 80165ec:	20000318 	.word	0x20000318

080165f0 <_lseek_r>:
 80165f0:	b538      	push	{r3, r4, r5, lr}
 80165f2:	4d07      	ldr	r5, [pc, #28]	; (8016610 <_lseek_r+0x20>)
 80165f4:	4604      	mov	r4, r0
 80165f6:	4608      	mov	r0, r1
 80165f8:	4611      	mov	r1, r2
 80165fa:	2200      	movs	r2, #0
 80165fc:	602a      	str	r2, [r5, #0]
 80165fe:	461a      	mov	r2, r3
 8016600:	f7f0 f926 	bl	8006850 <_lseek>
 8016604:	1c43      	adds	r3, r0, #1
 8016606:	d102      	bne.n	801660e <_lseek_r+0x1e>
 8016608:	682b      	ldr	r3, [r5, #0]
 801660a:	b103      	cbz	r3, 801660e <_lseek_r+0x1e>
 801660c:	6023      	str	r3, [r4, #0]
 801660e:	bd38      	pop	{r3, r4, r5, pc}
 8016610:	200065a4 	.word	0x200065a4

08016614 <malloc>:
 8016614:	4b02      	ldr	r3, [pc, #8]	; (8016620 <malloc+0xc>)
 8016616:	4601      	mov	r1, r0
 8016618:	6818      	ldr	r0, [r3, #0]
 801661a:	f7fc bf99 	b.w	8013550 <_malloc_r>
 801661e:	bf00      	nop
 8016620:	200001c0 	.word	0x200001c0

08016624 <__ascii_mbtowc>:
 8016624:	b082      	sub	sp, #8
 8016626:	b901      	cbnz	r1, 801662a <__ascii_mbtowc+0x6>
 8016628:	a901      	add	r1, sp, #4
 801662a:	b142      	cbz	r2, 801663e <__ascii_mbtowc+0x1a>
 801662c:	b14b      	cbz	r3, 8016642 <__ascii_mbtowc+0x1e>
 801662e:	7813      	ldrb	r3, [r2, #0]
 8016630:	600b      	str	r3, [r1, #0]
 8016632:	7812      	ldrb	r2, [r2, #0]
 8016634:	1e10      	subs	r0, r2, #0
 8016636:	bf18      	it	ne
 8016638:	2001      	movne	r0, #1
 801663a:	b002      	add	sp, #8
 801663c:	4770      	bx	lr
 801663e:	4610      	mov	r0, r2
 8016640:	e7fb      	b.n	801663a <__ascii_mbtowc+0x16>
 8016642:	f06f 0001 	mvn.w	r0, #1
 8016646:	e7f8      	b.n	801663a <__ascii_mbtowc+0x16>

08016648 <__malloc_lock>:
 8016648:	4801      	ldr	r0, [pc, #4]	; (8016650 <__malloc_lock+0x8>)
 801664a:	f7fc bf48 	b.w	80134de <__retarget_lock_acquire_recursive>
 801664e:	bf00      	nop
 8016650:	20006598 	.word	0x20006598

08016654 <__malloc_unlock>:
 8016654:	4801      	ldr	r0, [pc, #4]	; (801665c <__malloc_unlock+0x8>)
 8016656:	f7fc bf43 	b.w	80134e0 <__retarget_lock_release_recursive>
 801665a:	bf00      	nop
 801665c:	20006598 	.word	0x20006598

08016660 <_Balloc>:
 8016660:	b570      	push	{r4, r5, r6, lr}
 8016662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016664:	4604      	mov	r4, r0
 8016666:	460d      	mov	r5, r1
 8016668:	b976      	cbnz	r6, 8016688 <_Balloc+0x28>
 801666a:	2010      	movs	r0, #16
 801666c:	f7ff ffd2 	bl	8016614 <malloc>
 8016670:	4602      	mov	r2, r0
 8016672:	6260      	str	r0, [r4, #36]	; 0x24
 8016674:	b920      	cbnz	r0, 8016680 <_Balloc+0x20>
 8016676:	4b18      	ldr	r3, [pc, #96]	; (80166d8 <_Balloc+0x78>)
 8016678:	4818      	ldr	r0, [pc, #96]	; (80166dc <_Balloc+0x7c>)
 801667a:	2166      	movs	r1, #102	; 0x66
 801667c:	f000 feaa 	bl	80173d4 <__assert_func>
 8016680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016684:	6006      	str	r6, [r0, #0]
 8016686:	60c6      	str	r6, [r0, #12]
 8016688:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801668a:	68f3      	ldr	r3, [r6, #12]
 801668c:	b183      	cbz	r3, 80166b0 <_Balloc+0x50>
 801668e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016690:	68db      	ldr	r3, [r3, #12]
 8016692:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016696:	b9b8      	cbnz	r0, 80166c8 <_Balloc+0x68>
 8016698:	2101      	movs	r1, #1
 801669a:	fa01 f605 	lsl.w	r6, r1, r5
 801669e:	1d72      	adds	r2, r6, #5
 80166a0:	0092      	lsls	r2, r2, #2
 80166a2:	4620      	mov	r0, r4
 80166a4:	f000 fc9a 	bl	8016fdc <_calloc_r>
 80166a8:	b160      	cbz	r0, 80166c4 <_Balloc+0x64>
 80166aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80166ae:	e00e      	b.n	80166ce <_Balloc+0x6e>
 80166b0:	2221      	movs	r2, #33	; 0x21
 80166b2:	2104      	movs	r1, #4
 80166b4:	4620      	mov	r0, r4
 80166b6:	f000 fc91 	bl	8016fdc <_calloc_r>
 80166ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166bc:	60f0      	str	r0, [r6, #12]
 80166be:	68db      	ldr	r3, [r3, #12]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d1e4      	bne.n	801668e <_Balloc+0x2e>
 80166c4:	2000      	movs	r0, #0
 80166c6:	bd70      	pop	{r4, r5, r6, pc}
 80166c8:	6802      	ldr	r2, [r0, #0]
 80166ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166ce:	2300      	movs	r3, #0
 80166d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80166d4:	e7f7      	b.n	80166c6 <_Balloc+0x66>
 80166d6:	bf00      	nop
 80166d8:	0801852e 	.word	0x0801852e
 80166dc:	0801862c 	.word	0x0801862c

080166e0 <_Bfree>:
 80166e0:	b570      	push	{r4, r5, r6, lr}
 80166e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80166e4:	4605      	mov	r5, r0
 80166e6:	460c      	mov	r4, r1
 80166e8:	b976      	cbnz	r6, 8016708 <_Bfree+0x28>
 80166ea:	2010      	movs	r0, #16
 80166ec:	f7ff ff92 	bl	8016614 <malloc>
 80166f0:	4602      	mov	r2, r0
 80166f2:	6268      	str	r0, [r5, #36]	; 0x24
 80166f4:	b920      	cbnz	r0, 8016700 <_Bfree+0x20>
 80166f6:	4b09      	ldr	r3, [pc, #36]	; (801671c <_Bfree+0x3c>)
 80166f8:	4809      	ldr	r0, [pc, #36]	; (8016720 <_Bfree+0x40>)
 80166fa:	218a      	movs	r1, #138	; 0x8a
 80166fc:	f000 fe6a 	bl	80173d4 <__assert_func>
 8016700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016704:	6006      	str	r6, [r0, #0]
 8016706:	60c6      	str	r6, [r0, #12]
 8016708:	b13c      	cbz	r4, 801671a <_Bfree+0x3a>
 801670a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801670c:	6862      	ldr	r2, [r4, #4]
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016714:	6021      	str	r1, [r4, #0]
 8016716:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801671a:	bd70      	pop	{r4, r5, r6, pc}
 801671c:	0801852e 	.word	0x0801852e
 8016720:	0801862c 	.word	0x0801862c

08016724 <__multadd>:
 8016724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016728:	690d      	ldr	r5, [r1, #16]
 801672a:	4607      	mov	r7, r0
 801672c:	460c      	mov	r4, r1
 801672e:	461e      	mov	r6, r3
 8016730:	f101 0c14 	add.w	ip, r1, #20
 8016734:	2000      	movs	r0, #0
 8016736:	f8dc 3000 	ldr.w	r3, [ip]
 801673a:	b299      	uxth	r1, r3
 801673c:	fb02 6101 	mla	r1, r2, r1, r6
 8016740:	0c1e      	lsrs	r6, r3, #16
 8016742:	0c0b      	lsrs	r3, r1, #16
 8016744:	fb02 3306 	mla	r3, r2, r6, r3
 8016748:	b289      	uxth	r1, r1
 801674a:	3001      	adds	r0, #1
 801674c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016750:	4285      	cmp	r5, r0
 8016752:	f84c 1b04 	str.w	r1, [ip], #4
 8016756:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801675a:	dcec      	bgt.n	8016736 <__multadd+0x12>
 801675c:	b30e      	cbz	r6, 80167a2 <__multadd+0x7e>
 801675e:	68a3      	ldr	r3, [r4, #8]
 8016760:	42ab      	cmp	r3, r5
 8016762:	dc19      	bgt.n	8016798 <__multadd+0x74>
 8016764:	6861      	ldr	r1, [r4, #4]
 8016766:	4638      	mov	r0, r7
 8016768:	3101      	adds	r1, #1
 801676a:	f7ff ff79 	bl	8016660 <_Balloc>
 801676e:	4680      	mov	r8, r0
 8016770:	b928      	cbnz	r0, 801677e <__multadd+0x5a>
 8016772:	4602      	mov	r2, r0
 8016774:	4b0c      	ldr	r3, [pc, #48]	; (80167a8 <__multadd+0x84>)
 8016776:	480d      	ldr	r0, [pc, #52]	; (80167ac <__multadd+0x88>)
 8016778:	21b5      	movs	r1, #181	; 0xb5
 801677a:	f000 fe2b 	bl	80173d4 <__assert_func>
 801677e:	6922      	ldr	r2, [r4, #16]
 8016780:	3202      	adds	r2, #2
 8016782:	f104 010c 	add.w	r1, r4, #12
 8016786:	0092      	lsls	r2, r2, #2
 8016788:	300c      	adds	r0, #12
 801678a:	f7fc feaa 	bl	80134e2 <memcpy>
 801678e:	4621      	mov	r1, r4
 8016790:	4638      	mov	r0, r7
 8016792:	f7ff ffa5 	bl	80166e0 <_Bfree>
 8016796:	4644      	mov	r4, r8
 8016798:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801679c:	3501      	adds	r5, #1
 801679e:	615e      	str	r6, [r3, #20]
 80167a0:	6125      	str	r5, [r4, #16]
 80167a2:	4620      	mov	r0, r4
 80167a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a8:	080185a0 	.word	0x080185a0
 80167ac:	0801862c 	.word	0x0801862c

080167b0 <__s2b>:
 80167b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167b4:	460c      	mov	r4, r1
 80167b6:	4615      	mov	r5, r2
 80167b8:	461f      	mov	r7, r3
 80167ba:	2209      	movs	r2, #9
 80167bc:	3308      	adds	r3, #8
 80167be:	4606      	mov	r6, r0
 80167c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80167c4:	2100      	movs	r1, #0
 80167c6:	2201      	movs	r2, #1
 80167c8:	429a      	cmp	r2, r3
 80167ca:	db09      	blt.n	80167e0 <__s2b+0x30>
 80167cc:	4630      	mov	r0, r6
 80167ce:	f7ff ff47 	bl	8016660 <_Balloc>
 80167d2:	b940      	cbnz	r0, 80167e6 <__s2b+0x36>
 80167d4:	4602      	mov	r2, r0
 80167d6:	4b19      	ldr	r3, [pc, #100]	; (801683c <__s2b+0x8c>)
 80167d8:	4819      	ldr	r0, [pc, #100]	; (8016840 <__s2b+0x90>)
 80167da:	21ce      	movs	r1, #206	; 0xce
 80167dc:	f000 fdfa 	bl	80173d4 <__assert_func>
 80167e0:	0052      	lsls	r2, r2, #1
 80167e2:	3101      	adds	r1, #1
 80167e4:	e7f0      	b.n	80167c8 <__s2b+0x18>
 80167e6:	9b08      	ldr	r3, [sp, #32]
 80167e8:	6143      	str	r3, [r0, #20]
 80167ea:	2d09      	cmp	r5, #9
 80167ec:	f04f 0301 	mov.w	r3, #1
 80167f0:	6103      	str	r3, [r0, #16]
 80167f2:	dd16      	ble.n	8016822 <__s2b+0x72>
 80167f4:	f104 0909 	add.w	r9, r4, #9
 80167f8:	46c8      	mov	r8, r9
 80167fa:	442c      	add	r4, r5
 80167fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016800:	4601      	mov	r1, r0
 8016802:	3b30      	subs	r3, #48	; 0x30
 8016804:	220a      	movs	r2, #10
 8016806:	4630      	mov	r0, r6
 8016808:	f7ff ff8c 	bl	8016724 <__multadd>
 801680c:	45a0      	cmp	r8, r4
 801680e:	d1f5      	bne.n	80167fc <__s2b+0x4c>
 8016810:	f1a5 0408 	sub.w	r4, r5, #8
 8016814:	444c      	add	r4, r9
 8016816:	1b2d      	subs	r5, r5, r4
 8016818:	1963      	adds	r3, r4, r5
 801681a:	42bb      	cmp	r3, r7
 801681c:	db04      	blt.n	8016828 <__s2b+0x78>
 801681e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016822:	340a      	adds	r4, #10
 8016824:	2509      	movs	r5, #9
 8016826:	e7f6      	b.n	8016816 <__s2b+0x66>
 8016828:	f814 3b01 	ldrb.w	r3, [r4], #1
 801682c:	4601      	mov	r1, r0
 801682e:	3b30      	subs	r3, #48	; 0x30
 8016830:	220a      	movs	r2, #10
 8016832:	4630      	mov	r0, r6
 8016834:	f7ff ff76 	bl	8016724 <__multadd>
 8016838:	e7ee      	b.n	8016818 <__s2b+0x68>
 801683a:	bf00      	nop
 801683c:	080185a0 	.word	0x080185a0
 8016840:	0801862c 	.word	0x0801862c

08016844 <__hi0bits>:
 8016844:	0c03      	lsrs	r3, r0, #16
 8016846:	041b      	lsls	r3, r3, #16
 8016848:	b9d3      	cbnz	r3, 8016880 <__hi0bits+0x3c>
 801684a:	0400      	lsls	r0, r0, #16
 801684c:	2310      	movs	r3, #16
 801684e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016852:	bf04      	itt	eq
 8016854:	0200      	lsleq	r0, r0, #8
 8016856:	3308      	addeq	r3, #8
 8016858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801685c:	bf04      	itt	eq
 801685e:	0100      	lsleq	r0, r0, #4
 8016860:	3304      	addeq	r3, #4
 8016862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016866:	bf04      	itt	eq
 8016868:	0080      	lsleq	r0, r0, #2
 801686a:	3302      	addeq	r3, #2
 801686c:	2800      	cmp	r0, #0
 801686e:	db05      	blt.n	801687c <__hi0bits+0x38>
 8016870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016874:	f103 0301 	add.w	r3, r3, #1
 8016878:	bf08      	it	eq
 801687a:	2320      	moveq	r3, #32
 801687c:	4618      	mov	r0, r3
 801687e:	4770      	bx	lr
 8016880:	2300      	movs	r3, #0
 8016882:	e7e4      	b.n	801684e <__hi0bits+0xa>

08016884 <__lo0bits>:
 8016884:	6803      	ldr	r3, [r0, #0]
 8016886:	f013 0207 	ands.w	r2, r3, #7
 801688a:	4601      	mov	r1, r0
 801688c:	d00b      	beq.n	80168a6 <__lo0bits+0x22>
 801688e:	07da      	lsls	r2, r3, #31
 8016890:	d423      	bmi.n	80168da <__lo0bits+0x56>
 8016892:	0798      	lsls	r0, r3, #30
 8016894:	bf49      	itett	mi
 8016896:	085b      	lsrmi	r3, r3, #1
 8016898:	089b      	lsrpl	r3, r3, #2
 801689a:	2001      	movmi	r0, #1
 801689c:	600b      	strmi	r3, [r1, #0]
 801689e:	bf5c      	itt	pl
 80168a0:	600b      	strpl	r3, [r1, #0]
 80168a2:	2002      	movpl	r0, #2
 80168a4:	4770      	bx	lr
 80168a6:	b298      	uxth	r0, r3
 80168a8:	b9a8      	cbnz	r0, 80168d6 <__lo0bits+0x52>
 80168aa:	0c1b      	lsrs	r3, r3, #16
 80168ac:	2010      	movs	r0, #16
 80168ae:	b2da      	uxtb	r2, r3
 80168b0:	b90a      	cbnz	r2, 80168b6 <__lo0bits+0x32>
 80168b2:	3008      	adds	r0, #8
 80168b4:	0a1b      	lsrs	r3, r3, #8
 80168b6:	071a      	lsls	r2, r3, #28
 80168b8:	bf04      	itt	eq
 80168ba:	091b      	lsreq	r3, r3, #4
 80168bc:	3004      	addeq	r0, #4
 80168be:	079a      	lsls	r2, r3, #30
 80168c0:	bf04      	itt	eq
 80168c2:	089b      	lsreq	r3, r3, #2
 80168c4:	3002      	addeq	r0, #2
 80168c6:	07da      	lsls	r2, r3, #31
 80168c8:	d403      	bmi.n	80168d2 <__lo0bits+0x4e>
 80168ca:	085b      	lsrs	r3, r3, #1
 80168cc:	f100 0001 	add.w	r0, r0, #1
 80168d0:	d005      	beq.n	80168de <__lo0bits+0x5a>
 80168d2:	600b      	str	r3, [r1, #0]
 80168d4:	4770      	bx	lr
 80168d6:	4610      	mov	r0, r2
 80168d8:	e7e9      	b.n	80168ae <__lo0bits+0x2a>
 80168da:	2000      	movs	r0, #0
 80168dc:	4770      	bx	lr
 80168de:	2020      	movs	r0, #32
 80168e0:	4770      	bx	lr
	...

080168e4 <__i2b>:
 80168e4:	b510      	push	{r4, lr}
 80168e6:	460c      	mov	r4, r1
 80168e8:	2101      	movs	r1, #1
 80168ea:	f7ff feb9 	bl	8016660 <_Balloc>
 80168ee:	4602      	mov	r2, r0
 80168f0:	b928      	cbnz	r0, 80168fe <__i2b+0x1a>
 80168f2:	4b05      	ldr	r3, [pc, #20]	; (8016908 <__i2b+0x24>)
 80168f4:	4805      	ldr	r0, [pc, #20]	; (801690c <__i2b+0x28>)
 80168f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80168fa:	f000 fd6b 	bl	80173d4 <__assert_func>
 80168fe:	2301      	movs	r3, #1
 8016900:	6144      	str	r4, [r0, #20]
 8016902:	6103      	str	r3, [r0, #16]
 8016904:	bd10      	pop	{r4, pc}
 8016906:	bf00      	nop
 8016908:	080185a0 	.word	0x080185a0
 801690c:	0801862c 	.word	0x0801862c

08016910 <__multiply>:
 8016910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016914:	4691      	mov	r9, r2
 8016916:	690a      	ldr	r2, [r1, #16]
 8016918:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801691c:	429a      	cmp	r2, r3
 801691e:	bfb8      	it	lt
 8016920:	460b      	movlt	r3, r1
 8016922:	460c      	mov	r4, r1
 8016924:	bfbc      	itt	lt
 8016926:	464c      	movlt	r4, r9
 8016928:	4699      	movlt	r9, r3
 801692a:	6927      	ldr	r7, [r4, #16]
 801692c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016930:	68a3      	ldr	r3, [r4, #8]
 8016932:	6861      	ldr	r1, [r4, #4]
 8016934:	eb07 060a 	add.w	r6, r7, sl
 8016938:	42b3      	cmp	r3, r6
 801693a:	b085      	sub	sp, #20
 801693c:	bfb8      	it	lt
 801693e:	3101      	addlt	r1, #1
 8016940:	f7ff fe8e 	bl	8016660 <_Balloc>
 8016944:	b930      	cbnz	r0, 8016954 <__multiply+0x44>
 8016946:	4602      	mov	r2, r0
 8016948:	4b44      	ldr	r3, [pc, #272]	; (8016a5c <__multiply+0x14c>)
 801694a:	4845      	ldr	r0, [pc, #276]	; (8016a60 <__multiply+0x150>)
 801694c:	f240 115d 	movw	r1, #349	; 0x15d
 8016950:	f000 fd40 	bl	80173d4 <__assert_func>
 8016954:	f100 0514 	add.w	r5, r0, #20
 8016958:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801695c:	462b      	mov	r3, r5
 801695e:	2200      	movs	r2, #0
 8016960:	4543      	cmp	r3, r8
 8016962:	d321      	bcc.n	80169a8 <__multiply+0x98>
 8016964:	f104 0314 	add.w	r3, r4, #20
 8016968:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801696c:	f109 0314 	add.w	r3, r9, #20
 8016970:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016974:	9202      	str	r2, [sp, #8]
 8016976:	1b3a      	subs	r2, r7, r4
 8016978:	3a15      	subs	r2, #21
 801697a:	f022 0203 	bic.w	r2, r2, #3
 801697e:	3204      	adds	r2, #4
 8016980:	f104 0115 	add.w	r1, r4, #21
 8016984:	428f      	cmp	r7, r1
 8016986:	bf38      	it	cc
 8016988:	2204      	movcc	r2, #4
 801698a:	9201      	str	r2, [sp, #4]
 801698c:	9a02      	ldr	r2, [sp, #8]
 801698e:	9303      	str	r3, [sp, #12]
 8016990:	429a      	cmp	r2, r3
 8016992:	d80c      	bhi.n	80169ae <__multiply+0x9e>
 8016994:	2e00      	cmp	r6, #0
 8016996:	dd03      	ble.n	80169a0 <__multiply+0x90>
 8016998:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801699c:	2b00      	cmp	r3, #0
 801699e:	d05a      	beq.n	8016a56 <__multiply+0x146>
 80169a0:	6106      	str	r6, [r0, #16]
 80169a2:	b005      	add	sp, #20
 80169a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169a8:	f843 2b04 	str.w	r2, [r3], #4
 80169ac:	e7d8      	b.n	8016960 <__multiply+0x50>
 80169ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80169b2:	f1ba 0f00 	cmp.w	sl, #0
 80169b6:	d024      	beq.n	8016a02 <__multiply+0xf2>
 80169b8:	f104 0e14 	add.w	lr, r4, #20
 80169bc:	46a9      	mov	r9, r5
 80169be:	f04f 0c00 	mov.w	ip, #0
 80169c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80169c6:	f8d9 1000 	ldr.w	r1, [r9]
 80169ca:	fa1f fb82 	uxth.w	fp, r2
 80169ce:	b289      	uxth	r1, r1
 80169d0:	fb0a 110b 	mla	r1, sl, fp, r1
 80169d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80169d8:	f8d9 2000 	ldr.w	r2, [r9]
 80169dc:	4461      	add	r1, ip
 80169de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80169e2:	fb0a c20b 	mla	r2, sl, fp, ip
 80169e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80169ea:	b289      	uxth	r1, r1
 80169ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80169f0:	4577      	cmp	r7, lr
 80169f2:	f849 1b04 	str.w	r1, [r9], #4
 80169f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80169fa:	d8e2      	bhi.n	80169c2 <__multiply+0xb2>
 80169fc:	9a01      	ldr	r2, [sp, #4]
 80169fe:	f845 c002 	str.w	ip, [r5, r2]
 8016a02:	9a03      	ldr	r2, [sp, #12]
 8016a04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016a08:	3304      	adds	r3, #4
 8016a0a:	f1b9 0f00 	cmp.w	r9, #0
 8016a0e:	d020      	beq.n	8016a52 <__multiply+0x142>
 8016a10:	6829      	ldr	r1, [r5, #0]
 8016a12:	f104 0c14 	add.w	ip, r4, #20
 8016a16:	46ae      	mov	lr, r5
 8016a18:	f04f 0a00 	mov.w	sl, #0
 8016a1c:	f8bc b000 	ldrh.w	fp, [ip]
 8016a20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016a24:	fb09 220b 	mla	r2, r9, fp, r2
 8016a28:	4492      	add	sl, r2
 8016a2a:	b289      	uxth	r1, r1
 8016a2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016a30:	f84e 1b04 	str.w	r1, [lr], #4
 8016a34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016a38:	f8be 1000 	ldrh.w	r1, [lr]
 8016a3c:	0c12      	lsrs	r2, r2, #16
 8016a3e:	fb09 1102 	mla	r1, r9, r2, r1
 8016a42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016a46:	4567      	cmp	r7, ip
 8016a48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016a4c:	d8e6      	bhi.n	8016a1c <__multiply+0x10c>
 8016a4e:	9a01      	ldr	r2, [sp, #4]
 8016a50:	50a9      	str	r1, [r5, r2]
 8016a52:	3504      	adds	r5, #4
 8016a54:	e79a      	b.n	801698c <__multiply+0x7c>
 8016a56:	3e01      	subs	r6, #1
 8016a58:	e79c      	b.n	8016994 <__multiply+0x84>
 8016a5a:	bf00      	nop
 8016a5c:	080185a0 	.word	0x080185a0
 8016a60:	0801862c 	.word	0x0801862c

08016a64 <__pow5mult>:
 8016a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a68:	4615      	mov	r5, r2
 8016a6a:	f012 0203 	ands.w	r2, r2, #3
 8016a6e:	4606      	mov	r6, r0
 8016a70:	460f      	mov	r7, r1
 8016a72:	d007      	beq.n	8016a84 <__pow5mult+0x20>
 8016a74:	4c25      	ldr	r4, [pc, #148]	; (8016b0c <__pow5mult+0xa8>)
 8016a76:	3a01      	subs	r2, #1
 8016a78:	2300      	movs	r3, #0
 8016a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016a7e:	f7ff fe51 	bl	8016724 <__multadd>
 8016a82:	4607      	mov	r7, r0
 8016a84:	10ad      	asrs	r5, r5, #2
 8016a86:	d03d      	beq.n	8016b04 <__pow5mult+0xa0>
 8016a88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016a8a:	b97c      	cbnz	r4, 8016aac <__pow5mult+0x48>
 8016a8c:	2010      	movs	r0, #16
 8016a8e:	f7ff fdc1 	bl	8016614 <malloc>
 8016a92:	4602      	mov	r2, r0
 8016a94:	6270      	str	r0, [r6, #36]	; 0x24
 8016a96:	b928      	cbnz	r0, 8016aa4 <__pow5mult+0x40>
 8016a98:	4b1d      	ldr	r3, [pc, #116]	; (8016b10 <__pow5mult+0xac>)
 8016a9a:	481e      	ldr	r0, [pc, #120]	; (8016b14 <__pow5mult+0xb0>)
 8016a9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016aa0:	f000 fc98 	bl	80173d4 <__assert_func>
 8016aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016aa8:	6004      	str	r4, [r0, #0]
 8016aaa:	60c4      	str	r4, [r0, #12]
 8016aac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016ab4:	b94c      	cbnz	r4, 8016aca <__pow5mult+0x66>
 8016ab6:	f240 2171 	movw	r1, #625	; 0x271
 8016aba:	4630      	mov	r0, r6
 8016abc:	f7ff ff12 	bl	80168e4 <__i2b>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	f8c8 0008 	str.w	r0, [r8, #8]
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	6003      	str	r3, [r0, #0]
 8016aca:	f04f 0900 	mov.w	r9, #0
 8016ace:	07eb      	lsls	r3, r5, #31
 8016ad0:	d50a      	bpl.n	8016ae8 <__pow5mult+0x84>
 8016ad2:	4639      	mov	r1, r7
 8016ad4:	4622      	mov	r2, r4
 8016ad6:	4630      	mov	r0, r6
 8016ad8:	f7ff ff1a 	bl	8016910 <__multiply>
 8016adc:	4639      	mov	r1, r7
 8016ade:	4680      	mov	r8, r0
 8016ae0:	4630      	mov	r0, r6
 8016ae2:	f7ff fdfd 	bl	80166e0 <_Bfree>
 8016ae6:	4647      	mov	r7, r8
 8016ae8:	106d      	asrs	r5, r5, #1
 8016aea:	d00b      	beq.n	8016b04 <__pow5mult+0xa0>
 8016aec:	6820      	ldr	r0, [r4, #0]
 8016aee:	b938      	cbnz	r0, 8016b00 <__pow5mult+0x9c>
 8016af0:	4622      	mov	r2, r4
 8016af2:	4621      	mov	r1, r4
 8016af4:	4630      	mov	r0, r6
 8016af6:	f7ff ff0b 	bl	8016910 <__multiply>
 8016afa:	6020      	str	r0, [r4, #0]
 8016afc:	f8c0 9000 	str.w	r9, [r0]
 8016b00:	4604      	mov	r4, r0
 8016b02:	e7e4      	b.n	8016ace <__pow5mult+0x6a>
 8016b04:	4638      	mov	r0, r7
 8016b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b0a:	bf00      	nop
 8016b0c:	08018778 	.word	0x08018778
 8016b10:	0801852e 	.word	0x0801852e
 8016b14:	0801862c 	.word	0x0801862c

08016b18 <__lshift>:
 8016b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b1c:	460c      	mov	r4, r1
 8016b1e:	6849      	ldr	r1, [r1, #4]
 8016b20:	6923      	ldr	r3, [r4, #16]
 8016b22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016b26:	68a3      	ldr	r3, [r4, #8]
 8016b28:	4607      	mov	r7, r0
 8016b2a:	4691      	mov	r9, r2
 8016b2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b30:	f108 0601 	add.w	r6, r8, #1
 8016b34:	42b3      	cmp	r3, r6
 8016b36:	db0b      	blt.n	8016b50 <__lshift+0x38>
 8016b38:	4638      	mov	r0, r7
 8016b3a:	f7ff fd91 	bl	8016660 <_Balloc>
 8016b3e:	4605      	mov	r5, r0
 8016b40:	b948      	cbnz	r0, 8016b56 <__lshift+0x3e>
 8016b42:	4602      	mov	r2, r0
 8016b44:	4b2a      	ldr	r3, [pc, #168]	; (8016bf0 <__lshift+0xd8>)
 8016b46:	482b      	ldr	r0, [pc, #172]	; (8016bf4 <__lshift+0xdc>)
 8016b48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016b4c:	f000 fc42 	bl	80173d4 <__assert_func>
 8016b50:	3101      	adds	r1, #1
 8016b52:	005b      	lsls	r3, r3, #1
 8016b54:	e7ee      	b.n	8016b34 <__lshift+0x1c>
 8016b56:	2300      	movs	r3, #0
 8016b58:	f100 0114 	add.w	r1, r0, #20
 8016b5c:	f100 0210 	add.w	r2, r0, #16
 8016b60:	4618      	mov	r0, r3
 8016b62:	4553      	cmp	r3, sl
 8016b64:	db37      	blt.n	8016bd6 <__lshift+0xbe>
 8016b66:	6920      	ldr	r0, [r4, #16]
 8016b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b6c:	f104 0314 	add.w	r3, r4, #20
 8016b70:	f019 091f 	ands.w	r9, r9, #31
 8016b74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016b78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016b7c:	d02f      	beq.n	8016bde <__lshift+0xc6>
 8016b7e:	f1c9 0e20 	rsb	lr, r9, #32
 8016b82:	468a      	mov	sl, r1
 8016b84:	f04f 0c00 	mov.w	ip, #0
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	fa02 f209 	lsl.w	r2, r2, r9
 8016b8e:	ea42 020c 	orr.w	r2, r2, ip
 8016b92:	f84a 2b04 	str.w	r2, [sl], #4
 8016b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b9a:	4298      	cmp	r0, r3
 8016b9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016ba0:	d8f2      	bhi.n	8016b88 <__lshift+0x70>
 8016ba2:	1b03      	subs	r3, r0, r4
 8016ba4:	3b15      	subs	r3, #21
 8016ba6:	f023 0303 	bic.w	r3, r3, #3
 8016baa:	3304      	adds	r3, #4
 8016bac:	f104 0215 	add.w	r2, r4, #21
 8016bb0:	4290      	cmp	r0, r2
 8016bb2:	bf38      	it	cc
 8016bb4:	2304      	movcc	r3, #4
 8016bb6:	f841 c003 	str.w	ip, [r1, r3]
 8016bba:	f1bc 0f00 	cmp.w	ip, #0
 8016bbe:	d001      	beq.n	8016bc4 <__lshift+0xac>
 8016bc0:	f108 0602 	add.w	r6, r8, #2
 8016bc4:	3e01      	subs	r6, #1
 8016bc6:	4638      	mov	r0, r7
 8016bc8:	612e      	str	r6, [r5, #16]
 8016bca:	4621      	mov	r1, r4
 8016bcc:	f7ff fd88 	bl	80166e0 <_Bfree>
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8016bda:	3301      	adds	r3, #1
 8016bdc:	e7c1      	b.n	8016b62 <__lshift+0x4a>
 8016bde:	3904      	subs	r1, #4
 8016be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016be4:	f841 2f04 	str.w	r2, [r1, #4]!
 8016be8:	4298      	cmp	r0, r3
 8016bea:	d8f9      	bhi.n	8016be0 <__lshift+0xc8>
 8016bec:	e7ea      	b.n	8016bc4 <__lshift+0xac>
 8016bee:	bf00      	nop
 8016bf0:	080185a0 	.word	0x080185a0
 8016bf4:	0801862c 	.word	0x0801862c

08016bf8 <__mcmp>:
 8016bf8:	b530      	push	{r4, r5, lr}
 8016bfa:	6902      	ldr	r2, [r0, #16]
 8016bfc:	690c      	ldr	r4, [r1, #16]
 8016bfe:	1b12      	subs	r2, r2, r4
 8016c00:	d10e      	bne.n	8016c20 <__mcmp+0x28>
 8016c02:	f100 0314 	add.w	r3, r0, #20
 8016c06:	3114      	adds	r1, #20
 8016c08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016c0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016c10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016c14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016c18:	42a5      	cmp	r5, r4
 8016c1a:	d003      	beq.n	8016c24 <__mcmp+0x2c>
 8016c1c:	d305      	bcc.n	8016c2a <__mcmp+0x32>
 8016c1e:	2201      	movs	r2, #1
 8016c20:	4610      	mov	r0, r2
 8016c22:	bd30      	pop	{r4, r5, pc}
 8016c24:	4283      	cmp	r3, r0
 8016c26:	d3f3      	bcc.n	8016c10 <__mcmp+0x18>
 8016c28:	e7fa      	b.n	8016c20 <__mcmp+0x28>
 8016c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016c2e:	e7f7      	b.n	8016c20 <__mcmp+0x28>

08016c30 <__mdiff>:
 8016c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c34:	460c      	mov	r4, r1
 8016c36:	4606      	mov	r6, r0
 8016c38:	4611      	mov	r1, r2
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	4690      	mov	r8, r2
 8016c3e:	f7ff ffdb 	bl	8016bf8 <__mcmp>
 8016c42:	1e05      	subs	r5, r0, #0
 8016c44:	d110      	bne.n	8016c68 <__mdiff+0x38>
 8016c46:	4629      	mov	r1, r5
 8016c48:	4630      	mov	r0, r6
 8016c4a:	f7ff fd09 	bl	8016660 <_Balloc>
 8016c4e:	b930      	cbnz	r0, 8016c5e <__mdiff+0x2e>
 8016c50:	4b3a      	ldr	r3, [pc, #232]	; (8016d3c <__mdiff+0x10c>)
 8016c52:	4602      	mov	r2, r0
 8016c54:	f240 2132 	movw	r1, #562	; 0x232
 8016c58:	4839      	ldr	r0, [pc, #228]	; (8016d40 <__mdiff+0x110>)
 8016c5a:	f000 fbbb 	bl	80173d4 <__assert_func>
 8016c5e:	2301      	movs	r3, #1
 8016c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c68:	bfa4      	itt	ge
 8016c6a:	4643      	movge	r3, r8
 8016c6c:	46a0      	movge	r8, r4
 8016c6e:	4630      	mov	r0, r6
 8016c70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016c74:	bfa6      	itte	ge
 8016c76:	461c      	movge	r4, r3
 8016c78:	2500      	movge	r5, #0
 8016c7a:	2501      	movlt	r5, #1
 8016c7c:	f7ff fcf0 	bl	8016660 <_Balloc>
 8016c80:	b920      	cbnz	r0, 8016c8c <__mdiff+0x5c>
 8016c82:	4b2e      	ldr	r3, [pc, #184]	; (8016d3c <__mdiff+0x10c>)
 8016c84:	4602      	mov	r2, r0
 8016c86:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016c8a:	e7e5      	b.n	8016c58 <__mdiff+0x28>
 8016c8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016c90:	6926      	ldr	r6, [r4, #16]
 8016c92:	60c5      	str	r5, [r0, #12]
 8016c94:	f104 0914 	add.w	r9, r4, #20
 8016c98:	f108 0514 	add.w	r5, r8, #20
 8016c9c:	f100 0e14 	add.w	lr, r0, #20
 8016ca0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016ca4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016ca8:	f108 0210 	add.w	r2, r8, #16
 8016cac:	46f2      	mov	sl, lr
 8016cae:	2100      	movs	r1, #0
 8016cb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016cb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016cb8:	fa1f f883 	uxth.w	r8, r3
 8016cbc:	fa11 f18b 	uxtah	r1, r1, fp
 8016cc0:	0c1b      	lsrs	r3, r3, #16
 8016cc2:	eba1 0808 	sub.w	r8, r1, r8
 8016cc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016cca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016cce:	fa1f f888 	uxth.w	r8, r8
 8016cd2:	1419      	asrs	r1, r3, #16
 8016cd4:	454e      	cmp	r6, r9
 8016cd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016cda:	f84a 3b04 	str.w	r3, [sl], #4
 8016cde:	d8e7      	bhi.n	8016cb0 <__mdiff+0x80>
 8016ce0:	1b33      	subs	r3, r6, r4
 8016ce2:	3b15      	subs	r3, #21
 8016ce4:	f023 0303 	bic.w	r3, r3, #3
 8016ce8:	3304      	adds	r3, #4
 8016cea:	3415      	adds	r4, #21
 8016cec:	42a6      	cmp	r6, r4
 8016cee:	bf38      	it	cc
 8016cf0:	2304      	movcc	r3, #4
 8016cf2:	441d      	add	r5, r3
 8016cf4:	4473      	add	r3, lr
 8016cf6:	469e      	mov	lr, r3
 8016cf8:	462e      	mov	r6, r5
 8016cfa:	4566      	cmp	r6, ip
 8016cfc:	d30e      	bcc.n	8016d1c <__mdiff+0xec>
 8016cfe:	f10c 0203 	add.w	r2, ip, #3
 8016d02:	1b52      	subs	r2, r2, r5
 8016d04:	f022 0203 	bic.w	r2, r2, #3
 8016d08:	3d03      	subs	r5, #3
 8016d0a:	45ac      	cmp	ip, r5
 8016d0c:	bf38      	it	cc
 8016d0e:	2200      	movcc	r2, #0
 8016d10:	441a      	add	r2, r3
 8016d12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016d16:	b17b      	cbz	r3, 8016d38 <__mdiff+0x108>
 8016d18:	6107      	str	r7, [r0, #16]
 8016d1a:	e7a3      	b.n	8016c64 <__mdiff+0x34>
 8016d1c:	f856 8b04 	ldr.w	r8, [r6], #4
 8016d20:	fa11 f288 	uxtah	r2, r1, r8
 8016d24:	1414      	asrs	r4, r2, #16
 8016d26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016d2a:	b292      	uxth	r2, r2
 8016d2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016d30:	f84e 2b04 	str.w	r2, [lr], #4
 8016d34:	1421      	asrs	r1, r4, #16
 8016d36:	e7e0      	b.n	8016cfa <__mdiff+0xca>
 8016d38:	3f01      	subs	r7, #1
 8016d3a:	e7ea      	b.n	8016d12 <__mdiff+0xe2>
 8016d3c:	080185a0 	.word	0x080185a0
 8016d40:	0801862c 	.word	0x0801862c

08016d44 <__ulp>:
 8016d44:	b082      	sub	sp, #8
 8016d46:	ed8d 0b00 	vstr	d0, [sp]
 8016d4a:	9b01      	ldr	r3, [sp, #4]
 8016d4c:	4912      	ldr	r1, [pc, #72]	; (8016d98 <__ulp+0x54>)
 8016d4e:	4019      	ands	r1, r3
 8016d50:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016d54:	2900      	cmp	r1, #0
 8016d56:	dd05      	ble.n	8016d64 <__ulp+0x20>
 8016d58:	2200      	movs	r2, #0
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	ec43 2b10 	vmov	d0, r2, r3
 8016d60:	b002      	add	sp, #8
 8016d62:	4770      	bx	lr
 8016d64:	4249      	negs	r1, r1
 8016d66:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016d6a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016d6e:	f04f 0200 	mov.w	r2, #0
 8016d72:	f04f 0300 	mov.w	r3, #0
 8016d76:	da04      	bge.n	8016d82 <__ulp+0x3e>
 8016d78:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016d7c:	fa41 f300 	asr.w	r3, r1, r0
 8016d80:	e7ec      	b.n	8016d5c <__ulp+0x18>
 8016d82:	f1a0 0114 	sub.w	r1, r0, #20
 8016d86:	291e      	cmp	r1, #30
 8016d88:	bfda      	itte	le
 8016d8a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016d8e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016d92:	2101      	movgt	r1, #1
 8016d94:	460a      	mov	r2, r1
 8016d96:	e7e1      	b.n	8016d5c <__ulp+0x18>
 8016d98:	7ff00000 	.word	0x7ff00000

08016d9c <__b2d>:
 8016d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d9e:	6905      	ldr	r5, [r0, #16]
 8016da0:	f100 0714 	add.w	r7, r0, #20
 8016da4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016da8:	1f2e      	subs	r6, r5, #4
 8016daa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016dae:	4620      	mov	r0, r4
 8016db0:	f7ff fd48 	bl	8016844 <__hi0bits>
 8016db4:	f1c0 0320 	rsb	r3, r0, #32
 8016db8:	280a      	cmp	r0, #10
 8016dba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016e38 <__b2d+0x9c>
 8016dbe:	600b      	str	r3, [r1, #0]
 8016dc0:	dc14      	bgt.n	8016dec <__b2d+0x50>
 8016dc2:	f1c0 0e0b 	rsb	lr, r0, #11
 8016dc6:	fa24 f10e 	lsr.w	r1, r4, lr
 8016dca:	42b7      	cmp	r7, r6
 8016dcc:	ea41 030c 	orr.w	r3, r1, ip
 8016dd0:	bf34      	ite	cc
 8016dd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016dd6:	2100      	movcs	r1, #0
 8016dd8:	3015      	adds	r0, #21
 8016dda:	fa04 f000 	lsl.w	r0, r4, r0
 8016dde:	fa21 f10e 	lsr.w	r1, r1, lr
 8016de2:	ea40 0201 	orr.w	r2, r0, r1
 8016de6:	ec43 2b10 	vmov	d0, r2, r3
 8016dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dec:	42b7      	cmp	r7, r6
 8016dee:	bf3a      	itte	cc
 8016df0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016df4:	f1a5 0608 	subcc.w	r6, r5, #8
 8016df8:	2100      	movcs	r1, #0
 8016dfa:	380b      	subs	r0, #11
 8016dfc:	d017      	beq.n	8016e2e <__b2d+0x92>
 8016dfe:	f1c0 0c20 	rsb	ip, r0, #32
 8016e02:	fa04 f500 	lsl.w	r5, r4, r0
 8016e06:	42be      	cmp	r6, r7
 8016e08:	fa21 f40c 	lsr.w	r4, r1, ip
 8016e0c:	ea45 0504 	orr.w	r5, r5, r4
 8016e10:	bf8c      	ite	hi
 8016e12:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016e16:	2400      	movls	r4, #0
 8016e18:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016e1c:	fa01 f000 	lsl.w	r0, r1, r0
 8016e20:	fa24 f40c 	lsr.w	r4, r4, ip
 8016e24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016e28:	ea40 0204 	orr.w	r2, r0, r4
 8016e2c:	e7db      	b.n	8016de6 <__b2d+0x4a>
 8016e2e:	ea44 030c 	orr.w	r3, r4, ip
 8016e32:	460a      	mov	r2, r1
 8016e34:	e7d7      	b.n	8016de6 <__b2d+0x4a>
 8016e36:	bf00      	nop
 8016e38:	3ff00000 	.word	0x3ff00000

08016e3c <__d2b>:
 8016e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e40:	4689      	mov	r9, r1
 8016e42:	2101      	movs	r1, #1
 8016e44:	ec57 6b10 	vmov	r6, r7, d0
 8016e48:	4690      	mov	r8, r2
 8016e4a:	f7ff fc09 	bl	8016660 <_Balloc>
 8016e4e:	4604      	mov	r4, r0
 8016e50:	b930      	cbnz	r0, 8016e60 <__d2b+0x24>
 8016e52:	4602      	mov	r2, r0
 8016e54:	4b25      	ldr	r3, [pc, #148]	; (8016eec <__d2b+0xb0>)
 8016e56:	4826      	ldr	r0, [pc, #152]	; (8016ef0 <__d2b+0xb4>)
 8016e58:	f240 310a 	movw	r1, #778	; 0x30a
 8016e5c:	f000 faba 	bl	80173d4 <__assert_func>
 8016e60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016e64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e68:	bb35      	cbnz	r5, 8016eb8 <__d2b+0x7c>
 8016e6a:	2e00      	cmp	r6, #0
 8016e6c:	9301      	str	r3, [sp, #4]
 8016e6e:	d028      	beq.n	8016ec2 <__d2b+0x86>
 8016e70:	4668      	mov	r0, sp
 8016e72:	9600      	str	r6, [sp, #0]
 8016e74:	f7ff fd06 	bl	8016884 <__lo0bits>
 8016e78:	9900      	ldr	r1, [sp, #0]
 8016e7a:	b300      	cbz	r0, 8016ebe <__d2b+0x82>
 8016e7c:	9a01      	ldr	r2, [sp, #4]
 8016e7e:	f1c0 0320 	rsb	r3, r0, #32
 8016e82:	fa02 f303 	lsl.w	r3, r2, r3
 8016e86:	430b      	orrs	r3, r1
 8016e88:	40c2      	lsrs	r2, r0
 8016e8a:	6163      	str	r3, [r4, #20]
 8016e8c:	9201      	str	r2, [sp, #4]
 8016e8e:	9b01      	ldr	r3, [sp, #4]
 8016e90:	61a3      	str	r3, [r4, #24]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	bf14      	ite	ne
 8016e96:	2202      	movne	r2, #2
 8016e98:	2201      	moveq	r2, #1
 8016e9a:	6122      	str	r2, [r4, #16]
 8016e9c:	b1d5      	cbz	r5, 8016ed4 <__d2b+0x98>
 8016e9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016ea2:	4405      	add	r5, r0
 8016ea4:	f8c9 5000 	str.w	r5, [r9]
 8016ea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016eac:	f8c8 0000 	str.w	r0, [r8]
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	b003      	add	sp, #12
 8016eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ebc:	e7d5      	b.n	8016e6a <__d2b+0x2e>
 8016ebe:	6161      	str	r1, [r4, #20]
 8016ec0:	e7e5      	b.n	8016e8e <__d2b+0x52>
 8016ec2:	a801      	add	r0, sp, #4
 8016ec4:	f7ff fcde 	bl	8016884 <__lo0bits>
 8016ec8:	9b01      	ldr	r3, [sp, #4]
 8016eca:	6163      	str	r3, [r4, #20]
 8016ecc:	2201      	movs	r2, #1
 8016ece:	6122      	str	r2, [r4, #16]
 8016ed0:	3020      	adds	r0, #32
 8016ed2:	e7e3      	b.n	8016e9c <__d2b+0x60>
 8016ed4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016ed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016edc:	f8c9 0000 	str.w	r0, [r9]
 8016ee0:	6918      	ldr	r0, [r3, #16]
 8016ee2:	f7ff fcaf 	bl	8016844 <__hi0bits>
 8016ee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016eea:	e7df      	b.n	8016eac <__d2b+0x70>
 8016eec:	080185a0 	.word	0x080185a0
 8016ef0:	0801862c 	.word	0x0801862c

08016ef4 <__ratio>:
 8016ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef8:	4688      	mov	r8, r1
 8016efa:	4669      	mov	r1, sp
 8016efc:	4681      	mov	r9, r0
 8016efe:	f7ff ff4d 	bl	8016d9c <__b2d>
 8016f02:	a901      	add	r1, sp, #4
 8016f04:	4640      	mov	r0, r8
 8016f06:	ec55 4b10 	vmov	r4, r5, d0
 8016f0a:	ee10 aa10 	vmov	sl, s0
 8016f0e:	f7ff ff45 	bl	8016d9c <__b2d>
 8016f12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016f1a:	1a59      	subs	r1, r3, r1
 8016f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f20:	1ad3      	subs	r3, r2, r3
 8016f22:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016f26:	ec57 6b10 	vmov	r6, r7, d0
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	bfd6      	itet	le
 8016f2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f32:	462a      	movgt	r2, r5
 8016f34:	463a      	movle	r2, r7
 8016f36:	46ab      	mov	fp, r5
 8016f38:	bfd6      	itet	le
 8016f3a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016f3e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016f42:	ee00 3a90 	vmovle	s1, r3
 8016f46:	ec4b ab17 	vmov	d7, sl, fp
 8016f4a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016f4e:	b003      	add	sp, #12
 8016f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f54 <__copybits>:
 8016f54:	3901      	subs	r1, #1
 8016f56:	b570      	push	{r4, r5, r6, lr}
 8016f58:	1149      	asrs	r1, r1, #5
 8016f5a:	6914      	ldr	r4, [r2, #16]
 8016f5c:	3101      	adds	r1, #1
 8016f5e:	f102 0314 	add.w	r3, r2, #20
 8016f62:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f6a:	1f05      	subs	r5, r0, #4
 8016f6c:	42a3      	cmp	r3, r4
 8016f6e:	d30c      	bcc.n	8016f8a <__copybits+0x36>
 8016f70:	1aa3      	subs	r3, r4, r2
 8016f72:	3b11      	subs	r3, #17
 8016f74:	f023 0303 	bic.w	r3, r3, #3
 8016f78:	3211      	adds	r2, #17
 8016f7a:	42a2      	cmp	r2, r4
 8016f7c:	bf88      	it	hi
 8016f7e:	2300      	movhi	r3, #0
 8016f80:	4418      	add	r0, r3
 8016f82:	2300      	movs	r3, #0
 8016f84:	4288      	cmp	r0, r1
 8016f86:	d305      	bcc.n	8016f94 <__copybits+0x40>
 8016f88:	bd70      	pop	{r4, r5, r6, pc}
 8016f8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8016f8e:	f845 6f04 	str.w	r6, [r5, #4]!
 8016f92:	e7eb      	b.n	8016f6c <__copybits+0x18>
 8016f94:	f840 3b04 	str.w	r3, [r0], #4
 8016f98:	e7f4      	b.n	8016f84 <__copybits+0x30>

08016f9a <__any_on>:
 8016f9a:	f100 0214 	add.w	r2, r0, #20
 8016f9e:	6900      	ldr	r0, [r0, #16]
 8016fa0:	114b      	asrs	r3, r1, #5
 8016fa2:	4298      	cmp	r0, r3
 8016fa4:	b510      	push	{r4, lr}
 8016fa6:	db11      	blt.n	8016fcc <__any_on+0x32>
 8016fa8:	dd0a      	ble.n	8016fc0 <__any_on+0x26>
 8016faa:	f011 011f 	ands.w	r1, r1, #31
 8016fae:	d007      	beq.n	8016fc0 <__any_on+0x26>
 8016fb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016fb4:	fa24 f001 	lsr.w	r0, r4, r1
 8016fb8:	fa00 f101 	lsl.w	r1, r0, r1
 8016fbc:	428c      	cmp	r4, r1
 8016fbe:	d10b      	bne.n	8016fd8 <__any_on+0x3e>
 8016fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016fc4:	4293      	cmp	r3, r2
 8016fc6:	d803      	bhi.n	8016fd0 <__any_on+0x36>
 8016fc8:	2000      	movs	r0, #0
 8016fca:	bd10      	pop	{r4, pc}
 8016fcc:	4603      	mov	r3, r0
 8016fce:	e7f7      	b.n	8016fc0 <__any_on+0x26>
 8016fd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016fd4:	2900      	cmp	r1, #0
 8016fd6:	d0f5      	beq.n	8016fc4 <__any_on+0x2a>
 8016fd8:	2001      	movs	r0, #1
 8016fda:	e7f6      	b.n	8016fca <__any_on+0x30>

08016fdc <_calloc_r>:
 8016fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016fde:	fba1 2402 	umull	r2, r4, r1, r2
 8016fe2:	b94c      	cbnz	r4, 8016ff8 <_calloc_r+0x1c>
 8016fe4:	4611      	mov	r1, r2
 8016fe6:	9201      	str	r2, [sp, #4]
 8016fe8:	f7fc fab2 	bl	8013550 <_malloc_r>
 8016fec:	9a01      	ldr	r2, [sp, #4]
 8016fee:	4605      	mov	r5, r0
 8016ff0:	b930      	cbnz	r0, 8017000 <_calloc_r+0x24>
 8016ff2:	4628      	mov	r0, r5
 8016ff4:	b003      	add	sp, #12
 8016ff6:	bd30      	pop	{r4, r5, pc}
 8016ff8:	220c      	movs	r2, #12
 8016ffa:	6002      	str	r2, [r0, #0]
 8016ffc:	2500      	movs	r5, #0
 8016ffe:	e7f8      	b.n	8016ff2 <_calloc_r+0x16>
 8017000:	4621      	mov	r1, r4
 8017002:	f7fc fa7c 	bl	80134fe <memset>
 8017006:	e7f4      	b.n	8016ff2 <_calloc_r+0x16>

08017008 <_free_r>:
 8017008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801700a:	2900      	cmp	r1, #0
 801700c:	d044      	beq.n	8017098 <_free_r+0x90>
 801700e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017012:	9001      	str	r0, [sp, #4]
 8017014:	2b00      	cmp	r3, #0
 8017016:	f1a1 0404 	sub.w	r4, r1, #4
 801701a:	bfb8      	it	lt
 801701c:	18e4      	addlt	r4, r4, r3
 801701e:	f7ff fb13 	bl	8016648 <__malloc_lock>
 8017022:	4a1e      	ldr	r2, [pc, #120]	; (801709c <_free_r+0x94>)
 8017024:	9801      	ldr	r0, [sp, #4]
 8017026:	6813      	ldr	r3, [r2, #0]
 8017028:	b933      	cbnz	r3, 8017038 <_free_r+0x30>
 801702a:	6063      	str	r3, [r4, #4]
 801702c:	6014      	str	r4, [r2, #0]
 801702e:	b003      	add	sp, #12
 8017030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017034:	f7ff bb0e 	b.w	8016654 <__malloc_unlock>
 8017038:	42a3      	cmp	r3, r4
 801703a:	d908      	bls.n	801704e <_free_r+0x46>
 801703c:	6825      	ldr	r5, [r4, #0]
 801703e:	1961      	adds	r1, r4, r5
 8017040:	428b      	cmp	r3, r1
 8017042:	bf01      	itttt	eq
 8017044:	6819      	ldreq	r1, [r3, #0]
 8017046:	685b      	ldreq	r3, [r3, #4]
 8017048:	1949      	addeq	r1, r1, r5
 801704a:	6021      	streq	r1, [r4, #0]
 801704c:	e7ed      	b.n	801702a <_free_r+0x22>
 801704e:	461a      	mov	r2, r3
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	b10b      	cbz	r3, 8017058 <_free_r+0x50>
 8017054:	42a3      	cmp	r3, r4
 8017056:	d9fa      	bls.n	801704e <_free_r+0x46>
 8017058:	6811      	ldr	r1, [r2, #0]
 801705a:	1855      	adds	r5, r2, r1
 801705c:	42a5      	cmp	r5, r4
 801705e:	d10b      	bne.n	8017078 <_free_r+0x70>
 8017060:	6824      	ldr	r4, [r4, #0]
 8017062:	4421      	add	r1, r4
 8017064:	1854      	adds	r4, r2, r1
 8017066:	42a3      	cmp	r3, r4
 8017068:	6011      	str	r1, [r2, #0]
 801706a:	d1e0      	bne.n	801702e <_free_r+0x26>
 801706c:	681c      	ldr	r4, [r3, #0]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	6053      	str	r3, [r2, #4]
 8017072:	4421      	add	r1, r4
 8017074:	6011      	str	r1, [r2, #0]
 8017076:	e7da      	b.n	801702e <_free_r+0x26>
 8017078:	d902      	bls.n	8017080 <_free_r+0x78>
 801707a:	230c      	movs	r3, #12
 801707c:	6003      	str	r3, [r0, #0]
 801707e:	e7d6      	b.n	801702e <_free_r+0x26>
 8017080:	6825      	ldr	r5, [r4, #0]
 8017082:	1961      	adds	r1, r4, r5
 8017084:	428b      	cmp	r3, r1
 8017086:	bf04      	itt	eq
 8017088:	6819      	ldreq	r1, [r3, #0]
 801708a:	685b      	ldreq	r3, [r3, #4]
 801708c:	6063      	str	r3, [r4, #4]
 801708e:	bf04      	itt	eq
 8017090:	1949      	addeq	r1, r1, r5
 8017092:	6021      	streq	r1, [r4, #0]
 8017094:	6054      	str	r4, [r2, #4]
 8017096:	e7ca      	b.n	801702e <_free_r+0x26>
 8017098:	b003      	add	sp, #12
 801709a:	bd30      	pop	{r4, r5, pc}
 801709c:	2000659c 	.word	0x2000659c

080170a0 <__ssputs_r>:
 80170a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170a4:	688e      	ldr	r6, [r1, #8]
 80170a6:	429e      	cmp	r6, r3
 80170a8:	4682      	mov	sl, r0
 80170aa:	460c      	mov	r4, r1
 80170ac:	4690      	mov	r8, r2
 80170ae:	461f      	mov	r7, r3
 80170b0:	d838      	bhi.n	8017124 <__ssputs_r+0x84>
 80170b2:	898a      	ldrh	r2, [r1, #12]
 80170b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80170b8:	d032      	beq.n	8017120 <__ssputs_r+0x80>
 80170ba:	6825      	ldr	r5, [r4, #0]
 80170bc:	6909      	ldr	r1, [r1, #16]
 80170be:	eba5 0901 	sub.w	r9, r5, r1
 80170c2:	6965      	ldr	r5, [r4, #20]
 80170c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80170cc:	3301      	adds	r3, #1
 80170ce:	444b      	add	r3, r9
 80170d0:	106d      	asrs	r5, r5, #1
 80170d2:	429d      	cmp	r5, r3
 80170d4:	bf38      	it	cc
 80170d6:	461d      	movcc	r5, r3
 80170d8:	0553      	lsls	r3, r2, #21
 80170da:	d531      	bpl.n	8017140 <__ssputs_r+0xa0>
 80170dc:	4629      	mov	r1, r5
 80170de:	f7fc fa37 	bl	8013550 <_malloc_r>
 80170e2:	4606      	mov	r6, r0
 80170e4:	b950      	cbnz	r0, 80170fc <__ssputs_r+0x5c>
 80170e6:	230c      	movs	r3, #12
 80170e8:	f8ca 3000 	str.w	r3, [sl]
 80170ec:	89a3      	ldrh	r3, [r4, #12]
 80170ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170f2:	81a3      	strh	r3, [r4, #12]
 80170f4:	f04f 30ff 	mov.w	r0, #4294967295
 80170f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170fc:	6921      	ldr	r1, [r4, #16]
 80170fe:	464a      	mov	r2, r9
 8017100:	f7fc f9ef 	bl	80134e2 <memcpy>
 8017104:	89a3      	ldrh	r3, [r4, #12]
 8017106:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801710a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801710e:	81a3      	strh	r3, [r4, #12]
 8017110:	6126      	str	r6, [r4, #16]
 8017112:	6165      	str	r5, [r4, #20]
 8017114:	444e      	add	r6, r9
 8017116:	eba5 0509 	sub.w	r5, r5, r9
 801711a:	6026      	str	r6, [r4, #0]
 801711c:	60a5      	str	r5, [r4, #8]
 801711e:	463e      	mov	r6, r7
 8017120:	42be      	cmp	r6, r7
 8017122:	d900      	bls.n	8017126 <__ssputs_r+0x86>
 8017124:	463e      	mov	r6, r7
 8017126:	6820      	ldr	r0, [r4, #0]
 8017128:	4632      	mov	r2, r6
 801712a:	4641      	mov	r1, r8
 801712c:	f000 f982 	bl	8017434 <memmove>
 8017130:	68a3      	ldr	r3, [r4, #8]
 8017132:	1b9b      	subs	r3, r3, r6
 8017134:	60a3      	str	r3, [r4, #8]
 8017136:	6823      	ldr	r3, [r4, #0]
 8017138:	4433      	add	r3, r6
 801713a:	6023      	str	r3, [r4, #0]
 801713c:	2000      	movs	r0, #0
 801713e:	e7db      	b.n	80170f8 <__ssputs_r+0x58>
 8017140:	462a      	mov	r2, r5
 8017142:	f000 f991 	bl	8017468 <_realloc_r>
 8017146:	4606      	mov	r6, r0
 8017148:	2800      	cmp	r0, #0
 801714a:	d1e1      	bne.n	8017110 <__ssputs_r+0x70>
 801714c:	6921      	ldr	r1, [r4, #16]
 801714e:	4650      	mov	r0, sl
 8017150:	f7ff ff5a 	bl	8017008 <_free_r>
 8017154:	e7c7      	b.n	80170e6 <__ssputs_r+0x46>
	...

08017158 <_svfiprintf_r>:
 8017158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801715c:	4698      	mov	r8, r3
 801715e:	898b      	ldrh	r3, [r1, #12]
 8017160:	061b      	lsls	r3, r3, #24
 8017162:	b09d      	sub	sp, #116	; 0x74
 8017164:	4607      	mov	r7, r0
 8017166:	460d      	mov	r5, r1
 8017168:	4614      	mov	r4, r2
 801716a:	d50e      	bpl.n	801718a <_svfiprintf_r+0x32>
 801716c:	690b      	ldr	r3, [r1, #16]
 801716e:	b963      	cbnz	r3, 801718a <_svfiprintf_r+0x32>
 8017170:	2140      	movs	r1, #64	; 0x40
 8017172:	f7fc f9ed 	bl	8013550 <_malloc_r>
 8017176:	6028      	str	r0, [r5, #0]
 8017178:	6128      	str	r0, [r5, #16]
 801717a:	b920      	cbnz	r0, 8017186 <_svfiprintf_r+0x2e>
 801717c:	230c      	movs	r3, #12
 801717e:	603b      	str	r3, [r7, #0]
 8017180:	f04f 30ff 	mov.w	r0, #4294967295
 8017184:	e0d1      	b.n	801732a <_svfiprintf_r+0x1d2>
 8017186:	2340      	movs	r3, #64	; 0x40
 8017188:	616b      	str	r3, [r5, #20]
 801718a:	2300      	movs	r3, #0
 801718c:	9309      	str	r3, [sp, #36]	; 0x24
 801718e:	2320      	movs	r3, #32
 8017190:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017194:	f8cd 800c 	str.w	r8, [sp, #12]
 8017198:	2330      	movs	r3, #48	; 0x30
 801719a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017344 <_svfiprintf_r+0x1ec>
 801719e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171a2:	f04f 0901 	mov.w	r9, #1
 80171a6:	4623      	mov	r3, r4
 80171a8:	469a      	mov	sl, r3
 80171aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171ae:	b10a      	cbz	r2, 80171b4 <_svfiprintf_r+0x5c>
 80171b0:	2a25      	cmp	r2, #37	; 0x25
 80171b2:	d1f9      	bne.n	80171a8 <_svfiprintf_r+0x50>
 80171b4:	ebba 0b04 	subs.w	fp, sl, r4
 80171b8:	d00b      	beq.n	80171d2 <_svfiprintf_r+0x7a>
 80171ba:	465b      	mov	r3, fp
 80171bc:	4622      	mov	r2, r4
 80171be:	4629      	mov	r1, r5
 80171c0:	4638      	mov	r0, r7
 80171c2:	f7ff ff6d 	bl	80170a0 <__ssputs_r>
 80171c6:	3001      	adds	r0, #1
 80171c8:	f000 80aa 	beq.w	8017320 <_svfiprintf_r+0x1c8>
 80171cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171ce:	445a      	add	r2, fp
 80171d0:	9209      	str	r2, [sp, #36]	; 0x24
 80171d2:	f89a 3000 	ldrb.w	r3, [sl]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	f000 80a2 	beq.w	8017320 <_svfiprintf_r+0x1c8>
 80171dc:	2300      	movs	r3, #0
 80171de:	f04f 32ff 	mov.w	r2, #4294967295
 80171e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171e6:	f10a 0a01 	add.w	sl, sl, #1
 80171ea:	9304      	str	r3, [sp, #16]
 80171ec:	9307      	str	r3, [sp, #28]
 80171ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171f2:	931a      	str	r3, [sp, #104]	; 0x68
 80171f4:	4654      	mov	r4, sl
 80171f6:	2205      	movs	r2, #5
 80171f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171fc:	4851      	ldr	r0, [pc, #324]	; (8017344 <_svfiprintf_r+0x1ec>)
 80171fe:	f7e9 f827 	bl	8000250 <memchr>
 8017202:	9a04      	ldr	r2, [sp, #16]
 8017204:	b9d8      	cbnz	r0, 801723e <_svfiprintf_r+0xe6>
 8017206:	06d0      	lsls	r0, r2, #27
 8017208:	bf44      	itt	mi
 801720a:	2320      	movmi	r3, #32
 801720c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017210:	0711      	lsls	r1, r2, #28
 8017212:	bf44      	itt	mi
 8017214:	232b      	movmi	r3, #43	; 0x2b
 8017216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801721a:	f89a 3000 	ldrb.w	r3, [sl]
 801721e:	2b2a      	cmp	r3, #42	; 0x2a
 8017220:	d015      	beq.n	801724e <_svfiprintf_r+0xf6>
 8017222:	9a07      	ldr	r2, [sp, #28]
 8017224:	4654      	mov	r4, sl
 8017226:	2000      	movs	r0, #0
 8017228:	f04f 0c0a 	mov.w	ip, #10
 801722c:	4621      	mov	r1, r4
 801722e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017232:	3b30      	subs	r3, #48	; 0x30
 8017234:	2b09      	cmp	r3, #9
 8017236:	d94e      	bls.n	80172d6 <_svfiprintf_r+0x17e>
 8017238:	b1b0      	cbz	r0, 8017268 <_svfiprintf_r+0x110>
 801723a:	9207      	str	r2, [sp, #28]
 801723c:	e014      	b.n	8017268 <_svfiprintf_r+0x110>
 801723e:	eba0 0308 	sub.w	r3, r0, r8
 8017242:	fa09 f303 	lsl.w	r3, r9, r3
 8017246:	4313      	orrs	r3, r2
 8017248:	9304      	str	r3, [sp, #16]
 801724a:	46a2      	mov	sl, r4
 801724c:	e7d2      	b.n	80171f4 <_svfiprintf_r+0x9c>
 801724e:	9b03      	ldr	r3, [sp, #12]
 8017250:	1d19      	adds	r1, r3, #4
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	9103      	str	r1, [sp, #12]
 8017256:	2b00      	cmp	r3, #0
 8017258:	bfbb      	ittet	lt
 801725a:	425b      	neglt	r3, r3
 801725c:	f042 0202 	orrlt.w	r2, r2, #2
 8017260:	9307      	strge	r3, [sp, #28]
 8017262:	9307      	strlt	r3, [sp, #28]
 8017264:	bfb8      	it	lt
 8017266:	9204      	strlt	r2, [sp, #16]
 8017268:	7823      	ldrb	r3, [r4, #0]
 801726a:	2b2e      	cmp	r3, #46	; 0x2e
 801726c:	d10c      	bne.n	8017288 <_svfiprintf_r+0x130>
 801726e:	7863      	ldrb	r3, [r4, #1]
 8017270:	2b2a      	cmp	r3, #42	; 0x2a
 8017272:	d135      	bne.n	80172e0 <_svfiprintf_r+0x188>
 8017274:	9b03      	ldr	r3, [sp, #12]
 8017276:	1d1a      	adds	r2, r3, #4
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	9203      	str	r2, [sp, #12]
 801727c:	2b00      	cmp	r3, #0
 801727e:	bfb8      	it	lt
 8017280:	f04f 33ff 	movlt.w	r3, #4294967295
 8017284:	3402      	adds	r4, #2
 8017286:	9305      	str	r3, [sp, #20]
 8017288:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017354 <_svfiprintf_r+0x1fc>
 801728c:	7821      	ldrb	r1, [r4, #0]
 801728e:	2203      	movs	r2, #3
 8017290:	4650      	mov	r0, sl
 8017292:	f7e8 ffdd 	bl	8000250 <memchr>
 8017296:	b140      	cbz	r0, 80172aa <_svfiprintf_r+0x152>
 8017298:	2340      	movs	r3, #64	; 0x40
 801729a:	eba0 000a 	sub.w	r0, r0, sl
 801729e:	fa03 f000 	lsl.w	r0, r3, r0
 80172a2:	9b04      	ldr	r3, [sp, #16]
 80172a4:	4303      	orrs	r3, r0
 80172a6:	3401      	adds	r4, #1
 80172a8:	9304      	str	r3, [sp, #16]
 80172aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172ae:	4826      	ldr	r0, [pc, #152]	; (8017348 <_svfiprintf_r+0x1f0>)
 80172b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172b4:	2206      	movs	r2, #6
 80172b6:	f7e8 ffcb 	bl	8000250 <memchr>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	d038      	beq.n	8017330 <_svfiprintf_r+0x1d8>
 80172be:	4b23      	ldr	r3, [pc, #140]	; (801734c <_svfiprintf_r+0x1f4>)
 80172c0:	bb1b      	cbnz	r3, 801730a <_svfiprintf_r+0x1b2>
 80172c2:	9b03      	ldr	r3, [sp, #12]
 80172c4:	3307      	adds	r3, #7
 80172c6:	f023 0307 	bic.w	r3, r3, #7
 80172ca:	3308      	adds	r3, #8
 80172cc:	9303      	str	r3, [sp, #12]
 80172ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172d0:	4433      	add	r3, r6
 80172d2:	9309      	str	r3, [sp, #36]	; 0x24
 80172d4:	e767      	b.n	80171a6 <_svfiprintf_r+0x4e>
 80172d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80172da:	460c      	mov	r4, r1
 80172dc:	2001      	movs	r0, #1
 80172de:	e7a5      	b.n	801722c <_svfiprintf_r+0xd4>
 80172e0:	2300      	movs	r3, #0
 80172e2:	3401      	adds	r4, #1
 80172e4:	9305      	str	r3, [sp, #20]
 80172e6:	4619      	mov	r1, r3
 80172e8:	f04f 0c0a 	mov.w	ip, #10
 80172ec:	4620      	mov	r0, r4
 80172ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172f2:	3a30      	subs	r2, #48	; 0x30
 80172f4:	2a09      	cmp	r2, #9
 80172f6:	d903      	bls.n	8017300 <_svfiprintf_r+0x1a8>
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d0c5      	beq.n	8017288 <_svfiprintf_r+0x130>
 80172fc:	9105      	str	r1, [sp, #20]
 80172fe:	e7c3      	b.n	8017288 <_svfiprintf_r+0x130>
 8017300:	fb0c 2101 	mla	r1, ip, r1, r2
 8017304:	4604      	mov	r4, r0
 8017306:	2301      	movs	r3, #1
 8017308:	e7f0      	b.n	80172ec <_svfiprintf_r+0x194>
 801730a:	ab03      	add	r3, sp, #12
 801730c:	9300      	str	r3, [sp, #0]
 801730e:	462a      	mov	r2, r5
 8017310:	4b0f      	ldr	r3, [pc, #60]	; (8017350 <_svfiprintf_r+0x1f8>)
 8017312:	a904      	add	r1, sp, #16
 8017314:	4638      	mov	r0, r7
 8017316:	f7fc fa1f 	bl	8013758 <_printf_float>
 801731a:	1c42      	adds	r2, r0, #1
 801731c:	4606      	mov	r6, r0
 801731e:	d1d6      	bne.n	80172ce <_svfiprintf_r+0x176>
 8017320:	89ab      	ldrh	r3, [r5, #12]
 8017322:	065b      	lsls	r3, r3, #25
 8017324:	f53f af2c 	bmi.w	8017180 <_svfiprintf_r+0x28>
 8017328:	9809      	ldr	r0, [sp, #36]	; 0x24
 801732a:	b01d      	add	sp, #116	; 0x74
 801732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017330:	ab03      	add	r3, sp, #12
 8017332:	9300      	str	r3, [sp, #0]
 8017334:	462a      	mov	r2, r5
 8017336:	4b06      	ldr	r3, [pc, #24]	; (8017350 <_svfiprintf_r+0x1f8>)
 8017338:	a904      	add	r1, sp, #16
 801733a:	4638      	mov	r0, r7
 801733c:	f7fc fc98 	bl	8013c70 <_printf_i>
 8017340:	e7eb      	b.n	801731a <_svfiprintf_r+0x1c2>
 8017342:	bf00      	nop
 8017344:	08018784 	.word	0x08018784
 8017348:	0801878e 	.word	0x0801878e
 801734c:	08013759 	.word	0x08013759
 8017350:	080170a1 	.word	0x080170a1
 8017354:	0801878a 	.word	0x0801878a

08017358 <_read_r>:
 8017358:	b538      	push	{r3, r4, r5, lr}
 801735a:	4d07      	ldr	r5, [pc, #28]	; (8017378 <_read_r+0x20>)
 801735c:	4604      	mov	r4, r0
 801735e:	4608      	mov	r0, r1
 8017360:	4611      	mov	r1, r2
 8017362:	2200      	movs	r2, #0
 8017364:	602a      	str	r2, [r5, #0]
 8017366:	461a      	mov	r2, r3
 8017368:	f7ef fa2e 	bl	80067c8 <_read>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <_read_r+0x1e>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	b103      	cbz	r3, 8017376 <_read_r+0x1e>
 8017374:	6023      	str	r3, [r4, #0]
 8017376:	bd38      	pop	{r3, r4, r5, pc}
 8017378:	200065a4 	.word	0x200065a4
 801737c:	00000000 	.word	0x00000000

08017380 <nan>:
 8017380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017388 <nan+0x8>
 8017384:	4770      	bx	lr
 8017386:	bf00      	nop
 8017388:	00000000 	.word	0x00000000
 801738c:	7ff80000 	.word	0x7ff80000

08017390 <strncmp>:
 8017390:	b510      	push	{r4, lr}
 8017392:	b17a      	cbz	r2, 80173b4 <strncmp+0x24>
 8017394:	4603      	mov	r3, r0
 8017396:	3901      	subs	r1, #1
 8017398:	1884      	adds	r4, r0, r2
 801739a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801739e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80173a2:	4290      	cmp	r0, r2
 80173a4:	d101      	bne.n	80173aa <strncmp+0x1a>
 80173a6:	42a3      	cmp	r3, r4
 80173a8:	d101      	bne.n	80173ae <strncmp+0x1e>
 80173aa:	1a80      	subs	r0, r0, r2
 80173ac:	bd10      	pop	{r4, pc}
 80173ae:	2800      	cmp	r0, #0
 80173b0:	d1f3      	bne.n	801739a <strncmp+0xa>
 80173b2:	e7fa      	b.n	80173aa <strncmp+0x1a>
 80173b4:	4610      	mov	r0, r2
 80173b6:	e7f9      	b.n	80173ac <strncmp+0x1c>

080173b8 <__ascii_wctomb>:
 80173b8:	b149      	cbz	r1, 80173ce <__ascii_wctomb+0x16>
 80173ba:	2aff      	cmp	r2, #255	; 0xff
 80173bc:	bf85      	ittet	hi
 80173be:	238a      	movhi	r3, #138	; 0x8a
 80173c0:	6003      	strhi	r3, [r0, #0]
 80173c2:	700a      	strbls	r2, [r1, #0]
 80173c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80173c8:	bf98      	it	ls
 80173ca:	2001      	movls	r0, #1
 80173cc:	4770      	bx	lr
 80173ce:	4608      	mov	r0, r1
 80173d0:	4770      	bx	lr
	...

080173d4 <__assert_func>:
 80173d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173d6:	4614      	mov	r4, r2
 80173d8:	461a      	mov	r2, r3
 80173da:	4b09      	ldr	r3, [pc, #36]	; (8017400 <__assert_func+0x2c>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	4605      	mov	r5, r0
 80173e0:	68d8      	ldr	r0, [r3, #12]
 80173e2:	b14c      	cbz	r4, 80173f8 <__assert_func+0x24>
 80173e4:	4b07      	ldr	r3, [pc, #28]	; (8017404 <__assert_func+0x30>)
 80173e6:	9100      	str	r1, [sp, #0]
 80173e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173ec:	4906      	ldr	r1, [pc, #24]	; (8017408 <__assert_func+0x34>)
 80173ee:	462b      	mov	r3, r5
 80173f0:	f000 f80e 	bl	8017410 <fiprintf>
 80173f4:	f000 fa80 	bl	80178f8 <abort>
 80173f8:	4b04      	ldr	r3, [pc, #16]	; (801740c <__assert_func+0x38>)
 80173fa:	461c      	mov	r4, r3
 80173fc:	e7f3      	b.n	80173e6 <__assert_func+0x12>
 80173fe:	bf00      	nop
 8017400:	200001c0 	.word	0x200001c0
 8017404:	08018795 	.word	0x08018795
 8017408:	080187a2 	.word	0x080187a2
 801740c:	080187d0 	.word	0x080187d0

08017410 <fiprintf>:
 8017410:	b40e      	push	{r1, r2, r3}
 8017412:	b503      	push	{r0, r1, lr}
 8017414:	4601      	mov	r1, r0
 8017416:	ab03      	add	r3, sp, #12
 8017418:	4805      	ldr	r0, [pc, #20]	; (8017430 <fiprintf+0x20>)
 801741a:	f853 2b04 	ldr.w	r2, [r3], #4
 801741e:	6800      	ldr	r0, [r0, #0]
 8017420:	9301      	str	r3, [sp, #4]
 8017422:	f000 f879 	bl	8017518 <_vfiprintf_r>
 8017426:	b002      	add	sp, #8
 8017428:	f85d eb04 	ldr.w	lr, [sp], #4
 801742c:	b003      	add	sp, #12
 801742e:	4770      	bx	lr
 8017430:	200001c0 	.word	0x200001c0

08017434 <memmove>:
 8017434:	4288      	cmp	r0, r1
 8017436:	b510      	push	{r4, lr}
 8017438:	eb01 0402 	add.w	r4, r1, r2
 801743c:	d902      	bls.n	8017444 <memmove+0x10>
 801743e:	4284      	cmp	r4, r0
 8017440:	4623      	mov	r3, r4
 8017442:	d807      	bhi.n	8017454 <memmove+0x20>
 8017444:	1e43      	subs	r3, r0, #1
 8017446:	42a1      	cmp	r1, r4
 8017448:	d008      	beq.n	801745c <memmove+0x28>
 801744a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801744e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017452:	e7f8      	b.n	8017446 <memmove+0x12>
 8017454:	4402      	add	r2, r0
 8017456:	4601      	mov	r1, r0
 8017458:	428a      	cmp	r2, r1
 801745a:	d100      	bne.n	801745e <memmove+0x2a>
 801745c:	bd10      	pop	{r4, pc}
 801745e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017466:	e7f7      	b.n	8017458 <memmove+0x24>

08017468 <_realloc_r>:
 8017468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801746c:	4680      	mov	r8, r0
 801746e:	4614      	mov	r4, r2
 8017470:	460e      	mov	r6, r1
 8017472:	b921      	cbnz	r1, 801747e <_realloc_r+0x16>
 8017474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017478:	4611      	mov	r1, r2
 801747a:	f7fc b869 	b.w	8013550 <_malloc_r>
 801747e:	b92a      	cbnz	r2, 801748c <_realloc_r+0x24>
 8017480:	f7ff fdc2 	bl	8017008 <_free_r>
 8017484:	4625      	mov	r5, r4
 8017486:	4628      	mov	r0, r5
 8017488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801748c:	f000 faa0 	bl	80179d0 <_malloc_usable_size_r>
 8017490:	4284      	cmp	r4, r0
 8017492:	4607      	mov	r7, r0
 8017494:	d802      	bhi.n	801749c <_realloc_r+0x34>
 8017496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801749a:	d812      	bhi.n	80174c2 <_realloc_r+0x5a>
 801749c:	4621      	mov	r1, r4
 801749e:	4640      	mov	r0, r8
 80174a0:	f7fc f856 	bl	8013550 <_malloc_r>
 80174a4:	4605      	mov	r5, r0
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d0ed      	beq.n	8017486 <_realloc_r+0x1e>
 80174aa:	42bc      	cmp	r4, r7
 80174ac:	4622      	mov	r2, r4
 80174ae:	4631      	mov	r1, r6
 80174b0:	bf28      	it	cs
 80174b2:	463a      	movcs	r2, r7
 80174b4:	f7fc f815 	bl	80134e2 <memcpy>
 80174b8:	4631      	mov	r1, r6
 80174ba:	4640      	mov	r0, r8
 80174bc:	f7ff fda4 	bl	8017008 <_free_r>
 80174c0:	e7e1      	b.n	8017486 <_realloc_r+0x1e>
 80174c2:	4635      	mov	r5, r6
 80174c4:	e7df      	b.n	8017486 <_realloc_r+0x1e>

080174c6 <__sfputc_r>:
 80174c6:	6893      	ldr	r3, [r2, #8]
 80174c8:	3b01      	subs	r3, #1
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	b410      	push	{r4}
 80174ce:	6093      	str	r3, [r2, #8]
 80174d0:	da08      	bge.n	80174e4 <__sfputc_r+0x1e>
 80174d2:	6994      	ldr	r4, [r2, #24]
 80174d4:	42a3      	cmp	r3, r4
 80174d6:	db01      	blt.n	80174dc <__sfputc_r+0x16>
 80174d8:	290a      	cmp	r1, #10
 80174da:	d103      	bne.n	80174e4 <__sfputc_r+0x1e>
 80174dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174e0:	f000 b94a 	b.w	8017778 <__swbuf_r>
 80174e4:	6813      	ldr	r3, [r2, #0]
 80174e6:	1c58      	adds	r0, r3, #1
 80174e8:	6010      	str	r0, [r2, #0]
 80174ea:	7019      	strb	r1, [r3, #0]
 80174ec:	4608      	mov	r0, r1
 80174ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <__sfputs_r>:
 80174f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174f6:	4606      	mov	r6, r0
 80174f8:	460f      	mov	r7, r1
 80174fa:	4614      	mov	r4, r2
 80174fc:	18d5      	adds	r5, r2, r3
 80174fe:	42ac      	cmp	r4, r5
 8017500:	d101      	bne.n	8017506 <__sfputs_r+0x12>
 8017502:	2000      	movs	r0, #0
 8017504:	e007      	b.n	8017516 <__sfputs_r+0x22>
 8017506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801750a:	463a      	mov	r2, r7
 801750c:	4630      	mov	r0, r6
 801750e:	f7ff ffda 	bl	80174c6 <__sfputc_r>
 8017512:	1c43      	adds	r3, r0, #1
 8017514:	d1f3      	bne.n	80174fe <__sfputs_r+0xa>
 8017516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017518 <_vfiprintf_r>:
 8017518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801751c:	460d      	mov	r5, r1
 801751e:	b09d      	sub	sp, #116	; 0x74
 8017520:	4614      	mov	r4, r2
 8017522:	4698      	mov	r8, r3
 8017524:	4606      	mov	r6, r0
 8017526:	b118      	cbz	r0, 8017530 <_vfiprintf_r+0x18>
 8017528:	6983      	ldr	r3, [r0, #24]
 801752a:	b90b      	cbnz	r3, 8017530 <_vfiprintf_r+0x18>
 801752c:	f7fb ff14 	bl	8013358 <__sinit>
 8017530:	4b89      	ldr	r3, [pc, #548]	; (8017758 <_vfiprintf_r+0x240>)
 8017532:	429d      	cmp	r5, r3
 8017534:	d11b      	bne.n	801756e <_vfiprintf_r+0x56>
 8017536:	6875      	ldr	r5, [r6, #4]
 8017538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801753a:	07d9      	lsls	r1, r3, #31
 801753c:	d405      	bmi.n	801754a <_vfiprintf_r+0x32>
 801753e:	89ab      	ldrh	r3, [r5, #12]
 8017540:	059a      	lsls	r2, r3, #22
 8017542:	d402      	bmi.n	801754a <_vfiprintf_r+0x32>
 8017544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017546:	f7fb ffca 	bl	80134de <__retarget_lock_acquire_recursive>
 801754a:	89ab      	ldrh	r3, [r5, #12]
 801754c:	071b      	lsls	r3, r3, #28
 801754e:	d501      	bpl.n	8017554 <_vfiprintf_r+0x3c>
 8017550:	692b      	ldr	r3, [r5, #16]
 8017552:	b9eb      	cbnz	r3, 8017590 <_vfiprintf_r+0x78>
 8017554:	4629      	mov	r1, r5
 8017556:	4630      	mov	r0, r6
 8017558:	f000 f960 	bl	801781c <__swsetup_r>
 801755c:	b1c0      	cbz	r0, 8017590 <_vfiprintf_r+0x78>
 801755e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017560:	07dc      	lsls	r4, r3, #31
 8017562:	d50e      	bpl.n	8017582 <_vfiprintf_r+0x6a>
 8017564:	f04f 30ff 	mov.w	r0, #4294967295
 8017568:	b01d      	add	sp, #116	; 0x74
 801756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756e:	4b7b      	ldr	r3, [pc, #492]	; (801775c <_vfiprintf_r+0x244>)
 8017570:	429d      	cmp	r5, r3
 8017572:	d101      	bne.n	8017578 <_vfiprintf_r+0x60>
 8017574:	68b5      	ldr	r5, [r6, #8]
 8017576:	e7df      	b.n	8017538 <_vfiprintf_r+0x20>
 8017578:	4b79      	ldr	r3, [pc, #484]	; (8017760 <_vfiprintf_r+0x248>)
 801757a:	429d      	cmp	r5, r3
 801757c:	bf08      	it	eq
 801757e:	68f5      	ldreq	r5, [r6, #12]
 8017580:	e7da      	b.n	8017538 <_vfiprintf_r+0x20>
 8017582:	89ab      	ldrh	r3, [r5, #12]
 8017584:	0598      	lsls	r0, r3, #22
 8017586:	d4ed      	bmi.n	8017564 <_vfiprintf_r+0x4c>
 8017588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801758a:	f7fb ffa9 	bl	80134e0 <__retarget_lock_release_recursive>
 801758e:	e7e9      	b.n	8017564 <_vfiprintf_r+0x4c>
 8017590:	2300      	movs	r3, #0
 8017592:	9309      	str	r3, [sp, #36]	; 0x24
 8017594:	2320      	movs	r3, #32
 8017596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801759a:	f8cd 800c 	str.w	r8, [sp, #12]
 801759e:	2330      	movs	r3, #48	; 0x30
 80175a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017764 <_vfiprintf_r+0x24c>
 80175a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80175a8:	f04f 0901 	mov.w	r9, #1
 80175ac:	4623      	mov	r3, r4
 80175ae:	469a      	mov	sl, r3
 80175b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175b4:	b10a      	cbz	r2, 80175ba <_vfiprintf_r+0xa2>
 80175b6:	2a25      	cmp	r2, #37	; 0x25
 80175b8:	d1f9      	bne.n	80175ae <_vfiprintf_r+0x96>
 80175ba:	ebba 0b04 	subs.w	fp, sl, r4
 80175be:	d00b      	beq.n	80175d8 <_vfiprintf_r+0xc0>
 80175c0:	465b      	mov	r3, fp
 80175c2:	4622      	mov	r2, r4
 80175c4:	4629      	mov	r1, r5
 80175c6:	4630      	mov	r0, r6
 80175c8:	f7ff ff94 	bl	80174f4 <__sfputs_r>
 80175cc:	3001      	adds	r0, #1
 80175ce:	f000 80aa 	beq.w	8017726 <_vfiprintf_r+0x20e>
 80175d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175d4:	445a      	add	r2, fp
 80175d6:	9209      	str	r2, [sp, #36]	; 0x24
 80175d8:	f89a 3000 	ldrb.w	r3, [sl]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	f000 80a2 	beq.w	8017726 <_vfiprintf_r+0x20e>
 80175e2:	2300      	movs	r3, #0
 80175e4:	f04f 32ff 	mov.w	r2, #4294967295
 80175e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175ec:	f10a 0a01 	add.w	sl, sl, #1
 80175f0:	9304      	str	r3, [sp, #16]
 80175f2:	9307      	str	r3, [sp, #28]
 80175f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175f8:	931a      	str	r3, [sp, #104]	; 0x68
 80175fa:	4654      	mov	r4, sl
 80175fc:	2205      	movs	r2, #5
 80175fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017602:	4858      	ldr	r0, [pc, #352]	; (8017764 <_vfiprintf_r+0x24c>)
 8017604:	f7e8 fe24 	bl	8000250 <memchr>
 8017608:	9a04      	ldr	r2, [sp, #16]
 801760a:	b9d8      	cbnz	r0, 8017644 <_vfiprintf_r+0x12c>
 801760c:	06d1      	lsls	r1, r2, #27
 801760e:	bf44      	itt	mi
 8017610:	2320      	movmi	r3, #32
 8017612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017616:	0713      	lsls	r3, r2, #28
 8017618:	bf44      	itt	mi
 801761a:	232b      	movmi	r3, #43	; 0x2b
 801761c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017620:	f89a 3000 	ldrb.w	r3, [sl]
 8017624:	2b2a      	cmp	r3, #42	; 0x2a
 8017626:	d015      	beq.n	8017654 <_vfiprintf_r+0x13c>
 8017628:	9a07      	ldr	r2, [sp, #28]
 801762a:	4654      	mov	r4, sl
 801762c:	2000      	movs	r0, #0
 801762e:	f04f 0c0a 	mov.w	ip, #10
 8017632:	4621      	mov	r1, r4
 8017634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017638:	3b30      	subs	r3, #48	; 0x30
 801763a:	2b09      	cmp	r3, #9
 801763c:	d94e      	bls.n	80176dc <_vfiprintf_r+0x1c4>
 801763e:	b1b0      	cbz	r0, 801766e <_vfiprintf_r+0x156>
 8017640:	9207      	str	r2, [sp, #28]
 8017642:	e014      	b.n	801766e <_vfiprintf_r+0x156>
 8017644:	eba0 0308 	sub.w	r3, r0, r8
 8017648:	fa09 f303 	lsl.w	r3, r9, r3
 801764c:	4313      	orrs	r3, r2
 801764e:	9304      	str	r3, [sp, #16]
 8017650:	46a2      	mov	sl, r4
 8017652:	e7d2      	b.n	80175fa <_vfiprintf_r+0xe2>
 8017654:	9b03      	ldr	r3, [sp, #12]
 8017656:	1d19      	adds	r1, r3, #4
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	9103      	str	r1, [sp, #12]
 801765c:	2b00      	cmp	r3, #0
 801765e:	bfbb      	ittet	lt
 8017660:	425b      	neglt	r3, r3
 8017662:	f042 0202 	orrlt.w	r2, r2, #2
 8017666:	9307      	strge	r3, [sp, #28]
 8017668:	9307      	strlt	r3, [sp, #28]
 801766a:	bfb8      	it	lt
 801766c:	9204      	strlt	r2, [sp, #16]
 801766e:	7823      	ldrb	r3, [r4, #0]
 8017670:	2b2e      	cmp	r3, #46	; 0x2e
 8017672:	d10c      	bne.n	801768e <_vfiprintf_r+0x176>
 8017674:	7863      	ldrb	r3, [r4, #1]
 8017676:	2b2a      	cmp	r3, #42	; 0x2a
 8017678:	d135      	bne.n	80176e6 <_vfiprintf_r+0x1ce>
 801767a:	9b03      	ldr	r3, [sp, #12]
 801767c:	1d1a      	adds	r2, r3, #4
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	9203      	str	r2, [sp, #12]
 8017682:	2b00      	cmp	r3, #0
 8017684:	bfb8      	it	lt
 8017686:	f04f 33ff 	movlt.w	r3, #4294967295
 801768a:	3402      	adds	r4, #2
 801768c:	9305      	str	r3, [sp, #20]
 801768e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017774 <_vfiprintf_r+0x25c>
 8017692:	7821      	ldrb	r1, [r4, #0]
 8017694:	2203      	movs	r2, #3
 8017696:	4650      	mov	r0, sl
 8017698:	f7e8 fdda 	bl	8000250 <memchr>
 801769c:	b140      	cbz	r0, 80176b0 <_vfiprintf_r+0x198>
 801769e:	2340      	movs	r3, #64	; 0x40
 80176a0:	eba0 000a 	sub.w	r0, r0, sl
 80176a4:	fa03 f000 	lsl.w	r0, r3, r0
 80176a8:	9b04      	ldr	r3, [sp, #16]
 80176aa:	4303      	orrs	r3, r0
 80176ac:	3401      	adds	r4, #1
 80176ae:	9304      	str	r3, [sp, #16]
 80176b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176b4:	482c      	ldr	r0, [pc, #176]	; (8017768 <_vfiprintf_r+0x250>)
 80176b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80176ba:	2206      	movs	r2, #6
 80176bc:	f7e8 fdc8 	bl	8000250 <memchr>
 80176c0:	2800      	cmp	r0, #0
 80176c2:	d03f      	beq.n	8017744 <_vfiprintf_r+0x22c>
 80176c4:	4b29      	ldr	r3, [pc, #164]	; (801776c <_vfiprintf_r+0x254>)
 80176c6:	bb1b      	cbnz	r3, 8017710 <_vfiprintf_r+0x1f8>
 80176c8:	9b03      	ldr	r3, [sp, #12]
 80176ca:	3307      	adds	r3, #7
 80176cc:	f023 0307 	bic.w	r3, r3, #7
 80176d0:	3308      	adds	r3, #8
 80176d2:	9303      	str	r3, [sp, #12]
 80176d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176d6:	443b      	add	r3, r7
 80176d8:	9309      	str	r3, [sp, #36]	; 0x24
 80176da:	e767      	b.n	80175ac <_vfiprintf_r+0x94>
 80176dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80176e0:	460c      	mov	r4, r1
 80176e2:	2001      	movs	r0, #1
 80176e4:	e7a5      	b.n	8017632 <_vfiprintf_r+0x11a>
 80176e6:	2300      	movs	r3, #0
 80176e8:	3401      	adds	r4, #1
 80176ea:	9305      	str	r3, [sp, #20]
 80176ec:	4619      	mov	r1, r3
 80176ee:	f04f 0c0a 	mov.w	ip, #10
 80176f2:	4620      	mov	r0, r4
 80176f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176f8:	3a30      	subs	r2, #48	; 0x30
 80176fa:	2a09      	cmp	r2, #9
 80176fc:	d903      	bls.n	8017706 <_vfiprintf_r+0x1ee>
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d0c5      	beq.n	801768e <_vfiprintf_r+0x176>
 8017702:	9105      	str	r1, [sp, #20]
 8017704:	e7c3      	b.n	801768e <_vfiprintf_r+0x176>
 8017706:	fb0c 2101 	mla	r1, ip, r1, r2
 801770a:	4604      	mov	r4, r0
 801770c:	2301      	movs	r3, #1
 801770e:	e7f0      	b.n	80176f2 <_vfiprintf_r+0x1da>
 8017710:	ab03      	add	r3, sp, #12
 8017712:	9300      	str	r3, [sp, #0]
 8017714:	462a      	mov	r2, r5
 8017716:	4b16      	ldr	r3, [pc, #88]	; (8017770 <_vfiprintf_r+0x258>)
 8017718:	a904      	add	r1, sp, #16
 801771a:	4630      	mov	r0, r6
 801771c:	f7fc f81c 	bl	8013758 <_printf_float>
 8017720:	4607      	mov	r7, r0
 8017722:	1c78      	adds	r0, r7, #1
 8017724:	d1d6      	bne.n	80176d4 <_vfiprintf_r+0x1bc>
 8017726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017728:	07d9      	lsls	r1, r3, #31
 801772a:	d405      	bmi.n	8017738 <_vfiprintf_r+0x220>
 801772c:	89ab      	ldrh	r3, [r5, #12]
 801772e:	059a      	lsls	r2, r3, #22
 8017730:	d402      	bmi.n	8017738 <_vfiprintf_r+0x220>
 8017732:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017734:	f7fb fed4 	bl	80134e0 <__retarget_lock_release_recursive>
 8017738:	89ab      	ldrh	r3, [r5, #12]
 801773a:	065b      	lsls	r3, r3, #25
 801773c:	f53f af12 	bmi.w	8017564 <_vfiprintf_r+0x4c>
 8017740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017742:	e711      	b.n	8017568 <_vfiprintf_r+0x50>
 8017744:	ab03      	add	r3, sp, #12
 8017746:	9300      	str	r3, [sp, #0]
 8017748:	462a      	mov	r2, r5
 801774a:	4b09      	ldr	r3, [pc, #36]	; (8017770 <_vfiprintf_r+0x258>)
 801774c:	a904      	add	r1, sp, #16
 801774e:	4630      	mov	r0, r6
 8017750:	f7fc fa8e 	bl	8013c70 <_printf_i>
 8017754:	e7e4      	b.n	8017720 <_vfiprintf_r+0x208>
 8017756:	bf00      	nop
 8017758:	0801834c 	.word	0x0801834c
 801775c:	0801836c 	.word	0x0801836c
 8017760:	0801832c 	.word	0x0801832c
 8017764:	08018784 	.word	0x08018784
 8017768:	0801878e 	.word	0x0801878e
 801776c:	08013759 	.word	0x08013759
 8017770:	080174f5 	.word	0x080174f5
 8017774:	0801878a 	.word	0x0801878a

08017778 <__swbuf_r>:
 8017778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801777a:	460e      	mov	r6, r1
 801777c:	4614      	mov	r4, r2
 801777e:	4605      	mov	r5, r0
 8017780:	b118      	cbz	r0, 801778a <__swbuf_r+0x12>
 8017782:	6983      	ldr	r3, [r0, #24]
 8017784:	b90b      	cbnz	r3, 801778a <__swbuf_r+0x12>
 8017786:	f7fb fde7 	bl	8013358 <__sinit>
 801778a:	4b21      	ldr	r3, [pc, #132]	; (8017810 <__swbuf_r+0x98>)
 801778c:	429c      	cmp	r4, r3
 801778e:	d12b      	bne.n	80177e8 <__swbuf_r+0x70>
 8017790:	686c      	ldr	r4, [r5, #4]
 8017792:	69a3      	ldr	r3, [r4, #24]
 8017794:	60a3      	str	r3, [r4, #8]
 8017796:	89a3      	ldrh	r3, [r4, #12]
 8017798:	071a      	lsls	r2, r3, #28
 801779a:	d52f      	bpl.n	80177fc <__swbuf_r+0x84>
 801779c:	6923      	ldr	r3, [r4, #16]
 801779e:	b36b      	cbz	r3, 80177fc <__swbuf_r+0x84>
 80177a0:	6923      	ldr	r3, [r4, #16]
 80177a2:	6820      	ldr	r0, [r4, #0]
 80177a4:	1ac0      	subs	r0, r0, r3
 80177a6:	6963      	ldr	r3, [r4, #20]
 80177a8:	b2f6      	uxtb	r6, r6
 80177aa:	4283      	cmp	r3, r0
 80177ac:	4637      	mov	r7, r6
 80177ae:	dc04      	bgt.n	80177ba <__swbuf_r+0x42>
 80177b0:	4621      	mov	r1, r4
 80177b2:	4628      	mov	r0, r5
 80177b4:	f7fe fb6c 	bl	8015e90 <_fflush_r>
 80177b8:	bb30      	cbnz	r0, 8017808 <__swbuf_r+0x90>
 80177ba:	68a3      	ldr	r3, [r4, #8]
 80177bc:	3b01      	subs	r3, #1
 80177be:	60a3      	str	r3, [r4, #8]
 80177c0:	6823      	ldr	r3, [r4, #0]
 80177c2:	1c5a      	adds	r2, r3, #1
 80177c4:	6022      	str	r2, [r4, #0]
 80177c6:	701e      	strb	r6, [r3, #0]
 80177c8:	6963      	ldr	r3, [r4, #20]
 80177ca:	3001      	adds	r0, #1
 80177cc:	4283      	cmp	r3, r0
 80177ce:	d004      	beq.n	80177da <__swbuf_r+0x62>
 80177d0:	89a3      	ldrh	r3, [r4, #12]
 80177d2:	07db      	lsls	r3, r3, #31
 80177d4:	d506      	bpl.n	80177e4 <__swbuf_r+0x6c>
 80177d6:	2e0a      	cmp	r6, #10
 80177d8:	d104      	bne.n	80177e4 <__swbuf_r+0x6c>
 80177da:	4621      	mov	r1, r4
 80177dc:	4628      	mov	r0, r5
 80177de:	f7fe fb57 	bl	8015e90 <_fflush_r>
 80177e2:	b988      	cbnz	r0, 8017808 <__swbuf_r+0x90>
 80177e4:	4638      	mov	r0, r7
 80177e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177e8:	4b0a      	ldr	r3, [pc, #40]	; (8017814 <__swbuf_r+0x9c>)
 80177ea:	429c      	cmp	r4, r3
 80177ec:	d101      	bne.n	80177f2 <__swbuf_r+0x7a>
 80177ee:	68ac      	ldr	r4, [r5, #8]
 80177f0:	e7cf      	b.n	8017792 <__swbuf_r+0x1a>
 80177f2:	4b09      	ldr	r3, [pc, #36]	; (8017818 <__swbuf_r+0xa0>)
 80177f4:	429c      	cmp	r4, r3
 80177f6:	bf08      	it	eq
 80177f8:	68ec      	ldreq	r4, [r5, #12]
 80177fa:	e7ca      	b.n	8017792 <__swbuf_r+0x1a>
 80177fc:	4621      	mov	r1, r4
 80177fe:	4628      	mov	r0, r5
 8017800:	f000 f80c 	bl	801781c <__swsetup_r>
 8017804:	2800      	cmp	r0, #0
 8017806:	d0cb      	beq.n	80177a0 <__swbuf_r+0x28>
 8017808:	f04f 37ff 	mov.w	r7, #4294967295
 801780c:	e7ea      	b.n	80177e4 <__swbuf_r+0x6c>
 801780e:	bf00      	nop
 8017810:	0801834c 	.word	0x0801834c
 8017814:	0801836c 	.word	0x0801836c
 8017818:	0801832c 	.word	0x0801832c

0801781c <__swsetup_r>:
 801781c:	4b32      	ldr	r3, [pc, #200]	; (80178e8 <__swsetup_r+0xcc>)
 801781e:	b570      	push	{r4, r5, r6, lr}
 8017820:	681d      	ldr	r5, [r3, #0]
 8017822:	4606      	mov	r6, r0
 8017824:	460c      	mov	r4, r1
 8017826:	b125      	cbz	r5, 8017832 <__swsetup_r+0x16>
 8017828:	69ab      	ldr	r3, [r5, #24]
 801782a:	b913      	cbnz	r3, 8017832 <__swsetup_r+0x16>
 801782c:	4628      	mov	r0, r5
 801782e:	f7fb fd93 	bl	8013358 <__sinit>
 8017832:	4b2e      	ldr	r3, [pc, #184]	; (80178ec <__swsetup_r+0xd0>)
 8017834:	429c      	cmp	r4, r3
 8017836:	d10f      	bne.n	8017858 <__swsetup_r+0x3c>
 8017838:	686c      	ldr	r4, [r5, #4]
 801783a:	89a3      	ldrh	r3, [r4, #12]
 801783c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017840:	0719      	lsls	r1, r3, #28
 8017842:	d42c      	bmi.n	801789e <__swsetup_r+0x82>
 8017844:	06dd      	lsls	r5, r3, #27
 8017846:	d411      	bmi.n	801786c <__swsetup_r+0x50>
 8017848:	2309      	movs	r3, #9
 801784a:	6033      	str	r3, [r6, #0]
 801784c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017850:	81a3      	strh	r3, [r4, #12]
 8017852:	f04f 30ff 	mov.w	r0, #4294967295
 8017856:	e03e      	b.n	80178d6 <__swsetup_r+0xba>
 8017858:	4b25      	ldr	r3, [pc, #148]	; (80178f0 <__swsetup_r+0xd4>)
 801785a:	429c      	cmp	r4, r3
 801785c:	d101      	bne.n	8017862 <__swsetup_r+0x46>
 801785e:	68ac      	ldr	r4, [r5, #8]
 8017860:	e7eb      	b.n	801783a <__swsetup_r+0x1e>
 8017862:	4b24      	ldr	r3, [pc, #144]	; (80178f4 <__swsetup_r+0xd8>)
 8017864:	429c      	cmp	r4, r3
 8017866:	bf08      	it	eq
 8017868:	68ec      	ldreq	r4, [r5, #12]
 801786a:	e7e6      	b.n	801783a <__swsetup_r+0x1e>
 801786c:	0758      	lsls	r0, r3, #29
 801786e:	d512      	bpl.n	8017896 <__swsetup_r+0x7a>
 8017870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017872:	b141      	cbz	r1, 8017886 <__swsetup_r+0x6a>
 8017874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017878:	4299      	cmp	r1, r3
 801787a:	d002      	beq.n	8017882 <__swsetup_r+0x66>
 801787c:	4630      	mov	r0, r6
 801787e:	f7ff fbc3 	bl	8017008 <_free_r>
 8017882:	2300      	movs	r3, #0
 8017884:	6363      	str	r3, [r4, #52]	; 0x34
 8017886:	89a3      	ldrh	r3, [r4, #12]
 8017888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801788c:	81a3      	strh	r3, [r4, #12]
 801788e:	2300      	movs	r3, #0
 8017890:	6063      	str	r3, [r4, #4]
 8017892:	6923      	ldr	r3, [r4, #16]
 8017894:	6023      	str	r3, [r4, #0]
 8017896:	89a3      	ldrh	r3, [r4, #12]
 8017898:	f043 0308 	orr.w	r3, r3, #8
 801789c:	81a3      	strh	r3, [r4, #12]
 801789e:	6923      	ldr	r3, [r4, #16]
 80178a0:	b94b      	cbnz	r3, 80178b6 <__swsetup_r+0x9a>
 80178a2:	89a3      	ldrh	r3, [r4, #12]
 80178a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80178a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178ac:	d003      	beq.n	80178b6 <__swsetup_r+0x9a>
 80178ae:	4621      	mov	r1, r4
 80178b0:	4630      	mov	r0, r6
 80178b2:	f000 f84d 	bl	8017950 <__smakebuf_r>
 80178b6:	89a0      	ldrh	r0, [r4, #12]
 80178b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80178bc:	f010 0301 	ands.w	r3, r0, #1
 80178c0:	d00a      	beq.n	80178d8 <__swsetup_r+0xbc>
 80178c2:	2300      	movs	r3, #0
 80178c4:	60a3      	str	r3, [r4, #8]
 80178c6:	6963      	ldr	r3, [r4, #20]
 80178c8:	425b      	negs	r3, r3
 80178ca:	61a3      	str	r3, [r4, #24]
 80178cc:	6923      	ldr	r3, [r4, #16]
 80178ce:	b943      	cbnz	r3, 80178e2 <__swsetup_r+0xc6>
 80178d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80178d4:	d1ba      	bne.n	801784c <__swsetup_r+0x30>
 80178d6:	bd70      	pop	{r4, r5, r6, pc}
 80178d8:	0781      	lsls	r1, r0, #30
 80178da:	bf58      	it	pl
 80178dc:	6963      	ldrpl	r3, [r4, #20]
 80178de:	60a3      	str	r3, [r4, #8]
 80178e0:	e7f4      	b.n	80178cc <__swsetup_r+0xb0>
 80178e2:	2000      	movs	r0, #0
 80178e4:	e7f7      	b.n	80178d6 <__swsetup_r+0xba>
 80178e6:	bf00      	nop
 80178e8:	200001c0 	.word	0x200001c0
 80178ec:	0801834c 	.word	0x0801834c
 80178f0:	0801836c 	.word	0x0801836c
 80178f4:	0801832c 	.word	0x0801832c

080178f8 <abort>:
 80178f8:	b508      	push	{r3, lr}
 80178fa:	2006      	movs	r0, #6
 80178fc:	f000 f898 	bl	8017a30 <raise>
 8017900:	2001      	movs	r0, #1
 8017902:	f7ee ff57 	bl	80067b4 <_exit>

08017906 <__swhatbuf_r>:
 8017906:	b570      	push	{r4, r5, r6, lr}
 8017908:	460e      	mov	r6, r1
 801790a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801790e:	2900      	cmp	r1, #0
 8017910:	b096      	sub	sp, #88	; 0x58
 8017912:	4614      	mov	r4, r2
 8017914:	461d      	mov	r5, r3
 8017916:	da08      	bge.n	801792a <__swhatbuf_r+0x24>
 8017918:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801791c:	2200      	movs	r2, #0
 801791e:	602a      	str	r2, [r5, #0]
 8017920:	061a      	lsls	r2, r3, #24
 8017922:	d410      	bmi.n	8017946 <__swhatbuf_r+0x40>
 8017924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017928:	e00e      	b.n	8017948 <__swhatbuf_r+0x42>
 801792a:	466a      	mov	r2, sp
 801792c:	f000 f89c 	bl	8017a68 <_fstat_r>
 8017930:	2800      	cmp	r0, #0
 8017932:	dbf1      	blt.n	8017918 <__swhatbuf_r+0x12>
 8017934:	9a01      	ldr	r2, [sp, #4]
 8017936:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801793a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801793e:	425a      	negs	r2, r3
 8017940:	415a      	adcs	r2, r3
 8017942:	602a      	str	r2, [r5, #0]
 8017944:	e7ee      	b.n	8017924 <__swhatbuf_r+0x1e>
 8017946:	2340      	movs	r3, #64	; 0x40
 8017948:	2000      	movs	r0, #0
 801794a:	6023      	str	r3, [r4, #0]
 801794c:	b016      	add	sp, #88	; 0x58
 801794e:	bd70      	pop	{r4, r5, r6, pc}

08017950 <__smakebuf_r>:
 8017950:	898b      	ldrh	r3, [r1, #12]
 8017952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017954:	079d      	lsls	r5, r3, #30
 8017956:	4606      	mov	r6, r0
 8017958:	460c      	mov	r4, r1
 801795a:	d507      	bpl.n	801796c <__smakebuf_r+0x1c>
 801795c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017960:	6023      	str	r3, [r4, #0]
 8017962:	6123      	str	r3, [r4, #16]
 8017964:	2301      	movs	r3, #1
 8017966:	6163      	str	r3, [r4, #20]
 8017968:	b002      	add	sp, #8
 801796a:	bd70      	pop	{r4, r5, r6, pc}
 801796c:	ab01      	add	r3, sp, #4
 801796e:	466a      	mov	r2, sp
 8017970:	f7ff ffc9 	bl	8017906 <__swhatbuf_r>
 8017974:	9900      	ldr	r1, [sp, #0]
 8017976:	4605      	mov	r5, r0
 8017978:	4630      	mov	r0, r6
 801797a:	f7fb fde9 	bl	8013550 <_malloc_r>
 801797e:	b948      	cbnz	r0, 8017994 <__smakebuf_r+0x44>
 8017980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017984:	059a      	lsls	r2, r3, #22
 8017986:	d4ef      	bmi.n	8017968 <__smakebuf_r+0x18>
 8017988:	f023 0303 	bic.w	r3, r3, #3
 801798c:	f043 0302 	orr.w	r3, r3, #2
 8017990:	81a3      	strh	r3, [r4, #12]
 8017992:	e7e3      	b.n	801795c <__smakebuf_r+0xc>
 8017994:	4b0d      	ldr	r3, [pc, #52]	; (80179cc <__smakebuf_r+0x7c>)
 8017996:	62b3      	str	r3, [r6, #40]	; 0x28
 8017998:	89a3      	ldrh	r3, [r4, #12]
 801799a:	6020      	str	r0, [r4, #0]
 801799c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179a0:	81a3      	strh	r3, [r4, #12]
 80179a2:	9b00      	ldr	r3, [sp, #0]
 80179a4:	6163      	str	r3, [r4, #20]
 80179a6:	9b01      	ldr	r3, [sp, #4]
 80179a8:	6120      	str	r0, [r4, #16]
 80179aa:	b15b      	cbz	r3, 80179c4 <__smakebuf_r+0x74>
 80179ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179b0:	4630      	mov	r0, r6
 80179b2:	f000 f86b 	bl	8017a8c <_isatty_r>
 80179b6:	b128      	cbz	r0, 80179c4 <__smakebuf_r+0x74>
 80179b8:	89a3      	ldrh	r3, [r4, #12]
 80179ba:	f023 0303 	bic.w	r3, r3, #3
 80179be:	f043 0301 	orr.w	r3, r3, #1
 80179c2:	81a3      	strh	r3, [r4, #12]
 80179c4:	89a0      	ldrh	r0, [r4, #12]
 80179c6:	4305      	orrs	r5, r0
 80179c8:	81a5      	strh	r5, [r4, #12]
 80179ca:	e7cd      	b.n	8017968 <__smakebuf_r+0x18>
 80179cc:	080132f1 	.word	0x080132f1

080179d0 <_malloc_usable_size_r>:
 80179d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179d4:	1f18      	subs	r0, r3, #4
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	bfbc      	itt	lt
 80179da:	580b      	ldrlt	r3, [r1, r0]
 80179dc:	18c0      	addlt	r0, r0, r3
 80179de:	4770      	bx	lr

080179e0 <_raise_r>:
 80179e0:	291f      	cmp	r1, #31
 80179e2:	b538      	push	{r3, r4, r5, lr}
 80179e4:	4604      	mov	r4, r0
 80179e6:	460d      	mov	r5, r1
 80179e8:	d904      	bls.n	80179f4 <_raise_r+0x14>
 80179ea:	2316      	movs	r3, #22
 80179ec:	6003      	str	r3, [r0, #0]
 80179ee:	f04f 30ff 	mov.w	r0, #4294967295
 80179f2:	bd38      	pop	{r3, r4, r5, pc}
 80179f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80179f6:	b112      	cbz	r2, 80179fe <_raise_r+0x1e>
 80179f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179fc:	b94b      	cbnz	r3, 8017a12 <_raise_r+0x32>
 80179fe:	4620      	mov	r0, r4
 8017a00:	f000 f830 	bl	8017a64 <_getpid_r>
 8017a04:	462a      	mov	r2, r5
 8017a06:	4601      	mov	r1, r0
 8017a08:	4620      	mov	r0, r4
 8017a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a0e:	f000 b817 	b.w	8017a40 <_kill_r>
 8017a12:	2b01      	cmp	r3, #1
 8017a14:	d00a      	beq.n	8017a2c <_raise_r+0x4c>
 8017a16:	1c59      	adds	r1, r3, #1
 8017a18:	d103      	bne.n	8017a22 <_raise_r+0x42>
 8017a1a:	2316      	movs	r3, #22
 8017a1c:	6003      	str	r3, [r0, #0]
 8017a1e:	2001      	movs	r0, #1
 8017a20:	e7e7      	b.n	80179f2 <_raise_r+0x12>
 8017a22:	2400      	movs	r4, #0
 8017a24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017a28:	4628      	mov	r0, r5
 8017a2a:	4798      	blx	r3
 8017a2c:	2000      	movs	r0, #0
 8017a2e:	e7e0      	b.n	80179f2 <_raise_r+0x12>

08017a30 <raise>:
 8017a30:	4b02      	ldr	r3, [pc, #8]	; (8017a3c <raise+0xc>)
 8017a32:	4601      	mov	r1, r0
 8017a34:	6818      	ldr	r0, [r3, #0]
 8017a36:	f7ff bfd3 	b.w	80179e0 <_raise_r>
 8017a3a:	bf00      	nop
 8017a3c:	200001c0 	.word	0x200001c0

08017a40 <_kill_r>:
 8017a40:	b538      	push	{r3, r4, r5, lr}
 8017a42:	4d07      	ldr	r5, [pc, #28]	; (8017a60 <_kill_r+0x20>)
 8017a44:	2300      	movs	r3, #0
 8017a46:	4604      	mov	r4, r0
 8017a48:	4608      	mov	r0, r1
 8017a4a:	4611      	mov	r1, r2
 8017a4c:	602b      	str	r3, [r5, #0]
 8017a4e:	f7ee fea1 	bl	8006794 <_kill>
 8017a52:	1c43      	adds	r3, r0, #1
 8017a54:	d102      	bne.n	8017a5c <_kill_r+0x1c>
 8017a56:	682b      	ldr	r3, [r5, #0]
 8017a58:	b103      	cbz	r3, 8017a5c <_kill_r+0x1c>
 8017a5a:	6023      	str	r3, [r4, #0]
 8017a5c:	bd38      	pop	{r3, r4, r5, pc}
 8017a5e:	bf00      	nop
 8017a60:	200065a4 	.word	0x200065a4

08017a64 <_getpid_r>:
 8017a64:	f7ee be8e 	b.w	8006784 <_getpid>

08017a68 <_fstat_r>:
 8017a68:	b538      	push	{r3, r4, r5, lr}
 8017a6a:	4d07      	ldr	r5, [pc, #28]	; (8017a88 <_fstat_r+0x20>)
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	4604      	mov	r4, r0
 8017a70:	4608      	mov	r0, r1
 8017a72:	4611      	mov	r1, r2
 8017a74:	602b      	str	r3, [r5, #0]
 8017a76:	f7ee fed0 	bl	800681a <_fstat>
 8017a7a:	1c43      	adds	r3, r0, #1
 8017a7c:	d102      	bne.n	8017a84 <_fstat_r+0x1c>
 8017a7e:	682b      	ldr	r3, [r5, #0]
 8017a80:	b103      	cbz	r3, 8017a84 <_fstat_r+0x1c>
 8017a82:	6023      	str	r3, [r4, #0]
 8017a84:	bd38      	pop	{r3, r4, r5, pc}
 8017a86:	bf00      	nop
 8017a88:	200065a4 	.word	0x200065a4

08017a8c <_isatty_r>:
 8017a8c:	b538      	push	{r3, r4, r5, lr}
 8017a8e:	4d06      	ldr	r5, [pc, #24]	; (8017aa8 <_isatty_r+0x1c>)
 8017a90:	2300      	movs	r3, #0
 8017a92:	4604      	mov	r4, r0
 8017a94:	4608      	mov	r0, r1
 8017a96:	602b      	str	r3, [r5, #0]
 8017a98:	f7ee fecf 	bl	800683a <_isatty>
 8017a9c:	1c43      	adds	r3, r0, #1
 8017a9e:	d102      	bne.n	8017aa6 <_isatty_r+0x1a>
 8017aa0:	682b      	ldr	r3, [r5, #0]
 8017aa2:	b103      	cbz	r3, 8017aa6 <_isatty_r+0x1a>
 8017aa4:	6023      	str	r3, [r4, #0]
 8017aa6:	bd38      	pop	{r3, r4, r5, pc}
 8017aa8:	200065a4 	.word	0x200065a4

08017aac <lrintf>:
 8017aac:	ee10 3a10 	vmov	r3, s0
 8017ab0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017ab4:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8017ab8:	281e      	cmp	r0, #30
 8017aba:	b082      	sub	sp, #8
 8017abc:	dc2e      	bgt.n	8017b1c <lrintf+0x70>
 8017abe:	1c41      	adds	r1, r0, #1
 8017ac0:	da02      	bge.n	8017ac8 <lrintf+0x1c>
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	b002      	add	sp, #8
 8017ac6:	4770      	bx	lr
 8017ac8:	2816      	cmp	r0, #22
 8017aca:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8017ace:	dd09      	ble.n	8017ae4 <lrintf+0x38>
 8017ad0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017ad8:	3a96      	subs	r2, #150	; 0x96
 8017ada:	4090      	lsls	r0, r2
 8017adc:	2900      	cmp	r1, #0
 8017ade:	d0f1      	beq.n	8017ac4 <lrintf+0x18>
 8017ae0:	4240      	negs	r0, r0
 8017ae2:	e7ef      	b.n	8017ac4 <lrintf+0x18>
 8017ae4:	4b10      	ldr	r3, [pc, #64]	; (8017b28 <lrintf+0x7c>)
 8017ae6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017aea:	ed93 7a00 	vldr	s14, [r3]
 8017aee:	ee37 0a00 	vadd.f32	s0, s14, s0
 8017af2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017af6:	eddd 7a01 	vldr	s15, [sp, #4]
 8017afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017afe:	ee17 3a90 	vmov	r3, s15
 8017b02:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017b06:	d0dc      	beq.n	8017ac2 <lrintf+0x16>
 8017b08:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8017b0c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8017b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8017b14:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017b18:	40d8      	lsrs	r0, r3
 8017b1a:	e7df      	b.n	8017adc <lrintf+0x30>
 8017b1c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017b20:	ee17 0a90 	vmov	r0, s15
 8017b24:	e7ce      	b.n	8017ac4 <lrintf+0x18>
 8017b26:	bf00      	nop
 8017b28:	080187d4 	.word	0x080187d4

08017b2c <checkint>:
 8017b2c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8017b30:	2b7e      	cmp	r3, #126	; 0x7e
 8017b32:	dd10      	ble.n	8017b56 <checkint+0x2a>
 8017b34:	2b96      	cmp	r3, #150	; 0x96
 8017b36:	dc0c      	bgt.n	8017b52 <checkint+0x26>
 8017b38:	2201      	movs	r2, #1
 8017b3a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8017b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8017b42:	1e5a      	subs	r2, r3, #1
 8017b44:	4202      	tst	r2, r0
 8017b46:	d106      	bne.n	8017b56 <checkint+0x2a>
 8017b48:	4203      	tst	r3, r0
 8017b4a:	bf0c      	ite	eq
 8017b4c:	2002      	moveq	r0, #2
 8017b4e:	2001      	movne	r0, #1
 8017b50:	4770      	bx	lr
 8017b52:	2002      	movs	r0, #2
 8017b54:	4770      	bx	lr
 8017b56:	2000      	movs	r0, #0
 8017b58:	4770      	bx	lr
 8017b5a:	0000      	movs	r0, r0
 8017b5c:	0000      	movs	r0, r0
	...

08017b60 <powf>:
 8017b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017b62:	ee10 1a10 	vmov	r1, s0
 8017b66:	ee10 4a90 	vmov	r4, s1
 8017b6a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8017b6e:	0062      	lsls	r2, r4, #1
 8017b70:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017b74:	eef0 7a40 	vmov.f32	s15, s0
 8017b78:	f102 30ff 	add.w	r0, r2, #4294967295
 8017b7c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8017b80:	d252      	bcs.n	8017c28 <powf+0xc8>
 8017b82:	4298      	cmp	r0, r3
 8017b84:	d252      	bcs.n	8017c2c <powf+0xcc>
 8017b86:	2000      	movs	r0, #0
 8017b88:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8017b8c:	4ca0      	ldr	r4, [pc, #640]	; (8017e10 <powf+0x2b0>)
 8017b8e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8017b92:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8017b96:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8017b9a:	0dd2      	lsrs	r2, r2, #23
 8017b9c:	05d2      	lsls	r2, r2, #23
 8017b9e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8017ba2:	1a8b      	subs	r3, r1, r2
 8017ba4:	ed95 6b00 	vldr	d6, [r5]
 8017ba8:	ee07 3a90 	vmov	s15, r3
 8017bac:	15d2      	asrs	r2, r2, #23
 8017bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017bb2:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017bb6:	ed95 6b02 	vldr	d6, [r5, #8]
 8017bba:	ee25 2b05 	vmul.f64	d2, d5, d5
 8017bbe:	ee22 1b02 	vmul.f64	d1, d2, d2
 8017bc2:	ee07 2a90 	vmov	s15, r2
 8017bc6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8017bca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017bce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017bd2:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8017bd6:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8017bda:	eea5 3b06 	vfma.f64	d3, d5, d6
 8017bde:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8017be2:	eea5 6b04 	vfma.f64	d6, d5, d4
 8017be6:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8017bea:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8017bee:	eea5 7b04 	vfma.f64	d7, d5, d4
 8017bf2:	eea2 7b06 	vfma.f64	d7, d2, d6
 8017bf6:	eea3 7b01 	vfma.f64	d7, d3, d1
 8017bfa:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017bfe:	ee10 3a90 	vmov	r3, s1
 8017c02:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8017c06:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	f0c0 80b1 	bcc.w	8017d72 <powf+0x212>
 8017c10:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8017df0 <powf+0x290>
 8017c14:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c1c:	dd79      	ble.n	8017d12 <powf+0x1b2>
 8017c1e:	b003      	add	sp, #12
 8017c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c24:	f000 b940 	b.w	8017ea8 <__math_oflowf>
 8017c28:	4298      	cmp	r0, r3
 8017c2a:	d32d      	bcc.n	8017c88 <powf+0x128>
 8017c2c:	b952      	cbnz	r2, 8017c44 <powf+0xe4>
 8017c2e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8017c32:	005b      	lsls	r3, r3, #1
 8017c34:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8017c38:	f240 80c9 	bls.w	8017dce <powf+0x26e>
 8017c3c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8017c40:	b003      	add	sp, #12
 8017c42:	bd30      	pop	{r4, r5, pc}
 8017c44:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017c48:	d105      	bne.n	8017c56 <powf+0xf6>
 8017c4a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8017c4e:	0064      	lsls	r4, r4, #1
 8017c50:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8017c54:	e7f0      	b.n	8017c38 <powf+0xd8>
 8017c56:	004b      	lsls	r3, r1, #1
 8017c58:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8017c5c:	d8ee      	bhi.n	8017c3c <powf+0xdc>
 8017c5e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017c62:	d1eb      	bne.n	8017c3c <powf+0xdc>
 8017c64:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017c68:	f000 80b1 	beq.w	8017dce <powf+0x26e>
 8017c6c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017c70:	ea6f 0404 	mvn.w	r4, r4
 8017c74:	bf34      	ite	cc
 8017c76:	2300      	movcc	r3, #0
 8017c78:	2301      	movcs	r3, #1
 8017c7a:	0fe4      	lsrs	r4, r4, #31
 8017c7c:	42a3      	cmp	r3, r4
 8017c7e:	f040 80a9 	bne.w	8017dd4 <powf+0x274>
 8017c82:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8017c86:	e7db      	b.n	8017c40 <powf+0xe0>
 8017c88:	004d      	lsls	r5, r1, #1
 8017c8a:	1e6a      	subs	r2, r5, #1
 8017c8c:	429a      	cmp	r2, r3
 8017c8e:	d31c      	bcc.n	8017cca <powf+0x16a>
 8017c90:	2900      	cmp	r1, #0
 8017c92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017c96:	da0f      	bge.n	8017cb8 <powf+0x158>
 8017c98:	ee10 0a90 	vmov	r0, s1
 8017c9c:	f7ff ff46 	bl	8017b2c <checkint>
 8017ca0:	2801      	cmp	r0, #1
 8017ca2:	d109      	bne.n	8017cb8 <powf+0x158>
 8017ca4:	eeb1 0a40 	vneg.f32	s0, s0
 8017ca8:	b945      	cbnz	r5, 8017cbc <powf+0x15c>
 8017caa:	2c00      	cmp	r4, #0
 8017cac:	dac8      	bge.n	8017c40 <powf+0xe0>
 8017cae:	b003      	add	sp, #12
 8017cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017cb4:	f000 b8fe 	b.w	8017eb4 <__math_divzerof>
 8017cb8:	2000      	movs	r0, #0
 8017cba:	e7f5      	b.n	8017ca8 <powf+0x148>
 8017cbc:	2c00      	cmp	r4, #0
 8017cbe:	dabf      	bge.n	8017c40 <powf+0xe0>
 8017cc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017cc4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017cc8:	e7ba      	b.n	8017c40 <powf+0xe0>
 8017cca:	2900      	cmp	r1, #0
 8017ccc:	da1f      	bge.n	8017d0e <powf+0x1ae>
 8017cce:	ee10 0a90 	vmov	r0, s1
 8017cd2:	f7ff ff2b 	bl	8017b2c <checkint>
 8017cd6:	b920      	cbnz	r0, 8017ce2 <powf+0x182>
 8017cd8:	b003      	add	sp, #12
 8017cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017cde:	f000 b8f9 	b.w	8017ed4 <__math_invalidf>
 8017ce2:	2801      	cmp	r0, #1
 8017ce4:	bf14      	ite	ne
 8017ce6:	2000      	movne	r0, #0
 8017ce8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8017cec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017cf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8017cf4:	f4bf af48 	bcs.w	8017b88 <powf+0x28>
 8017cf8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8017e14 <powf+0x2b4>
 8017cfc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017d00:	ee10 3a10 	vmov	r3, s0
 8017d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d08:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8017d0c:	e73c      	b.n	8017b88 <powf+0x28>
 8017d0e:	2000      	movs	r0, #0
 8017d10:	e7ee      	b.n	8017cf0 <powf+0x190>
 8017d12:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8017df8 <powf+0x298>
 8017d16:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d1e:	dd10      	ble.n	8017d42 <powf+0x1e2>
 8017d20:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d158      	bne.n	8017dda <powf+0x27a>
 8017d28:	9300      	str	r3, [sp, #0]
 8017d2a:	eddd 7a00 	vldr	s15, [sp]
 8017d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017d36:	eef4 7a47 	vcmp.f32	s15, s14
 8017d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d3e:	f47f af6e 	bne.w	8017c1e <powf+0xbe>
 8017d42:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017e00 <powf+0x2a0>
 8017d46:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d4e:	d804      	bhi.n	8017d5a <powf+0x1fa>
 8017d50:	b003      	add	sp, #12
 8017d52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d56:	f000 b89b 	b.w	8017e90 <__math_uflowf>
 8017d5a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8017e08 <powf+0x2a8>
 8017d5e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d66:	d504      	bpl.n	8017d72 <powf+0x212>
 8017d68:	b003      	add	sp, #12
 8017d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d6e:	f000 b895 	b.w	8017e9c <__math_may_uflowf>
 8017d72:	4b29      	ldr	r3, [pc, #164]	; (8017e18 <powf+0x2b8>)
 8017d74:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8017d78:	ee30 6b07 	vadd.f64	d6, d0, d7
 8017d7c:	ee16 2a10 	vmov	r2, s12
 8017d80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017d84:	f002 011f 	and.w	r1, r2, #31
 8017d88:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8017d8c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8017d90:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017d94:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8017d98:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017d9c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8017da0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8017da4:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017da8:	686d      	ldr	r5, [r5, #4]
 8017daa:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8017dae:	1882      	adds	r2, r0, r2
 8017db0:	2300      	movs	r3, #0
 8017db2:	1918      	adds	r0, r3, r4
 8017db4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8017db8:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017dbc:	ec41 0b17 	vmov	d7, r0, r1
 8017dc0:	eea6 0b04 	vfma.f64	d0, d6, d4
 8017dc4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017dc8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017dcc:	e738      	b.n	8017c40 <powf+0xe0>
 8017dce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017dd2:	e735      	b.n	8017c40 <powf+0xe0>
 8017dd4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8017e1c <powf+0x2bc>
 8017dd8:	e732      	b.n	8017c40 <powf+0xe0>
 8017dda:	9301      	str	r3, [sp, #4]
 8017ddc:	eddd 7a01 	vldr	s15, [sp, #4]
 8017de0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017de8:	e7a5      	b.n	8017d36 <powf+0x1d6>
 8017dea:	bf00      	nop
 8017dec:	f3af 8000 	nop.w
 8017df0:	ffd1d571 	.word	0xffd1d571
 8017df4:	405fffff 	.word	0x405fffff
 8017df8:	ffa3aae2 	.word	0xffa3aae2
 8017dfc:	405fffff 	.word	0x405fffff
 8017e00:	00000000 	.word	0x00000000
 8017e04:	c062c000 	.word	0xc062c000
 8017e08:	00000000 	.word	0x00000000
 8017e0c:	c062a000 	.word	0xc062a000
 8017e10:	080187e0 	.word	0x080187e0
 8017e14:	4b000000 	.word	0x4b000000
 8017e18:	08018908 	.word	0x08018908
 8017e1c:	00000000 	.word	0x00000000

08017e20 <sqrtf>:
 8017e20:	b508      	push	{r3, lr}
 8017e22:	ed2d 8b02 	vpush	{d8}
 8017e26:	eeb0 8a40 	vmov.f32	s16, s0
 8017e2a:	f000 f817 	bl	8017e5c <__ieee754_sqrtf>
 8017e2e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e36:	d60c      	bvs.n	8017e52 <sqrtf+0x32>
 8017e38:	eddf 8a07 	vldr	s17, [pc, #28]	; 8017e58 <sqrtf+0x38>
 8017e3c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e44:	d505      	bpl.n	8017e52 <sqrtf+0x32>
 8017e46:	f7fb fa29 	bl	801329c <__errno>
 8017e4a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017e4e:	2321      	movs	r3, #33	; 0x21
 8017e50:	6003      	str	r3, [r0, #0]
 8017e52:	ecbd 8b02 	vpop	{d8}
 8017e56:	bd08      	pop	{r3, pc}
 8017e58:	00000000 	.word	0x00000000

08017e5c <__ieee754_sqrtf>:
 8017e5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017e60:	4770      	bx	lr

08017e62 <with_errnof>:
 8017e62:	b513      	push	{r0, r1, r4, lr}
 8017e64:	4604      	mov	r4, r0
 8017e66:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017e6a:	f7fb fa17 	bl	801329c <__errno>
 8017e6e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017e72:	6004      	str	r4, [r0, #0]
 8017e74:	b002      	add	sp, #8
 8017e76:	bd10      	pop	{r4, pc}

08017e78 <xflowf>:
 8017e78:	b130      	cbz	r0, 8017e88 <xflowf+0x10>
 8017e7a:	eef1 7a40 	vneg.f32	s15, s0
 8017e7e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017e82:	2022      	movs	r0, #34	; 0x22
 8017e84:	f7ff bfed 	b.w	8017e62 <with_errnof>
 8017e88:	eef0 7a40 	vmov.f32	s15, s0
 8017e8c:	e7f7      	b.n	8017e7e <xflowf+0x6>
	...

08017e90 <__math_uflowf>:
 8017e90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017e98 <__math_uflowf+0x8>
 8017e94:	f7ff bff0 	b.w	8017e78 <xflowf>
 8017e98:	10000000 	.word	0x10000000

08017e9c <__math_may_uflowf>:
 8017e9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017ea4 <__math_may_uflowf+0x8>
 8017ea0:	f7ff bfea 	b.w	8017e78 <xflowf>
 8017ea4:	1a200000 	.word	0x1a200000

08017ea8 <__math_oflowf>:
 8017ea8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017eb0 <__math_oflowf+0x8>
 8017eac:	f7ff bfe4 	b.w	8017e78 <xflowf>
 8017eb0:	70000000 	.word	0x70000000

08017eb4 <__math_divzerof>:
 8017eb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017eb8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8017ec2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017ed0 <__math_divzerof+0x1c>
 8017ec6:	2022      	movs	r0, #34	; 0x22
 8017ec8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017ecc:	f7ff bfc9 	b.w	8017e62 <with_errnof>
 8017ed0:	00000000 	.word	0x00000000

08017ed4 <__math_invalidf>:
 8017ed4:	eef0 7a40 	vmov.f32	s15, s0
 8017ed8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017edc:	eef4 7a67 	vcmp.f32	s15, s15
 8017ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8017ee8:	d602      	bvs.n	8017ef0 <__math_invalidf+0x1c>
 8017eea:	2021      	movs	r0, #33	; 0x21
 8017eec:	f7ff bfb9 	b.w	8017e62 <with_errnof>
 8017ef0:	4770      	bx	lr
	...

08017ef4 <_init>:
 8017ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ef6:	bf00      	nop
 8017ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017efa:	bc08      	pop	{r3}
 8017efc:	469e      	mov	lr, r3
 8017efe:	4770      	bx	lr

08017f00 <_fini>:
 8017f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f02:	bf00      	nop
 8017f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f06:	bc08      	pop	{r3}
 8017f08:	469e      	mov	lr, r3
 8017f0a:	4770      	bx	lr
